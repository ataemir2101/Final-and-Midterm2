
ATAF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000276f8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002b84  08027890  08027890  00037890  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802a414  0802a414  00040454  2**0
                  CONTENTS
  4 .ARM          00000008  0802a414  0802a414  0003a414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802a41c  0802a41c  00040454  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0802a41c  0802a41c  0003a41c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802a424  0802a424  0003a424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000454  20000000  0802a428  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00040454  2**0
                  CONTENTS
 10 .bss          00003ba8  20000454  20000454  00040454  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20003ffc  20003ffc  00040454  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00040454  2**0
                  CONTENTS, READONLY
 13 .debug_info   0010f53e  00000000  00000000  00040484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00011556  00000000  00000000  0014f9c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00004f68  00000000  00000000  00160f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00004d08  00000000  00000000  00165e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00033e48  00000000  00000000  0016ab88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000578ba  00000000  00000000  0019e9d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0018e3d0  00000000  00000000  001f628a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0038465a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00018320  00000000  00000000  003846ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000454 	.word	0x20000454
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08027870 	.word	0x08027870

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000458 	.word	0x20000458
 80001cc:	08027870 	.word	0x08027870

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strcmp>:
 8000270:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000274:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000278:	2a01      	cmp	r2, #1
 800027a:	bf28      	it	cs
 800027c:	429a      	cmpcs	r2, r3
 800027e:	d0f7      	beq.n	8000270 <strcmp>
 8000280:	1ad0      	subs	r0, r2, r3
 8000282:	4770      	bx	lr

08000284 <strlen>:
 8000284:	4603      	mov	r3, r0
 8000286:	f813 2b01 	ldrb.w	r2, [r3], #1
 800028a:	2a00      	cmp	r2, #0
 800028c:	d1fb      	bne.n	8000286 <strlen+0x2>
 800028e:	1a18      	subs	r0, r3, r0
 8000290:	3801      	subs	r0, #1
 8000292:	4770      	bx	lr

08000294 <__aeabi_drsub>:
 8000294:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000298:	e002      	b.n	80002a0 <__adddf3>
 800029a:	bf00      	nop

0800029c <__aeabi_dsub>:
 800029c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002a0 <__adddf3>:
 80002a0:	b530      	push	{r4, r5, lr}
 80002a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002aa:	ea94 0f05 	teq	r4, r5
 80002ae:	bf08      	it	eq
 80002b0:	ea90 0f02 	teqeq	r0, r2
 80002b4:	bf1f      	itttt	ne
 80002b6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ba:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c6:	f000 80e2 	beq.w	800048e <__adddf3+0x1ee>
 80002ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002d2:	bfb8      	it	lt
 80002d4:	426d      	neglt	r5, r5
 80002d6:	dd0c      	ble.n	80002f2 <__adddf3+0x52>
 80002d8:	442c      	add	r4, r5
 80002da:	ea80 0202 	eor.w	r2, r0, r2
 80002de:	ea81 0303 	eor.w	r3, r1, r3
 80002e2:	ea82 0000 	eor.w	r0, r2, r0
 80002e6:	ea83 0101 	eor.w	r1, r3, r1
 80002ea:	ea80 0202 	eor.w	r2, r0, r2
 80002ee:	ea81 0303 	eor.w	r3, r1, r3
 80002f2:	2d36      	cmp	r5, #54	; 0x36
 80002f4:	bf88      	it	hi
 80002f6:	bd30      	pophi	{r4, r5, pc}
 80002f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000300:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000304:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x70>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000314:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000318:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800031c:	d002      	beq.n	8000324 <__adddf3+0x84>
 800031e:	4252      	negs	r2, r2
 8000320:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000324:	ea94 0f05 	teq	r4, r5
 8000328:	f000 80a7 	beq.w	800047a <__adddf3+0x1da>
 800032c:	f1a4 0401 	sub.w	r4, r4, #1
 8000330:	f1d5 0e20 	rsbs	lr, r5, #32
 8000334:	db0d      	blt.n	8000352 <__adddf3+0xb2>
 8000336:	fa02 fc0e 	lsl.w	ip, r2, lr
 800033a:	fa22 f205 	lsr.w	r2, r2, r5
 800033e:	1880      	adds	r0, r0, r2
 8000340:	f141 0100 	adc.w	r1, r1, #0
 8000344:	fa03 f20e 	lsl.w	r2, r3, lr
 8000348:	1880      	adds	r0, r0, r2
 800034a:	fa43 f305 	asr.w	r3, r3, r5
 800034e:	4159      	adcs	r1, r3
 8000350:	e00e      	b.n	8000370 <__adddf3+0xd0>
 8000352:	f1a5 0520 	sub.w	r5, r5, #32
 8000356:	f10e 0e20 	add.w	lr, lr, #32
 800035a:	2a01      	cmp	r2, #1
 800035c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000360:	bf28      	it	cs
 8000362:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	18c0      	adds	r0, r0, r3
 800036c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000370:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000374:	d507      	bpl.n	8000386 <__adddf3+0xe6>
 8000376:	f04f 0e00 	mov.w	lr, #0
 800037a:	f1dc 0c00 	rsbs	ip, ip, #0
 800037e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000382:	eb6e 0101 	sbc.w	r1, lr, r1
 8000386:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800038a:	d31b      	bcc.n	80003c4 <__adddf3+0x124>
 800038c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000390:	d30c      	bcc.n	80003ac <__adddf3+0x10c>
 8000392:	0849      	lsrs	r1, r1, #1
 8000394:	ea5f 0030 	movs.w	r0, r0, rrx
 8000398:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800039c:	f104 0401 	add.w	r4, r4, #1
 80003a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a8:	f080 809a 	bcs.w	80004e0 <__adddf3+0x240>
 80003ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003b0:	bf08      	it	eq
 80003b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b6:	f150 0000 	adcs.w	r0, r0, #0
 80003ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003be:	ea41 0105 	orr.w	r1, r1, r5
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c8:	4140      	adcs	r0, r0
 80003ca:	eb41 0101 	adc.w	r1, r1, r1
 80003ce:	3c01      	subs	r4, #1
 80003d0:	bf28      	it	cs
 80003d2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d6:	d2e9      	bcs.n	80003ac <__adddf3+0x10c>
 80003d8:	f091 0f00 	teq	r1, #0
 80003dc:	bf04      	itt	eq
 80003de:	4601      	moveq	r1, r0
 80003e0:	2000      	moveq	r0, #0
 80003e2:	fab1 f381 	clz	r3, r1
 80003e6:	bf08      	it	eq
 80003e8:	3320      	addeq	r3, #32
 80003ea:	f1a3 030b 	sub.w	r3, r3, #11
 80003ee:	f1b3 0220 	subs.w	r2, r3, #32
 80003f2:	da0c      	bge.n	800040e <__adddf3+0x16e>
 80003f4:	320c      	adds	r2, #12
 80003f6:	dd08      	ble.n	800040a <__adddf3+0x16a>
 80003f8:	f102 0c14 	add.w	ip, r2, #20
 80003fc:	f1c2 020c 	rsb	r2, r2, #12
 8000400:	fa01 f00c 	lsl.w	r0, r1, ip
 8000404:	fa21 f102 	lsr.w	r1, r1, r2
 8000408:	e00c      	b.n	8000424 <__adddf3+0x184>
 800040a:	f102 0214 	add.w	r2, r2, #20
 800040e:	bfd8      	it	le
 8000410:	f1c2 0c20 	rsble	ip, r2, #32
 8000414:	fa01 f102 	lsl.w	r1, r1, r2
 8000418:	fa20 fc0c 	lsr.w	ip, r0, ip
 800041c:	bfdc      	itt	le
 800041e:	ea41 010c 	orrle.w	r1, r1, ip
 8000422:	4090      	lslle	r0, r2
 8000424:	1ae4      	subs	r4, r4, r3
 8000426:	bfa2      	ittt	ge
 8000428:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800042c:	4329      	orrge	r1, r5
 800042e:	bd30      	popge	{r4, r5, pc}
 8000430:	ea6f 0404 	mvn.w	r4, r4
 8000434:	3c1f      	subs	r4, #31
 8000436:	da1c      	bge.n	8000472 <__adddf3+0x1d2>
 8000438:	340c      	adds	r4, #12
 800043a:	dc0e      	bgt.n	800045a <__adddf3+0x1ba>
 800043c:	f104 0414 	add.w	r4, r4, #20
 8000440:	f1c4 0220 	rsb	r2, r4, #32
 8000444:	fa20 f004 	lsr.w	r0, r0, r4
 8000448:	fa01 f302 	lsl.w	r3, r1, r2
 800044c:	ea40 0003 	orr.w	r0, r0, r3
 8000450:	fa21 f304 	lsr.w	r3, r1, r4
 8000454:	ea45 0103 	orr.w	r1, r5, r3
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	f1c4 040c 	rsb	r4, r4, #12
 800045e:	f1c4 0220 	rsb	r2, r4, #32
 8000462:	fa20 f002 	lsr.w	r0, r0, r2
 8000466:	fa01 f304 	lsl.w	r3, r1, r4
 800046a:	ea40 0003 	orr.w	r0, r0, r3
 800046e:	4629      	mov	r1, r5
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	fa21 f004 	lsr.w	r0, r1, r4
 8000476:	4629      	mov	r1, r5
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	f094 0f00 	teq	r4, #0
 800047e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000482:	bf06      	itte	eq
 8000484:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000488:	3401      	addeq	r4, #1
 800048a:	3d01      	subne	r5, #1
 800048c:	e74e      	b.n	800032c <__adddf3+0x8c>
 800048e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000492:	bf18      	it	ne
 8000494:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000498:	d029      	beq.n	80004ee <__adddf3+0x24e>
 800049a:	ea94 0f05 	teq	r4, r5
 800049e:	bf08      	it	eq
 80004a0:	ea90 0f02 	teqeq	r0, r2
 80004a4:	d005      	beq.n	80004b2 <__adddf3+0x212>
 80004a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004aa:	bf04      	itt	eq
 80004ac:	4619      	moveq	r1, r3
 80004ae:	4610      	moveq	r0, r2
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	ea91 0f03 	teq	r1, r3
 80004b6:	bf1e      	ittt	ne
 80004b8:	2100      	movne	r1, #0
 80004ba:	2000      	movne	r0, #0
 80004bc:	bd30      	popne	{r4, r5, pc}
 80004be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004c2:	d105      	bne.n	80004d0 <__adddf3+0x230>
 80004c4:	0040      	lsls	r0, r0, #1
 80004c6:	4149      	adcs	r1, r1
 80004c8:	bf28      	it	cs
 80004ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d4:	bf3c      	itt	cc
 80004d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004da:	bd30      	popcc	{r4, r5, pc}
 80004dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e8:	f04f 0000 	mov.w	r0, #0
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004f2:	bf1a      	itte	ne
 80004f4:	4619      	movne	r1, r3
 80004f6:	4610      	movne	r0, r2
 80004f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004fc:	bf1c      	itt	ne
 80004fe:	460b      	movne	r3, r1
 8000500:	4602      	movne	r2, r0
 8000502:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000506:	bf06      	itte	eq
 8000508:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800050c:	ea91 0f03 	teqeq	r1, r3
 8000510:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	bf00      	nop

08000518 <__aeabi_ui2d>:
 8000518:	f090 0f00 	teq	r0, #0
 800051c:	bf04      	itt	eq
 800051e:	2100      	moveq	r1, #0
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000528:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052c:	f04f 0500 	mov.w	r5, #0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e750      	b.n	80003d8 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_i2d>:
 8000538:	f090 0f00 	teq	r0, #0
 800053c:	bf04      	itt	eq
 800053e:	2100      	moveq	r1, #0
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000548:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000550:	bf48      	it	mi
 8000552:	4240      	negmi	r0, r0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e73e      	b.n	80003d8 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_f2d>:
 800055c:	0042      	lsls	r2, r0, #1
 800055e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000562:	ea4f 0131 	mov.w	r1, r1, rrx
 8000566:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800056a:	bf1f      	itttt	ne
 800056c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000570:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000574:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000578:	4770      	bxne	lr
 800057a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057e:	bf08      	it	eq
 8000580:	4770      	bxeq	lr
 8000582:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000586:	bf04      	itt	eq
 8000588:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000594:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000598:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800059c:	e71c      	b.n	80003d8 <__adddf3+0x138>
 800059e:	bf00      	nop

080005a0 <__aeabi_ul2d>:
 80005a0:	ea50 0201 	orrs.w	r2, r0, r1
 80005a4:	bf08      	it	eq
 80005a6:	4770      	bxeq	lr
 80005a8:	b530      	push	{r4, r5, lr}
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	e00a      	b.n	80005c6 <__aeabi_l2d+0x16>

080005b0 <__aeabi_l2d>:
 80005b0:	ea50 0201 	orrs.w	r2, r0, r1
 80005b4:	bf08      	it	eq
 80005b6:	4770      	bxeq	lr
 80005b8:	b530      	push	{r4, r5, lr}
 80005ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005be:	d502      	bpl.n	80005c6 <__aeabi_l2d+0x16>
 80005c0:	4240      	negs	r0, r0
 80005c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005d2:	f43f aed8 	beq.w	8000386 <__adddf3+0xe6>
 80005d6:	f04f 0203 	mov.w	r2, #3
 80005da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005de:	bf18      	it	ne
 80005e0:	3203      	addne	r2, #3
 80005e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e6:	bf18      	it	ne
 80005e8:	3203      	addne	r2, #3
 80005ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ee:	f1c2 0320 	rsb	r3, r2, #32
 80005f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f6:	fa20 f002 	lsr.w	r0, r0, r2
 80005fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fe:	ea40 000e 	orr.w	r0, r0, lr
 8000602:	fa21 f102 	lsr.w	r1, r1, r2
 8000606:	4414      	add	r4, r2
 8000608:	e6bd      	b.n	8000386 <__adddf3+0xe6>
 800060a:	bf00      	nop

0800060c <__aeabi_dmul>:
 800060c:	b570      	push	{r4, r5, r6, lr}
 800060e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000612:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000616:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800061a:	bf1d      	ittte	ne
 800061c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000620:	ea94 0f0c 	teqne	r4, ip
 8000624:	ea95 0f0c 	teqne	r5, ip
 8000628:	f000 f8de 	bleq	80007e8 <__aeabi_dmul+0x1dc>
 800062c:	442c      	add	r4, r5
 800062e:	ea81 0603 	eor.w	r6, r1, r3
 8000632:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000636:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800063a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063e:	bf18      	it	ne
 8000640:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000644:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000648:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800064c:	d038      	beq.n	80006c0 <__aeabi_dmul+0xb4>
 800064e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000652:	f04f 0500 	mov.w	r5, #0
 8000656:	fbe1 e502 	umlal	lr, r5, r1, r2
 800065a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000662:	f04f 0600 	mov.w	r6, #0
 8000666:	fbe1 5603 	umlal	r5, r6, r1, r3
 800066a:	f09c 0f00 	teq	ip, #0
 800066e:	bf18      	it	ne
 8000670:	f04e 0e01 	orrne.w	lr, lr, #1
 8000674:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000678:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800067c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000680:	d204      	bcs.n	800068c <__aeabi_dmul+0x80>
 8000682:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000686:	416d      	adcs	r5, r5
 8000688:	eb46 0606 	adc.w	r6, r6, r6
 800068c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000690:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000694:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000698:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800069c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a4:	bf88      	it	hi
 80006a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006aa:	d81e      	bhi.n	80006ea <__aeabi_dmul+0xde>
 80006ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006b0:	bf08      	it	eq
 80006b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b6:	f150 0000 	adcs.w	r0, r0, #0
 80006ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006be:	bd70      	pop	{r4, r5, r6, pc}
 80006c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c4:	ea46 0101 	orr.w	r1, r6, r1
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	ea81 0103 	eor.w	r1, r1, r3
 80006d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d4:	bfc2      	ittt	gt
 80006d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006de:	bd70      	popgt	{r4, r5, r6, pc}
 80006e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e4:	f04f 0e00 	mov.w	lr, #0
 80006e8:	3c01      	subs	r4, #1
 80006ea:	f300 80ab 	bgt.w	8000844 <__aeabi_dmul+0x238>
 80006ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006f2:	bfde      	ittt	le
 80006f4:	2000      	movle	r0, #0
 80006f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006fa:	bd70      	pople	{r4, r5, r6, pc}
 80006fc:	f1c4 0400 	rsb	r4, r4, #0
 8000700:	3c20      	subs	r4, #32
 8000702:	da35      	bge.n	8000770 <__aeabi_dmul+0x164>
 8000704:	340c      	adds	r4, #12
 8000706:	dc1b      	bgt.n	8000740 <__aeabi_dmul+0x134>
 8000708:	f104 0414 	add.w	r4, r4, #20
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f305 	lsl.w	r3, r0, r5
 8000714:	fa20 f004 	lsr.w	r0, r0, r4
 8000718:	fa01 f205 	lsl.w	r2, r1, r5
 800071c:	ea40 0002 	orr.w	r0, r0, r2
 8000720:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000724:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000728:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800072c:	fa21 f604 	lsr.w	r6, r1, r4
 8000730:	eb42 0106 	adc.w	r1, r2, r6
 8000734:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000738:	bf08      	it	eq
 800073a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073e:	bd70      	pop	{r4, r5, r6, pc}
 8000740:	f1c4 040c 	rsb	r4, r4, #12
 8000744:	f1c4 0520 	rsb	r5, r4, #32
 8000748:	fa00 f304 	lsl.w	r3, r0, r4
 800074c:	fa20 f005 	lsr.w	r0, r0, r5
 8000750:	fa01 f204 	lsl.w	r2, r1, r4
 8000754:	ea40 0002 	orr.w	r0, r0, r2
 8000758:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	f141 0100 	adc.w	r1, r1, #0
 8000764:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000768:	bf08      	it	eq
 800076a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076e:	bd70      	pop	{r4, r5, r6, pc}
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f205 	lsl.w	r2, r0, r5
 8000778:	ea4e 0e02 	orr.w	lr, lr, r2
 800077c:	fa20 f304 	lsr.w	r3, r0, r4
 8000780:	fa01 f205 	lsl.w	r2, r1, r5
 8000784:	ea43 0302 	orr.w	r3, r3, r2
 8000788:	fa21 f004 	lsr.w	r0, r1, r4
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	fa21 f204 	lsr.w	r2, r1, r4
 8000794:	ea20 0002 	bic.w	r0, r0, r2
 8000798:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800079c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a0:	bf08      	it	eq
 80007a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a6:	bd70      	pop	{r4, r5, r6, pc}
 80007a8:	f094 0f00 	teq	r4, #0
 80007ac:	d10f      	bne.n	80007ce <__aeabi_dmul+0x1c2>
 80007ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007b2:	0040      	lsls	r0, r0, #1
 80007b4:	eb41 0101 	adc.w	r1, r1, r1
 80007b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007bc:	bf08      	it	eq
 80007be:	3c01      	subeq	r4, #1
 80007c0:	d0f7      	beq.n	80007b2 <__aeabi_dmul+0x1a6>
 80007c2:	ea41 0106 	orr.w	r1, r1, r6
 80007c6:	f095 0f00 	teq	r5, #0
 80007ca:	bf18      	it	ne
 80007cc:	4770      	bxne	lr
 80007ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007d2:	0052      	lsls	r2, r2, #1
 80007d4:	eb43 0303 	adc.w	r3, r3, r3
 80007d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007dc:	bf08      	it	eq
 80007de:	3d01      	subeq	r5, #1
 80007e0:	d0f7      	beq.n	80007d2 <__aeabi_dmul+0x1c6>
 80007e2:	ea43 0306 	orr.w	r3, r3, r6
 80007e6:	4770      	bx	lr
 80007e8:	ea94 0f0c 	teq	r4, ip
 80007ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f0:	bf18      	it	ne
 80007f2:	ea95 0f0c 	teqne	r5, ip
 80007f6:	d00c      	beq.n	8000812 <__aeabi_dmul+0x206>
 80007f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fc:	bf18      	it	ne
 80007fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000802:	d1d1      	bne.n	80007a8 <__aeabi_dmul+0x19c>
 8000804:	ea81 0103 	eor.w	r1, r1, r3
 8000808:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000816:	bf06      	itte	eq
 8000818:	4610      	moveq	r0, r2
 800081a:	4619      	moveq	r1, r3
 800081c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000820:	d019      	beq.n	8000856 <__aeabi_dmul+0x24a>
 8000822:	ea94 0f0c 	teq	r4, ip
 8000826:	d102      	bne.n	800082e <__aeabi_dmul+0x222>
 8000828:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800082c:	d113      	bne.n	8000856 <__aeabi_dmul+0x24a>
 800082e:	ea95 0f0c 	teq	r5, ip
 8000832:	d105      	bne.n	8000840 <__aeabi_dmul+0x234>
 8000834:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000838:	bf1c      	itt	ne
 800083a:	4610      	movne	r0, r2
 800083c:	4619      	movne	r1, r3
 800083e:	d10a      	bne.n	8000856 <__aeabi_dmul+0x24a>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000850:	f04f 0000 	mov.w	r0, #0
 8000854:	bd70      	pop	{r4, r5, r6, pc}
 8000856:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800085a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085e:	bd70      	pop	{r4, r5, r6, pc}

08000860 <__aeabi_ddiv>:
 8000860:	b570      	push	{r4, r5, r6, lr}
 8000862:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000866:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800086a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086e:	bf1d      	ittte	ne
 8000870:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000874:	ea94 0f0c 	teqne	r4, ip
 8000878:	ea95 0f0c 	teqne	r5, ip
 800087c:	f000 f8a7 	bleq	80009ce <__aeabi_ddiv+0x16e>
 8000880:	eba4 0405 	sub.w	r4, r4, r5
 8000884:	ea81 0e03 	eor.w	lr, r1, r3
 8000888:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800088c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000890:	f000 8088 	beq.w	80009a4 <__aeabi_ddiv+0x144>
 8000894:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000898:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800089c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b8:	429d      	cmp	r5, r3
 80008ba:	bf08      	it	eq
 80008bc:	4296      	cmpeq	r6, r2
 80008be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c6:	d202      	bcs.n	80008ce <__aeabi_ddiv+0x6e>
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	1ab6      	subs	r6, r6, r2
 80008d0:	eb65 0503 	sbc.w	r5, r5, r3
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000902:	bf22      	ittt	cs
 8000904:	1ab6      	subcs	r6, r6, r2
 8000906:	4675      	movcs	r5, lr
 8000908:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800090c:	085b      	lsrs	r3, r3, #1
 800090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000912:	ebb6 0e02 	subs.w	lr, r6, r2
 8000916:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091a:	bf22      	ittt	cs
 800091c:	1ab6      	subcs	r6, r6, r2
 800091e:	4675      	movcs	r5, lr
 8000920:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	ebb6 0e02 	subs.w	lr, r6, r2
 800092e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000932:	bf22      	ittt	cs
 8000934:	1ab6      	subcs	r6, r6, r2
 8000936:	4675      	movcs	r5, lr
 8000938:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800093c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000940:	d018      	beq.n	8000974 <__aeabi_ddiv+0x114>
 8000942:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000946:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800094a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000952:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000956:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800095a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095e:	d1c0      	bne.n	80008e2 <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	d10b      	bne.n	800097e <__aeabi_ddiv+0x11e>
 8000966:	ea41 0100 	orr.w	r1, r1, r0
 800096a:	f04f 0000 	mov.w	r0, #0
 800096e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000972:	e7b6      	b.n	80008e2 <__aeabi_ddiv+0x82>
 8000974:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000978:	bf04      	itt	eq
 800097a:	4301      	orreq	r1, r0
 800097c:	2000      	moveq	r0, #0
 800097e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000982:	bf88      	it	hi
 8000984:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000988:	f63f aeaf 	bhi.w	80006ea <__aeabi_dmul+0xde>
 800098c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000990:	bf04      	itt	eq
 8000992:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000996:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800099a:	f150 0000 	adcs.w	r0, r0, #0
 800099e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009a2:	bd70      	pop	{r4, r5, r6, pc}
 80009a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b0:	bfc2      	ittt	gt
 80009b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ba:	bd70      	popgt	{r4, r5, r6, pc}
 80009bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c0:	f04f 0e00 	mov.w	lr, #0
 80009c4:	3c01      	subs	r4, #1
 80009c6:	e690      	b.n	80006ea <__aeabi_dmul+0xde>
 80009c8:	ea45 0e06 	orr.w	lr, r5, r6
 80009cc:	e68d      	b.n	80006ea <__aeabi_dmul+0xde>
 80009ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009d2:	ea94 0f0c 	teq	r4, ip
 80009d6:	bf08      	it	eq
 80009d8:	ea95 0f0c 	teqeq	r5, ip
 80009dc:	f43f af3b 	beq.w	8000856 <__aeabi_dmul+0x24a>
 80009e0:	ea94 0f0c 	teq	r4, ip
 80009e4:	d10a      	bne.n	80009fc <__aeabi_ddiv+0x19c>
 80009e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ea:	f47f af34 	bne.w	8000856 <__aeabi_dmul+0x24a>
 80009ee:	ea95 0f0c 	teq	r5, ip
 80009f2:	f47f af25 	bne.w	8000840 <__aeabi_dmul+0x234>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e72c      	b.n	8000856 <__aeabi_dmul+0x24a>
 80009fc:	ea95 0f0c 	teq	r5, ip
 8000a00:	d106      	bne.n	8000a10 <__aeabi_ddiv+0x1b0>
 8000a02:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a06:	f43f aefd 	beq.w	8000804 <__aeabi_dmul+0x1f8>
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	e722      	b.n	8000856 <__aeabi_dmul+0x24a>
 8000a10:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a14:	bf18      	it	ne
 8000a16:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a1a:	f47f aec5 	bne.w	80007a8 <__aeabi_dmul+0x19c>
 8000a1e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a22:	f47f af0d 	bne.w	8000840 <__aeabi_dmul+0x234>
 8000a26:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a2a:	f47f aeeb 	bne.w	8000804 <__aeabi_dmul+0x1f8>
 8000a2e:	e712      	b.n	8000856 <__aeabi_dmul+0x24a>

08000a30 <__gedf2>:
 8000a30:	f04f 3cff 	mov.w	ip, #4294967295
 8000a34:	e006      	b.n	8000a44 <__cmpdf2+0x4>
 8000a36:	bf00      	nop

08000a38 <__ledf2>:
 8000a38:	f04f 0c01 	mov.w	ip, #1
 8000a3c:	e002      	b.n	8000a44 <__cmpdf2+0x4>
 8000a3e:	bf00      	nop

08000a40 <__cmpdf2>:
 8000a40:	f04f 0c01 	mov.w	ip, #1
 8000a44:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	bf18      	it	ne
 8000a56:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a5a:	d01b      	beq.n	8000a94 <__cmpdf2+0x54>
 8000a5c:	b001      	add	sp, #4
 8000a5e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a62:	bf0c      	ite	eq
 8000a64:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a68:	ea91 0f03 	teqne	r1, r3
 8000a6c:	bf02      	ittt	eq
 8000a6e:	ea90 0f02 	teqeq	r0, r2
 8000a72:	2000      	moveq	r0, #0
 8000a74:	4770      	bxeq	lr
 8000a76:	f110 0f00 	cmn.w	r0, #0
 8000a7a:	ea91 0f03 	teq	r1, r3
 8000a7e:	bf58      	it	pl
 8000a80:	4299      	cmppl	r1, r3
 8000a82:	bf08      	it	eq
 8000a84:	4290      	cmpeq	r0, r2
 8000a86:	bf2c      	ite	cs
 8000a88:	17d8      	asrcs	r0, r3, #31
 8000a8a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8e:	f040 0001 	orr.w	r0, r0, #1
 8000a92:	4770      	bx	lr
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__cmpdf2+0x64>
 8000a9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa2:	d107      	bne.n	8000ab4 <__cmpdf2+0x74>
 8000aa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d1d6      	bne.n	8000a5c <__cmpdf2+0x1c>
 8000aae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab2:	d0d3      	beq.n	8000a5c <__cmpdf2+0x1c>
 8000ab4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_cdrcmple>:
 8000abc:	4684      	mov	ip, r0
 8000abe:	4610      	mov	r0, r2
 8000ac0:	4662      	mov	r2, ip
 8000ac2:	468c      	mov	ip, r1
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4663      	mov	r3, ip
 8000ac8:	e000      	b.n	8000acc <__aeabi_cdcmpeq>
 8000aca:	bf00      	nop

08000acc <__aeabi_cdcmpeq>:
 8000acc:	b501      	push	{r0, lr}
 8000ace:	f7ff ffb7 	bl	8000a40 <__cmpdf2>
 8000ad2:	2800      	cmp	r0, #0
 8000ad4:	bf48      	it	mi
 8000ad6:	f110 0f00 	cmnmi.w	r0, #0
 8000ada:	bd01      	pop	{r0, pc}

08000adc <__aeabi_dcmpeq>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff fff4 	bl	8000acc <__aeabi_cdcmpeq>
 8000ae4:	bf0c      	ite	eq
 8000ae6:	2001      	moveq	r0, #1
 8000ae8:	2000      	movne	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmplt>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffea 	bl	8000acc <__aeabi_cdcmpeq>
 8000af8:	bf34      	ite	cc
 8000afa:	2001      	movcc	r0, #1
 8000afc:	2000      	movcs	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmple>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffe0 	bl	8000acc <__aeabi_cdcmpeq>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpge>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffce 	bl	8000abc <__aeabi_cdrcmple>
 8000b20:	bf94      	ite	ls
 8000b22:	2001      	movls	r0, #1
 8000b24:	2000      	movhi	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpgt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffc4 	bl	8000abc <__aeabi_cdrcmple>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmpun>:
 8000b40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d102      	bne.n	8000b50 <__aeabi_dcmpun+0x10>
 8000b4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4e:	d10a      	bne.n	8000b66 <__aeabi_dcmpun+0x26>
 8000b50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b58:	d102      	bne.n	8000b60 <__aeabi_dcmpun+0x20>
 8000b5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5e:	d102      	bne.n	8000b66 <__aeabi_dcmpun+0x26>
 8000b60:	f04f 0000 	mov.w	r0, #0
 8000b64:	4770      	bx	lr
 8000b66:	f04f 0001 	mov.w	r0, #1
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_d2uiz>:
 8000bbc:	004a      	lsls	r2, r1, #1
 8000bbe:	d211      	bcs.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc4:	d211      	bcs.n	8000bea <__aeabi_d2uiz+0x2e>
 8000bc6:	d50d      	bpl.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bcc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd0:	d40e      	bmi.n	8000bf0 <__aeabi_d2uiz+0x34>
 8000bd2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bda:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	4770      	bx	lr
 8000be4:	f04f 0000 	mov.w	r0, #0
 8000be8:	4770      	bx	lr
 8000bea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bee:	d102      	bne.n	8000bf6 <__aeabi_d2uiz+0x3a>
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf4:	4770      	bx	lr
 8000bf6:	f04f 0000 	mov.w	r0, #0
 8000bfa:	4770      	bx	lr

08000bfc <__aeabi_d2f>:
 8000bfc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c04:	bf24      	itt	cs
 8000c06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0e:	d90d      	bls.n	8000c2c <__aeabi_d2f+0x30>
 8000c10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c24:	bf08      	it	eq
 8000c26:	f020 0001 	biceq.w	r0, r0, #1
 8000c2a:	4770      	bx	lr
 8000c2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c30:	d121      	bne.n	8000c76 <__aeabi_d2f+0x7a>
 8000c32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c36:	bfbc      	itt	lt
 8000c38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	4770      	bxlt	lr
 8000c3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c46:	f1c2 0218 	rsb	r2, r2, #24
 8000c4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c52:	fa20 f002 	lsr.w	r0, r0, r2
 8000c56:	bf18      	it	ne
 8000c58:	f040 0001 	orrne.w	r0, r0, #1
 8000c5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c68:	ea40 000c 	orr.w	r0, r0, ip
 8000c6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c74:	e7cc      	b.n	8000c10 <__aeabi_d2f+0x14>
 8000c76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c7a:	d107      	bne.n	8000c8c <__aeabi_d2f+0x90>
 8000c7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c80:	bf1e      	ittt	ne
 8000c82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c8a:	4770      	bxne	lr
 8000c8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop

08000c9c <__aeabi_ldivmod>:
 8000c9c:	b97b      	cbnz	r3, 8000cbe <__aeabi_ldivmod+0x22>
 8000c9e:	b972      	cbnz	r2, 8000cbe <__aeabi_ldivmod+0x22>
 8000ca0:	2900      	cmp	r1, #0
 8000ca2:	bfbe      	ittt	lt
 8000ca4:	2000      	movlt	r0, #0
 8000ca6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000caa:	e006      	blt.n	8000cba <__aeabi_ldivmod+0x1e>
 8000cac:	bf08      	it	eq
 8000cae:	2800      	cmpeq	r0, #0
 8000cb0:	bf1c      	itt	ne
 8000cb2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cb6:	f04f 30ff 	movne.w	r0, #4294967295
 8000cba:	f000 b9f5 	b.w	80010a8 <__aeabi_idiv0>
 8000cbe:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc6:	2900      	cmp	r1, #0
 8000cc8:	db09      	blt.n	8000cde <__aeabi_ldivmod+0x42>
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	db1a      	blt.n	8000d04 <__aeabi_ldivmod+0x68>
 8000cce:	f000 f883 	bl	8000dd8 <__udivmoddi4>
 8000cd2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cda:	b004      	add	sp, #16
 8000cdc:	4770      	bx	lr
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	db1b      	blt.n	8000d20 <__aeabi_ldivmod+0x84>
 8000ce8:	f000 f876 	bl	8000dd8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4240      	negs	r0, r0
 8000cf8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cfc:	4252      	negs	r2, r2
 8000cfe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d02:	4770      	bx	lr
 8000d04:	4252      	negs	r2, r2
 8000d06:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d0a:	f000 f865 	bl	8000dd8 <__udivmoddi4>
 8000d0e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d16:	b004      	add	sp, #16
 8000d18:	4240      	negs	r0, r0
 8000d1a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1e:	4770      	bx	lr
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	f000 f857 	bl	8000dd8 <__udivmoddi4>
 8000d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d32:	b004      	add	sp, #16
 8000d34:	4252      	negs	r2, r2
 8000d36:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d3a:	4770      	bx	lr

08000d3c <__aeabi_uldivmod>:
 8000d3c:	b953      	cbnz	r3, 8000d54 <__aeabi_uldivmod+0x18>
 8000d3e:	b94a      	cbnz	r2, 8000d54 <__aeabi_uldivmod+0x18>
 8000d40:	2900      	cmp	r1, #0
 8000d42:	bf08      	it	eq
 8000d44:	2800      	cmpeq	r0, #0
 8000d46:	bf1c      	itt	ne
 8000d48:	f04f 31ff 	movne.w	r1, #4294967295
 8000d4c:	f04f 30ff 	movne.w	r0, #4294967295
 8000d50:	f000 b9aa 	b.w	80010a8 <__aeabi_idiv0>
 8000d54:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d5c:	f000 f83c 	bl	8000dd8 <__udivmoddi4>
 8000d60:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d68:	b004      	add	sp, #16
 8000d6a:	4770      	bx	lr

08000d6c <__aeabi_d2lz>:
 8000d6c:	b538      	push	{r3, r4, r5, lr}
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2300      	movs	r3, #0
 8000d72:	4604      	mov	r4, r0
 8000d74:	460d      	mov	r5, r1
 8000d76:	f7ff febb 	bl	8000af0 <__aeabi_dcmplt>
 8000d7a:	b928      	cbnz	r0, 8000d88 <__aeabi_d2lz+0x1c>
 8000d7c:	4620      	mov	r0, r4
 8000d7e:	4629      	mov	r1, r5
 8000d80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d84:	f000 b80a 	b.w	8000d9c <__aeabi_d2ulz>
 8000d88:	4620      	mov	r0, r4
 8000d8a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d8e:	f000 f805 	bl	8000d9c <__aeabi_d2ulz>
 8000d92:	4240      	negs	r0, r0
 8000d94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d98:	bd38      	pop	{r3, r4, r5, pc}
 8000d9a:	bf00      	nop

08000d9c <__aeabi_d2ulz>:
 8000d9c:	b5d0      	push	{r4, r6, r7, lr}
 8000d9e:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <__aeabi_d2ulz+0x34>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	4606      	mov	r6, r0
 8000da4:	460f      	mov	r7, r1
 8000da6:	f7ff fc31 	bl	800060c <__aeabi_dmul>
 8000daa:	f7ff ff07 	bl	8000bbc <__aeabi_d2uiz>
 8000dae:	4604      	mov	r4, r0
 8000db0:	f7ff fbb2 	bl	8000518 <__aeabi_ui2d>
 8000db4:	4b07      	ldr	r3, [pc, #28]	; (8000dd4 <__aeabi_d2ulz+0x38>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	f7ff fc28 	bl	800060c <__aeabi_dmul>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	460b      	mov	r3, r1
 8000dc0:	4630      	mov	r0, r6
 8000dc2:	4639      	mov	r1, r7
 8000dc4:	f7ff fa6a 	bl	800029c <__aeabi_dsub>
 8000dc8:	f7ff fef8 	bl	8000bbc <__aeabi_d2uiz>
 8000dcc:	4621      	mov	r1, r4
 8000dce:	bdd0      	pop	{r4, r6, r7, pc}
 8000dd0:	3df00000 	.word	0x3df00000
 8000dd4:	41f00000 	.word	0x41f00000

08000dd8 <__udivmoddi4>:
 8000dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ddc:	9d08      	ldr	r5, [sp, #32]
 8000dde:	4604      	mov	r4, r0
 8000de0:	468e      	mov	lr, r1
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d14d      	bne.n	8000e82 <__udivmoddi4+0xaa>
 8000de6:	428a      	cmp	r2, r1
 8000de8:	4694      	mov	ip, r2
 8000dea:	d969      	bls.n	8000ec0 <__udivmoddi4+0xe8>
 8000dec:	fab2 f282 	clz	r2, r2
 8000df0:	b152      	cbz	r2, 8000e08 <__udivmoddi4+0x30>
 8000df2:	fa01 f302 	lsl.w	r3, r1, r2
 8000df6:	f1c2 0120 	rsb	r1, r2, #32
 8000dfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000dfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e02:	ea41 0e03 	orr.w	lr, r1, r3
 8000e06:	4094      	lsls	r4, r2
 8000e08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e0c:	0c21      	lsrs	r1, r4, #16
 8000e0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000e12:	fa1f f78c 	uxth.w	r7, ip
 8000e16:	fb08 e316 	mls	r3, r8, r6, lr
 8000e1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e1e:	fb06 f107 	mul.w	r1, r6, r7
 8000e22:	4299      	cmp	r1, r3
 8000e24:	d90a      	bls.n	8000e3c <__udivmoddi4+0x64>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e2e:	f080 811f 	bcs.w	8001070 <__udivmoddi4+0x298>
 8000e32:	4299      	cmp	r1, r3
 8000e34:	f240 811c 	bls.w	8001070 <__udivmoddi4+0x298>
 8000e38:	3e02      	subs	r6, #2
 8000e3a:	4463      	add	r3, ip
 8000e3c:	1a5b      	subs	r3, r3, r1
 8000e3e:	b2a4      	uxth	r4, r4
 8000e40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e44:	fb08 3310 	mls	r3, r8, r0, r3
 8000e48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e4c:	fb00 f707 	mul.w	r7, r0, r7
 8000e50:	42a7      	cmp	r7, r4
 8000e52:	d90a      	bls.n	8000e6a <__udivmoddi4+0x92>
 8000e54:	eb1c 0404 	adds.w	r4, ip, r4
 8000e58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e5c:	f080 810a 	bcs.w	8001074 <__udivmoddi4+0x29c>
 8000e60:	42a7      	cmp	r7, r4
 8000e62:	f240 8107 	bls.w	8001074 <__udivmoddi4+0x29c>
 8000e66:	4464      	add	r4, ip
 8000e68:	3802      	subs	r0, #2
 8000e6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e6e:	1be4      	subs	r4, r4, r7
 8000e70:	2600      	movs	r6, #0
 8000e72:	b11d      	cbz	r5, 8000e7c <__udivmoddi4+0xa4>
 8000e74:	40d4      	lsrs	r4, r2
 8000e76:	2300      	movs	r3, #0
 8000e78:	e9c5 4300 	strd	r4, r3, [r5]
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	428b      	cmp	r3, r1
 8000e84:	d909      	bls.n	8000e9a <__udivmoddi4+0xc2>
 8000e86:	2d00      	cmp	r5, #0
 8000e88:	f000 80ef 	beq.w	800106a <__udivmoddi4+0x292>
 8000e8c:	2600      	movs	r6, #0
 8000e8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000e92:	4630      	mov	r0, r6
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	fab3 f683 	clz	r6, r3
 8000e9e:	2e00      	cmp	r6, #0
 8000ea0:	d14a      	bne.n	8000f38 <__udivmoddi4+0x160>
 8000ea2:	428b      	cmp	r3, r1
 8000ea4:	d302      	bcc.n	8000eac <__udivmoddi4+0xd4>
 8000ea6:	4282      	cmp	r2, r0
 8000ea8:	f200 80f9 	bhi.w	800109e <__udivmoddi4+0x2c6>
 8000eac:	1a84      	subs	r4, r0, r2
 8000eae:	eb61 0303 	sbc.w	r3, r1, r3
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	469e      	mov	lr, r3
 8000eb6:	2d00      	cmp	r5, #0
 8000eb8:	d0e0      	beq.n	8000e7c <__udivmoddi4+0xa4>
 8000eba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ebe:	e7dd      	b.n	8000e7c <__udivmoddi4+0xa4>
 8000ec0:	b902      	cbnz	r2, 8000ec4 <__udivmoddi4+0xec>
 8000ec2:	deff      	udf	#255	; 0xff
 8000ec4:	fab2 f282 	clz	r2, r2
 8000ec8:	2a00      	cmp	r2, #0
 8000eca:	f040 8092 	bne.w	8000ff2 <__udivmoddi4+0x21a>
 8000ece:	eba1 010c 	sub.w	r1, r1, ip
 8000ed2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed6:	fa1f fe8c 	uxth.w	lr, ip
 8000eda:	2601      	movs	r6, #1
 8000edc:	0c20      	lsrs	r0, r4, #16
 8000ede:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ee2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ee6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eea:	fb0e f003 	mul.w	r0, lr, r3
 8000eee:	4288      	cmp	r0, r1
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x12c>
 8000ef2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000efa:	d202      	bcs.n	8000f02 <__udivmoddi4+0x12a>
 8000efc:	4288      	cmp	r0, r1
 8000efe:	f200 80cb 	bhi.w	8001098 <__udivmoddi4+0x2c0>
 8000f02:	4643      	mov	r3, r8
 8000f04:	1a09      	subs	r1, r1, r0
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000f10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f14:	fb0e fe00 	mul.w	lr, lr, r0
 8000f18:	45a6      	cmp	lr, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x156>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f24:	d202      	bcs.n	8000f2c <__udivmoddi4+0x154>
 8000f26:	45a6      	cmp	lr, r4
 8000f28:	f200 80bb 	bhi.w	80010a2 <__udivmoddi4+0x2ca>
 8000f2c:	4608      	mov	r0, r1
 8000f2e:	eba4 040e 	sub.w	r4, r4, lr
 8000f32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f36:	e79c      	b.n	8000e72 <__udivmoddi4+0x9a>
 8000f38:	f1c6 0720 	rsb	r7, r6, #32
 8000f3c:	40b3      	lsls	r3, r6
 8000f3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f46:	fa20 f407 	lsr.w	r4, r0, r7
 8000f4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000f4e:	431c      	orrs	r4, r3
 8000f50:	40f9      	lsrs	r1, r7
 8000f52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f56:	fa00 f306 	lsl.w	r3, r0, r6
 8000f5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f5e:	0c20      	lsrs	r0, r4, #16
 8000f60:	fa1f fe8c 	uxth.w	lr, ip
 8000f64:	fb09 1118 	mls	r1, r9, r8, r1
 8000f68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000f70:	4288      	cmp	r0, r1
 8000f72:	fa02 f206 	lsl.w	r2, r2, r6
 8000f76:	d90b      	bls.n	8000f90 <__udivmoddi4+0x1b8>
 8000f78:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f80:	f080 8088 	bcs.w	8001094 <__udivmoddi4+0x2bc>
 8000f84:	4288      	cmp	r0, r1
 8000f86:	f240 8085 	bls.w	8001094 <__udivmoddi4+0x2bc>
 8000f8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000f8e:	4461      	add	r1, ip
 8000f90:	1a09      	subs	r1, r1, r0
 8000f92:	b2a4      	uxth	r4, r4
 8000f94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f98:	fb09 1110 	mls	r1, r9, r0, r1
 8000f9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000fa0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fa4:	458e      	cmp	lr, r1
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x1e2>
 8000fa8:	eb1c 0101 	adds.w	r1, ip, r1
 8000fac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000fb0:	d26c      	bcs.n	800108c <__udivmoddi4+0x2b4>
 8000fb2:	458e      	cmp	lr, r1
 8000fb4:	d96a      	bls.n	800108c <__udivmoddi4+0x2b4>
 8000fb6:	3802      	subs	r0, #2
 8000fb8:	4461      	add	r1, ip
 8000fba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000fbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000fc2:	eba1 010e 	sub.w	r1, r1, lr
 8000fc6:	42a1      	cmp	r1, r4
 8000fc8:	46c8      	mov	r8, r9
 8000fca:	46a6      	mov	lr, r4
 8000fcc:	d356      	bcc.n	800107c <__udivmoddi4+0x2a4>
 8000fce:	d053      	beq.n	8001078 <__udivmoddi4+0x2a0>
 8000fd0:	b15d      	cbz	r5, 8000fea <__udivmoddi4+0x212>
 8000fd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000fd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000fda:	fa01 f707 	lsl.w	r7, r1, r7
 8000fde:	fa22 f306 	lsr.w	r3, r2, r6
 8000fe2:	40f1      	lsrs	r1, r6
 8000fe4:	431f      	orrs	r7, r3
 8000fe6:	e9c5 7100 	strd	r7, r1, [r5]
 8000fea:	2600      	movs	r6, #0
 8000fec:	4631      	mov	r1, r6
 8000fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ff2:	f1c2 0320 	rsb	r3, r2, #32
 8000ff6:	40d8      	lsrs	r0, r3
 8000ff8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ffc:	fa21 f303 	lsr.w	r3, r1, r3
 8001000:	4091      	lsls	r1, r2
 8001002:	4301      	orrs	r1, r0
 8001004:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001008:	fa1f fe8c 	uxth.w	lr, ip
 800100c:	fbb3 f0f7 	udiv	r0, r3, r7
 8001010:	fb07 3610 	mls	r6, r7, r0, r3
 8001014:	0c0b      	lsrs	r3, r1, #16
 8001016:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800101a:	fb00 f60e 	mul.w	r6, r0, lr
 800101e:	429e      	cmp	r6, r3
 8001020:	fa04 f402 	lsl.w	r4, r4, r2
 8001024:	d908      	bls.n	8001038 <__udivmoddi4+0x260>
 8001026:	eb1c 0303 	adds.w	r3, ip, r3
 800102a:	f100 38ff 	add.w	r8, r0, #4294967295
 800102e:	d22f      	bcs.n	8001090 <__udivmoddi4+0x2b8>
 8001030:	429e      	cmp	r6, r3
 8001032:	d92d      	bls.n	8001090 <__udivmoddi4+0x2b8>
 8001034:	3802      	subs	r0, #2
 8001036:	4463      	add	r3, ip
 8001038:	1b9b      	subs	r3, r3, r6
 800103a:	b289      	uxth	r1, r1
 800103c:	fbb3 f6f7 	udiv	r6, r3, r7
 8001040:	fb07 3316 	mls	r3, r7, r6, r3
 8001044:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001048:	fb06 f30e 	mul.w	r3, r6, lr
 800104c:	428b      	cmp	r3, r1
 800104e:	d908      	bls.n	8001062 <__udivmoddi4+0x28a>
 8001050:	eb1c 0101 	adds.w	r1, ip, r1
 8001054:	f106 38ff 	add.w	r8, r6, #4294967295
 8001058:	d216      	bcs.n	8001088 <__udivmoddi4+0x2b0>
 800105a:	428b      	cmp	r3, r1
 800105c:	d914      	bls.n	8001088 <__udivmoddi4+0x2b0>
 800105e:	3e02      	subs	r6, #2
 8001060:	4461      	add	r1, ip
 8001062:	1ac9      	subs	r1, r1, r3
 8001064:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001068:	e738      	b.n	8000edc <__udivmoddi4+0x104>
 800106a:	462e      	mov	r6, r5
 800106c:	4628      	mov	r0, r5
 800106e:	e705      	b.n	8000e7c <__udivmoddi4+0xa4>
 8001070:	4606      	mov	r6, r0
 8001072:	e6e3      	b.n	8000e3c <__udivmoddi4+0x64>
 8001074:	4618      	mov	r0, r3
 8001076:	e6f8      	b.n	8000e6a <__udivmoddi4+0x92>
 8001078:	454b      	cmp	r3, r9
 800107a:	d2a9      	bcs.n	8000fd0 <__udivmoddi4+0x1f8>
 800107c:	ebb9 0802 	subs.w	r8, r9, r2
 8001080:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001084:	3801      	subs	r0, #1
 8001086:	e7a3      	b.n	8000fd0 <__udivmoddi4+0x1f8>
 8001088:	4646      	mov	r6, r8
 800108a:	e7ea      	b.n	8001062 <__udivmoddi4+0x28a>
 800108c:	4620      	mov	r0, r4
 800108e:	e794      	b.n	8000fba <__udivmoddi4+0x1e2>
 8001090:	4640      	mov	r0, r8
 8001092:	e7d1      	b.n	8001038 <__udivmoddi4+0x260>
 8001094:	46d0      	mov	r8, sl
 8001096:	e77b      	b.n	8000f90 <__udivmoddi4+0x1b8>
 8001098:	3b02      	subs	r3, #2
 800109a:	4461      	add	r1, ip
 800109c:	e732      	b.n	8000f04 <__udivmoddi4+0x12c>
 800109e:	4630      	mov	r0, r6
 80010a0:	e709      	b.n	8000eb6 <__udivmoddi4+0xde>
 80010a2:	4464      	add	r4, ip
 80010a4:	3802      	subs	r0, #2
 80010a6:	e742      	b.n	8000f2e <__udivmoddi4+0x156>

080010a8 <__aeabi_idiv0>:
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop

080010ac <_Z15LIS3DSH_WriteIOhPhh>:

//Functions definitions
//Private functions
//1. Write IO
void LIS3DSH_WriteIO(uint8_t reg, uint8_t *dataW, uint8_t size)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	6039      	str	r1, [r7, #0]
 80010b6:	71fb      	strb	r3, [r7, #7]
 80010b8:	4613      	mov	r3, r2
 80010ba:	71bb      	strb	r3, [r7, #6]
	uint8_t spiReg = reg;
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	73fb      	strb	r3, [r7, #15]
	//Enable CS
	_LIS3DHS_CS_ENBALE;
 80010c0:	2200      	movs	r2, #0
 80010c2:	2108      	movs	r1, #8
 80010c4:	480c      	ldr	r0, [pc, #48]	; (80010f8 <_Z15LIS3DSH_WriteIOhPhh+0x4c>)
 80010c6:	f008 fc79 	bl	80099bc <HAL_GPIO_WritePin>
	//set register value
	HAL_SPI_Transmit(&accSPI_Handle, &spiReg, 1, 10);
 80010ca:	f107 010f 	add.w	r1, r7, #15
 80010ce:	230a      	movs	r3, #10
 80010d0:	2201      	movs	r2, #1
 80010d2:	480a      	ldr	r0, [pc, #40]	; (80010fc <_Z15LIS3DSH_WriteIOhPhh+0x50>)
 80010d4:	f00a fc35 	bl	800b942 <HAL_SPI_Transmit>
	//Transmit data
	HAL_SPI_Transmit(&accSPI_Handle, dataW, size, 10);
 80010d8:	79bb      	ldrb	r3, [r7, #6]
 80010da:	b29a      	uxth	r2, r3
 80010dc:	230a      	movs	r3, #10
 80010de:	6839      	ldr	r1, [r7, #0]
 80010e0:	4806      	ldr	r0, [pc, #24]	; (80010fc <_Z15LIS3DSH_WriteIOhPhh+0x50>)
 80010e2:	f00a fc2e 	bl	800b942 <HAL_SPI_Transmit>
	//Disable CS
	_LIS3DHS_CS_DISABLE;
 80010e6:	2201      	movs	r2, #1
 80010e8:	2108      	movs	r1, #8
 80010ea:	4803      	ldr	r0, [pc, #12]	; (80010f8 <_Z15LIS3DSH_WriteIOhPhh+0x4c>)
 80010ec:	f008 fc66 	bl	80099bc <HAL_GPIO_WritePin>
}
 80010f0:	bf00      	nop
 80010f2:	3710      	adds	r7, #16
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40021000 	.word	0x40021000
 80010fc:	20000470 	.word	0x20000470

08001100 <_Z14LIS3DSH_ReadIOhPhh>:
//2. Read IO
void LIS3DSH_ReadIO(uint8_t reg, uint8_t *dataR, uint8_t size)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	6039      	str	r1, [r7, #0]
 800110a:	71fb      	strb	r3, [r7, #7]
 800110c:	4613      	mov	r3, r2
 800110e:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[4];
	spiBuf[0] = reg | 0x80;
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001116:	b2db      	uxtb	r3, r3
 8001118:	723b      	strb	r3, [r7, #8]
	//Enable CS
	_LIS3DHS_CS_ENBALE;
 800111a:	2200      	movs	r2, #0
 800111c:	2108      	movs	r1, #8
 800111e:	4818      	ldr	r0, [pc, #96]	; (8001180 <_Z14LIS3DSH_ReadIOhPhh+0x80>)
 8001120:	f008 fc4c 	bl	80099bc <HAL_GPIO_WritePin>
	//set register value
	HAL_SPI_Transmit(&accSPI_Handle, spiBuf, 1, 10);
 8001124:	f107 0108 	add.w	r1, r7, #8
 8001128:	230a      	movs	r3, #10
 800112a:	2201      	movs	r2, #1
 800112c:	4815      	ldr	r0, [pc, #84]	; (8001184 <_Z14LIS3DSH_ReadIOhPhh+0x84>)
 800112e:	f00a fc08 	bl	800b942 <HAL_SPI_Transmit>
	//Transmit data
	HAL_SPI_Receive(&accSPI_Handle, spiBuf, size, 10);
 8001132:	79bb      	ldrb	r3, [r7, #6]
 8001134:	b29a      	uxth	r2, r3
 8001136:	f107 0108 	add.w	r1, r7, #8
 800113a:	230a      	movs	r3, #10
 800113c:	4811      	ldr	r0, [pc, #68]	; (8001184 <_Z14LIS3DSH_ReadIOhPhh+0x84>)
 800113e:	f00a fd3c 	bl	800bbba <HAL_SPI_Receive>
	//Disable CS
	_LIS3DHS_CS_DISABLE;
 8001142:	2201      	movs	r2, #1
 8001144:	2108      	movs	r1, #8
 8001146:	480e      	ldr	r0, [pc, #56]	; (8001180 <_Z14LIS3DSH_ReadIOhPhh+0x80>)
 8001148:	f008 fc38 	bl	80099bc <HAL_GPIO_WritePin>

	for(uint8_t i=0; i<(size&0x3); i++)
 800114c:	2300      	movs	r3, #0
 800114e:	73fb      	strb	r3, [r7, #15]
 8001150:	7bfa      	ldrb	r2, [r7, #15]
 8001152:	79bb      	ldrb	r3, [r7, #6]
 8001154:	f003 0303 	and.w	r3, r3, #3
 8001158:	429a      	cmp	r2, r3
 800115a:	da0c      	bge.n	8001176 <_Z14LIS3DSH_ReadIOhPhh+0x76>
	{
		dataR[i] = spiBuf[i];
 800115c:	7bfa      	ldrb	r2, [r7, #15]
 800115e:	7bfb      	ldrb	r3, [r7, #15]
 8001160:	6839      	ldr	r1, [r7, #0]
 8001162:	440b      	add	r3, r1
 8001164:	3210      	adds	r2, #16
 8001166:	443a      	add	r2, r7
 8001168:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 800116c:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0; i<(size&0x3); i++)
 800116e:	7bfb      	ldrb	r3, [r7, #15]
 8001170:	3301      	adds	r3, #1
 8001172:	73fb      	strb	r3, [r7, #15]
 8001174:	e7ec      	b.n	8001150 <_Z14LIS3DSH_ReadIOhPhh+0x50>
	}
}
 8001176:	bf00      	nop
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40021000 	.word	0x40021000
 8001184:	20000470 	.word	0x20000470

08001188 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef>:


//1. Accelerometer initialise function
void LIS3DSH_Init(SPI_HandleTypeDef *accSPI, LIS3DSH_InitTypeDef *accInitDef)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
	uint8_t spiData = 0;
 8001192:	2300      	movs	r3, #0
 8001194:	73fb      	strb	r3, [r7, #15]

	memcpy(&accSPI_Handle, accSPI, sizeof(*accSPI));
 8001196:	2258      	movs	r2, #88	; 0x58
 8001198:	6879      	ldr	r1, [r7, #4]
 800119a:	4855      	ldr	r0, [pc, #340]	; (80012f0 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x168>)
 800119c:	f022 f9d0 	bl	8023540 <memcpy>
	//** 1. Enable Axes and Output Data Rate **//
	//Set CTRL REG4 settings value
	spiData |= (accInitDef->enableAxes & 0x07);		//Enable Axes
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	78db      	ldrb	r3, [r3, #3]
 80011a4:	f003 0307 	and.w	r3, r3, #7
 80011a8:	b2da      	uxtb	r2, r3
 80011aa:	7bfb      	ldrb	r3, [r7, #15]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->dataRate & 0xF0);			//Output Data Rate
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	f023 030f 	bic.w	r3, r3, #15
 80011ba:	b2da      	uxtb	r2, r3
 80011bc:	7bfb      	ldrb	r3, [r7, #15]
 80011be:	4313      	orrs	r3, r2
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	73fb      	strb	r3, [r7, #15]
	//Write to accelerometer
	LIS3DSH_WriteIO(LIS3DSH_CTRL_REG4_ADDR, &spiData, 1);
 80011c4:	f107 030f 	add.w	r3, r7, #15
 80011c8:	2201      	movs	r2, #1
 80011ca:	4619      	mov	r1, r3
 80011cc:	2020      	movs	r0, #32
 80011ce:	f7ff ff6d 	bl	80010ac <_Z15LIS3DSH_WriteIOhPhh>

	//** 2. Full-Scale selection, Anti-aliasing BW, self test and 4-wire SPI **//
	spiData = 0;
 80011d2:	2300      	movs	r3, #0
 80011d4:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->antiAliasingBW & 0xC0);		//Anti-aliasing BW
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	789b      	ldrb	r3, [r3, #2]
 80011da:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011de:	b2da      	uxtb	r2, r3
 80011e0:	7bfb      	ldrb	r3, [r7, #15]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->fullScale & 0x38);				//Full-Scale
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	785b      	ldrb	r3, [r3, #1]
 80011ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80011f0:	b2da      	uxtb	r2, r3
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	73fb      	strb	r3, [r7, #15]
	//Write to accelerometer
	LIS3DSH_WriteIO(LIS3DSH_CTRL_REG5_ADDR, &spiData, 1);
 80011fa:	f107 030f 	add.w	r3, r7, #15
 80011fe:	2201      	movs	r2, #1
 8001200:	4619      	mov	r1, r3
 8001202:	2024      	movs	r0, #36	; 0x24
 8001204:	f7ff ff52 	bl	80010ac <_Z15LIS3DSH_WriteIOhPhh>

	//** 3. Interrupt Configuration **//
	if(accInitDef->interruptEnable)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	791b      	ldrb	r3, [r3, #4]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d008      	beq.n	8001222 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x9a>
	{
		spiData = 0x88;
 8001210:	2388      	movs	r3, #136	; 0x88
 8001212:	73fb      	strb	r3, [r7, #15]
		//Write to accelerometer
		LIS3DSH_WriteIO(LIS3DSH_CTRL_REG3_ADDR, &spiData, 1);
 8001214:	f107 030f 	add.w	r3, r7, #15
 8001218:	2201      	movs	r2, #1
 800121a:	4619      	mov	r1, r3
 800121c:	2023      	movs	r0, #35	; 0x23
 800121e:	f7ff ff45 	bl	80010ac <_Z15LIS3DSH_WriteIOhPhh>
	}

	//Assign sensor sensitivity (based on Full-Scale)
	switch(accInitDef->fullScale)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	785b      	ldrb	r3, [r3, #1]
 8001226:	2b20      	cmp	r3, #32
 8001228:	d858      	bhi.n	80012dc <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x154>
 800122a:	a201      	add	r2, pc, #4	; (adr r2, 8001230 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0xa8>)
 800122c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001230:	080012b5 	.word	0x080012b5
 8001234:	080012dd 	.word	0x080012dd
 8001238:	080012dd 	.word	0x080012dd
 800123c:	080012dd 	.word	0x080012dd
 8001240:	080012dd 	.word	0x080012dd
 8001244:	080012dd 	.word	0x080012dd
 8001248:	080012dd 	.word	0x080012dd
 800124c:	080012dd 	.word	0x080012dd
 8001250:	080012bd 	.word	0x080012bd
 8001254:	080012dd 	.word	0x080012dd
 8001258:	080012dd 	.word	0x080012dd
 800125c:	080012dd 	.word	0x080012dd
 8001260:	080012dd 	.word	0x080012dd
 8001264:	080012dd 	.word	0x080012dd
 8001268:	080012dd 	.word	0x080012dd
 800126c:	080012dd 	.word	0x080012dd
 8001270:	080012c5 	.word	0x080012c5
 8001274:	080012dd 	.word	0x080012dd
 8001278:	080012dd 	.word	0x080012dd
 800127c:	080012dd 	.word	0x080012dd
 8001280:	080012dd 	.word	0x080012dd
 8001284:	080012dd 	.word	0x080012dd
 8001288:	080012dd 	.word	0x080012dd
 800128c:	080012dd 	.word	0x080012dd
 8001290:	080012cd 	.word	0x080012cd
 8001294:	080012dd 	.word	0x080012dd
 8001298:	080012dd 	.word	0x080012dd
 800129c:	080012dd 	.word	0x080012dd
 80012a0:	080012dd 	.word	0x080012dd
 80012a4:	080012dd 	.word	0x080012dd
 80012a8:	080012dd 	.word	0x080012dd
 80012ac:	080012dd 	.word	0x080012dd
 80012b0:	080012d5 	.word	0x080012d5
	{
		case LIS3DSH_FULLSCALE_2:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_06G;
 80012b4:	4b0f      	ldr	r3, [pc, #60]	; (80012f4 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x16c>)
 80012b6:	4a10      	ldr	r2, [pc, #64]	; (80012f8 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x170>)
 80012b8:	601a      	str	r2, [r3, #0]
			break;
 80012ba:	e00f      	b.n	80012dc <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x154>

		case LIS3DSH_FULLSCALE_4:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_12G;
 80012bc:	4b0d      	ldr	r3, [pc, #52]	; (80012f4 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x16c>)
 80012be:	4a0f      	ldr	r2, [pc, #60]	; (80012fc <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x174>)
 80012c0:	601a      	str	r2, [r3, #0]
			break;
 80012c2:	e00b      	b.n	80012dc <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x154>

		case LIS3DSH_FULLSCALE_6:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_18G;
 80012c4:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x16c>)
 80012c6:	4a0e      	ldr	r2, [pc, #56]	; (8001300 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x178>)
 80012c8:	601a      	str	r2, [r3, #0]
			break;
 80012ca:	e007      	b.n	80012dc <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x154>

		case LIS3DSH_FULLSCALE_8:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_24G;
 80012cc:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x16c>)
 80012ce:	4a0d      	ldr	r2, [pc, #52]	; (8001304 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x17c>)
 80012d0:	601a      	str	r2, [r3, #0]
			break;
 80012d2:	e003      	b.n	80012dc <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x154>

		case LIS3DSH_FULLSCALE_16:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_73G;
 80012d4:	4b07      	ldr	r3, [pc, #28]	; (80012f4 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x16c>)
 80012d6:	4a0c      	ldr	r2, [pc, #48]	; (8001308 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x180>)
 80012d8:	601a      	str	r2, [r3, #0]
			break;
 80012da:	bf00      	nop
	}
	_LIS3DHS_CS_DISABLE;
 80012dc:	2201      	movs	r2, #1
 80012de:	2108      	movs	r1, #8
 80012e0:	480a      	ldr	r0, [pc, #40]	; (800130c <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x184>)
 80012e2:	f008 fb6b 	bl	80099bc <HAL_GPIO_WritePin>
}
 80012e6:	bf00      	nop
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000470 	.word	0x20000470
 80012f4:	20000000 	.word	0x20000000
 80012f8:	3d75c28f 	.word	0x3d75c28f
 80012fc:	3df5c28f 	.word	0x3df5c28f
 8001300:	3e3851ec 	.word	0x3e3851ec
 8001304:	3e75c28f 	.word	0x3e75c28f
 8001308:	3f3ae148 	.word	0x3f3ae148
 800130c:	40021000 	.word	0x40021000

08001310 <_Z18LIS3DSH_GetDataRawv>:
//2. Get Accelerometer raw data
LIS3DSH_DataRaw LIS3DSH_GetDataRaw(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
	uint8_t spiBuf[2];
	LIS3DSH_DataRaw tempDataRaw;
	//Read X data
	LIS3DSH_ReadIO(LIS3DSH_OUT_X_L_ADDR, spiBuf, 2);
 8001318:	f107 030c 	add.w	r3, r7, #12
 800131c:	2202      	movs	r2, #2
 800131e:	4619      	mov	r1, r3
 8001320:	2028      	movs	r0, #40	; 0x28
 8001322:	f7ff feed 	bl	8001100 <_Z14LIS3DSH_ReadIOhPhh>
	tempDataRaw.x = ((spiBuf[1] << 8) + spiBuf[0]);
 8001326:	7b7b      	ldrb	r3, [r7, #13]
 8001328:	b29b      	uxth	r3, r3
 800132a:	021b      	lsls	r3, r3, #8
 800132c:	b29a      	uxth	r2, r3
 800132e:	7b3b      	ldrb	r3, [r7, #12]
 8001330:	b29b      	uxth	r3, r3
 8001332:	4413      	add	r3, r2
 8001334:	b29b      	uxth	r3, r3
 8001336:	b21a      	sxth	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	801a      	strh	r2, [r3, #0]

	//Read Y data
	LIS3DSH_ReadIO(LIS3DSH_OUT_Y_L_ADDR, spiBuf, 2);
 800133c:	f107 030c 	add.w	r3, r7, #12
 8001340:	2202      	movs	r2, #2
 8001342:	4619      	mov	r1, r3
 8001344:	202a      	movs	r0, #42	; 0x2a
 8001346:	f7ff fedb 	bl	8001100 <_Z14LIS3DSH_ReadIOhPhh>
	tempDataRaw.y = ((spiBuf[1] << 8) + spiBuf[0]);
 800134a:	7b7b      	ldrb	r3, [r7, #13]
 800134c:	b29b      	uxth	r3, r3
 800134e:	021b      	lsls	r3, r3, #8
 8001350:	b29a      	uxth	r2, r3
 8001352:	7b3b      	ldrb	r3, [r7, #12]
 8001354:	b29b      	uxth	r3, r3
 8001356:	4413      	add	r3, r2
 8001358:	b29b      	uxth	r3, r3
 800135a:	b21a      	sxth	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	805a      	strh	r2, [r3, #2]

	//Read Z data
	LIS3DSH_ReadIO(LIS3DSH_OUT_Z_L_ADDR, spiBuf, 2);
 8001360:	f107 030c 	add.w	r3, r7, #12
 8001364:	2202      	movs	r2, #2
 8001366:	4619      	mov	r1, r3
 8001368:	202c      	movs	r0, #44	; 0x2c
 800136a:	f7ff fec9 	bl	8001100 <_Z14LIS3DSH_ReadIOhPhh>
	tempDataRaw.z = ((spiBuf[1] << 8) + spiBuf[0]);
 800136e:	7b7b      	ldrb	r3, [r7, #13]
 8001370:	b29b      	uxth	r3, r3
 8001372:	021b      	lsls	r3, r3, #8
 8001374:	b29a      	uxth	r2, r3
 8001376:	7b3b      	ldrb	r3, [r7, #12]
 8001378:	b29b      	uxth	r3, r3
 800137a:	4413      	add	r3, r2
 800137c:	b29b      	uxth	r3, r3
 800137e:	b21a      	sxth	r2, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	809a      	strh	r2, [r3, #4]

	return tempDataRaw;
 8001384:	bf00      	nop

}
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
	...

08001390 <_Z21LIS3DSH_GetDataScaledv>:
//3. Get Accelerometer mg data
LIS3DSH_DataScaled LIS3DSH_GetDataScaled(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08c      	sub	sp, #48	; 0x30
 8001394:	af00      	add	r7, sp, #0
	//Read raw data
	LIS3DSH_DataRaw tempRawData = LIS3DSH_GetDataRaw();;
 8001396:	f107 031c 	add.w	r3, r7, #28
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff ffb8 	bl	8001310 <_Z18LIS3DSH_GetDataRawv>
	//Scale data and return
	LIS3DSH_DataScaled tempScaledData;
	tempScaledData.x = (tempRawData.x * lis3dsh_Sensitivity * __X_Scale) + 0.0f - __X_Bias;
 80013a0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80013a4:	ee07 3a90 	vmov	s15, r3
 80013a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013ac:	4b31      	ldr	r3, [pc, #196]	; (8001474 <_Z21LIS3DSH_GetDataScaledv+0xe4>)
 80013ae:	edd3 7a00 	vldr	s15, [r3]
 80013b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013b6:	4b30      	ldr	r3, [pc, #192]	; (8001478 <_Z21LIS3DSH_GetDataScaledv+0xe8>)
 80013b8:	edd3 7a00 	vldr	s15, [r3]
 80013bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013c0:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800147c <_Z21LIS3DSH_GetDataScaledv+0xec>
 80013c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80013c8:	4b2d      	ldr	r3, [pc, #180]	; (8001480 <_Z21LIS3DSH_GetDataScaledv+0xf0>)
 80013ca:	edd3 7a00 	vldr	s15, [r3]
 80013ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013d2:	edc7 7a04 	vstr	s15, [r7, #16]
	tempScaledData.y = (tempRawData.y * lis3dsh_Sensitivity * __Y_Scale) + 0.0f - __Y_Bias;
 80013d6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80013da:	ee07 3a90 	vmov	s15, r3
 80013de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013e2:	4b24      	ldr	r3, [pc, #144]	; (8001474 <_Z21LIS3DSH_GetDataScaledv+0xe4>)
 80013e4:	edd3 7a00 	vldr	s15, [r3]
 80013e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013ec:	4b25      	ldr	r3, [pc, #148]	; (8001484 <_Z21LIS3DSH_GetDataScaledv+0xf4>)
 80013ee:	edd3 7a00 	vldr	s15, [r3]
 80013f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013f6:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800147c <_Z21LIS3DSH_GetDataScaledv+0xec>
 80013fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80013fe:	4b22      	ldr	r3, [pc, #136]	; (8001488 <_Z21LIS3DSH_GetDataScaledv+0xf8>)
 8001400:	edd3 7a00 	vldr	s15, [r3]
 8001404:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001408:	edc7 7a05 	vstr	s15, [r7, #20]
	tempScaledData.z = (tempRawData.z * lis3dsh_Sensitivity * __Z_Scale) + 0.0f - __Z_Bias;
 800140c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001410:	ee07 3a90 	vmov	s15, r3
 8001414:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001418:	4b16      	ldr	r3, [pc, #88]	; (8001474 <_Z21LIS3DSH_GetDataScaledv+0xe4>)
 800141a:	edd3 7a00 	vldr	s15, [r3]
 800141e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001422:	4b1a      	ldr	r3, [pc, #104]	; (800148c <_Z21LIS3DSH_GetDataScaledv+0xfc>)
 8001424:	edd3 7a00 	vldr	s15, [r3]
 8001428:	ee67 7a27 	vmul.f32	s15, s14, s15
 800142c:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800147c <_Z21LIS3DSH_GetDataScaledv+0xec>
 8001430:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001434:	4b16      	ldr	r3, [pc, #88]	; (8001490 <_Z21LIS3DSH_GetDataScaledv+0x100>)
 8001436:	edd3 7a00 	vldr	s15, [r3]
 800143a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800143e:	edc7 7a06 	vstr	s15, [r7, #24]

	return tempScaledData;
 8001442:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001446:	f107 0210 	add.w	r2, r7, #16
 800144a:	ca07      	ldmia	r2, {r0, r1, r2}
 800144c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001450:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001452:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001456:	ee06 1a90 	vmov	s13, r1
 800145a:	ee07 2a10 	vmov	s14, r2
 800145e:	ee07 3a90 	vmov	s15, r3
}
 8001462:	eeb0 0a66 	vmov.f32	s0, s13
 8001466:	eef0 0a47 	vmov.f32	s1, s14
 800146a:	eeb0 1a67 	vmov.f32	s2, s15
 800146e:	3730      	adds	r7, #48	; 0x30
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	20000000 	.word	0x20000000
 8001478:	20000004 	.word	0x20000004
 800147c:	00000000 	.word	0x00000000
 8001480:	200004c8 	.word	0x200004c8
 8001484:	20000008 	.word	0x20000008
 8001488:	200004cc 	.word	0x200004cc
 800148c:	2000000c 	.word	0x2000000c
 8001490:	200004d0 	.word	0x200004d0

08001494 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	ed87 0a01 	vstr	s0, [r7, #4]
 800149e:	edd7 7a01 	vldr	s15, [r7, #4]
 80014a2:	eef0 7ae7 	vabs.f32	s15, s15
 80014a6:	eeb0 0a67 	vmov.f32	s0, s15
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <_ZSt4__lgi>:

  /// This is a helper function for the sort routines and for random.tcc.
  //  Precondition: __n > 0.
  inline _GLIBCXX_CONSTEXPR int
  __lg(int __n)
  { return (int)sizeof(int) * __CHAR_BIT__  - 1 - __builtin_clz(__n); }
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	fab3 f383 	clz	r3, r3
 80014c2:	f1c3 031f 	rsb	r3, r3, #31
 80014c6:	4618      	mov	r0, r3
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr

080014d2 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80014d2:	b480      	push	{r7}
 80014d4:	b083      	sub	sp, #12
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
 80014da:	6039      	str	r1, [r7, #0]
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	4618      	mov	r0, r3
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
	...

080014ec <_ZN12_GLOBAL__N_117ei_aligned_callocEjj>:
* aligned_malloc takes in the requested alignment and size
*	We will call malloc with extra bytes for our header and the offset
*	required to guarantee the desired alignment.
*/
__attribute__((unused)) void * ei_aligned_calloc(size_t align, size_t size)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
	void * ptr = NULL;
 80014f6:	2300      	movs	r3, #0
 80014f8:	617b      	str	r3, [r7, #20]

	//We want it to be a power of two since align_up operates on powers of two
	assert((align & (align - 1)) == 0);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	1e5a      	subs	r2, r3, #1
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4013      	ands	r3, r2
 8001502:	2b00      	cmp	r3, #0
 8001504:	d005      	beq.n	8001512 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x26>
 8001506:	4b17      	ldr	r3, [pc, #92]	; (8001564 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x78>)
 8001508:	4a17      	ldr	r2, [pc, #92]	; (8001568 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x7c>)
 800150a:	2137      	movs	r1, #55	; 0x37
 800150c:	4817      	ldr	r0, [pc, #92]	; (800156c <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x80>)
 800150e:	f021 ff9d 	bl	802344c <__assert_func>

	if(align && size)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d01f      	beq.n	8001558 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x6c>
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d01c      	beq.n	8001558 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x6c>
	{
		/*
		 * We know we have to fit an offset value
		 * We also allocate extra bytes to ensure we can meet the alignment
		 */
		uint32_t hdr_size = PTR_OFFSET_SZ + (align - 1);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	3301      	adds	r3, #1
 8001522:	613b      	str	r3, [r7, #16]
		void * p = ei_calloc(size + hdr_size, 1);
 8001524:	683a      	ldr	r2, [r7, #0]
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	4413      	add	r3, r2
 800152a:	2101      	movs	r1, #1
 800152c:	4618      	mov	r0, r3
 800152e:	f019 fb77 	bl	801ac20 <_Z9ei_callocjj>
 8001532:	60f8      	str	r0, [r7, #12]

		if(p)
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d00e      	beq.n	8001558 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x6c>
		{
			/*
			 * Add the offset size to malloc's pointer (we will always store that)
			 * Then align the resulting value to the arget alignment
			 */
			ptr = (void *) align_up(((uintptr_t)p + PTR_OFFSET_SZ), align);
 800153a:	68fa      	ldr	r2, [r7, #12]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	4413      	add	r3, r2
 8001540:	1c5a      	adds	r2, r3, #1
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	425b      	negs	r3, r3
 8001546:	4013      	ands	r3, r2
 8001548:	617b      	str	r3, [r7, #20]

			//Calculate the offset and store it behind our aligned pointer
			*((offset_t *)ptr - 1) = (offset_t)((uintptr_t)ptr - (uintptr_t)p);
 800154a:	697a      	ldr	r2, [r7, #20]
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	1ad2      	subs	r2, r2, r3
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	3b02      	subs	r3, #2
 8001554:	b292      	uxth	r2, r2
 8001556:	801a      	strh	r2, [r3, #0]

		} // else NULL, could not malloc
	} //else NULL, invalid arguments

	return ptr;
 8001558:	697b      	ldr	r3, [r7, #20]
}
 800155a:	4618      	mov	r0, r3
 800155c:	3718      	adds	r7, #24
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	080278a8 	.word	0x080278a8
 8001568:	080278c4 	.word	0x080278c4
 800156c:	080278fc 	.word	0x080278fc

08001570 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv>:
* aligned_free works like free(), but we work backwards from the returned
* pointer to find the correct offset and pointer location to return to free()
* Note that it is VERY BAD to call free() on an aligned_malloc() pointer.
*/
__attribute__((unused)) void ei_aligned_free(void * ptr)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
	assert(ptr);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d105      	bne.n	800158a <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x1a>
 800157e:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x3c>)
 8001580:	4a0b      	ldr	r2, [pc, #44]	; (80015b0 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x40>)
 8001582:	215a      	movs	r1, #90	; 0x5a
 8001584:	480b      	ldr	r0, [pc, #44]	; (80015b4 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x44>)
 8001586:	f021 ff61 	bl	802344c <__assert_func>

	/*
	* Walk backwards from the passed-in pointer to get the pointer offset
	* We convert to an offset_t pointer and rely on pointer math to get the data
	*/
	offset_t offset = *((offset_t *)ptr - 1);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	f833 3c02 	ldrh.w	r3, [r3, #-2]
 8001590:	81fb      	strh	r3, [r7, #14]

	/*
	* Once we have the offset, we can get our original pointer and call free
	*/
	void * p = (void *)((uint8_t *)ptr - offset);
 8001592:	89fb      	ldrh	r3, [r7, #14]
 8001594:	425b      	negs	r3, r3
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	4413      	add	r3, r2
 800159a:	60bb      	str	r3, [r7, #8]
	ei_free(p);
 800159c:	68b8      	ldr	r0, [r7, #8]
 800159e:	f019 fb4d 	bl	801ac3c <_Z7ei_freePv>
}
 80015a2:	bf00      	nop
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	08027978 	.word	0x08027978
 80015b0:	0802797c 	.word	0x0802797c
 80015b4:	080278fc 	.word	0x080278fc

080015b8 <_ZNSt14_Bit_referenceC1EPmm>:
  struct _Bit_reference
  {
    _Bit_type * _M_p;
    _Bit_type _M_mask;

    _Bit_reference(_Bit_type * __x, _Bit_type __y)
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	607a      	str	r2, [r7, #4]
    : _M_p(__x), _M_mask(__y) { }
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	68ba      	ldr	r2, [r7, #8]
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	605a      	str	r2, [r3, #4]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	4618      	mov	r0, r3
 80015d4:	3714      	adds	r7, #20
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr

080015de <_ZNKSt14_Bit_referencecvbEv>:

#if __cplusplus >= 201103L
    _Bit_reference(const _Bit_reference&) = default;
#endif

    operator bool() const _GLIBCXX_NOEXCEPT
 80015de:	b480      	push	{r7}
 80015e0:	b083      	sub	sp, #12
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
    { return !!(*_M_p & _M_mask); }
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	4013      	ands	r3, r2
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	bf14      	ite	ne
 80015f6:	2301      	movne	r3, #1
 80015f8:	2300      	moveq	r3, #0
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	4618      	mov	r0, r3
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <_ZNSt14_Bit_referenceaSEb>:

    _Bit_reference&
    operator=(bool __x) _GLIBCXX_NOEXCEPT
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	460b      	mov	r3, r1
 8001612:	70fb      	strb	r3, [r7, #3]
    {
      if (__x)
 8001614:	78fb      	ldrb	r3, [r7, #3]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d009      	beq.n	800162e <_ZNSt14_Bit_referenceaSEb+0x26>
	*_M_p |= _M_mask;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	6819      	ldr	r1, [r3, #0]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685a      	ldr	r2, [r3, #4]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	430a      	orrs	r2, r1
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	e009      	b.n	8001642 <_ZNSt14_Bit_referenceaSEb+0x3a>
      else
	*_M_p &= ~_M_mask;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	6819      	ldr	r1, [r3, #0]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	43da      	mvns	r2, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	400a      	ands	r2, r1
 8001640:	601a      	str	r2, [r3, #0]
      return *this;
 8001642:	687b      	ldr	r3, [r7, #4]
    }
 8001644:	4618      	mov	r0, r3
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <_ZNSt18_Bit_iterator_baseC1EPmj>:
  : public std::iterator<std::random_access_iterator_tag, bool>
  {
    _Bit_type * _M_p;
    unsigned int _M_offset;

    _Bit_iterator_base(_Bit_type * __x, unsigned int __y)
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
    : _M_p(__x), _M_offset(__y) { }
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	68ba      	ldr	r2, [r7, #8]
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	605a      	str	r2, [r3, #4]
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	4618      	mov	r0, r3
 800166c:	3714      	adds	r7, #20
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <_ZNSt18_Bit_iterator_base7_M_incrEi>:
	  --_M_p;
	}
    }

    void
    _M_incr(ptrdiff_t __i)
 8001676:	b480      	push	{r7}
 8001678:	b085      	sub	sp, #20
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
 800167e:	6039      	str	r1, [r7, #0]
    {
      difference_type __n = __i + _M_offset;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	685a      	ldr	r2, [r3, #4]
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	4413      	add	r3, r2
 8001688:	60fb      	str	r3, [r7, #12]
      _M_p += __n / int(_S_word_bit);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	2b00      	cmp	r3, #0
 8001692:	da00      	bge.n	8001696 <_ZNSt18_Bit_iterator_base7_M_incrEi+0x20>
 8001694:	331f      	adds	r3, #31
 8001696:	115b      	asrs	r3, r3, #5
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	441a      	add	r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	601a      	str	r2, [r3, #0]
      __n = __n % int(_S_word_bit);
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	425a      	negs	r2, r3
 80016a4:	f003 031f 	and.w	r3, r3, #31
 80016a8:	f002 021f 	and.w	r2, r2, #31
 80016ac:	bf58      	it	pl
 80016ae:	4253      	negpl	r3, r2
 80016b0:	60fb      	str	r3, [r7, #12]
      if (__n < 0)
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	da07      	bge.n	80016c8 <_ZNSt18_Bit_iterator_base7_M_incrEi+0x52>
	{
	  __n += int(_S_word_bit);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	3320      	adds	r3, #32
 80016bc:	60fb      	str	r3, [r7, #12]
	  --_M_p;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	1f1a      	subs	r2, r3, #4
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	601a      	str	r2, [r3, #0]
	}
      _M_offset = static_cast<unsigned int>(__n);
 80016c8:	68fa      	ldr	r2, [r7, #12]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	605a      	str	r2, [r3, #4]
    }
 80016ce:	bf00      	nop
 80016d0:	3714      	adds	r7, #20
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr

080016da <_ZNSt13_Bit_iteratorC1Ev>:
#else
    typedef _Bit_reference* pointer;
#endif
    typedef _Bit_iterator   iterator;

    _Bit_iterator() : _Bit_iterator_base(0, 0) { }
 80016da:	b580      	push	{r7, lr}
 80016dc:	b082      	sub	sp, #8
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2200      	movs	r2, #0
 80016e6:	2100      	movs	r1, #0
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff ffb1 	bl	8001650 <_ZNSt18_Bit_iterator_baseC1EPmj>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4618      	mov	r0, r3
 80016f2:	3708      	adds	r7, #8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <_ZNSt13_Bit_iteratorC1EPmj>:

    _Bit_iterator(_Bit_type * __x, unsigned int __y)
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	60f8      	str	r0, [r7, #12]
 8001700:	60b9      	str	r1, [r7, #8]
 8001702:	607a      	str	r2, [r7, #4]
    : _Bit_iterator_base(__x, __y) { }
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	68b9      	ldr	r1, [r7, #8]
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff ffa0 	bl	8001650 <_ZNSt18_Bit_iterator_baseC1EPmj>
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	4618      	mov	r0, r3
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <_ZNKSt13_Bit_iteratordeEv>:
    iterator
    _M_const_cast() const
    { return *this; }

    reference
    operator*() const
 800171a:	b580      	push	{r7, lr}
 800171c:	b082      	sub	sp, #8
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
 8001722:	6039      	str	r1, [r7, #0]
    { return reference(_M_p, 1UL << _M_offset); }
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	6819      	ldr	r1, [r3, #0]
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	2201      	movs	r2, #1
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	461a      	mov	r2, r3
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f7ff ff3f 	bl	80015b8 <_ZNSt14_Bit_referenceC1EPmm>
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <_ZNSt13_Bit_iteratorpLEi>:
      _M_bump_down();
      return __tmp;
    }

    iterator&
    operator+=(difference_type __i)
 8001742:	b580      	push	{r7, lr}
 8001744:	b082      	sub	sp, #8
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
 800174a:	6039      	str	r1, [r7, #0]
    {
      _M_incr(__i);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6839      	ldr	r1, [r7, #0]
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff ff90 	bl	8001676 <_ZNSt18_Bit_iterator_base7_M_incrEi>
      return *this;
 8001756:	687b      	ldr	r3, [r7, #4]
    }
 8001758:	4618      	mov	r0, r3
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <_ZStplRKSt13_Bit_iteratori>:
    reference
    operator[](difference_type __i) const
    { return *(*this + __i); }

    friend iterator
    operator+(const iterator& __x, difference_type __n)
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	607a      	str	r2, [r7, #4]
    {
      iterator __tmp = __x;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	68ba      	ldr	r2, [r7, #8]
 8001770:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001774:	e883 0003 	stmia.w	r3, {r0, r1}
      __tmp += __n;
 8001778:	6879      	ldr	r1, [r7, #4]
 800177a:	68f8      	ldr	r0, [r7, #12]
 800177c:	f7ff ffe1 	bl	8001742 <_ZNSt13_Bit_iteratorpLEi>
      return __tmp;
 8001780:	bf00      	nop
    }
 8001782:	68f8      	ldr	r0, [r7, #12]
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
 800178a:	b480      	push	{r7}
 800178c:	b083      	sub	sp, #12
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4618      	mov	r0, r3
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4618      	mov	r0, r3
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr

080017b6 <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 80017b6:	b480      	push	{r7}
 80017b8:	b083      	sub	sp, #12
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2200      	movs	r2, #0
 80017c2:	609a      	str	r2, [r3, #8]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	4618      	mov	r0, r3
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr

080017d2 <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b082      	sub	sp, #8
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d005      	beq.n	80017ee <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	6879      	ldr	r1, [r7, #4]
 80017ea:	2203      	movs	r2, #3
 80017ec:	4798      	blx	r3
    }
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4618      	mov	r0, r3
 80017f2:	3708      	adds	r7, #8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	2b00      	cmp	r3, #0
 8001806:	bf0c      	ite	eq
 8001808:	2301      	moveq	r3, #1
 800180a:	2300      	movne	r3, #0
 800180c:	b2db      	uxtb	r3, r3
 800180e:	4618      	mov	r0, r3
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr

0800181a <_ZN2ei9ei_matrixC1EmmPf>:
     * Create a new matrix
     * @param n_rows Number of rows
     * @param n_cols Number of columns
     * @param a_buffer Buffer, if not provided we'll alloc on the heap
     */
    ei_matrix(
 800181a:	b580      	push	{r7, lr}
 800181c:	b084      	sub	sp, #16
 800181e:	af00      	add	r7, sp, #0
 8001820:	60f8      	str	r0, [r7, #12]
 8001822:	60b9      	str	r1, [r7, #8]
 8001824:	607a      	str	r2, [r7, #4]
 8001826:	603b      	str	r3, [r7, #0]
        const char *file = NULL,
        int line = 0
#endif
        )
    {
        if (a_buffer) {
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d006      	beq.n	800183c <_ZN2ei9ei_matrixC1EmmPf+0x22>
            buffer = a_buffer;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	683a      	ldr	r2, [r7, #0]
 8001832:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = false;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2200      	movs	r2, #0
 8001838:	731a      	strb	r2, [r3, #12]
 800183a:	e00e      	b.n	800185a <_ZN2ei9ei_matrixC1EmmPf+0x40>
        }
        else {
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	fb02 f303 	mul.w	r3, r2, r3
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	2101      	movs	r1, #1
 8001848:	4618      	mov	r0, r3
 800184a:	f019 f9e9 	bl	801ac20 <_Z9ei_callocjj>
 800184e:	4602      	mov	r2, r0
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = true;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	2201      	movs	r2, #1
 8001858:	731a      	strb	r2, [r3, #12]
        }
        rows = n_rows;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	68ba      	ldr	r2, [r7, #8]
 800185e:	605a      	str	r2, [r3, #4]
        cols = n_cols;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	609a      	str	r2, [r3, #8]
            else {
                ei_dsp_register_matrix_alloc(rows, cols, sizeof(float), buffer);
            }
#endif
        }
    }
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	4618      	mov	r0, r3
 800186a:	3710      	adds	r7, #16
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}

08001870 <_ZN2ei9ei_matrixD1Ev>:

    ~ei_matrix() {
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
        if (buffer && buffer_managed_by_me) {
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d008      	beq.n	8001892 <_ZN2ei9ei_matrixD1Ev+0x22>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	7b1b      	ldrb	r3, [r3, #12]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d004      	beq.n	8001892 <_ZN2ei9ei_matrixD1Ev+0x22>
            ei_free(buffer);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4618      	mov	r0, r3
 800188e:	f019 f9d5 	bl	801ac3c <_Z7ei_freePv>
                ei_dsp_register_matrix_free(_originally_allocated_rows, _originally_allocated_cols,
                    sizeof(float), buffer);
            }
#endif
        }
    }
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4618      	mov	r0, r3
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <_ZN2ei9ei_matrix11get_row_ptrEj>:
     * @brief Get a pointer to the buffer advanced by n rows
     *
     * @param row Numer of rows to advance the returned buffer pointer
     * @return float* Pointer to the buffer at the start of row n
     */
    float *get_row_ptr(size_t row)
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
    {
        return buffer + row * cols;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	6839      	ldr	r1, [r7, #0]
 80018b0:	fb01 f303 	mul.w	r3, r1, r3
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	4413      	add	r3, r2
    }
 80018b8:	4618      	mov	r0, r3
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <_ZN2ei12ei_matrix_i8C1EmmPa>:
     * Create a new matrix
     * @param n_rows Number of rows
     * @param n_cols Number of columns
     * @param a_buffer Buffer, if not provided we'll alloc on the heap
     */
    ei_matrix_i8(
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	60f8      	str	r0, [r7, #12]
 80018cc:	60b9      	str	r1, [r7, #8]
 80018ce:	607a      	str	r2, [r7, #4]
 80018d0:	603b      	str	r3, [r7, #0]
        const char *file = NULL,
        int line = 0
#endif
        )
    {
        if (a_buffer) {
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d006      	beq.n	80018e6 <_ZN2ei12ei_matrix_i8C1EmmPa+0x22>
            buffer = a_buffer;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	683a      	ldr	r2, [r7, #0]
 80018dc:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = false;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2200      	movs	r2, #0
 80018e2:	731a      	strb	r2, [r3, #12]
 80018e4:	e00d      	b.n	8001902 <_ZN2ei12ei_matrix_i8C1EmmPa+0x3e>
        }
        else {
            buffer = (int8_t*)ei_calloc(n_rows * n_cols * sizeof(int8_t), 1);
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	fb02 f303 	mul.w	r3, r2, r3
 80018ee:	2101      	movs	r1, #1
 80018f0:	4618      	mov	r0, r3
 80018f2:	f019 f995 	bl	801ac20 <_Z9ei_callocjj>
 80018f6:	4602      	mov	r2, r0
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = true;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2201      	movs	r2, #1
 8001900:	731a      	strb	r2, [r3, #12]
        }
        rows = n_rows;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	68ba      	ldr	r2, [r7, #8]
 8001906:	605a      	str	r2, [r3, #4]
        cols = n_cols;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	609a      	str	r2, [r3, #8]
            else {
                ei_dsp_register_matrix_alloc(rows, cols, sizeof(int8_t), buffer);
            }
#endif
        }
    }
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	4618      	mov	r0, r3
 8001912:	3710      	adds	r7, #16
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <_ZN2ei12ei_matrix_i8D1Ev>:

    ~ei_matrix_i8() {
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
        if (buffer && buffer_managed_by_me) {
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d008      	beq.n	800193a <_ZN2ei12ei_matrix_i8D1Ev+0x22>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	7b1b      	ldrb	r3, [r3, #12]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d004      	beq.n	800193a <_ZN2ei12ei_matrix_i8D1Ev+0x22>
            ei_free(buffer);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4618      	mov	r0, r3
 8001936:	f019 f981 	bl	801ac3c <_Z7ei_freePv>
                ei_dsp_register_matrix_free(_originally_allocated_rows, _originally_allocated_cols,
                    sizeof(int8_t), buffer);
            }
#endif
        }
    }
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4618      	mov	r0, r3
 800193e:	3708      	adds	r7, #8
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <_ZSt25__throw_bad_function_callv>:
#endif // __cplusplus

// required on Adafruit nRF52, it seems not to matter too much on other targets...
#ifdef __cplusplus
namespace std {
    __attribute__((weak)) void __throw_bad_function_call() { while(1); };
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
 8001948:	e7fe      	b.n	8001948 <_ZSt25__throw_bad_function_callv+0x4>

0800194a <_ZSt3expf>:
  using ::exp;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  exp(float __x)
  { return __builtin_expf(__x); }
 800194a:	b580      	push	{r7, lr}
 800194c:	b082      	sub	sp, #8
 800194e:	af00      	add	r7, sp, #0
 8001950:	ed87 0a01 	vstr	s0, [r7, #4]
 8001954:	ed97 0a01 	vldr	s0, [r7, #4]
 8001958:	f01f fafc 	bl	8020f54 <expf>
 800195c:	eef0 7a40 	vmov.f32	s15, s0
 8001960:	eeb0 0a67 	vmov.f32	s0, s15
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 800196a:	b580      	push	{r7, lr}
 800196c:	b082      	sub	sp, #8
 800196e:	af00      	add	r7, sp, #0
 8001970:	ed87 0a01 	vstr	s0, [r7, #4]
 8001974:	ed97 0a01 	vldr	s0, [r7, #4]
 8001978:	f01f fb50 	bl	802101c <sqrtf>
 800197c:	eef0 7a40 	vmov.f32	s15, s0
 8001980:	eeb0 0a67 	vmov.f32	s0, s15
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 800198a:	b580      	push	{r7, lr}
 800198c:	b082      	sub	sp, #8
 800198e:	af00      	add	r7, sp, #0
 8001990:	ed87 0a01 	vstr	s0, [r7, #4]
 8001994:	ed97 0a01 	vldr	s0, [r7, #4]
 8001998:	f01f fa1c 	bl	8020dd4 <roundf>
 800199c:	eef0 7a40 	vmov.f32	s15, s0
 80019a0:	eeb0 0a67 	vmov.f32	s0, s15
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <_ZN2ei5numpy4sqrtEf>:
// clang-format on

class numpy {
public:

    static float sqrt(float x) {
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b086      	sub	sp, #24
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	ed87 0a01 	vstr	s0, [r7, #4]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	617b      	str	r3, [r7, #20]
 80019b8:	f107 030c 	add.w	r3, r7, #12
 80019bc:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 80019be:	edd7 7a05 	vldr	s15, [r7, #20]
 80019c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ca:	db09      	blt.n	80019e0 <_ZN2ei5numpy4sqrtEf+0x36>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 80019cc:	ed97 0a05 	vldr	s0, [r7, #20]
 80019d0:	f01f fb24 	bl	802101c <sqrtf>
 80019d4:	eef0 7a40 	vmov.f32	s15, s0
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	edc3 7a00 	vstr	s15, [r3]
#endif

      return (ARM_MATH_SUCCESS);
 80019de:	e004      	b.n	80019ea <_ZN2ei5numpy4sqrtEf+0x40>
    }
    else
    {
      *pOut = 0.0f;
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	f04f 0200 	mov.w	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 80019e8:	bf00      	nop
#if EIDSP_USE_CMSIS_DSP
        float temp;
        arm_sqrt_f32(x, &temp);
        return temp;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	ee07 3a90 	vmov	s15, r3
#else
        return sqrtf(x);
#endif
    }
 80019f0:	eeb0 0a67 	vmov.f32	s0, s15
 80019f4:	3718      	adds	r7, #24
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE>:
        }

        return EIDSP_OK;
    }

    static void transpose_in_place(matrix_t *matrix) {
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b096      	sub	sp, #88	; 0x58
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
        size_t size = matrix->cols * matrix->rows - 1;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	6852      	ldr	r2, [r2, #4]
 8001a0a:	fb02 f303 	mul.w	r3, r2, r3
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	64bb      	str	r3, [r7, #72]	; 0x48
        float temp; // temp for swap
        size_t next; // next item to swap
        size_t cycleBegin; // index of start of cycle
        size_t i; // location in matrix
        size_t all_done_mark = 1;
 8001a12:	2301      	movs	r3, #1
 8001a14:	64fb      	str	r3, [r7, #76]	; 0x4c
        ei_vector<bool> done(size+1,false);
 8001a16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a18:	1c59      	adds	r1, r3, #1
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	77fb      	strb	r3, [r7, #31]
 8001a1e:	f107 0320 	add.w	r3, r7, #32
 8001a22:	f107 021f 	add.w	r2, r7, #31
 8001a26:	f107 0008 	add.w	r0, r7, #8
 8001a2a:	f004 fde0 	bl	80065ee <_ZNSt6vectorIbN2ei7EiAllocIbEEEC1EjRKbRKS2_>

        i = 1; // Note that matrix[0] and last element of matrix won't move
 8001a2e:	2301      	movs	r3, #1
 8001a30:	653b      	str	r3, [r7, #80]	; 0x50
        while (1)
        {
            cycleBegin = i;
 8001a32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a34:	647b      	str	r3, [r7, #68]	; 0x44
            temp = matrix->buffer[i];
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	4413      	add	r3, r2
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	657b      	str	r3, [r7, #84]	; 0x54
            do
            {
                size_t col = i % matrix->cols;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689a      	ldr	r2, [r3, #8]
 8001a48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a4a:	fbb3 f1f2 	udiv	r1, r3, r2
 8001a4e:	fb01 f202 	mul.w	r2, r1, r2
 8001a52:	1a9b      	subs	r3, r3, r2
 8001a54:	643b      	str	r3, [r7, #64]	; 0x40
                size_t row = i / matrix->cols;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a60:	63fb      	str	r3, [r7, #60]	; 0x3c
                // swap row and col to make new idx, b/c we want to know where in the transposed matrix
                next = col*matrix->rows + row;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001a68:	fb02 f303 	mul.w	r3, r2, r3
 8001a6c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001a6e:	4413      	add	r3, r2
 8001a70:	63bb      	str	r3, [r7, #56]	; 0x38
                float temp2 = matrix->buffer[next];
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	4413      	add	r3, r2
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	637b      	str	r3, [r7, #52]	; 0x34
                matrix->buffer[next] = temp;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	4413      	add	r3, r2
 8001a8a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001a8c:	601a      	str	r2, [r3, #0]
                temp = temp2;
 8001a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a90:	657b      	str	r3, [r7, #84]	; 0x54
                done[next] = true;
 8001a92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a96:	f107 0108 	add.w	r1, r7, #8
 8001a9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f004 fdce 	bl	800663e <_ZNSt6vectorIbN2ei7EiAllocIbEEEixEj>
 8001aa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aa6:	2101      	movs	r1, #1
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff fdad 	bl	8001608 <_ZNSt14_Bit_referenceaSEb>
                i = next;
 8001aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ab0:	653b      	str	r3, [r7, #80]	; 0x50
            }
            while (i != cycleBegin);
 8001ab2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001ab4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d000      	beq.n	8001abc <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE+0xc2>
            do
 8001aba:	e7c3      	b.n	8001a44 <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE+0x4a>

            // start next cycle by find next not done
            for (i = all_done_mark; done[i]; i++) {
 8001abc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001abe:	653b      	str	r3, [r7, #80]	; 0x50
 8001ac0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ac4:	f107 0108 	add.w	r1, r7, #8
 8001ac8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001aca:	4618      	mov	r0, r3
 8001acc:	f004 fdb7 	bl	800663e <_ZNSt6vectorIbN2ei7EiAllocIbEEEixEj>
 8001ad0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff fd82 	bl	80015de <_ZNKSt14_Bit_referencecvbEv>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d0a8      	beq.n	8001a32 <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE+0x38>
                all_done_mark++; // move the high water mark so we don't look again
 8001ae0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	64fb      	str	r3, [r7, #76]	; 0x4c
                if(i>=size) { goto LOOP_END; }
 8001ae6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001ae8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d203      	bcs.n	8001af6 <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE+0xfc>
            for (i = all_done_mark; done[i]; i++) {
 8001aee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001af0:	3301      	adds	r3, #1
 8001af2:	653b      	str	r3, [r7, #80]	; 0x50
 8001af4:	e7e4      	b.n	8001ac0 <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE+0xc6>
                if(i>=size) { goto LOOP_END; }
 8001af6:	bf00      	nop
            }
        }
        LOOP_END:
        // finally, swap the row and column dimensions
        std::swap(matrix->rows, matrix->cols);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	1d1a      	adds	r2, r3, #4
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3308      	adds	r3, #8
 8001b00:	4619      	mov	r1, r3
 8001b02:	4610      	mov	r0, r2
 8001b04:	f004 fdc6 	bl	8006694 <_ZSt4swapImENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
        ei_vector<bool> done(size+1,false);
 8001b08:	f107 0308 	add.w	r3, r7, #8
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f004 fd89 	bl	8006624 <_ZNSt6vectorIbN2ei7EiAllocIbEEED1Ev>
    }
 8001b12:	bf00      	nop
 8001b14:	3758      	adds	r7, #88	; 0x58
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <_ZN2ei5numpy9transposeEPNS_9ei_matrixE>:
     * @param rows
     * @param columns
     * @deprecated You probably want to use transpose_in_place
     * @returns EIDSP_OK if OK
     */
    static int transpose(matrix_t *matrix) {
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b084      	sub	sp, #16
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
        int r = transpose(matrix->buffer, matrix->cols, matrix->rows);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6818      	ldr	r0, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	461a      	mov	r2, r3
 8001b32:	f000 f817 	bl	8001b64 <_ZN2ei5numpy9transposeEPfii>
 8001b36:	60f8      	str	r0, [r7, #12]
        if (r != 0) {
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <_ZN2ei5numpy9transposeEPNS_9ei_matrixE+0x28>
            return r;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	e00c      	b.n	8001b5c <_ZN2ei5numpy9transposeEPNS_9ei_matrixE+0x42>
        }

        uint16_t old_rows = matrix->rows;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	817b      	strh	r3, [r7, #10]
        uint16_t old_cols = matrix->cols;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	813b      	strh	r3, [r7, #8]

        matrix->rows = old_cols;
 8001b4e:	893a      	ldrh	r2, [r7, #8]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	605a      	str	r2, [r3, #4]
        matrix->cols = old_rows;
 8001b54:	897a      	ldrh	r2, [r7, #10]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	609a      	str	r2, [r3, #8]

        return EIDSP_OK;
 8001b5a:	2300      	movs	r3, #0
    }
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3710      	adds	r7, #16
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <_ZN2ei5numpy9transposeEPfii>:
     * @param rows
     * @param columns
     * @deprecated You probably want to use transpose_in_place
     * @returns EIDSP_OK if OK
     */
    static int transpose(float *matrix, int rows, int columns) {
 8001b64:	b590      	push	{r4, r7, lr}
 8001b66:	b08f      	sub	sp, #60	; 0x3c
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	607a      	str	r2, [r7, #4]
        EI_DSP_MATRIX(temp_matrix, rows, columns);
 8001b70:	68b9      	ldr	r1, [r7, #8]
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001b78:	2300      	movs	r3, #0
 8001b7a:	f7ff fe4e 	bl	800181a <_ZN2ei9ei_matrixC1EmmPf>
 8001b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d101      	bne.n	8001b88 <_ZN2ei5numpy9transposeEPfii+0x24>
 8001b84:	4c23      	ldr	r4, [pc, #140]	; (8001c14 <_ZN2ei5numpy9transposeEPfii+0xb0>)
 8001b86:	e03b      	b.n	8001c00 <_ZN2ei5numpy9transposeEPfii+0x9c>
        if (!temp_matrix.buffer) {
 8001b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d101      	bne.n	8001b92 <_ZN2ei5numpy9transposeEPfii+0x2e>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001b8e:	4c21      	ldr	r4, [pc, #132]	; (8001c14 <_ZN2ei5numpy9transposeEPfii+0xb0>)
 8001b90:	e036      	b.n	8001c00 <_ZN2ei5numpy9transposeEPfii+0x9c>
        }

#if EIDSP_USE_CMSIS_DSP
        if (rows > EI_MAX_UINT16 || columns > EI_MAX_UINT16) {
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b98:	da03      	bge.n	8001ba2 <_ZN2ei5numpy9transposeEPfii+0x3e>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ba0:	db01      	blt.n	8001ba6 <_ZN2ei5numpy9transposeEPfii+0x42>
            return EIDSP_NARROWING;
 8001ba2:	4c1d      	ldr	r4, [pc, #116]	; (8001c18 <_ZN2ei5numpy9transposeEPfii+0xb4>)
 8001ba4:	e02c      	b.n	8001c00 <_ZN2ei5numpy9transposeEPfii+0x9c>

        const arm_matrix_instance_f32 i_m = {
            static_cast<uint16_t>(columns),
            static_cast<uint16_t>(rows),
            matrix
        };
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	83bb      	strh	r3, [r7, #28]
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	83fb      	strh	r3, [r7, #30]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	623b      	str	r3, [r7, #32]
        arm_matrix_instance_f32 o_m = {
            static_cast<uint16_t>(rows),
            static_cast<uint16_t>(columns),
            temp_matrix.buffer
        };
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	82bb      	strh	r3, [r7, #20]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	82fb      	strh	r3, [r7, #22]
            temp_matrix.buffer
 8001bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        };
 8001bc4:	61bb      	str	r3, [r7, #24]
        arm_status status = arm_mat_trans_f32(&i_m, &o_m);
 8001bc6:	f107 0214 	add.w	r2, r7, #20
 8001bca:	f107 031c 	add.w	r3, r7, #28
 8001bce:	4611      	mov	r1, r2
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f00e f821 	bl	800fc18 <arm_mat_trans_f32>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        if (status != ARM_MATH_SUCCESS) {
 8001bdc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d002      	beq.n	8001bea <_ZN2ei5numpy9transposeEPfii+0x86>
            return status;
 8001be4:	f997 4037 	ldrsb.w	r4, [r7, #55]	; 0x37
 8001be8:	e00a      	b.n	8001c00 <_ZN2ei5numpy9transposeEPfii+0x9c>
                temp_matrix.buffer[j * columns + i] = matrix[i * rows + j];
            }
        }
#endif

        memcpy(matrix, temp_matrix.buffer, rows * columns * sizeof(float));
 8001bea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	fb02 f303 	mul.w	r3, r2, r3
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	68f8      	ldr	r0, [r7, #12]
 8001bfa:	f021 fca1 	bl	8023540 <memcpy>

        return EIDSP_OK;
 8001bfe:	2400      	movs	r4, #0
        EI_DSP_MATRIX(temp_matrix, rows, columns);
 8001c00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff fe33 	bl	8001870 <_ZN2ei9ei_matrixD1Ev>
    }
 8001c0a:	4623      	mov	r3, r4
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	373c      	adds	r7, #60	; 0x3c
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd90      	pop	{r4, r7, pc}
 8001c14:	fffffc16 	.word	0xfffffc16
 8001c18:	fffffc0c 	.word	0xfffffc0c

08001c1c <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>:
     * Scale a matrix in place
     * @param matrix
     * @param scale
     * @returns 0 if OK
     */
    static int scale(matrix_t *matrix, float scale) {
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b088      	sub	sp, #32
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	ed87 0a00 	vstr	s0, [r7]
        if (scale == 1.0f) return EIDSP_OK;
 8001c28:	edd7 7a00 	vldr	s15, [r7]
 8001c2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001c30:	eef4 7a47 	vcmp.f32	s15, s14
 8001c34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c38:	d101      	bne.n	8001c3e <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x22>
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	e033      	b.n	8001ca6 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>

#if EIDSP_USE_CMSIS_DSP
        if (matrix->rows > EI_MAX_UINT16 || matrix->cols > EI_MAX_UINT16) {
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c46:	d204      	bcs.n	8001c52 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x36>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c50:	d301      	bcc.n	8001c56 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x3a>
            return EIDSP_NARROWING;
 8001c52:	4b17      	ldr	r3, [pc, #92]	; (8001cb0 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x94>)
 8001c54:	e027      	b.n	8001ca6 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>
        }

        const arm_matrix_instance_f32 mi = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	82bb      	strh	r3, [r7, #20]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	82fb      	strh	r3, [r7, #22]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	61bb      	str	r3, [r7, #24]
        arm_matrix_instance_f32 mo = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	81bb      	strh	r3, [r7, #12]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	81fb      	strh	r3, [r7, #14]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	613b      	str	r3, [r7, #16]
        int status = arm_mat_scale_f32(&mi, scale, &mo);
 8001c82:	f107 020c 	add.w	r2, r7, #12
 8001c86:	f107 0314 	add.w	r3, r7, #20
 8001c8a:	4611      	mov	r1, r2
 8001c8c:	ed97 0a00 	vldr	s0, [r7]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f00d ff8b 	bl	800fbac <arm_mat_scale_f32>
 8001c96:	4603      	mov	r3, r0
 8001c98:	61fb      	str	r3, [r7, #28]
        if (status != ARM_MATH_SUCCESS) {
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x88>
            return status;
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	e000      	b.n	8001ca6 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>
#else
        for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
            matrix->buffer[ix] *= scale;
        }
#endif
        return EIDSP_OK;
 8001ca4:	2300      	movs	r3, #0
    }
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3720      	adds	r7, #32
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	fffffc0c 	.word	0xfffffc0c

08001cb4 <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf>:
     * Subtract from matrix in place
     * @param matrix
     * @param subtraction
     * @returns 0 if OK
     */
    static int subtract(matrix_t *matrix, float subtraction) {
 8001cb4:	b480      	push	{r7}
 8001cb6:	b085      	sub	sp, #20
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	ed87 0a00 	vstr	s0, [r7]
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	6892      	ldr	r2, [r2, #8]
 8001ccc:	fb02 f303 	mul.w	r3, r2, r3
 8001cd0:	68fa      	ldr	r2, [r7, #12]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d215      	bcs.n	8001d02 <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf+0x4e>
            matrix->buffer[ix] -= subtraction;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	4413      	add	r3, r2
 8001ce0:	ed93 7a00 	vldr	s14, [r3]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	4413      	add	r3, r2
 8001cee:	edd7 7a00 	vldr	s15, [r7]
 8001cf2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cf6:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	e7e0      	b.n	8001cc4 <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf+0x10>
        }
        return EIDSP_OK;
 8001d02:	2300      	movs	r3, #0
    }
 8001d04:	4618      	mov	r0, r3
 8001d06:	3714      	adds	r7, #20
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_>:
     * Add on a matrix in place, per row
     * @param matrix Input matrix (MxN)
     * @param add Scale matrix (Mx1)
     * @returns 0 if OK
     */
    static int subtract(matrix_t *matrix, matrix_t *subtract_matrix) {
 8001d10:	b5b0      	push	{r4, r5, r7, lr}
 8001d12:	b088      	sub	sp, #32
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
        if (matrix->rows != subtract_matrix->rows) {
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685a      	ldr	r2, [r3, #4]
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d001      	beq.n	8001d2a <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001d26:	4c26      	ldr	r4, [pc, #152]	; (8001dc0 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xb0>)
 8001d28:	e045      	b.n	8001db6 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xa6>
        }

        if (subtract_matrix->cols != 1) {
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d001      	beq.n	8001d36 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001d32:	4c23      	ldr	r4, [pc, #140]	; (8001dc0 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xb0>)
 8001d34:	e03f      	b.n	8001db6 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xa6>
        }

        for (size_t row = 0; row < matrix->rows; row++) {
 8001d36:	2300      	movs	r3, #0
 8001d38:	61fb      	str	r3, [r7, #28]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	69fa      	ldr	r2, [r7, #28]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d237      	bcs.n	8001db4 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xa4>
            EI_DSP_MATRIX_B(temp, 1, matrix->cols, matrix->buffer + (row * matrix->cols));
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689d      	ldr	r5, [r3, #8]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	69f9      	ldr	r1, [r7, #28]
 8001d52:	fb01 f303 	mul.w	r3, r1, r3
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	4413      	add	r3, r2
 8001d5a:	f107 0008 	add.w	r0, r7, #8
 8001d5e:	462a      	mov	r2, r5
 8001d60:	2101      	movs	r1, #1
 8001d62:	f7ff fd5a 	bl	800181a <_ZN2ei9ei_matrixC1EmmPf>
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d102      	bne.n	8001d72 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x62>
 8001d6c:	4c15      	ldr	r4, [pc, #84]	; (8001dc4 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xb4>)
 8001d6e:	2500      	movs	r5, #0
 8001d70:	e015      	b.n	8001d9e <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x8e>
            int ret = subtract(&temp, subtract_matrix->buffer[row]);
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	4413      	add	r3, r2
 8001d7c:	edd3 7a00 	vldr	s15, [r3]
 8001d80:	f107 0308 	add.w	r3, r7, #8
 8001d84:	eeb0 0a67 	vmov.f32	s0, s15
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff ff93 	bl	8001cb4 <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf>
 8001d8e:	61b8      	str	r0, [r7, #24]
            if (ret != EIDSP_OK) {
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d002      	beq.n	8001d9c <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x8c>
                EIDSP_ERR(ret);
 8001d96:	69bc      	ldr	r4, [r7, #24]
 8001d98:	2500      	movs	r5, #0
 8001d9a:	e000      	b.n	8001d9e <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x8e>
 8001d9c:	2501      	movs	r5, #1
 8001d9e:	f107 0308 	add.w	r3, r7, #8
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff fd64 	bl	8001870 <_ZN2ei9ei_matrixD1Ev>
 8001da8:	2d01      	cmp	r5, #1
 8001daa:	d104      	bne.n	8001db6 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xa6>
        for (size_t row = 0; row < matrix->rows; row++) {
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	3301      	adds	r3, #1
 8001db0:	61fb      	str	r3, [r7, #28]
 8001db2:	e7c2      	b.n	8001d3a <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x2a>
            }
        }

        return EIDSP_OK;
 8001db4:	2400      	movs	r4, #0
    }
 8001db6:	4623      	mov	r3, r4
 8001db8:	4618      	mov	r0, r3
 8001dba:	3720      	adds	r7, #32
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bdb0      	pop	{r4, r5, r7, pc}
 8001dc0:	fffffc14 	.word	0xfffffc14
 8001dc4:	fffffc16 	.word	0xfffffc16

08001dc8 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_>:
     * Calculate the root mean square of a matrix, one per row
     * @param matrix Matrix of size (MxN)
     * @param output_matrix Matrix of size (Mx1)
     * @returns 0 if OK
     */
    static int rms(matrix_t *matrix, matrix_t *output_matrix) {
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
        if (matrix->rows != output_matrix->rows) {
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685a      	ldr	r2, [r3, #4]
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d001      	beq.n	8001de2 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001dde:	4b17      	ldr	r3, [pc, #92]	; (8001e3c <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x74>)
 8001de0:	e028      	b.n	8001e34 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x6c>
        }

        if (output_matrix->cols != 1) {
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d001      	beq.n	8001dee <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001dea:	4b14      	ldr	r3, [pc, #80]	; (8001e3c <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x74>)
 8001dec:	e022      	b.n	8001e34 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x6c>
        }

        for (size_t row = 0; row < matrix->rows; row++) {
 8001dee:	2300      	movs	r3, #0
 8001df0:	60fb      	str	r3, [r7, #12]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	68fa      	ldr	r2, [r7, #12]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d21a      	bcs.n	8001e32 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x6a>
#if EIDSP_USE_CMSIS_DSP
            float rms_result;
            arm_rms_f32(matrix->buffer + (row * matrix->cols), matrix->cols, &rms_result);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	68f9      	ldr	r1, [r7, #12]
 8001e06:	fb01 f303 	mul.w	r3, r1, r3
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	18d0      	adds	r0, r2, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f107 0208 	add.w	r2, r7, #8
 8001e16:	4619      	mov	r1, r3
 8001e18:	f00d ff6e 	bl	800fcf8 <arm_rms_f32>
            output_matrix->buffer[row] = rms_result;
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	4413      	add	r3, r2
 8001e26:	68ba      	ldr	r2, [r7, #8]
 8001e28:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < matrix->rows; row++) {
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	60fb      	str	r3, [r7, #12]
 8001e30:	e7df      	b.n	8001df2 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x2a>
            }
            output_matrix->buffer[row] = sqrt(sum / static_cast<float>(matrix->cols));
#endif
        }

        return EIDSP_OK;
 8001e32:	2300      	movs	r3, #0
    }
 8001e34:	4618      	mov	r0, r3
 8001e36:	3710      	adds	r7, #16
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	fffffc14 	.word	0xfffffc14

08001e40 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_>:
    /**
     * Calculate the mean over a matrix per row
     * @param input_matrix Input matrix (MxN)
     * @param output_matrix Output matrix (Mx1)
     */
    static int mean(matrix_t *input_matrix, matrix_t *output_matrix) {
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
        if (input_matrix->rows != output_matrix->rows) {
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685a      	ldr	r2, [r3, #4]
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d001      	beq.n	8001e5a <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001e56:	4b17      	ldr	r3, [pc, #92]	; (8001eb4 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x74>)
 8001e58:	e028      	b.n	8001eac <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x6c>
        }
        if (output_matrix->cols != 1) {
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d001      	beq.n	8001e66 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001e62:	4b14      	ldr	r3, [pc, #80]	; (8001eb4 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x74>)
 8001e64:	e022      	b.n	8001eac <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x6c>
        }

        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001e66:	2300      	movs	r3, #0
 8001e68:	60fb      	str	r3, [r7, #12]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d21a      	bcs.n	8001eaa <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x6a>
#if EIDSP_USE_CMSIS_DSP
            float mean;
            arm_mean_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &mean);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	68f9      	ldr	r1, [r7, #12]
 8001e7e:	fb01 f303 	mul.w	r3, r1, r3
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	18d0      	adds	r0, r2, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f107 0208 	add.w	r2, r7, #8
 8001e8e:	4619      	mov	r1, r3
 8001e90:	f00d ff03 	bl	800fc9a <arm_mean_f32>
            output_matrix->buffer[row] = mean;
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	4413      	add	r3, r2
 8001e9e:	68ba      	ldr	r2, [r7, #8]
 8001ea0:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	60fb      	str	r3, [r7, #12]
 8001ea8:	e7df      	b.n	8001e6a <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x2a>

            output_matrix->buffer[row] = sum / input_matrix->cols;
#endif
        }

        return EIDSP_OK;
 8001eaa:	2300      	movs	r3, #0
    }
 8001eac:	4618      	mov	r0, r3
 8001eae:	3710      	adds	r7, #16
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	fffffc14 	.word	0xfffffc14

08001eb8 <_ZN2ei5numpy4rfftEPKfjPfjj>:
     * @param src_size Size of the source buffer
     * @param output Output buffer
     * @param output_size Size of the output buffer, should be n_fft / 2 + 1
     * @returns 0 if OK
     */
    static int rfft(const float *src, size_t src_size, float *output, size_t output_size, size_t n_fft) {
 8001eb8:	b5b0      	push	{r4, r5, r7, lr}
 8001eba:	b098      	sub	sp, #96	; 0x60
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
 8001ec4:	603b      	str	r3, [r7, #0]
        size_t n_fft_out_features = (n_fft / 2) + 1;
 8001ec6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ec8:	085b      	lsrs	r3, r3, #1
 8001eca:	3301      	adds	r3, #1
 8001ecc:	657b      	str	r3, [r7, #84]	; 0x54
        if (output_size != n_fft_out_features) {
 8001ece:	683a      	ldr	r2, [r7, #0]
 8001ed0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d001      	beq.n	8001eda <_ZN2ei5numpy4rfftEPKfjPfjj+0x22>
            EIDSP_ERR(EIDSP_BUFFER_SIZE_MISMATCH);
 8001ed6:	4c65      	ldr	r4, [pc, #404]	; (800206c <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b4>)
 8001ed8:	e0c2      	b.n	8002060 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1a8>
        }

        // truncate if needed
        if (src_size > n_fft) {
 8001eda:	68ba      	ldr	r2, [r7, #8]
 8001edc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d901      	bls.n	8001ee6 <_ZN2ei5numpy4rfftEPKfjPfjj+0x2e>
            src_size = n_fft;
 8001ee2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ee4:	60bb      	str	r3, [r7, #8]
        }

        // declare input and output arrays
        EI_DSP_MATRIX(fft_input, 1, n_fft);
 8001ee6:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001eea:	2300      	movs	r3, #0
 8001eec:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001eee:	2101      	movs	r1, #1
 8001ef0:	f7ff fc93 	bl	800181a <_ZN2ei9ei_matrixC1EmmPf>
 8001ef4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d101      	bne.n	8001efe <_ZN2ei5numpy4rfftEPKfjPfjj+0x46>
 8001efa:	4c5d      	ldr	r4, [pc, #372]	; (8002070 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b8>)
 8001efc:	e0ab      	b.n	8002056 <_ZN2ei5numpy4rfftEPKfjPfjj+0x19e>
        if (!fft_input.buffer) {
 8001efe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d101      	bne.n	8001f08 <_ZN2ei5numpy4rfftEPKfjPfjj+0x50>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001f04:	4c5a      	ldr	r4, [pc, #360]	; (8002070 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b8>)
 8001f06:	e0a6      	b.n	8002056 <_ZN2ei5numpy4rfftEPKfjPfjj+0x19e>
        }

        // copy from src to fft_input
        memcpy(fft_input.buffer, src, src_size * sizeof(float));
 8001f08:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	461a      	mov	r2, r3
 8001f10:	68f9      	ldr	r1, [r7, #12]
 8001f12:	f021 fb15 	bl	8023540 <memcpy>
        // pad to the rigth with zeros
        memset(fft_input.buffer + src_size, 0, (n_fft - src_size) * sizeof(kiss_fft_scalar));
 8001f16:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	18d0      	adds	r0, r2, r3
 8001f1e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	461a      	mov	r2, r3
 8001f28:	2100      	movs	r1, #0
 8001f2a:	f021 fb31 	bl	8023590 <memset>

#if EIDSP_USE_CMSIS_DSP
        if (n_fft != 32 && n_fft != 64 && n_fft != 128 && n_fft != 256 &&
 8001f2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f30:	2b20      	cmp	r3, #32
 8001f32:	d025      	beq.n	8001f80 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 8001f34:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f36:	2b40      	cmp	r3, #64	; 0x40
 8001f38:	d022      	beq.n	8001f80 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 8001f3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f3c:	2b80      	cmp	r3, #128	; 0x80
 8001f3e:	d01f      	beq.n	8001f80 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 8001f40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f46:	d01b      	beq.n	8001f80 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 8001f48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f4e:	d017      	beq.n	8001f80 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
            n_fft != 512 && n_fft != 1024 && n_fft != 2048 && n_fft != 4096) {
 8001f50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f56:	d013      	beq.n	8001f80 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 8001f58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f5e:	d00f      	beq.n	8001f80 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 8001f60:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f66:	d00b      	beq.n	8001f80 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
            int ret = software_rfft(fft_input.buffer, output, n_fft, n_fft_out_features);
 8001f68:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001f6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f6c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001f6e:	6879      	ldr	r1, [r7, #4]
 8001f70:	f000 fa4e 	bl	8002410 <_ZN2ei5numpy13software_rfftEPfS1_jj>
 8001f74:	6538      	str	r0, [r7, #80]	; 0x50
            if (ret != EIDSP_OK) {
 8001f76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d068      	beq.n	800204e <_ZN2ei5numpy4rfftEPKfjPfjj+0x196>
                EIDSP_ERR(ret);
 8001f7c:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8001f7e:	e06a      	b.n	8002056 <_ZN2ei5numpy4rfftEPKfjPfjj+0x19e>
            }
        }
        else {
            // hardware acceleration only works for the powers above...
            arm_rfft_fast_instance_f32 rfft_instance;
            int status = cmsis_rfft_init_f32(&rfft_instance, n_fft);
 8001f80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f84:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8001f86:	4618      	mov	r0, r3
 8001f88:	f000 fada 	bl	8002540 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j>
 8001f8c:	64f8      	str	r0, [r7, #76]	; 0x4c
            if (status != ARM_MATH_SUCCESS) {
 8001f8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <_ZN2ei5numpy4rfftEPKfjPfjj+0xe0>
                return status;
 8001f94:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8001f96:	e05d      	b.n	8002054 <_ZN2ei5numpy4rfftEPKfjPfjj+0x19c>
            }

            EI_DSP_MATRIX(fft_output, 1, n_fft);
 8001f98:	f107 0014 	add.w	r0, r7, #20
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001fa0:	2101      	movs	r1, #1
 8001fa2:	f7ff fc3a 	bl	800181a <_ZN2ei9ei_matrixC1EmmPf>
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d102      	bne.n	8001fb2 <_ZN2ei5numpy4rfftEPKfjPfjj+0xfa>
 8001fac:	4c30      	ldr	r4, [pc, #192]	; (8002070 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b8>)
 8001fae:	2500      	movs	r5, #0
 8001fb0:	e045      	b.n	800203e <_ZN2ei5numpy4rfftEPKfjPfjj+0x186>
            if (!fft_output.buffer) {
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d102      	bne.n	8001fbe <_ZN2ei5numpy4rfftEPKfjPfjj+0x106>
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001fb8:	4c2d      	ldr	r4, [pc, #180]	; (8002070 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b8>)
 8001fba:	2500      	movs	r5, #0
 8001fbc:	e03f      	b.n	800203e <_ZN2ei5numpy4rfftEPKfjPfjj+0x186>
            }

            arm_rfft_fast_f32(&rfft_instance, fft_input.buffer, fft_output.buffer, 0);
 8001fbe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001fc0:	697a      	ldr	r2, [r7, #20]
 8001fc2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	f010 f9c4 	bl	8012354 <arm_rfft_fast_f32>

            output[0] = fft_output.buffer[0];
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	601a      	str	r2, [r3, #0]
            output[n_fft_out_features - 1] = fft_output.buffer[1];
 8001fd4:	697a      	ldr	r2, [r7, #20]
 8001fd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fd8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001fdc:	3b01      	subs	r3, #1
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	6879      	ldr	r1, [r7, #4]
 8001fe2:	440b      	add	r3, r1
 8001fe4:	6852      	ldr	r2, [r2, #4]
 8001fe6:	601a      	str	r2, [r3, #0]

            size_t fft_output_buffer_ix = 2;
 8001fe8:	2302      	movs	r3, #2
 8001fea:	65fb      	str	r3, [r7, #92]	; 0x5c
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 8001fec:	2301      	movs	r3, #1
 8001fee:	65bb      	str	r3, [r7, #88]	; 0x58
 8001ff0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d220      	bcs.n	800203c <_ZN2ei5numpy4rfftEPKfjPfjj+0x184>
                float rms_result;
                arm_rms_f32(fft_output.buffer + fft_output_buffer_ix, 2, &rms_result);
 8001ffa:	697a      	ldr	r2, [r7, #20]
 8001ffc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	4413      	add	r3, r2
 8002002:	f107 0210 	add.w	r2, r7, #16
 8002006:	2102      	movs	r1, #2
 8002008:	4618      	mov	r0, r3
 800200a:	f00d fe75 	bl	800fcf8 <arm_rms_f32>
                output[ix] = rms_result * sqrt(2);
 800200e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8002012:	f7ff fcca 	bl	80019aa <_ZN2ei5numpy4sqrtEf>
 8002016:	eeb0 7a40 	vmov.f32	s14, s0
 800201a:	edd7 7a04 	vldr	s15, [r7, #16]
 800201e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	4413      	add	r3, r2
 8002026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800202a:	edc3 7a00 	vstr	s15, [r3]

                fft_output_buffer_ix += 2;
 800202e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002030:	3302      	adds	r3, #2
 8002032:	65fb      	str	r3, [r7, #92]	; 0x5c
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 8002034:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002036:	3301      	adds	r3, #1
 8002038:	65bb      	str	r3, [r7, #88]	; 0x58
 800203a:	e7d9      	b.n	8001ff0 <_ZN2ei5numpy4rfftEPKfjPfjj+0x138>
 800203c:	2501      	movs	r5, #1
 800203e:	f107 0314 	add.w	r3, r7, #20
 8002042:	4618      	mov	r0, r3
 8002044:	f7ff fc14 	bl	8001870 <_ZN2ei9ei_matrixD1Ev>
 8002048:	2d01      	cmp	r5, #1
 800204a:	d103      	bne.n	8002054 <_ZN2ei5numpy4rfftEPKfjPfjj+0x19c>
 800204c:	e000      	b.n	8002050 <_ZN2ei5numpy4rfftEPKfjPfjj+0x198>
            }
 800204e:	bf00      	nop
        if (ret != EIDSP_OK) {
            EIDSP_ERR(ret);
        }
#endif

        return EIDSP_OK;
 8002050:	2400      	movs	r4, #0
 8002052:	e000      	b.n	8002056 <_ZN2ei5numpy4rfftEPKfjPfjj+0x19e>
                return status;
 8002054:	bf00      	nop
        EI_DSP_MATRIX(fft_input, 1, n_fft);
 8002056:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800205a:	4618      	mov	r0, r3
 800205c:	f7ff fc08 	bl	8001870 <_ZN2ei9ei_matrixD1Ev>
    }
 8002060:	4623      	mov	r3, r4
 8002062:	4618      	mov	r0, r3
 8002064:	3760      	adds	r7, #96	; 0x60
 8002066:	46bd      	mov	sp, r7
 8002068:	bdb0      	pop	{r4, r5, r7, pc}
 800206a:	bf00      	nop
 800206c:	fffffc11 	.word	0xfffffc11
 8002070:	fffffc16 	.word	0xfffffc16

08002074 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj>:
     * @param src_size Size of the source buffer
     * @param output Output buffer
     * @param output_size Size of the output buffer, should be n_fft / 2 + 1
     * @returns 0 if OK
     */
    static int rfft(const float *src, size_t src_size, fft_complex_t *output, size_t output_size, size_t n_fft) {
 8002074:	b5b0      	push	{r4, r5, r7, lr}
 8002076:	b098      	sub	sp, #96	; 0x60
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	607a      	str	r2, [r7, #4]
 8002080:	603b      	str	r3, [r7, #0]
        size_t n_fft_out_features = (n_fft / 2) + 1;
 8002082:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002084:	085b      	lsrs	r3, r3, #1
 8002086:	3301      	adds	r3, #1
 8002088:	653b      	str	r3, [r7, #80]	; 0x50
        if (output_size != n_fft_out_features) {
 800208a:	683a      	ldr	r2, [r7, #0]
 800208c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800208e:	429a      	cmp	r2, r3
 8002090:	d001      	beq.n	8002096 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x22>
            EIDSP_ERR(EIDSP_BUFFER_SIZE_MISMATCH);
 8002092:	4c6f      	ldr	r4, [pc, #444]	; (8002250 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1dc>)
 8002094:	e0d6      	b.n	8002244 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1d0>
        }

        // truncate if needed
        if (src_size > n_fft) {
 8002096:	68ba      	ldr	r2, [r7, #8]
 8002098:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800209a:	429a      	cmp	r2, r3
 800209c:	d901      	bls.n	80020a2 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x2e>
            src_size = n_fft;
 800209e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020a0:	60bb      	str	r3, [r7, #8]
        }

        // declare input and output arrays
        float *fft_input_buffer = NULL;
 80020a2:	2300      	movs	r3, #0
 80020a4:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (src_size == n_fft) {
 80020a6:	68ba      	ldr	r2, [r7, #8]
 80020a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d101      	bne.n	80020b2 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x3e>
            fft_input_buffer = (float*)src;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        EI_DSP_MATRIX_B(fft_input, 1, n_fft, fft_input_buffer);
 80020b2:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80020b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020b8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80020ba:	2101      	movs	r1, #1
 80020bc:	f7ff fbad 	bl	800181a <_ZN2ei9ei_matrixC1EmmPf>
 80020c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x56>
 80020c6:	4c63      	ldr	r4, [pc, #396]	; (8002254 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1e0>)
 80020c8:	e0b7      	b.n	800223a <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c6>
        if (!fft_input.buffer) {
 80020ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d101      	bne.n	80020d4 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x60>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 80020d0:	4c60      	ldr	r4, [pc, #384]	; (8002254 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1e0>)
 80020d2:	e0b2      	b.n	800223a <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c6>
        }

        if (!fft_input_buffer) {
 80020d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d112      	bne.n	8002100 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x8c>
            // copy from src to fft_input
            memcpy(fft_input.buffer, src, src_size * sizeof(float));
 80020da:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	461a      	mov	r2, r3
 80020e2:	68f9      	ldr	r1, [r7, #12]
 80020e4:	f021 fa2c 	bl	8023540 <memcpy>
            // pad to the rigth with zeros
            memset(fft_input.buffer + src_size, 0, (n_fft - src_size) * sizeof(float));
 80020e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	18d0      	adds	r0, r2, r3
 80020f0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	461a      	mov	r2, r3
 80020fa:	2100      	movs	r1, #0
 80020fc:	f021 fa48 	bl	8023590 <memset>
        }

#if EIDSP_USE_CMSIS_DSP
        if (n_fft != 32 && n_fft != 64 && n_fft != 128 && n_fft != 256 &&
 8002100:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002102:	2b20      	cmp	r3, #32
 8002104:	d025      	beq.n	8002152 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 8002106:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002108:	2b40      	cmp	r3, #64	; 0x40
 800210a:	d022      	beq.n	8002152 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 800210c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800210e:	2b80      	cmp	r3, #128	; 0x80
 8002110:	d01f      	beq.n	8002152 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 8002112:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002114:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002118:	d01b      	beq.n	8002152 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 800211a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800211c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002120:	d017      	beq.n	8002152 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
            n_fft != 512 && n_fft != 1024 && n_fft != 2048 && n_fft != 4096) {
 8002122:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002124:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002128:	d013      	beq.n	8002152 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 800212a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800212c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002130:	d00f      	beq.n	8002152 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 8002132:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002134:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002138:	d00b      	beq.n	8002152 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
            int ret = software_rfft(fft_input.buffer, output, n_fft, n_fft_out_features);
 800213a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800213c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800213e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002140:	6879      	ldr	r1, [r7, #4]
 8002142:	f000 f9d7 	bl	80024f4 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj>
 8002146:	64f8      	str	r0, [r7, #76]	; 0x4c
            if (ret != EIDSP_OK) {
 8002148:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800214a:	2b00      	cmp	r3, #0
 800214c:	d071      	beq.n	8002232 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1be>
                EIDSP_ERR(ret);
 800214e:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8002150:	e073      	b.n	800223a <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c6>
            }
        }
        else {
            // hardware acceleration only works for the powers above...
            arm_rfft_fast_instance_f32 rfft_instance;
            int status = cmsis_rfft_init_f32(&rfft_instance, n_fft);
 8002152:	f107 0320 	add.w	r3, r7, #32
 8002156:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8002158:	4618      	mov	r0, r3
 800215a:	f000 f9f1 	bl	8002540 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j>
 800215e:	64b8      	str	r0, [r7, #72]	; 0x48
            if (status != ARM_MATH_SUCCESS) {
 8002160:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xf6>
                return status;
 8002166:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8002168:	e066      	b.n	8002238 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c4>
            }

            EI_DSP_MATRIX(fft_output, 1, n_fft);
 800216a:	f107 0010 	add.w	r0, r7, #16
 800216e:	2300      	movs	r3, #0
 8002170:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002172:	2101      	movs	r1, #1
 8002174:	f7ff fb51 	bl	800181a <_ZN2ei9ei_matrixC1EmmPf>
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d102      	bne.n	8002184 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x110>
 800217e:	4c35      	ldr	r4, [pc, #212]	; (8002254 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1e0>)
 8002180:	2500      	movs	r5, #0
 8002182:	e04e      	b.n	8002222 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1ae>
            if (!fft_output.buffer) {
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d102      	bne.n	8002190 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x11c>
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
 800218a:	4c32      	ldr	r4, [pc, #200]	; (8002254 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1e0>)
 800218c:	2500      	movs	r5, #0
 800218e:	e048      	b.n	8002222 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1ae>
            }

            arm_rfft_fast_f32(&rfft_instance, fft_input.buffer, fft_output.buffer, 0);
 8002190:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	f107 0020 	add.w	r0, r7, #32
 8002198:	2300      	movs	r3, #0
 800219a:	f010 f8db 	bl	8012354 <arm_rfft_fast_f32>

            output[0].r = fft_output.buffer[0];
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	601a      	str	r2, [r3, #0]
            output[0].i = 0.0f;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f04f 0200 	mov.w	r2, #0
 80021ac:	605a      	str	r2, [r3, #4]
            output[n_fft_out_features - 1].r = fft_output.buffer[1];
 80021ae:	693a      	ldr	r2, [r7, #16]
 80021b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021b2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80021b6:	3b01      	subs	r3, #1
 80021b8:	00db      	lsls	r3, r3, #3
 80021ba:	6879      	ldr	r1, [r7, #4]
 80021bc:	440b      	add	r3, r1
 80021be:	6852      	ldr	r2, [r2, #4]
 80021c0:	601a      	str	r2, [r3, #0]
            output[n_fft_out_features - 1].i = 0.0f;
 80021c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021c4:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80021c8:	3b01      	subs	r3, #1
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	4413      	add	r3, r2
 80021d0:	f04f 0200 	mov.w	r2, #0
 80021d4:	605a      	str	r2, [r3, #4]

            size_t fft_output_buffer_ix = 2;
 80021d6:	2302      	movs	r3, #2
 80021d8:	65bb      	str	r3, [r7, #88]	; 0x58
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 80021da:	2301      	movs	r3, #1
 80021dc:	657b      	str	r3, [r7, #84]	; 0x54
 80021de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021e0:	3b01      	subs	r3, #1
 80021e2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d21b      	bcs.n	8002220 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1ac>
                output[ix].r = fft_output.buffer[fft_output_buffer_ix];
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	441a      	add	r2, r3
 80021f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	6879      	ldr	r1, [r7, #4]
 80021f6:	440b      	add	r3, r1
 80021f8:	6812      	ldr	r2, [r2, #0]
 80021fa:	601a      	str	r2, [r3, #0]
                output[ix].i = fft_output.buffer[fft_output_buffer_ix + 1];
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002200:	3301      	adds	r3, #1
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	441a      	add	r2, r3
 8002206:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002208:	00db      	lsls	r3, r3, #3
 800220a:	6879      	ldr	r1, [r7, #4]
 800220c:	440b      	add	r3, r1
 800220e:	6812      	ldr	r2, [r2, #0]
 8002210:	605a      	str	r2, [r3, #4]

                fft_output_buffer_ix += 2;
 8002212:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002214:	3302      	adds	r3, #2
 8002216:	65bb      	str	r3, [r7, #88]	; 0x58
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 8002218:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800221a:	3301      	adds	r3, #1
 800221c:	657b      	str	r3, [r7, #84]	; 0x54
 800221e:	e7de      	b.n	80021de <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x16a>
 8002220:	2501      	movs	r5, #1
 8002222:	f107 0310 	add.w	r3, r7, #16
 8002226:	4618      	mov	r0, r3
 8002228:	f7ff fb22 	bl	8001870 <_ZN2ei9ei_matrixD1Ev>
 800222c:	2d01      	cmp	r5, #1
 800222e:	d103      	bne.n	8002238 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c4>
 8002230:	e000      	b.n	8002234 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c0>
            }
 8002232:	bf00      	nop
        if (ret != EIDSP_OK) {
            EIDSP_ERR(ret);
        }
#endif

        return EIDSP_OK;
 8002234:	2400      	movs	r4, #0
 8002236:	e000      	b.n	800223a <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c6>
                return status;
 8002238:	bf00      	nop
        EI_DSP_MATRIX_B(fft_input, 1, n_fft, fft_input_buffer);
 800223a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800223e:	4618      	mov	r0, r3
 8002240:	f7ff fb16 	bl	8001870 <_ZN2ei9ei_matrixD1Ev>
    }
 8002244:	4623      	mov	r3, r4
 8002246:	4618      	mov	r0, r3
 8002248:	3760      	adds	r7, #96	; 0x60
 800224a:	46bd      	mov	sp, r7
 800224c:	bdb0      	pop	{r4, r5, r7, pc}
 800224e:	bf00      	nop
 8002250:	fffffc11 	.word	0xfffffc11
 8002254:	fffffc16 	.word	0xfffffc16

08002258 <_ZN2ei5numpy8linspaceEffmPf>:
     * @param stop The end value of the sequence.
     * @param number Number of samples to generate.
     * @param out Out array, with size `number`
     * @returns 0 if OK
     */
    static int linspace(float start, float stop, uint32_t number, float *out)
 8002258:	b480      	push	{r7}
 800225a:	b087      	sub	sp, #28
 800225c:	af00      	add	r7, sp, #0
 800225e:	ed87 0a03 	vstr	s0, [r7, #12]
 8002262:	edc7 0a02 	vstr	s1, [r7, #8]
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
    {
        if (number < 1 || !out) {
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d002      	beq.n	8002276 <_ZN2ei5numpy8linspaceEffmPf+0x1e>
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d101      	bne.n	800227a <_ZN2ei5numpy8linspaceEffmPf+0x22>
            EIDSP_ERR(EIDSP_PARAMETER_INVALID);
 8002276:	4b24      	ldr	r3, [pc, #144]	; (8002308 <_ZN2ei5numpy8linspaceEffmPf+0xb0>)
 8002278:	e03f      	b.n	80022fa <_ZN2ei5numpy8linspaceEffmPf+0xa2>
        }

        if (number == 1) {
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d104      	bne.n	800228a <_ZN2ei5numpy8linspaceEffmPf+0x32>
            out[0] = start;
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	68fa      	ldr	r2, [r7, #12]
 8002284:	601a      	str	r2, [r3, #0]
            return EIDSP_OK;
 8002286:	2300      	movs	r3, #0
 8002288:	e037      	b.n	80022fa <_ZN2ei5numpy8linspaceEffmPf+0xa2>
        }

        // step size
        float step = (stop - start) / (number - 1);
 800228a:	ed97 7a02 	vldr	s14, [r7, #8]
 800228e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002292:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	3b01      	subs	r3, #1
 800229a:	ee07 3a90 	vmov	s15, r3
 800229e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80022a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022a6:	edc7 7a04 	vstr	s15, [r7, #16]

        // do steps
        for (uint32_t ix = 0; ix < number - 1; ix++) {
 80022aa:	2300      	movs	r3, #0
 80022ac:	617b      	str	r3, [r7, #20]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	3b01      	subs	r3, #1
 80022b2:	697a      	ldr	r2, [r7, #20]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d216      	bcs.n	80022e6 <_ZN2ei5numpy8linspaceEffmPf+0x8e>
            out[ix] = start + ix * step;
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	ee07 3a90 	vmov	s15, r3
 80022be:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80022c2:	edd7 7a04 	vldr	s15, [r7, #16]
 80022c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	683a      	ldr	r2, [r7, #0]
 80022d0:	4413      	add	r3, r2
 80022d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80022d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022da:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t ix = 0; ix < number - 1; ix++) {
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	3301      	adds	r3, #1
 80022e2:	617b      	str	r3, [r7, #20]
 80022e4:	e7e3      	b.n	80022ae <_ZN2ei5numpy8linspaceEffmPf+0x56>
        }

        // last entry always stop
        out[number - 1] = stop;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80022ec:	3b01      	subs	r3, #1
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	683a      	ldr	r2, [r7, #0]
 80022f2:	4413      	add	r3, r2
 80022f4:	68ba      	ldr	r2, [r7, #8]
 80022f6:	601a      	str	r2, [r3, #0]

        return EIDSP_OK;
 80022f8:	2300      	movs	r3, #0
    }
 80022fa:	4618      	mov	r0, r3
 80022fc:	371c      	adds	r7, #28
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	fffffc10 	.word	0xfffffc10

0800230c <_ZN2ei5numpy5log10EPNS_9ei_matrixE>:
    /**
     * Calculate the log10 of a matrix. Does an in-place replacement.
     * @param matrix Matrix (MxN)
     * @returns 0 if OK
     */
    static int log10(matrix_t *matrix)
 800230c:	b590      	push	{r4, r7, lr}
 800230e:	b089      	sub	sp, #36	; 0x24
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
    {
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8002314:	2300      	movs	r3, #0
 8002316:	61fb      	str	r3, [r7, #28]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	6892      	ldr	r2, [r2, #8]
 8002320:	fb02 f303 	mul.w	r3, r2, r3
 8002324:	69fa      	ldr	r2, [r7, #28]
 8002326:	429a      	cmp	r2, r3
 8002328:	d263      	bcs.n	80023f2 <_ZN2ei5numpy5log10EPNS_9ei_matrixE+0xe6>
            matrix->buffer[ix] = numpy::log10(matrix->buffer[ix]);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	4413      	add	r3, r2
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	6811      	ldr	r1, [r2, #0]
 800233a:	69fa      	ldr	r2, [r7, #28]
 800233c:	0092      	lsls	r2, r2, #2
 800233e:	188c      	adds	r4, r1, r2
 8002340:	61bb      	str	r3, [r7, #24]
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	617b      	str	r3, [r7, #20]
        float f = frexpf(fabsf(a), &e);
 8002346:	edd7 7a05 	vldr	s15, [r7, #20]
 800234a:	eef0 7ae7 	vabs.f32	s15, s15
 800234e:	f107 0308 	add.w	r3, r7, #8
 8002352:	4618      	mov	r0, r3
 8002354:	eeb0 0a67 	vmov.f32	s0, s15
 8002358:	f01e fd16 	bl	8020d88 <frexpf>
 800235c:	ed87 0a04 	vstr	s0, [r7, #16]
        float y = 1.23149591368684f;
 8002360:	4b26      	ldr	r3, [pc, #152]	; (80023fc <_ZN2ei5numpy5log10EPNS_9ei_matrixE+0xf0>)
 8002362:	60fb      	str	r3, [r7, #12]
        y *= f;
 8002364:	ed97 7a03 	vldr	s14, [r7, #12]
 8002368:	edd7 7a04 	vldr	s15, [r7, #16]
 800236c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002370:	edc7 7a03 	vstr	s15, [r7, #12]
        y += -4.11852516267426f;
 8002374:	edd7 7a03 	vldr	s15, [r7, #12]
 8002378:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002400 <_ZN2ei5numpy5log10EPNS_9ei_matrixE+0xf4>
 800237c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002380:	edc7 7a03 	vstr	s15, [r7, #12]
        y *= f;
 8002384:	ed97 7a03 	vldr	s14, [r7, #12]
 8002388:	edd7 7a04 	vldr	s15, [r7, #16]
 800238c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002390:	edc7 7a03 	vstr	s15, [r7, #12]
        y += 6.02197014179219f;
 8002394:	edd7 7a03 	vldr	s15, [r7, #12]
 8002398:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002404 <_ZN2ei5numpy5log10EPNS_9ei_matrixE+0xf8>
 800239c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80023a0:	edc7 7a03 	vstr	s15, [r7, #12]
        y *= f;
 80023a4:	ed97 7a03 	vldr	s14, [r7, #12]
 80023a8:	edd7 7a04 	vldr	s15, [r7, #16]
 80023ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023b0:	edc7 7a03 	vstr	s15, [r7, #12]
        y += -3.13396450166353f;
 80023b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80023b8:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002408 <_ZN2ei5numpy5log10EPNS_9ei_matrixE+0xfc>
 80023bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80023c0:	edc7 7a03 	vstr	s15, [r7, #12]
        y += e;
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	ee07 3a90 	vmov	s15, r3
 80023ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023ce:	ed97 7a03 	vldr	s14, [r7, #12]
 80023d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023d6:	edc7 7a03 	vstr	s15, [r7, #12]
        return y;
 80023da:	edd7 7a03 	vldr	s15, [r7, #12]
        return numpy::log2(a) * 0.3010299956639812f;
 80023de:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800240c <_ZN2ei5numpy5log10EPNS_9ei_matrixE+0x100>
 80023e2:	ee67 7a87 	vmul.f32	s15, s15, s14
            matrix->buffer[ix] = numpy::log10(matrix->buffer[ix]);
 80023e6:	edc4 7a00 	vstr	s15, [r4]
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	3301      	adds	r3, #1
 80023ee:	61fb      	str	r3, [r7, #28]
 80023f0:	e792      	b.n	8002318 <_ZN2ei5numpy5log10EPNS_9ei_matrixE+0xc>
        }

        return EIDSP_OK;
 80023f2:	2300      	movs	r3, #0
    }
 80023f4:	4618      	mov	r0, r3
 80023f6:	3724      	adds	r7, #36	; 0x24
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd90      	pop	{r4, r7, pc}
 80023fc:	3f9da1a8 	.word	0x3f9da1a8
 8002400:	4083caf5 	.word	0x4083caf5
 8002404:	40c0b3fb 	.word	0x40c0b3fb
 8002408:	404892e0 	.word	0x404892e0
 800240c:	3e9a209b 	.word	0x3e9a209b

08002410 <_ZN2ei5numpy13software_rfftEPfS1_jj>:
        }

        return EIDSP_OK;
    }

    static int software_rfft(float *fft_input, float *output, size_t n_fft, size_t n_fft_out_features) {
 8002410:	b5b0      	push	{r4, r5, r7, lr}
 8002412:	b08a      	sub	sp, #40	; 0x28
 8002414:	af02      	add	r7, sp, #8
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	607a      	str	r2, [r7, #4]
 800241c:	603b      	str	r3, [r7, #0]
        kiss_fft_cpx *fft_output = (kiss_fft_cpx*)ei_dsp_malloc(n_fft_out_features * sizeof(kiss_fft_cpx));
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	00db      	lsls	r3, r3, #3
 8002422:	4618      	mov	r0, r3
 8002424:	f018 fbf0 	bl	801ac08 <_Z9ei_mallocj>
 8002428:	61b8      	str	r0, [r7, #24]
        if (!fft_output) {
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d101      	bne.n	8002434 <_ZN2ei5numpy13software_rfftEPfS1_jj+0x24>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8002430:	4b2f      	ldr	r3, [pc, #188]	; (80024f0 <_ZN2ei5numpy13software_rfftEPfS1_jj+0xe0>)
 8002432:	e058      	b.n	80024e6 <_ZN2ei5numpy13software_rfftEPfS1_jj+0xd6>
        }

        size_t kiss_fftr_mem_length;

        // create fftr context
        kiss_fftr_cfg cfg = kiss_fftr_alloc(n_fft, 0, NULL, NULL, &kiss_fftr_mem_length);
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f107 0310 	add.w	r3, r7, #16
 800243a:	9300      	str	r3, [sp, #0]
 800243c:	2300      	movs	r3, #0
 800243e:	2200      	movs	r2, #0
 8002440:	2100      	movs	r1, #0
 8002442:	f018 f82d 	bl	801a4a0 <kiss_fftr_alloc>
 8002446:	6178      	str	r0, [r7, #20]
        if (!cfg) {
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d104      	bne.n	8002458 <_ZN2ei5numpy13software_rfftEPfS1_jj+0x48>
            ei_dsp_free(fft_output, n_fft_out_features * sizeof(kiss_fft_cpx));
 800244e:	69b8      	ldr	r0, [r7, #24]
 8002450:	f018 fbf4 	bl	801ac3c <_Z7ei_freePv>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8002454:	4b26      	ldr	r3, [pc, #152]	; (80024f0 <_ZN2ei5numpy13software_rfftEPfS1_jj+0xe0>)
 8002456:	e046      	b.n	80024e6 <_ZN2ei5numpy13software_rfftEPfS1_jj+0xd6>
        }

        ei_dsp_register_alloc(kiss_fftr_mem_length, cfg);

        // execute the rfft operation
        kiss_fftr(cfg, fft_input, fft_output);
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	68f9      	ldr	r1, [r7, #12]
 800245c:	6978      	ldr	r0, [r7, #20]
 800245e:	f018 f93f 	bl	801a6e0 <kiss_fftr>

        // and write back to the output
        for (size_t ix = 0; ix < n_fft_out_features; ix++) {
 8002462:	2300      	movs	r3, #0
 8002464:	61fb      	str	r3, [r7, #28]
 8002466:	69fa      	ldr	r2, [r7, #28]
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	429a      	cmp	r2, r3
 800246c:	d234      	bcs.n	80024d8 <_ZN2ei5numpy13software_rfftEPfS1_jj+0xc8>
            output[ix] = sqrt(pow(fft_output[ix].r, 2) + pow(fft_output[ix].i, 2));
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	00db      	lsls	r3, r3, #3
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	4413      	add	r3, r2
 8002476:	edd3 7a00 	vldr	s15, [r3]
 800247a:	2002      	movs	r0, #2
 800247c:	eeb0 0a67 	vmov.f32	s0, s15
 8002480:	f004 f927 	bl	80066d2 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002484:	ec55 4b10 	vmov	r4, r5, d0
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	00db      	lsls	r3, r3, #3
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	4413      	add	r3, r2
 8002490:	edd3 7a01 	vldr	s15, [r3, #4]
 8002494:	2002      	movs	r0, #2
 8002496:	eeb0 0a67 	vmov.f32	s0, s15
 800249a:	f004 f91a 	bl	80066d2 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800249e:	ec53 2b10 	vmov	r2, r3, d0
 80024a2:	4620      	mov	r0, r4
 80024a4:	4629      	mov	r1, r5
 80024a6:	f7fd fefb 	bl	80002a0 <__adddf3>
 80024aa:	4602      	mov	r2, r0
 80024ac:	460b      	mov	r3, r1
 80024ae:	4610      	mov	r0, r2
 80024b0:	4619      	mov	r1, r3
 80024b2:	f7fe fba3 	bl	8000bfc <__aeabi_d2f>
 80024b6:	4601      	mov	r1, r0
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	68ba      	ldr	r2, [r7, #8]
 80024be:	18d4      	adds	r4, r2, r3
 80024c0:	ee00 1a10 	vmov	s0, r1
 80024c4:	f7ff fa71 	bl	80019aa <_ZN2ei5numpy4sqrtEf>
 80024c8:	eef0 7a40 	vmov.f32	s15, s0
 80024cc:	edc4 7a00 	vstr	s15, [r4]
        for (size_t ix = 0; ix < n_fft_out_features; ix++) {
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	3301      	adds	r3, #1
 80024d4:	61fb      	str	r3, [r7, #28]
 80024d6:	e7c6      	b.n	8002466 <_ZN2ei5numpy13software_rfftEPfS1_jj+0x56>
        }

        ei_dsp_free(cfg, kiss_fftr_mem_length);
 80024d8:	6978      	ldr	r0, [r7, #20]
 80024da:	f018 fbaf 	bl	801ac3c <_Z7ei_freePv>
        ei_dsp_free(fft_output, n_fft_out_features * sizeof(kiss_fft_cpx));
 80024de:	69b8      	ldr	r0, [r7, #24]
 80024e0:	f018 fbac 	bl	801ac3c <_Z7ei_freePv>

        return EIDSP_OK;
 80024e4:	2300      	movs	r3, #0
    }
 80024e6:	4618      	mov	r0, r3
 80024e8:	3720      	adds	r7, #32
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bdb0      	pop	{r4, r5, r7, pc}
 80024ee:	bf00      	nop
 80024f0:	fffffc16 	.word	0xfffffc16

080024f4 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj>:

    static int software_rfft(float *fft_input, fft_complex_t *output, size_t n_fft, size_t n_fft_out_features)
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b088      	sub	sp, #32
 80024f8:	af02      	add	r7, sp, #8
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
 8002500:	603b      	str	r3, [r7, #0]
    {
        // create fftr context
        size_t kiss_fftr_mem_length;

        kiss_fftr_cfg cfg = kiss_fftr_alloc(n_fft, 0, NULL, NULL, &kiss_fftr_mem_length);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f107 0310 	add.w	r3, r7, #16
 8002508:	9300      	str	r3, [sp, #0]
 800250a:	2300      	movs	r3, #0
 800250c:	2200      	movs	r2, #0
 800250e:	2100      	movs	r1, #0
 8002510:	f017 ffc6 	bl	801a4a0 <kiss_fftr_alloc>
 8002514:	6178      	str	r0, [r7, #20]
        if (!cfg) {
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d101      	bne.n	8002520 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj+0x2c>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 800251c:	4b07      	ldr	r3, [pc, #28]	; (800253c <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj+0x48>)
 800251e:	e008      	b.n	8002532 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj+0x3e>
        }

        ei_dsp_register_alloc(kiss_fftr_mem_length, cfg);

        // execute the rfft operation
        kiss_fftr(cfg, fft_input, (kiss_fft_cpx*)output);
 8002520:	68ba      	ldr	r2, [r7, #8]
 8002522:	68f9      	ldr	r1, [r7, #12]
 8002524:	6978      	ldr	r0, [r7, #20]
 8002526:	f018 f8db 	bl	801a6e0 <kiss_fftr>

        ei_dsp_free(cfg, kiss_fftr_mem_length);
 800252a:	6978      	ldr	r0, [r7, #20]
 800252c:	f018 fb86 	bl	801ac3c <_Z7ei_freePv>

        return EIDSP_OK;
 8002530:	2300      	movs	r3, #0
    }
 8002532:	4618      	mov	r0, r3
 8002534:	3718      	adds	r7, #24
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	fffffc16 	.word	0xfffffc16

08002540 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j>:
    /**
     * Initialize a CMSIS-DSP fast rfft structure
     * We do it this way as this means we can compile out fast_init calls which hints the compiler
     * to which tables can be removed
     */
    static int cmsis_rfft_init_f32(arm_rfft_fast_instance_f32 *rfft_instance, const size_t n_fft)
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
                status = ARM_MATH_SUCCESS;
                break;
            }
#endif
            default:
                return EIDSP_FFT_TABLE_NOT_LOADED;
 800254a:	4b03      	ldr	r3, [pc, #12]	; (8002558 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0x18>)

        return status;
#else
        return arm_rfft_fast_init_f32(rfft_instance, n_fft);
#endif
    }
 800254c:	4618      	mov	r0, r3
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr
 8002558:	fffffc08 	.word	0xfffffc08

0800255c <_ZN2ei5numpy14power_spectrumEPfjS1_jt>:
     * @param out_buffer Out buffer, size should be fft_points
     * @param out_buffer_size Buffer size
     * @param fft_points (int): The length of FFT. If fft_length is greater than frame_len, the frames will be zero-padded.
     * @returns EIDSP_OK if OK
     */
    static int power_spectrum(
 800255c:	b5b0      	push	{r4, r5, r7, lr}
 800255e:	b088      	sub	sp, #32
 8002560:	af02      	add	r7, sp, #8
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]
 8002568:	603b      	str	r3, [r7, #0]
        size_t frame_size,
        float *out_buffer,
        size_t out_buffer_size,
        uint16_t fft_points)
    {
        if (out_buffer_size != static_cast<size_t>(fft_points / 2 + 1)) {
 800256a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800256c:	085b      	lsrs	r3, r3, #1
 800256e:	b29b      	uxth	r3, r3
 8002570:	3301      	adds	r3, #1
 8002572:	461a      	mov	r2, r3
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	4293      	cmp	r3, r2
 8002578:	d001      	beq.n	800257e <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0x22>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800257a:	4b2b      	ldr	r3, [pc, #172]	; (8002628 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0xcc>)
 800257c:	e050      	b.n	8002620 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0xc4>
        }

        int r = numpy::rfft(frame, frame_size, out_buffer, out_buffer_size, fft_points);
 800257e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002580:	9300      	str	r3, [sp, #0]
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	68b9      	ldr	r1, [r7, #8]
 8002588:	68f8      	ldr	r0, [r7, #12]
 800258a:	f7ff fc95 	bl	8001eb8 <_ZN2ei5numpy4rfftEPKfjPfjj>
 800258e:	6138      	str	r0, [r7, #16]
        if (r != EIDSP_OK) {
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0x3e>
            return r;
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	e042      	b.n	8002620 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0xc4>
        }

        for (size_t ix = 0; ix < out_buffer_size; ix++) {
 800259a:	2300      	movs	r3, #0
 800259c:	617b      	str	r3, [r7, #20]
 800259e:	697a      	ldr	r2, [r7, #20]
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d23b      	bcs.n	800261e <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0xc2>
            out_buffer[ix] = (1.0 / static_cast<float>(fft_points)) *
 80025a6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80025a8:	ee07 3a90 	vmov	s15, r3
 80025ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025b0:	ee17 0a90 	vmov	r0, s15
 80025b4:	f7fd ffd2 	bl	800055c <__aeabi_f2d>
 80025b8:	4602      	mov	r2, r0
 80025ba:	460b      	mov	r3, r1
 80025bc:	f04f 0000 	mov.w	r0, #0
 80025c0:	491a      	ldr	r1, [pc, #104]	; (800262c <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0xd0>)
 80025c2:	f7fe f94d 	bl	8000860 <__aeabi_ddiv>
 80025c6:	4602      	mov	r2, r0
 80025c8:	460b      	mov	r3, r1
 80025ca:	4614      	mov	r4, r2
 80025cc:	461d      	mov	r5, r3
                (out_buffer[ix] * out_buffer[ix]);
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	4413      	add	r3, r2
 80025d6:	ed93 7a00 	vldr	s14, [r3]
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	4413      	add	r3, r2
 80025e2:	edd3 7a00 	vldr	s15, [r3]
 80025e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025ea:	ee17 0a90 	vmov	r0, s15
 80025ee:	f7fd ffb5 	bl	800055c <__aeabi_f2d>
 80025f2:	4602      	mov	r2, r0
 80025f4:	460b      	mov	r3, r1
            out_buffer[ix] = (1.0 / static_cast<float>(fft_points)) *
 80025f6:	4620      	mov	r0, r4
 80025f8:	4629      	mov	r1, r5
 80025fa:	f7fe f807 	bl	800060c <__aeabi_dmul>
 80025fe:	4602      	mov	r2, r0
 8002600:	460b      	mov	r3, r1
 8002602:	4610      	mov	r0, r2
 8002604:	4619      	mov	r1, r3
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	18d4      	adds	r4, r2, r3
 800260e:	f7fe faf5 	bl	8000bfc <__aeabi_d2f>
 8002612:	4603      	mov	r3, r0
 8002614:	6023      	str	r3, [r4, #0]
        for (size_t ix = 0; ix < out_buffer_size; ix++) {
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	3301      	adds	r3, #1
 800261a:	617b      	str	r3, [r7, #20]
 800261c:	e7bf      	b.n	800259e <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0x42>
        }

        return EIDSP_OK;
 800261e:	2300      	movs	r3, #0
    }
 8002620:	4618      	mov	r0, r3
 8002622:	3718      	adds	r7, #24
 8002624:	46bd      	mov	sp, r7
 8002626:	bdb0      	pop	{r4, r5, r7, pc}
 8002628:	fffffc14 	.word	0xfffffc14
 800262c:	3ff00000 	.word	0x3ff00000

08002630 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb>:

    static int welch_max_hold(
 8002630:	b590      	push	{r4, r7, lr}
 8002632:	b093      	sub	sp, #76	; 0x4c
 8002634:	af02      	add	r7, sp, #8
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	607a      	str	r2, [r7, #4]
 800263c:	603b      	str	r3, [r7, #0]
        size_t stop_bin,
        size_t fft_points,
        bool do_overlap)
    {
        // save off one point to put back, b/c we're going to calculate in place
        float saved_point = 0;
 800263e:	f04f 0300 	mov.w	r3, #0
 8002642:	63fb      	str	r3, [r7, #60]	; 0x3c
        bool do_saved_point = false;
 8002644:	2300      	movs	r3, #0
 8002646:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        size_t fft_out_size = fft_points / 2 + 1;
 800264a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800264c:	085b      	lsrs	r3, r3, #1
 800264e:	3301      	adds	r3, #1
 8002650:	627b      	str	r3, [r7, #36]	; 0x24
        float *fft_out;
        ei_unique_ptr_t p_fft_out(nullptr, ei_free);
 8002652:	4b4f      	ldr	r3, [pc, #316]	; (8002790 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x160>)
 8002654:	61bb      	str	r3, [r7, #24]
 8002656:	f107 0218 	add.w	r2, r7, #24
 800265a:	f107 0310 	add.w	r3, r7, #16
 800265e:	2100      	movs	r1, #0
 8002660:	4618      	mov	r0, r3
 8002662:	f004 f868 	bl	8006736 <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>
        if (input_size < fft_points) {
 8002666:	68ba      	ldr	r2, [r7, #8]
 8002668:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800266a:	429a      	cmp	r2, r3
 800266c:	d20b      	bcs.n	8002686 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x56>
            fft_out = (float *)ei_calloc(fft_out_size, sizeof(float));
 800266e:	2104      	movs	r1, #4
 8002670:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002672:	f018 fad5 	bl	801ac20 <_Z9ei_callocjj>
 8002676:	6378      	str	r0, [r7, #52]	; 0x34
            p_fft_out.reset(fft_out);
 8002678:	f107 0310 	add.w	r3, r7, #16
 800267c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800267e:	4618      	mov	r0, r3
 8002680:	f004 f88f 	bl	80067a2 <_ZNSt10unique_ptrIvPFvPvEE5resetES0_>
 8002684:	e00b      	b.n	800269e <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x6e>
        }
        else {
            // set input as output for in place operation
            fft_out = input;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	637b      	str	r3, [r7, #52]	; 0x34
            // save off one point to put back, b/c we're going to calculate in place
            saved_point = input[fft_points / 2];
 800268a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800268c:	085b      	lsrs	r3, r3, #1
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	4413      	add	r3, r2
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	63fb      	str	r3, [r7, #60]	; 0x3c
            do_saved_point = true;
 8002698:	2301      	movs	r3, #1
 800269a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        }

        // init the output to zeros
        memset(output, 0, sizeof(float) * (stop_bin - start_bin));
 800269e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	461a      	mov	r2, r3
 80026a8:	2100      	movs	r1, #0
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f020 ff70 	bl	8023590 <memset>
        int input_ix = 0;
 80026b0:	2300      	movs	r3, #0
 80026b2:	633b      	str	r3, [r7, #48]	; 0x30
        while (input_ix < (int)input_size) {
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026b8:	429a      	cmp	r2, r3
 80026ba:	da5e      	bge.n	800277a <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x14a>
            // Figure out if we need any zero padding
            size_t n_input_points = input_ix + fft_points <= input_size ? fft_points
 80026bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026c0:	4413      	add	r3, r2
 80026c2:	68ba      	ldr	r2, [r7, #8]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d203      	bcs.n	80026d0 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0xa0>
                                                                        : input_size - input_ix;
 80026c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
            size_t n_input_points = input_ix + fft_points <= input_size ? fft_points
 80026ca:	68ba      	ldr	r2, [r7, #8]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	e000      	b.n	80026d2 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0xa2>
 80026d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026d2:	623b      	str	r3, [r7, #32]
            EI_TRY(power_spectrum(
 80026d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	68fa      	ldr	r2, [r7, #12]
 80026da:	18d0      	adds	r0, r2, r3
 80026dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026de:	085b      	lsrs	r3, r3, #1
 80026e0:	1c5a      	adds	r2, r3, #1
 80026e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	9300      	str	r3, [sp, #0]
 80026e8:	4613      	mov	r3, r2
 80026ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026ec:	6a39      	ldr	r1, [r7, #32]
 80026ee:	f7ff ff35 	bl	800255c <_ZN2ei5numpy14power_spectrumEPfjS1_jt>
 80026f2:	61f8      	str	r0, [r7, #28]
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0xce>
 80026fa:	69fc      	ldr	r4, [r7, #28]
 80026fc:	e03e      	b.n	800277c <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x14c>
                input + input_ix,
                n_input_points,
                fft_out,
                fft_points / 2 + 1,
                fft_points));
            int j = 0;
 80026fe:	2300      	movs	r3, #0
 8002700:	62fb      	str	r3, [r7, #44]	; 0x2c
            // keep the max of the last frame and everything before
            for (size_t i = start_bin; i < stop_bin; i++) {
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	62bb      	str	r3, [r7, #40]	; 0x28
 8002706:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002708:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800270a:	429a      	cmp	r2, r3
 800270c:	d218      	bcs.n	8002740 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x110>
                output[j] = std::max(output[j], fft_out[i]);
 800270e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	18d0      	adds	r0, r2, r3
 8002716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800271c:	4413      	add	r3, r2
 800271e:	4619      	mov	r1, r3
 8002720:	f004 f853 	bl	80067ca <_ZSt3maxIfERKT_S2_S2_>
 8002724:	4601      	mov	r1, r0
 8002726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	4413      	add	r3, r2
 800272e:	680a      	ldr	r2, [r1, #0]
 8002730:	601a      	str	r2, [r3, #0]
                j++;
 8002732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002734:	3301      	adds	r3, #1
 8002736:	62fb      	str	r3, [r7, #44]	; 0x2c
            for (size_t i = start_bin; i < stop_bin; i++) {
 8002738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800273a:	3301      	adds	r3, #1
 800273c:	62bb      	str	r3, [r7, #40]	; 0x28
 800273e:	e7e2      	b.n	8002706 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0xd6>
            }
            if (do_overlap) {
 8002740:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8002744:	2b00      	cmp	r3, #0
 8002746:	d013      	beq.n	8002770 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x140>
                if (do_saved_point) {
 8002748:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800274c:	2b00      	cmp	r3, #0
 800274e:	d009      	beq.n	8002764 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x134>
                    // This step only matters first time through
                    input[fft_points / 2] = saved_point;
 8002750:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002752:	085b      	lsrs	r3, r3, #1
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	4413      	add	r3, r2
 800275a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800275c:	601a      	str	r2, [r3, #0]
                    do_saved_point = false;
 800275e:	2300      	movs	r3, #0
 8002760:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                }
                input_ix += fft_points / 2;
 8002764:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002766:	085a      	lsrs	r2, r3, #1
 8002768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800276a:	4413      	add	r3, r2
 800276c:	633b      	str	r3, [r7, #48]	; 0x30
 800276e:	e7a1      	b.n	80026b4 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x84>
            }
            else {
                input_ix += fft_points;
 8002770:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002772:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002774:	4413      	add	r3, r2
 8002776:	633b      	str	r3, [r7, #48]	; 0x30
        while (input_ix < (int)input_size) {
 8002778:	e79c      	b.n	80026b4 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x84>
            }
        }

        return EIDSP_OK;
 800277a:	2400      	movs	r4, #0
        ei_unique_ptr_t p_fft_out(nullptr, ei_free);
 800277c:	f107 0310 	add.w	r3, r7, #16
 8002780:	4618      	mov	r0, r3
 8002782:	f003 ffed 	bl	8006760 <_ZNSt10unique_ptrIvPFvPvEED1Ev>
    }
 8002786:	4623      	mov	r3, r4
 8002788:	4618      	mov	r0, r3
 800278a:	3744      	adds	r7, #68	; 0x44
 800278c:	46bd      	mov	sp, r7
 800278e:	bd90      	pop	{r4, r7, pc}
 8002790:	0801ac3d 	.word	0x0801ac3d

08002794 <_ZN2ei5numpy13zero_handlingEPfj>:
     * to become an argument for any log function.
     * @param input Array
     * @param input_size Size of array
     * @returns void
     */
    static void zero_handling(float *input, size_t input_size)
 8002794:	b480      	push	{r7}
 8002796:	b085      	sub	sp, #20
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
    {
        for (size_t ix = 0; ix < input_size; ix++) {
 800279e:	2300      	movs	r3, #0
 80027a0:	60fb      	str	r3, [r7, #12]
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d214      	bcs.n	80027d4 <_ZN2ei5numpy13zero_handlingEPfj+0x40>
            if (input[ix] == 0) {
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	4413      	add	r3, r2
 80027b2:	edd3 7a00 	vldr	s15, [r3]
 80027b6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80027ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027be:	d105      	bne.n	80027cc <_ZN2ei5numpy13zero_handlingEPfj+0x38>
                input[ix] = 1e-10;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	4413      	add	r3, r2
 80027c8:	4a05      	ldr	r2, [pc, #20]	; (80027e0 <_ZN2ei5numpy13zero_handlingEPfj+0x4c>)
 80027ca:	601a      	str	r2, [r3, #0]
        for (size_t ix = 0; ix < input_size; ix++) {
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	3301      	adds	r3, #1
 80027d0:	60fb      	str	r3, [r7, #12]
 80027d2:	e7e6      	b.n	80027a2 <_ZN2ei5numpy13zero_handlingEPfj+0xe>
            }
        }
    }
 80027d4:	bf00      	nop
 80027d6:	3714      	adds	r7, #20
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr
 80027e0:	2edbe6ff 	.word	0x2edbe6ff
 80027e4:	00000000 	.word	0x00000000

080027e8 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj>:
        float sampling_freq,
        float cutoff_freq,
        const float *src,
        float *dest,
        size_t size)
    {
 80027e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027ec:	b095      	sub	sp, #84	; 0x54
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6178      	str	r0, [r7, #20]
 80027f2:	ed87 0a04 	vstr	s0, [r7, #16]
 80027f6:	edc7 0a03 	vstr	s1, [r7, #12]
 80027fa:	60b9      	str	r1, [r7, #8]
 80027fc:	607a      	str	r2, [r7, #4]
 80027fe:	603b      	str	r3, [r7, #0]
        int n_steps = filter_order / 2;
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	0fda      	lsrs	r2, r3, #31
 8002804:	4413      	add	r3, r2
 8002806:	105b      	asrs	r3, r3, #1
 8002808:	643b      	str	r3, [r7, #64]	; 0x40
        float a = tan(M_PI * cutoff_freq / sampling_freq);
 800280a:	68f8      	ldr	r0, [r7, #12]
 800280c:	f7fd fea6 	bl	800055c <__aeabi_f2d>
 8002810:	a3f5      	add	r3, pc, #980	; (adr r3, 8002be8 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x400>)
 8002812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002816:	f7fd fef9 	bl	800060c <__aeabi_dmul>
 800281a:	4602      	mov	r2, r0
 800281c:	460b      	mov	r3, r1
 800281e:	4690      	mov	r8, r2
 8002820:	4699      	mov	r9, r3
 8002822:	6938      	ldr	r0, [r7, #16]
 8002824:	f7fd fe9a 	bl	800055c <__aeabi_f2d>
 8002828:	4602      	mov	r2, r0
 800282a:	460b      	mov	r3, r1
 800282c:	4640      	mov	r0, r8
 800282e:	4649      	mov	r1, r9
 8002830:	f7fe f816 	bl	8000860 <__aeabi_ddiv>
 8002834:	4602      	mov	r2, r0
 8002836:	460b      	mov	r3, r1
 8002838:	ec43 2b17 	vmov	d7, r2, r3
 800283c:	eeb0 0a47 	vmov.f32	s0, s14
 8002840:	eef0 0a67 	vmov.f32	s1, s15
 8002844:	f01e fa6c 	bl	8020d20 <tan>
 8002848:	ec53 2b10 	vmov	r2, r3, d0
 800284c:	4610      	mov	r0, r2
 800284e:	4619      	mov	r1, r3
 8002850:	f7fe f9d4 	bl	8000bfc <__aeabi_d2f>
 8002854:	4603      	mov	r3, r0
 8002856:	63fb      	str	r3, [r7, #60]	; 0x3c
        float a2 = pow(a, 2);
 8002858:	2002      	movs	r0, #2
 800285a:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 800285e:	f003 ff38 	bl	80066d2 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002862:	ec53 2b10 	vmov	r2, r3, d0
 8002866:	4610      	mov	r0, r2
 8002868:	4619      	mov	r1, r3
 800286a:	f7fe f9c7 	bl	8000bfc <__aeabi_d2f>
 800286e:	4603      	mov	r3, r0
 8002870:	63bb      	str	r3, [r7, #56]	; 0x38
        float *A = (float*)ei_calloc(n_steps, sizeof(float));
 8002872:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002874:	2104      	movs	r1, #4
 8002876:	4618      	mov	r0, r3
 8002878:	f018 f9d2 	bl	801ac20 <_Z9ei_callocjj>
 800287c:	6378      	str	r0, [r7, #52]	; 0x34
        float *d1 = (float*)ei_calloc(n_steps, sizeof(float));
 800287e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002880:	2104      	movs	r1, #4
 8002882:	4618      	mov	r0, r3
 8002884:	f018 f9cc 	bl	801ac20 <_Z9ei_callocjj>
 8002888:	6338      	str	r0, [r7, #48]	; 0x30
        float *d2 = (float*)ei_calloc(n_steps, sizeof(float));
 800288a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800288c:	2104      	movs	r1, #4
 800288e:	4618      	mov	r0, r3
 8002890:	f018 f9c6 	bl	801ac20 <_Z9ei_callocjj>
 8002894:	62f8      	str	r0, [r7, #44]	; 0x2c
        float *w0 = (float*)ei_calloc(n_steps, sizeof(float));
 8002896:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002898:	2104      	movs	r1, #4
 800289a:	4618      	mov	r0, r3
 800289c:	f018 f9c0 	bl	801ac20 <_Z9ei_callocjj>
 80028a0:	62b8      	str	r0, [r7, #40]	; 0x28
        float *w1 = (float*)ei_calloc(n_steps, sizeof(float));
 80028a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028a4:	2104      	movs	r1, #4
 80028a6:	4618      	mov	r0, r3
 80028a8:	f018 f9ba 	bl	801ac20 <_Z9ei_callocjj>
 80028ac:	6278      	str	r0, [r7, #36]	; 0x24
        float *w2 = (float*)ei_calloc(n_steps, sizeof(float));
 80028ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028b0:	2104      	movs	r1, #4
 80028b2:	4618      	mov	r0, r3
 80028b4:	f018 f9b4 	bl	801ac20 <_Z9ei_callocjj>
 80028b8:	6238      	str	r0, [r7, #32]

        // Calculate the filter parameters
        for(int ix = 0; ix < n_steps; ix++) {
 80028ba:	2300      	movs	r3, #0
 80028bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80028c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028c2:	429a      	cmp	r2, r3
 80028c4:	f280 80e5 	bge.w	8002a92 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x2aa>
            float r = sin(M_PI * ((2.0 * ix) + 1.0) / (2.0 * filter_order));
 80028c8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80028ca:	f7fd fe35 	bl	8000538 <__aeabi_i2d>
 80028ce:	4602      	mov	r2, r0
 80028d0:	460b      	mov	r3, r1
 80028d2:	f7fd fce5 	bl	80002a0 <__adddf3>
 80028d6:	4602      	mov	r2, r0
 80028d8:	460b      	mov	r3, r1
 80028da:	4610      	mov	r0, r2
 80028dc:	4619      	mov	r1, r3
 80028de:	f04f 0200 	mov.w	r2, #0
 80028e2:	4bc3      	ldr	r3, [pc, #780]	; (8002bf0 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x408>)
 80028e4:	f7fd fcdc 	bl	80002a0 <__adddf3>
 80028e8:	4602      	mov	r2, r0
 80028ea:	460b      	mov	r3, r1
 80028ec:	4610      	mov	r0, r2
 80028ee:	4619      	mov	r1, r3
 80028f0:	a3bd      	add	r3, pc, #756	; (adr r3, 8002be8 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x400>)
 80028f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f6:	f7fd fe89 	bl	800060c <__aeabi_dmul>
 80028fa:	4602      	mov	r2, r0
 80028fc:	460b      	mov	r3, r1
 80028fe:	4690      	mov	r8, r2
 8002900:	4699      	mov	r9, r3
 8002902:	6978      	ldr	r0, [r7, #20]
 8002904:	f7fd fe18 	bl	8000538 <__aeabi_i2d>
 8002908:	4602      	mov	r2, r0
 800290a:	460b      	mov	r3, r1
 800290c:	f7fd fcc8 	bl	80002a0 <__adddf3>
 8002910:	4602      	mov	r2, r0
 8002912:	460b      	mov	r3, r1
 8002914:	4640      	mov	r0, r8
 8002916:	4649      	mov	r1, r9
 8002918:	f7fd ffa2 	bl	8000860 <__aeabi_ddiv>
 800291c:	4602      	mov	r2, r0
 800291e:	460b      	mov	r3, r1
 8002920:	ec43 2b17 	vmov	d7, r2, r3
 8002924:	eeb0 0a47 	vmov.f32	s0, s14
 8002928:	eef0 0a67 	vmov.f32	s1, s15
 800292c:	f01e f9a0 	bl	8020c70 <sin>
 8002930:	ec53 2b10 	vmov	r2, r3, d0
 8002934:	4610      	mov	r0, r2
 8002936:	4619      	mov	r1, r3
 8002938:	f7fe f960 	bl	8000bfc <__aeabi_d2f>
 800293c:	4603      	mov	r3, r0
 800293e:	61fb      	str	r3, [r7, #28]
            sampling_freq = a2 + (2.0 * a * r) + 1.0;
 8002940:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002942:	f7fd fe0b 	bl	800055c <__aeabi_f2d>
 8002946:	4680      	mov	r8, r0
 8002948:	4689      	mov	r9, r1
 800294a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800294c:	f7fd fe06 	bl	800055c <__aeabi_f2d>
 8002950:	4602      	mov	r2, r0
 8002952:	460b      	mov	r3, r1
 8002954:	f7fd fca4 	bl	80002a0 <__adddf3>
 8002958:	4602      	mov	r2, r0
 800295a:	460b      	mov	r3, r1
 800295c:	4692      	mov	sl, r2
 800295e:	469b      	mov	fp, r3
 8002960:	69f8      	ldr	r0, [r7, #28]
 8002962:	f7fd fdfb 	bl	800055c <__aeabi_f2d>
 8002966:	4602      	mov	r2, r0
 8002968:	460b      	mov	r3, r1
 800296a:	4650      	mov	r0, sl
 800296c:	4659      	mov	r1, fp
 800296e:	f7fd fe4d 	bl	800060c <__aeabi_dmul>
 8002972:	4602      	mov	r2, r0
 8002974:	460b      	mov	r3, r1
 8002976:	4640      	mov	r0, r8
 8002978:	4649      	mov	r1, r9
 800297a:	f7fd fc91 	bl	80002a0 <__adddf3>
 800297e:	4602      	mov	r2, r0
 8002980:	460b      	mov	r3, r1
 8002982:	4610      	mov	r0, r2
 8002984:	4619      	mov	r1, r3
 8002986:	f04f 0200 	mov.w	r2, #0
 800298a:	4b99      	ldr	r3, [pc, #612]	; (8002bf0 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x408>)
 800298c:	f7fd fc88 	bl	80002a0 <__adddf3>
 8002990:	4602      	mov	r2, r0
 8002992:	460b      	mov	r3, r1
 8002994:	4610      	mov	r0, r2
 8002996:	4619      	mov	r1, r3
 8002998:	f7fe f930 	bl	8000bfc <__aeabi_d2f>
 800299c:	4603      	mov	r3, r0
 800299e:	613b      	str	r3, [r7, #16]
            A[ix] = a2 / sampling_freq;
 80029a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029a6:	4413      	add	r3, r2
 80029a8:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 80029ac:	ed97 7a04 	vldr	s14, [r7, #16]
 80029b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029b4:	edc3 7a00 	vstr	s15, [r3]
            d1[ix] = 2.0 * (1 - a2) / sampling_freq;
 80029b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80029bc:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80029c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029c4:	ee17 0a90 	vmov	r0, s15
 80029c8:	f7fd fdc8 	bl	800055c <__aeabi_f2d>
 80029cc:	4602      	mov	r2, r0
 80029ce:	460b      	mov	r3, r1
 80029d0:	f7fd fc66 	bl	80002a0 <__adddf3>
 80029d4:	4602      	mov	r2, r0
 80029d6:	460b      	mov	r3, r1
 80029d8:	4690      	mov	r8, r2
 80029da:	4699      	mov	r9, r3
 80029dc:	6938      	ldr	r0, [r7, #16]
 80029de:	f7fd fdbd 	bl	800055c <__aeabi_f2d>
 80029e2:	4602      	mov	r2, r0
 80029e4:	460b      	mov	r3, r1
 80029e6:	4640      	mov	r0, r8
 80029e8:	4649      	mov	r1, r9
 80029ea:	f7fd ff39 	bl	8000860 <__aeabi_ddiv>
 80029ee:	4602      	mov	r2, r0
 80029f0:	460b      	mov	r3, r1
 80029f2:	4610      	mov	r0, r2
 80029f4:	4619      	mov	r1, r3
 80029f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029fc:	18d6      	adds	r6, r2, r3
 80029fe:	f7fe f8fd 	bl	8000bfc <__aeabi_d2f>
 8002a02:	4603      	mov	r3, r0
 8002a04:	6033      	str	r3, [r6, #0]
            d2[ix] = -(a2 - (2.0 * a * r) + 1.0) / sampling_freq;
 8002a06:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002a08:	f7fd fda8 	bl	800055c <__aeabi_f2d>
 8002a0c:	4680      	mov	r8, r0
 8002a0e:	4689      	mov	r9, r1
 8002a10:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002a12:	f7fd fda3 	bl	800055c <__aeabi_f2d>
 8002a16:	4602      	mov	r2, r0
 8002a18:	460b      	mov	r3, r1
 8002a1a:	f7fd fc41 	bl	80002a0 <__adddf3>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	460b      	mov	r3, r1
 8002a22:	4692      	mov	sl, r2
 8002a24:	469b      	mov	fp, r3
 8002a26:	69f8      	ldr	r0, [r7, #28]
 8002a28:	f7fd fd98 	bl	800055c <__aeabi_f2d>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	460b      	mov	r3, r1
 8002a30:	4650      	mov	r0, sl
 8002a32:	4659      	mov	r1, fp
 8002a34:	f7fd fdea 	bl	800060c <__aeabi_dmul>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	4640      	mov	r0, r8
 8002a3e:	4649      	mov	r1, r9
 8002a40:	f7fd fc2c 	bl	800029c <__aeabi_dsub>
 8002a44:	4602      	mov	r2, r0
 8002a46:	460b      	mov	r3, r1
 8002a48:	4610      	mov	r0, r2
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	f04f 0200 	mov.w	r2, #0
 8002a50:	4b67      	ldr	r3, [pc, #412]	; (8002bf0 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x408>)
 8002a52:	f7fd fc25 	bl	80002a0 <__adddf3>
 8002a56:	4602      	mov	r2, r0
 8002a58:	460b      	mov	r3, r1
 8002a5a:	4614      	mov	r4, r2
 8002a5c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002a60:	6938      	ldr	r0, [r7, #16]
 8002a62:	f7fd fd7b 	bl	800055c <__aeabi_f2d>
 8002a66:	4602      	mov	r2, r0
 8002a68:	460b      	mov	r3, r1
 8002a6a:	4620      	mov	r0, r4
 8002a6c:	4629      	mov	r1, r5
 8002a6e:	f7fd fef7 	bl	8000860 <__aeabi_ddiv>
 8002a72:	4602      	mov	r2, r0
 8002a74:	460b      	mov	r3, r1
 8002a76:	4610      	mov	r0, r2
 8002a78:	4619      	mov	r1, r3
 8002a7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a80:	18d6      	adds	r6, r2, r3
 8002a82:	f7fe f8bb 	bl	8000bfc <__aeabi_d2f>
 8002a86:	4603      	mov	r3, r0
 8002a88:	6033      	str	r3, [r6, #0]
        for(int ix = 0; ix < n_steps; ix++) {
 8002a8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a90:	e715      	b.n	80028be <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0xd6>
        }

        // Apply the filter
        for (size_t sx = 0; sx < size; sx++) {
 8002a92:	2300      	movs	r3, #0
 8002a94:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	f080 80aa 	bcs.w	8002bf4 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x40c>
            dest[sx] = src[sx];
 8002aa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	68ba      	ldr	r2, [r7, #8]
 8002aa6:	441a      	add	r2, r3
 8002aa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	6879      	ldr	r1, [r7, #4]
 8002aae:	440b      	add	r3, r1
 8002ab0:	6812      	ldr	r2, [r2, #0]
 8002ab2:	601a      	str	r2, [r3, #0]

            for (int i = 0; i < n_steps; i++) {
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	647b      	str	r3, [r7, #68]	; 0x44
 8002ab8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002aba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002abc:	429a      	cmp	r2, r3
 8002abe:	f280 808e 	bge.w	8002bde <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x3f6>
                w0[i] = d1[i] * w1[i] + d2[i] * w2[i] + dest[sx];
 8002ac2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ac8:	4413      	add	r3, r2
 8002aca:	ed93 7a00 	vldr	s14, [r3]
 8002ace:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ad4:	4413      	add	r3, r2
 8002ad6:	edd3 7a00 	vldr	s15, [r3]
 8002ada:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ade:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ae4:	4413      	add	r3, r2
 8002ae6:	edd3 6a00 	vldr	s13, [r3]
 8002aea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	6a3a      	ldr	r2, [r7, #32]
 8002af0:	4413      	add	r3, r2
 8002af2:	edd3 7a00 	vldr	s15, [r3]
 8002af6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002afa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002afe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	4413      	add	r3, r2
 8002b06:	edd3 7a00 	vldr	s15, [r3]
 8002b0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b10:	4413      	add	r3, r2
 8002b12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b16:	edc3 7a00 	vstr	s15, [r3]
                dest[sx] = A[i] * (w0[i] + (2.0 * w1[i]) + w2[i]);
 8002b1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b20:	4413      	add	r3, r2
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7fd fd19 	bl	800055c <__aeabi_f2d>
 8002b2a:	4604      	mov	r4, r0
 8002b2c:	460d      	mov	r5, r1
 8002b2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b34:	4413      	add	r3, r2
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7fd fd0f 	bl	800055c <__aeabi_f2d>
 8002b3e:	4680      	mov	r8, r0
 8002b40:	4689      	mov	r9, r1
 8002b42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b48:	4413      	add	r3, r2
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7fd fd05 	bl	800055c <__aeabi_f2d>
 8002b52:	4602      	mov	r2, r0
 8002b54:	460b      	mov	r3, r1
 8002b56:	f7fd fba3 	bl	80002a0 <__adddf3>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	4640      	mov	r0, r8
 8002b60:	4649      	mov	r1, r9
 8002b62:	f7fd fb9d 	bl	80002a0 <__adddf3>
 8002b66:	4602      	mov	r2, r0
 8002b68:	460b      	mov	r3, r1
 8002b6a:	4690      	mov	r8, r2
 8002b6c:	4699      	mov	r9, r3
 8002b6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	6a3a      	ldr	r2, [r7, #32]
 8002b74:	4413      	add	r3, r2
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7fd fcef 	bl	800055c <__aeabi_f2d>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	460b      	mov	r3, r1
 8002b82:	4640      	mov	r0, r8
 8002b84:	4649      	mov	r1, r9
 8002b86:	f7fd fb8b 	bl	80002a0 <__adddf3>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	4620      	mov	r0, r4
 8002b90:	4629      	mov	r1, r5
 8002b92:	f7fd fd3b 	bl	800060c <__aeabi_dmul>
 8002b96:	4602      	mov	r2, r0
 8002b98:	460b      	mov	r3, r1
 8002b9a:	4610      	mov	r0, r2
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	18d4      	adds	r4, r2, r3
 8002ba6:	f7fe f829 	bl	8000bfc <__aeabi_d2f>
 8002baa:	4603      	mov	r3, r0
 8002bac:	6023      	str	r3, [r4, #0]
                w2[i] = w1[i];
 8002bae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bb4:	441a      	add	r2, r3
 8002bb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	6a39      	ldr	r1, [r7, #32]
 8002bbc:	440b      	add	r3, r1
 8002bbe:	6812      	ldr	r2, [r2, #0]
 8002bc0:	601a      	str	r2, [r3, #0]
                w1[i] = w0[i];
 8002bc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bc8:	441a      	add	r2, r3
 8002bca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bd0:	440b      	add	r3, r1
 8002bd2:	6812      	ldr	r2, [r2, #0]
 8002bd4:	601a      	str	r2, [r3, #0]
            for (int i = 0; i < n_steps; i++) {
 8002bd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bd8:	3301      	adds	r3, #1
 8002bda:	647b      	str	r3, [r7, #68]	; 0x44
 8002bdc:	e76c      	b.n	8002ab8 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x2d0>
        for (size_t sx = 0; sx < size; sx++) {
 8002bde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002be0:	3301      	adds	r3, #1
 8002be2:	64bb      	str	r3, [r7, #72]	; 0x48
 8002be4:	e757      	b.n	8002a96 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x2ae>
 8002be6:	bf00      	nop
 8002be8:	54442d18 	.word	0x54442d18
 8002bec:	400921fb 	.word	0x400921fb
 8002bf0:	3ff00000 	.word	0x3ff00000
            }
        }

        ei_free(A);
 8002bf4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002bf6:	f018 f821 	bl	801ac3c <_Z7ei_freePv>
        ei_free(d1);
 8002bfa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bfc:	f018 f81e 	bl	801ac3c <_Z7ei_freePv>
        ei_free(d2);
 8002c00:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002c02:	f018 f81b 	bl	801ac3c <_Z7ei_freePv>
        ei_free(w0);
 8002c06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c08:	f018 f818 	bl	801ac3c <_Z7ei_freePv>
        ei_free(w1);
 8002c0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c0e:	f018 f815 	bl	801ac3c <_Z7ei_freePv>
        ei_free(w2);
 8002c12:	6a38      	ldr	r0, [r7, #32]
 8002c14:	f018 f812 	bl	801ac3c <_Z7ei_freePv>
    }
 8002c18:	bf00      	nop
 8002c1a:	3754      	adds	r7, #84	; 0x54
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c22:	bf00      	nop
 8002c24:	0000      	movs	r0, r0
	...

08002c28 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj>:
        float sampling_freq,
        float cutoff_freq,
        const float *src,
        float *dest,
        size_t size)
    {
 8002c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c2c:	b095      	sub	sp, #84	; 0x54
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6178      	str	r0, [r7, #20]
 8002c32:	ed87 0a04 	vstr	s0, [r7, #16]
 8002c36:	edc7 0a03 	vstr	s1, [r7, #12]
 8002c3a:	60b9      	str	r1, [r7, #8]
 8002c3c:	607a      	str	r2, [r7, #4]
 8002c3e:	603b      	str	r3, [r7, #0]
        int n_steps = filter_order / 2;
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	0fda      	lsrs	r2, r3, #31
 8002c44:	4413      	add	r3, r2
 8002c46:	105b      	asrs	r3, r3, #1
 8002c48:	643b      	str	r3, [r7, #64]	; 0x40
        float a = tan(M_PI * cutoff_freq / sampling_freq);
 8002c4a:	68f8      	ldr	r0, [r7, #12]
 8002c4c:	f7fd fc86 	bl	800055c <__aeabi_f2d>
 8002c50:	a3f5      	add	r3, pc, #980	; (adr r3, 8003028 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x400>)
 8002c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c56:	f7fd fcd9 	bl	800060c <__aeabi_dmul>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	4690      	mov	r8, r2
 8002c60:	4699      	mov	r9, r3
 8002c62:	6938      	ldr	r0, [r7, #16]
 8002c64:	f7fd fc7a 	bl	800055c <__aeabi_f2d>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	4640      	mov	r0, r8
 8002c6e:	4649      	mov	r1, r9
 8002c70:	f7fd fdf6 	bl	8000860 <__aeabi_ddiv>
 8002c74:	4602      	mov	r2, r0
 8002c76:	460b      	mov	r3, r1
 8002c78:	ec43 2b17 	vmov	d7, r2, r3
 8002c7c:	eeb0 0a47 	vmov.f32	s0, s14
 8002c80:	eef0 0a67 	vmov.f32	s1, s15
 8002c84:	f01e f84c 	bl	8020d20 <tan>
 8002c88:	ec53 2b10 	vmov	r2, r3, d0
 8002c8c:	4610      	mov	r0, r2
 8002c8e:	4619      	mov	r1, r3
 8002c90:	f7fd ffb4 	bl	8000bfc <__aeabi_d2f>
 8002c94:	4603      	mov	r3, r0
 8002c96:	63fb      	str	r3, [r7, #60]	; 0x3c
        float a2 = pow(a, 2);
 8002c98:	2002      	movs	r0, #2
 8002c9a:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8002c9e:	f003 fd18 	bl	80066d2 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002ca2:	ec53 2b10 	vmov	r2, r3, d0
 8002ca6:	4610      	mov	r0, r2
 8002ca8:	4619      	mov	r1, r3
 8002caa:	f7fd ffa7 	bl	8000bfc <__aeabi_d2f>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	63bb      	str	r3, [r7, #56]	; 0x38
        float *A = (float*)ei_calloc(n_steps, sizeof(float));
 8002cb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cb4:	2104      	movs	r1, #4
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f017 ffb2 	bl	801ac20 <_Z9ei_callocjj>
 8002cbc:	6378      	str	r0, [r7, #52]	; 0x34
        float *d1 = (float*)ei_calloc(n_steps, sizeof(float));
 8002cbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cc0:	2104      	movs	r1, #4
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f017 ffac 	bl	801ac20 <_Z9ei_callocjj>
 8002cc8:	6338      	str	r0, [r7, #48]	; 0x30
        float *d2 = (float*)ei_calloc(n_steps, sizeof(float));
 8002cca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ccc:	2104      	movs	r1, #4
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f017 ffa6 	bl	801ac20 <_Z9ei_callocjj>
 8002cd4:	62f8      	str	r0, [r7, #44]	; 0x2c
        float *w0 = (float*)ei_calloc(n_steps, sizeof(float));
 8002cd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cd8:	2104      	movs	r1, #4
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f017 ffa0 	bl	801ac20 <_Z9ei_callocjj>
 8002ce0:	62b8      	str	r0, [r7, #40]	; 0x28
        float *w1 = (float*)ei_calloc(n_steps, sizeof(float));
 8002ce2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ce4:	2104      	movs	r1, #4
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f017 ff9a 	bl	801ac20 <_Z9ei_callocjj>
 8002cec:	6278      	str	r0, [r7, #36]	; 0x24
        float *w2 = (float*)ei_calloc(n_steps, sizeof(float));
 8002cee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cf0:	2104      	movs	r1, #4
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f017 ff94 	bl	801ac20 <_Z9ei_callocjj>
 8002cf8:	6238      	str	r0, [r7, #32]

        // Calculate the filter parameters
        for (int ix = 0; ix < n_steps; ix++) {
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cfe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d02:	429a      	cmp	r2, r3
 8002d04:	f280 80e5 	bge.w	8002ed2 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x2aa>
            float r = sin(M_PI * ((2.0 * ix) + 1.0) / (2.0 * filter_order));
 8002d08:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002d0a:	f7fd fc15 	bl	8000538 <__aeabi_i2d>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	460b      	mov	r3, r1
 8002d12:	f7fd fac5 	bl	80002a0 <__adddf3>
 8002d16:	4602      	mov	r2, r0
 8002d18:	460b      	mov	r3, r1
 8002d1a:	4610      	mov	r0, r2
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	f04f 0200 	mov.w	r2, #0
 8002d22:	4bc3      	ldr	r3, [pc, #780]	; (8003030 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x408>)
 8002d24:	f7fd fabc 	bl	80002a0 <__adddf3>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	4610      	mov	r0, r2
 8002d2e:	4619      	mov	r1, r3
 8002d30:	a3bd      	add	r3, pc, #756	; (adr r3, 8003028 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x400>)
 8002d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d36:	f7fd fc69 	bl	800060c <__aeabi_dmul>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	4690      	mov	r8, r2
 8002d40:	4699      	mov	r9, r3
 8002d42:	6978      	ldr	r0, [r7, #20]
 8002d44:	f7fd fbf8 	bl	8000538 <__aeabi_i2d>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	460b      	mov	r3, r1
 8002d4c:	f7fd faa8 	bl	80002a0 <__adddf3>
 8002d50:	4602      	mov	r2, r0
 8002d52:	460b      	mov	r3, r1
 8002d54:	4640      	mov	r0, r8
 8002d56:	4649      	mov	r1, r9
 8002d58:	f7fd fd82 	bl	8000860 <__aeabi_ddiv>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	460b      	mov	r3, r1
 8002d60:	ec43 2b17 	vmov	d7, r2, r3
 8002d64:	eeb0 0a47 	vmov.f32	s0, s14
 8002d68:	eef0 0a67 	vmov.f32	s1, s15
 8002d6c:	f01d ff80 	bl	8020c70 <sin>
 8002d70:	ec53 2b10 	vmov	r2, r3, d0
 8002d74:	4610      	mov	r0, r2
 8002d76:	4619      	mov	r1, r3
 8002d78:	f7fd ff40 	bl	8000bfc <__aeabi_d2f>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	61fb      	str	r3, [r7, #28]
            sampling_freq = a2 + (2.0 * a * r) + 1.0;
 8002d80:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002d82:	f7fd fbeb 	bl	800055c <__aeabi_f2d>
 8002d86:	4680      	mov	r8, r0
 8002d88:	4689      	mov	r9, r1
 8002d8a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002d8c:	f7fd fbe6 	bl	800055c <__aeabi_f2d>
 8002d90:	4602      	mov	r2, r0
 8002d92:	460b      	mov	r3, r1
 8002d94:	f7fd fa84 	bl	80002a0 <__adddf3>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	4692      	mov	sl, r2
 8002d9e:	469b      	mov	fp, r3
 8002da0:	69f8      	ldr	r0, [r7, #28]
 8002da2:	f7fd fbdb 	bl	800055c <__aeabi_f2d>
 8002da6:	4602      	mov	r2, r0
 8002da8:	460b      	mov	r3, r1
 8002daa:	4650      	mov	r0, sl
 8002dac:	4659      	mov	r1, fp
 8002dae:	f7fd fc2d 	bl	800060c <__aeabi_dmul>
 8002db2:	4602      	mov	r2, r0
 8002db4:	460b      	mov	r3, r1
 8002db6:	4640      	mov	r0, r8
 8002db8:	4649      	mov	r1, r9
 8002dba:	f7fd fa71 	bl	80002a0 <__adddf3>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	4610      	mov	r0, r2
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	f04f 0200 	mov.w	r2, #0
 8002dca:	4b99      	ldr	r3, [pc, #612]	; (8003030 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x408>)
 8002dcc:	f7fd fa68 	bl	80002a0 <__adddf3>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	4610      	mov	r0, r2
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	f7fd ff10 	bl	8000bfc <__aeabi_d2f>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	613b      	str	r3, [r7, #16]
            A[ix] = 1.0f / sampling_freq;
 8002de0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002de6:	4413      	add	r3, r2
 8002de8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002dec:	ed97 7a04 	vldr	s14, [r7, #16]
 8002df0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002df4:	edc3 7a00 	vstr	s15, [r3]
            d1[ix] = 2.0 * (1 - a2) / sampling_freq;
 8002df8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002dfc:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002e00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e04:	ee17 0a90 	vmov	r0, s15
 8002e08:	f7fd fba8 	bl	800055c <__aeabi_f2d>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	460b      	mov	r3, r1
 8002e10:	f7fd fa46 	bl	80002a0 <__adddf3>
 8002e14:	4602      	mov	r2, r0
 8002e16:	460b      	mov	r3, r1
 8002e18:	4690      	mov	r8, r2
 8002e1a:	4699      	mov	r9, r3
 8002e1c:	6938      	ldr	r0, [r7, #16]
 8002e1e:	f7fd fb9d 	bl	800055c <__aeabi_f2d>
 8002e22:	4602      	mov	r2, r0
 8002e24:	460b      	mov	r3, r1
 8002e26:	4640      	mov	r0, r8
 8002e28:	4649      	mov	r1, r9
 8002e2a:	f7fd fd19 	bl	8000860 <__aeabi_ddiv>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	460b      	mov	r3, r1
 8002e32:	4610      	mov	r0, r2
 8002e34:	4619      	mov	r1, r3
 8002e36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e3c:	18d6      	adds	r6, r2, r3
 8002e3e:	f7fd fedd 	bl	8000bfc <__aeabi_d2f>
 8002e42:	4603      	mov	r3, r0
 8002e44:	6033      	str	r3, [r6, #0]
            d2[ix] = -(a2 - (2.0 * a * r) + 1.0) / sampling_freq;
 8002e46:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002e48:	f7fd fb88 	bl	800055c <__aeabi_f2d>
 8002e4c:	4680      	mov	r8, r0
 8002e4e:	4689      	mov	r9, r1
 8002e50:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002e52:	f7fd fb83 	bl	800055c <__aeabi_f2d>
 8002e56:	4602      	mov	r2, r0
 8002e58:	460b      	mov	r3, r1
 8002e5a:	f7fd fa21 	bl	80002a0 <__adddf3>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	460b      	mov	r3, r1
 8002e62:	4692      	mov	sl, r2
 8002e64:	469b      	mov	fp, r3
 8002e66:	69f8      	ldr	r0, [r7, #28]
 8002e68:	f7fd fb78 	bl	800055c <__aeabi_f2d>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	460b      	mov	r3, r1
 8002e70:	4650      	mov	r0, sl
 8002e72:	4659      	mov	r1, fp
 8002e74:	f7fd fbca 	bl	800060c <__aeabi_dmul>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	460b      	mov	r3, r1
 8002e7c:	4640      	mov	r0, r8
 8002e7e:	4649      	mov	r1, r9
 8002e80:	f7fd fa0c 	bl	800029c <__aeabi_dsub>
 8002e84:	4602      	mov	r2, r0
 8002e86:	460b      	mov	r3, r1
 8002e88:	4610      	mov	r0, r2
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	f04f 0200 	mov.w	r2, #0
 8002e90:	4b67      	ldr	r3, [pc, #412]	; (8003030 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x408>)
 8002e92:	f7fd fa05 	bl	80002a0 <__adddf3>
 8002e96:	4602      	mov	r2, r0
 8002e98:	460b      	mov	r3, r1
 8002e9a:	4614      	mov	r4, r2
 8002e9c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002ea0:	6938      	ldr	r0, [r7, #16]
 8002ea2:	f7fd fb5b 	bl	800055c <__aeabi_f2d>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	4620      	mov	r0, r4
 8002eac:	4629      	mov	r1, r5
 8002eae:	f7fd fcd7 	bl	8000860 <__aeabi_ddiv>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	4610      	mov	r0, r2
 8002eb8:	4619      	mov	r1, r3
 8002eba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ec0:	18d6      	adds	r6, r2, r3
 8002ec2:	f7fd fe9b 	bl	8000bfc <__aeabi_d2f>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	6033      	str	r3, [r6, #0]
        for (int ix = 0; ix < n_steps; ix++) {
 8002eca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ecc:	3301      	adds	r3, #1
 8002ece:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ed0:	e715      	b.n	8002cfe <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0xd6>
        }

        // Apply the filter
        for (size_t sx = 0; sx < size; sx++) {
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ed6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	f080 80aa 	bcs.w	8003034 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x40c>
            dest[sx] = src[sx];
 8002ee0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	68ba      	ldr	r2, [r7, #8]
 8002ee6:	441a      	add	r2, r3
 8002ee8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	6879      	ldr	r1, [r7, #4]
 8002eee:	440b      	add	r3, r1
 8002ef0:	6812      	ldr	r2, [r2, #0]
 8002ef2:	601a      	str	r2, [r3, #0]

            for (int i = 0; i < n_steps; i++) {
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	647b      	str	r3, [r7, #68]	; 0x44
 8002ef8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002efa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002efc:	429a      	cmp	r2, r3
 8002efe:	f280 808e 	bge.w	800301e <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x3f6>
                w0[i] = d1[i] * w1[i] + d2[i] * w2[i] + dest[sx];
 8002f02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f08:	4413      	add	r3, r2
 8002f0a:	ed93 7a00 	vldr	s14, [r3]
 8002f0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f14:	4413      	add	r3, r2
 8002f16:	edd3 7a00 	vldr	s15, [r3]
 8002f1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f24:	4413      	add	r3, r2
 8002f26:	edd3 6a00 	vldr	s13, [r3]
 8002f2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	6a3a      	ldr	r2, [r7, #32]
 8002f30:	4413      	add	r3, r2
 8002f32:	edd3 7a00 	vldr	s15, [r3]
 8002f36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f3a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	4413      	add	r3, r2
 8002f46:	edd3 7a00 	vldr	s15, [r3]
 8002f4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f50:	4413      	add	r3, r2
 8002f52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f56:	edc3 7a00 	vstr	s15, [r3]
                dest[sx] = A[i] * (w0[i] - (2.0 * w1[i]) + w2[i]);
 8002f5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f60:	4413      	add	r3, r2
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7fd faf9 	bl	800055c <__aeabi_f2d>
 8002f6a:	4604      	mov	r4, r0
 8002f6c:	460d      	mov	r5, r1
 8002f6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f74:	4413      	add	r3, r2
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7fd faef 	bl	800055c <__aeabi_f2d>
 8002f7e:	4680      	mov	r8, r0
 8002f80:	4689      	mov	r9, r1
 8002f82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f88:	4413      	add	r3, r2
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7fd fae5 	bl	800055c <__aeabi_f2d>
 8002f92:	4602      	mov	r2, r0
 8002f94:	460b      	mov	r3, r1
 8002f96:	f7fd f983 	bl	80002a0 <__adddf3>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	4640      	mov	r0, r8
 8002fa0:	4649      	mov	r1, r9
 8002fa2:	f7fd f97b 	bl	800029c <__aeabi_dsub>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	460b      	mov	r3, r1
 8002faa:	4690      	mov	r8, r2
 8002fac:	4699      	mov	r9, r3
 8002fae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	6a3a      	ldr	r2, [r7, #32]
 8002fb4:	4413      	add	r3, r2
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f7fd facf 	bl	800055c <__aeabi_f2d>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	4640      	mov	r0, r8
 8002fc4:	4649      	mov	r1, r9
 8002fc6:	f7fd f96b 	bl	80002a0 <__adddf3>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	460b      	mov	r3, r1
 8002fce:	4620      	mov	r0, r4
 8002fd0:	4629      	mov	r1, r5
 8002fd2:	f7fd fb1b 	bl	800060c <__aeabi_dmul>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	460b      	mov	r3, r1
 8002fda:	4610      	mov	r0, r2
 8002fdc:	4619      	mov	r1, r3
 8002fde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	18d4      	adds	r4, r2, r3
 8002fe6:	f7fd fe09 	bl	8000bfc <__aeabi_d2f>
 8002fea:	4603      	mov	r3, r0
 8002fec:	6023      	str	r3, [r4, #0]
                w2[i] = w1[i];
 8002fee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ff4:	441a      	add	r2, r3
 8002ff6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	6a39      	ldr	r1, [r7, #32]
 8002ffc:	440b      	add	r3, r1
 8002ffe:	6812      	ldr	r2, [r2, #0]
 8003000:	601a      	str	r2, [r3, #0]
                w1[i] = w0[i];
 8003002:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003008:	441a      	add	r2, r3
 800300a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003010:	440b      	add	r3, r1
 8003012:	6812      	ldr	r2, [r2, #0]
 8003014:	601a      	str	r2, [r3, #0]
            for (int i = 0; i < n_steps; i++) {
 8003016:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003018:	3301      	adds	r3, #1
 800301a:	647b      	str	r3, [r7, #68]	; 0x44
 800301c:	e76c      	b.n	8002ef8 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x2d0>
        for (size_t sx = 0; sx < size; sx++) {
 800301e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003020:	3301      	adds	r3, #1
 8003022:	64bb      	str	r3, [r7, #72]	; 0x48
 8003024:	e757      	b.n	8002ed6 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x2ae>
 8003026:	bf00      	nop
 8003028:	54442d18 	.word	0x54442d18
 800302c:	400921fb 	.word	0x400921fb
 8003030:	3ff00000 	.word	0x3ff00000
            }
        }

        ei_free(A);
 8003034:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003036:	f017 fe01 	bl	801ac3c <_Z7ei_freePv>
        ei_free(d1);
 800303a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800303c:	f017 fdfe 	bl	801ac3c <_Z7ei_freePv>
        ei_free(d2);
 8003040:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003042:	f017 fdfb 	bl	801ac3c <_Z7ei_freePv>
        ei_free(w0);
 8003046:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003048:	f017 fdf8 	bl	801ac3c <_Z7ei_freePv>
        ei_free(w1);
 800304c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800304e:	f017 fdf5 	bl	801ac3c <_Z7ei_freePv>
        ei_free(w2);
 8003052:	6a38      	ldr	r0, [r7, #32]
 8003054:	f017 fdf2 	bl	801ac3c <_Z7ei_freePv>
    }
 8003058:	bf00      	nop
 800305a:	3754      	adds	r7, #84	; 0x54
 800305c:	46bd      	mov	sp, r7
 800305e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003062:	bf00      	nop

08003064 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh>:
    static int butterworth_lowpass_filter(
        matrix_t *matrix,
        float sampling_frequency,
        float filter_cutoff,
        uint8_t filter_order)
    {
 8003064:	b590      	push	{r4, r7, lr}
 8003066:	b087      	sub	sp, #28
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003070:	edc7 0a01 	vstr	s1, [r7, #4]
 8003074:	460b      	mov	r3, r1
 8003076:	70fb      	strb	r3, [r7, #3]
        for (size_t row = 0; row < matrix->rows; row++) {
 8003078:	2300      	movs	r3, #0
 800307a:	617b      	str	r3, [r7, #20]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	697a      	ldr	r2, [r7, #20]
 8003082:	429a      	cmp	r2, r3
 8003084:	d21f      	bcs.n	80030c6 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh+0x62>
            filters::butterworth_lowpass(
 8003086:	78f8      	ldrb	r0, [r7, #3]
                filter_order,
                sampling_frequency,
                filter_cutoff,
                matrix->buffer + (row * matrix->cols),
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	6979      	ldr	r1, [r7, #20]
 8003092:	fb01 f303 	mul.w	r3, r1, r3
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	18d4      	adds	r4, r2, r3
                matrix->buffer + (row * matrix->cols),
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	6979      	ldr	r1, [r7, #20]
 80030a4:	fb01 f303 	mul.w	r3, r1, r3
 80030a8:	009b      	lsls	r3, r3, #2
            filters::butterworth_lowpass(
 80030aa:	441a      	add	r2, r3
                matrix->cols);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	689b      	ldr	r3, [r3, #8]
            filters::butterworth_lowpass(
 80030b0:	4621      	mov	r1, r4
 80030b2:	edd7 0a01 	vldr	s1, [r7, #4]
 80030b6:	ed97 0a02 	vldr	s0, [r7, #8]
 80030ba:	f7ff fb95 	bl	80027e8 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj>
        for (size_t row = 0; row < matrix->rows; row++) {
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	3301      	adds	r3, #1
 80030c2:	617b      	str	r3, [r7, #20]
 80030c4:	e7da      	b.n	800307c <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh+0x18>
        }

        return EIDSP_OK;
 80030c6:	2300      	movs	r3, #0
    }
 80030c8:	4618      	mov	r0, r3
 80030ca:	371c      	adds	r7, #28
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd90      	pop	{r4, r7, pc}

080030d0 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh>:
    static int butterworth_highpass_filter(
        matrix_t *matrix,
        float sampling_frequency,
        float filter_cutoff,
        uint8_t filter_order)
    {
 80030d0:	b590      	push	{r4, r7, lr}
 80030d2:	b087      	sub	sp, #28
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	ed87 0a02 	vstr	s0, [r7, #8]
 80030dc:	edc7 0a01 	vstr	s1, [r7, #4]
 80030e0:	460b      	mov	r3, r1
 80030e2:	70fb      	strb	r3, [r7, #3]
        for (size_t row = 0; row < matrix->rows; row++) {
 80030e4:	2300      	movs	r3, #0
 80030e6:	617b      	str	r3, [r7, #20]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	697a      	ldr	r2, [r7, #20]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d21f      	bcs.n	8003132 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh+0x62>
            filters::butterworth_highpass(
 80030f2:	78f8      	ldrb	r0, [r7, #3]
                filter_order,
                sampling_frequency,
                filter_cutoff,
                matrix->buffer + (row * matrix->cols),
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	6979      	ldr	r1, [r7, #20]
 80030fe:	fb01 f303 	mul.w	r3, r1, r3
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	18d4      	adds	r4, r2, r3
                matrix->buffer + (row * matrix->cols),
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	6979      	ldr	r1, [r7, #20]
 8003110:	fb01 f303 	mul.w	r3, r1, r3
 8003114:	009b      	lsls	r3, r3, #2
            filters::butterworth_highpass(
 8003116:	441a      	add	r2, r3
                matrix->cols);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	689b      	ldr	r3, [r3, #8]
            filters::butterworth_highpass(
 800311c:	4621      	mov	r1, r4
 800311e:	edd7 0a01 	vldr	s1, [r7, #4]
 8003122:	ed97 0a02 	vldr	s0, [r7, #8]
 8003126:	f7ff fd7f 	bl	8002c28 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj>
        for (size_t row = 0; row < matrix->rows; row++) {
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	3301      	adds	r3, #1
 800312e:	617b      	str	r3, [r7, #20]
 8003130:	e7da      	b.n	80030e8 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh+0x18>
        }

        return EIDSP_OK;
 8003132:	2300      	movs	r3, #0
    }
 8003134:	4618      	mov	r0, r3
 8003136:	371c      	adds	r7, #28
 8003138:	46bd      	mov	sp, r7
 800313a:	bd90      	pop	{r4, r7, pc}

0800313c <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt>:
    static int find_peak_indexes(
        matrix_t *input_matrix,
        matrix_t *output_matrix,
        float threshold,
        uint16_t *peaks_found)
    {
 800313c:	b480      	push	{r7}
 800313e:	b091      	sub	sp, #68	; 0x44
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	ed87 0a01 	vstr	s0, [r7, #4]
 800314a:	603a      	str	r2, [r7, #0]
        if (input_matrix->rows != 1) {
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	2b01      	cmp	r3, #1
 8003152:	d001      	beq.n	8003158 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x1c>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003154:	4b60      	ldr	r3, [pc, #384]	; (80032d8 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x19c>)
 8003156:	e0b9      	b.n	80032cc <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x190>
        }

        if (output_matrix->cols != 1) {
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	2b01      	cmp	r3, #1
 800315e:	d001      	beq.n	8003164 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x28>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003160:	4b5d      	ldr	r3, [pc, #372]	; (80032d8 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x19c>)
 8003162:	e0b3      	b.n	80032cc <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x190>
        }

        uint16_t out_ix = 0;
 8003164:	2300      	movs	r3, #0
 8003166:	87fb      	strh	r3, [r7, #62]	; 0x3e
        size_t in_size = input_matrix->cols;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	627b      	str	r3, [r7, #36]	; 0x24
        float *in = input_matrix->buffer;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	623b      	str	r3, [r7, #32]
        size_t out_size = output_matrix->rows;
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	61fb      	str	r3, [r7, #28]
        float *out = output_matrix->buffer;
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	61bb      	str	r3, [r7, #24]

        // for normalized threshold calculation
        float min = FLT_MAX, max = 0.0f;
 8003180:	4b56      	ldr	r3, [pc, #344]	; (80032dc <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x1a0>)
 8003182:	63bb      	str	r3, [r7, #56]	; 0x38
 8003184:	f04f 0300 	mov.w	r3, #0
 8003188:	637b      	str	r3, [r7, #52]	; 0x34
        for (size_t ix = 0; ix < in_size - 1; ix++) {
 800318a:	2300      	movs	r3, #0
 800318c:	633b      	str	r3, [r7, #48]	; 0x30
 800318e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003190:	3b01      	subs	r3, #1
 8003192:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003194:	429a      	cmp	r2, r3
 8003196:	d229      	bcs.n	80031ec <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0xb0>
            if (in[ix] < min) {
 8003198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	6a3a      	ldr	r2, [r7, #32]
 800319e:	4413      	add	r3, r2
 80031a0:	edd3 7a00 	vldr	s15, [r3]
 80031a4:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80031a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031b0:	dd05      	ble.n	80031be <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x82>
                min = in[ix];
 80031b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	6a3a      	ldr	r2, [r7, #32]
 80031b8:	4413      	add	r3, r2
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	63bb      	str	r3, [r7, #56]	; 0x38
            }
            if (in[ix] > max) {
 80031be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	6a3a      	ldr	r2, [r7, #32]
 80031c4:	4413      	add	r3, r2
 80031c6:	edd3 7a00 	vldr	s15, [r3]
 80031ca:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80031ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031d6:	d505      	bpl.n	80031e4 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0xa8>
                max = in[ix];
 80031d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	6a3a      	ldr	r2, [r7, #32]
 80031de:	4413      	add	r3, r2
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	637b      	str	r3, [r7, #52]	; 0x34
        for (size_t ix = 0; ix < in_size - 1; ix++) {
 80031e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e6:	3301      	adds	r3, #1
 80031e8:	633b      	str	r3, [r7, #48]	; 0x30
 80031ea:	e7d0      	b.n	800318e <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x52>
            }
        }


        float prev = in[0];
 80031ec:	6a3b      	ldr	r3, [r7, #32]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	62fb      	str	r3, [r7, #44]	; 0x2c

        // so....
        for (size_t ix = 1; ix < in_size - 1; ix++) {
 80031f2:	2301      	movs	r3, #1
 80031f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80031f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f8:	3b01      	subs	r3, #1
 80031fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d261      	bcs.n	80032c4 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x188>
            // first make sure it's actually a peak...
            if (in[ix] > prev && in[ix] > in[ix+1]) {
 8003200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	6a3a      	ldr	r2, [r7, #32]
 8003206:	4413      	add	r3, r2
 8003208:	edd3 7a00 	vldr	s15, [r3]
 800320c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003210:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003218:	d549      	bpl.n	80032ae <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x172>
 800321a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	6a3a      	ldr	r2, [r7, #32]
 8003220:	4413      	add	r3, r2
 8003222:	ed93 7a00 	vldr	s14, [r3]
 8003226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003228:	3301      	adds	r3, #1
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	6a3a      	ldr	r2, [r7, #32]
 800322e:	4413      	add	r3, r2
 8003230:	edd3 7a00 	vldr	s15, [r3]
 8003234:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800323c:	dd37      	ble.n	80032ae <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x172>
                // then make sure the threshold is met (on both?)
                float height = (in[ix] - prev) + (in[ix] - in[ix + 1]);
 800323e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	6a3a      	ldr	r2, [r7, #32]
 8003244:	4413      	add	r3, r2
 8003246:	ed93 7a00 	vldr	s14, [r3]
 800324a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800324e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	6a3a      	ldr	r2, [r7, #32]
 8003258:	4413      	add	r3, r2
 800325a:	edd3 6a00 	vldr	s13, [r3]
 800325e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003260:	3301      	adds	r3, #1
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	6a3a      	ldr	r2, [r7, #32]
 8003266:	4413      	add	r3, r2
 8003268:	edd3 7a00 	vldr	s15, [r3]
 800326c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003270:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003274:	edc7 7a05 	vstr	s15, [r7, #20]
                // printf("%d inx: %f height: %f threshold: %f\r\n", ix, in[ix], height, threshold);
                if (height > threshold) {
 8003278:	ed97 7a05 	vldr	s14, [r7, #20]
 800327c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003280:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003288:	dd11      	ble.n	80032ae <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x172>
                    out[out_ix] = ix;
 800328a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	69ba      	ldr	r2, [r7, #24]
 8003290:	4413      	add	r3, r2
 8003292:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003294:	ee07 2a90 	vmov	s15, r2
 8003298:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800329c:	edc3 7a00 	vstr	s15, [r3]
                    out_ix++;
 80032a0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80032a2:	3301      	adds	r3, #1
 80032a4:	87fb      	strh	r3, [r7, #62]	; 0x3e
                    if (out_ix == out_size) break;
 80032a6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80032a8:	69fa      	ldr	r2, [r7, #28]
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d009      	beq.n	80032c2 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x186>
                }
            }

            prev = in[ix];
 80032ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	6a3a      	ldr	r2, [r7, #32]
 80032b4:	4413      	add	r3, r2
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (size_t ix = 1; ix < in_size - 1; ix++) {
 80032ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032bc:	3301      	adds	r3, #1
 80032be:	62bb      	str	r3, [r7, #40]	; 0x28
 80032c0:	e799      	b.n	80031f6 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0xba>
                    if (out_ix == out_size) break;
 80032c2:	bf00      	nop
        }

        *peaks_found = out_ix;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80032c8:	801a      	strh	r2, [r3, #0]

        return EIDSP_OK;
 80032ca:	2300      	movs	r3, #0
    }
 80032cc:	4618      	mov	r0, r3
 80032ce:	3744      	adds	r7, #68	; 0x44
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr
 80032d8:	fffffc14 	.word	0xfffffc14
 80032dc:	7f7fffff 	.word	0x7f7fffff

080032e0 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	4618      	mov	r0, r3
 80032ec:	f003 fac6 	bl	800687c <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_Vector_implC1Ev>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4618      	mov	r0, r3
 80032f4:	3708      	adds	r7, #8
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}

080032fa <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b082      	sub	sp, #8
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4618      	mov	r0, r3
 8003306:	f7ff ffeb 	bl	80032e0 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEC1Ev>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4618      	mov	r0, r3
 800330e:	3708      	adds	r7, #8
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <_ZZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fftENKUlRKNS1_11freq_peak_tES6_E_clES6_S6_>:
                d.amplitude = 0.0f;
            }
            peaks.push_back(d);
        }
        sort(peaks.begin(), peaks.end(),
            [](const freq_peak_t & a, const freq_peak_t & b) -> bool
 8003314:	b480      	push	{r7}
 8003316:	b085      	sub	sp, #20
 8003318:	af00      	add	r7, sp, #0
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	607a      	str	r2, [r7, #4]
        {
            return a.amplitude > b.amplitude;
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	ed93 7a01 	vldr	s14, [r3, #4]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	edd3 7a01 	vldr	s15, [r3, #4]
 800332c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003334:	bfcc      	ite	gt
 8003336:	2301      	movgt	r3, #1
 8003338:	2300      	movle	r3, #0
 800333a:	b2db      	uxtb	r3, r3
        });
 800333c:	4618      	mov	r0, r3
 800333e:	3714      	adds	r7, #20
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr

08003348 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft>:
    {
 8003348:	b5b0      	push	{r4, r5, r7, lr}
 800334a:	ed2d 8b02 	vpush	{d8}
 800334e:	b09c      	sub	sp, #112	; 0x70
 8003350:	af00      	add	r7, sp, #0
 8003352:	6178      	str	r0, [r7, #20]
 8003354:	6139      	str	r1, [r7, #16]
 8003356:	ed87 0a03 	vstr	s0, [r7, #12]
 800335a:	edc7 0a02 	vstr	s1, [r7, #8]
 800335e:	4613      	mov	r3, r2
 8003360:	80fb      	strh	r3, [r7, #6]
        if (fft_matrix->rows != 1) {
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	2b01      	cmp	r3, #1
 8003368:	d001      	beq.n	800336e <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800336a:	4c95      	ldr	r4, [pc, #596]	; (80035c0 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x278>)
 800336c:	e120      	b.n	80035b0 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x268>
        if (output_matrix->cols != 2) {
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	2b02      	cmp	r3, #2
 8003374:	d001      	beq.n	800337a <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x32>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003376:	4c92      	ldr	r4, [pc, #584]	; (80035c0 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x278>)
 8003378:	e11a      	b.n	80035b0 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x268>
        if (output_matrix->rows == 0) {
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d101      	bne.n	8003386 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x3e>
            return EIDSP_OK;
 8003382:	2400      	movs	r4, #0
 8003384:	e114      	b.n	80035b0 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x268>
        int N = static_cast<int>(fft_length);
 8003386:	88fb      	ldrh	r3, [r7, #6]
 8003388:	663b      	str	r3, [r7, #96]	; 0x60
        float T = 1.0f / sampling_freq;
 800338a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800338e:	ed97 7a03 	vldr	s14, [r7, #12]
 8003392:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003396:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        EI_DSP_MATRIX(freq_space, 1, fft_matrix->cols);
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	689a      	ldr	r2, [r3, #8]
 800339e:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80033a2:	2300      	movs	r3, #0
 80033a4:	2101      	movs	r1, #1
 80033a6:	f7fe fa38 	bl	800181a <_ZN2ei9ei_matrixC1EmmPf>
 80033aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d101      	bne.n	80033b4 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x6c>
 80033b0:	4c84      	ldr	r4, [pc, #528]	; (80035c4 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x27c>)
 80033b2:	e0f8      	b.n	80035a6 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x25e>
        ret = numpy::linspace(0.0f, 1.0f / (2.0f * T), floor(N / 2), freq_space.buffer);
 80033b4:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80033b8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80033bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80033c0:	ee87 8a27 	vdiv.f32	s16, s14, s15
 80033c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033c6:	0fda      	lsrs	r2, r3, #31
 80033c8:	4413      	add	r3, r2
 80033ca:	105b      	asrs	r3, r3, #1
 80033cc:	4618      	mov	r0, r3
 80033ce:	f003 fa43 	bl	8006858 <_ZSt5floorIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80033d2:	ec53 2b10 	vmov	r2, r3, d0
 80033d6:	4610      	mov	r0, r2
 80033d8:	4619      	mov	r1, r3
 80033da:	f7fd fbef 	bl	8000bbc <__aeabi_d2uiz>
 80033de:	4602      	mov	r2, r0
 80033e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033e2:	4619      	mov	r1, r3
 80033e4:	4610      	mov	r0, r2
 80033e6:	eef0 0a48 	vmov.f32	s1, s16
 80033ea:	ed9f 0a77 	vldr	s0, [pc, #476]	; 80035c8 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x280>
 80033ee:	f7fe ff33 	bl	8002258 <_ZN2ei5numpy8linspaceEffmPf>
 80033f2:	65b8      	str	r0, [r7, #88]	; 0x58
        if (ret != EIDSP_OK) {
 80033f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d001      	beq.n	80033fe <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0xb6>
            EIDSP_ERR(ret);
 80033fa:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 80033fc:	e0d3      	b.n	80035a6 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x25e>
        EI_DSP_MATRIX(peaks_matrix, output_matrix->rows * 10, 1);
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	685a      	ldr	r2, [r3, #4]
 8003402:	4613      	mov	r3, r2
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	4413      	add	r3, r2
 8003408:	005b      	lsls	r3, r3, #1
 800340a:	4619      	mov	r1, r3
 800340c:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8003410:	2300      	movs	r3, #0
 8003412:	2201      	movs	r2, #1
 8003414:	f7fe fa01 	bl	800181a <_ZN2ei9ei_matrixC1EmmPf>
 8003418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800341a:	2b00      	cmp	r3, #0
 800341c:	d101      	bne.n	8003422 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0xda>
 800341e:	4c69      	ldr	r4, [pc, #420]	; (80035c4 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x27c>)
 8003420:	e0bc      	b.n	800359c <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x254>
        ret = find_peak_indexes(fft_matrix, &peaks_matrix, 0.0f, &peak_count);
 8003422:	f107 0236 	add.w	r2, r7, #54	; 0x36
 8003426:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800342a:	ed9f 0a67 	vldr	s0, [pc, #412]	; 80035c8 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x280>
 800342e:	4619      	mov	r1, r3
 8003430:	6978      	ldr	r0, [r7, #20]
 8003432:	f7ff fe83 	bl	800313c <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt>
 8003436:	65b8      	str	r0, [r7, #88]	; 0x58
        if (ret != EIDSP_OK) {
 8003438:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800343a:	2b00      	cmp	r3, #0
 800343c:	d001      	beq.n	8003442 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0xfa>
            EIDSP_ERR(ret);
 800343e:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8003440:	e0ac      	b.n	800359c <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x254>
        ei_vector<freq_peak_t> peaks;
 8003442:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003446:	4618      	mov	r0, r3
 8003448:	f7ff ff57 	bl	80032fa <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEC1Ev>
        for (uint8_t ix = 0; ix < peak_count; ix++) {
 800344c:	2300      	movs	r3, #0
 800344e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8003452:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003456:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003458:	4293      	cmp	r3, r2
 800345a:	da3d      	bge.n	80034d8 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x190>
            d.freq = freq_space.buffer[static_cast<uint32_t>(peaks_matrix.buffer[ix])];
 800345c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800345e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003460:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	440b      	add	r3, r1
 8003468:	edd3 7a00 	vldr	s15, [r3]
 800346c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003470:	ee17 3a90 	vmov	r3, s15
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	4413      	add	r3, r2
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	623b      	str	r3, [r7, #32]
            d.amplitude = fft_matrix->buffer[static_cast<uint32_t>(peaks_matrix.buffer[ix])];
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003482:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	440b      	add	r3, r1
 800348a:	edd3 7a00 	vldr	s15, [r3]
 800348e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003492:	ee17 3a90 	vmov	r3, s15
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	4413      	add	r3, r2
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	627b      	str	r3, [r7, #36]	; 0x24
            if (d.amplitude < threshold) {
 800349e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80034a2:	ed97 7a02 	vldr	s14, [r7, #8]
 80034a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034ae:	dd05      	ble.n	80034bc <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x174>
                d.freq = 0.0f;
 80034b0:	f04f 0300 	mov.w	r3, #0
 80034b4:	623b      	str	r3, [r7, #32]
                d.amplitude = 0.0f;
 80034b6:	f04f 0300 	mov.w	r3, #0
 80034ba:	627b      	str	r3, [r7, #36]	; 0x24
            peaks.push_back(d);
 80034bc:	f107 0220 	add.w	r2, r7, #32
 80034c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034c4:	4611      	mov	r1, r2
 80034c6:	4618      	mov	r0, r3
 80034c8:	f003 fa15 	bl	80068f6 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE9push_backERKS3_>
        for (uint8_t ix = 0; ix < peak_count; ix++) {
 80034cc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80034d0:	3301      	adds	r3, #1
 80034d2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80034d6:	e7bc      	b.n	8003452 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x10a>
        sort(peaks.begin(), peaks.end(),
 80034d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034dc:	4618      	mov	r0, r3
 80034de:	f003 fa30 	bl	8006942 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE5beginEv>
 80034e2:	4604      	mov	r4, r0
 80034e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034e8:	4618      	mov	r0, r3
 80034ea:	f003 fa3a 	bl	8006962 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE3endEv>
 80034ee:	4603      	mov	r3, r0
 80034f0:	462a      	mov	r2, r5
 80034f2:	4619      	mov	r1, r3
 80034f4:	4620      	mov	r0, r4
 80034f6:	f003 fa45 	bl	8006984 <_ZSt4sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEZNS4_L14find_fft_peaksEPNS2_9ei_matrixESD_fftEUlRKS5_SF_E_EvT_SH_T0_>

        // fill with zeros at the end (if needed)
        for (size_t ix = peaks.size(); ix < output_matrix->rows; ix++) {
 80034fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034fe:	4618      	mov	r0, r3
 8003500:	f003 fa52 	bl	80069a8 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE4sizeEv>
 8003504:	66b8      	str	r0, [r7, #104]	; 0x68
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800350c:	429a      	cmp	r2, r3
 800350e:	d211      	bcs.n	8003534 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x1ec>
            freq_peak_t d;
            d.freq = 0;
 8003510:	f04f 0300 	mov.w	r3, #0
 8003514:	61bb      	str	r3, [r7, #24]
            d.amplitude = 0;
 8003516:	f04f 0300 	mov.w	r3, #0
 800351a:	61fb      	str	r3, [r7, #28]
            peaks.push_back(d);
 800351c:	f107 0218 	add.w	r2, r7, #24
 8003520:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003524:	4611      	mov	r1, r2
 8003526:	4618      	mov	r0, r3
 8003528:	f003 f9e5 	bl	80068f6 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE9push_backERKS3_>
        for (size_t ix = peaks.size(); ix < output_matrix->rows; ix++) {
 800352c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800352e:	3301      	adds	r3, #1
 8003530:	66bb      	str	r3, [r7, #104]	; 0x68
 8003532:	e7e8      	b.n	8003506 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x1be>
        }

        for (size_t row = 0; row < output_matrix->rows; row++) {
 8003534:	2300      	movs	r3, #0
 8003536:	667b      	str	r3, [r7, #100]	; 0x64
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800353e:	429a      	cmp	r2, r3
 8003540:	d226      	bcs.n	8003590 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x248>
            // col 0 is freq, col 1 is ampl
            output_matrix->buffer[row * output_matrix->cols + 0] = peaks[row].freq;
 8003542:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003546:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003548:	4618      	mov	r0, r3
 800354a:	f003 fa3d 	bl	80069c8 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEixEj>
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003558:	fb01 f303 	mul.w	r3, r1, r3
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	4413      	add	r3, r2
 8003560:	6802      	ldr	r2, [r0, #0]
 8003562:	601a      	str	r2, [r3, #0]
            output_matrix->buffer[row * output_matrix->cols + 1] = peaks[row].amplitude;
 8003564:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003568:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800356a:	4618      	mov	r0, r3
 800356c:	f003 fa2c 	bl	80069c8 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEixEj>
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800357a:	fb01 f303 	mul.w	r3, r1, r3
 800357e:	3301      	adds	r3, #1
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	4413      	add	r3, r2
 8003584:	6842      	ldr	r2, [r0, #4]
 8003586:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < output_matrix->rows; row++) {
 8003588:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800358a:	3301      	adds	r3, #1
 800358c:	667b      	str	r3, [r7, #100]	; 0x64
 800358e:	e7d3      	b.n	8003538 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x1f0>
        }

        return EIDSP_OK;
 8003590:	2400      	movs	r4, #0
        ei_vector<freq_peak_t> peaks;
 8003592:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003596:	4618      	mov	r0, r3
 8003598:	f003 f992 	bl	80068c0 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEED1Ev>
        EI_DSP_MATRIX(peaks_matrix, output_matrix->rows * 10, 1);
 800359c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7fe f965 	bl	8001870 <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(freq_space, 1, fft_matrix->cols);
 80035a6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7fe f960 	bl	8001870 <_ZN2ei9ei_matrixD1Ev>
    }
 80035b0:	4623      	mov	r3, r4
 80035b2:	4618      	mov	r0, r3
 80035b4:	3770      	adds	r7, #112	; 0x70
 80035b6:	46bd      	mov	sp, r7
 80035b8:	ecbd 8b02 	vpop	{d8}
 80035bc:	bdb0      	pop	{r4, r5, r7, pc}
 80035be:	bf00      	nop
 80035c0:	fffffc14 	.word	0xfffffc14
 80035c4:	fffffc16 	.word	0xfffffc16
 80035c8:	00000000 	.word	0x00000000

080035cc <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f>:
        matrix_t *fft_matrix,
        matrix_t *freq_matrix,
        matrix_t *edges_matrix,
        matrix_t *output_matrix,
        float sampling_freq
    ) {
 80035cc:	b590      	push	{r4, r7, lr}
 80035ce:	b093      	sub	sp, #76	; 0x4c
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6178      	str	r0, [r7, #20]
 80035d4:	6139      	str	r1, [r7, #16]
 80035d6:	60fa      	str	r2, [r7, #12]
 80035d8:	60bb      	str	r3, [r7, #8]
 80035da:	ed87 0a01 	vstr	s0, [r7, #4]
        if (fft_matrix->rows != 1 || freq_matrix->rows != 1) {
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d103      	bne.n	80035ee <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x22>
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d001      	beq.n	80035f2 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80035ee:	4c7b      	ldr	r4, [pc, #492]	; (80037dc <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x210>)
 80035f0:	e0ef      	b.n	80037d2 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x206>
        }

        if (edges_matrix->cols != 1) {
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d001      	beq.n	80035fe <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x32>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80035fa:	4c78      	ldr	r4, [pc, #480]	; (80037dc <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x210>)
 80035fc:	e0e9      	b.n	80037d2 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x206>
        }

        if (output_matrix->rows != edges_matrix->rows - 1 || output_matrix->cols != edges_matrix->cols) {
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	685a      	ldr	r2, [r3, #4]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	3b01      	subs	r3, #1
 8003608:	429a      	cmp	r2, r3
 800360a:	d105      	bne.n	8003618 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x4c>
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	689a      	ldr	r2, [r3, #8]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	429a      	cmp	r2, r3
 8003616:	d001      	beq.n	800361c <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x50>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003618:	4c70      	ldr	r4, [pc, #448]	; (80037dc <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x210>)
 800361a:	e0da      	b.n	80037d2 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x206>
        }

        if (fft_matrix->cols != freq_matrix->cols) {
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	689a      	ldr	r2, [r3, #8]
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	429a      	cmp	r2, r3
 8003626:	d001      	beq.n	800362c <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x60>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003628:	4c6c      	ldr	r4, [pc, #432]	; (80037dc <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x210>)
 800362a:	e0d2      	b.n	80037d2 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x206>
        }

        EI_DSP_MATRIX(buckets, 1, edges_matrix->rows - 1);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	1e5a      	subs	r2, r3, #1
 8003632:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8003636:	2300      	movs	r3, #0
 8003638:	2101      	movs	r1, #1
 800363a:	f7fe f8ee 	bl	800181a <_ZN2ei9ei_matrixC1EmmPf>
 800363e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003640:	2b00      	cmp	r3, #0
 8003642:	d101      	bne.n	8003648 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x7c>
 8003644:	4c66      	ldr	r4, [pc, #408]	; (80037e0 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x214>)
 8003646:	e0bf      	b.n	80037c8 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x1fc>
        EI_DSP_MATRIX(bucket_count, 1, edges_matrix->rows - 1);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	1e5a      	subs	r2, r3, #1
 800364e:	f107 0018 	add.w	r0, r7, #24
 8003652:	2300      	movs	r3, #0
 8003654:	2101      	movs	r1, #1
 8003656:	f7fe f8e0 	bl	800181a <_ZN2ei9ei_matrixC1EmmPf>
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d101      	bne.n	8003664 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x98>
 8003660:	4c5f      	ldr	r4, [pc, #380]	; (80037e0 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x214>)
 8003662:	e0ac      	b.n	80037be <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x1f2>

        for (uint16_t ix = 0; ix < freq_matrix->cols; ix++) {
 8003664:	2300      	movs	r3, #0
 8003666:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800366a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	429a      	cmp	r2, r3
 8003674:	d264      	bcs.n	8003740 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x174>
            float t = freq_matrix->buffer[ix];
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	4413      	add	r3, r2
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	63fb      	str	r3, [r7, #60]	; 0x3c
            float v = fft_matrix->buffer[ix];
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	4413      	add	r3, r2
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	63bb      	str	r3, [r7, #56]	; 0x38

            // does this fit between any edges?
            for (uint16_t ex = 0; ex < edges_matrix->rows - 1; ex++) {
 8003696:	2300      	movs	r3, #0
 8003698:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800369c:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	3b01      	subs	r3, #1
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d244      	bcs.n	8003734 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x168>
                if (t >= edges_matrix->buffer[ex] && t < edges_matrix->buffer[ex + 1]) {
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	4413      	add	r3, r2
 80036b6:	edd3 7a00 	vldr	s15, [r3]
 80036ba:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80036be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036c6:	db2f      	blt.n	8003728 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x15c>
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80036d0:	3301      	adds	r3, #1
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	4413      	add	r3, r2
 80036d6:	edd3 7a00 	vldr	s15, [r3]
 80036da:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80036de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036e6:	d51f      	bpl.n	8003728 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x15c>
                    buckets.buffer[ex] += v;
 80036e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036ea:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	4413      	add	r3, r2
 80036f2:	ed93 7a00 	vldr	s14, [r3]
 80036f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036f8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	4413      	add	r3, r2
 8003700:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003704:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003708:	edc3 7a00 	vstr	s15, [r3]
                    bucket_count.buffer[ex]++;
 800370c:	69ba      	ldr	r2, [r7, #24]
 800370e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	4413      	add	r3, r2
 8003716:	edd3 7a00 	vldr	s15, [r3]
 800371a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800371e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003722:	edc3 7a00 	vstr	s15, [r3]
                    break;
 8003726:	e005      	b.n	8003734 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x168>
            for (uint16_t ex = 0; ex < edges_matrix->rows - 1; ex++) {
 8003728:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800372c:	3301      	adds	r3, #1
 800372e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003732:	e7b3      	b.n	800369c <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0xd0>
        for (uint16_t ix = 0; ix < freq_matrix->cols; ix++) {
 8003734:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003738:	3301      	adds	r3, #1
 800373a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800373e:	e794      	b.n	800366a <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x9e>
                }
            }
        }

        // average out and push to vector
        for (uint16_t ex = 0; ex < edges_matrix->rows - 1; ex++) {
 8003740:	2300      	movs	r3, #0
 8003742:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003746:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	3b01      	subs	r3, #1
 8003750:	429a      	cmp	r2, r3
 8003752:	d233      	bcs.n	80037bc <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x1f0>
            if (bucket_count.buffer[ex] == 0.0f) {
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	4413      	add	r3, r2
 800375e:	edd3 7a00 	vldr	s15, [r3]
 8003762:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800376a:	d109      	bne.n	8003780 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x1b4>
                output_matrix->buffer[ex] = 0.0f;
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	4413      	add	r3, r2
 8003778:	f04f 0200 	mov.w	r2, #0
 800377c:	601a      	str	r2, [r3, #0]
 800377e:	e017      	b.n	80037b0 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x1e4>
            }
            else {
                output_matrix->buffer[ex] = buckets.buffer[ex] / bucket_count.buffer[ex];
 8003780:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003782:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	4413      	add	r3, r2
 800378a:	edd3 6a00 	vldr	s13, [r3]
 800378e:	69ba      	ldr	r2, [r7, #24]
 8003790:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	4413      	add	r3, r2
 8003798:	ed93 7a00 	vldr	s14, [r3]
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	4413      	add	r3, r2
 80037a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037ac:	edc3 7a00 	vstr	s15, [r3]
        for (uint16_t ex = 0; ex < edges_matrix->rows - 1; ex++) {
 80037b0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80037b4:	3301      	adds	r3, #1
 80037b6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80037ba:	e7c4      	b.n	8003746 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x17a>
            }
        }

        return EIDSP_OK;
 80037bc:	2400      	movs	r4, #0
        EI_DSP_MATRIX(bucket_count, 1, edges_matrix->rows - 1);
 80037be:	f107 0318 	add.w	r3, r7, #24
 80037c2:	4618      	mov	r0, r3
 80037c4:	f7fe f854 	bl	8001870 <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(buckets, 1, edges_matrix->rows - 1);
 80037c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7fe f84f 	bl	8001870 <_ZN2ei9ei_matrixD1Ev>
    }
 80037d2:	4623      	mov	r3, r4
 80037d4:	4618      	mov	r0, r3
 80037d6:	374c      	adds	r7, #76	; 0x4c
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd90      	pop	{r4, r7, pc}
 80037dc:	fffffc14 	.word	0xfffffc14
 80037e0:	fffffc16 	.word	0xfffffc16

080037e4 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft>:
     * @param sampling_freq The sampling frequency
     * @param n_fft Number of FFT buckets
     * @returns 0 if OK
     */
    int periodogram(matrix_t *input_matrix, matrix_t *out_fft_matrix, matrix_t *out_freq_matrix, float sampling_freq, uint16_t n_fft)
    {
 80037e4:	b590      	push	{r4, r7, lr}
 80037e6:	ed2d 8b02 	vpush	{d8}
 80037ea:	b09b      	sub	sp, #108	; 0x6c
 80037ec:	af02      	add	r7, sp, #8
 80037ee:	6178      	str	r0, [r7, #20]
 80037f0:	6139      	str	r1, [r7, #16]
 80037f2:	60fa      	str	r2, [r7, #12]
 80037f4:	ed87 0a02 	vstr	s0, [r7, #8]
 80037f8:	80fb      	strh	r3, [r7, #6]
        if (input_matrix->rows != 1) {
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d001      	beq.n	8003806 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x22>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003802:	4c80      	ldr	r4, [pc, #512]	; (8003a04 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x220>)
 8003804:	e192      	b.n	8003b2c <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x348>
        }

        if (out_fft_matrix->rows != 1 || out_fft_matrix->cols != static_cast<uint32_t>(n_fft / 2 + 1)) {
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	2b01      	cmp	r3, #1
 800380c:	d107      	bne.n	800381e <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x3a>
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	88fa      	ldrh	r2, [r7, #6]
 8003814:	0852      	lsrs	r2, r2, #1
 8003816:	b292      	uxth	r2, r2
 8003818:	3201      	adds	r2, #1
 800381a:	4293      	cmp	r3, r2
 800381c:	d001      	beq.n	8003822 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x3e>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800381e:	4c79      	ldr	r4, [pc, #484]	; (8003a04 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x220>)
 8003820:	e184      	b.n	8003b2c <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x348>
        }

        if (out_freq_matrix->rows != 1 || out_freq_matrix->cols != static_cast<uint32_t>(n_fft / 2 + 1)) {
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	2b01      	cmp	r3, #1
 8003828:	d107      	bne.n	800383a <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x56>
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	88fa      	ldrh	r2, [r7, #6]
 8003830:	0852      	lsrs	r2, r2, #1
 8003832:	b292      	uxth	r2, r2
 8003834:	3201      	adds	r2, #1
 8003836:	4293      	cmp	r3, r2
 8003838:	d001      	beq.n	800383e <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x5a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800383a:	4c72      	ldr	r4, [pc, #456]	; (8003a04 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x220>)
 800383c:	e176      	b.n	8003b2c <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x348>
        }

        if (input_matrix->buffer == NULL) {
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d101      	bne.n	800384a <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x66>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8003846:	4c70      	ldr	r4, [pc, #448]	; (8003a08 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x224>)
 8003848:	e170      	b.n	8003b2c <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x348>
        }

        if (out_fft_matrix->buffer == NULL) {
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d101      	bne.n	8003856 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x72>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8003852:	4c6d      	ldr	r4, [pc, #436]	; (8003a08 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x224>)
 8003854:	e16a      	b.n	8003b2c <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x348>
        }

        if (out_freq_matrix->buffer == NULL) {
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d101      	bne.n	8003862 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x7e>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 800385e:	4c6a      	ldr	r4, [pc, #424]	; (8003a08 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x224>)
 8003860:	e164      	b.n	8003b2c <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x348>
        }

        // map over the input buffer, so we can manipulate the number of columns
        EI_DSP_MATRIX_B(welch_matrix, input_matrix->rows, input_matrix->cols, input_matrix->buffer);
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	6859      	ldr	r1, [r3, #4]
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	689a      	ldr	r2, [r3, #8]
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8003872:	f7fd ffd2 	bl	800181a <_ZN2ei9ei_matrixC1EmmPf>
 8003876:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003878:	2b00      	cmp	r3, #0
 800387a:	d101      	bne.n	8003880 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x9c>
 800387c:	4c62      	ldr	r4, [pc, #392]	; (8003a08 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x224>)
 800387e:	e150      	b.n	8003b22 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x33e>

        uint16_t nperseg = n_fft;
 8003880:	88fb      	ldrh	r3, [r7, #6]
 8003882:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

        if (n_fft > input_matrix->cols) {
 8003886:	88fa      	ldrh	r2, [r7, #6]
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	429a      	cmp	r2, r3
 800388e:	d904      	bls.n	800389a <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xb6>
            nperseg = input_matrix->cols;
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003898:	e006      	b.n	80038a8 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xc4>
        }
        // make the column align to nperseg in this case
        else if (n_fft < input_matrix->cols) {
 800389a:	88fa      	ldrh	r2, [r7, #6]
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d201      	bcs.n	80038a8 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xc4>
            welch_matrix.cols = n_fft;
 80038a4:	88fb      	ldrh	r3, [r7, #6]
 80038a6:	647b      	str	r3, [r7, #68]	; 0x44
        }

        EI_DSP_MATRIX(triage_segments, 1, nperseg);
 80038a8:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 80038ac:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80038b0:	2300      	movs	r3, #0
 80038b2:	2101      	movs	r1, #1
 80038b4:	f7fd ffb1 	bl	800181a <_ZN2ei9ei_matrixC1EmmPf>
 80038b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d101      	bne.n	80038c2 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xde>
 80038be:	4c52      	ldr	r4, [pc, #328]	; (8003a08 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x224>)
 80038c0:	e12a      	b.n	8003b18 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x334>
        for (uint16_t ix = 0; ix < nperseg; ix++) {
 80038c2:	2300      	movs	r3, #0
 80038c4:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80038c8:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 80038cc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d20d      	bcs.n	80038f0 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x10c>
            triage_segments.buffer[ix] = 1.0f;
 80038d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038d6:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	4413      	add	r3, r2
 80038de:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80038e2:	601a      	str	r2, [r3, #0]
        for (uint16_t ix = 0; ix < nperseg; ix++) {
 80038e4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80038e8:	3301      	adds	r3, #1
 80038ea:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80038ee:	e7eb      	b.n	80038c8 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xe4>
        }

        float scale = 1.0f / (sampling_freq * nperseg);
 80038f0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80038f4:	ee07 3a90 	vmov	s15, r3
 80038f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80038fc:	edd7 7a02 	vldr	s15, [r7, #8]
 8003900:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003904:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003908:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800390c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

        for (uint16_t ix = 0; ix < n_fft / 2 + 1; ix++) {
 8003910:	2300      	movs	r3, #0
 8003912:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8003916:	88fb      	ldrh	r3, [r7, #6]
 8003918:	085b      	lsrs	r3, r3, #1
 800391a:	b29b      	uxth	r3, r3
 800391c:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8003920:	429a      	cmp	r2, r3
 8003922:	d826      	bhi.n	8003972 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x18e>
            out_freq_matrix->buffer[ix] = static_cast<float>(ix) * (1.0f / (n_fft * (1.0f / sampling_freq)));
 8003924:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8003928:	ee07 3a90 	vmov	s15, r3
 800392c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003930:	88fb      	ldrh	r3, [r7, #6]
 8003932:	ee07 3a90 	vmov	s15, r3
 8003936:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800393a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800393e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003942:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8003946:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800394a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800394e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	4413      	add	r3, r2
 800395e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003962:	edc3 7a00 	vstr	s15, [r3]
        for (uint16_t ix = 0; ix < n_fft / 2 + 1; ix++) {
 8003966:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800396a:	3301      	adds	r3, #1
 800396c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8003970:	e7d1      	b.n	8003916 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x132>
        }

        int ret;

        // now we need to detrend... which is done constant so just subtract the mean
        EI_DSP_MATRIX(mean_matrix, 1, 1);
 8003972:	f107 001c 	add.w	r0, r7, #28
 8003976:	2300      	movs	r3, #0
 8003978:	2201      	movs	r2, #1
 800397a:	2101      	movs	r1, #1
 800397c:	f7fd ff4d 	bl	800181a <_ZN2ei9ei_matrixC1EmmPf>
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d101      	bne.n	800398a <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1a6>
 8003986:	4c20      	ldr	r4, [pc, #128]	; (8003a08 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x224>)
 8003988:	e0c1      	b.n	8003b0e <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x32a>
        ret = numpy::mean(&welch_matrix, &mean_matrix);
 800398a:	f107 021c 	add.w	r2, r7, #28
 800398e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003992:	4611      	mov	r1, r2
 8003994:	4618      	mov	r0, r3
 8003996:	f7fe fa53 	bl	8001e40 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_>
 800399a:	6538      	str	r0, [r7, #80]	; 0x50
        if (ret != EIDSP_OK) {
 800399c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d001      	beq.n	80039a6 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1c2>
            EIDSP_ERR(ret);
 80039a2:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 80039a4:	e0b3      	b.n	8003b0e <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x32a>
        }

        ret = numpy::subtract(&welch_matrix, &mean_matrix);
 80039a6:	f107 021c 	add.w	r2, r7, #28
 80039aa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80039ae:	4611      	mov	r1, r2
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7fe f9ad 	bl	8001d10 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_>
 80039b6:	6538      	str	r0, [r7, #80]	; 0x50
        if (ret != EIDSP_OK) {
 80039b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d001      	beq.n	80039c2 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1de>
            EIDSP_ERR(ret);
 80039be:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 80039c0:	e0a5      	b.n	8003b0e <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x32a>
        }

        fft_complex_t *fft_output = (fft_complex_t*)ei_dsp_calloc((n_fft / 2 + 1) * sizeof(fft_complex_t), 1);
 80039c2:	88fb      	ldrh	r3, [r7, #6]
 80039c4:	085b      	lsrs	r3, r3, #1
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	3301      	adds	r3, #1
 80039ca:	00db      	lsls	r3, r3, #3
 80039cc:	2101      	movs	r1, #1
 80039ce:	4618      	mov	r0, r3
 80039d0:	f017 f926 	bl	801ac20 <_Z9ei_callocjj>
 80039d4:	64f8      	str	r0, [r7, #76]	; 0x4c
        ret = numpy::rfft(welch_matrix.buffer, welch_matrix.cols, fft_output, n_fft / 2 + 1, n_fft);
 80039d6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80039d8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80039da:	88fb      	ldrh	r3, [r7, #6]
 80039dc:	085b      	lsrs	r3, r3, #1
 80039de:	b29b      	uxth	r3, r3
 80039e0:	3301      	adds	r3, #1
 80039e2:	461a      	mov	r2, r3
 80039e4:	88fb      	ldrh	r3, [r7, #6]
 80039e6:	9300      	str	r3, [sp, #0]
 80039e8:	4613      	mov	r3, r2
 80039ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80039ec:	f7fe fb42 	bl	8002074 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj>
 80039f0:	6538      	str	r0, [r7, #80]	; 0x50
        if (ret != EIDSP_OK) {
 80039f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d009      	beq.n	8003a0c <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x228>
            ei_dsp_free(fft_output, (n_fft / 2 + 1) * sizeof(fft_complex_t));
 80039f8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80039fa:	f017 f91f 	bl	801ac3c <_Z7ei_freePv>
            EIDSP_ERR(ret);
 80039fe:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8003a00:	e085      	b.n	8003b0e <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x32a>
 8003a02:	bf00      	nop
 8003a04:	fffffc14 	.word	0xfffffc14
 8003a08:	fffffc16 	.word	0xfffffc16
        }

        // conjugate and then multiply with itself and scale
        for (uint16_t ix = 0; ix < n_fft / 2 + 1; ix++) {
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8003a12:	88fb      	ldrh	r3, [r7, #6]
 8003a14:	085b      	lsrs	r3, r3, #1
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d872      	bhi.n	8003b06 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x322>
            fft_output[ix].r = (fft_output[ix].r * fft_output[ix].r) +
 8003a20:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003a24:	00db      	lsls	r3, r3, #3
 8003a26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a28:	4413      	add	r3, r2
 8003a2a:	ed93 7a00 	vldr	s14, [r3]
 8003a2e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003a32:	00db      	lsls	r3, r3, #3
 8003a34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a36:	4413      	add	r3, r2
 8003a38:	edd3 7a00 	vldr	s15, [r3]
 8003a3c:	ee27 8a27 	vmul.f32	s16, s14, s15
                (abs(fft_output[ix].i * fft_output[ix].i));
 8003a40:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003a44:	00db      	lsls	r3, r3, #3
 8003a46:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a48:	4413      	add	r3, r2
 8003a4a:	ed93 7a01 	vldr	s14, [r3, #4]
 8003a4e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a56:	4413      	add	r3, r2
 8003a58:	edd3 7a01 	vldr	s15, [r3, #4]
 8003a5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a60:	eeb0 0a67 	vmov.f32	s0, s15
 8003a64:	f7fd fd16 	bl	8001494 <_ZSt3absf>
 8003a68:	eef0 7a40 	vmov.f32	s15, s0
            fft_output[ix].r = (fft_output[ix].r * fft_output[ix].r) +
 8003a6c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003a70:	00db      	lsls	r3, r3, #3
 8003a72:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a74:	4413      	add	r3, r2
 8003a76:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003a7a:	edc3 7a00 	vstr	s15, [r3]
            fft_output[ix].i = 0.0f;
 8003a7e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003a82:	00db      	lsls	r3, r3, #3
 8003a84:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a86:	4413      	add	r3, r2
 8003a88:	f04f 0200 	mov.w	r2, #0
 8003a8c:	605a      	str	r2, [r3, #4]

            fft_output[ix].r *= scale;
 8003a8e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003a92:	00db      	lsls	r3, r3, #3
 8003a94:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a96:	4413      	add	r3, r2
 8003a98:	ed93 7a00 	vldr	s14, [r3]
 8003a9c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003aa0:	00db      	lsls	r3, r3, #3
 8003aa2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003aa4:	4413      	add	r3, r2
 8003aa6:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8003aaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aae:	edc3 7a00 	vstr	s15, [r3]

            if (ix != n_fft / 2) {
 8003ab2:	88fb      	ldrh	r3, [r7, #6]
 8003ab4:	085b      	lsrs	r3, r3, #1
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d00f      	beq.n	8003ae0 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x2fc>
                fft_output[ix].r *= 2;
 8003ac0:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003ac4:	00db      	lsls	r3, r3, #3
 8003ac6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ac8:	4413      	add	r3, r2
 8003aca:	edd3 7a00 	vldr	s15, [r3]
 8003ace:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003ad2:	00db      	lsls	r3, r3, #3
 8003ad4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ad6:	4413      	add	r3, r2
 8003ad8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003adc:	edc3 7a00 	vstr	s15, [r3]
            }

            // then multiply by itself...
            out_fft_matrix->buffer[ix] = fft_output[ix].r;
 8003ae0:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003ae4:	00db      	lsls	r3, r3, #3
 8003ae6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ae8:	441a      	add	r2, r3
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	6819      	ldr	r1, [r3, #0]
 8003aee:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	440b      	add	r3, r1
 8003af6:	6812      	ldr	r2, [r2, #0]
 8003af8:	601a      	str	r2, [r3, #0]
        for (uint16_t ix = 0; ix < n_fft / 2 + 1; ix++) {
 8003afa:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003afe:	3301      	adds	r3, #1
 8003b00:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8003b04:	e785      	b.n	8003a12 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x22e>
        }

        ei_dsp_free(fft_output, (n_fft / 2 + 1) * sizeof(fft_complex_t));
 8003b06:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003b08:	f017 f898 	bl	801ac3c <_Z7ei_freePv>

        return EIDSP_OK;
 8003b0c:	2400      	movs	r4, #0
        EI_DSP_MATRIX(mean_matrix, 1, 1);
 8003b0e:	f107 031c 	add.w	r3, r7, #28
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7fd feac 	bl	8001870 <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(triage_segments, 1, nperseg);
 8003b18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f7fd fea7 	bl	8001870 <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX_B(welch_matrix, input_matrix->rows, input_matrix->cols, input_matrix->buffer);
 8003b22:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003b26:	4618      	mov	r0, r3
 8003b28:	f7fd fea2 	bl	8001870 <_ZN2ei9ei_matrixD1Ev>
    }
 8003b2c:	4623      	mov	r3, r4
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3764      	adds	r7, #100	; 0x64
 8003b32:	46bd      	mov	sp, r7
 8003b34:	ecbd 8b02 	vpop	{d8}
 8003b38:	bd90      	pop	{r4, r7, pc}
 8003b3a:	bf00      	nop

08003b3c <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE>:

    static int subtract_mean(matrix_t* input_matrix) {
 8003b3c:	b590      	push	{r4, r7, lr}
 8003b3e:	b089      	sub	sp, #36	; 0x24
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
        // calculate the mean
        EI_DSP_MATRIX(mean_matrix, input_matrix->rows, 1);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6859      	ldr	r1, [r3, #4]
 8003b48:	f107 000c 	add.w	r0, r7, #12
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f7fd fe63 	bl	800181a <_ZN2ei9ei_matrixC1EmmPf>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d101      	bne.n	8003b5e <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x22>
 8003b5a:	4c12      	ldr	r4, [pc, #72]	; (8003ba4 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x68>)
 8003b5c:	e018      	b.n	8003b90 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x54>
        int ret = numpy::mean(input_matrix, &mean_matrix);
 8003b5e:	f107 030c 	add.w	r3, r7, #12
 8003b62:	4619      	mov	r1, r3
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f7fe f96b 	bl	8001e40 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_>
 8003b6a:	61f8      	str	r0, [r7, #28]
        if (ret != EIDSP_OK) {
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d001      	beq.n	8003b76 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x3a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003b72:	4c0d      	ldr	r4, [pc, #52]	; (8003ba8 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x6c>)
 8003b74:	e00c      	b.n	8003b90 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x54>
        }

        // scale by the mean
        ret = numpy::subtract(input_matrix, &mean_matrix);
 8003b76:	f107 030c 	add.w	r3, r7, #12
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f7fe f8c7 	bl	8001d10 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_>
 8003b82:	61f8      	str	r0, [r7, #28]
        if (ret != EIDSP_OK) {
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d001      	beq.n	8003b8e <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x52>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003b8a:	4c07      	ldr	r4, [pc, #28]	; (8003ba8 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x6c>)
 8003b8c:	e000      	b.n	8003b90 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x54>
        }

        return EIDSP_OK;
 8003b8e:	2400      	movs	r4, #0
        EI_DSP_MATRIX(mean_matrix, input_matrix->rows, 1);
 8003b90:	f107 030c 	add.w	r3, r7, #12
 8003b94:	4618      	mov	r0, r3
 8003b96:	f7fd fe6b 	bl	8001870 <_ZN2ei9ei_matrixD1Ev>
    }
 8003b9a:	4623      	mov	r3, r4
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3724      	adds	r7, #36	; 0x24
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd90      	pop	{r4, r7, pc}
 8003ba4:	fffffc16 	.word	0xfffffc16
 8003ba8:	fffffc14 	.word	0xfffffc14

08003bac <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_>:
     * @param fft_peaks Number of FFT peaks to find
     * @param fft_peaks_threshold Minimum threshold
     * @param edges_matrix Spectral power edges
     * @returns 0 if OK
     */
    static int spectral_analysis(
 8003bac:	b5b0      	push	{r4, r5, r7, lr}
 8003bae:	b0b0      	sub	sp, #192	; 0xc0
 8003bb0:	af02      	add	r7, sp, #8
 8003bb2:	6178      	str	r0, [r7, #20]
 8003bb4:	6139      	str	r1, [r7, #16]
 8003bb6:	ed87 0a03 	vstr	s0, [r7, #12]
 8003bba:	4611      	mov	r1, r2
 8003bbc:	edc7 0a01 	vstr	s1, [r7, #4]
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	ed87 1a00 	vstr	s2, [r7]
 8003bc6:	460b      	mov	r3, r1
 8003bc8:	72fb      	strb	r3, [r7, #11]
 8003bca:	4613      	mov	r3, r2
 8003bcc:	72bb      	strb	r3, [r7, #10]
        uint16_t fft_length,
        uint8_t fft_peaks,
        float fft_peaks_threshold,
        matrix_t *edges_matrix_in
    ) {
        if (out_features->rows != input_matrix->rows) {
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	685a      	ldr	r2, [r3, #4]
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d001      	beq.n	8003bde <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x32>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003bda:	4caf      	ldr	r4, [pc, #700]	; (8003e98 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2ec>)
 8003bdc:	e227      	b.n	800402e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x482>
        }

        if (out_features->cols != calculate_spectral_buffer_size(true, fft_peaks, edges_matrix_in->rows)) {
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	689d      	ldr	r5, [r3, #8]
 8003be2:	f897 10cc 	ldrb.w	r1, [r7, #204]	; 0xcc
 8003be6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	461a      	mov	r2, r3
 8003bee:	2001      	movs	r0, #1
 8003bf0:	f000 fa22 	bl	8004038 <_ZN2ei8spectral7feature30calculate_spectral_buffer_sizeEbjj>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	429d      	cmp	r5, r3
 8003bf8:	bf14      	ite	ne
 8003bfa:	2301      	movne	r3, #1
 8003bfc:	2300      	moveq	r3, #0
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d001      	beq.n	8003c08 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x5c>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003c04:	4ca4      	ldr	r4, [pc, #656]	; (8003e98 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2ec>)
 8003c06:	e212      	b.n	800402e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x482>
        }

        if (edges_matrix_in->cols != 1) {
 8003c08:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d001      	beq.n	8003c16 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x6a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003c12:	4ca1      	ldr	r4, [pc, #644]	; (8003e98 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2ec>)
 8003c14:	e20b      	b.n	800402e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x482>
        }

        int ret;

        size_t axes = input_matrix->rows;
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

        EI_TRY(processing::subtract_mean(input_matrix) );
 8003c1e:	6938      	ldr	r0, [r7, #16]
 8003c20:	f7ff ff8c 	bl	8003b3c <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE>
 8003c24:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
 8003c28:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d002      	beq.n	8003c36 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x8a>
 8003c30:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8003c34:	e1fb      	b.n	800402e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x482>

        // apply filter
        if (filter_type == filter_lowpass) {
 8003c36:	7afb      	ldrb	r3, [r7, #11]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d110      	bne.n	8003c5e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0xb2>
            ret = spectral::processing::butterworth_lowpass_filter(
 8003c3c:	7abb      	ldrb	r3, [r7, #10]
 8003c3e:	4619      	mov	r1, r3
 8003c40:	edd7 0a01 	vldr	s1, [r7, #4]
 8003c44:	ed97 0a03 	vldr	s0, [r7, #12]
 8003c48:	6938      	ldr	r0, [r7, #16]
 8003c4a:	f7ff fa0b 	bl	8003064 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh>
 8003c4e:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
                input_matrix, sampling_freq, filter_cutoff, filter_order);
            if (ret != EIDSP_OK) {
 8003c52:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d015      	beq.n	8003c86 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0xda>
                EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003c5a:	4c8f      	ldr	r4, [pc, #572]	; (8003e98 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2ec>)
 8003c5c:	e1e7      	b.n	800402e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x482>
            }
        }
        else if (filter_type == filter_highpass) {
 8003c5e:	7afb      	ldrb	r3, [r7, #11]
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d110      	bne.n	8003c86 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0xda>
            ret = spectral::processing::butterworth_highpass_filter(
 8003c64:	7abb      	ldrb	r3, [r7, #10]
 8003c66:	4619      	mov	r1, r3
 8003c68:	edd7 0a01 	vldr	s1, [r7, #4]
 8003c6c:	ed97 0a03 	vldr	s0, [r7, #12]
 8003c70:	6938      	ldr	r0, [r7, #16]
 8003c72:	f7ff fa2d 	bl	80030d0 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh>
 8003c76:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
                input_matrix, sampling_freq, filter_cutoff, filter_order);
            if (ret != EIDSP_OK) {
 8003c7a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d001      	beq.n	8003c86 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0xda>
                EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003c82:	4c85      	ldr	r4, [pc, #532]	; (8003e98 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2ec>)
 8003c84:	e1d3      	b.n	800402e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x482>
            }
        }

        // calculate RMS
        EI_DSP_MATRIX(rms_matrix, axes, 1);
 8003c86:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003c92:	f7fd fdc2 	bl	800181a <_ZN2ei9ei_matrixC1EmmPf>
 8003c96:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d101      	bne.n	8003ca2 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0xf6>
 8003c9e:	4c7f      	ldr	r4, [pc, #508]	; (8003e9c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2f0>)
 8003ca0:	e1c0      	b.n	8004024 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x478>
        ret = numpy::rms(input_matrix, &rms_matrix);
 8003ca2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	6938      	ldr	r0, [r7, #16]
 8003caa:	f7fe f88d 	bl	8001dc8 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_>
 8003cae:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        if (ret != EIDSP_OK) {
 8003cb2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d001      	beq.n	8003cbe <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x112>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003cba:	4c77      	ldr	r4, [pc, #476]	; (8003e98 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2ec>)
 8003cbc:	e1b2      	b.n	8004024 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x478>
        }

        // find peaks in FFT
        EI_DSP_MATRIX(peaks_matrix, axes, fft_peaks * 2);
 8003cbe:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 8003cc2:	005b      	lsls	r3, r3, #1
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	f107 0078 	add.w	r0, r7, #120	; 0x78
 8003cca:	2300      	movs	r3, #0
 8003ccc:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003cd0:	f7fd fda3 	bl	800181a <_ZN2ei9ei_matrixC1EmmPf>
 8003cd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d101      	bne.n	8003cde <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x132>
 8003cda:	4c70      	ldr	r4, [pc, #448]	; (8003e9c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2f0>)
 8003cdc:	e19d      	b.n	800401a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x46e>

        for (size_t row = 0; row < input_matrix->rows; row++) {
 8003cde:	2300      	movs	r3, #0
 8003ce0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003cec:	429a      	cmp	r2, r3
 8003cee:	f080 8193 	bcs.w	8004018 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x46c>
            // per axis code

            // get a slice of the current axis
            EI_DSP_MATRIX_B(axis_matrix, 1, input_matrix->cols, input_matrix->buffer + (row * input_matrix->cols));
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	689d      	ldr	r5, [r3, #8]
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8003d02:	fb01 f303 	mul.w	r3, r1, r3
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	4413      	add	r3, r2
 8003d0a:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8003d0e:	462a      	mov	r2, r5
 8003d10:	2101      	movs	r1, #1
 8003d12:	f7fd fd82 	bl	800181a <_ZN2ei9ei_matrixC1EmmPf>
 8003d16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d102      	bne.n	8003d22 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x176>
 8003d1c:	4c5f      	ldr	r4, [pc, #380]	; (8003e9c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2f0>)
 8003d1e:	2500      	movs	r5, #0
 8003d20:	e16d      	b.n	8003ffe <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x452>

            // calculate FFT
            EI_DSP_MATRIX(fft_matrix, 1, fft_length / 2 + 1);
 8003d22:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8003d26:	085b      	lsrs	r3, r3, #1
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8003d32:	2300      	movs	r3, #0
 8003d34:	2101      	movs	r1, #1
 8003d36:	f7fd fd70 	bl	800181a <_ZN2ei9ei_matrixC1EmmPf>
 8003d3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d102      	bne.n	8003d46 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x19a>
 8003d40:	4c56      	ldr	r4, [pc, #344]	; (8003e9c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2f0>)
 8003d42:	2500      	movs	r5, #0
 8003d44:	e151      	b.n	8003fea <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x43e>
            ret = numpy::rfft(axis_matrix.buffer, axis_matrix.cols, fft_matrix.buffer, fft_matrix.cols, fft_length);
 8003d46:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8003d48:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8003d4a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d4c:	6e3d      	ldr	r5, [r7, #96]	; 0x60
 8003d4e:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8003d52:	9300      	str	r3, [sp, #0]
 8003d54:	462b      	mov	r3, r5
 8003d56:	f7fe f8af 	bl	8001eb8 <_ZN2ei5numpy4rfftEPKfjPfjj>
 8003d5a:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
            if (ret != EIDSP_OK) {
 8003d5e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d002      	beq.n	8003d6c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x1c0>
                EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003d66:	4c4c      	ldr	r4, [pc, #304]	; (8003e98 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2ec>)
 8003d68:	2500      	movs	r5, #0
 8003d6a:	e13e      	b.n	8003fea <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x43e>
            }

            // multiply by 2/N
            numpy::scale(&fft_matrix, (2.0f / static_cast<float>(fft_length)));
 8003d6c:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8003d70:	ee07 3a90 	vmov	s15, r3
 8003d74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d78:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003d7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d80:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003d84:	eeb0 0a47 	vmov.f32	s0, s14
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f7fd ff47 	bl	8001c1c <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>

            // we're now using the FFT matrix to calculate peaks etc.
            EI_DSP_MATRIX(peaks_matrix, fft_peaks, 2);
 8003d8e:	f897 10cc 	ldrb.w	r1, [r7, #204]	; 0xcc
 8003d92:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8003d96:	2300      	movs	r3, #0
 8003d98:	2202      	movs	r2, #2
 8003d9a:	f7fd fd3e 	bl	800181a <_ZN2ei9ei_matrixC1EmmPf>
 8003d9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d102      	bne.n	8003daa <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x1fe>
 8003da4:	4c3d      	ldr	r4, [pc, #244]	; (8003e9c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2f0>)
 8003da6:	2500      	movs	r5, #0
 8003da8:	e115      	b.n	8003fd6 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x42a>
            ret = spectral::processing::find_fft_peaks(&fft_matrix, &peaks_matrix,
 8003daa:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 8003dae:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8003db2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003db6:	edd7 0a00 	vldr	s1, [r7]
 8003dba:	ed97 0a03 	vldr	s0, [r7, #12]
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f7ff fac2 	bl	8003348 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft>
 8003dc4:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
                sampling_freq, fft_peaks_threshold, fft_length);
            if (ret != EIDSP_OK) {
 8003dc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d002      	beq.n	8003dd6 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x22a>
                EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003dd0:	4c31      	ldr	r4, [pc, #196]	; (8003e98 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2ec>)
 8003dd2:	2500      	movs	r5, #0
 8003dd4:	e0ff      	b.n	8003fd6 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x42a>
            }

            // calculate periodogram for spectral power buckets
            EI_DSP_MATRIX(period_fft_matrix, 1, fft_length / 2 + 1);
 8003dd6:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8003dda:	085b      	lsrs	r3, r3, #1
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	3301      	adds	r3, #1
 8003de0:	461a      	mov	r2, r3
 8003de2:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8003de6:	2300      	movs	r3, #0
 8003de8:	2101      	movs	r1, #1
 8003dea:	f7fd fd16 	bl	800181a <_ZN2ei9ei_matrixC1EmmPf>
 8003dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d102      	bne.n	8003dfa <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x24e>
 8003df4:	4c29      	ldr	r4, [pc, #164]	; (8003e9c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2f0>)
 8003df6:	2500      	movs	r5, #0
 8003df8:	e0e3      	b.n	8003fc2 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x416>
            EI_DSP_MATRIX(period_freq_matrix, 1, fft_length / 2 + 1);
 8003dfa:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8003dfe:	085b      	lsrs	r3, r3, #1
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	3301      	adds	r3, #1
 8003e04:	461a      	mov	r2, r3
 8003e06:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	2101      	movs	r1, #1
 8003e0e:	f7fd fd04 	bl	800181a <_ZN2ei9ei_matrixC1EmmPf>
 8003e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d102      	bne.n	8003e1e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x272>
 8003e18:	4c20      	ldr	r4, [pc, #128]	; (8003e9c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2f0>)
 8003e1a:	2500      	movs	r5, #0
 8003e1c:	e0c7      	b.n	8003fae <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x402>
            ret = spectral::processing::periodogram(&axis_matrix,
 8003e1e:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8003e22:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003e26:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003e2a:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8003e2e:	ed97 0a03 	vldr	s0, [r7, #12]
 8003e32:	f7ff fcd7 	bl	80037e4 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft>
 8003e36:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
                &period_fft_matrix, &period_freq_matrix, sampling_freq, fft_length);
            if (ret != EIDSP_OK) {
 8003e3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d003      	beq.n	8003e4a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x29e>
                EIDSP_ERR(ret);
 8003e42:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 8003e46:	2500      	movs	r5, #0
 8003e48:	e0b1      	b.n	8003fae <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x402>
            }

            EI_DSP_MATRIX(edges_matrix_out, edges_matrix_in->rows - 1, 1);
 8003e4a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	1e59      	subs	r1, r3, #1
 8003e52:	f107 0018 	add.w	r0, r7, #24
 8003e56:	2300      	movs	r3, #0
 8003e58:	2201      	movs	r2, #1
 8003e5a:	f7fd fcde 	bl	800181a <_ZN2ei9ei_matrixC1EmmPf>
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d102      	bne.n	8003e6a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2be>
 8003e64:	4c0d      	ldr	r4, [pc, #52]	; (8003e9c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2f0>)
 8003e66:	2500      	movs	r5, #0
 8003e68:	e097      	b.n	8003f9a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x3ee>
            ret = spectral::processing::spectral_power_edges(
 8003e6a:	f107 0318 	add.w	r3, r7, #24
 8003e6e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003e72:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8003e76:	ed97 0a03 	vldr	s0, [r7, #12]
 8003e7a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003e7e:	f7ff fba5 	bl	80035cc <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f>
 8003e82:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
                &period_fft_matrix,
                &period_freq_matrix,
                edges_matrix_in,
                &edges_matrix_out,
                sampling_freq);
            if (ret != EIDSP_OK) {
 8003e86:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d008      	beq.n	8003ea0 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2f4>
                EIDSP_ERR(ret);
 8003e8e:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 8003e92:	2500      	movs	r5, #0
 8003e94:	e081      	b.n	8003f9a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x3ee>
 8003e96:	bf00      	nop
 8003e98:	fffffc14 	.word	0xfffffc14
 8003e9c:	fffffc16 	.word	0xfffffc16
            }

            float *features_row = out_features->buffer + (row * out_features->cols);
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8003eac:	fb01 f303 	mul.w	r3, r1, r3
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	4413      	add	r3, r2
 8003eb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

            size_t fx = 0;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

            features_row[fx++] = rms_matrix.buffer[row];
 8003ebe:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8003ec2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	441a      	add	r2, r3
 8003eca:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003ece:	1c59      	adds	r1, r3, #1
 8003ed0:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8003eda:	440b      	add	r3, r1
 8003edc:	6812      	ldr	r2, [r2, #0]
 8003ede:	601a      	str	r2, [r3, #0]
            for (size_t peak_row = 0; peak_row < peaks_matrix.rows; peak_row++) {
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003ee6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ee8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d22c      	bcs.n	8003f4a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x39e>
                features_row[fx++] = peaks_matrix.buffer[peak_row * peaks_matrix.cols + 0];
 8003ef0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ef2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ef4:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8003ef8:	fb01 f303 	mul.w	r3, r1, r3
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	441a      	add	r2, r3
 8003f00:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003f04:	1c59      	adds	r1, r3, #1
 8003f06:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8003f10:	440b      	add	r3, r1
 8003f12:	6812      	ldr	r2, [r2, #0]
 8003f14:	601a      	str	r2, [r3, #0]
                features_row[fx++] = peaks_matrix.buffer[peak_row * peaks_matrix.cols + 1];
 8003f16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f1a:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8003f1e:	fb01 f303 	mul.w	r3, r1, r3
 8003f22:	3301      	adds	r3, #1
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	441a      	add	r2, r3
 8003f28:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003f2c:	1c59      	adds	r1, r3, #1
 8003f2e:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8003f38:	440b      	add	r3, r1
 8003f3a:	6812      	ldr	r2, [r2, #0]
 8003f3c:	601a      	str	r2, [r3, #0]
            for (size_t peak_row = 0; peak_row < peaks_matrix.rows; peak_row++) {
 8003f3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f42:	3301      	adds	r3, #1
 8003f44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003f48:	e7cd      	b.n	8003ee6 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x33a>
            }
            for (size_t edge_row = 0; edge_row < edges_matrix_out.rows; edge_row++) {
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d21e      	bcs.n	8003f98 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x3ec>
                features_row[fx++] = edges_matrix_out.buffer[edge_row * edges_matrix_out.cols] / 10.0f;
 8003f5a:	69ba      	ldr	r2, [r7, #24]
 8003f5c:	6a3b      	ldr	r3, [r7, #32]
 8003f5e:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8003f62:	fb01 f303 	mul.w	r3, r1, r3
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	4413      	add	r3, r2
 8003f6a:	ed93 7a00 	vldr	s14, [r3]
 8003f6e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003f72:	1c5a      	adds	r2, r3, #1
 8003f74:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003f7e:	4413      	add	r3, r2
 8003f80:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003f84:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f88:	edc3 7a00 	vstr	s15, [r3]
            for (size_t edge_row = 0; edge_row < edges_matrix_out.rows; edge_row++) {
 8003f8c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003f90:	3301      	adds	r3, #1
 8003f92:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003f96:	e7db      	b.n	8003f50 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x3a4>
 8003f98:	2501      	movs	r5, #1
 8003f9a:	f107 0318 	add.w	r3, r7, #24
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f7fd fc66 	bl	8001870 <_ZN2ei9ei_matrixD1Ev>
 8003fa4:	2d01      	cmp	r5, #1
 8003fa6:	d001      	beq.n	8003fac <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x400>
 8003fa8:	2500      	movs	r5, #0
 8003faa:	e000      	b.n	8003fae <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x402>
 8003fac:	2501      	movs	r5, #1
 8003fae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7fd fc5c 	bl	8001870 <_ZN2ei9ei_matrixD1Ev>
 8003fb8:	2d01      	cmp	r5, #1
 8003fba:	d001      	beq.n	8003fc0 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x414>
 8003fbc:	2500      	movs	r5, #0
 8003fbe:	e000      	b.n	8003fc2 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x416>
 8003fc0:	2501      	movs	r5, #1
 8003fc2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f7fd fc52 	bl	8001870 <_ZN2ei9ei_matrixD1Ev>
 8003fcc:	2d01      	cmp	r5, #1
 8003fce:	d001      	beq.n	8003fd4 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x428>
 8003fd0:	2500      	movs	r5, #0
 8003fd2:	e000      	b.n	8003fd6 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x42a>
 8003fd4:	2501      	movs	r5, #1
 8003fd6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7fd fc48 	bl	8001870 <_ZN2ei9ei_matrixD1Ev>
 8003fe0:	2d01      	cmp	r5, #1
 8003fe2:	d001      	beq.n	8003fe8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x43c>
 8003fe4:	2500      	movs	r5, #0
 8003fe6:	e000      	b.n	8003fea <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x43e>
 8003fe8:	2501      	movs	r5, #1
 8003fea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f7fd fc3e 	bl	8001870 <_ZN2ei9ei_matrixD1Ev>
 8003ff4:	2d01      	cmp	r5, #1
 8003ff6:	d001      	beq.n	8003ffc <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x450>
 8003ff8:	2500      	movs	r5, #0
 8003ffa:	e000      	b.n	8003ffe <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x452>
 8003ffc:	2501      	movs	r5, #1
 8003ffe:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004002:	4618      	mov	r0, r3
 8004004:	f7fd fc34 	bl	8001870 <_ZN2ei9ei_matrixD1Ev>
 8004008:	2d01      	cmp	r5, #1
 800400a:	d106      	bne.n	800401a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x46e>
        for (size_t row = 0; row < input_matrix->rows; row++) {
 800400c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004010:	3301      	adds	r3, #1
 8004012:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004016:	e665      	b.n	8003ce4 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x138>
            }
        }

        return EIDSP_OK;
 8004018:	2400      	movs	r4, #0
        EI_DSP_MATRIX(peaks_matrix, axes, fft_peaks * 2);
 800401a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800401e:	4618      	mov	r0, r3
 8004020:	f7fd fc26 	bl	8001870 <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(rms_matrix, axes, 1);
 8004024:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8004028:	4618      	mov	r0, r3
 800402a:	f7fd fc21 	bl	8001870 <_ZN2ei9ei_matrixD1Ev>
    }
 800402e:	4623      	mov	r3, r4
 8004030:	4618      	mov	r0, r3
 8004032:	37b8      	adds	r7, #184	; 0xb8
 8004034:	46bd      	mov	sp, r7
 8004036:	bdb0      	pop	{r4, r5, r7, pc}

08004038 <_ZN2ei8spectral7feature30calculate_spectral_buffer_sizeEbjj>:
     * Calculate the buffer size for Spectral Analysis
     * @param rms: Whether to calculate the RMS as part of the features
     * @param peaks_count: Number of FFT peaks
     * @param spectral_edges_count: Number of spectral edges
     */
    static size_t calculate_spectral_buffer_size(
 8004038:	b480      	push	{r7}
 800403a:	b087      	sub	sp, #28
 800403c:	af00      	add	r7, sp, #0
 800403e:	4603      	mov	r3, r0
 8004040:	60b9      	str	r1, [r7, #8]
 8004042:	607a      	str	r2, [r7, #4]
 8004044:	73fb      	strb	r3, [r7, #15]
        bool rms, size_t peaks_count, size_t spectral_edges_count)
    {
        size_t count = 0;
 8004046:	2300      	movs	r3, #0
 8004048:	617b      	str	r3, [r7, #20]
        if (rms) count++;
 800404a:	7bfb      	ldrb	r3, [r7, #15]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d002      	beq.n	8004056 <_ZN2ei8spectral7feature30calculate_spectral_buffer_sizeEbjj+0x1e>
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	3301      	adds	r3, #1
 8004054:	617b      	str	r3, [r7, #20]
        count += (peaks_count * 2);
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	005b      	lsls	r3, r3, #1
 800405a:	697a      	ldr	r2, [r7, #20]
 800405c:	4413      	add	r3, r2
 800405e:	617b      	str	r3, [r7, #20]
        if (spectral_edges_count > 0) {
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d004      	beq.n	8004070 <_ZN2ei8spectral7feature30calculate_spectral_buffer_sizeEbjj+0x38>
            count += (spectral_edges_count - 1);
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	4413      	add	r3, r2
 800406c:	3b01      	subs	r3, #1
 800406e:	617b      	str	r3, [r7, #20]
        }
        return count;
 8004070:	697b      	ldr	r3, [r7, #20]
    }
 8004072:	4618      	mov	r0, r3
 8004074:	371c      	adds	r7, #28
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
	...

08004080 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf>:

    static int extract_spectral_analysis_features_v1(
 8004080:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
 8004084:	b0b3      	sub	sp, #204	; 0xcc
 8004086:	af04      	add	r7, sp, #16
 8004088:	60f8      	str	r0, [r7, #12]
 800408a:	60b9      	str	r1, [r7, #8]
 800408c:	607a      	str	r2, [r7, #4]
 800408e:	ed87 0a00 	vstr	s0, [r7]
        matrix_t *output_matrix,
        ei_dsp_config_spectral_analysis_t *config_ptr,
        const float sampling_freq)
    {
        // scale the signal
        int ret = numpy::scale(input_matrix, config_ptr->scale_axes);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	edd3 7a02 	vldr	s15, [r3, #8]
 8004098:	eeb0 0a67 	vmov.f32	s0, s15
 800409c:	68f8      	ldr	r0, [r7, #12]
 800409e:	f7fd fdbd 	bl	8001c1c <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>
 80040a2:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
        if (ret != EIDSP_OK) {
 80040a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d007      	beq.n	80040be <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x3e>
            ei_printf("ERR: Failed to scale signal (%d)\n", ret);
 80040ae:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80040b2:	488c      	ldr	r0, [pc, #560]	; (80042e4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x264>)
 80040b4:	f001 ffe2 	bl	800607c <_Z9ei_printfPKcz>
            EIDSP_ERR(ret);
 80040b8:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 80040bc:	e10b      	b.n	80042d6 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x256>
        }

        // transpose the matrix so we have one row per axis (nifty!)
        ret = numpy::transpose(input_matrix);
 80040be:	68f8      	ldr	r0, [r7, #12]
 80040c0:	f7fd fd2b 	bl	8001b1a <_ZN2ei5numpy9transposeEPNS_9ei_matrixE>
 80040c4:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
        if (ret != EIDSP_OK) {
 80040c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d007      	beq.n	80040e0 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x60>
            ei_printf("ERR: Failed to transpose matrix (%d)\n", ret);
 80040d0:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80040d4:	4884      	ldr	r0, [pc, #528]	; (80042e8 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x268>)
 80040d6:	f001 ffd1 	bl	800607c <_Z9ei_printfPKcz>
            EIDSP_ERR(ret);
 80040da:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 80040de:	e0fa      	b.n	80042d6 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x256>
        }

        // the spectral edges that we want to calculate
        matrix_t edges_matrix_in(64, 1);
 80040e0:	f107 0094 	add.w	r0, r7, #148	; 0x94
 80040e4:	2300      	movs	r3, #0
 80040e6:	2201      	movs	r2, #1
 80040e8:	2140      	movs	r1, #64	; 0x40
 80040ea:	f7fd fb96 	bl	800181a <_ZN2ei9ei_matrixC1EmmPf>
        size_t edge_matrix_ix = 0;
 80040ee:	2300      	movs	r3, #0
 80040f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

        char spectral_str[128] = { 0 };
 80040f4:	2300      	movs	r3, #0
 80040f6:	617b      	str	r3, [r7, #20]
 80040f8:	f107 0318 	add.w	r3, r7, #24
 80040fc:	227c      	movs	r2, #124	; 0x7c
 80040fe:	2100      	movs	r1, #0
 8004100:	4618      	mov	r0, r3
 8004102:	f01f fa45 	bl	8023590 <memset>
        if (strlen(config_ptr->spectral_power_edges) > sizeof(spectral_str) - 1) {
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800410a:	4618      	mov	r0, r3
 800410c:	f7fc f8ba 	bl	8000284 <strlen>
 8004110:	4603      	mov	r3, r0
 8004112:	2b7f      	cmp	r3, #127	; 0x7f
 8004114:	d901      	bls.n	800411a <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x9a>
            EIDSP_ERR(EIDSP_PARAMETER_INVALID);
 8004116:	4c75      	ldr	r4, [pc, #468]	; (80042ec <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x26c>)
 8004118:	e0d8      	b.n	80042cc <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x24c>
        }
        memcpy(
            spectral_str,
            config_ptr->spectral_power_edges,
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a9c      	ldr	r4, [r3, #40]	; 0x28
        memcpy(
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004122:	4618      	mov	r0, r3
 8004124:	f7fc f8ae 	bl	8000284 <strlen>
 8004128:	4602      	mov	r2, r0
 800412a:	f107 0314 	add.w	r3, r7, #20
 800412e:	4621      	mov	r1, r4
 8004130:	4618      	mov	r0, r3
 8004132:	f01f fa05 	bl	8023540 <memcpy>
            strlen(config_ptr->spectral_power_edges));

        // convert spectral_power_edges (string) into float array
        char *spectral_ptr = spectral_str;
 8004136:	f107 0314 	add.w	r3, r7, #20
 800413a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        while (spectral_ptr != NULL) {
 800413e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d03f      	beq.n	80041c6 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x146>
            while ((*spectral_ptr) == ' ') {
 8004146:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	2b20      	cmp	r3, #32
 800414e:	d105      	bne.n	800415c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xdc>
                spectral_ptr++;
 8004150:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004154:	3301      	adds	r3, #1
 8004156:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            while ((*spectral_ptr) == ' ') {
 800415a:	e7f4      	b.n	8004146 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xc6>
            }

            edges_matrix_in.buffer[edge_matrix_ix++] = atof(spectral_ptr);
 800415c:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8004160:	f01f f992 	bl	8023488 <atof>
 8004164:	ec59 8b10 	vmov	r8, r9, d0
 8004168:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800416c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004170:	1c59      	adds	r1, r3, #1
 8004172:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	18d4      	adds	r4, r2, r3
 800417a:	4640      	mov	r0, r8
 800417c:	4649      	mov	r1, r9
 800417e:	f7fc fd3d 	bl	8000bfc <__aeabi_d2f>
 8004182:	4603      	mov	r3, r0
 8004184:	6023      	str	r3, [r4, #0]

            // find next (spectral) delimiter (or '\0' character)
            while ((*spectral_ptr != ',')) {
 8004186:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	2b2c      	cmp	r3, #44	; 0x2c
 800418e:	d00b      	beq.n	80041a8 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x128>
                spectral_ptr++;
 8004190:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004194:	3301      	adds	r3, #1
 8004196:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                if (*spectral_ptr == '\0')
 800419a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d000      	beq.n	80041a6 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x126>
            while ((*spectral_ptr != ',')) {
 80041a4:	e7ef      	b.n	8004186 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x106>
                    break;
 80041a6:	bf00      	nop
            }

            if (*spectral_ptr == '\0') {
 80041a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d103      	bne.n	80041ba <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x13a>
                spectral_ptr = NULL;
 80041b2:	2300      	movs	r3, #0
 80041b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80041b8:	e7c1      	b.n	800413e <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xbe>
            }
            else {
                spectral_ptr++;
 80041ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80041be:	3301      	adds	r3, #1
 80041c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        while (spectral_ptr != NULL) {
 80041c4:	e7bb      	b.n	800413e <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xbe>
            }
        }
        edges_matrix_in.rows = edge_matrix_ix;
 80041c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80041ca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

        // calculate how much room we need for the output matrix
        size_t output_matrix_cols = spectral::feature::calculate_spectral_buffer_size(
            true,
            config_ptr->spectral_peaks_count,
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a1b      	ldr	r3, [r3, #32]
        size_t output_matrix_cols = spectral::feature::calculate_spectral_buffer_size(
 80041d2:	4619      	mov	r1, r3
            edges_matrix_in.rows);
 80041d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
        size_t output_matrix_cols = spectral::feature::calculate_spectral_buffer_size(
 80041d8:	461a      	mov	r2, r3
 80041da:	2001      	movs	r0, #1
 80041dc:	f7ff ff2c 	bl	8004038 <_ZN2ei8spectral7feature30calculate_spectral_buffer_sizeEbjj>
 80041e0:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
        // ei_printf("output_matrix_size %hux%zu\n", input_matrix.rows, output_matrix_cols);
        if (output_matrix->cols * output_matrix->rows !=
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	68ba      	ldr	r2, [r7, #8]
 80041ea:	6852      	ldr	r2, [r2, #4]
 80041ec:	fb03 f202 	mul.w	r2, r3, r2
            static_cast<uint32_t>(output_matrix_cols * config_ptr->axes)) {
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	4619      	mov	r1, r3
 80041f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80041fa:	fb01 f303 	mul.w	r3, r1, r3
        if (output_matrix->cols * output_matrix->rows !=
 80041fe:	429a      	cmp	r2, r3
 8004200:	d001      	beq.n	8004206 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x186>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8004202:	4c3b      	ldr	r4, [pc, #236]	; (80042f0 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x270>)
 8004204:	e062      	b.n	80042cc <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x24c>
        }

        output_matrix->cols = output_matrix_cols;
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800420c:	609a      	str	r2, [r3, #8]
        output_matrix->rows = config_ptr->axes;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	461a      	mov	r2, r3
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	605a      	str	r2, [r3, #4]

        spectral::filter_t filter_type;
        if (strcmp(config_ptr->filter_type, "low") == 0) {
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	4935      	ldr	r1, [pc, #212]	; (80042f4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x274>)
 800421e:	4618      	mov	r0, r3
 8004220:	f7fc f826 	bl	8000270 <strcmp>
 8004224:	4603      	mov	r3, r0
 8004226:	2b00      	cmp	r3, #0
 8004228:	d103      	bne.n	8004232 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1b2>
            filter_type = spectral::filter_lowpass;
 800422a:	2301      	movs	r3, #1
 800422c:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 8004230:	e00f      	b.n	8004252 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1d2>
        }
        else if (strcmp(config_ptr->filter_type, "high") == 0) {
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	4930      	ldr	r1, [pc, #192]	; (80042f8 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x278>)
 8004238:	4618      	mov	r0, r3
 800423a:	f7fc f819 	bl	8000270 <strcmp>
 800423e:	4603      	mov	r3, r0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d103      	bne.n	800424c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1cc>
            filter_type = spectral::filter_highpass;
 8004244:	2302      	movs	r3, #2
 8004246:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 800424a:	e002      	b.n	8004252 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1d2>
        }
        else {
            filter_type = spectral::filter_none;
 800424c:	2300      	movs	r3, #0
 800424e:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
        }

        ret = spectral::feature::spectral_analysis(
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	edd3 7a04 	vldr	s15, [r3, #16]
            output_matrix,
            input_matrix,
            sampling_freq,
            filter_type,
            config_ptr->filter_cutoff,
            config_ptr->filter_order,
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	695b      	ldr	r3, [r3, #20]
        ret = spectral::feature::spectral_analysis(
 800425c:	b2dc      	uxtb	r4, r3
            config_ptr->fft_length,
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	69db      	ldr	r3, [r3, #28]
        ret = spectral::feature::spectral_analysis(
 8004262:	b29b      	uxth	r3, r3
            config_ptr->spectral_peaks_count,
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	6a12      	ldr	r2, [r2, #32]
        ret = spectral::feature::spectral_analysis(
 8004268:	b2d2      	uxtb	r2, r2
 800426a:	6879      	ldr	r1, [r7, #4]
 800426c:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 8004270:	f897 00af 	ldrb.w	r0, [r7, #175]	; 0xaf
 8004274:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8004278:	9102      	str	r1, [sp, #8]
 800427a:	9201      	str	r2, [sp, #4]
 800427c:	9300      	str	r3, [sp, #0]
 800427e:	eeb0 1a47 	vmov.f32	s2, s14
 8004282:	4623      	mov	r3, r4
 8004284:	eef0 0a67 	vmov.f32	s1, s15
 8004288:	4602      	mov	r2, r0
 800428a:	ed97 0a00 	vldr	s0, [r7]
 800428e:	68f9      	ldr	r1, [r7, #12]
 8004290:	68b8      	ldr	r0, [r7, #8]
 8004292:	f7ff fc8b 	bl	8003bac <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_>
 8004296:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
            config_ptr->spectral_peaks_threshold,
            &edges_matrix_in);
        if (ret != EIDSP_OK) {
 800429a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d007      	beq.n	80042b2 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x232>
            ei_printf("ERR: Failed to calculate spectral features (%d)\n", ret);
 80042a2:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80042a6:	4815      	ldr	r0, [pc, #84]	; (80042fc <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x27c>)
 80042a8:	f001 fee8 	bl	800607c <_Z9ei_printfPKcz>
            EIDSP_ERR(ret);
 80042ac:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 80042b0:	e00c      	b.n	80042cc <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x24c>
        }

        // flatten again
        output_matrix->cols = config_ptr->axes * output_matrix_cols;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	461a      	mov	r2, r3
 80042b8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80042bc:	fb03 f202 	mul.w	r2, r3, r2
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	609a      	str	r2, [r3, #8]
        output_matrix->rows = 1;
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	2201      	movs	r2, #1
 80042c8:	605a      	str	r2, [r3, #4]

        return EIDSP_OK;
 80042ca:	2400      	movs	r4, #0
        matrix_t edges_matrix_in(64, 1);
 80042cc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80042d0:	4618      	mov	r0, r3
 80042d2:	f7fd facd 	bl	8001870 <_ZN2ei9ei_matrixD1Ev>
    }
 80042d6:	4623      	mov	r3, r4
 80042d8:	4618      	mov	r0, r3
 80042da:	37bc      	adds	r7, #188	; 0xbc
 80042dc:	46bd      	mov	sp, r7
 80042de:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
 80042e2:	bf00      	nop
 80042e4:	080279a8 	.word	0x080279a8
 80042e8:	080279cc 	.word	0x080279cc
 80042ec:	fffffc10 	.word	0xfffffc10
 80042f0:	fffffc14 	.word	0xfffffc14
 80042f4:	080279f4 	.word	0x080279f4
 80042f8:	080279f8 	.word	0x080279f8
 80042fc:	08027a00 	.word	0x08027a00

08004300 <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b>:

    static void get_start_stop_bin(
 8004300:	b580      	push	{r7, lr}
 8004302:	b088      	sub	sp, #32
 8004304:	af00      	add	r7, sp, #0
 8004306:	ed87 0a05 	vstr	s0, [r7, #20]
 800430a:	6138      	str	r0, [r7, #16]
 800430c:	edc7 0a03 	vstr	s1, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	607a      	str	r2, [r7, #4]
 8004314:	70fb      	strb	r3, [r7, #3]
        size_t *stop_bin,
        bool is_high_pass)
    {
        // we want to find n such that fcutoff < sample_f / fft * n ( or > for high pass )
        // also, + - half bin width (sample_f/(fft*2)) for high / low pass
        float bin = filter_cutoff * fft_length / sampling_freq;
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	ee07 3a90 	vmov	s15, r3
 800431c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004320:	edd7 7a03 	vldr	s15, [r7, #12]
 8004324:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004328:	ed97 7a05 	vldr	s14, [r7, #20]
 800432c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004330:	edc7 7a07 	vstr	s15, [r7, #28]
        if (is_high_pass) {
 8004334:	78fb      	ldrb	r3, [r7, #3]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d021      	beq.n	800437e <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b+0x7e>
            *start_bin = static_cast<size_t>(bin - 0.5) + 1; // add one b/c we want to always round up
 800433a:	69f8      	ldr	r0, [r7, #28]
 800433c:	f7fc f90e 	bl	800055c <__aeabi_f2d>
 8004340:	f04f 0200 	mov.w	r2, #0
 8004344:	4b1a      	ldr	r3, [pc, #104]	; (80043b0 <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b+0xb0>)
 8004346:	f7fb ffa9 	bl	800029c <__aeabi_dsub>
 800434a:	4602      	mov	r2, r0
 800434c:	460b      	mov	r3, r1
 800434e:	4610      	mov	r0, r2
 8004350:	4619      	mov	r1, r3
 8004352:	f7fc fc33 	bl	8000bbc <__aeabi_d2uiz>
 8004356:	4603      	mov	r3, r0
 8004358:	1c5a      	adds	r2, r3, #1
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	601a      	str	r2, [r3, #0]
            // don't use the DC bin b/c it's zero
            *start_bin = *start_bin == 0 ? 1 : *start_bin;
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d002      	beq.n	800436c <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b+0x6c>
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	e000      	b.n	800436e <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b+0x6e>
 800436c:	2301      	movs	r3, #1
 800436e:	68ba      	ldr	r2, [r7, #8]
 8004370:	6013      	str	r3, [r2, #0]
            *stop_bin = fft_length / 2 + 1; // go one past
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	085b      	lsrs	r3, r3, #1
 8004376:	1c5a      	adds	r2, r3, #1
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	601a      	str	r2, [r3, #0]
        }
        else {
            *start_bin = 1;
            *stop_bin = static_cast<size_t>(bin + 0.5) + 1; // go one past
        }
    }
 800437c:	e014      	b.n	80043a8 <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b+0xa8>
            *start_bin = 1;
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	2201      	movs	r2, #1
 8004382:	601a      	str	r2, [r3, #0]
            *stop_bin = static_cast<size_t>(bin + 0.5) + 1; // go one past
 8004384:	69f8      	ldr	r0, [r7, #28]
 8004386:	f7fc f8e9 	bl	800055c <__aeabi_f2d>
 800438a:	f04f 0200 	mov.w	r2, #0
 800438e:	4b08      	ldr	r3, [pc, #32]	; (80043b0 <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b+0xb0>)
 8004390:	f7fb ff86 	bl	80002a0 <__adddf3>
 8004394:	4602      	mov	r2, r0
 8004396:	460b      	mov	r3, r1
 8004398:	4610      	mov	r0, r2
 800439a:	4619      	mov	r1, r3
 800439c:	f7fc fc0e 	bl	8000bbc <__aeabi_d2uiz>
 80043a0:	4603      	mov	r3, r0
 80043a2:	1c5a      	adds	r2, r3, #1
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	601a      	str	r2, [r3, #0]
    }
 80043a8:	bf00      	nop
 80043aa:	3720      	adds	r7, #32
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	3fe00000 	.word	0x3fe00000

080043b4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf>:

    static int extract_spectral_analysis_features_v2(
 80043b4:	b5b0      	push	{r4, r5, r7, lr}
 80043b6:	b0a8      	sub	sp, #160	; 0xa0
 80043b8:	af04      	add	r7, sp, #16
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	607a      	str	r2, [r7, #4]
 80043c0:	ed87 0a00 	vstr	s0, [r7]
        matrix_t *output_matrix,
        ei_dsp_config_spectral_analysis_t *config,
        const float sampling_freq)
    {
        // transpose the matrix so we have one row per axis
        numpy::transpose_in_place(input_matrix);
 80043c4:	68f8      	ldr	r0, [r7, #12]
 80043c6:	f7fd fb18 	bl	80019fa <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE>

        // func tests for scale of 1 and does a no op in that case
        EI_TRY(numpy::scale(input_matrix, config->scale_axes));
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	edd3 7a02 	vldr	s15, [r3, #8]
 80043d0:	eeb0 0a67 	vmov.f32	s0, s15
 80043d4:	68f8      	ldr	r0, [r7, #12]
 80043d6:	f7fd fc21 	bl	8001c1c <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>
 80043da:	6738      	str	r0, [r7, #112]	; 0x70
 80043dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d001      	beq.n	80043e6 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x32>
 80043e2:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 80043e4:	e19e      	b.n	8004724 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x370>

        bool do_filter = false;
 80043e6:	2300      	movs	r3, #0
 80043e8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
        bool is_high_pass;

        // apply filter, if enabled
        // "zero" order filter allowed.  will still remove unwanted fft bins later
        if (strcmp(config->filter_type, "low") == 0) {
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	49ab      	ldr	r1, [pc, #684]	; (80046a0 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x2ec>)
 80043f2:	4618      	mov	r0, r3
 80043f4:	f7fb ff3c 	bl	8000270 <strcmp>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d11e      	bne.n	800443c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x88>
            if( config->filter_order ) {
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	695b      	ldr	r3, [r3, #20]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d013      	beq.n	800442e <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x7a>
                EI_TRY(spectral::processing::butterworth_lowpass_filter(
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	edd3 7a04 	vldr	s15, [r3, #16]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	695b      	ldr	r3, [r3, #20]
 8004410:	b2db      	uxtb	r3, r3
 8004412:	4619      	mov	r1, r3
 8004414:	eef0 0a67 	vmov.f32	s1, s15
 8004418:	ed97 0a00 	vldr	s0, [r7]
 800441c:	68f8      	ldr	r0, [r7, #12]
 800441e:	f7fe fe21 	bl	8003064 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh>
 8004422:	66b8      	str	r0, [r7, #104]	; 0x68
 8004424:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004426:	2b00      	cmp	r3, #0
 8004428:	d001      	beq.n	800442e <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x7a>
 800442a:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 800442c:	e17a      	b.n	8004724 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x370>
                    input_matrix,
                    sampling_freq,
                    config->filter_cutoff,
                    config->filter_order));
            }
            do_filter = true;
 800442e:	2301      	movs	r3, #1
 8004430:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            is_high_pass = false;
 8004434:	2300      	movs	r3, #0
 8004436:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 800443a:	e026      	b.n	800448a <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xd6>
        }
        else if (strcmp(config->filter_type, "high") == 0) {
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	4998      	ldr	r1, [pc, #608]	; (80046a4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x2f0>)
 8004442:	4618      	mov	r0, r3
 8004444:	f7fb ff14 	bl	8000270 <strcmp>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d11d      	bne.n	800448a <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xd6>
            if( config->filter_order ) {
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	695b      	ldr	r3, [r3, #20]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d013      	beq.n	800447e <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xca>
                EI_TRY(spectral::processing::butterworth_highpass_filter(
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	edd3 7a04 	vldr	s15, [r3, #16]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	695b      	ldr	r3, [r3, #20]
 8004460:	b2db      	uxtb	r3, r3
 8004462:	4619      	mov	r1, r3
 8004464:	eef0 0a67 	vmov.f32	s1, s15
 8004468:	ed97 0a00 	vldr	s0, [r7]
 800446c:	68f8      	ldr	r0, [r7, #12]
 800446e:	f7fe fe2f 	bl	80030d0 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh>
 8004472:	66f8      	str	r0, [r7, #108]	; 0x6c
 8004474:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004476:	2b00      	cmp	r3, #0
 8004478:	d001      	beq.n	800447e <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xca>
 800447a:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 800447c:	e152      	b.n	8004724 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x370>
                    input_matrix,
                    sampling_freq,
                    config->filter_cutoff,
                    config->filter_order));
            }
            do_filter = true;
 800447e:	2301      	movs	r3, #1
 8004480:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            is_high_pass = true;
 8004484:	2301      	movs	r3, #1
 8004486:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
        }

        EI_TRY(processing::subtract_mean(input_matrix));
 800448a:	68f8      	ldr	r0, [r7, #12]
 800448c:	f7ff fb56 	bl	8003b3c <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE>
 8004490:	6678      	str	r0, [r7, #100]	; 0x64
 8004492:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004494:	2b00      	cmp	r3, #0
 8004496:	d001      	beq.n	800449c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xe8>
 8004498:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 800449a:	e143      	b.n	8004724 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x370>

        // Figure bins we remove based on filter cutoff
        size_t start_bin, stop_bin;
        if (do_filter) {
 800449c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d012      	beq.n	80044ca <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x116>
            get_start_stop_bin(
                sampling_freq,
                config->fft_length,
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	69db      	ldr	r3, [r3, #28]
            get_start_stop_bin(
 80044a8:	4618      	mov	r0, r3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	edd3 7a04 	vldr	s15, [r3, #16]
 80044b0:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80044b4:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80044b8:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80044bc:	eef0 0a67 	vmov.f32	s1, s15
 80044c0:	ed97 0a00 	vldr	s0, [r7]
 80044c4:	f7ff ff1c 	bl	8004300 <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b>
 80044c8:	e008      	b.n	80044dc <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x128>
                &start_bin,
                &stop_bin,
                is_high_pass);
        }
        else {
            start_bin = 1;
 80044ca:	2301      	movs	r3, #1
 80044cc:	64bb      	str	r3, [r7, #72]	; 0x48
            stop_bin = config->fft_length / 2 + 1;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	69db      	ldr	r3, [r3, #28]
 80044d2:	0fda      	lsrs	r2, r3, #31
 80044d4:	4413      	add	r3, r2
 80044d6:	105b      	asrs	r3, r3, #1
 80044d8:	3301      	adds	r3, #1
 80044da:	647b      	str	r3, [r7, #68]	; 0x44
        }
        size_t num_bins = stop_bin - start_bin;
 80044dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	663b      	str	r3, [r7, #96]	; 0x60

        float *feature_out = output_matrix->buffer;
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (size_t row = 0; row < input_matrix->rows; row++) {
 80044ec:	2300      	movs	r3, #0
 80044ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80044fa:	429a      	cmp	r2, r3
 80044fc:	f080 8111 	bcs.w	8004722 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x36e>
            float *data_window = input_matrix->get_row_ptr(row);
 8004500:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8004504:	68f8      	ldr	r0, [r7, #12]
 8004506:	f7fd f9c9 	bl	800189c <_ZN2ei9ei_matrix11get_row_ptrEj>
 800450a:	65f8      	str	r0, [r7, #92]	; 0x5c
            size_t data_size = input_matrix->cols;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	65bb      	str	r3, [r7, #88]	; 0x58

            matrix_t rms_in_matrix(1, data_size, data_window);
 8004512:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8004516:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004518:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800451a:	2101      	movs	r1, #1
 800451c:	f7fd f97d 	bl	800181a <_ZN2ei9ei_matrixC1EmmPf>
            matrix_t rms_out_matrix(1, 1, feature_out);
 8004520:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004524:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004528:	2201      	movs	r2, #1
 800452a:	2101      	movs	r1, #1
 800452c:	f7fd f975 	bl	800181a <_ZN2ei9ei_matrixC1EmmPf>
            EI_TRY(numpy::rms(&rms_in_matrix, &rms_out_matrix));
 8004530:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004534:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004538:	4611      	mov	r1, r2
 800453a:	4618      	mov	r0, r3
 800453c:	f7fd fc44 	bl	8001dc8 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_>
 8004540:	6578      	str	r0, [r7, #84]	; 0x54
 8004542:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004544:	2b00      	cmp	r3, #0
 8004546:	d002      	beq.n	800454e <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x19a>
 8004548:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 800454a:	2500      	movs	r5, #0
 800454c:	e0d2      	b.n	80046f4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x340>

            feature_out++;
 800454e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004552:	3304      	adds	r3, #4
 8004554:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

            // Standard Deviation
            float stddev = *(feature_out-1); //= sqrt(numpy::variance(data_window, data_size));
 8004558:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800455c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8004560:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            if (stddev == 0.0f) {
 8004564:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8004568:	eef5 7a40 	vcmp.f32	s15, #0.0
 800456c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004570:	d102      	bne.n	8004578 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1c4>
                stddev = 1e-10f;
 8004572:	4b4d      	ldr	r3, [pc, #308]	; (80046a8 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x2f4>)
 8004574:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            // Substitute 0 for mean (b/c it is subtracted out above)
            // Skew becomes: mean(X^3) / stddev^3
            // Kurtosis becomes: mean(X^4) / stddev^4
            // Note, this is the Fisher definition of Kurtosis, so subtract 3
            // (see https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.kurtosis.html)
            float s_sum = 0;
 8004578:	f04f 0300 	mov.w	r3, #0
 800457c:	67fb      	str	r3, [r7, #124]	; 0x7c
            float k_sum = 0;
 800457e:	f04f 0300 	mov.w	r3, #0
 8004582:	67bb      	str	r3, [r7, #120]	; 0x78
            float temp;
            for (size_t i = 0; i < data_size; i++) {
 8004584:	2300      	movs	r3, #0
 8004586:	677b      	str	r3, [r7, #116]	; 0x74
 8004588:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800458a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800458c:	429a      	cmp	r2, r3
 800458e:	d233      	bcs.n	80045f8 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x244>
                temp = data_window[i] * data_window[i] * data_window[i];
 8004590:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004596:	4413      	add	r3, r2
 8004598:	ed93 7a00 	vldr	s14, [r3]
 800459c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80045a2:	4413      	add	r3, r2
 80045a4:	edd3 7a00 	vldr	s15, [r3]
 80045a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80045ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80045b2:	4413      	add	r3, r2
 80045b4:	edd3 7a00 	vldr	s15, [r3]
 80045b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045bc:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
                s_sum += temp;
 80045c0:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 80045c4:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80045c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045cc:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
                k_sum += temp * data_window[i];
 80045d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80045d6:	4413      	add	r3, r2
 80045d8:	ed93 7a00 	vldr	s14, [r3]
 80045dc:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80045e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045e4:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 80045e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045ec:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
            for (size_t i = 0; i < data_size; i++) {
 80045f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045f2:	3301      	adds	r3, #1
 80045f4:	677b      	str	r3, [r7, #116]	; 0x74
 80045f6:	e7c7      	b.n	8004588 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1d4>
            }
            // Skewness out
            temp = stddev * stddev * stddev;
 80045f8:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80045fc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004600:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8004604:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004608:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
            *feature_out++ = (s_sum / data_size) / temp;
 800460c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800460e:	ee07 3a90 	vmov	s15, r3
 8004612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004616:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 800461a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800461e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004622:	1d1a      	adds	r2, r3, #4
 8004624:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004628:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800462c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004630:	edc3 7a00 	vstr	s15, [r3]
            // Kurtosis out
            *feature_out++ = ((k_sum / data_size) / (temp * stddev)) - 3;
 8004634:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004636:	ee07 3a90 	vmov	s15, r3
 800463a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800463e:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8004642:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004646:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800464a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800464e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004652:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004656:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800465a:	1d1a      	adds	r2, r3, #4
 800465c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004660:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004664:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004668:	edc3 7a00 	vstr	s15, [r3]

            EI_TRY(numpy::welch_max_hold(
 800466c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800466e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	69d2      	ldr	r2, [r2, #28]
 8004674:	4610      	mov	r0, r2
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800467c:	9202      	str	r2, [sp, #8]
 800467e:	9001      	str	r0, [sp, #4]
 8004680:	9300      	str	r3, [sp, #0]
 8004682:	460b      	mov	r3, r1
 8004684:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004688:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800468a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800468c:	f7fd ffd0 	bl	8002630 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb>
 8004690:	64f8      	str	r0, [r7, #76]	; 0x4c
 8004692:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004694:	2b00      	cmp	r3, #0
 8004696:	d009      	beq.n	80046ac <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x2f8>
 8004698:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 800469a:	2500      	movs	r5, #0
 800469c:	e02a      	b.n	80046f4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x340>
 800469e:	bf00      	nop
 80046a0:	080279f4 	.word	0x080279f4
 80046a4:	080279f8 	.word	0x080279f8
 80046a8:	2edbe6ff 	.word	0x2edbe6ff
                feature_out,
                start_bin,
                stop_bin,
                config->fft_length,
                config->do_fft_overlap));
            if (config->do_log) {
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d016      	beq.n	80046e4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x330>
                numpy::zero_handling(feature_out, num_bins);
 80046b6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80046b8:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80046bc:	f7fe f86a 	bl	8002794 <_ZN2ei5numpy13zero_handlingEPfj>
                ei_matrix temp(num_bins, 1, feature_out);
 80046c0:	f107 0014 	add.w	r0, r7, #20
 80046c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80046c8:	2201      	movs	r2, #1
 80046ca:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80046cc:	f7fd f8a5 	bl	800181a <_ZN2ei9ei_matrixC1EmmPf>
                numpy::log10(&temp);
 80046d0:	f107 0314 	add.w	r3, r7, #20
 80046d4:	4618      	mov	r0, r3
 80046d6:	f7fd fe19 	bl	800230c <_ZN2ei5numpy5log10EPNS_9ei_matrixE>
                ei_matrix temp(num_bins, 1, feature_out);
 80046da:	f107 0314 	add.w	r3, r7, #20
 80046de:	4618      	mov	r0, r3
 80046e0:	f7fd f8c6 	bl	8001870 <_ZN2ei9ei_matrixD1Ev>
            }
            feature_out += num_bins;
 80046e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80046ec:	4413      	add	r3, r2
 80046ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80046f2:	2501      	movs	r5, #1
 80046f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046f8:	4618      	mov	r0, r3
 80046fa:	f7fd f8b9 	bl	8001870 <_ZN2ei9ei_matrixD1Ev>
 80046fe:	2d01      	cmp	r5, #1
 8004700:	d001      	beq.n	8004706 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x352>
 8004702:	2500      	movs	r5, #0
 8004704:	e000      	b.n	8004708 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x354>
 8004706:	2501      	movs	r5, #1
 8004708:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800470c:	4618      	mov	r0, r3
 800470e:	f7fd f8af 	bl	8001870 <_ZN2ei9ei_matrixD1Ev>
 8004712:	2d01      	cmp	r5, #1
 8004714:	d106      	bne.n	8004724 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x370>
        for (size_t row = 0; row < input_matrix->rows; row++) {
 8004716:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800471a:	3301      	adds	r3, #1
 800471c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004720:	e6e7      	b.n	80044f2 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x13e>
        }
        return EIDSP_OK;
 8004722:	2400      	movs	r4, #0
    }
 8004724:	4623      	mov	r3, r4
 8004726:	4618      	mov	r0, r3
 8004728:	3790      	adds	r7, #144	; 0x90
 800472a:	46bd      	mov	sp, r7
 800472c:	bdb0      	pop	{r4, r5, r7, pc}
 800472e:	bf00      	nop

08004730 <_ZNSt8functionIFijjPfEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8004730:	b580      	push	{r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	4618      	mov	r0, r3
 800473c:	f7fd f849 	bl	80017d2 <_ZNSt14_Function_baseD1Ev>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	4618      	mov	r0, r3
 8004744:	3708      	adds	r7, #8
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}

0800474a <_ZN2ei11ei_signal_tC1Ev>:
typedef struct ei_signal_t {
 800474a:	b580      	push	{r7, lr}
 800474c:	b082      	sub	sp, #8
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4618      	mov	r0, r3
 8004756:	f002 f947 	bl	80069e8 <_ZNSt8functionIFijjPfEEC1Ev>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4618      	mov	r0, r3
 800475e:	3708      	adds	r7, #8
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <_ZN2ei11ei_signal_tD1Ev>:
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	4618      	mov	r0, r3
 8004770:	f7ff ffde 	bl	8004730 <_ZNSt8functionIFijjPfEED1Ev>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4618      	mov	r0, r3
 8004778:	3708      	adds	r7, #8
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
	...

08004780 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf>:
__attribute__((unused)) int extract_spectral_analysis_features(
    signal_t *signal,
    matrix_t *output_matrix,
    void *config_ptr,
    const float frequency)
{
 8004780:	b590      	push	{r4, r7, lr}
 8004782:	b08b      	sub	sp, #44	; 0x2c
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	607a      	str	r2, [r7, #4]
 800478c:	ed87 0a00 	vstr	s0, [r7]
    ei_dsp_config_spectral_analysis_t *config = (ei_dsp_config_spectral_analysis_t *)config_ptr;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	627b      	str	r3, [r7, #36]	; 0x24

    // input matrix from the raw signal
    matrix_t input_matrix(signal->total_length / config->axes, config->axes);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	691b      	ldr	r3, [r3, #16]
 8004798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800479a:	6852      	ldr	r2, [r2, #4]
 800479c:	fbb3 f1f2 	udiv	r1, r3, r2
 80047a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	461a      	mov	r2, r3
 80047a6:	f107 0014 	add.w	r0, r7, #20
 80047aa:	2300      	movs	r3, #0
 80047ac:	f7fd f835 	bl	800181a <_ZN2ei9ei_matrixC1EmmPf>
    if (!input_matrix.buffer) {
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d101      	bne.n	80047ba <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x3a>
        EIDSP_ERR(EIDSP_OUT_OF_MEM);
 80047b6:	4c1b      	ldr	r4, [pc, #108]	; (8004824 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xa4>)
 80047b8:	e02a      	b.n	8004810 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x90>
    }

    signal->get_data(0, signal->total_length, input_matrix.buffer);
 80047ba:	68f8      	ldr	r0, [r7, #12]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	691a      	ldr	r2, [r3, #16]
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	2100      	movs	r1, #0
 80047c4:	f002 f81a 	bl	80067fc <_ZNKSt8functionIFijjPfEEclEjjS0_>
        return spectral::wavelet::extract_wavelet_features(&input_matrix, output_matrix, config, frequency);
    }
#endif

#if EI_DSP_PARAMS_SPECTRAL_ANALYSIS_ANALYSIS_TYPE_FFT || EI_DSP_PARAMS_ALL
    if (strcmp(config->analysis_type, "FFT") == 0) {
 80047c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ca:	699b      	ldr	r3, [r3, #24]
 80047cc:	4916      	ldr	r1, [pc, #88]	; (8004828 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xa8>)
 80047ce:	4618      	mov	r0, r3
 80047d0:	f7fb fd4e 	bl	8000270 <strcmp>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d119      	bne.n	800480e <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x8e>
        if (config->implementation_version == 1) {
 80047da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047dc:	881b      	ldrh	r3, [r3, #0]
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d10a      	bne.n	80047f8 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x78>
            return spectral::feature::extract_spectral_analysis_features_v1(
 80047e2:	f107 0314 	add.w	r3, r7, #20
 80047e6:	ed97 0a00 	vldr	s0, [r7]
 80047ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047ec:	68b9      	ldr	r1, [r7, #8]
 80047ee:	4618      	mov	r0, r3
 80047f0:	f7ff fc46 	bl	8004080 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf>
 80047f4:	4604      	mov	r4, r0
                &input_matrix,
                output_matrix,
                config,
                frequency);
 80047f6:	e00b      	b.n	8004810 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x90>
        } else {
            return spectral::feature::extract_spectral_analysis_features_v2(
 80047f8:	f107 0314 	add.w	r3, r7, #20
 80047fc:	ed97 0a00 	vldr	s0, [r7]
 8004800:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004802:	68b9      	ldr	r1, [r7, #8]
 8004804:	4618      	mov	r0, r3
 8004806:	f7ff fdd5 	bl	80043b4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf>
 800480a:	4604      	mov	r4, r0
                &input_matrix,
                output_matrix,
                config,
                frequency);
 800480c:	e000      	b.n	8004810 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x90>
            output_matrix,
            config,
            frequency);
    }
#endif
    return EIDSP_NOT_SUPPORTED;
 800480e:	4c07      	ldr	r4, [pc, #28]	; (800482c <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xac>)
    matrix_t input_matrix(signal->total_length / config->axes, config->axes);
 8004810:	f107 0314 	add.w	r3, r7, #20
 8004814:	4618      	mov	r0, r3
 8004816:	f7fd f82b 	bl	8001870 <_ZN2ei9ei_matrixD1Ev>
}
 800481a:	4623      	mov	r3, r4
 800481c:	4618      	mov	r0, r3
 800481e:	372c      	adds	r7, #44	; 0x2c
 8004820:	46bd      	mov	sp, r7
 8004822:	bd90      	pop	{r4, r7, pc}
 8004824:	fffffc16 	.word	0xfffffc16
 8004828:	08027a64 	.word	0x08027a64
 800482c:	fffffc0a 	.word	0xfffffc0a

08004830 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf>:

    return EIDSP_OK;
#endif
}

__attribute__((unused)) int extract_image_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float frequency) {
 8004830:	b5b0      	push	{r4, r5, r7, lr}
 8004832:	b098      	sub	sp, #96	; 0x60
 8004834:	af00      	add	r7, sp, #0
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	607a      	str	r2, [r7, #4]
 800483c:	ed87 0a00 	vstr	s0, [r7]
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004846:	ca07      	ldmia	r2, {r0, r1, r2}
 8004848:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
 800484c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800484e:	4967      	ldr	r1, [pc, #412]	; (80049ec <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1bc>)
 8004850:	4618      	mov	r0, r3
 8004852:	f7fb fd0d 	bl	8000270 <strcmp>
 8004856:	4603      	mov	r3, r0
 8004858:	2b00      	cmp	r3, #0
 800485a:	d101      	bne.n	8004860 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x30>
 800485c:	2301      	movs	r3, #1
 800485e:	e000      	b.n	8004862 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x32>
 8004860:	2303      	movs	r3, #3
 8004862:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    size_t output_ix = 0;
 8004866:	2300      	movs	r3, #0
 8004868:	65fb      	str	r3, [r7, #92]	; 0x5c

#if defined(EI_DSP_IMAGE_BUFFER_STATIC_SIZE)
    const size_t page_size = EI_DSP_IMAGE_BUFFER_STATIC_SIZE;
#else
    const size_t page_size = 1024;
 800486a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800486e:	64fb      	str	r3, [r7, #76]	; 0x4c
#endif

    // buffered read from the signal
    size_t bytes_left = signal->total_length;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	691b      	ldr	r3, [r3, #16]
 8004874:	627b      	str	r3, [r7, #36]	; 0x24
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 8004876:	2300      	movs	r3, #0
 8004878:	65bb      	str	r3, [r7, #88]	; 0x58
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004880:	429a      	cmp	r2, r3
 8004882:	f080 80ac 	bcs.w	80049de <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1ae>
        size_t elements_to_read = bytes_left > page_size ? page_size : bytes_left;
 8004886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004888:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800488c:	d803      	bhi.n	8004896 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x66>
 800488e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	e001      	b.n	800489a <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x6a>
 8004896:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800489a:	64bb      	str	r3, [r7, #72]	; 0x48

#if defined(EI_DSP_IMAGE_BUFFER_STATIC_SIZE)
        matrix_t input_matrix(elements_to_read, config.axes, ei_dsp_image_buffer);
#else
        matrix_t input_matrix(elements_to_read, config.axes);
 800489c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800489e:	461a      	mov	r2, r3
 80048a0:	f107 0014 	add.w	r0, r7, #20
 80048a4:	2300      	movs	r3, #0
 80048a6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80048a8:	f7fc ffb7 	bl	800181a <_ZN2ei9ei_matrixC1EmmPf>
#endif
        if (!input_matrix.buffer) {
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d102      	bne.n	80048b8 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x88>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 80048b2:	4d4f      	ldr	r5, [pc, #316]	; (80049f0 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1c0>)
 80048b4:	2400      	movs	r4, #0
 80048b6:	e086      	b.n	80049c6 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x196>
        }
        signal->get_data(ix, elements_to_read, input_matrix.buffer);
 80048b8:	68f8      	ldr	r0, [r7, #12]
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80048c0:	f001 ff9c 	bl	80067fc <_ZNKSt8functionIFijjPfEEclEjjS0_>

        for (size_t jx = 0; jx < elements_to_read; jx++) {
 80048c4:	2300      	movs	r3, #0
 80048c6:	657b      	str	r3, [r7, #84]	; 0x54
 80048c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80048ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d275      	bcs.n	80049bc <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x18c>
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
 80048d0:	697a      	ldr	r2, [r7, #20]
 80048d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	4413      	add	r3, r2
 80048d8:	edd3 7a00 	vldr	s15, [r3]
 80048dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048e0:	ee17 3a90 	vmov	r3, s15
 80048e4:	647b      	str	r3, [r7, #68]	; 0x44

            // rgb to 0..1
            float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
 80048e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048e8:	0c1b      	lsrs	r3, r3, #16
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	ee07 3a90 	vmov	s15, r3
 80048f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80048f4:	eddf 6a3f 	vldr	s13, [pc, #252]	; 80049f4 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1c4>
 80048f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80048fc:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
            float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
 8004900:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004902:	0a1b      	lsrs	r3, r3, #8
 8004904:	b2db      	uxtb	r3, r3
 8004906:	ee07 3a90 	vmov	s15, r3
 800490a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800490e:	eddf 6a39 	vldr	s13, [pc, #228]	; 80049f4 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1c4>
 8004912:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004916:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
            float b = static_cast<float>(pixel & 0xff) / 255.0f;
 800491a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800491c:	b2db      	uxtb	r3, r3
 800491e:	ee07 3a90 	vmov	s15, r3
 8004922:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004926:	eddf 6a33 	vldr	s13, [pc, #204]	; 80049f4 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1c4>
 800492a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800492e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

            if (channel_count == 3) {
 8004932:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8004936:	2b03      	cmp	r3, #3
 8004938:	d11b      	bne.n	8004972 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x142>
                output_matrix->buffer[output_ix++] = r;
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004940:	1c59      	adds	r1, r3, #1
 8004942:	65f9      	str	r1, [r7, #92]	; 0x5c
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	4413      	add	r3, r2
 8004948:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800494a:	601a      	str	r2, [r3, #0]
                output_matrix->buffer[output_ix++] = g;
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004952:	1c59      	adds	r1, r3, #1
 8004954:	65f9      	str	r1, [r7, #92]	; 0x5c
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	4413      	add	r3, r2
 800495a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800495c:	601a      	str	r2, [r3, #0]
                output_matrix->buffer[output_ix++] = b;
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004964:	1c59      	adds	r1, r3, #1
 8004966:	65f9      	str	r1, [r7, #92]	; 0x5c
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	4413      	add	r3, r2
 800496c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800496e:	601a      	str	r2, [r3, #0]
 8004970:	e020      	b.n	80049b4 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x184>
            }
            else {
                // ITU-R 601-2 luma transform
                // see: https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.convert
                float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
 8004972:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8004976:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80049f8 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1c8>
 800497a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800497e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004982:	eddf 6a1e 	vldr	s13, [pc, #120]	; 80049fc <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1cc>
 8004986:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800498a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800498e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8004992:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8004a00 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1d0>
 8004996:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800499a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800499e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
                output_matrix->buffer[output_ix++] = v;
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049a8:	1c59      	adds	r1, r3, #1
 80049aa:	65f9      	str	r1, [r7, #92]	; 0x5c
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	4413      	add	r3, r2
 80049b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049b2:	601a      	str	r2, [r3, #0]
        for (size_t jx = 0; jx < elements_to_read; jx++) {
 80049b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049b6:	3301      	adds	r3, #1
 80049b8:	657b      	str	r3, [r7, #84]	; 0x54
 80049ba:	e785      	b.n	80048c8 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x98>
            }
        }

        bytes_left -= elements_to_read;
 80049bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	627b      	str	r3, [r7, #36]	; 0x24
 80049c4:	2401      	movs	r4, #1
 80049c6:	f107 0314 	add.w	r3, r7, #20
 80049ca:	4618      	mov	r0, r3
 80049cc:	f7fc ff50 	bl	8001870 <_ZN2ei9ei_matrixD1Ev>
 80049d0:	2c01      	cmp	r4, #1
 80049d2:	d105      	bne.n	80049e0 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1b0>
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 80049d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049da:	65bb      	str	r3, [r7, #88]	; 0x58
 80049dc:	e74d      	b.n	800487a <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x4a>
    }

    return EIDSP_OK;
 80049de:	2500      	movs	r5, #0
}
 80049e0:	462b      	mov	r3, r5
 80049e2:	4618      	mov	r0, r3
 80049e4:	3760      	adds	r7, #96	; 0x60
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bdb0      	pop	{r4, r5, r7, pc}
 80049ea:	bf00      	nop
 80049ec:	08027c94 	.word	0x08027c94
 80049f0:	fffffc16 	.word	0xfffffc16
 80049f4:	437f0000 	.word	0x437f0000
 80049f8:	3e991687 	.word	0x3e991687
 80049fc:	3f1645a2 	.word	0x3f1645a2
 8004a00:	3de978d5 	.word	0x3de978d5

08004a04 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf>:

#endif //(EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED == 1) && (EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_DRPAI)

#if (EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED == 1) && (EI_CLASSIFIER_INFERENCING_ENGINE != EI_CLASSIFIER_DRPAI)

__attribute__((unused)) int extract_image_features_quantized(const ei_impulse_t *impulse, signal_t *signal, matrix_i8_t *output_matrix, void *config_ptr, const float frequency) {
 8004a04:	b5b0      	push	{r4, r5, r7, lr}
 8004a06:	b0a6      	sub	sp, #152	; 0x98
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6178      	str	r0, [r7, #20]
 8004a0c:	6139      	str	r1, [r7, #16]
 8004a0e:	60fa      	str	r2, [r7, #12]
 8004a10:	60bb      	str	r3, [r7, #8]
 8004a12:	ed87 0a01 	vstr	s0, [r7, #4]
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);
 8004a16:	68ba      	ldr	r2, [r7, #8]
 8004a18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004a1c:	ca07      	ldmia	r2, {r0, r1, r2}
 8004a1e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
 8004a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a24:	49ab      	ldr	r1, [pc, #684]	; (8004cd4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2d0>)
 8004a26:	4618      	mov	r0, r3
 8004a28:	f7fb fc22 	bl	8000270 <strcmp>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d101      	bne.n	8004a36 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x32>
 8004a32:	2301      	movs	r3, #1
 8004a34:	e000      	b.n	8004a38 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x34>
 8004a36:	2303      	movs	r3, #3
 8004a38:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    size_t output_ix = 0;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    const int32_t iRedToGray = (int32_t)(0.299f * 65536.0f);
 8004a42:	f644 438b 	movw	r3, #19595	; 0x4c8b
 8004a46:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    const int32_t iGreenToGray = (int32_t)(0.587f * 65536.0f);
 8004a4a:	f249 6345 	movw	r3, #38469	; 0x9645
 8004a4e:	67fb      	str	r3, [r7, #124]	; 0x7c
    const int32_t iBlueToGray = (int32_t)(0.114f * 65536.0f);
 8004a50:	f641 532f 	movw	r3, #7471	; 0x1d2f
 8004a54:	67bb      	str	r3, [r7, #120]	; 0x78

#if defined(EI_DSP_IMAGE_BUFFER_STATIC_SIZE)
    const size_t page_size = EI_DSP_IMAGE_BUFFER_STATIC_SIZE;
#else
    const size_t page_size = 1024;
 8004a56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a5a:	677b      	str	r3, [r7, #116]	; 0x74
#endif

    // buffered read from the signal
    size_t bytes_left = signal->total_length;
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	691b      	ldr	r3, [r3, #16]
 8004a60:	62bb      	str	r3, [r7, #40]	; 0x28
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 8004a62:	2300      	movs	r3, #0
 8004a64:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	691b      	ldr	r3, [r3, #16]
 8004a6c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004a70:	429a      	cmp	r2, r3
 8004a72:	f080 821d 	bcs.w	8004eb0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x4ac>
        size_t elements_to_read = bytes_left > page_size ? page_size : bytes_left;
 8004a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a7c:	d803      	bhi.n	8004a86 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x82>
 8004a7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	e001      	b.n	8004a8a <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x86>
 8004a86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a8a:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(EI_DSP_IMAGE_BUFFER_STATIC_SIZE)
        matrix_t input_matrix(elements_to_read, config.axes, ei_dsp_image_buffer);
#else
        matrix_t input_matrix(elements_to_read, config.axes);
 8004a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a8e:	461a      	mov	r2, r3
 8004a90:	f107 0018 	add.w	r0, r7, #24
 8004a94:	2300      	movs	r3, #0
 8004a96:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8004a98:	f7fc febf 	bl	800181a <_ZN2ei9ei_matrixC1EmmPf>
#endif
        if (!input_matrix.buffer) {
 8004a9c:	69bb      	ldr	r3, [r7, #24]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d102      	bne.n	8004aa8 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0xa4>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8004aa2:	4d8d      	ldr	r5, [pc, #564]	; (8004cd8 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2d4>)
 8004aa4:	2400      	movs	r4, #0
 8004aa6:	e1f5      	b.n	8004e94 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x490>
        }
        signal->get_data(ix, elements_to_read, input_matrix.buffer);
 8004aa8:	6938      	ldr	r0, [r7, #16]
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004aae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004ab2:	f001 fea3 	bl	80067fc <_ZNKSt8functionIFijjPfEEclEjjS0_>

        for (size_t jx = 0; jx < elements_to_read; jx++) {
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004abc:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004ac0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	f080 81e1 	bcs.w	8004e8a <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x486>
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
 8004ac8:	69ba      	ldr	r2, [r7, #24]
 8004aca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	4413      	add	r3, r2
 8004ad2:	edd3 7a00 	vldr	s15, [r3]
 8004ad6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ada:	ee17 3a90 	vmov	r3, s15
 8004ade:	66fb      	str	r3, [r7, #108]	; 0x6c

            if (channel_count == 3) {
 8004ae0:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8004ae4:	2b03      	cmp	r3, #3
 8004ae6:	f040 8105 	bne.w	8004cf4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2f0>
                // fast code path
                if (impulse->tflite_input_scale == 0.003921568859368563f && impulse->tflite_input_zeropoint == -128) {
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004af0:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8004cdc <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2d8>
 8004af4:	eef4 7a47 	vcmp.f32	s15, s14
 8004af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004afc:	d160      	bne.n	8004bc0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x1bc>
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004b04:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8004ce0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2dc>
 8004b08:	eef4 7a47 	vcmp.f32	s15, s14
 8004b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b10:	d156      	bne.n	8004bc0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x1bc>
                    int32_t r = static_cast<int32_t>(pixel >> 16 & 0xff);
 8004b12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b14:	0c1b      	lsrs	r3, r3, #16
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	64fb      	str	r3, [r7, #76]	; 0x4c
                    int32_t g = static_cast<int32_t>(pixel >> 8 & 0xff);
 8004b1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b1c:	0a1b      	lsrs	r3, r3, #8
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	64bb      	str	r3, [r7, #72]	; 0x48
                    int32_t b = static_cast<int32_t>(pixel & 0xff);
 8004b22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	647b      	str	r3, [r7, #68]	; 0x44

                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(r + impulse->tflite_input_zeropoint);
 8004b28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b2a:	ee07 3a90 	vmov	s15, r3
 8004b2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004b38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004b44:	1c59      	adds	r1, r3, #1
 8004b46:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8004b4a:	4413      	add	r3, r2
 8004b4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b50:	edc7 7a00 	vstr	s15, [r7]
 8004b54:	783a      	ldrb	r2, [r7, #0]
 8004b56:	b252      	sxtb	r2, r2
 8004b58:	701a      	strb	r2, [r3, #0]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(g + impulse->tflite_input_zeropoint);
 8004b5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b5c:	ee07 3a90 	vmov	s15, r3
 8004b60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004b6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004b76:	1c59      	adds	r1, r3, #1
 8004b78:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8004b7c:	4413      	add	r3, r2
 8004b7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b82:	edc7 7a00 	vstr	s15, [r7]
 8004b86:	783a      	ldrb	r2, [r7, #0]
 8004b88:	b252      	sxtb	r2, r2
 8004b8a:	701a      	strb	r2, [r3, #0]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(b + impulse->tflite_input_zeropoint);
 8004b8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b8e:	ee07 3a90 	vmov	s15, r3
 8004b92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004b9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004ba8:	1c59      	adds	r1, r3, #1
 8004baa:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8004bae:	4413      	add	r3, r2
 8004bb0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004bb4:	edc7 7a00 	vstr	s15, [r7]
 8004bb8:	783a      	ldrb	r2, [r7, #0]
 8004bba:	b252      	sxtb	r2, r2
 8004bbc:	701a      	strb	r2, [r3, #0]
 8004bbe:	e15e      	b.n	8004e7e <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x47a>
                }
                // slow code path
                else {
                    float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
 8004bc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bc2:	0c1b      	lsrs	r3, r3, #16
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	ee07 3a90 	vmov	s15, r3
 8004bca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004bce:	eddf 6a45 	vldr	s13, [pc, #276]	; 8004ce4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e0>
 8004bd2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004bd6:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
                    float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
 8004bda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bdc:	0a1b      	lsrs	r3, r3, #8
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	ee07 3a90 	vmov	s15, r3
 8004be4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004be8:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8004ce4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e0>
 8004bec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004bf0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
                    float b = static_cast<float>(pixel & 0xff) / 255.0f;
 8004bf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	ee07 3a90 	vmov	s15, r3
 8004bfc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004c00:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004ce4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e0>
 8004c04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004c08:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(r / impulse->tflite_input_scale) + impulse->tflite_input_zeropoint);
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004c12:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004c16:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004c1a:	eeb0 0a66 	vmov.f32	s0, s13
 8004c1e:	f7fc feb4 	bl	800198a <_ZSt5roundf>
 8004c22:	eeb0 7a40 	vmov.f32	s14, s0
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004c2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004c38:	1c59      	adds	r1, r3, #1
 8004c3a:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8004c3e:	4413      	add	r3, r2
 8004c40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c44:	edc7 7a00 	vstr	s15, [r7]
 8004c48:	783a      	ldrb	r2, [r7, #0]
 8004c4a:	b252      	sxtb	r2, r2
 8004c4c:	701a      	strb	r2, [r3, #0]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(g / impulse->tflite_input_scale) + impulse->tflite_input_zeropoint);
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004c54:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8004c58:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004c5c:	eeb0 0a66 	vmov.f32	s0, s13
 8004c60:	f7fc fe93 	bl	800198a <_ZSt5roundf>
 8004c64:	eeb0 7a40 	vmov.f32	s14, s0
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004c6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004c7a:	1c59      	adds	r1, r3, #1
 8004c7c:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8004c80:	4413      	add	r3, r2
 8004c82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c86:	edc7 7a00 	vstr	s15, [r7]
 8004c8a:	783a      	ldrb	r2, [r7, #0]
 8004c8c:	b252      	sxtb	r2, r2
 8004c8e:	701a      	strb	r2, [r3, #0]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(b / impulse->tflite_input_scale) + impulse->tflite_input_zeropoint);
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004c96:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004c9a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004c9e:	eeb0 0a66 	vmov.f32	s0, s13
 8004ca2:	f7fc fe72 	bl	800198a <_ZSt5roundf>
 8004ca6:	eeb0 7a40 	vmov.f32	s14, s0
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004cb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004cbc:	1c59      	adds	r1, r3, #1
 8004cbe:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8004cc2:	4413      	add	r3, r2
 8004cc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004cc8:	edc7 7a00 	vstr	s15, [r7]
 8004ccc:	783a      	ldrb	r2, [r7, #0]
 8004cce:	b252      	sxtb	r2, r2
 8004cd0:	701a      	strb	r2, [r3, #0]
 8004cd2:	e0d4      	b.n	8004e7e <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x47a>
 8004cd4:	08027c94 	.word	0x08027c94
 8004cd8:	fffffc16 	.word	0xfffffc16
 8004cdc:	3b808081 	.word	0x3b808081
 8004ce0:	c3000000 	.word	0xc3000000
 8004ce4:	437f0000 	.word	0x437f0000
 8004ce8:	3e991687 	.word	0x3e991687
 8004cec:	3f1645a2 	.word	0x3f1645a2
 8004cf0:	3de978d5 	.word	0x3de978d5
                }
            }
            else {
                // fast code path
                if (impulse->tflite_input_scale == 0.003921568859368563f && impulse->tflite_input_zeropoint == -128) {
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004cfa:	ed1f 7a08 	vldr	s14, [pc, #-32]	; 8004cdc <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2d8>
 8004cfe:	eef4 7a47 	vcmp.f32	s15, s14
 8004d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d06:	d15b      	bne.n	8004dc0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x3bc>
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004d0e:	ed1f 7a0c 	vldr	s14, [pc, #-48]	; 8004ce0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2dc>
 8004d12:	eef4 7a47 	vcmp.f32	s15, s14
 8004d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d1a:	d151      	bne.n	8004dc0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x3bc>
                    int32_t r = static_cast<int32_t>(pixel >> 16 & 0xff);
 8004d1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d1e:	0c1b      	lsrs	r3, r3, #16
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	66bb      	str	r3, [r7, #104]	; 0x68
                    int32_t g = static_cast<int32_t>(pixel >> 8 & 0xff);
 8004d24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d26:	0a1b      	lsrs	r3, r3, #8
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	667b      	str	r3, [r7, #100]	; 0x64
                    int32_t b = static_cast<int32_t>(pixel & 0xff);
 8004d2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	663b      	str	r3, [r7, #96]	; 0x60

                    // ITU-R 601-2 luma transform
                    // see: https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.convert
                    int32_t gray = (iRedToGray * r) + (iGreenToGray * g) + (iBlueToGray * b);
 8004d32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d34:	f644 428b 	movw	r2, #19595	; 0x4c8b
 8004d38:	fb03 f202 	mul.w	r2, r3, r2
 8004d3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d3e:	f249 6145 	movw	r1, #38469	; 0x9645
 8004d42:	fb01 f303 	mul.w	r3, r1, r3
 8004d46:	441a      	add	r2, r3
 8004d48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d4a:	f641 512f 	movw	r1, #7471	; 0x1d2f
 8004d4e:	fb01 f303 	mul.w	r3, r1, r3
 8004d52:	4413      	add	r3, r2
 8004d54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                    gray >>= 16; // scale down to int8_t
 8004d58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d5c:	141b      	asrs	r3, r3, #16
 8004d5e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                    gray += impulse->tflite_input_zeropoint;
 8004d62:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d66:	ee07 3a90 	vmov	s15, r3
 8004d6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004d74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d7c:	ee17 3a90 	vmov	r3, s15
 8004d80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                    if (gray < - 128) gray = -128;
 8004d84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d88:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8004d8c:	da04      	bge.n	8004d98 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x394>
 8004d8e:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8004d92:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004d96:	e006      	b.n	8004da6 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x3a2>
                    else if (gray > 127) gray = 127;
 8004d98:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d9c:	2b7f      	cmp	r3, #127	; 0x7f
 8004d9e:	dd02      	ble.n	8004da6 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x3a2>
 8004da0:	237f      	movs	r3, #127	; 0x7f
 8004da2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(gray);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004dae:	1c59      	adds	r1, r3, #1
 8004db0:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8004db4:	4413      	add	r3, r2
 8004db6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004dba:	b252      	sxtb	r2, r2
 8004dbc:	701a      	strb	r2, [r3, #0]
 8004dbe:	e05e      	b.n	8004e7e <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x47a>
                }
                // slow code path
                else {
                    float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
 8004dc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dc2:	0c1b      	lsrs	r3, r3, #16
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	ee07 3a90 	vmov	s15, r3
 8004dca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004dce:	ed5f 6a3b 	vldr	s13, [pc, #-236]	; 8004ce4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e0>
 8004dd2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004dd6:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
                    float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
 8004dda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ddc:	0a1b      	lsrs	r3, r3, #8
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	ee07 3a90 	vmov	s15, r3
 8004de4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004de8:	ed5f 6a42 	vldr	s13, [pc, #-264]	; 8004ce4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e0>
 8004dec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004df0:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
                    float b = static_cast<float>(pixel & 0xff) / 255.0f;
 8004df4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	ee07 3a90 	vmov	s15, r3
 8004dfc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004e00:	ed5f 6a48 	vldr	s13, [pc, #-288]	; 8004ce4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e0>
 8004e04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004e08:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

                    // ITU-R 601-2 luma transform
                    // see: https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.convert
                    float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
 8004e0c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8004e10:	ed1f 7a4b 	vldr	s14, [pc, #-300]	; 8004ce8 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e4>
 8004e14:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004e18:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8004e1c:	ed5f 6a4d 	vldr	s13, [pc, #-308]	; 8004cec <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e8>
 8004e20:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004e24:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004e28:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8004e2c:	ed5f 6a50 	vldr	s13, [pc, #-320]	; 8004cf0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2ec>
 8004e30:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004e34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e38:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(v / impulse->tflite_input_scale) + impulse->tflite_input_zeropoint);
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004e42:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004e46:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004e4a:	eeb0 0a66 	vmov.f32	s0, s13
 8004e4e:	f7fc fd9c 	bl	800198a <_ZSt5roundf>
 8004e52:	eeb0 7a40 	vmov.f32	s14, s0
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004e5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004e68:	1c59      	adds	r1, r3, #1
 8004e6a:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8004e6e:	4413      	add	r3, r2
 8004e70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e74:	edc7 7a00 	vstr	s15, [r7]
 8004e78:	783a      	ldrb	r2, [r7, #0]
 8004e7a:	b252      	sxtb	r2, r2
 8004e7c:	701a      	strb	r2, [r3, #0]
        for (size_t jx = 0; jx < elements_to_read; jx++) {
 8004e7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e82:	3301      	adds	r3, #1
 8004e84:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004e88:	e618      	b.n	8004abc <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0xb8>
                }
            }
        }

        bytes_left -= elements_to_read;
 8004e8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e92:	2401      	movs	r4, #1
 8004e94:	f107 0318 	add.w	r3, r7, #24
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f7fc fce9 	bl	8001870 <_ZN2ei9ei_matrixD1Ev>
 8004e9e:	2c01      	cmp	r4, #1
 8004ea0:	d107      	bne.n	8004eb2 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x4ae>
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 8004ea2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004ea6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004eaa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004eae:	e5db      	b.n	8004a68 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x64>
    }

    return EIDSP_OK;
 8004eb0:	2500      	movs	r5, #0
}
 8004eb2:	462b      	mov	r3, r5
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3798      	adds	r7, #152	; 0x98
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bdb0      	pop	{r4, r5, r7, pc}

08004ebc <_ZN14SignalWithAxesC1EPN2ei11ei_signal_tEPhjPK10ei_impulse>:

using namespace ei;

class SignalWithAxes {
public:
    SignalWithAxes(signal_t *original_signal, uint8_t *axes, size_t axes_count, const ei_impulse_t *impulse):
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b084      	sub	sp, #16
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	607a      	str	r2, [r7, #4]
 8004ec8:	603b      	str	r3, [r7, #0]
        _original_signal(original_signal), _axes(axes), _axes_count(axes_count), _impulse(impulse)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	68ba      	ldr	r2, [r7, #8]
 8004ece:	601a      	str	r2, [r3, #0]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	605a      	str	r2, [r3, #4]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	683a      	ldr	r2, [r7, #0]
 8004eda:	609a      	str	r2, [r3, #8]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	69ba      	ldr	r2, [r7, #24]
 8004ee0:	60da      	str	r2, [r3, #12]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	3310      	adds	r3, #16
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f7ff fc2f 	bl	800474a <_ZN2ei11ei_signal_tC1Ev>
    {

    }
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3710      	adds	r7, #16
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}

08004ef6 <_ZZN14SignalWithAxes10get_signalEvENKUljjPfE_clEjjS0_>:

        wrapped_signal.total_length = _original_signal->total_length / _impulse->raw_samples_per_frame * _axes_count;
#ifdef __MBED__
        wrapped_signal.get_data = mbed::callback(this, &SignalWithAxes::get_data);
#else
        wrapped_signal.get_data = [this](size_t offset, size_t length, float *out_ptr) {
 8004ef6:	b580      	push	{r7, lr}
 8004ef8:	b084      	sub	sp, #16
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	60f8      	str	r0, [r7, #12]
 8004efe:	60b9      	str	r1, [r7, #8]
 8004f00:	607a      	str	r2, [r7, #4]
 8004f02:	603b      	str	r3, [r7, #0]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6818      	ldr	r0, [r3, #0]
            return this->get_data(offset, length, out_ptr);
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	68b9      	ldr	r1, [r7, #8]
 8004f0e:	f000 f832 	bl	8004f76 <_ZN14SignalWithAxes8get_dataEjjPf>
 8004f12:	4603      	mov	r3, r0
        };
 8004f14:	4618      	mov	r0, r3
 8004f16:	3710      	adds	r7, #16
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <_ZN14SignalWithAxes10get_signalEv>:
    signal_t * get_signal() {
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
        if (this->_axes_count == _impulse->raw_samples_per_frame) {
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	689a      	ldr	r2, [r3, #8]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	699b      	ldr	r3, [r3, #24]
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d102      	bne.n	8004f38 <_ZN14SignalWithAxes10get_signalEv+0x1c>
            return this->_original_signal;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	e01a      	b.n	8004f6e <_ZN14SignalWithAxes10get_signalEv+0x52>
        wrapped_signal.total_length = _original_signal->total_length / _impulse->raw_samples_per_frame * _axes_count;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	691a      	ldr	r2, [r3, #16]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	699b      	ldr	r3, [r3, #24]
 8004f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	6892      	ldr	r2, [r2, #8]
 8004f4c:	fb03 f202 	mul.w	r2, r3, r2
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	621a      	str	r2, [r3, #32]
        };
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f103 0210 	add.w	r2, r3, #16
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	60fb      	str	r3, [r7, #12]
 8004f5e:	f107 030c 	add.w	r3, r7, #12
 8004f62:	4619      	mov	r1, r3
 8004f64:	4610      	mov	r0, r2
 8004f66:	f001 fd6c 	bl	8006a42 <_ZNSt8functionIFijjPfEEaSIZN14SignalWithAxes10get_signalEvEUljjS0_E_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JjjS0_EEEE5valueERS2_E4typeEOS9_>
#endif
        return &wrapped_signal;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	3310      	adds	r3, #16
    }
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3710      	adds	r7, #16
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}

08004f76 <_ZN14SignalWithAxes8get_dataEjjPf>:

    int get_data(size_t offset, size_t length, float *out_ptr) {
 8004f76:	b580      	push	{r7, lr}
 8004f78:	b08a      	sub	sp, #40	; 0x28
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	60f8      	str	r0, [r7, #12]
 8004f7e:	60b9      	str	r1, [r7, #8]
 8004f80:	607a      	str	r2, [r7, #4]
 8004f82:	603b      	str	r3, [r7, #0]
        size_t offset_on_original_signal = offset / _axes_count * _impulse->raw_samples_per_frame;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	68ba      	ldr	r2, [r7, #8]
 8004f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f8e:	68fa      	ldr	r2, [r7, #12]
 8004f90:	68d2      	ldr	r2, [r2, #12]
 8004f92:	6992      	ldr	r2, [r2, #24]
 8004f94:	fb02 f303 	mul.w	r3, r2, r3
 8004f98:	61bb      	str	r3, [r7, #24]
        size_t length_on_original_signal = length / _axes_count * _impulse->raw_samples_per_frame;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fa4:	68fa      	ldr	r2, [r7, #12]
 8004fa6:	68d2      	ldr	r2, [r2, #12]
 8004fa8:	6992      	ldr	r2, [r2, #24]
 8004faa:	fb02 f303 	mul.w	r3, r2, r3
 8004fae:	617b      	str	r3, [r7, #20]

        size_t out_ptr_ix = 0;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	627b      	str	r3, [r7, #36]	; 0x24

        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += _impulse->raw_samples_per_frame) {
 8004fb4:	69bb      	ldr	r3, [r7, #24]
 8004fb6:	623b      	str	r3, [r7, #32]
 8004fb8:	69ba      	ldr	r2, [r7, #24]
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	4413      	add	r3, r2
 8004fbe:	6a3a      	ldr	r2, [r7, #32]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d22b      	bcs.n	800501c <_ZN14SignalWithAxes8get_dataEjjPf+0xa6>
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	61fb      	str	r3, [r7, #28]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	69fa      	ldr	r2, [r7, #28]
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d21d      	bcs.n	800500e <_ZN14SignalWithAxes8get_dataEjjPf+0x98>
                int r = _original_signal->get_data(ix + _axes[axis_ix], 1, &out_ptr[out_ptr_ix++]);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	685a      	ldr	r2, [r3, #4]
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	4413      	add	r3, r2
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	6a3b      	ldr	r3, [r7, #32]
 8004fe6:	18d1      	adds	r1, r2, r3
 8004fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fea:	1c5a      	adds	r2, r3, #1
 8004fec:	627a      	str	r2, [r7, #36]	; 0x24
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	683a      	ldr	r2, [r7, #0]
 8004ff2:	4413      	add	r3, r2
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	f001 fc01 	bl	80067fc <_ZNKSt8functionIFijjPfEEclEjjS0_>
 8004ffa:	6138      	str	r0, [r7, #16]
                if (r != 0) {
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d001      	beq.n	8005006 <_ZN14SignalWithAxes8get_dataEjjPf+0x90>
                    return r;
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	e00b      	b.n	800501e <_ZN14SignalWithAxes8get_dataEjjPf+0xa8>
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	3301      	adds	r3, #1
 800500a:	61fb      	str	r3, [r7, #28]
 800500c:	e7dc      	b.n	8004fc8 <_ZN14SignalWithAxes8get_dataEjjPf+0x52>
        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += _impulse->raw_samples_per_frame) {
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	699b      	ldr	r3, [r3, #24]
 8005014:	6a3a      	ldr	r2, [r7, #32]
 8005016:	4413      	add	r3, r2
 8005018:	623b      	str	r3, [r7, #32]
 800501a:	e7cd      	b.n	8004fb8 <_ZN14SignalWithAxes8get_dataEjjPf+0x42>
                }
            }
        }

        return 0;
 800501c:	2300      	movs	r3, #0
    }
 800501e:	4618      	mov	r0, r3
 8005020:	3728      	adds	r7, #40	; 0x28
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}

08005026 <_ZN12_GLOBAL__N_115standard_scalerEPfPKfS2_j>:
 * @param input Array of input values
 * @param scale Array of scale values (obtain from StandardScaler in Python)
 * @param mean Array of mean values (obtain from StandardScaler in Python)
 * @param input_size Size of input, scale and mean arrays
 */
void standard_scaler(float *input, const float *scale, const float *mean, size_t input_size) {
 8005026:	b480      	push	{r7}
 8005028:	b087      	sub	sp, #28
 800502a:	af00      	add	r7, sp, #0
 800502c:	60f8      	str	r0, [r7, #12]
 800502e:	60b9      	str	r1, [r7, #8]
 8005030:	607a      	str	r2, [r7, #4]
 8005032:	603b      	str	r3, [r7, #0]
    for (size_t ix = 0; ix < input_size; ix++) {
 8005034:	2300      	movs	r3, #0
 8005036:	617b      	str	r3, [r7, #20]
 8005038:	697a      	ldr	r2, [r7, #20]
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	429a      	cmp	r2, r3
 800503e:	d21f      	bcs.n	8005080 <_ZN12_GLOBAL__N_115standard_scalerEPfPKfS2_j+0x5a>
        input[ix] = (input[ix] - mean[ix]) / scale[ix];
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	4413      	add	r3, r2
 8005048:	ed93 7a00 	vldr	s14, [r3]
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	4413      	add	r3, r2
 8005054:	edd3 7a00 	vldr	s15, [r3]
 8005058:	ee77 6a67 	vsub.f32	s13, s14, s15
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	68ba      	ldr	r2, [r7, #8]
 8005062:	4413      	add	r3, r2
 8005064:	ed93 7a00 	vldr	s14, [r3]
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	68fa      	ldr	r2, [r7, #12]
 800506e:	4413      	add	r3, r2
 8005070:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005074:	edc3 7a00 	vstr	s15, [r3]
    for (size_t ix = 0; ix < input_size; ix++) {
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	3301      	adds	r3, #1
 800507c:	617b      	str	r3, [r7, #20]
 800507e:	e7db      	b.n	8005038 <_ZN12_GLOBAL__N_115standard_scalerEPfPKfS2_j+0x12>
    }
}
 8005080:	bf00      	nop
 8005082:	371c      	adds	r7, #28
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr

0800508c <_ZN12_GLOBAL__N_126calculate_cluster_distanceEPfjPK28ei_classifier_anom_cluster_t>:
 * Calculate the distance between input vector and the cluster
 * @param input Array of input values (already scaled by standard_scaler)
 * @param input_size Size of the input array
 * @param cluster A cluster (number of centroids should match input_size)
 */
float calculate_cluster_distance(float *input, size_t input_size, const ei_classifier_anom_cluster_t *cluster) {
 800508c:	b5b0      	push	{r4, r5, r7, lr}
 800508e:	b086      	sub	sp, #24
 8005090:	af00      	add	r7, sp, #0
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	60b9      	str	r1, [r7, #8]
 8005096:	607a      	str	r2, [r7, #4]
    // todo: check input_size and centroid size?

    float dist = 0.0f;
 8005098:	f04f 0300 	mov.w	r3, #0
 800509c:	617b      	str	r3, [r7, #20]
    for (size_t ix = 0; ix < input_size; ix++) {
 800509e:	2300      	movs	r3, #0
 80050a0:	613b      	str	r3, [r7, #16]
 80050a2:	693a      	ldr	r2, [r7, #16]
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d229      	bcs.n	80050fe <_ZN12_GLOBAL__N_126calculate_cluster_distanceEPfjPK28ei_classifier_anom_cluster_t+0x72>
        dist += pow(input[ix] - cluster->centroid[ix], 2);
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	68fa      	ldr	r2, [r7, #12]
 80050b0:	4413      	add	r3, r2
 80050b2:	ed93 7a00 	vldr	s14, [r3]
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	4413      	add	r3, r2
 80050be:	edd3 7a00 	vldr	s15, [r3]
 80050c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80050c6:	2002      	movs	r0, #2
 80050c8:	eeb0 0a67 	vmov.f32	s0, s15
 80050cc:	f001 fb01 	bl	80066d2 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80050d0:	ec55 4b10 	vmov	r4, r5, d0
 80050d4:	6978      	ldr	r0, [r7, #20]
 80050d6:	f7fb fa41 	bl	800055c <__aeabi_f2d>
 80050da:	4602      	mov	r2, r0
 80050dc:	460b      	mov	r3, r1
 80050de:	4620      	mov	r0, r4
 80050e0:	4629      	mov	r1, r5
 80050e2:	f7fb f8dd 	bl	80002a0 <__adddf3>
 80050e6:	4602      	mov	r2, r0
 80050e8:	460b      	mov	r3, r1
 80050ea:	4610      	mov	r0, r2
 80050ec:	4619      	mov	r1, r3
 80050ee:	f7fb fd85 	bl	8000bfc <__aeabi_d2f>
 80050f2:	4603      	mov	r3, r0
 80050f4:	617b      	str	r3, [r7, #20]
    for (size_t ix = 0; ix < input_size; ix++) {
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	3301      	adds	r3, #1
 80050fa:	613b      	str	r3, [r7, #16]
 80050fc:	e7d1      	b.n	80050a2 <_ZN12_GLOBAL__N_126calculate_cluster_distanceEPfjPK28ei_classifier_anom_cluster_t+0x16>
    }
    return sqrt(dist) - cluster->max_error;
 80050fe:	ed97 0a05 	vldr	s0, [r7, #20]
 8005102:	f7fc fc32 	bl	800196a <_ZSt4sqrtf>
 8005106:	eeb0 7a40 	vmov.f32	s14, s0
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	edd3 7a03 	vldr	s15, [r3, #12]
 8005110:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8005114:	eeb0 0a67 	vmov.f32	s0, s15
 8005118:	3718      	adds	r7, #24
 800511a:	46bd      	mov	sp, r7
 800511c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005120 <_ZN12_GLOBAL__N_127get_min_distance_to_clusterEPfjPK28ei_classifier_anom_cluster_tj>:
 * @param input Array of input values (already scaled by standard_scaler)
 * @param input_size Size of the input array
 * @param clusters Array of clusters
 * @param cluster_size Size of cluster array
 */
float get_min_distance_to_cluster(float *input, size_t input_size, const ei_classifier_anom_cluster_t *clusters, size_t cluster_size) {
 8005120:	b580      	push	{r7, lr}
 8005122:	b088      	sub	sp, #32
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	607a      	str	r2, [r7, #4]
 800512c:	603b      	str	r3, [r7, #0]
    float min = 1000.0f;
 800512e:	4b15      	ldr	r3, [pc, #84]	; (8005184 <_ZN12_GLOBAL__N_127get_min_distance_to_clusterEPfjPK28ei_classifier_anom_cluster_tj+0x64>)
 8005130:	61fb      	str	r3, [r7, #28]
    for (size_t ix = 0; ix < cluster_size; ix++) {
 8005132:	2300      	movs	r3, #0
 8005134:	61bb      	str	r3, [r7, #24]
 8005136:	69ba      	ldr	r2, [r7, #24]
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	429a      	cmp	r2, r3
 800513c:	d219      	bcs.n	8005172 <_ZN12_GLOBAL__N_127get_min_distance_to_clusterEPfjPK28ei_classifier_anom_cluster_tj+0x52>
        float dist = calculate_cluster_distance(input, input_size, &clusters[ix]);
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	011b      	lsls	r3, r3, #4
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	4413      	add	r3, r2
 8005146:	461a      	mov	r2, r3
 8005148:	68b9      	ldr	r1, [r7, #8]
 800514a:	68f8      	ldr	r0, [r7, #12]
 800514c:	f7ff ff9e 	bl	800508c <_ZN12_GLOBAL__N_126calculate_cluster_distanceEPfjPK28ei_classifier_anom_cluster_t>
 8005150:	ed87 0a05 	vstr	s0, [r7, #20]
        if (dist < min) {
 8005154:	ed97 7a05 	vldr	s14, [r7, #20]
 8005158:	edd7 7a07 	vldr	s15, [r7, #28]
 800515c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005164:	d501      	bpl.n	800516a <_ZN12_GLOBAL__N_127get_min_distance_to_clusterEPfjPK28ei_classifier_anom_cluster_tj+0x4a>
            min = dist;
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	61fb      	str	r3, [r7, #28]
    for (size_t ix = 0; ix < cluster_size; ix++) {
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	3301      	adds	r3, #1
 800516e:	61bb      	str	r3, [r7, #24]
 8005170:	e7e1      	b.n	8005136 <_ZN12_GLOBAL__N_127get_min_distance_to_clusterEPfjPK28ei_classifier_anom_cluster_tj+0x16>
        }
    }
    return min;
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	ee07 3a90 	vmov	s15, r3
}
 8005178:	eeb0 0a67 	vmov.f32	s0, s15
 800517c:	3720      	adds	r7, #32
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	447a0000 	.word	0x447a0000

08005188 <_Z24inference_anomaly_invokePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb>:

EI_IMPULSE_ERROR inference_anomaly_invoke(const ei_impulse_t *impulse,
                                          ei::matrix_t *fmatrix,
                                          ei_impulse_result_t *result,
                                          bool debug = false)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b090      	sub	sp, #64	; 0x40
 800518c:	af00      	add	r7, sp, #0
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	60b9      	str	r1, [r7, #8]
 8005192:	607a      	str	r2, [r7, #4]
 8005194:	70fb      	strb	r3, [r7, #3]

    uint64_t anomaly_start_ms = ei_read_timer_ms();
 8005196:	f015 fc07 	bl	801a9a8 <_Z16ei_read_timer_msv>
 800519a:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

    float input[EI_CLASSIFIER_ANOM_AXIS_SIZE];
    for (size_t ix = 0; ix < EI_CLASSIFIER_ANOM_AXIS_SIZE; ix++) {
 800519e:	2300      	movs	r3, #0
 80051a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051a4:	2b02      	cmp	r3, #2
 80051a6:	d812      	bhi.n	80051ce <_Z24inference_anomaly_invokePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x46>
        input[ix] = fmatrix->buffer[EI_CLASSIFIER_ANOM_AXIS[ix]];
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	4922      	ldr	r1, [pc, #136]	; (8005238 <_Z24inference_anomaly_invokePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0xb0>)
 80051ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051b0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	4413      	add	r3, r2
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	3340      	adds	r3, #64	; 0x40
 80051c0:	443b      	add	r3, r7
 80051c2:	3b2c      	subs	r3, #44	; 0x2c
 80051c4:	601a      	str	r2, [r3, #0]
    for (size_t ix = 0; ix < EI_CLASSIFIER_ANOM_AXIS_SIZE; ix++) {
 80051c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051c8:	3301      	adds	r3, #1
 80051ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051cc:	e7e9      	b.n	80051a2 <_Z24inference_anomaly_invokePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1a>
    }
    standard_scaler(input, ei_classifier_anom_scale, ei_classifier_anom_mean, EI_CLASSIFIER_ANOM_AXIS_SIZE);
 80051ce:	f107 0014 	add.w	r0, r7, #20
 80051d2:	2303      	movs	r3, #3
 80051d4:	4a19      	ldr	r2, [pc, #100]	; (800523c <_Z24inference_anomaly_invokePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0xb4>)
 80051d6:	491a      	ldr	r1, [pc, #104]	; (8005240 <_Z24inference_anomaly_invokePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0xb8>)
 80051d8:	f7ff ff25 	bl	8005026 <_ZN12_GLOBAL__N_115standard_scalerEPfPKfS2_j>
    float anomaly = get_min_distance_to_cluster(
 80051dc:	f107 0014 	add.w	r0, r7, #20
 80051e0:	2320      	movs	r3, #32
 80051e2:	4a18      	ldr	r2, [pc, #96]	; (8005244 <_Z24inference_anomaly_invokePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0xbc>)
 80051e4:	2103      	movs	r1, #3
 80051e6:	f7ff ff9b 	bl	8005120 <_ZN12_GLOBAL__N_127get_min_distance_to_clusterEPfjPK28ei_classifier_anom_cluster_tj>
 80051ea:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
        input, EI_CLASSIFIER_ANOM_AXIS_SIZE, ei_classifier_anom_clusters, EI_CLASSIFIER_ANOM_CLUSTER_COUNT);

    uint64_t anomaly_end_ms = ei_read_timer_ms();
 80051ee:	f015 fbdb 	bl	801a9a8 <_Z16ei_read_timer_msv>
 80051f2:	e9c7 0108 	strd	r0, r1, [r7, #32]

    if (debug) {
 80051f6:	78fb      	ldrb	r3, [r7, #3]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d00d      	beq.n	8005218 <_Z24inference_anomaly_invokePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x90>
        ei_printf("Anomaly score (time: %d ms.): ", static_cast<int>(anomaly_end_ms - anomaly_start_ms));
 80051fc:	6a3a      	ldr	r2, [r7, #32]
 80051fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	4619      	mov	r1, r3
 8005204:	4810      	ldr	r0, [pc, #64]	; (8005248 <_Z24inference_anomaly_invokePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0xc0>)
 8005206:	f000 ff39 	bl	800607c <_Z9ei_printfPKcz>
        ei_printf_float(anomaly);
 800520a:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 800520e:	f015 fbeb 	bl	801a9e8 <_Z15ei_printf_floatf>
        ei_printf("\n");
 8005212:	480e      	ldr	r0, [pc, #56]	; (800524c <_Z24inference_anomaly_invokePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0xc4>)
 8005214:	f000 ff32 	bl	800607c <_Z9ei_printfPKcz>
    }

    result->timing.anomaly = anomaly_end_ms - anomaly_start_ms;
 8005218:	6a3a      	ldr	r2, [r7, #32]
 800521a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	461a      	mov	r2, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4

    result->anomaly = anomaly;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800522a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

    return EI_IMPULSE_OK;
 800522e:	2300      	movs	r3, #0
}
 8005230:	4618      	mov	r0, r3
 8005232:	3740      	adds	r7, #64	; 0x40
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}
 8005238:	080294a0 	.word	0x080294a0
 800523c:	080294b4 	.word	0x080294b4
 8005240:	080294a8 	.word	0x080294a8
 8005244:	080294c0 	.word	0x080294c0
 8005248:	08027ca0 	.word	0x08027ca0
 800524c:	08027cc0 	.word	0x08027cc0

08005250 <_ZL27fill_result_struct_f32_fomoPK10ei_impulseP19ei_impulse_result_tPfii>:

__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32_fomo(const ei_impulse_t *impulse,
                                                                            ei_impulse_result_t *result,
                                                                            float *data,
                                                                            int out_width,
                                                                            int out_height) {
 8005250:	b480      	push	{r7}
 8005252:	b085      	sub	sp, #20
 8005254:	af00      	add	r7, sp, #0
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	607a      	str	r2, [r7, #4]
 800525c:	603b      	str	r3, [r7, #0]

    fill_result_struct_from_cubes(result, &cubes, out_width_factor, impulse->object_detection_count);

    return EI_IMPULSE_OK;
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 800525e:	f06f 0314 	mvn.w	r3, #20
#endif
}
 8005262:	4618      	mov	r0, r3
 8005264:	3714      	adds	r7, #20
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr

0800526e <_ZL26fill_result_struct_i8_fomoPK10ei_impulseP19ei_impulse_result_tPaffii>:
                                                                           ei_impulse_result_t *result,
                                                                           int8_t *data,
                                                                           float zero_point,
                                                                           float scale,
                                                                           int out_width,
                                                                           int out_height) {
 800526e:	b480      	push	{r7}
 8005270:	b087      	sub	sp, #28
 8005272:	af00      	add	r7, sp, #0
 8005274:	6178      	str	r0, [r7, #20]
 8005276:	6139      	str	r1, [r7, #16]
 8005278:	60fa      	str	r2, [r7, #12]
 800527a:	ed87 0a02 	vstr	s0, [r7, #8]
 800527e:	edc7 0a01 	vstr	s1, [r7, #4]
 8005282:	603b      	str	r3, [r7, #0]

    fill_result_struct_from_cubes(result, &cubes, out_width_factor, impulse->object_detection_count);

    return EI_IMPULSE_OK;
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 8005284:	f06f 0314 	mvn.w	r3, #20
#endif
}
 8005288:	4618      	mov	r0, r3
 800528a:	371c      	adds	r7, #28
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_i8(const ei_impulse_t *impulse,
                                                                      ei_impulse_result_t *result,
                                                                      int8_t *data,
                                                                      float zero_point,
                                                                      float scale,
                                                                      bool debug) {
 8005294:	b580      	push	{r7, lr}
 8005296:	b088      	sub	sp, #32
 8005298:	af00      	add	r7, sp, #0
 800529a:	6178      	str	r0, [r7, #20]
 800529c:	6139      	str	r1, [r7, #16]
 800529e:	60fa      	str	r2, [r7, #12]
 80052a0:	ed87 0a02 	vstr	s0, [r7, #8]
 80052a4:	edc7 0a01 	vstr	s1, [r7, #4]
 80052a8:	70fb      	strb	r3, [r7, #3]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 80052aa:	2300      	movs	r3, #0
 80052ac:	61fb      	str	r3, [r7, #28]
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80052b2:	461a      	mov	r2, r3
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d23f      	bcs.n	800533a <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0xa6>
        float value = static_cast<float>(data[ix] - zero_point) * scale;
 80052ba:	68fa      	ldr	r2, [r7, #12]
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	4413      	add	r3, r2
 80052c0:	f993 3000 	ldrsb.w	r3, [r3]
 80052c4:	ee07 3a90 	vmov	s15, r3
 80052c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80052cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80052d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80052d4:	ed97 7a01 	vldr	s14, [r7, #4]
 80052d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052dc:	edc7 7a06 	vstr	s15, [r7, #24]

        if (debug) {
 80052e0:	78fb      	ldrb	r3, [r7, #3]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d011      	beq.n	800530a <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0x76>
            ei_printf("%s:\t", impulse->categories[ix]);
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	4413      	add	r3, r2
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4619      	mov	r1, r3
 80052f6:	4813      	ldr	r0, [pc, #76]	; (8005344 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0xb0>)
 80052f8:	f000 fec0 	bl	800607c <_Z9ei_printfPKcz>
            ei_printf_float(value);
 80052fc:	ed97 0a06 	vldr	s0, [r7, #24]
 8005300:	f015 fb72 	bl	801a9e8 <_Z15ei_printf_floatf>
            ei_printf("\n");
 8005304:	4810      	ldr	r0, [pc, #64]	; (8005348 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0xb4>)
 8005306:	f000 feb9 	bl	800607c <_Z9ei_printfPKcz>
        }
        result->classification[ix].label = impulse->categories[ix];
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8005310:	69fb      	ldr	r3, [r7, #28]
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	4413      	add	r3, r2
 8005316:	6819      	ldr	r1, [r3, #0]
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	69fa      	ldr	r2, [r7, #28]
 800531c:	3201      	adds	r2, #1
 800531e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
        result->classification[ix].value = value;
 8005322:	693a      	ldr	r2, [r7, #16]
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	3301      	adds	r3, #1
 8005328:	00db      	lsls	r3, r3, #3
 800532a:	4413      	add	r3, r2
 800532c:	3304      	adds	r3, #4
 800532e:	69ba      	ldr	r2, [r7, #24]
 8005330:	601a      	str	r2, [r3, #0]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	3301      	adds	r3, #1
 8005336:	61fb      	str	r3, [r7, #28]
 8005338:	e7b9      	b.n	80052ae <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0x1a>
    }

    return EI_IMPULSE_OK;
 800533a:	2300      	movs	r3, #0
}
 800533c:	4618      	mov	r0, r3
 800533e:	3720      	adds	r7, #32
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}
 8005344:	08027cc4 	.word	0x08027cc4
 8005348:	08027cc0 	.word	0x08027cc0

0800534c <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb>:
 * Fill the result structure from an unquantized output tensor
 */
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32(const ei_impulse_t *impulse,
                                                                       ei_impulse_result_t *result,
                                                                       float *data,
                                                                       bool debug) {
 800534c:	b580      	push	{r7, lr}
 800534e:	b086      	sub	sp, #24
 8005350:	af00      	add	r7, sp, #0
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	60b9      	str	r1, [r7, #8]
 8005356:	607a      	str	r2, [r7, #4]
 8005358:	70fb      	strb	r3, [r7, #3]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 800535a:	2300      	movs	r3, #0
 800535c:	617b      	str	r3, [r7, #20]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8005362:	461a      	mov	r2, r3
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	4293      	cmp	r3, r2
 8005368:	d232      	bcs.n	80053d0 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x84>
        float value = data[ix];
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	4413      	add	r3, r2
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	613b      	str	r3, [r7, #16]

        if (debug) {
 8005376:	78fb      	ldrb	r3, [r7, #3]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d011      	beq.n	80053a0 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x54>
            ei_printf("%s:\t", impulse->categories[ix]);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	009b      	lsls	r3, r3, #2
 8005386:	4413      	add	r3, r2
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4619      	mov	r1, r3
 800538c:	4813      	ldr	r0, [pc, #76]	; (80053dc <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x90>)
 800538e:	f000 fe75 	bl	800607c <_Z9ei_printfPKcz>
            ei_printf_float(value);
 8005392:	ed97 0a04 	vldr	s0, [r7, #16]
 8005396:	f015 fb27 	bl	801a9e8 <_Z15ei_printf_floatf>
            ei_printf("\n");
 800539a:	4811      	ldr	r0, [pc, #68]	; (80053e0 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x94>)
 800539c:	f000 fe6e 	bl	800607c <_Z9ei_printfPKcz>
        }
        result->classification[ix].label = impulse->categories[ix];
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	4413      	add	r3, r2
 80053ac:	6819      	ldr	r1, [r3, #0]
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	697a      	ldr	r2, [r7, #20]
 80053b2:	3201      	adds	r2, #1
 80053b4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
        result->classification[ix].value = value;
 80053b8:	68ba      	ldr	r2, [r7, #8]
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	3301      	adds	r3, #1
 80053be:	00db      	lsls	r3, r3, #3
 80053c0:	4413      	add	r3, r2
 80053c2:	3304      	adds	r3, #4
 80053c4:	693a      	ldr	r2, [r7, #16]
 80053c6:	601a      	str	r2, [r3, #0]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	3301      	adds	r3, #1
 80053cc:	617b      	str	r3, [r7, #20]
 80053ce:	e7c6      	b.n	800535e <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x12>
    }

    return EI_IMPULSE_OK;
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3718      	adds	r7, #24
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	08027cc4 	.word	0x08027cc4
 80053e0:	08027cc0 	.word	0x08027cc0

080053e4 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE>:
 * @return  EI_IMPULSE_OK if successful
 */
static EI_IMPULSE_ERROR inference_tflite_setup(const ei_impulse_t *impulse, uint64_t *ctx_start_us, TfLiteTensor** input, TfLiteTensor** output,
    TfLiteTensor** output_labels,
    TfLiteTensor** output_scores,
    ei_unique_ptr_t& p_tensor_arena) {
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b086      	sub	sp, #24
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	607a      	str	r2, [r7, #4]
 80053f0:	603b      	str	r3, [r7, #0]

    *ctx_start_us = ei_read_timer_us();
 80053f2:	f015 fae6 	bl	801a9c2 <_Z16ei_read_timer_usv>
 80053f6:	4602      	mov	r2, r0
 80053f8:	460b      	mov	r3, r1
 80053fa:	68b9      	ldr	r1, [r7, #8]
 80053fc:	e9c1 2300 	strd	r2, r3, [r1]

    TfLiteStatus init_status = trained_model_init(ei_aligned_calloc);
 8005400:	486e      	ldr	r0, [pc, #440]	; (80055bc <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1d8>)
 8005402:	f01a faa3 	bl	801f94c <_Z18trained_model_initPFPvjjE>
 8005406:	4603      	mov	r3, r0
 8005408:	75fb      	strb	r3, [r7, #23]
    if (init_status != kTfLiteOk) {
 800540a:	7dfb      	ldrb	r3, [r7, #23]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d007      	beq.n	8005420 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x3c>
        ei_printf("Failed to allocate TFLite arena (error code %d)\n", init_status);
 8005410:	7dfb      	ldrb	r3, [r7, #23]
 8005412:	4619      	mov	r1, r3
 8005414:	486a      	ldr	r0, [pc, #424]	; (80055c0 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1dc>)
 8005416:	f000 fe31 	bl	800607c <_Z9ei_printfPKcz>
        return EI_IMPULSE_TFLITE_ARENA_ALLOC_FAILED;
 800541a:	f06f 0305 	mvn.w	r3, #5
 800541e:	e0c8      	b.n	80055b2 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ce>
    }

    static bool tflite_first_run = true;

    *input = impulse->model_input(0);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005426:	2000      	movs	r0, #0
 8005428:	4798      	blx	r3
 800542a:	4602      	mov	r2, r0
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	601a      	str	r2, [r3, #0]
    *output = impulse->model_output(0);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005436:	2000      	movs	r0, #0
 8005438:	4798      	blx	r3
 800543a:	4602      	mov	r2, r0
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	601a      	str	r2, [r3, #0]

    if (impulse->object_detection_last_layer == EI_CLASSIFIER_LAST_LAYER_SSD) {
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
 8005446:	2b01      	cmp	r3, #1
 8005448:	d115      	bne.n	8005476 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x92>
        *output_scores = impulse->model_output(impulse->tflite_output_score_tensor);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005450:	68fa      	ldr	r2, [r7, #12]
 8005452:	f892 204a 	ldrb.w	r2, [r2, #74]	; 0x4a
 8005456:	4610      	mov	r0, r2
 8005458:	4798      	blx	r3
 800545a:	4602      	mov	r2, r0
 800545c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545e:	601a      	str	r2, [r3, #0]
        *output_labels = impulse->model_output(impulse->tflite_output_labels_tensor);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005466:	68fa      	ldr	r2, [r7, #12]
 8005468:	f892 2049 	ldrb.w	r2, [r2, #73]	; 0x49
 800546c:	4610      	mov	r0, r2
 800546e:	4798      	blx	r3
 8005470:	4602      	mov	r2, r0
 8005472:	6a3b      	ldr	r3, [r7, #32]
 8005474:	601a      	str	r2, [r3, #0]
    }

    // Assert that our quantization parameters match the model
    if (tflite_first_run) {
 8005476:	4b53      	ldr	r3, [pc, #332]	; (80055c4 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e0>)
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	2b00      	cmp	r3, #0
 800547c:	f000 8098 	beq.w	80055b0 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1cc>
        assert((*input)->type == impulse->tflite_input_datatype);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	781a      	ldrb	r2, [r3, #0]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800548c:	429a      	cmp	r2, r3
 800548e:	d005      	beq.n	800549c <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0xb8>
 8005490:	4b4d      	ldr	r3, [pc, #308]	; (80055c8 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e4>)
 8005492:	4a4e      	ldr	r2, [pc, #312]	; (80055cc <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 8005494:	2159      	movs	r1, #89	; 0x59
 8005496:	484e      	ldr	r0, [pc, #312]	; (80055d0 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 8005498:	f01d ffd8 	bl	802344c <__assert_func>
        assert((*output)->type == impulse->tflite_output_datatype);
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	781a      	ldrb	r2, [r3, #0]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d005      	beq.n	80054b8 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0xd4>
 80054ac:	4b49      	ldr	r3, [pc, #292]	; (80055d4 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1f0>)
 80054ae:	4a47      	ldr	r2, [pc, #284]	; (80055cc <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 80054b0:	215a      	movs	r1, #90	; 0x5a
 80054b2:	4847      	ldr	r0, [pc, #284]	; (80055d0 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 80054b4:	f01d ffca 	bl	802344c <__assert_func>
        if (impulse->object_detection_last_layer == EI_CLASSIFIER_LAST_LAYER_SSD) {
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d11b      	bne.n	80054fa <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x116>
            assert((*output_scores)->type == impulse->tflite_output_datatype);
 80054c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	781a      	ldrb	r2, [r3, #0]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d005      	beq.n	80054de <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0xfa>
 80054d2:	4b41      	ldr	r3, [pc, #260]	; (80055d8 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1f4>)
 80054d4:	4a3d      	ldr	r2, [pc, #244]	; (80055cc <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 80054d6:	215c      	movs	r1, #92	; 0x5c
 80054d8:	483d      	ldr	r0, [pc, #244]	; (80055d0 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 80054da:	f01d ffb7 	bl	802344c <__assert_func>
            assert((*output_labels)->type == impulse->tflite_output_datatype);
 80054de:	6a3b      	ldr	r3, [r7, #32]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	781a      	ldrb	r2, [r3, #0]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d005      	beq.n	80054fa <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x116>
 80054ee:	4b3b      	ldr	r3, [pc, #236]	; (80055dc <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1f8>)
 80054f0:	4a36      	ldr	r2, [pc, #216]	; (80055cc <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 80054f2:	215d      	movs	r1, #93	; 0x5d
 80054f4:	4836      	ldr	r0, [pc, #216]	; (80055d0 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 80054f6:	f01d ffa9 	bl	802344c <__assert_func>
        }
        if (impulse->tflite_input_quantized) {
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005500:	2b00      	cmp	r3, #0
 8005502:	d026      	beq.n	8005552 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x16e>
            assert((*input)->params.scale == impulse->tflite_input_scale);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	ed93 7a03 	vldr	s14, [r3, #12]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8005512:	eeb4 7a67 	vcmp.f32	s14, s15
 8005516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800551a:	d005      	beq.n	8005528 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x144>
 800551c:	4b30      	ldr	r3, [pc, #192]	; (80055e0 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1fc>)
 800551e:	4a2b      	ldr	r2, [pc, #172]	; (80055cc <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 8005520:	2160      	movs	r1, #96	; 0x60
 8005522:	482b      	ldr	r0, [pc, #172]	; (80055d0 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 8005524:	f01d ff92 	bl	802344c <__assert_func>
            assert((*input)->params.zero_point == impulse->tflite_input_zeropoint);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	691b      	ldr	r3, [r3, #16]
 800552e:	ee07 3a90 	vmov	s15, r3
 8005532:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 800553c:	eeb4 7a67 	vcmp.f32	s14, s15
 8005540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005544:	d005      	beq.n	8005552 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x16e>
 8005546:	4b27      	ldr	r3, [pc, #156]	; (80055e4 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x200>)
 8005548:	4a20      	ldr	r2, [pc, #128]	; (80055cc <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 800554a:	2161      	movs	r1, #97	; 0x61
 800554c:	4820      	ldr	r0, [pc, #128]	; (80055d0 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 800554e:	f01d ff7d 	bl	802344c <__assert_func>
        }
        if (impulse->tflite_output_quantized) {
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8005558:	2b00      	cmp	r3, #0
 800555a:	d026      	beq.n	80055aa <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1c6>
            assert((*output)->params.scale == impulse->tflite_output_scale);
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	ed93 7a03 	vldr	s14, [r3, #12]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 800556a:	eeb4 7a67 	vcmp.f32	s14, s15
 800556e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005572:	d005      	beq.n	8005580 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x19c>
 8005574:	4b1c      	ldr	r3, [pc, #112]	; (80055e8 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x204>)
 8005576:	4a15      	ldr	r2, [pc, #84]	; (80055cc <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 8005578:	2164      	movs	r1, #100	; 0x64
 800557a:	4815      	ldr	r0, [pc, #84]	; (80055d0 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 800557c:	f01d ff66 	bl	802344c <__assert_func>
            assert((*output)->params.zero_point == impulse->tflite_output_zeropoint);
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	691b      	ldr	r3, [r3, #16]
 8005586:	ee07 3a90 	vmov	s15, r3
 800558a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8005594:	eeb4 7a67 	vcmp.f32	s14, s15
 8005598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800559c:	d005      	beq.n	80055aa <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1c6>
 800559e:	4b13      	ldr	r3, [pc, #76]	; (80055ec <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x208>)
 80055a0:	4a0a      	ldr	r2, [pc, #40]	; (80055cc <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 80055a2:	2165      	movs	r1, #101	; 0x65
 80055a4:	480a      	ldr	r0, [pc, #40]	; (80055d0 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 80055a6:	f01d ff51 	bl	802344c <__assert_func>
        }
        tflite_first_run = false;
 80055aa:	4b06      	ldr	r3, [pc, #24]	; (80055c4 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e0>)
 80055ac:	2200      	movs	r2, #0
 80055ae:	701a      	strb	r2, [r3, #0]
    }
    return EI_IMPULSE_OK;
 80055b0:	2300      	movs	r3, #0
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3718      	adds	r7, #24
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	bf00      	nop
 80055bc:	080014ed 	.word	0x080014ed
 80055c0:	08027ccc 	.word	0x08027ccc
 80055c4:	2000006c 	.word	0x2000006c
 80055c8:	08027d00 	.word	0x08027d00
 80055cc:	08027d34 	.word	0x08027d34
 80055d0:	08027dd0 	.word	0x08027dd0
 80055d4:	08027e58 	.word	0x08027e58
 80055d8:	08027e8c 	.word	0x08027e8c
 80055dc:	08027ec8 	.word	0x08027ec8
 80055e0:	08027f04 	.word	0x08027f04
 80055e4:	08027f3c 	.word	0x08027f3c
 80055e8:	08027f7c 	.word	0x08027f7c
 80055ec:	08027fb4 	.word	0x08027fb4

080055f0 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb>:
    TfLiteTensor* output,
    TfLiteTensor* labels_tensor,
    TfLiteTensor* scores_tensor,
    uint8_t* tensor_arena,
    ei_impulse_result_t *result,
    bool debug) {
 80055f0:	b5b0      	push	{r4, r5, r7, lr}
 80055f2:	b08c      	sub	sp, #48	; 0x30
 80055f4:	af02      	add	r7, sp, #8
 80055f6:	60f8      	str	r0, [r7, #12]
 80055f8:	e9c7 2300 	strd	r2, r3, [r7]

    if(trained_model_invoke() != kTfLiteOk) {
 80055fc:	f01a fc0a 	bl	801fe14 <_Z20trained_model_invokev>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	bf14      	ite	ne
 8005606:	2301      	movne	r3, #1
 8005608:	2300      	moveq	r3, #0
 800560a:	b2db      	uxtb	r3, r3
 800560c:	2b00      	cmp	r3, #0
 800560e:	d002      	beq.n	8005616 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x26>
        return EI_IMPULSE_TFLITE_ERROR;
 8005610:	f06f 0302 	mvn.w	r3, #2
 8005614:	e0ea      	b.n	80057ec <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
    }

    uint64_t ctx_end_us = ei_read_timer_us();
 8005616:	f015 f9d4 	bl	801a9c2 <_Z16ei_read_timer_usv>
 800561a:	e9c7 0106 	strd	r0, r1, [r7, #24]

    result->timing.classification_us = ctx_end_us - ctx_start_us;
 800561e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005622:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005626:	1a84      	subs	r4, r0, r2
 8005628:	eb61 0503 	sbc.w	r5, r1, r3
 800562c:	4622      	mov	r2, r4
 800562e:	462b      	mov	r3, r5
 8005630:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005632:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0
    result->timing.classification = (int)(result->timing.classification_us / 1000);
 8005636:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005638:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 800563c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005640:	f04f 0300 	mov.w	r3, #0
 8005644:	f7fb fb2a 	bl	8000c9c <__aeabi_ldivmod>
 8005648:	4602      	mov	r2, r0
 800564a:	460b      	mov	r3, r1
 800564c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800564e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

    // Read the predicted y value from the model's output tensor
    if (debug) {
 8005652:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8005656:	2b00      	cmp	r3, #0
 8005658:	d006      	beq.n	8005668 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x78>
        ei_printf("Predictions (time: %d ms.):\n", result->timing.classification);
 800565a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800565c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005660:	4619      	mov	r1, r3
 8005662:	4864      	ldr	r0, [pc, #400]	; (80057f4 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x204>)
 8005664:	f000 fd0a 	bl	800607c <_Z9ei_printfPKcz>
    }

    EI_IMPULSE_ERROR fill_res = EI_IMPULSE_OK;
 8005668:	2300      	movs	r3, #0
 800566a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (impulse->object_detection) {
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005674:	2b00      	cmp	r3, #0
 8005676:	d072      	beq.n	800575e <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x16e>
        switch (impulse->object_detection_last_layer) {
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
 800567e:	3b01      	subs	r3, #1
 8005680:	2b04      	cmp	r3, #4
 8005682:	d862      	bhi.n	800574a <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x15a>
 8005684:	a201      	add	r2, pc, #4	; (adr r2, 800568c <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x9c>)
 8005686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800568a:	bf00      	nop
 800568c:	08005717 	.word	0x08005717
 8005690:	080056a1 	.word	0x080056a1
 8005694:	08005723 	.word	0x08005723
 8005698:	08005737 	.word	0x08005737
 800569c:	08005723 	.word	0x08005723
            case EI_CLASSIFIER_LAST_LAYER_FOMO: {
                bool int8_output = output->type == TfLiteType::kTfLiteInt8;
 80056a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	2b09      	cmp	r3, #9
 80056a6:	bf0c      	ite	eq
 80056a8:	2301      	moveq	r3, #1
 80056aa:	2300      	movne	r3, #0
 80056ac:	75bb      	strb	r3, [r7, #22]
                if (int8_output) {
 80056ae:	7dbb      	ldrb	r3, [r7, #22]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d01e      	beq.n	80056f2 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x102>
                    fill_res = fill_result_struct_i8_fomo(impulse, result, output->data.int8, output->params.zero_point, output->params.scale,
 80056b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056b6:	685a      	ldr	r2, [r3, #4]
 80056b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ba:	691b      	ldr	r3, [r3, #16]
 80056bc:	ee07 3a90 	vmov	s15, r3
 80056c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c6:	ed93 7a03 	vldr	s14, [r3, #12]
                        (int)output->dims->data[1], (int)output->dims->data[2]);
 80056ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	6899      	ldr	r1, [r3, #8]
 80056d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	68db      	ldr	r3, [r3, #12]
                    fill_res = fill_result_struct_i8_fomo(impulse, result, output->data.int8, output->params.zero_point, output->params.scale,
 80056d6:	9300      	str	r3, [sp, #0]
 80056d8:	460b      	mov	r3, r1
 80056da:	eef0 0a47 	vmov.f32	s1, s14
 80056de:	eeb0 0a67 	vmov.f32	s0, s15
 80056e2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80056e4:	68f8      	ldr	r0, [r7, #12]
 80056e6:	f7ff fdc2 	bl	800526e <_ZL26fill_result_struct_i8_fomoPK10ei_impulseP19ei_impulse_result_tPaffii>
 80056ea:	4603      	mov	r3, r0
 80056ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
                else {
                    fill_res = fill_result_struct_f32_fomo(impulse, result, output->data.f, (int)output->dims->data[1], (int)output->dims->data[2]);
                }
                break;
 80056f0:	e063      	b.n	80057ba <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1ca>
                    fill_res = fill_result_struct_f32_fomo(impulse, result, output->data.f, (int)output->dims->data[1], (int)output->dims->data[2]);
 80056f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f4:	685a      	ldr	r2, [r3, #4]
 80056f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	6899      	ldr	r1, [r3, #8]
 80056fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	9300      	str	r3, [sp, #0]
 8005704:	460b      	mov	r3, r1
 8005706:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005708:	68f8      	ldr	r0, [r7, #12]
 800570a:	f7ff fda1 	bl	8005250 <_ZL27fill_result_struct_f32_fomoPK10ei_impulseP19ei_impulse_result_tPfii>
 800570e:	4603      	mov	r3, r0
 8005710:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                break;
 8005714:	e051      	b.n	80057ba <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1ca>
            }
            case EI_CLASSIFIER_LAST_LAYER_SSD: {
                #if EI_CLASSIFIER_ENABLE_DETECTION_POSTPROCESS_OP
                    fill_res = fill_result_struct_f32_object_detection(impulse, result, tflite::post_process_boxes, tflite::post_process_scores, tflite::post_process_classes, debug);
                #else
                    ei_printf("ERR: Cannot run SSD model, EI_CLASSIFIER_ENABLE_DETECTION_POSTPROCESS_OP is disabled\n");
 8005716:	4838      	ldr	r0, [pc, #224]	; (80057f8 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x208>)
 8005718:	f000 fcb0 	bl	800607c <_Z9ei_printfPKcz>
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 800571c:	f06f 0309 	mvn.w	r3, #9
 8005720:	e064      	b.n	80057ec <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
                break;
            }
            case EI_CLASSIFIER_LAST_LAYER_YOLOV5:
            case EI_CLASSIFIER_LAST_LAYER_YOLOV5_V5_DRPAI: {
                ei_printf("ERR: YOLOv5 models are not supported using EON Compiler, use full TFLite (%d)\n",
                    impulse->object_detection_last_layer);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
                ei_printf("ERR: YOLOv5 models are not supported using EON Compiler, use full TFLite (%d)\n",
 8005728:	4619      	mov	r1, r3
 800572a:	4834      	ldr	r0, [pc, #208]	; (80057fc <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x20c>)
 800572c:	f000 fca6 	bl	800607c <_Z9ei_printfPKcz>
                return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 8005730:	f06f 0309 	mvn.w	r3, #9
 8005734:	e05a      	b.n	80057ec <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
            }
            case EI_CLASSIFIER_LAST_LAYER_YOLOX: {
                ei_printf("ERR: YOLOX models are not supported using EON Compiler, use full TFLite (%d)\n",
                    impulse->object_detection_last_layer);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
                ei_printf("ERR: YOLOX models are not supported using EON Compiler, use full TFLite (%d)\n",
 800573c:	4619      	mov	r1, r3
 800573e:	4830      	ldr	r0, [pc, #192]	; (8005800 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x210>)
 8005740:	f000 fc9c 	bl	800607c <_Z9ei_printfPKcz>
                return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 8005744:	f06f 0309 	mvn.w	r3, #9
 8005748:	e050      	b.n	80057ec <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
            }
            default: {
                ei_printf("ERR: Unsupported object detection last layer (%d)\n",
                    impulse->object_detection_last_layer);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
                ei_printf("ERR: Unsupported object detection last layer (%d)\n",
 8005750:	4619      	mov	r1, r3
 8005752:	482c      	ldr	r0, [pc, #176]	; (8005804 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x214>)
 8005754:	f000 fc92 	bl	800607c <_Z9ei_printfPKcz>
                return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 8005758:	f06f 0309 	mvn.w	r3, #9
 800575c:	e046      	b.n	80057ec <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
            }
        }
    }
    else {
        bool int8_output = output->type == TfLiteType::kTfLiteInt8;
 800575e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	2b09      	cmp	r3, #9
 8005764:	bf0c      	ite	eq
 8005766:	2301      	moveq	r3, #1
 8005768:	2300      	movne	r3, #0
 800576a:	75fb      	strb	r3, [r7, #23]
        if (int8_output) {
 800576c:	7dfb      	ldrb	r3, [r7, #23]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d018      	beq.n	80057a4 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1b4>
            fill_res = fill_result_struct_i8(impulse, result, output->data.int8, output->params.zero_point, output->params.scale, debug);
 8005772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005774:	685a      	ldr	r2, [r3, #4]
 8005776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	ee07 3a90 	vmov	s15, r3
 800577e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005784:	ed93 7a03 	vldr	s14, [r3, #12]
 8005788:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800578c:	eef0 0a47 	vmov.f32	s1, s14
 8005790:	eeb0 0a67 	vmov.f32	s0, s15
 8005794:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005796:	68f8      	ldr	r0, [r7, #12]
 8005798:	f7ff fd7c 	bl	8005294 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb>
 800579c:	4603      	mov	r3, r0
 800579e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80057a2:	e00a      	b.n	80057ba <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1ca>
        }
        else {
            fill_res = fill_result_struct_f32(impulse, result, output->data.f, debug);
 80057a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057a6:	685a      	ldr	r2, [r3, #4]
 80057a8:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80057ac:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80057ae:	68f8      	ldr	r0, [r7, #12]
 80057b0:	f7ff fdcc 	bl	800534c <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb>
 80057b4:	4603      	mov	r3, r0
 80057b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    trained_model_reset(ei_aligned_free);
 80057ba:	4813      	ldr	r0, [pc, #76]	; (8005808 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x218>)
 80057bc:	f01a fb60 	bl	801fe80 <_Z19trained_model_resetPFvPvE>

    if (fill_res != EI_IMPULSE_OK) {
 80057c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d002      	beq.n	80057ce <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1de>
        return fill_res;
 80057c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80057cc:	e00e      	b.n	80057ec <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
    }

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 80057ce:	f015 f8e3 	bl	801a998 <_Z29ei_run_impulse_check_canceledv>
 80057d2:	4603      	mov	r3, r0
 80057d4:	f113 0f02 	cmn.w	r3, #2
 80057d8:	bf0c      	ite	eq
 80057da:	2301      	moveq	r3, #1
 80057dc:	2300      	movne	r3, #0
 80057de:	b2db      	uxtb	r3, r3
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d002      	beq.n	80057ea <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fa>
        return EI_IMPULSE_CANCELED;
 80057e4:	f06f 0301 	mvn.w	r3, #1
 80057e8:	e000      	b.n	80057ec <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
    }

    return EI_IMPULSE_OK;
 80057ea:	2300      	movs	r3, #0
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3728      	adds	r7, #40	; 0x28
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bdb0      	pop	{r4, r5, r7, pc}
 80057f4:	08027ff8 	.word	0x08027ff8
 80057f8:	08028018 	.word	0x08028018
 80057fc:	08028070 	.word	0x08028070
 8005800:	080280c0 	.word	0x080280c0
 8005804:	08028110 	.word	0x08028110
 8005808:	08001571 	.word	0x08001571

0800580c <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb>:
EI_IMPULSE_ERROR run_nn_inference(
    const ei_impulse_t *impulse,
    ei::matrix_t *fmatrix,
    ei_impulse_result_t *result,
    bool debug = false)
{
 800580c:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8005810:	b09e      	sub	sp, #120	; 0x78
 8005812:	af06      	add	r7, sp, #24
 8005814:	6178      	str	r0, [r7, #20]
 8005816:	6139      	str	r1, [r7, #16]
 8005818:	60fa      	str	r2, [r7, #12]
 800581a:	72fb      	strb	r3, [r7, #11]
    TfLiteTensor* input;
    TfLiteTensor* output;
    TfLiteTensor* output_scores;
    TfLiteTensor* output_labels;

    uint64_t ctx_start_us = ei_read_timer_us();
 800581c:	f015 f8d1 	bl	801a9c2 <_Z16ei_read_timer_usv>
 8005820:	4602      	mov	r2, r0
 8005822:	460b      	mov	r3, r1
 8005824:	e9c7 2308 	strd	r2, r3, [r7, #32]
    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);
 8005828:	4b7b      	ldr	r3, [pc, #492]	; (8005a18 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x20c>)
 800582a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800582c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8005830:	f107 0318 	add.w	r3, r7, #24
 8005834:	2100      	movs	r1, #0
 8005836:	4618      	mov	r0, r3
 8005838:	f000 ff7d 	bl	8006736 <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>

    EI_IMPULSE_ERROR init_res = inference_tflite_setup(impulse,
 800583c:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8005840:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005844:	f107 0120 	add.w	r1, r7, #32
 8005848:	f107 0318 	add.w	r3, r7, #24
 800584c:	9302      	str	r3, [sp, #8]
 800584e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005852:	9301      	str	r3, [sp, #4]
 8005854:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005858:	9300      	str	r3, [sp, #0]
 800585a:	4603      	mov	r3, r0
 800585c:	6978      	ldr	r0, [r7, #20]
 800585e:	f7ff fdc1 	bl	80053e4 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE>
 8005862:	4603      	mov	r3, r0
 8005864:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        &input, &output,
        &output_labels,
        &output_scores,
        p_tensor_arena);

    if (init_res != EI_IMPULSE_OK) {
 8005868:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 800586c:	2b00      	cmp	r3, #0
 800586e:	d002      	beq.n	8005876 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x6a>
        return init_res;
 8005870:	f997 4053 	ldrsb.w	r4, [r7, #83]	; 0x53
 8005874:	e0c5      	b.n	8005a02 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1f6>
    }

    uint8_t* tensor_arena = static_cast<uint8_t*>(p_tensor_arena.get());
 8005876:	f107 0318 	add.w	r3, r7, #24
 800587a:	4618      	mov	r0, r3
 800587c:	f001 f900 	bl	8006a80 <_ZNKSt10unique_ptrIvPFvPvEE3getEv>
 8005880:	64f8      	str	r0, [r7, #76]	; 0x4c

    switch (input->type) {
 8005882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	2b09      	cmp	r3, #9
 8005888:	d022      	beq.n	80058d0 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0xc4>
 800588a:	2b09      	cmp	r3, #9
 800588c:	f300 8083 	bgt.w	8005996 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x18a>
 8005890:	2b01      	cmp	r3, #1
 8005892:	d002      	beq.n	800589a <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x8e>
 8005894:	2b03      	cmp	r3, #3
 8005896:	d051      	beq.n	800593c <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x130>
 8005898:	e07d      	b.n	8005996 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x18a>
        case kTfLiteFloat32: {
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 800589a:	2300      	movs	r3, #0
 800589c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	693a      	ldr	r2, [r7, #16]
 80058a4:	6892      	ldr	r2, [r2, #8]
 80058a6:	fb02 f303 	mul.w	r3, r2, r3
 80058aa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d27b      	bcs.n	80059a8 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x19c>
                input->data.f[ix] = fmatrix->buffer[ix];
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	441a      	add	r2, r3
 80058ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058bc:	6859      	ldr	r1, [r3, #4]
 80058be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	440b      	add	r3, r1
 80058c4:	6812      	ldr	r2, [r2, #0]
 80058c6:	601a      	str	r2, [r3, #0]
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 80058c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058ca:	3301      	adds	r3, #1
 80058cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80058ce:	e7e6      	b.n	800589e <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x92>
            }
            break;
        }
        case kTfLiteInt8: {
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 80058d0:	2300      	movs	r3, #0
 80058d2:	65bb      	str	r3, [r7, #88]	; 0x58
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	693a      	ldr	r2, [r7, #16]
 80058da:	6892      	ldr	r2, [r2, #8]
 80058dc:	fb02 f303 	mul.w	r3, r2, r3
 80058e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d262      	bcs.n	80059ac <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1a0>
                float pixel = (float)fmatrix->buffer[ix];
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	4413      	add	r3, r2
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	64bb      	str	r3, [r7, #72]	; 0x48
                input->data.int8[ix] = static_cast<int8_t>(round(pixel / input->params.scale) + input->params.zero_point);
 80058f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f6:	edd3 7a03 	vldr	s15, [r3, #12]
 80058fa:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80058fe:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005902:	eeb0 0a66 	vmov.f32	s0, s13
 8005906:	f7fc f840 	bl	800198a <_ZSt5roundf>
 800590a:	eeb0 7a40 	vmov.f32	s14, s0
 800590e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	ee07 3a90 	vmov	s15, r3
 8005916:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800591a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800591e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005920:	685a      	ldr	r2, [r3, #4]
 8005922:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005924:	4413      	add	r3, r2
 8005926:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800592a:	edc7 7a01 	vstr	s15, [r7, #4]
 800592e:	793a      	ldrb	r2, [r7, #4]
 8005930:	b252      	sxtb	r2, r2
 8005932:	701a      	strb	r2, [r3, #0]
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 8005934:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005936:	3301      	adds	r3, #1
 8005938:	65bb      	str	r3, [r7, #88]	; 0x58
 800593a:	e7cb      	b.n	80058d4 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0xc8>
            }
            break;
        }
        case kTfLiteUInt8: {
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 800593c:	2300      	movs	r3, #0
 800593e:	657b      	str	r3, [r7, #84]	; 0x54
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	693a      	ldr	r2, [r7, #16]
 8005946:	6892      	ldr	r2, [r2, #8]
 8005948:	fb02 f303 	mul.w	r3, r2, r3
 800594c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800594e:	429a      	cmp	r2, r3
 8005950:	d221      	bcs.n	8005996 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x18a>
                float pixel = (float)fmatrix->buffer[ix];
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	4413      	add	r3, r2
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	647b      	str	r3, [r7, #68]	; 0x44
                input->data.uint8[ix] = static_cast<uint8_t>((pixel / impulse->tflite_input_scale) + impulse->tflite_input_zeropoint);
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8005966:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 800596a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8005974:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800597a:	685a      	ldr	r2, [r3, #4]
 800597c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800597e:	4413      	add	r3, r2
 8005980:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005984:	edc7 7a01 	vstr	s15, [r7, #4]
 8005988:	793a      	ldrb	r2, [r7, #4]
 800598a:	b2d2      	uxtb	r2, r2
 800598c:	701a      	strb	r2, [r3, #0]
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 800598e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005990:	3301      	adds	r3, #1
 8005992:	657b      	str	r3, [r7, #84]	; 0x54
 8005994:	e7d4      	b.n	8005940 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x134>
            }
        }
        default: {
            ei_printf("ERR: Cannot handle input type (%d)\n", input->type);
 8005996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	4619      	mov	r1, r3
 800599c:	481f      	ldr	r0, [pc, #124]	; (8005a1c <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x210>)
 800599e:	f000 fb6d 	bl	800607c <_Z9ei_printfPKcz>
            return EI_IMPULSE_INPUT_TENSOR_WAS_NULL;
 80059a2:	f06f 040c 	mvn.w	r4, #12
 80059a6:	e02c      	b.n	8005a02 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1f6>
            break;
 80059a8:	bf00      	nop
 80059aa:	e000      	b.n	80059ae <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1a2>
            break;
 80059ac:	bf00      	nop
        }
    }

    EI_IMPULSE_ERROR run_res = inference_tflite_run(impulse, ctx_start_us,
 80059ae:	e9d7 bc08 	ldrd	fp, ip, [r7, #32]
 80059b2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80059b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80059b6:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 80059b8:	7afb      	ldrb	r3, [r7, #11]
 80059ba:	9305      	str	r3, [sp, #20]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	9304      	str	r3, [sp, #16]
 80059c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059c2:	9303      	str	r3, [sp, #12]
 80059c4:	9602      	str	r6, [sp, #8]
 80059c6:	9001      	str	r0, [sp, #4]
 80059c8:	9100      	str	r1, [sp, #0]
 80059ca:	465a      	mov	r2, fp
 80059cc:	4663      	mov	r3, ip
 80059ce:	6978      	ldr	r0, [r7, #20]
 80059d0:	f7ff fe0e 	bl	80055f0 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb>
 80059d4:	4603      	mov	r3, r0
 80059d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
                                                    output, output_labels, output_scores,
                                                    tensor_arena, result, debug);

    result->timing.classification_us = ei_read_timer_us() - ctx_start_us;
 80059da:	f014 fff2 	bl	801a9c2 <_Z16ei_read_timer_usv>
 80059de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80059e2:	1a84      	subs	r4, r0, r2
 80059e4:	eb61 0503 	sbc.w	r5, r1, r3
 80059e8:	4622      	mov	r2, r4
 80059ea:	462b      	mov	r3, r5
 80059ec:	68f9      	ldr	r1, [r7, #12]
 80059ee:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0

    if (run_res != EI_IMPULSE_OK) {
 80059f2:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d002      	beq.n	8005a00 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1f4>
        return run_res;
 80059fa:	f997 4043 	ldrsb.w	r4, [r7, #67]	; 0x43
 80059fe:	e000      	b.n	8005a02 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1f6>
    }

    return EI_IMPULSE_OK;
 8005a00:	2400      	movs	r4, #0
    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);
 8005a02:	f107 0318 	add.w	r3, r7, #24
 8005a06:	4618      	mov	r0, r3
 8005a08:	f000 feaa 	bl	8006760 <_ZNSt10unique_ptrIvPFvPvEED1Ev>
}
 8005a0c:	4623      	mov	r3, r4
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3760      	adds	r7, #96	; 0x60
 8005a12:	46bd      	mov	sp, r7
 8005a14:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8005a18:	08001571 	.word	0x08001571
 8005a1c:	08028144 	.word	0x08028144

08005a20 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb>:
 */
EI_IMPULSE_ERROR run_nn_inference_image_quantized(
    const ei_impulse_t *impulse,
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false) {
 8005a20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005a24:	b0a1      	sub	sp, #132	; 0x84
 8005a26:	af06      	add	r7, sp, #24
 8005a28:	6178      	str	r0, [r7, #20]
 8005a2a:	6139      	str	r1, [r7, #16]
 8005a2c:	60fa      	str	r2, [r7, #12]
 8005a2e:	72fb      	strb	r3, [r7, #11]

    memset(result, 0, sizeof(ei_impulse_result_t));
 8005a30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a34:	2100      	movs	r1, #0
 8005a36:	68f8      	ldr	r0, [r7, #12]
 8005a38:	f01d fdaa 	bl	8023590 <memset>
    TfLiteTensor* input;
    TfLiteTensor* output;
    TfLiteTensor* output_scores;
    TfLiteTensor* output_labels;

    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);
 8005a3c:	4b7b      	ldr	r3, [pc, #492]	; (8005c2c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x20c>)
 8005a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a40:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8005a44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a48:	2100      	movs	r1, #0
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f000 fe73 	bl	8006736 <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>

    EI_IMPULSE_ERROR init_res = inference_tflite_setup(impulse,
 8005a50:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8005a54:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8005a58:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8005a5c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a60:	9302      	str	r3, [sp, #8]
 8005a62:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005a66:	9301      	str	r3, [sp, #4]
 8005a68:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005a6c:	9300      	str	r3, [sp, #0]
 8005a6e:	4603      	mov	r3, r0
 8005a70:	6978      	ldr	r0, [r7, #20]
 8005a72:	f7ff fcb7 	bl	80053e4 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE>
 8005a76:	4603      	mov	r3, r0
 8005a78:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
        &ctx_start_us, &input, &output,
        &output_labels,
        &output_scores,
        p_tensor_arena);
    if (init_res != EI_IMPULSE_OK) {
 8005a7c:	f997 3063 	ldrsb.w	r3, [r7, #99]	; 0x63
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d002      	beq.n	8005a8a <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x6a>
        return init_res;
 8005a84:	f997 4063 	ldrsb.w	r4, [r7, #99]	; 0x63
 8005a88:	e0c4      	b.n	8005c14 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1f4>
    }

    if (input->type != TfLiteType::kTfLiteInt8) {
 8005a8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	2b09      	cmp	r3, #9
 8005a90:	d002      	beq.n	8005a98 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x78>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
 8005a92:	f06f 0408 	mvn.w	r4, #8
 8005a96:	e0bd      	b.n	8005c14 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1f4>
    }

    uint64_t dsp_start_us = ei_read_timer_us();
 8005a98:	f014 ff93 	bl	801a9c2 <_Z16ei_read_timer_usv>
 8005a9c:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58

    // features matrix maps around the input tensor to not allocate any memory
    ei::matrix_i8_t features_matrix(1, impulse->nn_input_frame_size, input->data.int8);
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	691a      	ldr	r2, [r3, #16]
 8005aa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	f107 0018 	add.w	r0, r7, #24
 8005aac:	2101      	movs	r1, #1
 8005aae:	f7fb ff09 	bl	80018c4 <_ZN2ei12ei_matrix_i8C1EmmPa>

    // run DSP process and quantize automatically
    int ret = extract_image_features_quantized(impulse, signal, &features_matrix, ei_dsp_blocks[0].config, impulse->frequency);
 8005ab2:	4b5f      	ldr	r3, [pc, #380]	; (8005c30 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x210>)
 8005ab4:	6899      	ldr	r1, [r3, #8]
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8005abc:	f107 0218 	add.w	r2, r7, #24
 8005ac0:	eeb0 0a67 	vmov.f32	s0, s15
 8005ac4:	460b      	mov	r3, r1
 8005ac6:	6939      	ldr	r1, [r7, #16]
 8005ac8:	6978      	ldr	r0, [r7, #20]
 8005aca:	f7fe ff9b 	bl	8004a04 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf>
 8005ace:	6578      	str	r0, [r7, #84]	; 0x54
    if (ret != EIDSP_OK) {
 8005ad0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d006      	beq.n	8005ae4 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0xc4>
        ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
 8005ad6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005ad8:	4856      	ldr	r0, [pc, #344]	; (8005c34 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x214>)
 8005ada:	f000 facf 	bl	800607c <_Z9ei_printfPKcz>
        return EI_IMPULSE_DSP_ERROR;
 8005ade:	f06f 0404 	mvn.w	r4, #4
 8005ae2:	e092      	b.n	8005c0a <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1ea>
    }

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 8005ae4:	f014 ff58 	bl	801a998 <_Z29ei_run_impulse_check_canceledv>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	f113 0f02 	cmn.w	r3, #2
 8005aee:	bf0c      	ite	eq
 8005af0:	2301      	moveq	r3, #1
 8005af2:	2300      	movne	r3, #0
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d002      	beq.n	8005b00 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0xe0>
        return EI_IMPULSE_CANCELED;
 8005afa:	f06f 0401 	mvn.w	r4, #1
 8005afe:	e084      	b.n	8005c0a <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1ea>
    }

    result->timing.dsp_us = ei_read_timer_us() - dsp_start_us;
 8005b00:	f014 ff5f 	bl	801a9c2 <_Z16ei_read_timer_usv>
 8005b04:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005b08:	ebb0 0802 	subs.w	r8, r0, r2
 8005b0c:	eb61 0903 	sbc.w	r9, r1, r3
 8005b10:	4642      	mov	r2, r8
 8005b12:	464b      	mov	r3, r9
 8005b14:	68f9      	ldr	r1, [r7, #12]
 8005b16:	e9c1 233a 	strd	r2, r3, [r1, #232]	; 0xe8
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	e9d3 013a 	ldrd	r0, r1, [r3, #232]	; 0xe8
 8005b20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005b24:	f04f 0300 	mov.w	r3, #0
 8005b28:	f7fb f8b8 	bl	8000c9c <__aeabi_ldivmod>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	460b      	mov	r3, r1
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

    if (debug) {
 8005b36:	7afb      	ldrb	r3, [r7, #11]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d02d      	beq.n	8005b98 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x178>
        ei_printf("Features (%d ms.): ", result->timing.dsp);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005b42:	4619      	mov	r1, r3
 8005b44:	483c      	ldr	r0, [pc, #240]	; (8005c38 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x218>)
 8005b46:	f000 fa99 	bl	800607c <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	667b      	str	r3, [r7, #100]	; 0x64
 8005b4e:	6a3b      	ldr	r3, [r7, #32]
 8005b50:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d21d      	bcs.n	8005b92 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x172>
            ei_printf_float((features_matrix.buffer[ix] - impulse->tflite_input_zeropoint) * impulse->tflite_input_scale);
 8005b56:	69ba      	ldr	r2, [r7, #24]
 8005b58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b5a:	4413      	add	r3, r2
 8005b5c:	f993 3000 	ldrsb.w	r3, [r3]
 8005b60:	ee07 3a90 	vmov	s15, r3
 8005b64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8005b6e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8005b78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b7c:	eeb0 0a67 	vmov.f32	s0, s15
 8005b80:	f014 ff32 	bl	801a9e8 <_Z15ei_printf_floatf>
            ei_printf(" ");
 8005b84:	482d      	ldr	r0, [pc, #180]	; (8005c3c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x21c>)
 8005b86:	f000 fa79 	bl	800607c <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 8005b8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b8c:	3301      	adds	r3, #1
 8005b8e:	667b      	str	r3, [r7, #100]	; 0x64
 8005b90:	e7dd      	b.n	8005b4e <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x12e>
        }
        ei_printf("\n");
 8005b92:	482b      	ldr	r0, [pc, #172]	; (8005c40 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x220>)
 8005b94:	f000 fa72 	bl	800607c <_Z9ei_printfPKcz>
    }

    ctx_start_us = ei_read_timer_us();
 8005b98:	f014 ff13 	bl	801a9c2 <_Z16ei_read_timer_usv>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	460b      	mov	r3, r1
 8005ba0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

    EI_IMPULSE_ERROR run_res = inference_tflite_run(impulse,
 8005ba4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8005ba8:	6bbe      	ldr	r6, [r7, #56]	; 0x38
 8005baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bac:	607b      	str	r3, [r7, #4]
 8005bae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005bb0:	603a      	str	r2, [r7, #0]
        ctx_start_us,
        output,
        output_labels,
        output_scores,
        static_cast<uint8_t*>(p_tensor_arena.get()),
 8005bb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f000 ff62 	bl	8006a80 <_ZNKSt10unique_ptrIvPFvPvEE3getEv>
 8005bbc:	4602      	mov	r2, r0
    EI_IMPULSE_ERROR run_res = inference_tflite_run(impulse,
 8005bbe:	7afb      	ldrb	r3, [r7, #11]
 8005bc0:	9305      	str	r3, [sp, #20]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	9304      	str	r3, [sp, #16]
 8005bc6:	9203      	str	r2, [sp, #12]
 8005bc8:	683a      	ldr	r2, [r7, #0]
 8005bca:	9202      	str	r2, [sp, #8]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	9301      	str	r3, [sp, #4]
 8005bd0:	9600      	str	r6, [sp, #0]
 8005bd2:	4642      	mov	r2, r8
 8005bd4:	464b      	mov	r3, r9
 8005bd6:	6978      	ldr	r0, [r7, #20]
 8005bd8:	f7ff fd0a 	bl	80055f0 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        result, debug);

    if (run_res != EI_IMPULSE_OK) {
 8005be2:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d002      	beq.n	8005bf0 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1d0>
        return run_res;
 8005bea:	f997 4053 	ldrsb.w	r4, [r7, #83]	; 0x53
 8005bee:	e00c      	b.n	8005c0a <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1ea>
    }

    result->timing.classification_us = ei_read_timer_us() - ctx_start_us;
 8005bf0:	f014 fee7 	bl	801a9c2 <_Z16ei_read_timer_usv>
 8005bf4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005bf8:	1a84      	subs	r4, r0, r2
 8005bfa:	eb61 0503 	sbc.w	r5, r1, r3
 8005bfe:	4622      	mov	r2, r4
 8005c00:	462b      	mov	r3, r5
 8005c02:	68f9      	ldr	r1, [r7, #12]
 8005c04:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0

    return EI_IMPULSE_OK;
 8005c08:	2400      	movs	r4, #0
    ei::matrix_i8_t features_matrix(1, impulse->nn_input_frame_size, input->data.int8);
 8005c0a:	f107 0318 	add.w	r3, r7, #24
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f7fb fe82 	bl	8001918 <_ZN2ei12ei_matrix_i8D1Ev>
    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);
 8005c14:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f000 fda1 	bl	8006760 <_ZNSt10unique_ptrIvPFvPvEED1Ev>
}
 8005c1e:	4623      	mov	r3, r4
 8005c20:	4618      	mov	r0, r3
 8005c22:	376c      	adds	r7, #108	; 0x6c
 8005c24:	46bd      	mov	sp, r7
 8005c26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005c2a:	bf00      	nop
 8005c2c:	08001571 	.word	0x08001571
 8005c30:	20000058 	.word	0x20000058
 8005c34:	08028168 	.word	0x08028168
 8005c38:	08028190 	.word	0x08028190
 8005c3c:	080281a4 	.word	0x080281a4
 8005c40:	08027cc0 	.word	0x08027cc0

08005c44 <run_inference>:
extern "C" EI_IMPULSE_ERROR run_inference(
    const ei_impulse_t *impulse,
    ei::matrix_t *fmatrix,
    ei_impulse_result_t *result,
    bool debug = false)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b086      	sub	sp, #24
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	60f8      	str	r0, [r7, #12]
 8005c4c:	60b9      	str	r1, [r7, #8]
 8005c4e:	607a      	str	r2, [r7, #4]
 8005c50:	70fb      	strb	r3, [r7, #3]
#if (EI_CLASSIFIER_INFERENCING_ENGINE != EI_CLASSIFIER_NONE && EI_CLASSIFIER_INFERENCING_ENGINE != EI_CLASSIFIER_DRPAI)
    EI_IMPULSE_ERROR nn_res = run_nn_inference(impulse, fmatrix, result, debug);
 8005c52:	78fb      	ldrb	r3, [r7, #3]
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	68b9      	ldr	r1, [r7, #8]
 8005c58:	68f8      	ldr	r0, [r7, #12]
 8005c5a:	f7ff fdd7 	bl	800580c <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	75fb      	strb	r3, [r7, #23]
    if (nn_res != EI_IMPULSE_OK) {
 8005c62:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d002      	beq.n	8005c70 <run_inference+0x2c>
        return nn_res;
 8005c6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005c6e:	e022      	b.n	8005cb6 <run_inference+0x72>
    }
#endif

#if EI_CLASSIFIER_HAS_ANOMALY == 1
    if (impulse->has_anomaly) {
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d00e      	beq.n	8005c98 <run_inference+0x54>
        EI_IMPULSE_ERROR anomaly_res = inference_anomaly_invoke(impulse, fmatrix, result, debug);
 8005c7a:	78fb      	ldrb	r3, [r7, #3]
 8005c7c:	687a      	ldr	r2, [r7, #4]
 8005c7e:	68b9      	ldr	r1, [r7, #8]
 8005c80:	68f8      	ldr	r0, [r7, #12]
 8005c82:	f7ff fa81 	bl	8005188 <_Z24inference_anomaly_invokePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb>
 8005c86:	4603      	mov	r3, r0
 8005c88:	75bb      	strb	r3, [r7, #22]
        if (anomaly_res != EI_IMPULSE_OK) {
 8005c8a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d002      	beq.n	8005c98 <run_inference+0x54>
            return anomaly_res;
 8005c92:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8005c96:	e00e      	b.n	8005cb6 <run_inference+0x72>
        }
    }
#endif

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 8005c98:	f014 fe7e 	bl	801a998 <_Z29ei_run_impulse_check_canceledv>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	f113 0f02 	cmn.w	r3, #2
 8005ca2:	bf0c      	ite	eq
 8005ca4:	2301      	moveq	r3, #1
 8005ca6:	2300      	movne	r3, #0
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d002      	beq.n	8005cb4 <run_inference+0x70>
        return EI_IMPULSE_CANCELED;
 8005cae:	f06f 0301 	mvn.w	r3, #1
 8005cb2:	e000      	b.n	8005cb6 <run_inference+0x72>
    }

    return EI_IMPULSE_OK;
 8005cb4:	2300      	movs	r3, #0
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3718      	adds	r7, #24
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}

08005cbe <_ZN14SignalWithAxesD1Ev>:
class SignalWithAxes {
 8005cbe:	b580      	push	{r7, lr}
 8005cc0:	b082      	sub	sp, #8
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	3310      	adds	r3, #16
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f7fe fd4a 	bl	8004764 <_ZN2ei11ei_signal_tD1Ev>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3708      	adds	r7, #8
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
	...

08005cdc <process_impulse>:
 */
extern "C" EI_IMPULSE_ERROR process_impulse(const ei_impulse_t *impulse,
                                            signal_t *signal,
                                            ei_impulse_result_t *result,
                                            bool debug = false)
{
 8005cdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005ce0:	b0a5      	sub	sp, #148	; 0x94
 8005ce2:	af02      	add	r7, sp, #8
 8005ce4:	60f8      	str	r0, [r7, #12]
 8005ce6:	60b9      	str	r1, [r7, #8]
 8005ce8:	607a      	str	r2, [r7, #4]
 8005cea:	70fb      	strb	r3, [r7, #3]
 8005cec:	2600      	movs	r6, #0

#if (EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED == 1 && (EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_TFLITE || EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_TENSAIFLOW)) || EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_DRPAI
    // Shortcut for quantized image models
    if (can_run_classifier_image_quantized(impulse) == EI_IMPULSE_OK) {
 8005cee:	68f8      	ldr	r0, [r7, #12]
 8005cf0:	f000 f928 	bl	8005f44 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	bf0c      	ite	eq
 8005cfa:	2301      	moveq	r3, #1
 8005cfc:	2300      	movne	r3, #0
 8005cfe:	b2db      	uxtb	r3, r3
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d008      	beq.n	8005d16 <process_impulse+0x3a>
        return run_classifier_image_quantized(impulse, signal, result, debug);
 8005d04:	78fb      	ldrb	r3, [r7, #3]
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	68b9      	ldr	r1, [r7, #8]
 8005d0a:	68f8      	ldr	r0, [r7, #12]
 8005d0c:	f000 f954 	bl	8005fb8 <run_classifier_image_quantized>
 8005d10:	4603      	mov	r3, r0
 8005d12:	461e      	mov	r6, r3
 8005d14:	e0ef      	b.n	8005ef6 <process_impulse+0x21a>
    }
#endif

    memset(result, 0, sizeof(ei_impulse_result_t));
 8005d16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d1a:	2100      	movs	r1, #0
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f01d fc37 	bl	8023590 <memset>

    ei::matrix_t features_matrix(1, impulse->nn_input_frame_size);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	691a      	ldr	r2, [r3, #16]
 8005d26:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	2101      	movs	r1, #1
 8005d2e:	f7fb fd74 	bl	800181a <_ZN2ei9ei_matrixC1EmmPf>

    uint64_t dsp_start_us = ei_read_timer_us();
 8005d32:	f014 fe46 	bl	801a9c2 <_Z16ei_read_timer_usv>
 8005d36:	e9c7 011c 	strd	r0, r1, [r7, #112]	; 0x70

    size_t out_features_index = 0;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

    for (size_t ix = 0; ix < impulse->dsp_blocks_size; ix++) {
 8005d40:	2300      	movs	r3, #0
 8005d42:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d4a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d27c      	bcs.n	8005e4c <process_impulse+0x170>
        ei_model_dsp_t block = impulse->dsp_blocks[ix];
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8005d56:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005d5a:	4613      	mov	r3, r2
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	4413      	add	r3, r2
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	440b      	add	r3, r1
 8005d64:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8005d68:	461d      	mov	r5, r3
 8005d6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005d6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005d6e:	682b      	ldr	r3, [r5, #0]
 8005d70:	6023      	str	r3, [r4, #0]

        if (out_features_index + block.n_output_features > impulse->nn_input_frame_size) {
 8005d72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d78:	441a      	add	r2, r3
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	691b      	ldr	r3, [r3, #16]
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d905      	bls.n	8005d8e <process_impulse+0xb2>
            ei_printf("ERR: Would write outside feature buffer\n");
 8005d82:	4860      	ldr	r0, [pc, #384]	; (8005f04 <process_impulse+0x228>)
 8005d84:	f000 f97a 	bl	800607c <_Z9ei_printfPKcz>
            return EI_IMPULSE_DSP_ERROR;
 8005d88:	f06f 0604 	mvn.w	r6, #4
 8005d8c:	e0ad      	b.n	8005eea <process_impulse+0x20e>
        }

        ei::matrix_t fm(1, block.n_output_features, features_matrix.buffer + out_features_index);
 8005d8e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005d90:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005d92:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	4413      	add	r3, r2
 8005d9a:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8005d9e:	460a      	mov	r2, r1
 8005da0:	2101      	movs	r1, #1
 8005da2:	f7fb fd3a 	bl	800181a <_ZN2ei9ei_matrixC1EmmPf>
            ei_printf("ERR: EIDSP_SIGNAL_C_FN_POINTER can only be used when all axes are selected for DSP blocks\n");
            return EI_IMPULSE_DSP_ERROR;
        }
        int ret = block.extract_fn(signal, &fm, block.config, impulse->frequency);
#else
        SignalWithAxes swa(signal, block.axes, block.axes_size, impulse);
 8005da6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005da8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005daa:	f107 0014 	add.w	r0, r7, #20
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	9300      	str	r3, [sp, #0]
 8005db2:	460b      	mov	r3, r1
 8005db4:	68b9      	ldr	r1, [r7, #8]
 8005db6:	f7ff f881 	bl	8004ebc <_ZN14SignalWithAxesC1EPN2ei11ei_signal_tEPhjPK10ei_impulse>
        int ret = block.extract_fn(swa.get_signal(), &fm, block.config, impulse->frequency);
 8005dba:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8005dbc:	f107 0314 	add.w	r3, r7, #20
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f7ff f8ab 	bl	8004f1c <_ZN14SignalWithAxes10get_signalEv>
 8005dc6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8005dce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005dd2:	eeb0 0a67 	vmov.f32	s0, s15
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	47a0      	blx	r4
 8005dda:	66f8      	str	r0, [r7, #108]	; 0x6c
#endif

        if (ret != EIDSP_OK) {
 8005ddc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d007      	beq.n	8005df2 <process_impulse+0x116>
            ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
 8005de2:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8005de4:	4848      	ldr	r0, [pc, #288]	; (8005f08 <process_impulse+0x22c>)
 8005de6:	f000 f949 	bl	800607c <_Z9ei_printfPKcz>
            return EI_IMPULSE_DSP_ERROR;
 8005dea:	f06f 0604 	mvn.w	r6, #4
 8005dee:	2400      	movs	r4, #0
 8005df0:	e015      	b.n	8005e1e <process_impulse+0x142>
        }

        if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 8005df2:	f014 fdd1 	bl	801a998 <_Z29ei_run_impulse_check_canceledv>
 8005df6:	4603      	mov	r3, r0
 8005df8:	f113 0f02 	cmn.w	r3, #2
 8005dfc:	bf0c      	ite	eq
 8005dfe:	2301      	moveq	r3, #1
 8005e00:	2300      	movne	r3, #0
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d003      	beq.n	8005e10 <process_impulse+0x134>
            return EI_IMPULSE_CANCELED;
 8005e08:	f06f 0601 	mvn.w	r6, #1
 8005e0c:	2400      	movs	r4, #0
 8005e0e:	e006      	b.n	8005e1e <process_impulse+0x142>
        }

        out_features_index += block.n_output_features;
 8005e10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e12:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005e16:	4413      	add	r3, r2
 8005e18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005e1c:	2401      	movs	r4, #1
 8005e1e:	f107 0314 	add.w	r3, r7, #20
 8005e22:	4618      	mov	r0, r3
 8005e24:	f7ff ff4b 	bl	8005cbe <_ZN14SignalWithAxesD1Ev>
 8005e28:	2c01      	cmp	r4, #1
 8005e2a:	d001      	beq.n	8005e30 <process_impulse+0x154>
 8005e2c:	2400      	movs	r4, #0
 8005e2e:	e000      	b.n	8005e32 <process_impulse+0x156>
 8005e30:	2401      	movs	r4, #1
 8005e32:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005e36:	4618      	mov	r0, r3
 8005e38:	f7fb fd1a 	bl	8001870 <_ZN2ei9ei_matrixD1Ev>
 8005e3c:	2c01      	cmp	r4, #1
 8005e3e:	d154      	bne.n	8005eea <process_impulse+0x20e>
    for (size_t ix = 0; ix < impulse->dsp_blocks_size; ix++) {
 8005e40:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005e44:	3301      	adds	r3, #1
 8005e46:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005e4a:	e77c      	b.n	8005d46 <process_impulse+0x6a>
    }

    result->timing.dsp_us = ei_read_timer_us() - dsp_start_us;
 8005e4c:	f014 fdb9 	bl	801a9c2 <_Z16ei_read_timer_usv>
 8005e50:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8005e54:	ebb0 0802 	subs.w	r8, r0, r2
 8005e58:	eb61 0903 	sbc.w	r9, r1, r3
 8005e5c:	4642      	mov	r2, r8
 8005e5e:	464b      	mov	r3, r9
 8005e60:	6879      	ldr	r1, [r7, #4]
 8005e62:	e9c1 233a 	strd	r2, r3, [r1, #232]	; 0xe8
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	e9d3 013a 	ldrd	r0, r1, [r3, #232]	; 0xe8
 8005e6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005e70:	f04f 0300 	mov.w	r3, #0
 8005e74:	f7fa ff12 	bl	8000c9c <__aeabi_ldivmod>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	460b      	mov	r3, r1
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

    if (debug) {
 8005e82:	78fb      	ldrb	r3, [r7, #3]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d020      	beq.n	8005eca <process_impulse+0x1ee>
        ei_printf("Features (%d ms.): ", result->timing.dsp);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005e8e:	4619      	mov	r1, r3
 8005e90:	481e      	ldr	r0, [pc, #120]	; (8005f0c <process_impulse+0x230>)
 8005e92:	f000 f8f3 	bl	800607c <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 8005e96:	2300      	movs	r3, #0
 8005e98:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005e9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e9c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d210      	bcs.n	8005ec4 <process_impulse+0x1e8>
            ei_printf_float(features_matrix.buffer[ix]);
 8005ea2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005ea4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	4413      	add	r3, r2
 8005eaa:	edd3 7a00 	vldr	s15, [r3]
 8005eae:	eeb0 0a67 	vmov.f32	s0, s15
 8005eb2:	f014 fd99 	bl	801a9e8 <_Z15ei_printf_floatf>
            ei_printf(" ");
 8005eb6:	4816      	ldr	r0, [pc, #88]	; (8005f10 <process_impulse+0x234>)
 8005eb8:	f000 f8e0 	bl	800607c <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 8005ebc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005ebe:	3301      	adds	r3, #1
 8005ec0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005ec2:	e7ea      	b.n	8005e9a <process_impulse+0x1be>
        }
        ei_printf("\n");
 8005ec4:	4813      	ldr	r0, [pc, #76]	; (8005f14 <process_impulse+0x238>)
 8005ec6:	f000 f8d9 	bl	800607c <_Z9ei_printfPKcz>
    }

    if (debug) {
 8005eca:	78fb      	ldrb	r3, [r7, #3]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d002      	beq.n	8005ed6 <process_impulse+0x1fa>
        ei_printf("Running impulse...\n");
 8005ed0:	4811      	ldr	r0, [pc, #68]	; (8005f18 <process_impulse+0x23c>)
 8005ed2:	f000 f8d3 	bl	800607c <_Z9ei_printfPKcz>
    }

    return run_inference(impulse, &features_matrix, result, debug);
 8005ed6:	78fb      	ldrb	r3, [r7, #3]
 8005ed8:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	68f8      	ldr	r0, [r7, #12]
 8005ee0:	f7ff feb0 	bl	8005c44 <run_inference>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	461e      	mov	r6, r3
 8005ee8:	e000      	b.n	8005eec <process_impulse+0x210>
            return EI_IMPULSE_DSP_ERROR;
 8005eea:	bf00      	nop
    ei::matrix_t features_matrix(1, impulse->nn_input_frame_size);
 8005eec:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f7fb fcbd 	bl	8001870 <_ZN2ei9ei_matrixD1Ev>

}
 8005ef6:	4633      	mov	r3, r6
 8005ef8:	4618      	mov	r0, r3
 8005efa:	378c      	adds	r7, #140	; 0x8c
 8005efc:	46bd      	mov	sp, r7
 8005efe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005f02:	bf00      	nop
 8005f04:	080281a8 	.word	0x080281a8
 8005f08:	08028168 	.word	0x08028168
 8005f0c:	08028190 	.word	0x08028190
 8005f10:	080281a4 	.word	0x080281a4
 8005f14:	08027cc0 	.word	0x08027cc0
 8005f18:	080281d4 	.word	0x080281d4

08005f1c <ei_construct_impulse>:
#if EI_CLASSIFIER_STUDIO_VERSION < 3
/**
 * @brief      Construct impulse from macros - for run_classifer compatibility
 */
extern "C" const ei_impulse_t ei_construct_impulse()
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b082      	sub	sp, #8
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]

const ei_impulse_t impulse =
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	4a06      	ldr	r2, [pc, #24]	; (8005f40 <ei_construct_impulse+0x24>)
 8005f28:	4618      	mov	r0, r3
 8005f2a:	4611      	mov	r1, r2
 8005f2c:	23a4      	movs	r3, #164	; 0xa4
 8005f2e:	461a      	mov	r2, r3
 8005f30:	f01d fb06 	bl	8023540 <memcpy>
    .model_reset = NULL,
#endif
    .categories = ei_classifier_inferencing_categories
    };

    return impulse;
 8005f34:	bf00      	nop
}
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	3708      	adds	r7, #8
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	0802824c 	.word	0x0802824c

08005f44 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse>:
#endif

/**
 * Check if the current impulse could be used by 'run_classifier_image_quantized'
 */
__attribute__((unused)) static EI_IMPULSE_ERROR can_run_classifier_image_quantized(const ei_impulse_t *impulse) {
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]

    if (impulse->inferencing_engine != EI_CLASSIFIER_TFLITE
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f50:	2b02      	cmp	r3, #2
 8005f52:	d00a      	beq.n	8005f6a <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x26>
        && impulse->inferencing_engine != EI_CLASSIFIER_TENSAIFLOW
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f58:	2b05      	cmp	r3, #5
 8005f5a:	d006      	beq.n	8005f6a <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x26>
        && impulse->inferencing_engine != EI_CLASSIFIER_DRPAI) // check later
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f60:	2b07      	cmp	r3, #7
 8005f62:	d002      	beq.n	8005f6a <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x26>
    {
        return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 8005f64:	f06f 0309 	mvn.w	r3, #9
 8005f68:	e01d      	b.n	8005fa6 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x62>
    }

    if (impulse->has_anomaly == 1){
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d102      	bne.n	8005f7a <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x36>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
 8005f74:	f06f 0308 	mvn.w	r3, #8
 8005f78:	e015      	b.n	8005fa6 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x62>
    }

        // Check if we have a quantized NN Input layer (input is always quantized for DRP-AI)
    if (impulse->tflite_input_quantized != 1) {
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d002      	beq.n	8005f8a <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x46>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
 8005f84:	f06f 0308 	mvn.w	r3, #8
 8005f88:	e00d      	b.n	8005fa6 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x62>
    }

    // And if we have one DSP block which operates on images...
    if (impulse->dsp_blocks_size != 1 || impulse->dsp_blocks[0].extract_fn != extract_image_features) {
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d105      	bne.n	8005f9e <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x5a>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	4a06      	ldr	r2, [pc, #24]	; (8005fb4 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x70>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d002      	beq.n	8005fa4 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x60>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
 8005f9e:	f06f 0308 	mvn.w	r3, #8
 8005fa2:	e000      	b.n	8005fa6 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x62>
    }

    return EI_IMPULSE_OK;
 8005fa4:	2300      	movs	r3, #0
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	370c      	adds	r7, #12
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr
 8005fb2:	bf00      	nop
 8005fb4:	08004831 	.word	0x08004831

08005fb8 <run_classifier_image_quantized>:
extern "C" EI_IMPULSE_ERROR run_classifier_image_quantized(
    const ei_impulse_t *impulse,
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b086      	sub	sp, #24
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	60f8      	str	r0, [r7, #12]
 8005fc0:	60b9      	str	r1, [r7, #8]
 8005fc2:	607a      	str	r2, [r7, #4]
 8005fc4:	70fb      	strb	r3, [r7, #3]
    EI_IMPULSE_ERROR verify_res = can_run_classifier_image_quantized(impulse);
 8005fc6:	68f8      	ldr	r0, [r7, #12]
 8005fc8:	f7ff ffbc 	bl	8005f44 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	75fb      	strb	r3, [r7, #23]
    if (verify_res != EI_IMPULSE_OK) {
 8005fd0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d002      	beq.n	8005fde <run_classifier_image_quantized+0x26>
        return verify_res;
 8005fd8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005fdc:	e00d      	b.n	8005ffa <run_classifier_image_quantized+0x42>
    }

    memset(result, 0, sizeof(ei_impulse_result_t));
 8005fde:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005fe2:	2100      	movs	r1, #0
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f01d fad3 	bl	8023590 <memset>

    return run_nn_inference_image_quantized(impulse, signal, result, debug);
 8005fea:	78fb      	ldrb	r3, [r7, #3]
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	68b9      	ldr	r1, [r7, #8]
 8005ff0:	68f8      	ldr	r0, [r7, #12]
 8005ff2:	f7ff fd15 	bl	8005a20 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	bf00      	nop

}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3718      	adds	r7, #24
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}

08006002 <run_classifier>:
 */
extern "C" EI_IMPULSE_ERROR run_classifier(
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false)
{
 8006002:	b580      	push	{r7, lr}
 8006004:	b0ae      	sub	sp, #184	; 0xb8
 8006006:	af00      	add	r7, sp, #0
 8006008:	60f8      	str	r0, [r7, #12]
 800600a:	60b9      	str	r1, [r7, #8]
 800600c:	4613      	mov	r3, r2
 800600e:	71fb      	strb	r3, [r7, #7]
#if EI_CLASSIFIER_STUDIO_VERSION < 3
        const ei_impulse_t impulse = ei_construct_impulse();
 8006010:	f107 0314 	add.w	r3, r7, #20
 8006014:	4618      	mov	r0, r3
 8006016:	f7ff ff81 	bl	8005f1c <ei_construct_impulse>
#else
       const ei_impulse_t impulse = ei_default_impulse;
#endif
    return process_impulse(&impulse, signal, result, debug);
 800601a:	79fb      	ldrb	r3, [r7, #7]
 800601c:	f107 0014 	add.w	r0, r7, #20
 8006020:	68ba      	ldr	r2, [r7, #8]
 8006022:	68f9      	ldr	r1, [r7, #12]
 8006024:	f7ff fe5a 	bl	8005cdc <process_impulse>
 8006028:	4603      	mov	r3, r0
}
 800602a:	4618      	mov	r0, r3
 800602c:	37b8      	adds	r7, #184	; 0xb8
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}

08006032 <_Z6vprintPKcSt9__va_list>:
SPI_HandleTypeDef hspi1;

/* USER CODE BEGIN PV */
/* Private variables ---------------------------------------------------------*/
void vprint(const char *fmt, va_list argp)
{
 8006032:	b580      	push	{r7, lr}
 8006034:	b0b4      	sub	sp, #208	; 0xd0
 8006036:	af00      	add	r7, sp, #0
 8006038:	6078      	str	r0, [r7, #4]
 800603a:	6039      	str	r1, [r7, #0]
    char string[200];
    if(0 < vsprintf(string, fmt, argp)) // build string
 800603c:	f107 0308 	add.w	r3, r7, #8
 8006040:	683a      	ldr	r2, [r7, #0]
 8006042:	6879      	ldr	r1, [r7, #4]
 8006044:	4618      	mov	r0, r3
 8006046:	f01f f813 	bl	8025070 <vsiprintf>
 800604a:	4603      	mov	r3, r0
 800604c:	2b00      	cmp	r3, #0
 800604e:	bfcc      	ite	gt
 8006050:	2301      	movgt	r3, #1
 8006052:	2300      	movle	r3, #0
 8006054:	b2db      	uxtb	r3, r3
 8006056:	2b00      	cmp	r3, #0
 8006058:	d00c      	beq.n	8006074 <_Z6vprintPKcSt9__va_list+0x42>
    {
        //HAL_UART_Transmit(&huart1, (uint8_t*)string, strlen(string), 0xffffff); // send message via UART
    	 CDC_Transmit_FS((uint8_t*)string, strlen(string));
 800605a:	f107 0308 	add.w	r3, r7, #8
 800605e:	4618      	mov	r0, r3
 8006060:	f7fa f910 	bl	8000284 <strlen>
 8006064:	4603      	mov	r3, r0
 8006066:	b29a      	uxth	r2, r3
 8006068:	f107 0308 	add.w	r3, r7, #8
 800606c:	4611      	mov	r1, r2
 800606e:	4618      	mov	r0, r3
 8006070:	f01a f82c 	bl	80200cc <CDC_Transmit_FS>
    }
}
 8006074:	bf00      	nop
 8006076:	37d0      	adds	r7, #208	; 0xd0
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}

0800607c <_Z9ei_printfPKcz>:

void ei_printf(const char *format, ...) {
 800607c:	b40f      	push	{r0, r1, r2, r3}
 800607e:	b580      	push	{r7, lr}
 8006080:	b082      	sub	sp, #8
 8006082:	af00      	add	r7, sp, #0
    va_list myargs;
    va_start(myargs, format);
 8006084:	f107 0314 	add.w	r3, r7, #20
 8006088:	607b      	str	r3, [r7, #4]
    vprint(format, myargs);
 800608a:	6879      	ldr	r1, [r7, #4]
 800608c:	6938      	ldr	r0, [r7, #16]
 800608e:	f7ff ffd0 	bl	8006032 <_Z6vprintPKcSt9__va_list>
    va_end(myargs);
}
 8006092:	bf00      	nop
 8006094:	3708      	adds	r7, #8
 8006096:	46bd      	mov	sp, r7
 8006098:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800609c:	b004      	add	sp, #16
 800609e:	4770      	bx	lr

080060a0 <_Z16get_feature_datajjPf>:
using namespace ei;

static float features[EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE] = { 0.0 };

int get_feature_data(size_t offset, size_t length, float *out_ptr) {
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b084      	sub	sp, #16
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	60f8      	str	r0, [r7, #12]
 80060a8:	60b9      	str	r1, [r7, #8]
 80060aa:	607a      	str	r2, [r7, #4]
    memcpy(out_ptr, features + offset, length * sizeof(float));
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	4a06      	ldr	r2, [pc, #24]	; (80060cc <_Z16get_feature_datajjPf+0x2c>)
 80060b2:	1899      	adds	r1, r3, r2
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	461a      	mov	r2, r3
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f01d fa40 	bl	8023540 <memcpy>
    return 0;
 80060c0:	2300      	movs	r3, #0
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3710      	adds	r7, #16
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	bf00      	nop
 80060cc:	20000534 	.word	0x20000534

080060d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b0ca      	sub	sp, #296	; 0x128
 80060d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80060d6:	f003 f911 	bl	80092fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80060da:	f000 f905 	bl	80062e8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80060de:	f000 f9cd 	bl	800647c <_ZL12MX_GPIO_Initv>
  MX_SPI1_Init();
 80060e2:	f000 f98f 	bl	8006404 <_ZL12MX_SPI1_Initv>
  MX_USB_DEVICE_Init();
 80060e6:	f019 ff33 	bl	801ff50 <MX_USB_DEVICE_Init>
  MX_CRC_Init();
 80060ea:	f000 f973 	bl	80063d4 <_ZL11MX_CRC_Initv>
  /* USER CODE BEGIN 2 */
	myAccConfigDef.dataRate = LIS3DSH_DATARATE_800;
 80060ee:	2380      	movs	r3, #128	; 0x80
 80060f0:	f887 3114 	strb.w	r3, [r7, #276]	; 0x114
	myAccConfigDef.fullScale = LIS3DSH_FULLSCALE_4;
 80060f4:	2308      	movs	r3, #8
 80060f6:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
	myAccConfigDef.enableAxes = LIS3DSH_XYZ_ENABLE;
 80060fa:	2307      	movs	r3, #7
 80060fc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	myAccConfigDef.interruptEnable = true;
 8006100:	2301      	movs	r3, #1
 8006102:	f887 3118 	strb.w	r3, [r7, #280]	; 0x118
	//myAccConfigDef.antiAliasingBW = LIS3DSH_FILTER_BW_50;
	LIS3DSH_Init(&hspi1, &myAccConfigDef);
 8006106:	f507 738a 	add.w	r3, r7, #276	; 0x114
 800610a:	4619      	mov	r1, r3
 800610c:	4869      	ldr	r0, [pc, #420]	; (80062b4 <main+0x1e4>)
 800610e:	f7fb f83b 	bl	8001188 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef>
	signal_t signal;
 8006112:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8006116:	4618      	mov	r0, r3
 8006118:	f7fe fb17 	bl	800474a <_ZN2ei11ei_signal_tC1Ev>
	  	signal.total_length = sizeof(features) / sizeof(features[0]);
 800611c:	f240 6369 	movw	r3, #1641	; 0x669
 8006120:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	  	signal.get_data = &get_feature_data;
 8006124:	4b64      	ldr	r3, [pc, #400]	; (80062b8 <main+0x1e8>)
 8006126:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800612a:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 800612e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8006132:	4611      	mov	r1, r2
 8006134:	4618      	mov	r0, r3
 8006136:	f000 fc64 	bl	8006a02 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  for(;featuresarrayisready==false;)
 800613a:	4b60      	ldr	r3, [pc, #384]	; (80062bc <main+0x1ec>)
 800613c:	781b      	ldrb	r3, [r3, #0]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d14f      	bne.n	80061e2 <main+0x112>
		{
		  	if(drdyFlag==1){
 8006142:	4b5f      	ldr	r3, [pc, #380]	; (80062c0 <main+0x1f0>)
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	2b01      	cmp	r3, #1
 8006148:	d1f7      	bne.n	800613a <main+0x6a>
		  		drdyFlag=0;
 800614a:	4b5d      	ldr	r3, [pc, #372]	; (80062c0 <main+0x1f0>)
 800614c:	2200      	movs	r2, #0
 800614e:	701a      	strb	r2, [r3, #0]
		  		myData = LIS3DSH_GetDataScaled();
 8006150:	f7fb f91e 	bl	8001390 <_Z21LIS3DSH_GetDataScaledv>
 8006154:	eef0 6a40 	vmov.f32	s13, s0
 8006158:	eeb0 7a60 	vmov.f32	s14, s1
 800615c:	eef0 7a41 	vmov.f32	s15, s2
 8006160:	4b58      	ldr	r3, [pc, #352]	; (80062c4 <main+0x1f4>)
 8006162:	edc3 6a00 	vstr	s13, [r3]
 8006166:	ed83 7a01 	vstr	s14, [r3, #4]
 800616a:	edc3 7a02 	vstr	s15, [r3, #8]
		  		  	features[3*countt]=myData.x;
 800616e:	4b56      	ldr	r3, [pc, #344]	; (80062c8 <main+0x1f8>)
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	4613      	mov	r3, r2
 8006174:	005b      	lsls	r3, r3, #1
 8006176:	4413      	add	r3, r2
 8006178:	4a52      	ldr	r2, [pc, #328]	; (80062c4 <main+0x1f4>)
 800617a:	6812      	ldr	r2, [r2, #0]
 800617c:	4953      	ldr	r1, [pc, #332]	; (80062cc <main+0x1fc>)
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	440b      	add	r3, r1
 8006182:	601a      	str	r2, [r3, #0]
		  		  	features[3*countt+1]=myData.y;
 8006184:	4b50      	ldr	r3, [pc, #320]	; (80062c8 <main+0x1f8>)
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	4613      	mov	r3, r2
 800618a:	005b      	lsls	r3, r3, #1
 800618c:	4413      	add	r3, r2
 800618e:	3301      	adds	r3, #1
 8006190:	4a4c      	ldr	r2, [pc, #304]	; (80062c4 <main+0x1f4>)
 8006192:	6852      	ldr	r2, [r2, #4]
 8006194:	494d      	ldr	r1, [pc, #308]	; (80062cc <main+0x1fc>)
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	440b      	add	r3, r1
 800619a:	601a      	str	r2, [r3, #0]
		  		  	features[3*countt+2]=myData.z;
 800619c:	4b4a      	ldr	r3, [pc, #296]	; (80062c8 <main+0x1f8>)
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	4613      	mov	r3, r2
 80061a2:	005b      	lsls	r3, r3, #1
 80061a4:	4413      	add	r3, r2
 80061a6:	3302      	adds	r3, #2
 80061a8:	4a46      	ldr	r2, [pc, #280]	; (80062c4 <main+0x1f4>)
 80061aa:	6892      	ldr	r2, [r2, #8]
 80061ac:	4947      	ldr	r1, [pc, #284]	; (80062cc <main+0x1fc>)
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	440b      	add	r3, r1
 80061b2:	601a      	str	r2, [r3, #0]
		  		  	countt++;
 80061b4:	4b44      	ldr	r3, [pc, #272]	; (80062c8 <main+0x1f8>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	3301      	adds	r3, #1
 80061ba:	4a43      	ldr	r2, [pc, #268]	; (80062c8 <main+0x1f8>)
 80061bc:	6013      	str	r3, [r2, #0]
			  if(countt==EI_CLASSIFIER_RAW_SAMPLE_COUNT){
 80061be:	4b42      	ldr	r3, [pc, #264]	; (80062c8 <main+0x1f8>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f240 2223 	movw	r2, #547	; 0x223
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d105      	bne.n	80061d6 <main+0x106>
						countt=0;
 80061ca:	4b3f      	ldr	r3, [pc, #252]	; (80062c8 <main+0x1f8>)
 80061cc:	2200      	movs	r2, #0
 80061ce:	601a      	str	r2, [r3, #0]
						featuresarrayisready=true;
 80061d0:	4b3a      	ldr	r3, [pc, #232]	; (80062bc <main+0x1ec>)
 80061d2:	2201      	movs	r2, #1
 80061d4:	701a      	strb	r2, [r3, #0]
					}
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80061d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80061da:	483d      	ldr	r0, [pc, #244]	; (80062d0 <main+0x200>)
 80061dc:	f003 fc07 	bl	80099ee <HAL_GPIO_TogglePin>
	  for(;featuresarrayisready==false;)
 80061e0:	e7ab      	b.n	800613a <main+0x6a>

		  	}

		}
	  ei_impulse_result_t result = { 0 };
 80061e2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80061e6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80061ea:	4618      	mov	r0, r3
 80061ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80061f0:	461a      	mov	r2, r3
 80061f2:	2100      	movs	r1, #0
 80061f4:	f01d f9cc 	bl	8023590 <memset>
	  	      EI_IMPULSE_ERROR res = run_classifier(&signal, &result, true);
 80061f8:	4639      	mov	r1, r7
 80061fa:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80061fe:	2201      	movs	r2, #1
 8006200:	4618      	mov	r0, r3
 8006202:	f7ff fefe 	bl	8006002 <run_classifier>
 8006206:	4603      	mov	r3, r0
 8006208:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
	  	      ei_printf("run_classifier returned: %d\n", res);
 800620c:	f997 3123 	ldrsb.w	r3, [r7, #291]	; 0x123
 8006210:	4619      	mov	r1, r3
 8006212:	4830      	ldr	r0, [pc, #192]	; (80062d4 <main+0x204>)
 8006214:	f7ff ff32 	bl	800607c <_Z9ei_printfPKcz>

	  	      ei_printf("Predictions (DSP: %d ms., Classification: %d ms., Anomaly: %d ms.): \n",
 8006218:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800621c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006220:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8006224:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8006228:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800622c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006230:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8006234:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006238:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800623c:	4826      	ldr	r0, [pc, #152]	; (80062d8 <main+0x208>)
 800623e:	f7ff ff1d 	bl	800607c <_Z9ei_printfPKcz>
	  	          result.timing.dsp, result.timing.classification, result.timing.anomaly);

	  	      // print the predictions
	  	      ei_printf("[");
 8006242:	4826      	ldr	r0, [pc, #152]	; (80062dc <main+0x20c>)
 8006244:	f7ff ff1a 	bl	800607c <_Z9ei_printfPKcz>
	  	      for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 8006248:	2300      	movs	r3, #0
 800624a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800624e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006252:	2b02      	cmp	r3, #2
 8006254:	d818      	bhi.n	8006288 <main+0x1b8>
	  	    	  ei_printf_float(result.classification[ix].value);
 8006256:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800625a:	f5a3 7294 	sub.w	r2, r3, #296	; 0x128
 800625e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006262:	3301      	adds	r3, #1
 8006264:	00db      	lsls	r3, r3, #3
 8006266:	4413      	add	r3, r2
 8006268:	3304      	adds	r3, #4
 800626a:	edd3 7a00 	vldr	s15, [r3]
 800626e:	eeb0 0a67 	vmov.f32	s0, s15
 8006272:	f014 fbb9 	bl	801a9e8 <_Z15ei_printf_floatf>
	  	  #if EI_CLASSIFIER_HAS_ANOMALY == 1
	  	          ei_printf(", ");
 8006276:	481a      	ldr	r0, [pc, #104]	; (80062e0 <main+0x210>)
 8006278:	f7ff ff00 	bl	800607c <_Z9ei_printfPKcz>
	  	      for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 800627c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006280:	3301      	adds	r3, #1
 8006282:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006286:	e7e2      	b.n	800624e <main+0x17e>
	  	              ei_printf(", ");
	  	          }
	  	  #endif
	  	      }
	  	  #if EI_CLASSIFIER_HAS_ANOMALY == 1
	  	      ei_printf_float(result.anomaly);
 8006288:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800628c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006290:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 8006294:	eeb0 0a67 	vmov.f32	s0, s15
 8006298:	f014 fba6 	bl	801a9e8 <_Z15ei_printf_floatf>
	  	  #endif
	  	      ei_printf("]\n\n\n");
 800629c:	4811      	ldr	r0, [pc, #68]	; (80062e4 <main+0x214>)
 800629e:	f7ff feed 	bl	800607c <_Z9ei_printfPKcz>


	  //memset(features, 0.0, EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE);
	  HAL_Delay(5000);
 80062a2:	f241 3088 	movw	r0, #5000	; 0x1388
 80062a6:	f003 f89b 	bl	80093e0 <HAL_Delay>
	  featuresarrayisready=false;
 80062aa:	4b04      	ldr	r3, [pc, #16]	; (80062bc <main+0x1ec>)
 80062ac:	2200      	movs	r2, #0
 80062ae:	701a      	strb	r2, [r3, #0]

  }
 80062b0:	e743      	b.n	800613a <main+0x6a>
 80062b2:	bf00      	nop
 80062b4:	200004dc 	.word	0x200004dc
 80062b8:	080060a1 	.word	0x080060a1
 80062bc:	20001ee5 	.word	0x20001ee5
 80062c0:	20001ee4 	.word	0x20001ee4
 80062c4:	20001ed8 	.word	0x20001ed8
 80062c8:	20001ee8 	.word	0x20001ee8
 80062cc:	20000534 	.word	0x20000534
 80062d0:	40020c00 	.word	0x40020c00
 80062d4:	0802831c 	.word	0x0802831c
 80062d8:	0802833c 	.word	0x0802833c
 80062dc:	08028384 	.word	0x08028384
 80062e0:	08028388 	.word	0x08028388
 80062e4:	0802838c 	.word	0x0802838c

080062e8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b094      	sub	sp, #80	; 0x50
 80062ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80062ee:	f107 0320 	add.w	r3, r7, #32
 80062f2:	2230      	movs	r2, #48	; 0x30
 80062f4:	2100      	movs	r1, #0
 80062f6:	4618      	mov	r0, r3
 80062f8:	f01d f94a 	bl	8023590 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80062fc:	f107 030c 	add.w	r3, r7, #12
 8006300:	2200      	movs	r2, #0
 8006302:	601a      	str	r2, [r3, #0]
 8006304:	605a      	str	r2, [r3, #4]
 8006306:	609a      	str	r2, [r3, #8]
 8006308:	60da      	str	r2, [r3, #12]
 800630a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800630c:	2300      	movs	r3, #0
 800630e:	60bb      	str	r3, [r7, #8]
 8006310:	4b2e      	ldr	r3, [pc, #184]	; (80063cc <_Z18SystemClock_Configv+0xe4>)
 8006312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006314:	4a2d      	ldr	r2, [pc, #180]	; (80063cc <_Z18SystemClock_Configv+0xe4>)
 8006316:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800631a:	6413      	str	r3, [r2, #64]	; 0x40
 800631c:	4b2b      	ldr	r3, [pc, #172]	; (80063cc <_Z18SystemClock_Configv+0xe4>)
 800631e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006320:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006324:	60bb      	str	r3, [r7, #8]
 8006326:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006328:	2300      	movs	r3, #0
 800632a:	607b      	str	r3, [r7, #4]
 800632c:	4b28      	ldr	r3, [pc, #160]	; (80063d0 <_Z18SystemClock_Configv+0xe8>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a27      	ldr	r2, [pc, #156]	; (80063d0 <_Z18SystemClock_Configv+0xe8>)
 8006332:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006336:	6013      	str	r3, [r2, #0]
 8006338:	4b25      	ldr	r3, [pc, #148]	; (80063d0 <_Z18SystemClock_Configv+0xe8>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006340:	607b      	str	r3, [r7, #4]
 8006342:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8006344:	2303      	movs	r3, #3
 8006346:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006348:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800634c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800634e:	2301      	movs	r3, #1
 8006350:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006352:	2310      	movs	r3, #16
 8006354:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006356:	2302      	movs	r3, #2
 8006358:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800635a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800635e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8006360:	2304      	movs	r3, #4
 8006362:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8006364:	2348      	movs	r3, #72	; 0x48
 8006366:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006368:	2302      	movs	r3, #2
 800636a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800636c:	2303      	movs	r3, #3
 800636e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006370:	f107 0320 	add.w	r3, r7, #32
 8006374:	4618      	mov	r0, r3
 8006376:	f004 fdeb 	bl	800af50 <HAL_RCC_OscConfig>
 800637a:	4603      	mov	r3, r0
 800637c:	2b00      	cmp	r3, #0
 800637e:	bf14      	ite	ne
 8006380:	2301      	movne	r3, #1
 8006382:	2300      	moveq	r3, #0
 8006384:	b2db      	uxtb	r3, r3
 8006386:	2b00      	cmp	r3, #0
 8006388:	d001      	beq.n	800638e <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 800638a:	f000 f92d 	bl	80065e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800638e:	230f      	movs	r3, #15
 8006390:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8006392:	2300      	movs	r3, #0
 8006394:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006396:	2300      	movs	r3, #0
 8006398:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800639a:	2300      	movs	r3, #0
 800639c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800639e:	2300      	movs	r3, #0
 80063a0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80063a2:	f107 030c 	add.w	r3, r7, #12
 80063a6:	2100      	movs	r1, #0
 80063a8:	4618      	mov	r0, r3
 80063aa:	f005 f849 	bl	800b440 <HAL_RCC_ClockConfig>
 80063ae:	4603      	mov	r3, r0
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	bf14      	ite	ne
 80063b4:	2301      	movne	r3, #1
 80063b6:	2300      	moveq	r3, #0
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d001      	beq.n	80063c2 <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 80063be:	f000 f913 	bl	80065e8 <Error_Handler>
  }
}
 80063c2:	bf00      	nop
 80063c4:	3750      	adds	r7, #80	; 0x50
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}
 80063ca:	bf00      	nop
 80063cc:	40023800 	.word	0x40023800
 80063d0:	40007000 	.word	0x40007000

080063d4 <_ZL11MX_CRC_Initv>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80063d8:	4b08      	ldr	r3, [pc, #32]	; (80063fc <_ZL11MX_CRC_Initv+0x28>)
 80063da:	4a09      	ldr	r2, [pc, #36]	; (8006400 <_ZL11MX_CRC_Initv+0x2c>)
 80063dc:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80063de:	4807      	ldr	r0, [pc, #28]	; (80063fc <_ZL11MX_CRC_Initv+0x28>)
 80063e0:	f003 f933 	bl	800964a <HAL_CRC_Init>
 80063e4:	4603      	mov	r3, r0
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	bf14      	ite	ne
 80063ea:	2301      	movne	r3, #1
 80063ec:	2300      	moveq	r3, #0
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d001      	beq.n	80063f8 <_ZL11MX_CRC_Initv+0x24>
  {
    Error_Handler();
 80063f4:	f000 f8f8 	bl	80065e8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80063f8:	bf00      	nop
 80063fa:	bd80      	pop	{r7, pc}
 80063fc:	200004d4 	.word	0x200004d4
 8006400:	40023000 	.word	0x40023000

08006404 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8006408:	4b1a      	ldr	r3, [pc, #104]	; (8006474 <_ZL12MX_SPI1_Initv+0x70>)
 800640a:	4a1b      	ldr	r2, [pc, #108]	; (8006478 <_ZL12MX_SPI1_Initv+0x74>)
 800640c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800640e:	4b19      	ldr	r3, [pc, #100]	; (8006474 <_ZL12MX_SPI1_Initv+0x70>)
 8006410:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006414:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8006416:	4b17      	ldr	r3, [pc, #92]	; (8006474 <_ZL12MX_SPI1_Initv+0x70>)
 8006418:	2200      	movs	r2, #0
 800641a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800641c:	4b15      	ldr	r3, [pc, #84]	; (8006474 <_ZL12MX_SPI1_Initv+0x70>)
 800641e:	2200      	movs	r2, #0
 8006420:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006422:	4b14      	ldr	r3, [pc, #80]	; (8006474 <_ZL12MX_SPI1_Initv+0x70>)
 8006424:	2200      	movs	r2, #0
 8006426:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006428:	4b12      	ldr	r3, [pc, #72]	; (8006474 <_ZL12MX_SPI1_Initv+0x70>)
 800642a:	2200      	movs	r2, #0
 800642c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800642e:	4b11      	ldr	r3, [pc, #68]	; (8006474 <_ZL12MX_SPI1_Initv+0x70>)
 8006430:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006434:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8006436:	4b0f      	ldr	r3, [pc, #60]	; (8006474 <_ZL12MX_SPI1_Initv+0x70>)
 8006438:	2210      	movs	r2, #16
 800643a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800643c:	4b0d      	ldr	r3, [pc, #52]	; (8006474 <_ZL12MX_SPI1_Initv+0x70>)
 800643e:	2200      	movs	r2, #0
 8006440:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8006442:	4b0c      	ldr	r3, [pc, #48]	; (8006474 <_ZL12MX_SPI1_Initv+0x70>)
 8006444:	2200      	movs	r2, #0
 8006446:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006448:	4b0a      	ldr	r3, [pc, #40]	; (8006474 <_ZL12MX_SPI1_Initv+0x70>)
 800644a:	2200      	movs	r2, #0
 800644c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800644e:	4b09      	ldr	r3, [pc, #36]	; (8006474 <_ZL12MX_SPI1_Initv+0x70>)
 8006450:	220a      	movs	r2, #10
 8006452:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006454:	4807      	ldr	r0, [pc, #28]	; (8006474 <_ZL12MX_SPI1_Initv+0x70>)
 8006456:	f005 f9eb 	bl	800b830 <HAL_SPI_Init>
 800645a:	4603      	mov	r3, r0
 800645c:	2b00      	cmp	r3, #0
 800645e:	bf14      	ite	ne
 8006460:	2301      	movne	r3, #1
 8006462:	2300      	moveq	r3, #0
 8006464:	b2db      	uxtb	r3, r3
 8006466:	2b00      	cmp	r3, #0
 8006468:	d001      	beq.n	800646e <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 800646a:	f000 f8bd 	bl	80065e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800646e:	bf00      	nop
 8006470:	bd80      	pop	{r7, pc}
 8006472:	bf00      	nop
 8006474:	200004dc 	.word	0x200004dc
 8006478:	40013000 	.word	0x40013000

0800647c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b08a      	sub	sp, #40	; 0x28
 8006480:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006482:	f107 0314 	add.w	r3, r7, #20
 8006486:	2200      	movs	r2, #0
 8006488:	601a      	str	r2, [r3, #0]
 800648a:	605a      	str	r2, [r3, #4]
 800648c:	609a      	str	r2, [r3, #8]
 800648e:	60da      	str	r2, [r3, #12]
 8006490:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006492:	2300      	movs	r3, #0
 8006494:	613b      	str	r3, [r7, #16]
 8006496:	4b48      	ldr	r3, [pc, #288]	; (80065b8 <_ZL12MX_GPIO_Initv+0x13c>)
 8006498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800649a:	4a47      	ldr	r2, [pc, #284]	; (80065b8 <_ZL12MX_GPIO_Initv+0x13c>)
 800649c:	f043 0310 	orr.w	r3, r3, #16
 80064a0:	6313      	str	r3, [r2, #48]	; 0x30
 80064a2:	4b45      	ldr	r3, [pc, #276]	; (80065b8 <_ZL12MX_GPIO_Initv+0x13c>)
 80064a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064a6:	f003 0310 	and.w	r3, r3, #16
 80064aa:	613b      	str	r3, [r7, #16]
 80064ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80064ae:	2300      	movs	r3, #0
 80064b0:	60fb      	str	r3, [r7, #12]
 80064b2:	4b41      	ldr	r3, [pc, #260]	; (80065b8 <_ZL12MX_GPIO_Initv+0x13c>)
 80064b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064b6:	4a40      	ldr	r2, [pc, #256]	; (80065b8 <_ZL12MX_GPIO_Initv+0x13c>)
 80064b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064bc:	6313      	str	r3, [r2, #48]	; 0x30
 80064be:	4b3e      	ldr	r3, [pc, #248]	; (80065b8 <_ZL12MX_GPIO_Initv+0x13c>)
 80064c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064c6:	60fb      	str	r3, [r7, #12]
 80064c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80064ca:	2300      	movs	r3, #0
 80064cc:	60bb      	str	r3, [r7, #8]
 80064ce:	4b3a      	ldr	r3, [pc, #232]	; (80065b8 <_ZL12MX_GPIO_Initv+0x13c>)
 80064d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064d2:	4a39      	ldr	r2, [pc, #228]	; (80065b8 <_ZL12MX_GPIO_Initv+0x13c>)
 80064d4:	f043 0301 	orr.w	r3, r3, #1
 80064d8:	6313      	str	r3, [r2, #48]	; 0x30
 80064da:	4b37      	ldr	r3, [pc, #220]	; (80065b8 <_ZL12MX_GPIO_Initv+0x13c>)
 80064dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064de:	f003 0301 	and.w	r3, r3, #1
 80064e2:	60bb      	str	r3, [r7, #8]
 80064e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80064e6:	2300      	movs	r3, #0
 80064e8:	607b      	str	r3, [r7, #4]
 80064ea:	4b33      	ldr	r3, [pc, #204]	; (80065b8 <_ZL12MX_GPIO_Initv+0x13c>)
 80064ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ee:	4a32      	ldr	r2, [pc, #200]	; (80065b8 <_ZL12MX_GPIO_Initv+0x13c>)
 80064f0:	f043 0308 	orr.w	r3, r3, #8
 80064f4:	6313      	str	r3, [r2, #48]	; 0x30
 80064f6:	4b30      	ldr	r3, [pc, #192]	; (80065b8 <_ZL12MX_GPIO_Initv+0x13c>)
 80064f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064fa:	f003 0308 	and.w	r3, r3, #8
 80064fe:	607b      	str	r3, [r7, #4]
 8006500:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006502:	2300      	movs	r3, #0
 8006504:	603b      	str	r3, [r7, #0]
 8006506:	4b2c      	ldr	r3, [pc, #176]	; (80065b8 <_ZL12MX_GPIO_Initv+0x13c>)
 8006508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800650a:	4a2b      	ldr	r2, [pc, #172]	; (80065b8 <_ZL12MX_GPIO_Initv+0x13c>)
 800650c:	f043 0302 	orr.w	r3, r3, #2
 8006510:	6313      	str	r3, [r2, #48]	; 0x30
 8006512:	4b29      	ldr	r3, [pc, #164]	; (80065b8 <_ZL12MX_GPIO_Initv+0x13c>)
 8006514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006516:	f003 0302 	and.w	r3, r3, #2
 800651a:	603b      	str	r3, [r7, #0]
 800651c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MEMS_CS_GPIO_Port, MEMS_CS_Pin, GPIO_PIN_RESET);
 800651e:	2200      	movs	r2, #0
 8006520:	2108      	movs	r1, #8
 8006522:	4826      	ldr	r0, [pc, #152]	; (80065bc <_ZL12MX_GPIO_Initv+0x140>)
 8006524:	f003 fa4a 	bl	80099bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8006528:	2200      	movs	r2, #0
 800652a:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800652e:	4824      	ldr	r0, [pc, #144]	; (80065c0 <_ZL12MX_GPIO_Initv+0x144>)
 8006530:	f003 fa44 	bl	80099bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MEMS_CS_Pin */
  GPIO_InitStruct.Pin = MEMS_CS_Pin;
 8006534:	2308      	movs	r3, #8
 8006536:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006538:	2301      	movs	r3, #1
 800653a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800653c:	2300      	movs	r3, #0
 800653e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006540:	2300      	movs	r3, #0
 8006542:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MEMS_CS_GPIO_Port, &GPIO_InitStruct);
 8006544:	f107 0314 	add.w	r3, r7, #20
 8006548:	4619      	mov	r1, r3
 800654a:	481c      	ldr	r0, [pc, #112]	; (80065bc <_ZL12MX_GPIO_Initv+0x140>)
 800654c:	f003 f89a 	bl	8009684 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8006550:	2301      	movs	r3, #1
 8006552:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006554:	2300      	movs	r3, #0
 8006556:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006558:	2300      	movs	r3, #0
 800655a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800655c:	f107 0314 	add.w	r3, r7, #20
 8006560:	4619      	mov	r1, r3
 8006562:	4818      	ldr	r0, [pc, #96]	; (80065c4 <_ZL12MX_GPIO_Initv+0x148>)
 8006564:	f003 f88e 	bl	8009684 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8006568:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800656c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800656e:	2301      	movs	r3, #1
 8006570:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006572:	2300      	movs	r3, #0
 8006574:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006576:	2300      	movs	r3, #0
 8006578:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800657a:	f107 0314 	add.w	r3, r7, #20
 800657e:	4619      	mov	r1, r3
 8006580:	480f      	ldr	r0, [pc, #60]	; (80065c0 <_ZL12MX_GPIO_Initv+0x144>)
 8006582:	f003 f87f 	bl	8009684 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8006586:	2301      	movs	r3, #1
 8006588:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800658a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800658e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006590:	2300      	movs	r3, #0
 8006592:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006594:	f107 0314 	add.w	r3, r7, #20
 8006598:	4619      	mov	r1, r3
 800659a:	4808      	ldr	r0, [pc, #32]	; (80065bc <_ZL12MX_GPIO_Initv+0x140>)
 800659c:	f003 f872 	bl	8009684 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80065a0:	2200      	movs	r2, #0
 80065a2:	2100      	movs	r1, #0
 80065a4:	2006      	movs	r0, #6
 80065a6:	f003 f81a 	bl	80095de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80065aa:	2006      	movs	r0, #6
 80065ac:	f003 f833 	bl	8009616 <HAL_NVIC_EnableIRQ>

}
 80065b0:	bf00      	nop
 80065b2:	3728      	adds	r7, #40	; 0x28
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}
 80065b8:	40023800 	.word	0x40023800
 80065bc:	40021000 	.word	0x40021000
 80065c0:	40020c00 	.word	0x40020c00
 80065c4:	40020000 	.word	0x40020000

080065c8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b083      	sub	sp, #12
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	4603      	mov	r3, r0
 80065d0:	80fb      	strh	r3, [r7, #6]
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
 /* if(GPIO_Pin==GPIO_PIN_0){
  	  if(HAL_GPIO_ReadPin( GPIOA,GPIO_PIN_0)){*/
  drdyFlag = 1;
 80065d2:	4b04      	ldr	r3, [pc, #16]	; (80065e4 <HAL_GPIO_EXTI_Callback+0x1c>)
 80065d4:	2201      	movs	r2, #1
 80065d6:	701a      	strb	r2, [r3, #0]


}
 80065d8:	bf00      	nop
 80065da:	370c      	adds	r7, #12
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr
 80065e4:	20001ee4 	.word	0x20001ee4

080065e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80065e8:	b480      	push	{r7}
 80065ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 80065ec:	e7fe      	b.n	80065ec <Error_Handler+0x4>

080065ee <_ZNSt6vectorIbN2ei7EiAllocIbEEEC1EjRKbRKS2_>:
      explicit
      vector(size_type __n, const allocator_type& __a = allocator_type())
      : vector(__n, false, __a)
      { }

      vector(size_type __n, const bool& __value,
 80065ee:	b580      	push	{r7, lr}
 80065f0:	b084      	sub	sp, #16
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	60f8      	str	r0, [r7, #12]
 80065f6:	60b9      	str	r1, [r7, #8]
 80065f8:	607a      	str	r2, [r7, #4]
 80065fa:	603b      	str	r3, [r7, #0]
#else
      explicit
      vector(size_type __n, const bool& __value = bool(),
	     const allocator_type& __a = allocator_type())
#endif
      : _Base(__a)
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	6839      	ldr	r1, [r7, #0]
 8006600:	4618      	mov	r0, r3
 8006602:	f000 fa4a 	bl	8006a9a <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEEC1ERKS2_>
      {
	_M_initialize(__n);
 8006606:	68b9      	ldr	r1, [r7, #8]
 8006608:	68f8      	ldr	r0, [r7, #12]
 800660a:	f000 fa69 	bl	8006ae0 <_ZNSt6vectorIbN2ei7EiAllocIbEEE13_M_initializeEj>
	_M_initialize_value(__value);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	4619      	mov	r1, r3
 8006614:	68f8      	ldr	r0, [r7, #12]
 8006616:	f000 fab1 	bl	8006b7c <_ZNSt6vectorIbN2ei7EiAllocIbEEE19_M_initialize_valueEb>
      }
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	4618      	mov	r0, r3
 800661e:	3710      	adds	r7, #16
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}

08006624 <_ZNSt6vectorIbN2ei7EiAllocIbEEED1Ev>:
	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
	  _M_initialize_dispatch(__first, __last, _Integral());
	}
#endif

      ~vector() _GLIBCXX_NOEXCEPT { }
 8006624:	b580      	push	{r7, lr}
 8006626:	b082      	sub	sp, #8
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	4618      	mov	r0, r3
 8006630:	f000 fa4a 	bl	8006ac8 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEED1Ev>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	4618      	mov	r0, r3
 8006638:	3708      	adds	r7, #8
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}

0800663e <_ZNSt6vectorIbN2ei7EiAllocIbEEEixEj>:
      _GLIBCXX_NODISCARD bool
      empty() const _GLIBCXX_NOEXCEPT
      { return begin() == end(); }

      reference
      operator[](size_type __n)
 800663e:	b580      	push	{r7, lr}
 8006640:	b086      	sub	sp, #24
 8006642:	af00      	add	r7, sp, #0
 8006644:	60f8      	str	r0, [r7, #12]
 8006646:	60b9      	str	r1, [r7, #8]
 8006648:	607a      	str	r2, [r7, #4]
      {
	return *iterator(this->_M_impl._M_start._M_p
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	681a      	ldr	r2, [r3, #0]
			 + __n / int(_S_word_bit), __n % int(_S_word_bit));
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	095b      	lsrs	r3, r3, #5
 8006652:	009b      	lsls	r3, r3, #2
	return *iterator(this->_M_impl._M_start._M_p
 8006654:	18d1      	adds	r1, r2, r3
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f003 021f 	and.w	r2, r3, #31
 800665c:	f107 0310 	add.w	r3, r7, #16
 8006660:	4618      	mov	r0, r3
 8006662:	f7fb f849 	bl	80016f8 <_ZNSt13_Bit_iteratorC1EPmj>
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f107 0210 	add.w	r2, r7, #16
 800666c:	4611      	mov	r1, r2
 800666e:	4618      	mov	r0, r3
 8006670:	f7fb f853 	bl	800171a <_ZNKSt13_Bit_iteratordeEv>
			 + __n / int(_S_word_bit), __n % int(_S_word_bit));
 8006674:	bf00      	nop
      }
 8006676:	68f8      	ldr	r0, [r7, #12]
 8006678:	3718      	adds	r7, #24
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}

0800667e <_ZSt4moveIRmEONSt16remove_referenceIT_E4typeEOS2_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 800667e:	b480      	push	{r7}
 8006680:	b083      	sub	sp, #12
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4618      	mov	r0, r3
 800668a:	370c      	adds	r7, #12
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr

08006694 <_ZSt4swapImENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f7ff ffed 	bl	800667e <_ZSt4moveIRmEONSt16remove_referenceIT_E4typeEOS2_>
 80066a4:	4603      	mov	r3, r0
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 80066aa:	6838      	ldr	r0, [r7, #0]
 80066ac:	f7ff ffe7 	bl	800667e <_ZSt4moveIRmEONSt16remove_referenceIT_E4typeEOS2_>
 80066b0:	4603      	mov	r3, r0
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80066b8:	f107 030c 	add.w	r3, r7, #12
 80066bc:	4618      	mov	r0, r3
 80066be:	f7ff ffde 	bl	800667e <_ZSt4moveIRmEONSt16remove_referenceIT_E4typeEOS2_>
 80066c2:	4603      	mov	r3, r0
 80066c4:	681a      	ldr	r2, [r3, #0]
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	601a      	str	r2, [r3, #0]
    }
 80066ca:	bf00      	nop
 80066cc:	3710      	adds	r7, #16
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}

080066d2 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 80066d2:	b5b0      	push	{r4, r5, r7, lr}
 80066d4:	b082      	sub	sp, #8
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	ed87 0a01 	vstr	s0, [r7, #4]
 80066dc:	6038      	str	r0, [r7, #0]
      return pow(__type(__x), __type(__y));
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f7f9 ff3c 	bl	800055c <__aeabi_f2d>
 80066e4:	4604      	mov	r4, r0
 80066e6:	460d      	mov	r5, r1
 80066e8:	6838      	ldr	r0, [r7, #0]
 80066ea:	f7f9 ff25 	bl	8000538 <__aeabi_i2d>
 80066ee:	4602      	mov	r2, r0
 80066f0:	460b      	mov	r3, r1
 80066f2:	ec43 2b11 	vmov	d1, r2, r3
 80066f6:	ec45 4b10 	vmov	d0, r4, r5
 80066fa:	f01a fb8f 	bl	8020e1c <pow>
 80066fe:	eeb0 7a40 	vmov.f32	s14, s0
 8006702:	eef0 7a60 	vmov.f32	s15, s1
    }
 8006706:	eeb0 0a47 	vmov.f32	s0, s14
 800670a:	eef0 0a67 	vmov.f32	s1, s15
 800670e:	3708      	adds	r7, #8
 8006710:	46bd      	mov	sp, r7
 8006712:	bdb0      	pop	{r4, r5, r7, pc}

08006714 <_ZNSt15__uniq_ptr_dataIvPFvPvELb1ELb1EECI1St15__uniq_ptr_implIvS2_EIS2_EES0_OT_>:
  template <typename _Tp, typename _Dp,
	    bool = is_move_constructible<_Dp>::value,
	    bool = is_move_assignable<_Dp>::value>
    struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>
    {
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8006714:	b580      	push	{r7, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	af00      	add	r7, sp, #0
 800671a:	60f8      	str	r0, [r7, #12]
 800671c:	60b9      	str	r1, [r7, #8]
 800671e:	607a      	str	r2, [r7, #4]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	68b9      	ldr	r1, [r7, #8]
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	4618      	mov	r0, r3
 8006728:	f000 fa77 	bl	8006c1a <_ZNSt15__uniq_ptr_implIvPFvPvEEC1IS2_EES0_OT_>
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	4618      	mov	r0, r3
 8006730:	3710      	adds	r7, #16
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}

08006736 <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>:
       *
       * The deleter will be initialized with @p std::move(__d)
       */
      template<typename _Del = deleter_type,
	       typename = _Require<is_move_constructible<_Del>>>
	unique_ptr(pointer __p,
 8006736:	b590      	push	{r4, r7, lr}
 8006738:	b085      	sub	sp, #20
 800673a:	af00      	add	r7, sp, #0
 800673c:	60f8      	str	r0, [r7, #12]
 800673e:	60b9      	str	r1, [r7, #8]
 8006740:	607a      	str	r2, [r7, #4]
		   __enable_if_t<!is_lvalue_reference<_Del>::value,
				 _Del&&> __d) noexcept
	: _M_t(__p, std::move(__d))
 8006742:	68fc      	ldr	r4, [r7, #12]
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f000 fa5d 	bl	8006c04 <_ZSt4moveIRPFvPvEEONSt16remove_referenceIT_E4typeEOS5_>
 800674a:	4603      	mov	r3, r0
 800674c:	461a      	mov	r2, r3
 800674e:	68b9      	ldr	r1, [r7, #8]
 8006750:	4620      	mov	r0, r4
 8006752:	f7ff ffdf 	bl	8006714 <_ZNSt15__uniq_ptr_dataIvPFvPvELb1ELb1EECI1St15__uniq_ptr_implIvS2_EIS2_EES0_OT_>
	{ }
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	4618      	mov	r0, r3
 800675a:	3714      	adds	r7, #20
 800675c:	46bd      	mov	sp, r7
 800675e:	bd90      	pop	{r4, r7, pc}

08006760 <_ZNSt10unique_ptrIvPFvPvEED1Ev>:
	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#pragma GCC diagnostic pop
#endif

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
 8006760:	b590      	push	{r4, r7, lr}
 8006762:	b085      	sub	sp, #20
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	4618      	mov	r0, r3
 800676c:	f000 fa6b 	bl	8006c46 <_ZNSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>
 8006770:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d00b      	beq.n	8006792 <_ZNSt10unique_ptrIvPFvPvEED1Ev+0x32>
	  get_deleter()(std::move(__ptr));
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 fa70 	bl	8006c60 <_ZNSt10unique_ptrIvPFvPvEE11get_deleterEv>
 8006780:	4603      	mov	r3, r0
 8006782:	681c      	ldr	r4, [r3, #0]
 8006784:	68f8      	ldr	r0, [r7, #12]
 8006786:	f000 fa78 	bl	8006c7a <_ZSt4moveIRPvEONSt16remove_referenceIT_E4typeEOS3_>
 800678a:	4603      	mov	r3, r0
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4618      	mov	r0, r3
 8006790:	47a0      	blx	r4
	__ptr = pointer();
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2200      	movs	r2, #0
 8006796:	601a      	str	r2, [r3, #0]
      }
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	4618      	mov	r0, r3
 800679c:	3714      	adds	r7, #20
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd90      	pop	{r4, r7, pc}

080067a2 <_ZNSt10unique_ptrIvPFvPvEE5resetES0_>:
       * @param __p  The new pointer to store.
       *
       * The deleter will be invoked if a pointer is already owned.
       */
      void
      reset(pointer __p = pointer()) noexcept
 80067a2:	b590      	push	{r4, r7, lr}
 80067a4:	b083      	sub	sp, #12
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
 80067aa:	6039      	str	r1, [r7, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	_M_t.reset(std::move(__p));
 80067ac:	687c      	ldr	r4, [r7, #4]
 80067ae:	463b      	mov	r3, r7
 80067b0:	4618      	mov	r0, r3
 80067b2:	f000 fa62 	bl	8006c7a <_ZSt4moveIRPvEONSt16remove_referenceIT_E4typeEOS3_>
 80067b6:	4603      	mov	r3, r0
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4619      	mov	r1, r3
 80067bc:	4620      	mov	r0, r4
 80067be:	f000 fa67 	bl	8006c90 <_ZNSt15__uniq_ptr_implIvPFvPvEE5resetES0_>
      }
 80067c2:	bf00      	nop
 80067c4:	370c      	adds	r7, #12
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd90      	pop	{r4, r7, pc}

080067ca <_ZSt3maxIfERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 80067ca:	b480      	push	{r7}
 80067cc:	b083      	sub	sp, #12
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
 80067d2:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	ed93 7a00 	vldr	s14, [r3]
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	edd3 7a00 	vldr	s15, [r3]
 80067e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80067e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067e8:	d501      	bpl.n	80067ee <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	e000      	b.n	80067f0 <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 80067ee:	687b      	ldr	r3, [r7, #4]
    }
 80067f0:	4618      	mov	r0, r3
 80067f2:	370c      	adds	r7, #12
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr

080067fc <_ZNKSt8functionIFijjPfEEclEjjS0_>:
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80067fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006800:	b084      	sub	sp, #16
 8006802:	af00      	add	r7, sp, #0
 8006804:	60f8      	str	r0, [r7, #12]
 8006806:	60b9      	str	r1, [r7, #8]
 8006808:	607a      	str	r2, [r7, #4]
 800680a:	603b      	str	r3, [r7, #0]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	4618      	mov	r0, r3
 8006810:	f7fa fff2 	bl	80017f8 <_ZNKSt14_Function_base8_M_emptyEv>
 8006814:	4603      	mov	r3, r0
 8006816:	2b00      	cmp	r3, #0
 8006818:	d001      	beq.n	800681e <_ZNKSt8functionIFijjPfEEclEjjS0_+0x22>
	__throw_bad_function_call();
 800681a:	f7fb f893 	bl	8001944 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	68dc      	ldr	r4, [r3, #12]
 8006822:	68fd      	ldr	r5, [r7, #12]
 8006824:	f107 0308 	add.w	r3, r7, #8
 8006828:	4618      	mov	r0, r3
 800682a:	f000 fa50 	bl	8006cce <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800682e:	4606      	mov	r6, r0
 8006830:	1d3b      	adds	r3, r7, #4
 8006832:	4618      	mov	r0, r3
 8006834:	f000 fa4b 	bl	8006cce <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8006838:	4680      	mov	r8, r0
 800683a:	463b      	mov	r3, r7
 800683c:	4618      	mov	r0, r3
 800683e:	f000 fa51 	bl	8006ce4 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8006842:	4603      	mov	r3, r0
 8006844:	4642      	mov	r2, r8
 8006846:	4631      	mov	r1, r6
 8006848:	4628      	mov	r0, r5
 800684a:	47a0      	blx	r4
 800684c:	4603      	mov	r3, r0
    }
 800684e:	4618      	mov	r0, r3
 8006850:	3710      	adds	r7, #16
 8006852:	46bd      	mov	sp, r7
 8006854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006858 <_ZSt5floorIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    floor(_Tp __x)
 8006858:	b580      	push	{r7, lr}
 800685a:	b082      	sub	sp, #8
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
    { return __builtin_floor(__x); }
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f7f9 fe69 	bl	8000538 <__aeabi_i2d>
 8006866:	4602      	mov	r2, r0
 8006868:	460b      	mov	r3, r1
 800686a:	ec43 2b17 	vmov	d7, r2, r3
 800686e:	eeb0 0a47 	vmov.f32	s0, s14
 8006872:	eef0 0a67 	vmov.f32	s1, s15
 8006876:	3708      	adds	r7, #8
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800687c:	b580      	push	{r7, lr}
 800687e:	b082      	sub	sp, #8
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	4618      	mov	r0, r3
 8006888:	f000 fa37 	bl	8006cfa <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_Vector_impl_dataC1Ev>
	{ }
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	4618      	mov	r0, r3
 8006890:	3708      	adds	r7, #8
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}

08006896 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8006896:	b580      	push	{r7, lr}
 8006898:	b082      	sub	sp, #8
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	689a      	ldr	r2, [r3, #8]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	1ad3      	subs	r3, r2, r3
 80068ac:	10db      	asrs	r3, r3, #3
	_M_deallocate(_M_impl._M_start,
 80068ae:	461a      	mov	r2, r3
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f000 fa36 	bl	8006d22 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE13_M_deallocateEPS3_j>
      }
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	4618      	mov	r0, r3
 80068ba:	3708      	adds	r7, #8
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}

080068c0 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 80068c0:	b5b0      	push	{r4, r5, r7, lr}
 80068c2:	b082      	sub	sp, #8
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681c      	ldr	r4, [r3, #0]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	4618      	mov	r0, r3
 80068d4:	f000 fa38 	bl	8006d48 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>
 80068d8:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80068da:	461a      	mov	r2, r3
 80068dc:	4629      	mov	r1, r5
 80068de:	4620      	mov	r0, r4
 80068e0:	f000 fa3d 	bl	8006d5e <_ZSt8_DestroyIPN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEvT_S7_RT0_>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	4618      	mov	r0, r3
 80068e8:	f7ff ffd5 	bl	8006896 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEED1Ev>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	4618      	mov	r0, r3
 80068f0:	3708      	adds	r7, #8
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bdb0      	pop	{r4, r5, r7, pc}

080068f6 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE9push_backERKS3_>:
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
 80068f6:	b580      	push	{r7, lr}
 80068f8:	b082      	sub	sp, #8
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	6078      	str	r0, [r7, #4]
 80068fe:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	685a      	ldr	r2, [r3, #4]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	429a      	cmp	r2, r3
 800690a:	d00d      	beq.n	8006928 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE9push_backERKS3_+0x32>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	683a      	ldr	r2, [r7, #0]
 8006914:	4619      	mov	r1, r3
 8006916:	f000 fa3c 	bl	8006d92 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE9constructIS4_JRKS4_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS5_PT_DpOSA_>
				     __x);
	    ++this->_M_impl._M_finish;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	f103 0208 	add.w	r2, r3, #8
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 8006926:	e008      	b.n	800693a <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE9push_backERKS3_+0x44>
	  _M_realloc_insert(end(), __x);
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f000 f81a 	bl	8006962 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE3endEv>
 800692e:	4603      	mov	r3, r0
 8006930:	683a      	ldr	r2, [r7, #0]
 8006932:	4619      	mov	r1, r3
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f000 fa55 	bl	8006de4 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_>
      }
 800693a:	bf00      	nop
 800693c:	3708      	adds	r7, #8
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}

08006942 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8006942:	b580      	push	{r7, lr}
 8006944:	b084      	sub	sp, #16
 8006946:	af00      	add	r7, sp, #0
 8006948:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	f107 030c 	add.w	r3, r7, #12
 8006950:	4611      	mov	r1, r2
 8006952:	4618      	mov	r0, r3
 8006954:	f000 fb02 	bl	8006f5c <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEC1ERKS5_>
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	4618      	mov	r0, r3
 800695c:	3710      	adds	r7, #16
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}

08006962 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8006962:	b580      	push	{r7, lr}
 8006964:	b084      	sub	sp, #16
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	1d1a      	adds	r2, r3, #4
 800696e:	f107 030c 	add.w	r3, r7, #12
 8006972:	4611      	mov	r1, r2
 8006974:	4618      	mov	r0, r3
 8006976:	f000 faf1 	bl	8006f5c <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEC1ERKS5_>
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	4618      	mov	r0, r3
 800697e:	3710      	adds	r7, #16
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}

08006984 <_ZSt4sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEZNS4_L14find_fft_peaksEPNS2_9ei_matrixESD_fftEUlRKS5_SF_E_EvT_SH_T0_>:
   *  @p stable_sort() if this is needed.
  */
  template<typename _RandomAccessIterator, typename _Compare>
    _GLIBCXX20_CONSTEXPR
    inline void
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8006984:	b590      	push	{r4, r7, lr}
 8006986:	b085      	sub	sp, #20
 8006988:	af00      	add	r7, sp, #0
 800698a:	60f8      	str	r0, [r7, #12]
 800698c:	60b9      	str	r1, [r7, #8]
 800698e:	713a      	strb	r2, [r7, #4]
	    typename iterator_traits<_RandomAccessIterator>::value_type,
	    typename iterator_traits<_RandomAccessIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);
      __glibcxx_requires_irreflexive_pred(__first, __last, __comp);

      std::__sort(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
 8006990:	4618      	mov	r0, r3
 8006992:	f000 faf3 	bl	8006f7c <_ZN9__gnu_cxx5__ops16__iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EENS0_15_Iter_comp_iterIT_EESC_>
 8006996:	4622      	mov	r2, r4
 8006998:	68b9      	ldr	r1, [r7, #8]
 800699a:	68f8      	ldr	r0, [r7, #12]
 800699c:	f000 fb01 	bl	8006fa2 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>
    }
 80069a0:	bf00      	nop
 80069a2:	3714      	adds	r7, #20
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd90      	pop	{r4, r7, pc}

080069a8 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80069a8:	b480      	push	{r7}
 80069aa:	b083      	sub	sp, #12
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	685a      	ldr	r2, [r3, #4]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	1ad3      	subs	r3, r2, r3
 80069ba:	10db      	asrs	r3, r3, #3
 80069bc:	4618      	mov	r0, r3
 80069be:	370c      	adds	r7, #12
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr

080069c8 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 80069c8:	b480      	push	{r7}
 80069ca:	b083      	sub	sp, #12
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	00db      	lsls	r3, r3, #3
 80069da:	4413      	add	r3, r2
      }
 80069dc:	4618      	mov	r0, r3
 80069de:	370c      	adds	r7, #12
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr

080069e8 <_ZNSt8functionIFijjPfEEC1Ev>:
      function() noexcept
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b082      	sub	sp, #8
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	4618      	mov	r0, r3
 80069f4:	f7fa fedf 	bl	80017b6 <_ZNSt14_Function_baseC1Ev>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	4618      	mov	r0, r3
 80069fc:	3708      	adds	r7, #8
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}

08006a02 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_>:
	operator=(_Functor&& __f)
 8006a02:	b580      	push	{r7, lr}
 8006a04:	b086      	sub	sp, #24
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	6078      	str	r0, [r7, #4]
 8006a0a:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
 8006a0c:	6838      	ldr	r0, [r7, #0]
 8006a0e:	f000 faf5 	bl	8006ffc <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>
 8006a12:	4603      	mov	r3, r0
 8006a14:	681a      	ldr	r2, [r3, #0]
 8006a16:	f107 0308 	add.w	r3, r7, #8
 8006a1a:	4611      	mov	r1, r2
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f000 faf9 	bl	8007014 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_>
 8006a22:	f107 0308 	add.w	r3, r7, #8
 8006a26:	6879      	ldr	r1, [r7, #4]
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f000 f8ca 	bl	8006bc2 <_ZNSt8functionIFijjPfEE4swapERS2_>
 8006a2e:	f107 0308 	add.w	r3, r7, #8
 8006a32:	4618      	mov	r0, r3
 8006a34:	f7fd fe7c 	bl	8004730 <_ZNSt8functionIFijjPfEED1Ev>
	  return *this;
 8006a38:	687b      	ldr	r3, [r7, #4]
	}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3718      	adds	r7, #24
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}

08006a42 <_ZNSt8functionIFijjPfEEaSIZN14SignalWithAxes10get_signalEvEUljjS0_E_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JjjS0_EEEE5valueERS2_E4typeEOS9_>:
	operator=(_Functor&& __f)
 8006a42:	b580      	push	{r7, lr}
 8006a44:	b086      	sub	sp, #24
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
 8006a4a:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
 8006a4c:	6838      	ldr	r0, [r7, #0]
 8006a4e:	f000 fb0b 	bl	8007068 <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>
 8006a52:	4602      	mov	r2, r0
 8006a54:	f107 0308 	add.w	r3, r7, #8
 8006a58:	6811      	ldr	r1, [r2, #0]
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f000 fb10 	bl	8007080 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_>
 8006a60:	f107 0308 	add.w	r3, r7, #8
 8006a64:	6879      	ldr	r1, [r7, #4]
 8006a66:	4618      	mov	r0, r3
 8006a68:	f000 f8ab 	bl	8006bc2 <_ZNSt8functionIFijjPfEE4swapERS2_>
 8006a6c:	f107 0308 	add.w	r3, r7, #8
 8006a70:	4618      	mov	r0, r3
 8006a72:	f7fd fe5d 	bl	8004730 <_ZNSt8functionIFijjPfEED1Ev>
	  return *this;
 8006a76:	687b      	ldr	r3, [r7, #4]
	}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3718      	adds	r7, #24
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}

08006a80 <_ZNKSt10unique_ptrIvPFvPvEE3getEv>:
      get() const noexcept
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b082      	sub	sp, #8
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f000 fb22 	bl	80070d4 <_ZNKSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>
 8006a90:	4603      	mov	r3, r0
 8006a92:	4618      	mov	r0, r3
 8006a94:	3708      	adds	r7, #8
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}

08006a9a <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEEC1ERKS2_>:
      _Bvector_base(const allocator_type& __a)
 8006a9a:	b590      	push	{r4, r7, lr}
 8006a9c:	b085      	sub	sp, #20
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	6078      	str	r0, [r7, #4]
 8006aa2:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 8006aa4:	687c      	ldr	r4, [r7, #4]
 8006aa6:	f107 030c 	add.w	r3, r7, #12
 8006aaa:	6839      	ldr	r1, [r7, #0]
 8006aac:	4618      	mov	r0, r3
 8006aae:	f000 fb1f 	bl	80070f0 <_ZN2ei7EiAllocImEC1IbEERKNS0_IT_EE>
 8006ab2:	f107 030c 	add.w	r3, r7, #12
 8006ab6:	4619      	mov	r1, r3
 8006ab8:	4620      	mov	r0, r4
 8006aba:	f000 fb25 	bl	8007108 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE13_Bvector_implC1ERKNS1_ImEE>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3714      	adds	r7, #20
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd90      	pop	{r4, r7, pc}

08006ac8 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEED1Ev>:
      ~_Bvector_base()
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b082      	sub	sp, #8
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
      { this->_M_deallocate(); }
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f000 fb27 	bl	8007124 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE13_M_deallocateEv>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3708      	adds	r7, #8
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}

08006ae0 <_ZNSt6vectorIbN2ei7EiAllocIbEEE13_M_initializeEj>:
	return std::copy(const_iterator(__last._M_p, 0), __last,
			 iterator(__q, 0));
      }

      void
      _M_initialize(size_type __n)
 8006ae0:	b590      	push	{r4, r7, lr}
 8006ae2:	b08b      	sub	sp, #44	; 0x2c
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	60f8      	str	r0, [r7, #12]
 8006ae8:	60b9      	str	r1, [r7, #8]
      {
	if (__n)
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d021      	beq.n	8006b34 <_ZNSt6vectorIbN2ei7EiAllocIbEEE13_M_initializeEj+0x54>
	  {
	    _Bit_pointer __q = this->_M_allocate(__n);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	68b9      	ldr	r1, [r7, #8]
 8006af4:	4618      	mov	r0, r3
 8006af6:	f000 fb3a 	bl	800716e <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE11_M_allocateEj>
 8006afa:	6278      	str	r0, [r7, #36]	; 0x24
	    this->_M_impl._M_end_of_storage = __q + _S_nword(__n);
 8006afc:	68b8      	ldr	r0, [r7, #8]
 8006afe:	f000 fb49 	bl	8007194 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE8_S_nwordEj>
 8006b02:	4603      	mov	r3, r0
 8006b04:	009b      	lsls	r3, r3, #2
 8006b06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b08:	441a      	add	r2, r3
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	611a      	str	r2, [r3, #16]
	    this->_M_impl._M_start = iterator(std::__addressof(*__q), 0);
 8006b0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b10:	f000 fb4d 	bl	80071ae <_ZSt11__addressofImEPT_RS0_>
 8006b14:	4601      	mov	r1, r0
 8006b16:	f107 0314 	add.w	r3, r7, #20
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f7fa fdeb 	bl	80016f8 <_ZNSt13_Bit_iteratorC1EPmj>
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	461a      	mov	r2, r3
 8006b26:	f107 0314 	add.w	r3, r7, #20
 8006b2a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006b2e:	e882 0003 	stmia.w	r2, {r0, r1}
 8006b32:	e011      	b.n	8006b58 <_ZNSt6vectorIbN2ei7EiAllocIbEEE13_M_initializeEj+0x78>
	  }
	else
	  {
	    this->_M_impl._M_end_of_storage = _Bit_pointer();
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2200      	movs	r2, #0
 8006b38:	611a      	str	r2, [r3, #16]
	    this->_M_impl._M_start = iterator(0, 0);
 8006b3a:	f107 031c 	add.w	r3, r7, #28
 8006b3e:	2200      	movs	r2, #0
 8006b40:	2100      	movs	r1, #0
 8006b42:	4618      	mov	r0, r3
 8006b44:	f7fa fdd8 	bl	80016f8 <_ZNSt13_Bit_iteratorC1EPmj>
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	461a      	mov	r2, r3
 8006b4c:	f107 031c 	add.w	r3, r7, #28
 8006b50:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006b54:	e882 0003 	stmia.w	r2, {r0, r1}
	  }
	this->_M_impl._M_finish = this->_M_impl._M_start + difference_type(__n);
 8006b58:	68f9      	ldr	r1, [r7, #12]
 8006b5a:	68ba      	ldr	r2, [r7, #8]
 8006b5c:	68fc      	ldr	r4, [r7, #12]
 8006b5e:	463b      	mov	r3, r7
 8006b60:	4618      	mov	r0, r3
 8006b62:	f7fa fdfd 	bl	8001760 <_ZStplRKSt13_Bit_iteratori>
 8006b66:	f104 0308 	add.w	r3, r4, #8
 8006b6a:	463a      	mov	r2, r7
 8006b6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006b70:	e883 0003 	stmia.w	r3, {r0, r1}

      }
 8006b74:	bf00      	nop
 8006b76:	372c      	adds	r7, #44	; 0x2c
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd90      	pop	{r4, r7, pc}

08006b7c <_ZNSt6vectorIbN2ei7EiAllocIbEEE19_M_initialize_valueEb>:

      void
      _M_initialize_value(bool __x)
 8006b7c:	b590      	push	{r4, r7, lr}
 8006b7e:	b085      	sub	sp, #20
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	460b      	mov	r3, r1
 8006b86:	70fb      	strb	r3, [r7, #3]
      {
	if (_Bit_type* __p = this->_M_impl._M_start._M_p)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	60fb      	str	r3, [r7, #12]
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d012      	beq.n	8006bba <_ZNSt6vectorIbN2ei7EiAllocIbEEE19_M_initialize_valueEb+0x3e>
	  __builtin_memset(__p, __x ? ~0 : 0,
 8006b94:	78fb      	ldrb	r3, [r7, #3]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d002      	beq.n	8006ba0 <_ZNSt6vectorIbN2ei7EiAllocIbEEE19_M_initialize_valueEb+0x24>
 8006b9a:	f04f 34ff 	mov.w	r4, #4294967295
 8006b9e:	e000      	b.n	8006ba2 <_ZNSt6vectorIbN2ei7EiAllocIbEEE19_M_initialize_valueEb+0x26>
 8006ba0:	2400      	movs	r4, #0
			   (this->_M_impl._M_end_addr() - __p)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f000 fb0d 	bl	80071c4 <_ZNKSt13_Bvector_baseIN2ei7EiAllocIbEEE13_Bvector_impl11_M_end_addrEv>
 8006baa:	4602      	mov	r2, r0
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	1ad3      	subs	r3, r2, r3
	  __builtin_memset(__p, __x ? ~0 : 0,
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	4621      	mov	r1, r4
 8006bb4:	68f8      	ldr	r0, [r7, #12]
 8006bb6:	f01c fceb 	bl	8023590 <memset>
			   * sizeof(_Bit_type));
      }
 8006bba:	bf00      	nop
 8006bbc:	3714      	adds	r7, #20
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd90      	pop	{r4, r7, pc}

08006bc2 <_ZNSt8functionIFijjPfEE4swapERS2_>:
      void swap(function& __x) noexcept
 8006bc2:	b580      	push	{r7, lr}
 8006bc4:	b082      	sub	sp, #8
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	6078      	str	r0, [r7, #4]
 8006bca:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	683a      	ldr	r2, [r7, #0]
 8006bd0:	4611      	mov	r1, r2
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f000 fb17 	bl	8007206 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f103 0208 	add.w	r2, r3, #8
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	3308      	adds	r3, #8
 8006be2:	4619      	mov	r1, r3
 8006be4:	4610      	mov	r0, r2
 8006be6:	f000 fb40 	bl	800726a <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f103 020c 	add.w	r2, r3, #12
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	330c      	adds	r3, #12
 8006bf4:	4619      	mov	r1, r3
 8006bf6:	4610      	mov	r0, r2
 8006bf8:	f000 fb61 	bl	80072be <_ZSt4swapIPFiRKSt9_Any_dataOjS3_OPfEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>
      }
 8006bfc:	bf00      	nop
 8006bfe:	3708      	adds	r7, #8
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <_ZSt4moveIRPFvPvEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8006c04:	b480      	push	{r7}
 8006c06:	b083      	sub	sp, #12
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	4618      	mov	r0, r3
 8006c10:	370c      	adds	r7, #12
 8006c12:	46bd      	mov	sp, r7
 8006c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c18:	4770      	bx	lr

08006c1a <_ZNSt15__uniq_ptr_implIvPFvPvEEC1IS2_EES0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 8006c1a:	b590      	push	{r4, r7, lr}
 8006c1c:	b085      	sub	sp, #20
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	60f8      	str	r0, [r7, #12]
 8006c22:	60b9      	str	r1, [r7, #8]
 8006c24:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 8006c26:	68fc      	ldr	r4, [r7, #12]
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f000 fb67 	bl	80072fc <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8006c2e:	4602      	mov	r2, r0
 8006c30:	f107 0308 	add.w	r3, r7, #8
 8006c34:	4619      	mov	r1, r3
 8006c36:	4620      	mov	r0, r4
 8006c38:	f000 fb6b 	bl	8007312 <_ZNSt5tupleIJPvPFvS0_EEEC1IRS0_S2_Lb1EEEOT_OT0_>
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3714      	adds	r7, #20
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd90      	pop	{r4, r7, pc}

08006c46 <_ZNSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8006c46:	b580      	push	{r7, lr}
 8006c48:	b082      	sub	sp, #8
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	6078      	str	r0, [r7, #4]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	4618      	mov	r0, r3
 8006c52:	f000 fb77 	bl	8007344 <_ZSt3getILj0EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>
 8006c56:	4603      	mov	r3, r0
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3708      	adds	r7, #8
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}

08006c60 <_ZNSt10unique_ptrIvPFvPvEE11get_deleterEv>:
      get_deleter() noexcept
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b082      	sub	sp, #8
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f000 fb77 	bl	800735e <_ZNSt15__uniq_ptr_implIvPFvPvEE10_M_deleterEv>
 8006c70:	4603      	mov	r3, r0
 8006c72:	4618      	mov	r0, r3
 8006c74:	3708      	adds	r7, #8
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}

08006c7a <_ZSt4moveIRPvEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8006c7a:	b480      	push	{r7}
 8006c7c:	b083      	sub	sp, #12
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	4618      	mov	r0, r3
 8006c86:	370c      	adds	r7, #12
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr

08006c90 <_ZNSt15__uniq_ptr_implIvPFvPvEE5resetES0_>:
      void reset(pointer __p) noexcept
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b084      	sub	sp, #16
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f7ff ffd3 	bl	8006c46 <_ZNSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f7ff ffcd 	bl	8006c46 <_ZNSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>
 8006cac:	4602      	mov	r2, r0
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	6013      	str	r3, [r2, #0]
	if (__old_p)
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d006      	beq.n	8006cc6 <_ZNSt15__uniq_ptr_implIvPFvPvEE5resetES0_+0x36>
	  _M_deleter()(__old_p);
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f000 fb50 	bl	800735e <_ZNSt15__uniq_ptr_implIvPFvPvEE10_M_deleterEv>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	68f8      	ldr	r0, [r7, #12]
 8006cc4:	4798      	blx	r3
      }
 8006cc6:	bf00      	nop
 8006cc8:	3710      	adds	r7, #16
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}

08006cce <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006cce:	b480      	push	{r7}
 8006cd0:	b083      	sub	sp, #12
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	4618      	mov	r0, r3
 8006cda:	370c      	adds	r7, #12
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr

08006ce4 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006ce4:	b480      	push	{r7}
 8006ce6:	b083      	sub	sp, #12
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	4618      	mov	r0, r3
 8006cf0:	370c      	adds	r7, #12
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr

08006cfa <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8006cfa:	b480      	push	{r7}
 8006cfc:	b083      	sub	sp, #12
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2200      	movs	r2, #0
 8006d06:	601a      	str	r2, [r3, #0]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	605a      	str	r2, [r3, #4]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2200      	movs	r2, #0
 8006d12:	609a      	str	r2, [r3, #8]
	{ }
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	4618      	mov	r0, r3
 8006d18:	370c      	adds	r7, #12
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr

08006d22 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE13_M_deallocateEPS3_j>:
      _M_deallocate(pointer __p, size_t __n)
 8006d22:	b580      	push	{r7, lr}
 8006d24:	b084      	sub	sp, #16
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	60f8      	str	r0, [r7, #12]
 8006d2a:	60b9      	str	r1, [r7, #8]
 8006d2c:	607a      	str	r2, [r7, #4]
	if (__p)
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d005      	beq.n	8006d40 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE13_M_deallocateEPS3_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	687a      	ldr	r2, [r7, #4]
 8006d38:	68b9      	ldr	r1, [r7, #8]
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f000 fb1c 	bl	8007378 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE10deallocateERS5_PS4_j>
      }
 8006d40:	bf00      	nop
 8006d42:	3710      	adds	r7, #16
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}

08006d48 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8006d48:	b480      	push	{r7}
 8006d4a:	b083      	sub	sp, #12
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	4618      	mov	r0, r3
 8006d54:	370c      	adds	r7, #12
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr

08006d5e <_ZSt8_DestroyIPN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEvT_S7_RT0_>:
   * destroy() even if _Tp has a trivial destructor.
   */

  template<typename _ForwardIterator, typename _Allocator>
    void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8006d5e:	b580      	push	{r7, lr}
 8006d60:	b084      	sub	sp, #16
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	60f8      	str	r0, [r7, #12]
 8006d66:	60b9      	str	r1, [r7, #8]
 8006d68:	607a      	str	r2, [r7, #4]
	     _Allocator& __alloc)
    {
      for (; __first != __last; ++__first)
 8006d6a:	68fa      	ldr	r2, [r7, #12]
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d00b      	beq.n	8006d8a <_ZSt8_DestroyIPN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEvT_S7_RT0_+0x2c>
#if __cplusplus < 201103L
	__alloc.destroy(std::__addressof(*__first));
#else
	allocator_traits<_Allocator>::destroy(__alloc,
 8006d72:	68f8      	ldr	r0, [r7, #12]
 8006d74:	f000 fb0f 	bl	8007396 <_ZSt11__addressofIN2ei8spectral10processing11freq_peak_tEEPT_RS4_>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	4619      	mov	r1, r3
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f000 fb15 	bl	80073ac <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE7destroyIS4_EEvRS5_PT_>
      for (; __first != __last; ++__first)
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	3308      	adds	r3, #8
 8006d86:	60fb      	str	r3, [r7, #12]
 8006d88:	e7ef      	b.n	8006d6a <_ZSt8_DestroyIPN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEvT_S7_RT0_+0xc>
					      std::__addressof(*__first));
#endif
    }
 8006d8a:	bf00      	nop
 8006d8c:	3710      	adds	r7, #16
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}

08006d92 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE9constructIS4_JRKS4_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS5_PT_DpOSA_>:
	construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 8006d92:	b580      	push	{r7, lr}
 8006d94:	b084      	sub	sp, #16
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	60f8      	str	r0, [r7, #12]
 8006d9a:	60b9      	str	r1, [r7, #8]
 8006d9c:	607a      	str	r2, [r7, #4]
	{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 fb12 	bl	80073c8 <_ZSt7forwardIRKN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS6_E4typeE>
 8006da4:	4603      	mov	r3, r0
 8006da6:	461a      	mov	r2, r3
 8006da8:	68b9      	ldr	r1, [r7, #8]
 8006daa:	68f8      	ldr	r0, [r7, #12]
 8006dac:	f000 fb17 	bl	80073de <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE12_S_constructIS4_JRKS4_EEENSt9enable_ifIXsrSt6__and_IJSB_IJSt6__not_INS6_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleISE_JSG_EEEEEE5valueEvE4typeERS5_PSE_DpOSF_>
 8006db0:	bf00      	nop
 8006db2:	3710      	adds	r7, #16
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}

08006db8 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE15_S_use_relocateEv>:
      _S_use_relocate()
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b082      	sub	sp, #8
 8006dbc:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f000 f805 	bl	8006dce <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8006dc4:	4603      	mov	r3, r0
      }
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3708      	adds	r7, #8
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}

08006dce <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8006dce:	b480      	push	{r7}
 8006dd0:	b083      	sub	sp, #12
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8006dd6:	2301      	movs	r3, #1
      }
 8006dd8:	4618      	mov	r0, r3
 8006dda:	370c      	adds	r7, #12
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8006de4:	b5b0      	push	{r4, r5, r7, lr}
 8006de6:	b08c      	sub	sp, #48	; 0x30
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	60f8      	str	r0, [r7, #12]
 8006dec:	60b9      	str	r1, [r7, #8]
 8006dee:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8006df0:	4a59      	ldr	r2, [pc, #356]	; (8006f58 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_+0x174>)
 8006df2:	2101      	movs	r1, #1
 8006df4:	68f8      	ldr	r0, [r7, #12]
 8006df6:	f000 fb0b 	bl	8007410 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_M_check_lenEjPKc>
 8006dfa:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8006e08:	68f8      	ldr	r0, [r7, #12]
 8006e0a:	f7ff fd9a 	bl	8006942 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE5beginEv>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	617b      	str	r3, [r7, #20]
 8006e12:	f107 0214 	add.w	r2, r7, #20
 8006e16:	f107 0308 	add.w	r3, r7, #8
 8006e1a:	4611      	mov	r1, r2
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f000 fb3e 	bl	800749e <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 8006e22:	4603      	mov	r3, r0
 8006e24:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f000 fb4c 	bl	80074c8 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_M_allocateEj>
 8006e30:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8006e32:	69bb      	ldr	r3, [r7, #24]
 8006e34:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8006e36:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8006e38:	69fb      	ldr	r3, [r7, #28]
 8006e3a:	00db      	lsls	r3, r3, #3
	  _Alloc_traits::construct(this->_M_impl,
 8006e3c:	69ba      	ldr	r2, [r7, #24]
 8006e3e:	18d5      	adds	r5, r2, r3
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f000 fac1 	bl	80073c8 <_ZSt7forwardIRKN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS6_E4typeE>
 8006e46:	4603      	mov	r3, r0
 8006e48:	461a      	mov	r2, r3
 8006e4a:	4629      	mov	r1, r5
 8006e4c:	4620      	mov	r0, r4
 8006e4e:	f7ff ffa0 	bl	8006d92 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE9constructIS4_JRKS4_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS5_PT_DpOSA_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8006e52:	2300      	movs	r3, #0
 8006e54:	62fb      	str	r3, [r7, #44]	; 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8006e56:	f7ff ffaf 	bl	8006db8 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE15_S_use_relocateEv>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d027      	beq.n	8006eb0 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_+0xcc>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8006e60:	f107 0308 	add.w	r3, r7, #8
 8006e64:	4618      	mov	r0, r3
 8006e66:	f000 fb57 	bl	8007518 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	4618      	mov	r0, r3
 8006e72:	f7ff ff69 	bl	8006d48 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>
 8006e76:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8006e78:	69ba      	ldr	r2, [r7, #24]
 8006e7a:	4621      	mov	r1, r4
 8006e7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006e7e:	f000 fb37 	bl	80074f0 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_S_relocateEPS3_S7_S7_RS5_>
 8006e82:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8006e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e86:	3308      	adds	r3, #8
 8006e88:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8006e8a:	f107 0308 	add.w	r3, r7, #8
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f000 fb42 	bl	8007518 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 8006e94:	4603      	mov	r3, r0
 8006e96:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f7ff ff54 	bl	8006d48 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>
 8006ea0:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8006ea2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ea4:	6a39      	ldr	r1, [r7, #32]
 8006ea6:	4620      	mov	r0, r4
 8006ea8:	f000 fb22 	bl	80074f0 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_S_relocateEPS3_S7_S7_RS5_>
 8006eac:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006eae:	e026      	b.n	8006efe <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_+0x11a>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 8006eb0:	f107 0308 	add.w	r3, r7, #8
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f000 fb2f 	bl	8007518 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f7ff ff41 	bl	8006d48 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>
 8006ec6:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8006ec8:	69ba      	ldr	r2, [r7, #24]
 8006eca:	4621      	mov	r1, r4
 8006ecc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006ece:	f000 fb2e 	bl	800752e <_ZSt34__uninitialized_move_if_noexcept_aIPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_>
 8006ed2:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8006ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ed6:	3308      	adds	r3, #8
 8006ed8:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 8006eda:	f107 0308 	add.w	r3, r7, #8
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f000 fb1a 	bl	8007518 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	4618      	mov	r0, r3
 8006eec:	f7ff ff2c 	bl	8006d48 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>
 8006ef0:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8006ef2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ef4:	6a39      	ldr	r1, [r7, #32]
 8006ef6:	4620      	mov	r0, r4
 8006ef8:	f000 fb19 	bl	800752e <_ZSt34__uninitialized_move_if_noexcept_aIPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_>
 8006efc:	62f8      	str	r0, [r7, #44]	; 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8006efe:	f7ff ff5b 	bl	8006db8 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE15_S_use_relocateEv>
 8006f02:	4603      	mov	r3, r0
 8006f04:	f083 0301 	eor.w	r3, r3, #1
 8006f08:	b2db      	uxtb	r3, r3
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d009      	beq.n	8006f22 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_+0x13e>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	4618      	mov	r0, r3
 8006f12:	f7ff ff19 	bl	8006d48 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>
 8006f16:	4603      	mov	r3, r0
 8006f18:	461a      	mov	r2, r3
 8006f1a:	6a39      	ldr	r1, [r7, #32]
 8006f1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006f1e:	f7ff ff1e 	bl	8006d5e <_ZSt8_DestroyIPN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEvT_S7_RT0_>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8006f22:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	689a      	ldr	r2, [r3, #8]
 8006f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2a:	1ad3      	subs	r3, r2, r3
 8006f2c:	10db      	asrs	r3, r3, #3
      _M_deallocate(__old_start,
 8006f2e:	461a      	mov	r2, r3
 8006f30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006f32:	f7ff fef6 	bl	8006d22 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE13_M_deallocateEPS3_j>
      this->_M_impl._M_start = __new_start;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	69ba      	ldr	r2, [r7, #24]
 8006f3a:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f40:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8006f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f44:	00db      	lsls	r3, r3, #3
 8006f46:	69ba      	ldr	r2, [r7, #24]
 8006f48:	441a      	add	r2, r3
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	609a      	str	r2, [r3, #8]
    }
 8006f4e:	bf00      	nop
 8006f50:	3730      	adds	r7, #48	; 0x30
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bdb0      	pop	{r4, r5, r7, pc}
 8006f56:	bf00      	nop
 8006f58:	08028394 	.word	0x08028394

08006f5c <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEC1ERKS5_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8006f5c:	b480      	push	{r7}
 8006f5e:	b083      	sub	sp, #12
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	681a      	ldr	r2, [r3, #0]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	601a      	str	r2, [r3, #0]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	4618      	mov	r0, r3
 8006f72:	370c      	adds	r7, #12
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr

08006f7c <_ZN9__gnu_cxx5__ops16__iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EENS0_15_Iter_comp_iterIT_EESC_>:
    };

  template<typename _Compare>
    _GLIBCXX14_CONSTEXPR
    inline _Iter_comp_iter<_Compare>
    __iter_comp_iter(_Compare __comp)
 8006f7c:	b5b0      	push	{r4, r5, r7, lr}
 8006f7e:	b084      	sub	sp, #16
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	7138      	strb	r0, [r7, #4]
    { return _Iter_comp_iter<_Compare>(_GLIBCXX_MOVE(__comp)); }
 8006f84:	1d3b      	adds	r3, r7, #4
 8006f86:	4618      	mov	r0, r3
 8006f88:	f000 faea 	bl	8007560 <_ZSt4moveIRZN2ei8spectral10processingL14find_fft_peaksEPNS0_9ei_matrixES4_fftEUlRKNS2_11freq_peak_tES7_E_EONSt16remove_referenceIT_E4typeEOSB_>
 8006f8c:	f107 030c 	add.w	r3, r7, #12
 8006f90:	4629      	mov	r1, r5
 8006f92:	4618      	mov	r0, r3
 8006f94:	f000 faef 	bl	8007576 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1ESA_>
 8006f98:	bf00      	nop
 8006f9a:	4620      	mov	r0, r4
 8006f9c:	3710      	adds	r7, #16
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bdb0      	pop	{r4, r5, r7, pc}

08006fa2 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>:
    __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8006fa2:	b580      	push	{r7, lr}
 8006fa4:	b084      	sub	sp, #16
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	60f8      	str	r0, [r7, #12]
 8006faa:	60b9      	str	r1, [r7, #8]
 8006fac:	713a      	strb	r2, [r7, #4]
      if (__first != __last)
 8006fae:	f107 0208 	add.w	r2, r7, #8
 8006fb2:	f107 030c 	add.w	r3, r7, #12
 8006fb6:	4611      	mov	r1, r2
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f000 faea 	bl	8007592 <_ZN9__gnu_cxxneIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d017      	beq.n	8006ff4 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0x52>
				std::__lg(__last - __first) * 2,
 8006fc4:	f107 020c 	add.w	r2, r7, #12
 8006fc8:	f107 0308 	add.w	r3, r7, #8
 8006fcc:	4611      	mov	r1, r2
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f000 fa65 	bl	800749e <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f7fa fa6c 	bl	80014b4 <_ZSt4__lgi>
 8006fdc:	4603      	mov	r3, r0
	  std::__introsort_loop(__first, __last,
 8006fde:	005a      	lsls	r2, r3, #1
 8006fe0:	793b      	ldrb	r3, [r7, #4]
 8006fe2:	68b9      	ldr	r1, [r7, #8]
 8006fe4:	68f8      	ldr	r0, [r7, #12]
 8006fe6:	f000 faec 	bl	80075c2 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_>
	  std::__final_insertion_sort(__first, __last, __comp);
 8006fea:	793a      	ldrb	r2, [r7, #4]
 8006fec:	68b9      	ldr	r1, [r7, #8]
 8006fee:	68f8      	ldr	r0, [r7, #12]
 8006ff0:	f000 fb1e 	bl	8007630 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>
    }
 8006ff4:	bf00      	nop
 8006ff6:	3710      	adds	r7, #16
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}

08006ffc <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006ffc:	b480      	push	{r7}
 8006ffe:	b083      	sub	sp, #12
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	4618      	mov	r0, r3
 8007008:	370c      	adds	r7, #12
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr
	...

08007014 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_>:
      function<_Res(_ArgTypes...)>::
 8007014:	b590      	push	{r4, r7, lr}
 8007016:	b083      	sub	sp, #12
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	6039      	str	r1, [r7, #0]
      : _Function_base()
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	4618      	mov	r0, r3
 8007022:	f7fa fbc8 	bl	80017b6 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	4618      	mov	r0, r3
 800702a:	f000 fb39 	bl	80076a0 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE21_M_not_empty_functionIS2_EEbPT_>
 800702e:	4603      	mov	r3, r0
 8007030:	2b00      	cmp	r3, #0
 8007032:	d00f      	beq.n	8007054 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8007034:	687c      	ldr	r4, [r7, #4]
 8007036:	463b      	mov	r3, r7
 8007038:	4618      	mov	r0, r3
 800703a:	f000 fb41 	bl	80076c0 <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>
 800703e:	4603      	mov	r3, r0
 8007040:	4619      	mov	r1, r3
 8007042:	4620      	mov	r0, r4
 8007044:	f000 fb47 	bl	80076d6 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_>
	    _M_invoker = &_My_handler::_M_invoke;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	4a05      	ldr	r2, [pc, #20]	; (8007060 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_+0x4c>)
 800704c:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	4a04      	ldr	r2, [pc, #16]	; (8007064 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_+0x50>)
 8007052:	609a      	str	r2, [r3, #8]
      }
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	4618      	mov	r0, r3
 8007058:	370c      	adds	r7, #12
 800705a:	46bd      	mov	sp, r7
 800705c:	bd90      	pop	{r4, r7, pc}
 800705e:	bf00      	nop
 8007060:	080076fb 	.word	0x080076fb
 8007064:	0800773d 	.word	0x0800773d

08007068 <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8007068:	b480      	push	{r7}
 800706a:	b083      	sub	sp, #12
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	4618      	mov	r0, r3
 8007074:	370c      	adds	r7, #12
 8007076:	46bd      	mov	sp, r7
 8007078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707c:	4770      	bx	lr
	...

08007080 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_>:
      function<_Res(_ArgTypes...)>::
 8007080:	b590      	push	{r4, r7, lr}
 8007082:	b083      	sub	sp, #12
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
 8007088:	6039      	str	r1, [r7, #0]
      : _Function_base()
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	4618      	mov	r0, r3
 800708e:	f7fa fb92 	bl	80017b6 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 8007092:	463b      	mov	r3, r7
 8007094:	4618      	mov	r0, r3
 8007096:	f000 fb70 	bl	800777a <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E21_M_not_empty_functionIS3_EEbRKT_>
 800709a:	4603      	mov	r3, r0
 800709c:	2b00      	cmp	r3, #0
 800709e:	d00f      	beq.n	80070c0 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 80070a0:	687c      	ldr	r4, [r7, #4]
 80070a2:	463b      	mov	r3, r7
 80070a4:	4618      	mov	r0, r3
 80070a6:	f000 fb73 	bl	8007790 <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>
 80070aa:	4603      	mov	r3, r0
 80070ac:	4619      	mov	r1, r3
 80070ae:	4620      	mov	r0, r4
 80070b0:	f000 fb79 	bl	80077a6 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_>
	    _M_invoker = &_My_handler::_M_invoke;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	4a05      	ldr	r2, [pc, #20]	; (80070cc <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_+0x4c>)
 80070b8:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	4a04      	ldr	r2, [pc, #16]	; (80070d0 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_+0x50>)
 80070be:	609a      	str	r2, [r3, #8]
      }
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	4618      	mov	r0, r3
 80070c4:	370c      	adds	r7, #12
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd90      	pop	{r4, r7, pc}
 80070ca:	bf00      	nop
 80070cc:	080077cb 	.word	0x080077cb
 80070d0:	0800780d 	.word	0x0800780d

080070d4 <_ZNKSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b082      	sub	sp, #8
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	4618      	mov	r0, r3
 80070e0:	f000 fbb3 	bl	800784a <_ZSt3getILj0EJPvPFvS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS7_>
 80070e4:	4603      	mov	r3, r0
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4618      	mov	r0, r3
 80070ea:	3708      	adds	r7, #8
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <_ZN2ei7EiAllocImEC1IbEERKNS0_IT_EE>:
struct EiAlloc
{
    typedef T value_type;
    EiAlloc() = default;
    template <class U>
    constexpr EiAlloc(const EiAlloc<U> &) noexcept {}
 80070f0:	b480      	push	{r7}
 80070f2:	b083      	sub	sp, #12
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	6039      	str	r1, [r7, #0]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	4618      	mov	r0, r3
 80070fe:	370c      	adds	r7, #12
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr

08007108 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE13_Bvector_implC1ERKNS1_ImEE>:
	  _Bvector_impl(const _Bit_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8007108:	b580      	push	{r7, lr}
 800710a:	b082      	sub	sp, #8
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	6039      	str	r1, [r7, #0]
	  : _Bit_alloc_type(__a)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	4618      	mov	r0, r3
 8007116:	f000 fba5 	bl	8007864 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE18_Bvector_impl_dataC1Ev>
	  { }
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	4618      	mov	r0, r3
 800711e:	3708      	adds	r7, #8
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}

08007124 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE13_M_deallocateEv>:
      _M_deallocate()
 8007124:	b580      	push	{r7, lr}
 8007126:	b084      	sub	sp, #16
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
	if (_M_impl._M_start._M_p)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d018      	beq.n	8007166 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE13_M_deallocateEv+0x42>
	    const size_t __n = _M_impl._M_end_addr() - _M_impl._M_start._M_p;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	4618      	mov	r0, r3
 8007138:	f000 f844 	bl	80071c4 <_ZNKSt13_Bvector_baseIN2ei7EiAllocIbEEE13_Bvector_impl11_M_end_addrEv>
 800713c:	4602      	mov	r2, r0
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	1ad3      	subs	r3, r2, r3
 8007144:	109b      	asrs	r3, r3, #2
 8007146:	60fb      	str	r3, [r7, #12]
	    _Bit_alloc_traits::deallocate(_M_impl,
 8007148:	6878      	ldr	r0, [r7, #4]
					  _M_impl._M_end_of_storage - __n,
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	691a      	ldr	r2, [r3, #16]
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	009b      	lsls	r3, r3, #2
 8007152:	425b      	negs	r3, r3
	    _Bit_alloc_traits::deallocate(_M_impl,
 8007154:	4413      	add	r3, r2
 8007156:	68fa      	ldr	r2, [r7, #12]
 8007158:	4619      	mov	r1, r3
 800715a:	f000 fb98 	bl	800788e <_ZNSt16allocator_traitsIN2ei7EiAllocImEEE10deallocateERS2_Pmj>
	    _M_impl._M_reset();
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	4618      	mov	r0, r3
 8007162:	f000 fba3 	bl	80078ac <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE18_Bvector_impl_data8_M_resetEv>
      }
 8007166:	bf00      	nop
 8007168:	3710      	adds	r7, #16
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}

0800716e <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800716e:	b590      	push	{r4, r7, lr}
 8007170:	b083      	sub	sp, #12
 8007172:	af00      	add	r7, sp, #0
 8007174:	6078      	str	r0, [r7, #4]
 8007176:	6039      	str	r1, [r7, #0]
      { return _Bit_alloc_traits::allocate(_M_impl, _S_nword(__n)); }
 8007178:	687c      	ldr	r4, [r7, #4]
 800717a:	6838      	ldr	r0, [r7, #0]
 800717c:	f000 f80a 	bl	8007194 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE8_S_nwordEj>
 8007180:	4603      	mov	r3, r0
 8007182:	4619      	mov	r1, r3
 8007184:	4620      	mov	r0, r4
 8007186:	f000 fbb1 	bl	80078ec <_ZNSt16allocator_traitsIN2ei7EiAllocImEEE8allocateERS2_j>
 800718a:	4603      	mov	r3, r0
 800718c:	4618      	mov	r0, r3
 800718e:	370c      	adds	r7, #12
 8007190:	46bd      	mov	sp, r7
 8007192:	bd90      	pop	{r4, r7, pc}

08007194 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE8_S_nwordEj>:
      _S_nword(size_t __n)
 8007194:	b480      	push	{r7}
 8007196:	b083      	sub	sp, #12
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
      { return (__n + int(_S_word_bit) - 1) / int(_S_word_bit); }
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	331f      	adds	r3, #31
 80071a0:	095b      	lsrs	r3, r3, #5
 80071a2:	4618      	mov	r0, r3
 80071a4:	370c      	adds	r7, #12
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr

080071ae <_ZSt11__addressofImEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80071ae:	b480      	push	{r7}
 80071b0:	b083      	sub	sp, #12
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	4618      	mov	r0, r3
 80071ba:	370c      	adds	r7, #12
 80071bc:	46bd      	mov	sp, r7
 80071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c2:	4770      	bx	lr

080071c4 <_ZNKSt13_Bvector_baseIN2ei7EiAllocIbEEE13_Bvector_impl11_M_end_addrEv>:
	_M_end_addr() const _GLIBCXX_NOEXCEPT
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b082      	sub	sp, #8
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
	  if (this->_M_end_of_storage)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	691b      	ldr	r3, [r3, #16]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d008      	beq.n	80071e6 <_ZNKSt13_Bvector_baseIN2ei7EiAllocIbEEE13_Bvector_impl11_M_end_addrEv+0x22>
	    return std::__addressof(this->_M_end_of_storage[-1]) + 1;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	691b      	ldr	r3, [r3, #16]
 80071d8:	3b04      	subs	r3, #4
 80071da:	4618      	mov	r0, r3
 80071dc:	f7ff ffe7 	bl	80071ae <_ZSt11__addressofImEPT_RS0_>
 80071e0:	4603      	mov	r3, r0
 80071e2:	3304      	adds	r3, #4
 80071e4:	e000      	b.n	80071e8 <_ZNKSt13_Bvector_baseIN2ei7EiAllocIbEEE13_Bvector_impl11_M_end_addrEv+0x24>
	  return 0;
 80071e6:	2300      	movs	r3, #0
	}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3708      	adds	r7, #8
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 80071f0:	b480      	push	{r7}
 80071f2:	b083      	sub	sp, #12
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	4618      	mov	r0, r3
 80071fc:	370c      	adds	r7, #12
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr

08007206 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
 8007206:	b580      	push	{r7, lr}
 8007208:	b084      	sub	sp, #16
 800720a:	af00      	add	r7, sp, #0
 800720c:	6078      	str	r0, [r7, #4]
 800720e:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f7ff ffed 	bl	80071f0 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8007216:	4602      	mov	r2, r0
 8007218:	f107 0308 	add.w	r3, r7, #8
 800721c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007220:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8007224:	6838      	ldr	r0, [r7, #0]
 8007226:	f7ff ffe3 	bl	80071f0 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800722a:	4602      	mov	r2, r0
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007232:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8007236:	f107 0308 	add.w	r3, r7, #8
 800723a:	4618      	mov	r0, r3
 800723c:	f7ff ffd8 	bl	80071f0 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8007240:	4602      	mov	r2, r0
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007248:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800724c:	bf00      	nop
 800724e:	3710      	adds	r7, #16
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}

08007254 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 8007254:	b480      	push	{r7}
 8007256:	b083      	sub	sp, #12
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	4618      	mov	r0, r3
 8007260:	370c      	adds	r7, #12
 8007262:	46bd      	mov	sp, r7
 8007264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007268:	4770      	bx	lr

0800726a <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 800726a:	b580      	push	{r7, lr}
 800726c:	b084      	sub	sp, #16
 800726e:	af00      	add	r7, sp, #0
 8007270:	6078      	str	r0, [r7, #4]
 8007272:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f7ff ffed 	bl	8007254 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 800727a:	4603      	mov	r3, r0
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8007280:	6838      	ldr	r0, [r7, #0]
 8007282:	f7ff ffe7 	bl	8007254 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8007286:	4603      	mov	r3, r0
 8007288:	681a      	ldr	r2, [r3, #0]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800728e:	f107 030c 	add.w	r3, r7, #12
 8007292:	4618      	mov	r0, r3
 8007294:	f7ff ffde 	bl	8007254 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8007298:	4603      	mov	r3, r0
 800729a:	681a      	ldr	r2, [r3, #0]
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	601a      	str	r2, [r3, #0]
    }
 80072a0:	bf00      	nop
 80072a2:	3710      	adds	r7, #16
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 80072a8:	b480      	push	{r7}
 80072aa:	b083      	sub	sp, #12
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	4618      	mov	r0, r3
 80072b4:	370c      	adds	r7, #12
 80072b6:	46bd      	mov	sp, r7
 80072b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072bc:	4770      	bx	lr

080072be <_ZSt4swapIPFiRKSt9_Any_dataOjS3_OPfEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>:
    swap(_Tp& __a, _Tp& __b)
 80072be:	b580      	push	{r7, lr}
 80072c0:	b084      	sub	sp, #16
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	6078      	str	r0, [r7, #4]
 80072c6:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f7ff ffed 	bl	80072a8 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 80072ce:	4603      	mov	r3, r0
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 80072d4:	6838      	ldr	r0, [r7, #0]
 80072d6:	f7ff ffe7 	bl	80072a8 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 80072da:	4603      	mov	r3, r0
 80072dc:	681a      	ldr	r2, [r3, #0]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80072e2:	f107 030c 	add.w	r3, r7, #12
 80072e6:	4618      	mov	r0, r3
 80072e8:	f7ff ffde 	bl	80072a8 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 80072ec:	4603      	mov	r3, r0
 80072ee:	681a      	ldr	r2, [r3, #0]
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	601a      	str	r2, [r3, #0]
    }
 80072f4:	bf00      	nop
 80072f6:	3710      	adds	r7, #16
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}

080072fc <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80072fc:	b480      	push	{r7}
 80072fe:	b083      	sub	sp, #12
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	4618      	mov	r0, r3
 8007308:	370c      	adds	r7, #12
 800730a:	46bd      	mov	sp, r7
 800730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007310:	4770      	bx	lr

08007312 <_ZNSt5tupleIJPvPFvS0_EEEC1IRS0_S2_Lb1EEEOT_OT0_>:
	: _Inherited(__a1, __a2) { }

      template<typename _U1, typename _U2,
	       _ImplicitCtor<!__is_alloc_arg<_U1>(), _U1, _U2> = true>
	constexpr
	tuple(_U1&& __a1, _U2&& __a2)
 8007312:	b5b0      	push	{r4, r5, r7, lr}
 8007314:	b084      	sub	sp, #16
 8007316:	af00      	add	r7, sp, #0
 8007318:	60f8      	str	r0, [r7, #12]
 800731a:	60b9      	str	r1, [r7, #8]
 800731c:	607a      	str	r2, [r7, #4]
	noexcept(__nothrow_constructible<_U1, _U2>())
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 800731e:	68fc      	ldr	r4, [r7, #12]
 8007320:	68b8      	ldr	r0, [r7, #8]
 8007322:	f000 faf1 	bl	8007908 <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>
 8007326:	4605      	mov	r5, r0
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f7ff ffe7 	bl	80072fc <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 800732e:	4603      	mov	r3, r0
 8007330:	461a      	mov	r2, r3
 8007332:	4629      	mov	r1, r5
 8007334:	4620      	mov	r0, r4
 8007336:	f000 faf2 	bl	800791e <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEEC1IRS0_JS2_EvEEOT_DpOT0_>
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	4618      	mov	r0, r3
 800733e:	3710      	adds	r7, #16
 8007340:	46bd      	mov	sp, r7
 8007342:	bdb0      	pop	{r4, r5, r7, pc}

08007344 <_ZSt3getILj0EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>:
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  /// Return a reference to the ith element of a tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 8007344:	b580      	push	{r7, lr}
 8007346:	b082      	sub	sp, #8
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	4618      	mov	r0, r3
 8007350:	f000 fb03 	bl	800795a <_ZSt12__get_helperILj0EPvJPFvS0_EEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8007354:	4603      	mov	r3, r0
 8007356:	4618      	mov	r0, r3
 8007358:	3708      	adds	r7, #8
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}

0800735e <_ZNSt15__uniq_ptr_implIvPFvPvEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 800735e:	b580      	push	{r7, lr}
 8007360:	b082      	sub	sp, #8
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	4618      	mov	r0, r3
 800736a:	f000 fb02 	bl	8007972 <_ZSt3getILj1EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>
 800736e:	4603      	mov	r3, r0
 8007370:	4618      	mov	r0, r3
 8007372:	3708      	adds	r7, #8
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}

08007378 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE10deallocateERS5_PS4_j>:
      deallocate(_Alloc& __a, pointer __p, size_type __n)
 8007378:	b580      	push	{r7, lr}
 800737a:	b084      	sub	sp, #16
 800737c:	af00      	add	r7, sp, #0
 800737e:	60f8      	str	r0, [r7, #12]
 8007380:	60b9      	str	r1, [r7, #8]
 8007382:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8007384:	687a      	ldr	r2, [r7, #4]
 8007386:	68b9      	ldr	r1, [r7, #8]
 8007388:	68f8      	ldr	r0, [r7, #12]
 800738a:	f000 faff 	bl	800798c <_ZN2ei7EiAllocINS_8spectral10processing11freq_peak_tEE10deallocateEPS3_j>
 800738e:	bf00      	nop
 8007390:	3710      	adds	r7, #16
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}

08007396 <_ZSt11__addressofIN2ei8spectral10processing11freq_peak_tEEPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8007396:	b480      	push	{r7}
 8007398:	b083      	sub	sp, #12
 800739a:	af00      	add	r7, sp, #0
 800739c:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	4618      	mov	r0, r3
 80073a2:	370c      	adds	r7, #12
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr

080073ac <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE7destroyIS4_EEvRS5_PT_>:
	destroy(_Alloc& __a, _Tp* __p)
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b082      	sub	sp, #8
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	6039      	str	r1, [r7, #0]
	{ _S_destroy(__a, __p, 0); }
 80073b6:	2200      	movs	r2, #0
 80073b8:	6839      	ldr	r1, [r7, #0]
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f000 faf3 	bl	80079a6 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE10_S_destroyIS5_S4_EEvRT_PT0_z>
 80073c0:	bf00      	nop
 80073c2:	3708      	adds	r7, #8
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <_ZSt7forwardIRKN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80073c8:	b480      	push	{r7}
 80073ca:	b083      	sub	sp, #12
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	4618      	mov	r0, r3
 80073d4:	370c      	adds	r7, #12
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr

080073de <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE12_S_constructIS4_JRKS4_EEENSt9enable_ifIXsrSt6__and_IJSB_IJSt6__not_INS6_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleISE_JSG_EEEEEE5valueEvE4typeERS5_PSE_DpOSF_>:
	_S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
 80073de:	b590      	push	{r4, r7, lr}
 80073e0:	b085      	sub	sp, #20
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	60f8      	str	r0, [r7, #12]
 80073e6:	60b9      	str	r1, [r7, #8]
 80073e8:	607a      	str	r2, [r7, #4]
	  ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f7ff ffec 	bl	80073c8 <_ZSt7forwardIRKN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS6_E4typeE>
 80073f0:	4604      	mov	r4, r0
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	4619      	mov	r1, r3
 80073f6:	2008      	movs	r0, #8
 80073f8:	f7fa f86b 	bl	80014d2 <_ZnwjPv>
 80073fc:	4603      	mov	r3, r0
 80073fe:	4622      	mov	r2, r4
 8007400:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007404:	e883 0003 	stmia.w	r3, {r0, r1}
	}
 8007408:	bf00      	nop
 800740a:	3714      	adds	r7, #20
 800740c:	46bd      	mov	sp, r7
 800740e:	bd90      	pop	{r4, r7, pc}

08007410 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 8007410:	b590      	push	{r4, r7, lr}
 8007412:	b087      	sub	sp, #28
 8007414:	af00      	add	r7, sp, #0
 8007416:	60f8      	str	r0, [r7, #12]
 8007418:	60b9      	str	r1, [r7, #8]
 800741a:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 800741c:	68f8      	ldr	r0, [r7, #12]
 800741e:	f000 fad1 	bl	80079c4 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE8max_sizeEv>
 8007422:	4604      	mov	r4, r0
 8007424:	68f8      	ldr	r0, [r7, #12]
 8007426:	f7ff fabf 	bl	80069a8 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE4sizeEv>
 800742a:	4603      	mov	r3, r0
 800742c:	1ae2      	subs	r2, r4, r3
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	429a      	cmp	r2, r3
 8007432:	bf34      	ite	cc
 8007434:	2301      	movcc	r3, #1
 8007436:	2300      	movcs	r3, #0
 8007438:	b2db      	uxtb	r3, r3
 800743a:	2b00      	cmp	r3, #0
 800743c:	d002      	beq.n	8007444 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f019 fab5 	bl	80209ae <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 8007444:	68f8      	ldr	r0, [r7, #12]
 8007446:	f7ff faaf 	bl	80069a8 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE4sizeEv>
 800744a:	4604      	mov	r4, r0
 800744c:	68f8      	ldr	r0, [r7, #12]
 800744e:	f7ff faab 	bl	80069a8 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE4sizeEv>
 8007452:	4603      	mov	r3, r0
 8007454:	613b      	str	r3, [r7, #16]
 8007456:	f107 0208 	add.w	r2, r7, #8
 800745a:	f107 0310 	add.w	r3, r7, #16
 800745e:	4611      	mov	r1, r2
 8007460:	4618      	mov	r0, r3
 8007462:	f000 fac0 	bl	80079e6 <_ZSt3maxIjERKT_S2_S2_>
 8007466:	4603      	mov	r3, r0
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4423      	add	r3, r4
 800746c:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800746e:	68f8      	ldr	r0, [r7, #12]
 8007470:	f7ff fa9a 	bl	80069a8 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE4sizeEv>
 8007474:	4602      	mov	r2, r0
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	4293      	cmp	r3, r2
 800747a:	d306      	bcc.n	800748a <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_M_check_lenEjPKc+0x7a>
 800747c:	68f8      	ldr	r0, [r7, #12]
 800747e:	f000 faa1 	bl	80079c4 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE8max_sizeEv>
 8007482:	4602      	mov	r2, r0
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	4293      	cmp	r3, r2
 8007488:	d904      	bls.n	8007494 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_M_check_lenEjPKc+0x84>
 800748a:	68f8      	ldr	r0, [r7, #12]
 800748c:	f000 fa9a 	bl	80079c4 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE8max_sizeEv>
 8007490:	4603      	mov	r3, r0
 8007492:	e000      	b.n	8007496 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_M_check_lenEjPKc+0x86>
 8007494:	697b      	ldr	r3, [r7, #20]
      }
 8007496:	4618      	mov	r0, r3
 8007498:	371c      	adds	r7, #28
 800749a:	46bd      	mov	sp, r7
 800749c:	bd90      	pop	{r4, r7, pc}

0800749e <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800749e:	b590      	push	{r4, r7, lr}
 80074a0:	b083      	sub	sp, #12
 80074a2:	af00      	add	r7, sp, #0
 80074a4:	6078      	str	r0, [r7, #4]
 80074a6:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f000 f835 	bl	8007518 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 80074ae:	4603      	mov	r3, r0
 80074b0:	681c      	ldr	r4, [r3, #0]
 80074b2:	6838      	ldr	r0, [r7, #0]
 80074b4:	f000 f830 	bl	8007518 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 80074b8:	4603      	mov	r3, r0
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	1ae3      	subs	r3, r4, r3
 80074be:	10db      	asrs	r3, r3, #3
 80074c0:	4618      	mov	r0, r3
 80074c2:	370c      	adds	r7, #12
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd90      	pop	{r4, r7, pc}

080074c8 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b082      	sub	sp, #8
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d006      	beq.n	80074e6 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_M_allocateEj+0x1e>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6839      	ldr	r1, [r7, #0]
 80074dc:	4618      	mov	r0, r3
 80074de:	f000 fa96 	bl	8007a0e <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE8allocateERS5_j>
 80074e2:	4603      	mov	r3, r0
 80074e4:	e000      	b.n	80074e8 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_M_allocateEj+0x20>
 80074e6:	2300      	movs	r3, #0
      }
 80074e8:	4618      	mov	r0, r3
 80074ea:	3708      	adds	r7, #8
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_S_relocateEPS3_S7_S7_RS5_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 80074f0:	b590      	push	{r4, r7, lr}
 80074f2:	b087      	sub	sp, #28
 80074f4:	af02      	add	r7, sp, #8
 80074f6:	60f8      	str	r0, [r7, #12]
 80074f8:	60b9      	str	r1, [r7, #8]
 80074fa:	607a      	str	r2, [r7, #4]
 80074fc:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 80074fe:	f88d 4000 	strb.w	r4, [sp]
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	687a      	ldr	r2, [r7, #4]
 8007506:	68b9      	ldr	r1, [r7, #8]
 8007508:	68f8      	ldr	r0, [r7, #12]
 800750a:	f000 fa8e 	bl	8007a2a <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE14_S_do_relocateEPS3_S7_S7_RS5_St17integral_constantIbLb1EE>
 800750e:	4603      	mov	r3, r0
      }
 8007510:	4618      	mov	r0, r3
 8007512:	3714      	adds	r7, #20
 8007514:	46bd      	mov	sp, r7
 8007516:	bd90      	pop	{r4, r7, pc}

08007518 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8007518:	b480      	push	{r7}
 800751a:	b083      	sub	sp, #12
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	4618      	mov	r0, r3
 8007524:	370c      	adds	r7, #12
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr

0800752e <_ZSt34__uninitialized_move_if_noexcept_aIPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 800752e:	b590      	push	{r4, r7, lr}
 8007530:	b085      	sub	sp, #20
 8007532:	af00      	add	r7, sp, #0
 8007534:	60f8      	str	r0, [r7, #12]
 8007536:	60b9      	str	r1, [r7, #8]
 8007538:	607a      	str	r2, [r7, #4]
 800753a:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 800753c:	68f8      	ldr	r0, [r7, #12]
 800753e:	f000 fa86 	bl	8007a4e <_ZSt32__make_move_if_noexcept_iteratorIN2ei8spectral10processing11freq_peak_tESt13move_iteratorIPS3_EET0_PT_>
 8007542:	4604      	mov	r4, r0
 8007544:	68b8      	ldr	r0, [r7, #8]
 8007546:	f000 fa82 	bl	8007a4e <_ZSt32__make_move_if_noexcept_iteratorIN2ei8spectral10processing11freq_peak_tESt13move_iteratorIPS3_EET0_PT_>
 800754a:	4601      	mov	r1, r0
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	687a      	ldr	r2, [r7, #4]
 8007550:	4620      	mov	r0, r4
 8007552:	f000 fa8b 	bl	8007a6c <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEES5_NS1_7EiAllocIS4_EEET0_T_SA_S9_RT1_>
 8007556:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 8007558:	4618      	mov	r0, r3
 800755a:	3714      	adds	r7, #20
 800755c:	46bd      	mov	sp, r7
 800755e:	bd90      	pop	{r4, r7, pc}

08007560 <_ZSt4moveIRZN2ei8spectral10processingL14find_fft_peaksEPNS0_9ei_matrixES4_fftEUlRKNS2_11freq_peak_tES7_E_EONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 8007560:	b480      	push	{r7}
 8007562:	b083      	sub	sp, #12
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	4618      	mov	r0, r3
 800756c:	370c      	adds	r7, #12
 800756e:	46bd      	mov	sp, r7
 8007570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007574:	4770      	bx	lr

08007576 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1ESA_>:
      _Iter_comp_iter(_Compare __comp)
 8007576:	b580      	push	{r7, lr}
 8007578:	b082      	sub	sp, #8
 800757a:	af00      	add	r7, sp, #0
 800757c:	6078      	str	r0, [r7, #4]
 800757e:	7039      	strb	r1, [r7, #0]
	: _M_comp(_GLIBCXX_MOVE(__comp))
 8007580:	463b      	mov	r3, r7
 8007582:	4618      	mov	r0, r3
 8007584:	f7ff ffec 	bl	8007560 <_ZSt4moveIRZN2ei8spectral10processingL14find_fft_peaksEPNS0_9ei_matrixES4_fftEUlRKNS2_11freq_peak_tES7_E_EONSt16remove_referenceIT_E4typeEOSB_>
      { }
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	4618      	mov	r0, r3
 800758c:	3708      	adds	r7, #8
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}

08007592 <_ZN9__gnu_cxxneIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8007592:	b590      	push	{r4, r7, lr}
 8007594:	b083      	sub	sp, #12
 8007596:	af00      	add	r7, sp, #0
 8007598:	6078      	str	r0, [r7, #4]
 800759a:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f7ff ffbb 	bl	8007518 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 80075a2:	4603      	mov	r3, r0
 80075a4:	681c      	ldr	r4, [r3, #0]
 80075a6:	6838      	ldr	r0, [r7, #0]
 80075a8:	f7ff ffb6 	bl	8007518 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 80075ac:	4603      	mov	r3, r0
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	429c      	cmp	r4, r3
 80075b2:	bf14      	ite	ne
 80075b4:	2301      	movne	r3, #1
 80075b6:	2300      	moveq	r3, #0
 80075b8:	b2db      	uxtb	r3, r3
 80075ba:	4618      	mov	r0, r3
 80075bc:	370c      	adds	r7, #12
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd90      	pop	{r4, r7, pc}

080075c2 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_>:
    __introsort_loop(_RandomAccessIterator __first,
 80075c2:	b580      	push	{r7, lr}
 80075c4:	b086      	sub	sp, #24
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	60f8      	str	r0, [r7, #12]
 80075ca:	60b9      	str	r1, [r7, #8]
 80075cc:	607a      	str	r2, [r7, #4]
 80075ce:	703b      	strb	r3, [r7, #0]
      while (__last - __first > int(_S_threshold))
 80075d0:	f107 020c 	add.w	r2, r7, #12
 80075d4:	f107 0308 	add.w	r3, r7, #8
 80075d8:	4611      	mov	r1, r2
 80075da:	4618      	mov	r0, r3
 80075dc:	f7ff ff5f 	bl	800749e <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 80075e0:	4603      	mov	r3, r0
 80075e2:	2b10      	cmp	r3, #16
 80075e4:	bfcc      	ite	gt
 80075e6:	2301      	movgt	r3, #1
 80075e8:	2300      	movle	r3, #0
 80075ea:	b2db      	uxtb	r3, r3
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d01c      	beq.n	800762a <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0x68>
	  if (__depth_limit == 0)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d106      	bne.n	8007604 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0x42>
	      std::__partial_sort(__first, __last, __last, __comp);
 80075f6:	783b      	ldrb	r3, [r7, #0]
 80075f8:	68ba      	ldr	r2, [r7, #8]
 80075fa:	68b9      	ldr	r1, [r7, #8]
 80075fc:	68f8      	ldr	r0, [r7, #12]
 80075fe:	f000 fa66 	bl	8007ace <_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_T0_>
 8007602:	e012      	b.n	800762a <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0x68>
	  --__depth_limit;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	3b01      	subs	r3, #1
 8007608:	607b      	str	r3, [r7, #4]
	    std::__unguarded_partition_pivot(__first, __last, __comp);
 800760a:	783a      	ldrb	r2, [r7, #0]
 800760c:	68b9      	ldr	r1, [r7, #8]
 800760e:	68f8      	ldr	r0, [r7, #12]
 8007610:	f000 fa74 	bl	8007afc <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_T0_>
 8007614:	4603      	mov	r3, r0
 8007616:	617b      	str	r3, [r7, #20]
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
 8007618:	783b      	ldrb	r3, [r7, #0]
 800761a:	687a      	ldr	r2, [r7, #4]
 800761c:	68b9      	ldr	r1, [r7, #8]
 800761e:	6978      	ldr	r0, [r7, #20]
 8007620:	f7ff ffcf 	bl	80075c2 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_>
	  __last = __cut;
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	60bb      	str	r3, [r7, #8]
      while (__last - __first > int(_S_threshold))
 8007628:	e7d2      	b.n	80075d0 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0xe>
    }
 800762a:	3718      	adds	r7, #24
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}

08007630 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>:
    __final_insertion_sort(_RandomAccessIterator __first,
 8007630:	b580      	push	{r7, lr}
 8007632:	b084      	sub	sp, #16
 8007634:	af00      	add	r7, sp, #0
 8007636:	60f8      	str	r0, [r7, #12]
 8007638:	60b9      	str	r1, [r7, #8]
 800763a:	713a      	strb	r2, [r7, #4]
      if (__last - __first > int(_S_threshold))
 800763c:	f107 020c 	add.w	r2, r7, #12
 8007640:	f107 0308 	add.w	r3, r7, #8
 8007644:	4611      	mov	r1, r2
 8007646:	4618      	mov	r0, r3
 8007648:	f7ff ff29 	bl	800749e <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 800764c:	4603      	mov	r3, r0
 800764e:	2b10      	cmp	r3, #16
 8007650:	bfcc      	ite	gt
 8007652:	2301      	movgt	r3, #1
 8007654:	2300      	movle	r3, #0
 8007656:	b2db      	uxtb	r3, r3
 8007658:	2b00      	cmp	r3, #0
 800765a:	d018      	beq.n	800768e <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0x5e>
	  std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
 800765c:	f107 030c 	add.w	r3, r7, #12
 8007660:	2110      	movs	r1, #16
 8007662:	4618      	mov	r0, r3
 8007664:	f000 fa8c 	bl	8007b80 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 8007668:	4603      	mov	r3, r0
 800766a:	793a      	ldrb	r2, [r7, #4]
 800766c:	4619      	mov	r1, r3
 800766e:	68f8      	ldr	r0, [r7, #12]
 8007670:	f000 fa9e 	bl	8007bb0 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>
	  std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,
 8007674:	f107 030c 	add.w	r3, r7, #12
 8007678:	2110      	movs	r1, #16
 800767a:	4618      	mov	r0, r3
 800767c:	f000 fa80 	bl	8007b80 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 8007680:	4603      	mov	r3, r0
 8007682:	793a      	ldrb	r2, [r7, #4]
 8007684:	68b9      	ldr	r1, [r7, #8]
 8007686:	4618      	mov	r0, r3
 8007688:	f000 fafe 	bl	8007c88 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>
    }
 800768c:	e004      	b.n	8007698 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0x68>
	std::__insertion_sort(__first, __last, __comp);
 800768e:	793a      	ldrb	r2, [r7, #4]
 8007690:	68b9      	ldr	r1, [r7, #8]
 8007692:	68f8      	ldr	r0, [r7, #12]
 8007694:	f000 fa8c 	bl	8007bb0 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>
    }
 8007698:	bf00      	nop
 800769a:	3710      	adds	r7, #16
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}

080076a0 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE21_M_not_empty_functionIS2_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp)
 80076a0:	b480      	push	{r7}
 80076a2:	b083      	sub	sp, #12
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	bf14      	ite	ne
 80076ae:	2301      	movne	r3, #1
 80076b0:	2300      	moveq	r3, #0
 80076b2:	b2db      	uxtb	r3, r3
 80076b4:	4618      	mov	r0, r3
 80076b6:	370c      	adds	r7, #12
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr

080076c0 <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80076c0:	b480      	push	{r7}
 80076c2:	b083      	sub	sp, #12
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	4618      	mov	r0, r3
 80076cc:	370c      	adds	r7, #12
 80076ce:	46bd      	mov	sp, r7
 80076d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d4:	4770      	bx	lr

080076d6 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 80076d6:	b590      	push	{r4, r7, lr}
 80076d8:	b083      	sub	sp, #12
 80076da:	af00      	add	r7, sp, #0
 80076dc:	6078      	str	r0, [r7, #4]
 80076de:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 80076e0:	6838      	ldr	r0, [r7, #0]
 80076e2:	f7ff ffed 	bl	80076c0 <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>
 80076e6:	4603      	mov	r3, r0
 80076e8:	4622      	mov	r2, r4
 80076ea:	4619      	mov	r1, r3
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f000 fb03 	bl	8007cf8 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>
 80076f2:	bf00      	nop
 80076f4:	370c      	adds	r7, #12
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd90      	pop	{r4, r7, pc}

080076fa <_ZNSt17_Function_handlerIFijjPfEPS1_E9_M_invokeERKSt9_Any_dataOjS7_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80076fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076fc:	b085      	sub	sp, #20
 80076fe:	af00      	add	r7, sp, #0
 8007700:	60f8      	str	r0, [r7, #12]
 8007702:	60b9      	str	r1, [r7, #8]
 8007704:	607a      	str	r2, [r7, #4]
 8007706:	603b      	str	r3, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8007708:	68f8      	ldr	r0, [r7, #12]
 800770a:	f000 fb0e 	bl	8007d2a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 800770e:	4604      	mov	r4, r0
 8007710:	68b8      	ldr	r0, [r7, #8]
 8007712:	f7ff fadc 	bl	8006cce <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8007716:	4605      	mov	r5, r0
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f7ff fad8 	bl	8006cce <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800771e:	4606      	mov	r6, r0
 8007720:	6838      	ldr	r0, [r7, #0]
 8007722:	f7ff fadf 	bl	8006ce4 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8007726:	4603      	mov	r3, r0
 8007728:	4632      	mov	r2, r6
 800772a:	4629      	mov	r1, r5
 800772c:	4620      	mov	r0, r4
 800772e:	f000 fb0d 	bl	8007d4c <_ZSt10__invoke_rIiRPFijjPfEJjjS0_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>
 8007732:	4603      	mov	r3, r0
      }
 8007734:	4618      	mov	r0, r3
 8007736:	3714      	adds	r7, #20
 8007738:	46bd      	mov	sp, r7
 800773a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800773c <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800773c:	b590      	push	{r4, r7, lr}
 800773e:	b085      	sub	sp, #20
 8007740:	af00      	add	r7, sp, #0
 8007742:	60f8      	str	r0, [r7, #12]
 8007744:	60b9      	str	r1, [r7, #8]
 8007746:	4613      	mov	r3, r2
 8007748:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 800774a:	79fb      	ldrb	r3, [r7, #7]
 800774c:	2b01      	cmp	r3, #1
 800774e:	d109      	bne.n	8007764 <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8007750:	68f8      	ldr	r0, [r7, #12]
 8007752:	f000 fb20 	bl	8007d96 <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>
 8007756:	4604      	mov	r4, r0
 8007758:	68b8      	ldr	r0, [r7, #8]
 800775a:	f000 fae6 	bl	8007d2a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 800775e:	4603      	mov	r3, r0
 8007760:	6023      	str	r3, [r4, #0]
	    break;
 8007762:	e005      	b.n	8007770 <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8007764:	79fb      	ldrb	r3, [r7, #7]
 8007766:	461a      	mov	r2, r3
 8007768:	68b9      	ldr	r1, [r7, #8]
 800776a:	68f8      	ldr	r0, [r7, #12]
 800776c:	f000 fb1f 	bl	8007dae <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>
	return false;
 8007770:	2300      	movs	r3, #0
      }
 8007772:	4618      	mov	r0, r3
 8007774:	3714      	adds	r7, #20
 8007776:	46bd      	mov	sp, r7
 8007778:	bd90      	pop	{r4, r7, pc}

0800777a <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E21_M_not_empty_functionIS3_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 800777a:	b480      	push	{r7}
 800777c:	b083      	sub	sp, #12
 800777e:	af00      	add	r7, sp, #0
 8007780:	6078      	str	r0, [r7, #4]
	  { return true; }
 8007782:	2301      	movs	r3, #1
 8007784:	4618      	mov	r0, r3
 8007786:	370c      	adds	r7, #12
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr

08007790 <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8007790:	b480      	push	{r7}
 8007792:	b083      	sub	sp, #12
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	4618      	mov	r0, r3
 800779c:	370c      	adds	r7, #12
 800779e:	46bd      	mov	sp, r7
 80077a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a4:	4770      	bx	lr

080077a6 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 80077a6:	b590      	push	{r4, r7, lr}
 80077a8:	b083      	sub	sp, #12
 80077aa:	af00      	add	r7, sp, #0
 80077ac:	6078      	str	r0, [r7, #4]
 80077ae:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 80077b0:	6838      	ldr	r0, [r7, #0]
 80077b2:	f7ff ffed 	bl	8007790 <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>
 80077b6:	4603      	mov	r3, r0
 80077b8:	4622      	mov	r2, r4
 80077ba:	4619      	mov	r1, r3
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f000 fb21 	bl	8007e04 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>
 80077c2:	bf00      	nop
 80077c4:	370c      	adds	r7, #12
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd90      	pop	{r4, r7, pc}

080077ca <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80077ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077cc:	b085      	sub	sp, #20
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	60f8      	str	r0, [r7, #12]
 80077d2:	60b9      	str	r1, [r7, #8]
 80077d4:	607a      	str	r2, [r7, #4]
 80077d6:	603b      	str	r3, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 80077d8:	68f8      	ldr	r0, [r7, #12]
 80077da:	f000 fb2c 	bl	8007e36 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 80077de:	4604      	mov	r4, r0
 80077e0:	68b8      	ldr	r0, [r7, #8]
 80077e2:	f7ff fa74 	bl	8006cce <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 80077e6:	4605      	mov	r5, r0
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f7ff fa70 	bl	8006cce <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 80077ee:	4606      	mov	r6, r0
 80077f0:	6838      	ldr	r0, [r7, #0]
 80077f2:	f7ff fa77 	bl	8006ce4 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 80077f6:	4603      	mov	r3, r0
 80077f8:	4632      	mov	r2, r6
 80077fa:	4629      	mov	r1, r5
 80077fc:	4620      	mov	r0, r4
 80077fe:	f000 fb2b 	bl	8007e58 <_ZSt10__invoke_rIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>
 8007802:	4603      	mov	r3, r0
      }
 8007804:	4618      	mov	r0, r3
 8007806:	3714      	adds	r7, #20
 8007808:	46bd      	mov	sp, r7
 800780a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800780c <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800780c:	b590      	push	{r4, r7, lr}
 800780e:	b085      	sub	sp, #20
 8007810:	af00      	add	r7, sp, #0
 8007812:	60f8      	str	r0, [r7, #12]
 8007814:	60b9      	str	r1, [r7, #8]
 8007816:	4613      	mov	r3, r2
 8007818:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 800781a:	79fb      	ldrb	r3, [r7, #7]
 800781c:	2b01      	cmp	r3, #1
 800781e:	d109      	bne.n	8007834 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8007820:	68f8      	ldr	r0, [r7, #12]
 8007822:	f000 fb3e 	bl	8007ea2 <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
 8007826:	4604      	mov	r4, r0
 8007828:	68b8      	ldr	r0, [r7, #8]
 800782a:	f000 fb04 	bl	8007e36 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 800782e:	4603      	mov	r3, r0
 8007830:	6023      	str	r3, [r4, #0]
	    break;
 8007832:	e005      	b.n	8007840 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8007834:	79fb      	ldrb	r3, [r7, #7]
 8007836:	461a      	mov	r2, r3
 8007838:	68b9      	ldr	r1, [r7, #8]
 800783a:	68f8      	ldr	r0, [r7, #12]
 800783c:	f000 fb3d 	bl	8007eba <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>
	return false;
 8007840:	2300      	movs	r3, #0
      }
 8007842:	4618      	mov	r0, r3
 8007844:	3714      	adds	r7, #20
 8007846:	46bd      	mov	sp, r7
 8007848:	bd90      	pop	{r4, r7, pc}

0800784a <_ZSt3getILj0EJPvPFvS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS7_>:

  /// Return a const reference to the ith element of a const tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 800784a:	b580      	push	{r7, lr}
 800784c:	b082      	sub	sp, #8
 800784e:	af00      	add	r7, sp, #0
 8007850:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	4618      	mov	r0, r3
 8007856:	f000 fb5b 	bl	8007f10 <_ZSt12__get_helperILj0EPvJPFvS0_EEERKT0_RKSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800785a:	4603      	mov	r3, r0
 800785c:	4618      	mov	r0, r3
 800785e:	3708      	adds	r7, #8
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}

08007864 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE18_Bvector_impl_dataC1Ev>:
	_Bvector_impl_data() _GLIBCXX_NOEXCEPT
 8007864:	b580      	push	{r7, lr}
 8007866:	b082      	sub	sp, #8
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	4618      	mov	r0, r3
 8007870:	f7f9 ff33 	bl	80016da <_ZNSt13_Bit_iteratorC1Ev>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	3308      	adds	r3, #8
 8007878:	4618      	mov	r0, r3
 800787a:	f7f9 ff2e 	bl	80016da <_ZNSt13_Bit_iteratorC1Ev>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2200      	movs	r2, #0
 8007882:	611a      	str	r2, [r3, #16]
	{ }
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	4618      	mov	r0, r3
 8007888:	3708      	adds	r7, #8
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}

0800788e <_ZNSt16allocator_traitsIN2ei7EiAllocImEEE10deallocateERS2_Pmj>:
      deallocate(_Alloc& __a, pointer __p, size_type __n)
 800788e:	b580      	push	{r7, lr}
 8007890:	b084      	sub	sp, #16
 8007892:	af00      	add	r7, sp, #0
 8007894:	60f8      	str	r0, [r7, #12]
 8007896:	60b9      	str	r1, [r7, #8]
 8007898:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800789a:	687a      	ldr	r2, [r7, #4]
 800789c:	68b9      	ldr	r1, [r7, #8]
 800789e:	68f8      	ldr	r0, [r7, #12]
 80078a0:	f000 fb42 	bl	8007f28 <_ZN2ei7EiAllocImE10deallocateEPmj>
 80078a4:	bf00      	nop
 80078a6:	3710      	adds	r7, #16
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}

080078ac <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE18_Bvector_impl_data8_M_resetEv>:
	_M_reset() _GLIBCXX_NOEXCEPT
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
	  _M_start = _M_finish = _Bit_iterator();
 80078b4:	f107 0308 	add.w	r3, r7, #8
 80078b8:	4618      	mov	r0, r3
 80078ba:	f7f9 ff0e 	bl	80016da <_ZNSt13_Bit_iteratorC1Ev>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	3308      	adds	r3, #8
 80078c2:	f107 0208 	add.w	r2, r7, #8
 80078c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80078ca:	e883 0003 	stmia.w	r3, {r0, r1}
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f103 0208 	add.w	r2, r3, #8
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80078da:	e883 0003 	stmia.w	r3, {r0, r1}
	  _M_end_of_storage = _Bit_pointer();
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2200      	movs	r2, #0
 80078e2:	611a      	str	r2, [r3, #16]
	}
 80078e4:	bf00      	nop
 80078e6:	3710      	adds	r7, #16
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}

080078ec <_ZNSt16allocator_traitsIN2ei7EiAllocImEEE8allocateERS2_j>:
      allocate(_Alloc& __a, size_type __n)
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b082      	sub	sp, #8
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80078f6:	6839      	ldr	r1, [r7, #0]
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f000 fb22 	bl	8007f42 <_ZN2ei7EiAllocImE8allocateEj>
 80078fe:	4603      	mov	r3, r0
 8007900:	4618      	mov	r0, r3
 8007902:	3708      	adds	r7, #8
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}

08007908 <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8007908:	b480      	push	{r7}
 800790a:	b083      	sub	sp, #12
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	4618      	mov	r0, r3
 8007914:	370c      	adds	r7, #12
 8007916:	46bd      	mov	sp, r7
 8007918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791c:	4770      	bx	lr

0800791e <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEEC1IRS0_JS2_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 800791e:	b590      	push	{r4, r7, lr}
 8007920:	b085      	sub	sp, #20
 8007922:	af00      	add	r7, sp, #0
 8007924:	60f8      	str	r0, [r7, #12]
 8007926:	60b9      	str	r1, [r7, #8]
 8007928:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 800792a:	68fc      	ldr	r4, [r7, #12]
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f7ff fce5 	bl	80072fc <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8007932:	4603      	mov	r3, r0
 8007934:	4619      	mov	r1, r3
 8007936:	4620      	mov	r0, r4
 8007938:	f000 fb14 	bl	8007f64 <_ZNSt11_Tuple_implILj1EJPFvPvEEEC1IS2_EEOT_>
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	1d1c      	adds	r4, r3, #4
 8007940:	68b8      	ldr	r0, [r7, #8]
 8007942:	f7ff ffe1 	bl	8007908 <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>
 8007946:	4603      	mov	r3, r0
 8007948:	4619      	mov	r1, r3
 800794a:	4620      	mov	r0, r4
 800794c:	f000 fb1d 	bl	8007f8a <_ZNSt10_Head_baseILj0EPvLb0EEC1IRS0_EEOT_>
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	4618      	mov	r0, r3
 8007954:	3714      	adds	r7, #20
 8007956:	46bd      	mov	sp, r7
 8007958:	bd90      	pop	{r4, r7, pc}

0800795a <_ZSt12__get_helperILj0EPvJPFvS0_EEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800795a:	b580      	push	{r7, lr}
 800795c:	b082      	sub	sp, #8
 800795e:	af00      	add	r7, sp, #0
 8007960:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f000 fb22 	bl	8007fac <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERS3_>
 8007968:	4603      	mov	r3, r0
 800796a:	4618      	mov	r0, r3
 800796c:	3708      	adds	r7, #8
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}

08007972 <_ZSt3getILj1EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>:
    get(tuple<_Elements...>& __t) noexcept
 8007972:	b580      	push	{r7, lr}
 8007974:	b082      	sub	sp, #8
 8007976:	af00      	add	r7, sp, #0
 8007978:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	4618      	mov	r0, r3
 800797e:	f000 fb23 	bl	8007fc8 <_ZSt12__get_helperILj1EPFvPvEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8007982:	4603      	mov	r3, r0
 8007984:	4618      	mov	r0, r3
 8007986:	3708      	adds	r7, #8
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}

0800798c <_ZN2ei7EiAllocINS_8spectral10processing11freq_peak_tEE10deallocateEPS3_j>:
        allocs[ptr] = bytes;
#endif
        return (T *)ptr;
    }

    void deallocate(T *p, size_t n) noexcept
 800798c:	b580      	push	{r7, lr}
 800798e:	b084      	sub	sp, #16
 8007990:	af00      	add	r7, sp, #0
 8007992:	60f8      	str	r0, [r7, #12]
 8007994:	60b9      	str	r1, [r7, #8]
 8007996:	607a      	str	r2, [r7, #4]
#if EIDSP_TRACK_ALLOCATIONS
        auto size_p = allocs.find(p);
        ei_dsp_free(p,size_p->second);
        allocs.erase(size_p);
#else
        ei_dsp_free(p,0);
 8007998:	68b8      	ldr	r0, [r7, #8]
 800799a:	f013 f94f 	bl	801ac3c <_Z7ei_freePv>
#endif
    }
 800799e:	bf00      	nop
 80079a0:	3710      	adds	r7, #16
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}

080079a6 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE10_S_destroyIS5_S4_EEvRT_PT0_z>:
	_S_destroy(_Alloc2&, _Tp* __p, ...)
 80079a6:	b40e      	push	{r1, r2, r3}
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b083      	sub	sp, #12
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
	{ std::_Destroy(__p); }
 80079b0:	6978      	ldr	r0, [r7, #20]
 80079b2:	f000 fb15 	bl	8007fe0 <_ZSt8_DestroyIN2ei8spectral10processing11freq_peak_tEEvPT_>
 80079b6:	bf00      	nop
 80079b8:	370c      	adds	r7, #12
 80079ba:	46bd      	mov	sp, r7
 80079bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80079c0:	b003      	add	sp, #12
 80079c2:	4770      	bx	lr

080079c4 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b082      	sub	sp, #8
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	4618      	mov	r0, r3
 80079d0:	f000 fb2a 	bl	8008028 <_ZNKSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>
 80079d4:	4603      	mov	r3, r0
 80079d6:	4618      	mov	r0, r3
 80079d8:	f000 fb0c 	bl	8007ff4 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_S_max_sizeERKS5_>
 80079dc:	4603      	mov	r3, r0
 80079de:	4618      	mov	r0, r3
 80079e0:	3708      	adds	r7, #8
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}

080079e6 <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 80079e6:	b480      	push	{r7}
 80079e8:	b083      	sub	sp, #12
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
 80079ee:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681a      	ldr	r2, [r3, #0]
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	429a      	cmp	r2, r3
 80079fa:	d201      	bcs.n	8007a00 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	e000      	b.n	8007a02 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8007a00:	687b      	ldr	r3, [r7, #4]
    }
 8007a02:	4618      	mov	r0, r3
 8007a04:	370c      	adds	r7, #12
 8007a06:	46bd      	mov	sp, r7
 8007a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0c:	4770      	bx	lr

08007a0e <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE8allocateERS5_j>:
      allocate(_Alloc& __a, size_type __n)
 8007a0e:	b580      	push	{r7, lr}
 8007a10:	b082      	sub	sp, #8
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	6078      	str	r0, [r7, #4]
 8007a16:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8007a18:	6839      	ldr	r1, [r7, #0]
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f000 fb0f 	bl	800803e <_ZN2ei7EiAllocINS_8spectral10processing11freq_peak_tEE8allocateEj>
 8007a20:	4603      	mov	r3, r0
 8007a22:	4618      	mov	r0, r3
 8007a24:	3708      	adds	r7, #8
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}

08007a2a <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE14_S_do_relocateEPS3_S7_S7_RS5_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8007a2a:	b580      	push	{r7, lr}
 8007a2c:	b084      	sub	sp, #16
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	60f8      	str	r0, [r7, #12]
 8007a32:	60b9      	str	r1, [r7, #8]
 8007a34:	607a      	str	r2, [r7, #4]
 8007a36:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	687a      	ldr	r2, [r7, #4]
 8007a3c:	68b9      	ldr	r1, [r7, #8]
 8007a3e:	68f8      	ldr	r0, [r7, #12]
 8007a40:	f000 fb0e 	bl	8008060 <_ZSt12__relocate_aIPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_>
 8007a44:	4603      	mov	r3, r0
      }
 8007a46:	4618      	mov	r0, r3
 8007a48:	3710      	adds	r7, #16
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}

08007a4e <_ZSt32__make_move_if_noexcept_iteratorIN2ei8spectral10processing11freq_peak_tESt13move_iteratorIPS3_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8007a4e:	b580      	push	{r7, lr}
 8007a50:	b084      	sub	sp, #16
 8007a52:	af00      	add	r7, sp, #0
 8007a54:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8007a56:	f107 030c 	add.w	r3, r7, #12
 8007a5a:	6879      	ldr	r1, [r7, #4]
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f000 fb1c 	bl	800809a <_ZNSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEEC1ES4_>
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	4618      	mov	r0, r3
 8007a66:	3710      	adds	r7, #16
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}

08007a6c <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEES5_NS1_7EiAllocIS4_EEET0_T_SA_S9_RT1_>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8007a6c:	b590      	push	{r4, r7, lr}
 8007a6e:	b087      	sub	sp, #28
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	60f8      	str	r0, [r7, #12]
 8007a74:	60b9      	str	r1, [r7, #8]
 8007a76:	607a      	str	r2, [r7, #4]
 8007a78:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	617b      	str	r3, [r7, #20]
	  for (; __first != __last; ++__first, (void)++__cur)
 8007a7e:	f107 0208 	add.w	r2, r7, #8
 8007a82:	f107 030c 	add.w	r3, r7, #12
 8007a86:	4611      	mov	r1, r2
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f000 fb18 	bl	80080be <_ZStneIPN2ei8spectral10processing11freq_peak_tEEbRKSt13move_iteratorIT_ES9_>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d017      	beq.n	8007ac4 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEES5_NS1_7EiAllocIS4_EEET0_T_SA_S9_RT1_+0x58>
	    __traits::construct(__alloc, std::__addressof(*__cur), *__first);
 8007a94:	6978      	ldr	r0, [r7, #20]
 8007a96:	f7ff fc7e 	bl	8007396 <_ZSt11__addressofIN2ei8spectral10processing11freq_peak_tEEPT_RS4_>
 8007a9a:	4604      	mov	r4, r0
 8007a9c:	f107 030c 	add.w	r3, r7, #12
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f000 fb2e 	bl	8008102 <_ZNKSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEEdeEv>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	4621      	mov	r1, r4
 8007aac:	6838      	ldr	r0, [r7, #0]
 8007aae:	f000 fb34 	bl	800811a <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE9constructIS4_JS4_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS5_PT_DpOS8_>
	  for (; __first != __last; ++__first, (void)++__cur)
 8007ab2:	f107 030c 	add.w	r3, r7, #12
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f000 fb12 	bl	80080e0 <_ZNSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEEppEv>
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	3308      	adds	r3, #8
 8007ac0:	617b      	str	r3, [r7, #20]
 8007ac2:	e7dc      	b.n	8007a7e <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEES5_NS1_7EiAllocIS4_EEET0_T_SA_S9_RT1_+0x12>
	  return __cur;
 8007ac4:	697b      	ldr	r3, [r7, #20]
    }
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	371c      	adds	r7, #28
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd90      	pop	{r4, r7, pc}

08007ace <_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_T0_>:
    __partial_sort(_RandomAccessIterator __first,
 8007ace:	b580      	push	{r7, lr}
 8007ad0:	b084      	sub	sp, #16
 8007ad2:	af00      	add	r7, sp, #0
 8007ad4:	60f8      	str	r0, [r7, #12]
 8007ad6:	60b9      	str	r1, [r7, #8]
 8007ad8:	607a      	str	r2, [r7, #4]
 8007ada:	703b      	strb	r3, [r7, #0]
      std::__heap_select(__first, __middle, __last, __comp);
 8007adc:	783b      	ldrb	r3, [r7, #0]
 8007ade:	687a      	ldr	r2, [r7, #4]
 8007ae0:	68b9      	ldr	r1, [r7, #8]
 8007ae2:	68f8      	ldr	r0, [r7, #12]
 8007ae4:	f000 fb2c 	bl	8008140 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_T0_>
      std::__sort_heap(__first, __middle, __comp);
 8007ae8:	463b      	mov	r3, r7
 8007aea:	461a      	mov	r2, r3
 8007aec:	68b9      	ldr	r1, [r7, #8]
 8007aee:	68f8      	ldr	r0, [r7, #12]
 8007af0:	f000 fb58 	bl	80081a4 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_>
    }
 8007af4:	bf00      	nop
 8007af6:	3710      	adds	r7, #16
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}

08007afc <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_T0_>:
    __unguarded_partition_pivot(_RandomAccessIterator __first,
 8007afc:	b590      	push	{r4, r7, lr}
 8007afe:	b089      	sub	sp, #36	; 0x24
 8007b00:	af02      	add	r7, sp, #8
 8007b02:	60f8      	str	r0, [r7, #12]
 8007b04:	60b9      	str	r1, [r7, #8]
 8007b06:	713a      	strb	r2, [r7, #4]
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
 8007b08:	f107 020c 	add.w	r2, r7, #12
 8007b0c:	f107 0308 	add.w	r3, r7, #8
 8007b10:	4611      	mov	r1, r2
 8007b12:	4618      	mov	r0, r3
 8007b14:	f7ff fcc3 	bl	800749e <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	0fda      	lsrs	r2, r3, #31
 8007b1c:	4413      	add	r3, r2
 8007b1e:	105b      	asrs	r3, r3, #1
 8007b20:	461a      	mov	r2, r3
 8007b22:	f107 030c 	add.w	r3, r7, #12
 8007b26:	4611      	mov	r1, r2
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f000 f829 	bl	8007b80 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	617b      	str	r3, [r7, #20]
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
 8007b32:	f107 030c 	add.w	r3, r7, #12
 8007b36:	2101      	movs	r1, #1
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f000 f821 	bl	8007b80 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 8007b3e:	4604      	mov	r4, r0
 8007b40:	f107 0308 	add.w	r3, r7, #8
 8007b44:	2101      	movs	r1, #1
 8007b46:	4618      	mov	r0, r3
 8007b48:	f000 fb52 	bl	80081f0 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmiEi>
 8007b4c:	4602      	mov	r2, r0
 8007b4e:	793b      	ldrb	r3, [r7, #4]
 8007b50:	f88d 3000 	strb.w	r3, [sp]
 8007b54:	4613      	mov	r3, r2
 8007b56:	697a      	ldr	r2, [r7, #20]
 8007b58:	4621      	mov	r1, r4
 8007b5a:	68f8      	ldr	r0, [r7, #12]
 8007b5c:	f000 fb7d 	bl	800825a <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_>
      return std::__unguarded_partition(__first + 1, __last, __first, __comp);
 8007b60:	f107 030c 	add.w	r3, r7, #12
 8007b64:	2101      	movs	r1, #1
 8007b66:	4618      	mov	r0, r3
 8007b68:	f000 f80a 	bl	8007b80 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 8007b6c:	793b      	ldrb	r3, [r7, #4]
 8007b6e:	68fa      	ldr	r2, [r7, #12]
 8007b70:	68b9      	ldr	r1, [r7, #8]
 8007b72:	f000 fbc7 	bl	8008304 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_>
 8007b76:	4603      	mov	r3, r0
    }
 8007b78:	4618      	mov	r0, r3
 8007b7a:	371c      	adds	r7, #28
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd90      	pop	{r4, r7, pc}

08007b80 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b084      	sub	sp, #16
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681a      	ldr	r2, [r3, #0]
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	00db      	lsls	r3, r3, #3
 8007b92:	4413      	add	r3, r2
 8007b94:	60fb      	str	r3, [r7, #12]
 8007b96:	f107 020c 	add.w	r2, r7, #12
 8007b9a:	f107 0308 	add.w	r3, r7, #8
 8007b9e:	4611      	mov	r1, r2
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f7ff f9db 	bl	8006f5c <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEC1ERKS5_>
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	4618      	mov	r0, r3
 8007baa:	3710      	adds	r7, #16
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}

08007bb0 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>:
    __insertion_sort(_RandomAccessIterator __first,
 8007bb0:	b5b0      	push	{r4, r5, r7, lr}
 8007bb2:	b088      	sub	sp, #32
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	60f8      	str	r0, [r7, #12]
 8007bb8:	60b9      	str	r1, [r7, #8]
 8007bba:	713a      	strb	r2, [r7, #4]
      if (__first == __last) return;
 8007bbc:	f107 0208 	add.w	r2, r7, #8
 8007bc0:	f107 030c 	add.w	r3, r7, #12
 8007bc4:	4611      	mov	r1, r2
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f000 fbe4 	bl	8008394 <_ZN9__gnu_cxxeqIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d156      	bne.n	8007c80 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0xd0>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 8007bd2:	f107 030c 	add.w	r3, r7, #12
 8007bd6:	2101      	movs	r1, #1
 8007bd8:	4618      	mov	r0, r3
 8007bda:	f7ff ffd1 	bl	8007b80 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 8007bde:	4603      	mov	r3, r0
 8007be0:	61fb      	str	r3, [r7, #28]
 8007be2:	f107 0208 	add.w	r2, r7, #8
 8007be6:	f107 031c 	add.w	r3, r7, #28
 8007bea:	4611      	mov	r1, r2
 8007bec:	4618      	mov	r0, r3
 8007bee:	f7ff fcd0 	bl	8007592 <_ZN9__gnu_cxxneIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d044      	beq.n	8007c82 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0xd2>
	  if (__comp(__i, __first))
 8007bf8:	1d3b      	adds	r3, r7, #4
 8007bfa:	68fa      	ldr	r2, [r7, #12]
 8007bfc:	69f9      	ldr	r1, [r7, #28]
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f000 fb0f 	bl	8008222 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 8007c04:	4603      	mov	r3, r0
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d02d      	beq.n	8007c66 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0xb6>
		__val = _GLIBCXX_MOVE(*__i);
 8007c0a:	f107 031c 	add.w	r3, r7, #28
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f000 fbe9 	bl	80083e6 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8007c14:	4603      	mov	r3, r0
 8007c16:	4618      	mov	r0, r3
 8007c18:	f000 fbf1 	bl	80083fe <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8007c1c:	4602      	mov	r2, r0
 8007c1e:	f107 0314 	add.w	r3, r7, #20
 8007c22:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007c26:	e883 0003 	stmia.w	r3, {r0, r1}
	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
 8007c2a:	f107 031c 	add.w	r3, r7, #28
 8007c2e:	2101      	movs	r1, #1
 8007c30:	4618      	mov	r0, r3
 8007c32:	f7ff ffa5 	bl	8007b80 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 8007c36:	4603      	mov	r3, r0
 8007c38:	461a      	mov	r2, r3
 8007c3a:	69f9      	ldr	r1, [r7, #28]
 8007c3c:	68f8      	ldr	r0, [r7, #12]
 8007c3e:	f000 fbe9 	bl	8008414 <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_ET0_T_SD_SC_>
	      *__first = _GLIBCXX_MOVE(__val);
 8007c42:	f107 0314 	add.w	r3, r7, #20
 8007c46:	4618      	mov	r0, r3
 8007c48:	f000 fbd9 	bl	80083fe <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8007c4c:	4604      	mov	r4, r0
 8007c4e:	f107 030c 	add.w	r3, r7, #12
 8007c52:	4618      	mov	r0, r3
 8007c54:	f000 fbc7 	bl	80083e6 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	4622      	mov	r2, r4
 8007c5c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007c60:	e883 0003 	stmia.w	r3, {r0, r1}
 8007c64:	e006      	b.n	8007c74 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0xc4>
	    std::__unguarded_linear_insert(__i,
 8007c66:	7938      	ldrb	r0, [r7, #4]
 8007c68:	f000 fbec 	bl	8008444 <_ZN9__gnu_cxx5__ops15__val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EENS0_14_Val_comp_iterIT_EENS0_15_Iter_comp_iterISC_EE>
 8007c6c:	4629      	mov	r1, r5
 8007c6e:	69f8      	ldr	r0, [r7, #28]
 8007c70:	f000 fbfc 	bl	800846c <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 8007c74:	f107 031c 	add.w	r3, r7, #28
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f000 fba3 	bl	80083c4 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEppEv>
 8007c7e:	e7b0      	b.n	8007be2 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0x32>
      if (__first == __last) return;
 8007c80:	bf00      	nop
    }
 8007c82:	3720      	adds	r7, #32
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bdb0      	pop	{r4, r5, r7, pc}

08007c88 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>:
    __unguarded_insertion_sort(_RandomAccessIterator __first,
 8007c88:	b590      	push	{r4, r7, lr}
 8007c8a:	b087      	sub	sp, #28
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	60f8      	str	r0, [r7, #12]
 8007c90:	60b9      	str	r1, [r7, #8]
 8007c92:	713a      	strb	r2, [r7, #4]
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	617b      	str	r3, [r7, #20]
 8007c98:	f107 0208 	add.w	r2, r7, #8
 8007c9c:	f107 0314 	add.w	r3, r7, #20
 8007ca0:	4611      	mov	r1, r2
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f7ff fc75 	bl	8007592 <_ZN9__gnu_cxxneIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d00c      	beq.n	8007cc8 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0x40>
	std::__unguarded_linear_insert(__i,
 8007cae:	7938      	ldrb	r0, [r7, #4]
 8007cb0:	f000 fbc8 	bl	8008444 <_ZN9__gnu_cxx5__ops15__val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EENS0_14_Val_comp_iterIT_EENS0_15_Iter_comp_iterISC_EE>
 8007cb4:	4621      	mov	r1, r4
 8007cb6:	6978      	ldr	r0, [r7, #20]
 8007cb8:	f000 fbd8 	bl	800846c <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_>
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 8007cbc:	f107 0314 	add.w	r3, r7, #20
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f000 fb7f 	bl	80083c4 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEppEv>
 8007cc6:	e7e7      	b.n	8007c98 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0x10>
    }
 8007cc8:	bf00      	nop
 8007cca:	371c      	adds	r7, #28
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd90      	pop	{r4, r7, pc}

08007cd0 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8007cd0:	b480      	push	{r7}
 8007cd2:	b083      	sub	sp, #12
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	681a      	ldr	r2, [r3, #0]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	429a      	cmp	r2, r3
 8007ce4:	d201      	bcs.n	8007cea <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	e000      	b.n	8007cec <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8007cea:	687b      	ldr	r3, [r7, #4]
    }
 8007cec:	4618      	mov	r0, r3
 8007cee:	370c      	adds	r7, #12
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr

08007cf8 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 8007cf8:	b590      	push	{r4, r7, lr}
 8007cfa:	b085      	sub	sp, #20
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	60f8      	str	r0, [r7, #12]
 8007d00:	60b9      	str	r1, [r7, #8]
 8007d02:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8007d04:	68b8      	ldr	r0, [r7, #8]
 8007d06:	f7ff fcdb 	bl	80076c0 <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	681c      	ldr	r4, [r3, #0]
 8007d0e:	68f8      	ldr	r0, [r7, #12]
 8007d10:	f7f9 fd3b 	bl	800178a <_ZNSt9_Any_data9_M_accessEv>
 8007d14:	4603      	mov	r3, r0
 8007d16:	4619      	mov	r1, r3
 8007d18:	2004      	movs	r0, #4
 8007d1a:	f7f9 fbda 	bl	80014d2 <_ZnwjPv>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	601c      	str	r4, [r3, #0]
 8007d22:	bf00      	nop
 8007d24:	3714      	adds	r7, #20
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd90      	pop	{r4, r7, pc}

08007d2a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8007d2a:	b580      	push	{r7, lr}
 8007d2c:	b084      	sub	sp, #16
 8007d2e:	af00      	add	r7, sp, #0
 8007d30:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 fbef 	bl	8008516 <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>
 8007d38:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8007d3a:	68f8      	ldr	r0, [r7, #12]
 8007d3c:	f000 fbf7 	bl	800852e <_ZSt11__addressofIKPFijjPfEEPT_RS4_>
 8007d40:	4603      	mov	r3, r0
 8007d42:	bf00      	nop
	}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3710      	adds	r7, #16
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}

08007d4c <_ZSt10__invoke_rIiRPFijjPfEJjjS0_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>:
    >;

  // INVOKE<R>: Invoke a callable object and convert the result to R.
  template<typename _Res, typename _Callable, typename... _Args>
    constexpr __can_invoke_as_nonvoid<_Res, _Callable, _Args...>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8007d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d50:	b086      	sub	sp, #24
 8007d52:	af02      	add	r7, sp, #8
 8007d54:	60f8      	str	r0, [r7, #12]
 8007d56:	60b9      	str	r1, [r7, #8]
 8007d58:	607a      	str	r2, [r7, #4]
 8007d5a:	603b      	str	r3, [r7, #0]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8007d5c:	68f8      	ldr	r0, [r7, #12]
 8007d5e:	f000 fbf1 	bl	8008544 <_ZSt7forwardIRPFijjPfEEOT_RNSt16remove_referenceIS4_E4typeE>
 8007d62:	4604      	mov	r4, r0
 8007d64:	68b8      	ldr	r0, [r7, #8]
 8007d66:	f7fe ffb2 	bl	8006cce <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8007d6a:	4605      	mov	r5, r0
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f7fe ffae 	bl	8006cce <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8007d72:	4606      	mov	r6, r0
 8007d74:	6838      	ldr	r0, [r7, #0]
 8007d76:	f7fe ffb5 	bl	8006ce4 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	9300      	str	r3, [sp, #0]
 8007d7e:	4633      	mov	r3, r6
 8007d80:	462a      	mov	r2, r5
 8007d82:	4621      	mov	r1, r4
 8007d84:	4640      	mov	r0, r8
 8007d86:	f000 fbe8 	bl	800855a <_ZSt13__invoke_implIiRPFijjPfEJjjS0_EET_St14__invoke_otherOT0_DpOT1_>
 8007d8a:	4603      	mov	r3, r0
					std::forward<_Args>(__args)...);
    }
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3710      	adds	r7, #16
 8007d90:	46bd      	mov	sp, r7
 8007d92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007d96 <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>:
      _M_access()
 8007d96:	b580      	push	{r7, lr}
 8007d98:	b082      	sub	sp, #8
 8007d9a:	af00      	add	r7, sp, #0
 8007d9c:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f7f9 fcf3 	bl	800178a <_ZNSt9_Any_data9_M_accessEv>
 8007da4:	4603      	mov	r3, r0
 8007da6:	4618      	mov	r0, r3
 8007da8:	3708      	adds	r7, #8
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}

08007dae <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8007dae:	b5b0      	push	{r4, r5, r7, lr}
 8007db0:	b084      	sub	sp, #16
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	60f8      	str	r0, [r7, #12]
 8007db6:	60b9      	str	r1, [r7, #8]
 8007db8:	4613      	mov	r3, r2
 8007dba:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8007dbc:	79fb      	ldrb	r3, [r7, #7]
 8007dbe:	2b03      	cmp	r3, #3
 8007dc0:	d016      	beq.n	8007df0 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x42>
 8007dc2:	2b03      	cmp	r3, #3
 8007dc4:	dc19      	bgt.n	8007dfa <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
 8007dc6:	2b01      	cmp	r3, #1
 8007dc8:	d002      	beq.n	8007dd0 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x22>
 8007dca:	2b02      	cmp	r3, #2
 8007dcc:	d00a      	beq.n	8007de4 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x36>
 8007dce:	e014      	b.n	8007dfa <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8007dd0:	68f8      	ldr	r0, [r7, #12]
 8007dd2:	f7ff ffe0 	bl	8007d96 <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>
 8007dd6:	4604      	mov	r4, r0
 8007dd8:	68b8      	ldr	r0, [r7, #8]
 8007dda:	f7ff ffa6 	bl	8007d2a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 8007dde:	4603      	mov	r3, r0
 8007de0:	6023      	str	r3, [r4, #0]
	      break;
 8007de2:	e00a      	b.n	8007dfa <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 8007de4:	462a      	mov	r2, r5
 8007de6:	68b9      	ldr	r1, [r7, #8]
 8007de8:	68f8      	ldr	r0, [r7, #12]
 8007dea:	f000 fbda 	bl	80085a2 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>
	      break;
 8007dee:	e004      	b.n	8007dfa <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 8007df0:	4621      	mov	r1, r4
 8007df2:	68f8      	ldr	r0, [r7, #12]
 8007df4:	f000 fbee 	bl	80085d4 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8007df8:	bf00      	nop
	  return false;
 8007dfa:	2300      	movs	r3, #0
	}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3710      	adds	r7, #16
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bdb0      	pop	{r4, r5, r7, pc}

08007e04 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 8007e04:	b590      	push	{r4, r7, lr}
 8007e06:	b085      	sub	sp, #20
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	60f8      	str	r0, [r7, #12]
 8007e0c:	60b9      	str	r1, [r7, #8]
 8007e0e:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8007e10:	68b8      	ldr	r0, [r7, #8]
 8007e12:	f7ff fcbd 	bl	8007790 <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>
 8007e16:	4604      	mov	r4, r0
 8007e18:	68f8      	ldr	r0, [r7, #12]
 8007e1a:	f7f9 fcb6 	bl	800178a <_ZNSt9_Any_data9_M_accessEv>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	4619      	mov	r1, r3
 8007e22:	2004      	movs	r0, #4
 8007e24:	f7f9 fb55 	bl	80014d2 <_ZnwjPv>
 8007e28:	4602      	mov	r2, r0
 8007e2a:	6823      	ldr	r3, [r4, #0]
 8007e2c:	6013      	str	r3, [r2, #0]
 8007e2e:	bf00      	nop
 8007e30:	3714      	adds	r7, #20
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd90      	pop	{r4, r7, pc}

08007e36 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8007e36:	b580      	push	{r7, lr}
 8007e38:	b084      	sub	sp, #16
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f000 fbd4 	bl	80085ec <_ZNKSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERKT_v>
 8007e44:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8007e46:	68f8      	ldr	r0, [r7, #12]
 8007e48:	f000 fbdc 	bl	8008604 <_ZSt11__addressofIKZN14SignalWithAxes10get_signalEvEUljjPfE_EPT_RS4_>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	bf00      	nop
	}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3710      	adds	r7, #16
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}

08007e58 <_ZSt10__invoke_rIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8007e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e5c:	b086      	sub	sp, #24
 8007e5e:	af02      	add	r7, sp, #8
 8007e60:	60f8      	str	r0, [r7, #12]
 8007e62:	60b9      	str	r1, [r7, #8]
 8007e64:	607a      	str	r2, [r7, #4]
 8007e66:	603b      	str	r3, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8007e68:	68f8      	ldr	r0, [r7, #12]
 8007e6a:	f000 fbd6 	bl	800861a <_ZSt7forwardIRZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS4_E4typeE>
 8007e6e:	4604      	mov	r4, r0
 8007e70:	68b8      	ldr	r0, [r7, #8]
 8007e72:	f7fe ff2c 	bl	8006cce <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8007e76:	4605      	mov	r5, r0
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f7fe ff28 	bl	8006cce <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8007e7e:	4606      	mov	r6, r0
 8007e80:	6838      	ldr	r0, [r7, #0]
 8007e82:	f7fe ff2f 	bl	8006ce4 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8007e86:	4603      	mov	r3, r0
 8007e88:	9300      	str	r3, [sp, #0]
 8007e8a:	4633      	mov	r3, r6
 8007e8c:	462a      	mov	r2, r5
 8007e8e:	4621      	mov	r1, r4
 8007e90:	4640      	mov	r0, r8
 8007e92:	f000 fbcd 	bl	8008630 <_ZSt13__invoke_implIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EET_St14__invoke_otherOT0_DpOT1_>
 8007e96:	4603      	mov	r3, r0
    }
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3710      	adds	r7, #16
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007ea2 <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>:
      _M_access()
 8007ea2:	b580      	push	{r7, lr}
 8007ea4:	b082      	sub	sp, #8
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f7f9 fc6d 	bl	800178a <_ZNSt9_Any_data9_M_accessEv>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3708      	adds	r7, #8
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}

08007eba <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8007eba:	b5b0      	push	{r4, r5, r7, lr}
 8007ebc:	b084      	sub	sp, #16
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	60f8      	str	r0, [r7, #12]
 8007ec2:	60b9      	str	r1, [r7, #8]
 8007ec4:	4613      	mov	r3, r2
 8007ec6:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8007ec8:	79fb      	ldrb	r3, [r7, #7]
 8007eca:	2b03      	cmp	r3, #3
 8007ecc:	d016      	beq.n	8007efc <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x42>
 8007ece:	2b03      	cmp	r3, #3
 8007ed0:	dc19      	bgt.n	8007f06 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
 8007ed2:	2b01      	cmp	r3, #1
 8007ed4:	d002      	beq.n	8007edc <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x22>
 8007ed6:	2b02      	cmp	r3, #2
 8007ed8:	d00a      	beq.n	8007ef0 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x36>
 8007eda:	e014      	b.n	8007f06 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8007edc:	68f8      	ldr	r0, [r7, #12]
 8007ede:	f7ff ffe0 	bl	8007ea2 <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
 8007ee2:	4604      	mov	r4, r0
 8007ee4:	68b8      	ldr	r0, [r7, #8]
 8007ee6:	f7ff ffa6 	bl	8007e36 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 8007eea:	4603      	mov	r3, r0
 8007eec:	6023      	str	r3, [r4, #0]
	      break;
 8007eee:	e00a      	b.n	8007f06 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 8007ef0:	462a      	mov	r2, r5
 8007ef2:	68b9      	ldr	r1, [r7, #8]
 8007ef4:	68f8      	ldr	r0, [r7, #12]
 8007ef6:	f000 fbbf 	bl	8008678 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>
	      break;
 8007efa:	e004      	b.n	8007f06 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 8007efc:	4621      	mov	r1, r4
 8007efe:	68f8      	ldr	r0, [r7, #12]
 8007f00:	f000 fbd3 	bl	80086aa <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8007f04:	bf00      	nop
	  return false;
 8007f06:	2300      	movs	r3, #0
	}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3710      	adds	r7, #16
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bdb0      	pop	{r4, r5, r7, pc}

08007f10 <_ZSt12__get_helperILj0EPvJPFvS0_EEERKT0_RKSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b082      	sub	sp, #8
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f000 fbd2 	bl	80086c2 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERKS3_>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	4618      	mov	r0, r3
 8007f22:	3708      	adds	r7, #8
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}

08007f28 <_ZN2ei7EiAllocImE10deallocateEPmj>:
    void deallocate(T *p, size_t n) noexcept
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b084      	sub	sp, #16
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	60f8      	str	r0, [r7, #12]
 8007f30:	60b9      	str	r1, [r7, #8]
 8007f32:	607a      	str	r2, [r7, #4]
        ei_dsp_free(p,0);
 8007f34:	68b8      	ldr	r0, [r7, #8]
 8007f36:	f012 fe81 	bl	801ac3c <_Z7ei_freePv>
    }
 8007f3a:	bf00      	nop
 8007f3c:	3710      	adds	r7, #16
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}

08007f42 <_ZN2ei7EiAllocImE8allocateEj>:
    T *allocate(size_t n)
 8007f42:	b580      	push	{r7, lr}
 8007f44:	b084      	sub	sp, #16
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	6078      	str	r0, [r7, #4]
 8007f4a:	6039      	str	r1, [r7, #0]
        auto bytes = n * sizeof(T);
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	009b      	lsls	r3, r3, #2
 8007f50:	60fb      	str	r3, [r7, #12]
        auto ptr = ei_dsp_malloc(bytes);
 8007f52:	68f8      	ldr	r0, [r7, #12]
 8007f54:	f012 fe58 	bl	801ac08 <_Z9ei_mallocj>
 8007f58:	60b8      	str	r0, [r7, #8]
        return (T *)ptr;
 8007f5a:	68bb      	ldr	r3, [r7, #8]
    }
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3710      	adds	r7, #16
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}

08007f64 <_ZNSt11_Tuple_implILj1EJPFvPvEEEC1IS2_EEOT_>:
        constexpr _Tuple_impl(_UHead&& __head)
 8007f64:	b590      	push	{r4, r7, lr}
 8007f66:	b083      	sub	sp, #12
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
 8007f6c:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head)) { }
 8007f6e:	687c      	ldr	r4, [r7, #4]
 8007f70:	6838      	ldr	r0, [r7, #0]
 8007f72:	f7ff f9c3 	bl	80072fc <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8007f76:	4603      	mov	r3, r0
 8007f78:	4619      	mov	r1, r3
 8007f7a:	4620      	mov	r0, r4
 8007f7c:	f000 fbaf 	bl	80086de <_ZNSt10_Head_baseILj1EPFvPvELb0EEC1IS2_EEOT_>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	4618      	mov	r0, r3
 8007f84:	370c      	adds	r7, #12
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd90      	pop	{r4, r7, pc}

08007f8a <_ZNSt10_Head_baseILj0EPvLb0EEC1IRS0_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8007f8a:	b580      	push	{r7, lr}
 8007f8c:	b082      	sub	sp, #8
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	6078      	str	r0, [r7, #4]
 8007f92:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8007f94:	6838      	ldr	r0, [r7, #0]
 8007f96:	f7ff fcb7 	bl	8007908 <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	681a      	ldr	r2, [r3, #0]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	601a      	str	r2, [r3, #0]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3708      	adds	r7, #8
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}

08007fac <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b082      	sub	sp, #8
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	3304      	adds	r3, #4
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f000 fba1 	bl	8008700 <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERS1_>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3708      	adds	r7, #8
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}

08007fc8 <_ZSt12__get_helperILj1EPFvPvEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b082      	sub	sp, #8
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f000 fba0 	bl	8008716 <_ZNSt11_Tuple_implILj1EJPFvPvEEE7_M_headERS3_>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3708      	adds	r7, #8
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}

08007fe0 <_ZSt8_DestroyIN2ei8spectral10processing11freq_peak_tEEvPT_>:
  /**
   * Destroy the object pointed to by a pointer type.
   */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR inline void
    _Destroy(_Tp* __pointer)
 8007fe0:	b480      	push	{r7}
 8007fe2:	b083      	sub	sp, #12
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
#if __cplusplus > 201703L
      std::destroy_at(__pointer);
#else
      __pointer->~_Tp();
#endif
    }
 8007fe8:	bf00      	nop
 8007fea:	370c      	adds	r7, #12
 8007fec:	46bd      	mov	sp, r7
 8007fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff2:	4770      	bx	lr

08007ff4 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_S_max_sizeERKS5_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b084      	sub	sp, #16
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 8007ffc:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8008000:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f000 fb94 	bl	8008730 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE8max_sizeERKS5_>
 8008008:	4603      	mov	r3, r0
 800800a:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800800c:	f107 0208 	add.w	r2, r7, #8
 8008010:	f107 030c 	add.w	r3, r7, #12
 8008014:	4611      	mov	r1, r2
 8008016:	4618      	mov	r0, r3
 8008018:	f7ff fe5a 	bl	8007cd0 <_ZSt3minIjERKT_S2_S2_>
 800801c:	4603      	mov	r3, r0
 800801e:	681b      	ldr	r3, [r3, #0]
      }
 8008020:	4618      	mov	r0, r3
 8008022:	3710      	adds	r7, #16
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}

08008028 <_ZNKSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8008028:	b480      	push	{r7}
 800802a:	b083      	sub	sp, #12
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	4618      	mov	r0, r3
 8008034:	370c      	adds	r7, #12
 8008036:	46bd      	mov	sp, r7
 8008038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803c:	4770      	bx	lr

0800803e <_ZN2ei7EiAllocINS_8spectral10processing11freq_peak_tEE8allocateEj>:
    T *allocate(size_t n)
 800803e:	b580      	push	{r7, lr}
 8008040:	b084      	sub	sp, #16
 8008042:	af00      	add	r7, sp, #0
 8008044:	6078      	str	r0, [r7, #4]
 8008046:	6039      	str	r1, [r7, #0]
        auto bytes = n * sizeof(T);
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	00db      	lsls	r3, r3, #3
 800804c:	60fb      	str	r3, [r7, #12]
        auto ptr = ei_dsp_malloc(bytes);
 800804e:	68f8      	ldr	r0, [r7, #12]
 8008050:	f012 fdda 	bl	801ac08 <_Z9ei_mallocj>
 8008054:	60b8      	str	r0, [r7, #8]
        return (T *)ptr;
 8008056:	68bb      	ldr	r3, [r7, #8]
    }
 8008058:	4618      	mov	r0, r3
 800805a:	3710      	adds	r7, #16
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}

08008060 <_ZSt12__relocate_aIPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8008060:	b5b0      	push	{r4, r5, r7, lr}
 8008062:	b084      	sub	sp, #16
 8008064:	af00      	add	r7, sp, #0
 8008066:	60f8      	str	r0, [r7, #12]
 8008068:	60b9      	str	r1, [r7, #8]
 800806a:	607a      	str	r2, [r7, #4]
 800806c:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 800806e:	68f8      	ldr	r0, [r7, #12]
 8008070:	f000 fb6b 	bl	800874a <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tEET_S5_>
 8008074:	4604      	mov	r4, r0
 8008076:	68b8      	ldr	r0, [r7, #8]
 8008078:	f000 fb67 	bl	800874a <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tEET_S5_>
 800807c:	4605      	mov	r5, r0
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 fb63 	bl	800874a <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tEET_S5_>
 8008084:	4602      	mov	r2, r0
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	4629      	mov	r1, r5
 800808a:	4620      	mov	r0, r4
 800808c:	f000 fb68 	bl	8008760 <_ZSt14__relocate_a_1IPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_>
 8008090:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 8008092:	4618      	mov	r0, r3
 8008094:	3710      	adds	r7, #16
 8008096:	46bd      	mov	sp, r7
 8008098:	bdb0      	pop	{r4, r5, r7, pc}

0800809a <_ZNSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEEC1ES4_>:
      move_iterator(iterator_type __i)
 800809a:	b580      	push	{r7, lr}
 800809c:	b082      	sub	sp, #8
 800809e:	af00      	add	r7, sp, #0
 80080a0:	6078      	str	r0, [r7, #4]
 80080a2:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 80080a4:	463b      	mov	r3, r7
 80080a6:	4618      	mov	r0, r3
 80080a8:	f000 fb80 	bl	80087ac <_ZSt4moveIRPN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS7_>
 80080ac:	4603      	mov	r3, r0
 80080ae:	681a      	ldr	r2, [r3, #0]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	601a      	str	r2, [r3, #0]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	4618      	mov	r0, r3
 80080b8:	3708      	adds	r7, #8
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}

080080be <_ZStneIPN2ei8spectral10processing11freq_peak_tEEbRKSt13move_iteratorIT_ES9_>:
    operator!=(const move_iterator<_Iterator>& __x,
 80080be:	b580      	push	{r7, lr}
 80080c0:	b082      	sub	sp, #8
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	6078      	str	r0, [r7, #4]
 80080c6:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 80080c8:	6839      	ldr	r1, [r7, #0]
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f000 fb79 	bl	80087c2 <_ZSteqIPN2ei8spectral10processing11freq_peak_tEEbRKSt13move_iteratorIT_ES9_>
 80080d0:	4603      	mov	r3, r0
 80080d2:	f083 0301 	eor.w	r3, r3, #1
 80080d6:	b2db      	uxtb	r3, r3
 80080d8:	4618      	mov	r0, r3
 80080da:	3708      	adds	r7, #8
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}

080080e0 <_ZNSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEEppEv>:
      operator++()
 80080e0:	b480      	push	{r7}
 80080e2:	b083      	sub	sp, #12
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
	++_M_current;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f103 0208 	add.w	r2, r3, #8
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	601a      	str	r2, [r3, #0]
	return *this;
 80080f4:	687b      	ldr	r3, [r7, #4]
      }
 80080f6:	4618      	mov	r0, r3
 80080f8:	370c      	adds	r7, #12
 80080fa:	46bd      	mov	sp, r7
 80080fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008100:	4770      	bx	lr

08008102 <_ZNKSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEEdeEv>:
      operator*() const
 8008102:	b480      	push	{r7}
 8008104:	b083      	sub	sp, #12
 8008106:	af00      	add	r7, sp, #0
 8008108:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4618      	mov	r0, r3
 8008110:	370c      	adds	r7, #12
 8008112:	46bd      	mov	sp, r7
 8008114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008118:	4770      	bx	lr

0800811a <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE9constructIS4_JS4_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS5_PT_DpOS8_>:
	construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 800811a:	b580      	push	{r7, lr}
 800811c:	b084      	sub	sp, #16
 800811e:	af00      	add	r7, sp, #0
 8008120:	60f8      	str	r0, [r7, #12]
 8008122:	60b9      	str	r1, [r7, #8]
 8008124:	607a      	str	r2, [r7, #4]
	{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f000 fb61 	bl	80087ee <_ZSt7forwardIN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS4_E4typeE>
 800812c:	4603      	mov	r3, r0
 800812e:	461a      	mov	r2, r3
 8008130:	68b9      	ldr	r1, [r7, #8]
 8008132:	68f8      	ldr	r0, [r7, #12]
 8008134:	f000 fb66 	bl	8008804 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE12_S_constructIS4_JS4_EEENSt9enable_ifIXsrSt6__and_IJS9_IJSt6__not_INS6_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleISC_JSE_EEEEEE5valueEvE4typeERS5_PSC_DpOSD_>
 8008138:	bf00      	nop
 800813a:	3710      	adds	r7, #16
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}

08008140 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_T0_>:
    __heap_select(_RandomAccessIterator __first,
 8008140:	b580      	push	{r7, lr}
 8008142:	b086      	sub	sp, #24
 8008144:	af00      	add	r7, sp, #0
 8008146:	60f8      	str	r0, [r7, #12]
 8008148:	60b9      	str	r1, [r7, #8]
 800814a:	607a      	str	r2, [r7, #4]
 800814c:	703b      	strb	r3, [r7, #0]
      std::__make_heap(__first, __middle, __comp);
 800814e:	463b      	mov	r3, r7
 8008150:	461a      	mov	r2, r3
 8008152:	68b9      	ldr	r1, [r7, #8]
 8008154:	68f8      	ldr	r0, [r7, #12]
 8008156:	f000 fb6e 	bl	8008836 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	617b      	str	r3, [r7, #20]
 800815e:	1d3a      	adds	r2, r7, #4
 8008160:	f107 0314 	add.w	r3, r7, #20
 8008164:	4611      	mov	r1, r2
 8008166:	4618      	mov	r0, r3
 8008168:	f000 fbc4 	bl	80088f4 <_ZN9__gnu_cxxltIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>
 800816c:	4603      	mov	r3, r0
 800816e:	2b00      	cmp	r3, #0
 8008170:	d014      	beq.n	800819c <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_T0_+0x5c>
	if (__comp(__i, __first))
 8008172:	463b      	mov	r3, r7
 8008174:	68fa      	ldr	r2, [r7, #12]
 8008176:	6979      	ldr	r1, [r7, #20]
 8008178:	4618      	mov	r0, r3
 800817a:	f000 f852 	bl	8008222 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 800817e:	4603      	mov	r3, r0
 8008180:	2b00      	cmp	r3, #0
 8008182:	d005      	beq.n	8008190 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_T0_+0x50>
	  std::__pop_heap(__first, __middle, __i, __comp);
 8008184:	463b      	mov	r3, r7
 8008186:	697a      	ldr	r2, [r7, #20]
 8008188:	68b9      	ldr	r1, [r7, #8]
 800818a:	68f8      	ldr	r0, [r7, #12]
 800818c:	f000 fbca 	bl	8008924 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 8008190:	f107 0314 	add.w	r3, r7, #20
 8008194:	4618      	mov	r0, r3
 8008196:	f000 f915 	bl	80083c4 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEppEv>
 800819a:	e7e0      	b.n	800815e <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_T0_+0x1e>
    }
 800819c:	bf00      	nop
 800819e:	3718      	adds	r7, #24
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}

080081a4 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_>:
    }

  template<typename _RandomAccessIterator, typename _Compare>
    _GLIBCXX20_CONSTEXPR
    void
    __sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b084      	sub	sp, #16
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	60f8      	str	r0, [r7, #12]
 80081ac:	60b9      	str	r1, [r7, #8]
 80081ae:	607a      	str	r2, [r7, #4]
		_Compare& __comp)
    {
      while (__last - __first > 1)
 80081b0:	f107 020c 	add.w	r2, r7, #12
 80081b4:	f107 0308 	add.w	r3, r7, #8
 80081b8:	4611      	mov	r1, r2
 80081ba:	4618      	mov	r0, r3
 80081bc:	f7ff f96f 	bl	800749e <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 80081c0:	4603      	mov	r3, r0
 80081c2:	2b01      	cmp	r3, #1
 80081c4:	bfcc      	ite	gt
 80081c6:	2301      	movgt	r3, #1
 80081c8:	2300      	movle	r3, #0
 80081ca:	b2db      	uxtb	r3, r3
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d00b      	beq.n	80081e8 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_+0x44>
	{
	  --__last;
 80081d0:	f107 0308 	add.w	r3, r7, #8
 80081d4:	4618      	mov	r0, r3
 80081d6:	f000 fbf1 	bl	80089bc <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmmEv>
	  std::__pop_heap(__first, __last, __last, __comp);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	68ba      	ldr	r2, [r7, #8]
 80081de:	68b9      	ldr	r1, [r7, #8]
 80081e0:	68f8      	ldr	r0, [r7, #12]
 80081e2:	f000 fb9f 	bl	8008924 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_RT0_>
      while (__last - __first > 1)
 80081e6:	e7e3      	b.n	80081b0 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_+0xc>
	}
    }
 80081e8:	bf00      	nop
 80081ea:	3710      	adds	r7, #16
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}

080081f0 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b084      	sub	sp, #16
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
 80081f8:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681a      	ldr	r2, [r3, #0]
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	00db      	lsls	r3, r3, #3
 8008202:	425b      	negs	r3, r3
 8008204:	4413      	add	r3, r2
 8008206:	60fb      	str	r3, [r7, #12]
 8008208:	f107 020c 	add.w	r2, r7, #12
 800820c:	f107 0308 	add.w	r3, r7, #8
 8008210:	4611      	mov	r1, r2
 8008212:	4618      	mov	r0, r3
 8008214:	f7fe fea2 	bl	8006f5c <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEC1ERKS5_>
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	4618      	mov	r0, r3
 800821c:	3710      	adds	r7, #16
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}

08008222 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>:
        operator()(_Iterator1 __it1, _Iterator2 __it2)
 8008222:	b5b0      	push	{r4, r5, r7, lr}
 8008224:	b084      	sub	sp, #16
 8008226:	af00      	add	r7, sp, #0
 8008228:	60f8      	str	r0, [r7, #12]
 800822a:	60b9      	str	r1, [r7, #8]
 800822c:	607a      	str	r2, [r7, #4]
        { return bool(_M_comp(*__it1, *__it2)); }
 800822e:	68fc      	ldr	r4, [r7, #12]
 8008230:	f107 0308 	add.w	r3, r7, #8
 8008234:	4618      	mov	r0, r3
 8008236:	f000 f8d6 	bl	80083e6 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800823a:	4605      	mov	r5, r0
 800823c:	1d3b      	adds	r3, r7, #4
 800823e:	4618      	mov	r0, r3
 8008240:	f000 f8d1 	bl	80083e6 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8008244:	4603      	mov	r3, r0
 8008246:	461a      	mov	r2, r3
 8008248:	4629      	mov	r1, r5
 800824a:	4620      	mov	r0, r4
 800824c:	f7fb f862 	bl	8003314 <_ZZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fftENKUlRKNS1_11freq_peak_tES6_E_clES6_S6_>
 8008250:	4603      	mov	r3, r0
 8008252:	4618      	mov	r0, r3
 8008254:	3710      	adds	r7, #16
 8008256:	46bd      	mov	sp, r7
 8008258:	bdb0      	pop	{r4, r5, r7, pc}

0800825a <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_>:
    __move_median_to_first(_Iterator __result,_Iterator __a, _Iterator __b,
 800825a:	b580      	push	{r7, lr}
 800825c:	b084      	sub	sp, #16
 800825e:	af00      	add	r7, sp, #0
 8008260:	60f8      	str	r0, [r7, #12]
 8008262:	60b9      	str	r1, [r7, #8]
 8008264:	607a      	str	r2, [r7, #4]
 8008266:	603b      	str	r3, [r7, #0]
      if (__comp(__a, __b))
 8008268:	687a      	ldr	r2, [r7, #4]
 800826a:	68b9      	ldr	r1, [r7, #8]
 800826c:	f107 0018 	add.w	r0, r7, #24
 8008270:	f7ff ffd7 	bl	8008222 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 8008274:	4603      	mov	r3, r0
 8008276:	2b00      	cmp	r3, #0
 8008278:	d020      	beq.n	80082bc <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0x62>
	  if (__comp(__b, __c))
 800827a:	683a      	ldr	r2, [r7, #0]
 800827c:	6879      	ldr	r1, [r7, #4]
 800827e:	f107 0018 	add.w	r0, r7, #24
 8008282:	f7ff ffce 	bl	8008222 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 8008286:	4603      	mov	r3, r0
 8008288:	2b00      	cmp	r3, #0
 800828a:	d004      	beq.n	8008296 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0x3c>
	    std::iter_swap(__result, __b);
 800828c:	6879      	ldr	r1, [r7, #4]
 800828e:	68f8      	ldr	r0, [r7, #12]
 8008290:	f000 fba5 	bl	80089de <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>
    }
 8008294:	e032      	b.n	80082fc <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0xa2>
	  else if (__comp(__a, __c))
 8008296:	683a      	ldr	r2, [r7, #0]
 8008298:	68b9      	ldr	r1, [r7, #8]
 800829a:	f107 0018 	add.w	r0, r7, #24
 800829e:	f7ff ffc0 	bl	8008222 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 80082a2:	4603      	mov	r3, r0
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d004      	beq.n	80082b2 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0x58>
	    std::iter_swap(__result, __c);
 80082a8:	6839      	ldr	r1, [r7, #0]
 80082aa:	68f8      	ldr	r0, [r7, #12]
 80082ac:	f000 fb97 	bl	80089de <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>
    }
 80082b0:	e024      	b.n	80082fc <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0xa2>
	    std::iter_swap(__result, __a);
 80082b2:	68b9      	ldr	r1, [r7, #8]
 80082b4:	68f8      	ldr	r0, [r7, #12]
 80082b6:	f000 fb92 	bl	80089de <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>
    }
 80082ba:	e01f      	b.n	80082fc <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0xa2>
      else if (__comp(__a, __c))
 80082bc:	683a      	ldr	r2, [r7, #0]
 80082be:	68b9      	ldr	r1, [r7, #8]
 80082c0:	f107 0018 	add.w	r0, r7, #24
 80082c4:	f7ff ffad 	bl	8008222 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 80082c8:	4603      	mov	r3, r0
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d004      	beq.n	80082d8 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0x7e>
	std::iter_swap(__result, __a);
 80082ce:	68b9      	ldr	r1, [r7, #8]
 80082d0:	68f8      	ldr	r0, [r7, #12]
 80082d2:	f000 fb84 	bl	80089de <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>
    }
 80082d6:	e011      	b.n	80082fc <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0xa2>
      else if (__comp(__b, __c))
 80082d8:	683a      	ldr	r2, [r7, #0]
 80082da:	6879      	ldr	r1, [r7, #4]
 80082dc:	f107 0018 	add.w	r0, r7, #24
 80082e0:	f7ff ff9f 	bl	8008222 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 80082e4:	4603      	mov	r3, r0
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d004      	beq.n	80082f4 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0x9a>
	std::iter_swap(__result, __c);
 80082ea:	6839      	ldr	r1, [r7, #0]
 80082ec:	68f8      	ldr	r0, [r7, #12]
 80082ee:	f000 fb76 	bl	80089de <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>
    }
 80082f2:	e003      	b.n	80082fc <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0xa2>
	std::iter_swap(__result, __b);
 80082f4:	6879      	ldr	r1, [r7, #4]
 80082f6:	68f8      	ldr	r0, [r7, #12]
 80082f8:	f000 fb71 	bl	80089de <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>
    }
 80082fc:	bf00      	nop
 80082fe:	3710      	adds	r7, #16
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}

08008304 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_>:
    __unguarded_partition(_RandomAccessIterator __first,
 8008304:	b580      	push	{r7, lr}
 8008306:	b084      	sub	sp, #16
 8008308:	af00      	add	r7, sp, #0
 800830a:	60f8      	str	r0, [r7, #12]
 800830c:	60b9      	str	r1, [r7, #8]
 800830e:	607a      	str	r2, [r7, #4]
 8008310:	703b      	strb	r3, [r7, #0]
	  while (__comp(__first, __pivot))
 8008312:	463b      	mov	r3, r7
 8008314:	687a      	ldr	r2, [r7, #4]
 8008316:	68f9      	ldr	r1, [r7, #12]
 8008318:	4618      	mov	r0, r3
 800831a:	f7ff ff82 	bl	8008222 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 800831e:	4603      	mov	r3, r0
 8008320:	2b00      	cmp	r3, #0
 8008322:	d005      	beq.n	8008330 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_+0x2c>
	    ++__first;
 8008324:	f107 030c 	add.w	r3, r7, #12
 8008328:	4618      	mov	r0, r3
 800832a:	f000 f84b 	bl	80083c4 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEppEv>
	  while (__comp(__first, __pivot))
 800832e:	e7f0      	b.n	8008312 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_+0xe>
	  --__last;
 8008330:	f107 0308 	add.w	r3, r7, #8
 8008334:	4618      	mov	r0, r3
 8008336:	f000 fb41 	bl	80089bc <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmmEv>
	  while (__comp(__pivot, __last))
 800833a:	463b      	mov	r3, r7
 800833c:	68ba      	ldr	r2, [r7, #8]
 800833e:	6879      	ldr	r1, [r7, #4]
 8008340:	4618      	mov	r0, r3
 8008342:	f7ff ff6e 	bl	8008222 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 8008346:	4603      	mov	r3, r0
 8008348:	2b00      	cmp	r3, #0
 800834a:	d005      	beq.n	8008358 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_+0x54>
	    --__last;
 800834c:	f107 0308 	add.w	r3, r7, #8
 8008350:	4618      	mov	r0, r3
 8008352:	f000 fb33 	bl	80089bc <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmmEv>
	  while (__comp(__pivot, __last))
 8008356:	e7f0      	b.n	800833a <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_+0x36>
	  if (!(__first < __last))
 8008358:	f107 0208 	add.w	r2, r7, #8
 800835c:	f107 030c 	add.w	r3, r7, #12
 8008360:	4611      	mov	r1, r2
 8008362:	4618      	mov	r0, r3
 8008364:	f000 fac6 	bl	80088f4 <_ZN9__gnu_cxxltIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>
 8008368:	4603      	mov	r3, r0
 800836a:	f083 0301 	eor.w	r3, r3, #1
 800836e:	b2db      	uxtb	r3, r3
 8008370:	2b00      	cmp	r3, #0
 8008372:	d001      	beq.n	8008378 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_+0x74>
	    return __first;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	e009      	b.n	800838c <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_+0x88>
	  std::iter_swap(__first, __last);
 8008378:	68b9      	ldr	r1, [r7, #8]
 800837a:	68f8      	ldr	r0, [r7, #12]
 800837c:	f000 fb2f 	bl	80089de <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>
	  ++__first;
 8008380:	f107 030c 	add.w	r3, r7, #12
 8008384:	4618      	mov	r0, r3
 8008386:	f000 f81d 	bl	80083c4 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEppEv>
	  while (__comp(__first, __pivot))
 800838a:	e7c2      	b.n	8008312 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_+0xe>
    }
 800838c:	4618      	mov	r0, r3
 800838e:	3710      	adds	r7, #16
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}

08008394 <_ZN9__gnu_cxxeqIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 8008394:	b590      	push	{r4, r7, lr}
 8008396:	b083      	sub	sp, #12
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f7ff f8ba 	bl	8007518 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 80083a4:	4603      	mov	r3, r0
 80083a6:	681c      	ldr	r4, [r3, #0]
 80083a8:	6838      	ldr	r0, [r7, #0]
 80083aa:	f7ff f8b5 	bl	8007518 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 80083ae:	4603      	mov	r3, r0
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	429c      	cmp	r4, r3
 80083b4:	bf0c      	ite	eq
 80083b6:	2301      	moveq	r3, #1
 80083b8:	2300      	movne	r3, #0
 80083ba:	b2db      	uxtb	r3, r3
 80083bc:	4618      	mov	r0, r3
 80083be:	370c      	adds	r7, #12
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd90      	pop	{r4, r7, pc}

080083c4 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 80083c4:	b480      	push	{r7}
 80083c6:	b083      	sub	sp, #12
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
	++_M_current;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f103 0208 	add.w	r2, r3, #8
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	601a      	str	r2, [r3, #0]
	return *this;
 80083d8:	687b      	ldr	r3, [r7, #4]
      }
 80083da:	4618      	mov	r0, r3
 80083dc:	370c      	adds	r7, #12
 80083de:	46bd      	mov	sp, r7
 80083e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e4:	4770      	bx	lr

080083e6 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80083e6:	b480      	push	{r7}
 80083e8:	b083      	sub	sp, #12
 80083ea:	af00      	add	r7, sp, #0
 80083ec:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	4618      	mov	r0, r3
 80083f4:	370c      	adds	r7, #12
 80083f6:	46bd      	mov	sp, r7
 80083f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fc:	4770      	bx	lr

080083fe <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 80083fe:	b480      	push	{r7}
 8008400:	b083      	sub	sp, #12
 8008402:	af00      	add	r7, sp, #0
 8008404:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	4618      	mov	r0, r3
 800840a:	370c      	adds	r7, #12
 800840c:	46bd      	mov	sp, r7
 800840e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008412:	4770      	bx	lr

08008414 <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_ET0_T_SD_SC_>:
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8008414:	b590      	push	{r4, r7, lr}
 8008416:	b085      	sub	sp, #20
 8008418:	af00      	add	r7, sp, #0
 800841a:	60f8      	str	r0, [r7, #12]
 800841c:	60b9      	str	r1, [r7, #8]
 800841e:	607a      	str	r2, [r7, #4]
      return std::__copy_move_backward_a<true>(std::__miter_base(__first),
 8008420:	68f8      	ldr	r0, [r7, #12]
 8008422:	f000 faf3 	bl	8008a0c <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEET_SC_>
 8008426:	4604      	mov	r4, r0
 8008428:	68b8      	ldr	r0, [r7, #8]
 800842a:	f000 faef 	bl	8008a0c <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEET_SC_>
 800842e:	4603      	mov	r3, r0
 8008430:	687a      	ldr	r2, [r7, #4]
 8008432:	4619      	mov	r1, r3
 8008434:	4620      	mov	r0, r4
 8008436:	f000 faf4 	bl	8008a22 <_ZSt22__copy_move_backward_aILb1EN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_ET1_T0_SD_SC_>
 800843a:	4603      	mov	r3, r0
    }
 800843c:	4618      	mov	r0, r3
 800843e:	3714      	adds	r7, #20
 8008440:	46bd      	mov	sp, r7
 8008442:	bd90      	pop	{r4, r7, pc}

08008444 <_ZN9__gnu_cxx5__ops15__val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EENS0_14_Val_comp_iterIT_EENS0_15_Iter_comp_iterISC_EE>:
    { return _Val_comp_iter<_Compare>(_GLIBCXX_MOVE(__comp)); }

  template<typename _Compare>
    _GLIBCXX20_CONSTEXPR
    inline _Val_comp_iter<_Compare>
    __val_comp_iter(_Iter_comp_iter<_Compare> __comp)
 8008444:	b590      	push	{r4, r7, lr}
 8008446:	b085      	sub	sp, #20
 8008448:	af00      	add	r7, sp, #0
 800844a:	7138      	strb	r0, [r7, #4]
    { return _Val_comp_iter<_Compare>(_GLIBCXX_MOVE(__comp)); }
 800844c:	1d3b      	adds	r3, r7, #4
 800844e:	4618      	mov	r0, r3
 8008450:	f000 fb08 	bl	8008a64 <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS3_9ei_matrixES7_fftEUlRKNS5_11freq_peak_tESA_E_EEEONSt16remove_referenceIT_E4typeEOSF_>
 8008454:	4602      	mov	r2, r0
 8008456:	f107 030c 	add.w	r3, r7, #12
 800845a:	4611      	mov	r1, r2
 800845c:	4618      	mov	r0, r3
 800845e:	f000 fb0c 	bl	8008a7a <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1EONS0_15_Iter_comp_iterISA_EE>
 8008462:	bf00      	nop
 8008464:	4620      	mov	r0, r4
 8008466:	3714      	adds	r7, #20
 8008468:	46bd      	mov	sp, r7
 800846a:	bd90      	pop	{r4, r7, pc}

0800846c <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_>:
    __unguarded_linear_insert(_RandomAccessIterator __last,
 800846c:	b590      	push	{r4, r7, lr}
 800846e:	b087      	sub	sp, #28
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	7039      	strb	r1, [r7, #0]
	__val = _GLIBCXX_MOVE(*__last);
 8008476:	1d3b      	adds	r3, r7, #4
 8008478:	4618      	mov	r0, r3
 800847a:	f7ff ffb4 	bl	80083e6 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800847e:	4603      	mov	r3, r0
 8008480:	4618      	mov	r0, r3
 8008482:	f7ff ffbc 	bl	80083fe <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8008486:	4602      	mov	r2, r0
 8008488:	f107 0310 	add.w	r3, r7, #16
 800848c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008490:	e883 0003 	stmia.w	r3, {r0, r1}
      _RandomAccessIterator __next = __last;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	60fb      	str	r3, [r7, #12]
      --__next;
 8008498:	f107 030c 	add.w	r3, r7, #12
 800849c:	4618      	mov	r0, r3
 800849e:	f000 fa8d 	bl	80089bc <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmmEv>
      while (__comp(__val, __next))
 80084a2:	f107 0110 	add.w	r1, r7, #16
 80084a6:	463b      	mov	r3, r7
 80084a8:	68fa      	ldr	r2, [r7, #12]
 80084aa:	4618      	mov	r0, r3
 80084ac:	f000 faf3 	bl	8008a96 <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclIS7_NS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEEEEbRT_T0_>
 80084b0:	4603      	mov	r3, r0
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d01b      	beq.n	80084ee <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_+0x82>
	  *__last = _GLIBCXX_MOVE(*__next);
 80084b6:	f107 030c 	add.w	r3, r7, #12
 80084ba:	4618      	mov	r0, r3
 80084bc:	f7ff ff93 	bl	80083e6 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 80084c0:	4603      	mov	r3, r0
 80084c2:	4618      	mov	r0, r3
 80084c4:	f7ff ff9b 	bl	80083fe <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 80084c8:	4604      	mov	r4, r0
 80084ca:	1d3b      	adds	r3, r7, #4
 80084cc:	4618      	mov	r0, r3
 80084ce:	f7ff ff8a 	bl	80083e6 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 80084d2:	4603      	mov	r3, r0
 80084d4:	4622      	mov	r2, r4
 80084d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80084da:	e883 0003 	stmia.w	r3, {r0, r1}
	  __last = __next;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	607b      	str	r3, [r7, #4]
	  --__next;
 80084e2:	f107 030c 	add.w	r3, r7, #12
 80084e6:	4618      	mov	r0, r3
 80084e8:	f000 fa68 	bl	80089bc <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmmEv>
      while (__comp(__val, __next))
 80084ec:	e7d9      	b.n	80084a2 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_+0x36>
      *__last = _GLIBCXX_MOVE(__val);
 80084ee:	f107 0310 	add.w	r3, r7, #16
 80084f2:	4618      	mov	r0, r3
 80084f4:	f7ff ff83 	bl	80083fe <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 80084f8:	4604      	mov	r4, r0
 80084fa:	1d3b      	adds	r3, r7, #4
 80084fc:	4618      	mov	r0, r3
 80084fe:	f7ff ff72 	bl	80083e6 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8008502:	4603      	mov	r3, r0
 8008504:	4622      	mov	r2, r4
 8008506:	e892 0003 	ldmia.w	r2, {r0, r1}
 800850a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800850e:	bf00      	nop
 8008510:	371c      	adds	r7, #28
 8008512:	46bd      	mov	sp, r7
 8008514:	bd90      	pop	{r4, r7, pc}

08008516 <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>:
      _M_access() const
 8008516:	b580      	push	{r7, lr}
 8008518:	b082      	sub	sp, #8
 800851a:	af00      	add	r7, sp, #0
 800851c:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f7f9 f93e 	bl	80017a0 <_ZNKSt9_Any_data9_M_accessEv>
 8008524:	4603      	mov	r3, r0
 8008526:	4618      	mov	r0, r3
 8008528:	3708      	adds	r7, #8
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}

0800852e <_ZSt11__addressofIKPFijjPfEEPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800852e:	b480      	push	{r7}
 8008530:	b083      	sub	sp, #12
 8008532:	af00      	add	r7, sp, #0
 8008534:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	4618      	mov	r0, r3
 800853a:	370c      	adds	r7, #12
 800853c:	46bd      	mov	sp, r7
 800853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008542:	4770      	bx	lr

08008544 <_ZSt7forwardIRPFijjPfEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008544:	b480      	push	{r7}
 8008546:	b083      	sub	sp, #12
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	4618      	mov	r0, r3
 8008550:	370c      	adds	r7, #12
 8008552:	46bd      	mov	sp, r7
 8008554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008558:	4770      	bx	lr

0800855a <_ZSt13__invoke_implIiRPFijjPfEJjjS0_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800855a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800855c:	b085      	sub	sp, #20
 800855e:	af00      	add	r7, sp, #0
 8008560:	7338      	strb	r0, [r7, #12]
 8008562:	60b9      	str	r1, [r7, #8]
 8008564:	607a      	str	r2, [r7, #4]
 8008566:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8008568:	68b8      	ldr	r0, [r7, #8]
 800856a:	f7ff ffeb 	bl	8008544 <_ZSt7forwardIRPFijjPfEEOT_RNSt16remove_referenceIS4_E4typeE>
 800856e:	4603      	mov	r3, r0
 8008570:	681c      	ldr	r4, [r3, #0]
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f7fe fbab 	bl	8006cce <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8008578:	4603      	mov	r3, r0
 800857a:	681d      	ldr	r5, [r3, #0]
 800857c:	6838      	ldr	r0, [r7, #0]
 800857e:	f7fe fba6 	bl	8006cce <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8008582:	4603      	mov	r3, r0
 8008584:	681e      	ldr	r6, [r3, #0]
 8008586:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008588:	f7fe fbac 	bl	8006ce4 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 800858c:	4603      	mov	r3, r0
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	461a      	mov	r2, r3
 8008592:	4631      	mov	r1, r6
 8008594:	4628      	mov	r0, r5
 8008596:	47a0      	blx	r4
 8008598:	4603      	mov	r3, r0
 800859a:	4618      	mov	r0, r3
 800859c:	3714      	adds	r7, #20
 800859e:	46bd      	mov	sp, r7
 80085a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080085a2 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 80085a2:	b590      	push	{r4, r7, lr}
 80085a4:	b085      	sub	sp, #20
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	60f8      	str	r0, [r7, #12]
 80085aa:	60b9      	str	r1, [r7, #8]
 80085ac:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 80085ae:	68b8      	ldr	r0, [r7, #8]
 80085b0:	f7ff ffb1 	bl	8008516 <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>
 80085b4:	4603      	mov	r3, r0
 80085b6:	681c      	ldr	r4, [r3, #0]
 80085b8:	68f8      	ldr	r0, [r7, #12]
 80085ba:	f7f9 f8e6 	bl	800178a <_ZNSt9_Any_data9_M_accessEv>
 80085be:	4603      	mov	r3, r0
 80085c0:	4619      	mov	r1, r3
 80085c2:	2004      	movs	r0, #4
 80085c4:	f7f8 ff85 	bl	80014d2 <_ZnwjPv>
 80085c8:	4603      	mov	r3, r0
 80085ca:	601c      	str	r4, [r3, #0]
	}
 80085cc:	bf00      	nop
 80085ce:	3714      	adds	r7, #20
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd90      	pop	{r4, r7, pc}

080085d4 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b082      	sub	sp, #8
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f000 fa6f 	bl	8008ac2 <_ZNSt9_Any_data9_M_accessIPFijjPfEEERT_v>
	}
 80085e4:	bf00      	nop
 80085e6:	3708      	adds	r7, #8
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}

080085ec <_ZNKSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERKT_v>:
      _M_access() const
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b082      	sub	sp, #8
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f7f9 f8d3 	bl	80017a0 <_ZNKSt9_Any_data9_M_accessEv>
 80085fa:	4603      	mov	r3, r0
 80085fc:	4618      	mov	r0, r3
 80085fe:	3708      	adds	r7, #8
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}

08008604 <_ZSt11__addressofIKZN14SignalWithAxes10get_signalEvEUljjPfE_EPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8008604:	b480      	push	{r7}
 8008606:	b083      	sub	sp, #12
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	4618      	mov	r0, r3
 8008610:	370c      	adds	r7, #12
 8008612:	46bd      	mov	sp, r7
 8008614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008618:	4770      	bx	lr

0800861a <_ZSt7forwardIRZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800861a:	b480      	push	{r7}
 800861c:	b083      	sub	sp, #12
 800861e:	af00      	add	r7, sp, #0
 8008620:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	4618      	mov	r0, r3
 8008626:	370c      	adds	r7, #12
 8008628:	46bd      	mov	sp, r7
 800862a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862e:	4770      	bx	lr

08008630 <_ZSt13__invoke_implIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8008630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008632:	b085      	sub	sp, #20
 8008634:	af00      	add	r7, sp, #0
 8008636:	7338      	strb	r0, [r7, #12]
 8008638:	60b9      	str	r1, [r7, #8]
 800863a:	607a      	str	r2, [r7, #4]
 800863c:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800863e:	68b8      	ldr	r0, [r7, #8]
 8008640:	f7ff ffeb 	bl	800861a <_ZSt7forwardIRZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS4_E4typeE>
 8008644:	4606      	mov	r6, r0
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f7fe fb41 	bl	8006cce <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800864c:	4603      	mov	r3, r0
 800864e:	681c      	ldr	r4, [r3, #0]
 8008650:	6838      	ldr	r0, [r7, #0]
 8008652:	f7fe fb3c 	bl	8006cce <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8008656:	4603      	mov	r3, r0
 8008658:	681d      	ldr	r5, [r3, #0]
 800865a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800865c:	f7fe fb42 	bl	8006ce4 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8008660:	4603      	mov	r3, r0
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	462a      	mov	r2, r5
 8008666:	4621      	mov	r1, r4
 8008668:	4630      	mov	r0, r6
 800866a:	f7fc fc44 	bl	8004ef6 <_ZZN14SignalWithAxes10get_signalEvENKUljjPfE_clEjjS0_>
 800866e:	4603      	mov	r3, r0
 8008670:	4618      	mov	r0, r3
 8008672:	3714      	adds	r7, #20
 8008674:	46bd      	mov	sp, r7
 8008676:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008678 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 8008678:	b590      	push	{r4, r7, lr}
 800867a:	b085      	sub	sp, #20
 800867c:	af00      	add	r7, sp, #0
 800867e:	60f8      	str	r0, [r7, #12]
 8008680:	60b9      	str	r1, [r7, #8]
 8008682:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8008684:	68b8      	ldr	r0, [r7, #8]
 8008686:	f7ff ffb1 	bl	80085ec <_ZNKSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERKT_v>
 800868a:	4604      	mov	r4, r0
 800868c:	68f8      	ldr	r0, [r7, #12]
 800868e:	f7f9 f87c 	bl	800178a <_ZNSt9_Any_data9_M_accessEv>
 8008692:	4603      	mov	r3, r0
 8008694:	4619      	mov	r1, r3
 8008696:	2004      	movs	r0, #4
 8008698:	f7f8 ff1b 	bl	80014d2 <_ZnwjPv>
 800869c:	4602      	mov	r2, r0
 800869e:	6823      	ldr	r3, [r4, #0]
 80086a0:	6013      	str	r3, [r2, #0]
	}
 80086a2:	bf00      	nop
 80086a4:	3714      	adds	r7, #20
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd90      	pop	{r4, r7, pc}

080086aa <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 80086aa:	b580      	push	{r7, lr}
 80086ac:	b082      	sub	sp, #8
 80086ae:	af00      	add	r7, sp, #0
 80086b0:	6078      	str	r0, [r7, #4]
 80086b2:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f000 fa10 	bl	8008ada <_ZNSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
	}
 80086ba:	bf00      	nop
 80086bc:	3708      	adds	r7, #8
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}

080086c2 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERKS3_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80086c2:	b580      	push	{r7, lr}
 80086c4:	b082      	sub	sp, #8
 80086c6:	af00      	add	r7, sp, #0
 80086c8:	6078      	str	r0, [r7, #4]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	3304      	adds	r3, #4
 80086ce:	4618      	mov	r0, r3
 80086d0:	f000 fa0f 	bl	8008af2 <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERKS1_>
 80086d4:	4603      	mov	r3, r0
 80086d6:	4618      	mov	r0, r3
 80086d8:	3708      	adds	r7, #8
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}

080086de <_ZNSt10_Head_baseILj1EPFvPvELb0EEC1IS2_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 80086de:	b580      	push	{r7, lr}
 80086e0:	b082      	sub	sp, #8
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	6078      	str	r0, [r7, #4]
 80086e6:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80086e8:	6838      	ldr	r0, [r7, #0]
 80086ea:	f7fe fe07 	bl	80072fc <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 80086ee:	4603      	mov	r3, r0
 80086f0:	681a      	ldr	r2, [r3, #0]
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	601a      	str	r2, [r3, #0]
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	4618      	mov	r0, r3
 80086fa:	3708      	adds	r7, #8
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}

08008700 <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8008700:	b480      	push	{r7}
 8008702:	b083      	sub	sp, #12
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	4618      	mov	r0, r3
 800870c:	370c      	adds	r7, #12
 800870e:	46bd      	mov	sp, r7
 8008710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008714:	4770      	bx	lr

08008716 <_ZNSt11_Tuple_implILj1EJPFvPvEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8008716:	b580      	push	{r7, lr}
 8008718:	b082      	sub	sp, #8
 800871a:	af00      	add	r7, sp, #0
 800871c:	6078      	str	r0, [r7, #4]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	4618      	mov	r0, r3
 8008722:	f000 f9f1 	bl	8008b08 <_ZNSt10_Head_baseILj1EPFvPvELb0EE7_M_headERS3_>
 8008726:	4603      	mov	r3, r0
 8008728:	4618      	mov	r0, r3
 800872a:	3708      	adds	r7, #8
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}

08008730 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE8max_sizeERKS5_>:
      max_size(const _Alloc& __a) noexcept
 8008730:	b580      	push	{r7, lr}
 8008732:	b082      	sub	sp, #8
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
      { return _S_max_size(__a, 0); }
 8008738:	2100      	movs	r1, #0
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f000 f9ef 	bl	8008b1e <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE11_S_max_sizeIKS5_EEjRT_z>
 8008740:	4603      	mov	r3, r0
 8008742:	4618      	mov	r0, r3
 8008744:	3708      	adds	r7, #8
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}

0800874a <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tEET_S5_>:
    __niter_base(_Iterator __it)
 800874a:	b480      	push	{r7}
 800874c:	b083      	sub	sp, #12
 800874e:	af00      	add	r7, sp, #0
 8008750:	6078      	str	r0, [r7, #4]
    { return __it; }
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	4618      	mov	r0, r3
 8008756:	370c      	adds	r7, #12
 8008758:	46bd      	mov	sp, r7
 800875a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875e:	4770      	bx	lr

08008760 <_ZSt14__relocate_a_1IPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 8008760:	b590      	push	{r4, r7, lr}
 8008762:	b087      	sub	sp, #28
 8008764:	af00      	add	r7, sp, #0
 8008766:	60f8      	str	r0, [r7, #12]
 8008768:	60b9      	str	r1, [r7, #8]
 800876a:	607a      	str	r2, [r7, #4]
 800876c:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 8008772:	68fa      	ldr	r2, [r7, #12]
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	429a      	cmp	r2, r3
 8008778:	d013      	beq.n	80087a2 <_ZSt14__relocate_a_1IPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_+0x42>
	std::__relocate_object_a(std::__addressof(*__cur),
 800877a:	6978      	ldr	r0, [r7, #20]
 800877c:	f7fe fe0b 	bl	8007396 <_ZSt11__addressofIN2ei8spectral10processing11freq_peak_tEEPT_RS4_>
 8008780:	4604      	mov	r4, r0
 8008782:	68f8      	ldr	r0, [r7, #12]
 8008784:	f7fe fe07 	bl	8007396 <_ZSt11__addressofIN2ei8spectral10processing11freq_peak_tEEPT_RS4_>
 8008788:	4603      	mov	r3, r0
 800878a:	683a      	ldr	r2, [r7, #0]
 800878c:	4619      	mov	r1, r3
 800878e:	4620      	mov	r0, r4
 8008790:	f000 f9d0 	bl	8008b34 <_ZSt19__relocate_object_aIN2ei8spectral10processing11freq_peak_tES3_NS0_7EiAllocIS3_EEEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	3308      	adds	r3, #8
 8008798:	60fb      	str	r3, [r7, #12]
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	3308      	adds	r3, #8
 800879e:	617b      	str	r3, [r7, #20]
 80087a0:	e7e7      	b.n	8008772 <_ZSt14__relocate_a_1IPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_+0x12>
      return __cur;
 80087a2:	697b      	ldr	r3, [r7, #20]
    }
 80087a4:	4618      	mov	r0, r3
 80087a6:	371c      	adds	r7, #28
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd90      	pop	{r4, r7, pc}

080087ac <_ZSt4moveIRPN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 80087ac:	b480      	push	{r7}
 80087ae:	b083      	sub	sp, #12
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	4618      	mov	r0, r3
 80087b8:	370c      	adds	r7, #12
 80087ba:	46bd      	mov	sp, r7
 80087bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c0:	4770      	bx	lr

080087c2 <_ZSteqIPN2ei8spectral10processing11freq_peak_tEEbRKSt13move_iteratorIT_ES9_>:
    operator==(const move_iterator<_Iterator>& __x,
 80087c2:	b590      	push	{r4, r7, lr}
 80087c4:	b083      	sub	sp, #12
 80087c6:	af00      	add	r7, sp, #0
 80087c8:	6078      	str	r0, [r7, #4]
 80087ca:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f000 f9cc 	bl	8008b6a <_ZNKSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEE4baseEv>
 80087d2:	4604      	mov	r4, r0
 80087d4:	6838      	ldr	r0, [r7, #0]
 80087d6:	f000 f9c8 	bl	8008b6a <_ZNKSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEE4baseEv>
 80087da:	4603      	mov	r3, r0
 80087dc:	429c      	cmp	r4, r3
 80087de:	bf0c      	ite	eq
 80087e0:	2301      	moveq	r3, #1
 80087e2:	2300      	movne	r3, #0
 80087e4:	b2db      	uxtb	r3, r3
 80087e6:	4618      	mov	r0, r3
 80087e8:	370c      	adds	r7, #12
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd90      	pop	{r4, r7, pc}

080087ee <_ZSt7forwardIN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80087ee:	b480      	push	{r7}
 80087f0:	b083      	sub	sp, #12
 80087f2:	af00      	add	r7, sp, #0
 80087f4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	4618      	mov	r0, r3
 80087fa:	370c      	adds	r7, #12
 80087fc:	46bd      	mov	sp, r7
 80087fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008802:	4770      	bx	lr

08008804 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE12_S_constructIS4_JS4_EEENSt9enable_ifIXsrSt6__and_IJS9_IJSt6__not_INS6_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleISC_JSE_EEEEEE5valueEvE4typeERS5_PSC_DpOSD_>:
	_S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
 8008804:	b590      	push	{r4, r7, lr}
 8008806:	b085      	sub	sp, #20
 8008808:	af00      	add	r7, sp, #0
 800880a:	60f8      	str	r0, [r7, #12]
 800880c:	60b9      	str	r1, [r7, #8]
 800880e:	607a      	str	r2, [r7, #4]
	  ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f7ff ffec 	bl	80087ee <_ZSt7forwardIN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS4_E4typeE>
 8008816:	4604      	mov	r4, r0
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	4619      	mov	r1, r3
 800881c:	2008      	movs	r0, #8
 800881e:	f7f8 fe58 	bl	80014d2 <_ZnwjPv>
 8008822:	4603      	mov	r3, r0
 8008824:	4622      	mov	r2, r4
 8008826:	e892 0003 	ldmia.w	r2, {r0, r1}
 800882a:	e883 0003 	stmia.w	r3, {r0, r1}
	}
 800882e:	bf00      	nop
 8008830:	3714      	adds	r7, #20
 8008832:	46bd      	mov	sp, r7
 8008834:	bd90      	pop	{r4, r7, pc}

08008836 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_>:
    __make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8008836:	b580      	push	{r7, lr}
 8008838:	b08a      	sub	sp, #40	; 0x28
 800883a:	af00      	add	r7, sp, #0
 800883c:	60f8      	str	r0, [r7, #12]
 800883e:	60b9      	str	r1, [r7, #8]
 8008840:	607a      	str	r2, [r7, #4]
      if (__last - __first < 2)
 8008842:	f107 020c 	add.w	r2, r7, #12
 8008846:	f107 0308 	add.w	r3, r7, #8
 800884a:	4611      	mov	r1, r2
 800884c:	4618      	mov	r0, r3
 800884e:	f7fe fe26 	bl	800749e <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 8008852:	4603      	mov	r3, r0
 8008854:	2b01      	cmp	r3, #1
 8008856:	bfd4      	ite	le
 8008858:	2301      	movle	r3, #1
 800885a:	2300      	movgt	r3, #0
 800885c:	b2db      	uxtb	r3, r3
 800885e:	2b00      	cmp	r3, #0
 8008860:	d142      	bne.n	80088e8 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_+0xb2>
      const _DistanceType __len = __last - __first;
 8008862:	f107 020c 	add.w	r2, r7, #12
 8008866:	f107 0308 	add.w	r3, r7, #8
 800886a:	4611      	mov	r1, r2
 800886c:	4618      	mov	r0, r3
 800886e:	f7fe fe16 	bl	800749e <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 8008872:	6238      	str	r0, [r7, #32]
      _DistanceType __parent = (__len - 2) / 2;
 8008874:	6a3b      	ldr	r3, [r7, #32]
 8008876:	3b02      	subs	r3, #2
 8008878:	0fda      	lsrs	r2, r3, #31
 800887a:	4413      	add	r3, r2
 800887c:	105b      	asrs	r3, r3, #1
 800887e:	627b      	str	r3, [r7, #36]	; 0x24
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
 8008880:	f107 030c 	add.w	r3, r7, #12
 8008884:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008886:	4618      	mov	r0, r3
 8008888:	f7ff f97a 	bl	8007b80 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800888c:	4603      	mov	r3, r0
 800888e:	61fb      	str	r3, [r7, #28]
 8008890:	f107 031c 	add.w	r3, r7, #28
 8008894:	4618      	mov	r0, r3
 8008896:	f7ff fda6 	bl	80083e6 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800889a:	4603      	mov	r3, r0
 800889c:	4618      	mov	r0, r3
 800889e:	f7ff fdae 	bl	80083fe <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 80088a2:	4602      	mov	r2, r0
 80088a4:	f107 0314 	add.w	r3, r7, #20
 80088a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80088ac:	e883 0003 	stmia.w	r3, {r0, r1}
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
 80088b0:	f107 0314 	add.w	r3, r7, #20
 80088b4:	4618      	mov	r0, r3
 80088b6:	f7ff fda2 	bl	80083fe <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 80088ba:	4603      	mov	r3, r0
 80088bc:	687a      	ldr	r2, [r7, #4]
 80088be:	ed93 7a00 	vldr	s14, [r3]
 80088c2:	edd3 7a01 	vldr	s15, [r3, #4]
 80088c6:	7813      	ldrb	r3, [r2, #0]
 80088c8:	eeb0 0a47 	vmov.f32	s0, s14
 80088cc:	eef0 0a67 	vmov.f32	s1, s15
 80088d0:	6a3a      	ldr	r2, [r7, #32]
 80088d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80088d4:	68f8      	ldr	r0, [r7, #12]
 80088d6:	f000 f954 	bl	8008b82 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_>
	  if (__parent == 0)
 80088da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d005      	beq.n	80088ec <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_+0xb6>
	  __parent--;
 80088e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e2:	3b01      	subs	r3, #1
 80088e4:	627b      	str	r3, [r7, #36]	; 0x24
      while (true)
 80088e6:	e7cb      	b.n	8008880 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_+0x4a>
	return;
 80088e8:	bf00      	nop
 80088ea:	e000      	b.n	80088ee <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_+0xb8>
	    return;
 80088ec:	bf00      	nop
    }
 80088ee:	3728      	adds	r7, #40	; 0x28
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}

080088f4 <_ZN9__gnu_cxxltIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>:
    operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
 80088f4:	b590      	push	{r4, r7, lr}
 80088f6:	b083      	sub	sp, #12
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
 80088fc:	6039      	str	r1, [r7, #0]
    { return __lhs.base() < __rhs.base(); }
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f7fe fe0a 	bl	8007518 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 8008904:	4603      	mov	r3, r0
 8008906:	681c      	ldr	r4, [r3, #0]
 8008908:	6838      	ldr	r0, [r7, #0]
 800890a:	f7fe fe05 	bl	8007518 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 800890e:	4603      	mov	r3, r0
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	429c      	cmp	r4, r3
 8008914:	bf34      	ite	cc
 8008916:	2301      	movcc	r3, #1
 8008918:	2300      	movcs	r3, #0
 800891a:	b2db      	uxtb	r3, r3
 800891c:	4618      	mov	r0, r3
 800891e:	370c      	adds	r7, #12
 8008920:	46bd      	mov	sp, r7
 8008922:	bd90      	pop	{r4, r7, pc}

08008924 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_RT0_>:
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8008924:	b590      	push	{r4, r7, lr}
 8008926:	b087      	sub	sp, #28
 8008928:	af00      	add	r7, sp, #0
 800892a:	60f8      	str	r0, [r7, #12]
 800892c:	60b9      	str	r1, [r7, #8]
 800892e:	607a      	str	r2, [r7, #4]
 8008930:	603b      	str	r3, [r7, #0]
      _ValueType __value = _GLIBCXX_MOVE(*__result);
 8008932:	1d3b      	adds	r3, r7, #4
 8008934:	4618      	mov	r0, r3
 8008936:	f7ff fd56 	bl	80083e6 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800893a:	4603      	mov	r3, r0
 800893c:	4618      	mov	r0, r3
 800893e:	f7ff fd5e 	bl	80083fe <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8008942:	4602      	mov	r2, r0
 8008944:	f107 0310 	add.w	r3, r7, #16
 8008948:	e892 0003 	ldmia.w	r2, {r0, r1}
 800894c:	e883 0003 	stmia.w	r3, {r0, r1}
      *__result = _GLIBCXX_MOVE(*__first);
 8008950:	f107 030c 	add.w	r3, r7, #12
 8008954:	4618      	mov	r0, r3
 8008956:	f7ff fd46 	bl	80083e6 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800895a:	4603      	mov	r3, r0
 800895c:	4618      	mov	r0, r3
 800895e:	f7ff fd4e 	bl	80083fe <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8008962:	4604      	mov	r4, r0
 8008964:	1d3b      	adds	r3, r7, #4
 8008966:	4618      	mov	r0, r3
 8008968:	f7ff fd3d 	bl	80083e6 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800896c:	4603      	mov	r3, r0
 800896e:	4622      	mov	r2, r4
 8008970:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008974:	e883 0003 	stmia.w	r3, {r0, r1}
			 _DistanceType(__last - __first),
 8008978:	f107 020c 	add.w	r2, r7, #12
 800897c:	f107 0308 	add.w	r3, r7, #8
 8008980:	4611      	mov	r1, r2
 8008982:	4618      	mov	r0, r3
 8008984:	f7fe fd8b 	bl	800749e <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 8008988:	4604      	mov	r4, r0
			 _GLIBCXX_MOVE(__value), __comp);
 800898a:	f107 0310 	add.w	r3, r7, #16
 800898e:	4618      	mov	r0, r3
 8008990:	f7ff fd35 	bl	80083fe <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8008994:	4603      	mov	r3, r0
      std::__adjust_heap(__first, _DistanceType(0),
 8008996:	683a      	ldr	r2, [r7, #0]
 8008998:	ed93 7a00 	vldr	s14, [r3]
 800899c:	edd3 7a01 	vldr	s15, [r3, #4]
 80089a0:	7813      	ldrb	r3, [r2, #0]
 80089a2:	eeb0 0a47 	vmov.f32	s0, s14
 80089a6:	eef0 0a67 	vmov.f32	s1, s15
 80089aa:	4622      	mov	r2, r4
 80089ac:	2100      	movs	r1, #0
 80089ae:	68f8      	ldr	r0, [r7, #12]
 80089b0:	f000 f8e7 	bl	8008b82 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_>
    }
 80089b4:	bf00      	nop
 80089b6:	371c      	adds	r7, #28
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd90      	pop	{r4, r7, pc}

080089bc <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 80089bc:	b480      	push	{r7}
 80089be:	b083      	sub	sp, #12
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
	--_M_current;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f1a3 0208 	sub.w	r2, r3, #8
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	601a      	str	r2, [r3, #0]
	return *this;
 80089d0:	687b      	ldr	r3, [r7, #4]
      }
 80089d2:	4618      	mov	r0, r3
 80089d4:	370c      	adds	r7, #12
 80089d6:	46bd      	mov	sp, r7
 80089d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089dc:	4770      	bx	lr

080089de <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>:
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 80089de:	b590      	push	{r4, r7, lr}
 80089e0:	b083      	sub	sp, #12
 80089e2:	af00      	add	r7, sp, #0
 80089e4:	6078      	str	r0, [r7, #4]
 80089e6:	6039      	str	r1, [r7, #0]
      swap(*__a, *__b);
 80089e8:	1d3b      	adds	r3, r7, #4
 80089ea:	4618      	mov	r0, r3
 80089ec:	f7ff fcfb 	bl	80083e6 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 80089f0:	4604      	mov	r4, r0
 80089f2:	463b      	mov	r3, r7
 80089f4:	4618      	mov	r0, r3
 80089f6:	f7ff fcf6 	bl	80083e6 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 80089fa:	4603      	mov	r3, r0
 80089fc:	4619      	mov	r1, r3
 80089fe:	4620      	mov	r0, r4
 8008a00:	f000 f982 	bl	8008d08 <_ZSt4swapIN2ei8spectral10processing11freq_peak_tEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS8_ESt18is_move_assignableIS8_EEE5valueEvE4typeERS8_SI_>
    }
 8008a04:	bf00      	nop
 8008a06:	370c      	adds	r7, #12
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd90      	pop	{r4, r7, pc}

08008a0c <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEET_SC_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8008a0c:	b480      	push	{r7}
 8008a0e:	b083      	sub	sp, #12
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
    { return __it; }
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	4618      	mov	r0, r3
 8008a18:	370c      	adds	r7, #12
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a20:	4770      	bx	lr

08008a22 <_ZSt22__copy_move_backward_aILb1EN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_ET1_T0_SD_SC_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8008a22:	b5b0      	push	{r4, r5, r7, lr}
 8008a24:	b084      	sub	sp, #16
 8008a26:	af00      	add	r7, sp, #0
 8008a28:	60f8      	str	r0, [r7, #12]
 8008a2a:	60b9      	str	r1, [r7, #8]
 8008a2c:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8008a2e:	68f8      	ldr	r0, [r7, #12]
 8008a30:	f000 f991 	bl	8008d56 <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tESt6vectorIS3_NS0_7EiAllocIS3_EEEET_N9__gnu_cxx17__normal_iteratorIS9_T0_EE>
 8008a34:	4604      	mov	r4, r0
 8008a36:	68b8      	ldr	r0, [r7, #8]
 8008a38:	f000 f98d 	bl	8008d56 <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tESt6vectorIS3_NS0_7EiAllocIS3_EEEET_N9__gnu_cxx17__normal_iteratorIS9_T0_EE>
 8008a3c:	4605      	mov	r5, r0
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f000 f989 	bl	8008d56 <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tESt6vectorIS3_NS0_7EiAllocIS3_EEEET_N9__gnu_cxx17__normal_iteratorIS9_T0_EE>
 8008a44:	4603      	mov	r3, r0
 8008a46:	461a      	mov	r2, r3
 8008a48:	4629      	mov	r1, r5
 8008a4a:	4620      	mov	r0, r4
 8008a4c:	f000 f991 	bl	8008d72 <_ZSt23__copy_move_backward_a1ILb1EPN2ei8spectral10processing11freq_peak_tES4_ET1_T0_S6_S5_>
 8008a50:	4603      	mov	r3, r0
 8008a52:	4619      	mov	r1, r3
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f000 f99c 	bl	8008d92 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEES6_ET_SC_T0_>
 8008a5a:	4603      	mov	r3, r0
    }
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3710      	adds	r7, #16
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bdb0      	pop	{r4, r5, r7, pc}

08008a64 <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS3_9ei_matrixES7_fftEUlRKNS5_11freq_peak_tESA_E_EEEONSt16remove_referenceIT_E4typeEOSF_>:
    move(_Tp&& __t) noexcept
 8008a64:	b480      	push	{r7}
 8008a66:	b083      	sub	sp, #12
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	4618      	mov	r0, r3
 8008a70:	370c      	adds	r7, #12
 8008a72:	46bd      	mov	sp, r7
 8008a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a78:	4770      	bx	lr

08008a7a <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1EONS0_15_Iter_comp_iterISA_EE>:
      _Val_comp_iter(_Iter_comp_iter<_Compare>&& __comp)
 8008a7a:	b580      	push	{r7, lr}
 8008a7c:	b082      	sub	sp, #8
 8008a7e:	af00      	add	r7, sp, #0
 8008a80:	6078      	str	r0, [r7, #4]
 8008a82:	6039      	str	r1, [r7, #0]
	: _M_comp(std::move(__comp._M_comp))
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	4618      	mov	r0, r3
 8008a88:	f7fe fd6a 	bl	8007560 <_ZSt4moveIRZN2ei8spectral10processingL14find_fft_peaksEPNS0_9ei_matrixES4_fftEUlRKNS2_11freq_peak_tES7_E_EONSt16remove_referenceIT_E4typeEOSB_>
      { }
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	4618      	mov	r0, r3
 8008a90:	3708      	adds	r7, #8
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}

08008a96 <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclIS7_NS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEEEEbRT_T0_>:
	operator()(_Value& __val, _Iterator __it)
 8008a96:	b590      	push	{r4, r7, lr}
 8008a98:	b085      	sub	sp, #20
 8008a9a:	af00      	add	r7, sp, #0
 8008a9c:	60f8      	str	r0, [r7, #12]
 8008a9e:	60b9      	str	r1, [r7, #8]
 8008aa0:	607a      	str	r2, [r7, #4]
	{ return bool(_M_comp(__val, *__it)); }
 8008aa2:	68fc      	ldr	r4, [r7, #12]
 8008aa4:	1d3b      	adds	r3, r7, #4
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f7ff fc9d 	bl	80083e6 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8008aac:	4603      	mov	r3, r0
 8008aae:	461a      	mov	r2, r3
 8008ab0:	68b9      	ldr	r1, [r7, #8]
 8008ab2:	4620      	mov	r0, r4
 8008ab4:	f7fa fc2e 	bl	8003314 <_ZZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fftENKUlRKNS1_11freq_peak_tES6_E_clES6_S6_>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	4618      	mov	r0, r3
 8008abc:	3714      	adds	r7, #20
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd90      	pop	{r4, r7, pc}

08008ac2 <_ZNSt9_Any_data9_M_accessIPFijjPfEEERT_v>:
      _M_access()
 8008ac2:	b580      	push	{r7, lr}
 8008ac4:	b082      	sub	sp, #8
 8008ac6:	af00      	add	r7, sp, #0
 8008ac8:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f7f8 fe5d 	bl	800178a <_ZNSt9_Any_data9_M_accessEv>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3708      	adds	r7, #8
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}

08008ada <_ZNSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>:
      _M_access()
 8008ada:	b580      	push	{r7, lr}
 8008adc:	b082      	sub	sp, #8
 8008ade:	af00      	add	r7, sp, #0
 8008ae0:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f7f8 fe51 	bl	800178a <_ZNSt9_Any_data9_M_accessEv>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	4618      	mov	r0, r3
 8008aec:	3708      	adds	r7, #8
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}

08008af2 <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERKS1_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8008af2:	b480      	push	{r7}
 8008af4:	b083      	sub	sp, #12
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	6078      	str	r0, [r7, #4]
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	4618      	mov	r0, r3
 8008afe:	370c      	adds	r7, #12
 8008b00:	46bd      	mov	sp, r7
 8008b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b06:	4770      	bx	lr

08008b08 <_ZNSt10_Head_baseILj1EPFvPvELb0EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8008b08:	b480      	push	{r7}
 8008b0a:	b083      	sub	sp, #12
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	4618      	mov	r0, r3
 8008b14:	370c      	adds	r7, #12
 8008b16:	46bd      	mov	sp, r7
 8008b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1c:	4770      	bx	lr

08008b1e <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE11_S_max_sizeIKS5_EEjRT_z>:
	_S_max_size(_Alloc2&, ...)
 8008b1e:	b40f      	push	{r0, r1, r2, r3}
 8008b20:	b480      	push	{r7}
 8008b22:	af00      	add	r7, sp, #0
	    / sizeof(value_type);
 8008b24:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
	}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b30:	b004      	add	sp, #16
 8008b32:	4770      	bx	lr

08008b34 <_ZSt19__relocate_object_aIN2ei8spectral10processing11freq_peak_tES3_NS0_7EiAllocIS3_EEEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b084      	sub	sp, #16
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	60f8      	str	r0, [r7, #12]
 8008b3c:	60b9      	str	r1, [r7, #8]
 8008b3e:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 8008b40:	68b8      	ldr	r0, [r7, #8]
 8008b42:	f7ff fc5c 	bl	80083fe <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8008b46:	4603      	mov	r3, r0
 8008b48:	461a      	mov	r2, r3
 8008b4a:	68f9      	ldr	r1, [r7, #12]
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f7ff fae4 	bl	800811a <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE9constructIS4_JS4_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS5_PT_DpOS8_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 8008b52:	68b8      	ldr	r0, [r7, #8]
 8008b54:	f7fe fc1f 	bl	8007396 <_ZSt11__addressofIN2ei8spectral10processing11freq_peak_tEEPT_RS4_>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	4619      	mov	r1, r3
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f7fe fc25 	bl	80073ac <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE7destroyIS4_EEvRS5_PT_>
    }
 8008b62:	bf00      	nop
 8008b64:	3710      	adds	r7, #16
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}

08008b6a <_ZNKSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEE4baseEv>:
      base() const
 8008b6a:	b480      	push	{r7}
 8008b6c:	b083      	sub	sp, #12
 8008b6e:	af00      	add	r7, sp, #0
 8008b70:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	4618      	mov	r0, r3
 8008b78:	370c      	adds	r7, #12
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b80:	4770      	bx	lr

08008b82 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_>:
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
 8008b82:	b590      	push	{r4, r7, lr}
 8008b84:	b08f      	sub	sp, #60	; 0x3c
 8008b86:	af00      	add	r7, sp, #0
 8008b88:	6178      	str	r0, [r7, #20]
 8008b8a:	6139      	str	r1, [r7, #16]
 8008b8c:	60fa      	str	r2, [r7, #12]
 8008b8e:	eeb0 7a40 	vmov.f32	s14, s0
 8008b92:	eef0 7a60 	vmov.f32	s15, s1
 8008b96:	703b      	strb	r3, [r7, #0]
 8008b98:	ed87 7a01 	vstr	s14, [r7, #4]
 8008b9c:	edc7 7a02 	vstr	s15, [r7, #8]
      const _Distance __topIndex = __holeIndex;
 8008ba0:	693b      	ldr	r3, [r7, #16]
 8008ba2:	633b      	str	r3, [r7, #48]	; 0x30
      _Distance __secondChild = __holeIndex;
 8008ba4:	693b      	ldr	r3, [r7, #16]
 8008ba6:	637b      	str	r3, [r7, #52]	; 0x34
      while (__secondChild < (__len - 1) / 2)
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	3b01      	subs	r3, #1
 8008bac:	0fda      	lsrs	r2, r3, #31
 8008bae:	4413      	add	r3, r2
 8008bb0:	105b      	asrs	r3, r3, #1
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	da46      	bge.n	8008c48 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_+0xc6>
	  __secondChild = 2 * (__secondChild + 1);
 8008bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bbc:	3301      	adds	r3, #1
 8008bbe:	005b      	lsls	r3, r3, #1
 8008bc0:	637b      	str	r3, [r7, #52]	; 0x34
	  if (__comp(__first + __secondChild,
 8008bc2:	f107 0314 	add.w	r3, r7, #20
 8008bc6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008bc8:	4618      	mov	r0, r3
 8008bca:	f7fe ffd9 	bl	8007b80 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 8008bce:	4604      	mov	r4, r0
 8008bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bd2:	1e5a      	subs	r2, r3, #1
 8008bd4:	f107 0314 	add.w	r3, r7, #20
 8008bd8:	4611      	mov	r1, r2
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f7fe ffd0 	bl	8007b80 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 8008be0:	4602      	mov	r2, r0
 8008be2:	463b      	mov	r3, r7
 8008be4:	4621      	mov	r1, r4
 8008be6:	4618      	mov	r0, r3
 8008be8:	f7ff fb1b 	bl	8008222 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 8008bec:	4603      	mov	r3, r0
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d002      	beq.n	8008bf8 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_+0x76>
	    __secondChild--;
 8008bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bf4:	3b01      	subs	r3, #1
 8008bf6:	637b      	str	r3, [r7, #52]	; 0x34
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
 8008bf8:	f107 0314 	add.w	r3, r7, #20
 8008bfc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f7fe ffbe 	bl	8007b80 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 8008c04:	4603      	mov	r3, r0
 8008c06:	623b      	str	r3, [r7, #32]
 8008c08:	f107 0320 	add.w	r3, r7, #32
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	f7ff fbea 	bl	80083e6 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8008c12:	4603      	mov	r3, r0
 8008c14:	4618      	mov	r0, r3
 8008c16:	f7ff fbf2 	bl	80083fe <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8008c1a:	4604      	mov	r4, r0
 8008c1c:	f107 0314 	add.w	r3, r7, #20
 8008c20:	6939      	ldr	r1, [r7, #16]
 8008c22:	4618      	mov	r0, r3
 8008c24:	f7fe ffac 	bl	8007b80 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	627b      	str	r3, [r7, #36]	; 0x24
 8008c2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c30:	4618      	mov	r0, r3
 8008c32:	f7ff fbd8 	bl	80083e6 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8008c36:	4603      	mov	r3, r0
 8008c38:	4622      	mov	r2, r4
 8008c3a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008c3e:	e883 0003 	stmia.w	r3, {r0, r1}
	  __holeIndex = __secondChild;
 8008c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c44:	613b      	str	r3, [r7, #16]
      while (__secondChild < (__len - 1) / 2)
 8008c46:	e7af      	b.n	8008ba8 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_+0x26>
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	f003 0301 	and.w	r3, r3, #1
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d136      	bne.n	8008cc0 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_+0x13e>
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	3b02      	subs	r3, #2
 8008c56:	0fda      	lsrs	r2, r3, #31
 8008c58:	4413      	add	r3, r2
 8008c5a:	105b      	asrs	r3, r3, #1
 8008c5c:	461a      	mov	r2, r3
 8008c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d12d      	bne.n	8008cc0 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_+0x13e>
	  __secondChild = 2 * (__secondChild + 1);
 8008c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c66:	3301      	adds	r3, #1
 8008c68:	005b      	lsls	r3, r3, #1
 8008c6a:	637b      	str	r3, [r7, #52]	; 0x34
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
 8008c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c6e:	1e5a      	subs	r2, r3, #1
 8008c70:	f107 0314 	add.w	r3, r7, #20
 8008c74:	4611      	mov	r1, r2
 8008c76:	4618      	mov	r0, r3
 8008c78:	f7fe ff82 	bl	8007b80 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c80:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008c84:	4618      	mov	r0, r3
 8008c86:	f7ff fbae 	bl	80083e6 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f7ff fbb6 	bl	80083fe <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8008c92:	4604      	mov	r4, r0
 8008c94:	f107 0314 	add.w	r3, r7, #20
 8008c98:	6939      	ldr	r1, [r7, #16]
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f7fe ff70 	bl	8007b80 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ca4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008ca8:	4618      	mov	r0, r3
 8008caa:	f7ff fb9c 	bl	80083e6 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	4622      	mov	r2, r4
 8008cb2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008cb6:	e883 0003 	stmia.w	r3, {r0, r1}
	  __holeIndex = __secondChild - 1;
 8008cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cbc:	3b01      	subs	r3, #1
 8008cbe:	613b      	str	r3, [r7, #16]
	__cmp(_GLIBCXX_MOVE(__comp));
 8008cc0:	463b      	mov	r3, r7
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f7ff fece 	bl	8008a64 <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS3_9ei_matrixES7_fftEUlRKNS5_11freq_peak_tESA_E_EEEONSt16remove_referenceIT_E4typeEOSF_>
 8008cc8:	4602      	mov	r2, r0
 8008cca:	f107 031c 	add.w	r3, r7, #28
 8008cce:	4611      	mov	r1, r2
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	f000 f875 	bl	8008dc0 <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1EONS0_15_Iter_comp_iterISA_EE>
		       _GLIBCXX_MOVE(__value), __cmp);
 8008cd6:	1d3b      	adds	r3, r7, #4
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f7ff fb90 	bl	80083fe <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8008cde:	4603      	mov	r3, r0
      std::__push_heap(__first, __holeIndex, __topIndex,
 8008ce0:	f107 021c 	add.w	r2, r7, #28
 8008ce4:	ed93 7a00 	vldr	s14, [r3]
 8008ce8:	edd3 7a01 	vldr	s15, [r3, #4]
 8008cec:	4613      	mov	r3, r2
 8008cee:	eeb0 0a47 	vmov.f32	s0, s14
 8008cf2:	eef0 0a67 	vmov.f32	s1, s15
 8008cf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cf8:	6939      	ldr	r1, [r7, #16]
 8008cfa:	6978      	ldr	r0, [r7, #20]
 8008cfc:	f000 f86e 	bl	8008ddc <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_>
    }
 8008d00:	bf00      	nop
 8008d02:	373c      	adds	r7, #60	; 0x3c
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd90      	pop	{r4, r7, pc}

08008d08 <_ZSt4swapIN2ei8spectral10processing11freq_peak_tEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS8_ESt18is_move_assignableIS8_EEE5valueEvE4typeERS8_SI_>:
    swap(_Tp& __a, _Tp& __b)
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b084      	sub	sp, #16
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
 8008d10:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f7ff fb73 	bl	80083fe <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8008d18:	4602      	mov	r2, r0
 8008d1a:	f107 0308 	add.w	r3, r7, #8
 8008d1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008d22:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8008d26:	6838      	ldr	r0, [r7, #0]
 8008d28:	f7ff fb69 	bl	80083fe <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8008d2c:	4602      	mov	r2, r0
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008d34:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8008d38:	f107 0308 	add.w	r3, r7, #8
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	f7ff fb5e 	bl	80083fe <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8008d42:	4602      	mov	r2, r0
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008d4a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8008d4e:	bf00      	nop
 8008d50:	3710      	adds	r7, #16
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}

08008d56 <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tESt6vectorIS3_NS0_7EiAllocIS3_EEEET_N9__gnu_cxx17__normal_iteratorIS9_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8008d56:	b580      	push	{r7, lr}
 8008d58:	b082      	sub	sp, #8
 8008d5a:	af00      	add	r7, sp, #0
 8008d5c:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8008d5e:	1d3b      	adds	r3, r7, #4
 8008d60:	4618      	mov	r0, r3
 8008d62:	f7fe fbd9 	bl	8007518 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 8008d66:	4603      	mov	r3, r0
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	3708      	adds	r7, #8
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}

08008d72 <_ZSt23__copy_move_backward_a1ILb1EPN2ei8spectral10processing11freq_peak_tES4_ET1_T0_S6_S5_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 8008d72:	b580      	push	{r7, lr}
 8008d74:	b084      	sub	sp, #16
 8008d76:	af00      	add	r7, sp, #0
 8008d78:	60f8      	str	r0, [r7, #12]
 8008d7a:	60b9      	str	r1, [r7, #8]
 8008d7c:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 8008d7e:	687a      	ldr	r2, [r7, #4]
 8008d80:	68b9      	ldr	r1, [r7, #8]
 8008d82:	68f8      	ldr	r0, [r7, #12]
 8008d84:	f000 f8a1 	bl	8008eca <_ZSt23__copy_move_backward_a2ILb1EPN2ei8spectral10processing11freq_peak_tES4_ET1_T0_S6_S5_>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3710      	adds	r7, #16
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}

08008d92 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEES6_ET_SC_T0_>:
    __niter_wrap(_From __from, _To __res)
 8008d92:	b580      	push	{r7, lr}
 8008d94:	b082      	sub	sp, #8
 8008d96:	af00      	add	r7, sp, #0
 8008d98:	6078      	str	r0, [r7, #4]
 8008d9a:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f7ff ffda 	bl	8008d56 <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tESt6vectorIS3_NS0_7EiAllocIS3_EEEET_N9__gnu_cxx17__normal_iteratorIS9_T0_EE>
 8008da2:	4602      	mov	r2, r0
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	1a9b      	subs	r3, r3, r2
 8008da8:	10db      	asrs	r3, r3, #3
 8008daa:	461a      	mov	r2, r3
 8008dac:	1d3b      	adds	r3, r7, #4
 8008dae:	4611      	mov	r1, r2
 8008db0:	4618      	mov	r0, r3
 8008db2:	f7fe fee5 	bl	8007b80 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 8008db6:	4603      	mov	r3, r0
 8008db8:	4618      	mov	r0, r3
 8008dba:	3708      	adds	r7, #8
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}

08008dc0 <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1EONS0_15_Iter_comp_iterISA_EE>:
      _Iter_comp_val(_Iter_comp_iter<_Compare>&& __comp)
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b082      	sub	sp, #8
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
 8008dc8:	6039      	str	r1, [r7, #0]
	: _M_comp(std::move(__comp._M_comp))
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f7fe fbc7 	bl	8007560 <_ZSt4moveIRZN2ei8spectral10processingL14find_fft_peaksEPNS0_9ei_matrixES4_fftEUlRKNS2_11freq_peak_tES7_E_EONSt16remove_referenceIT_E4typeEOSB_>
      { }
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	3708      	adds	r7, #8
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}

08008ddc <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_>:
    __push_heap(_RandomAccessIterator __first,
 8008ddc:	b590      	push	{r4, r7, lr}
 8008dde:	b08b      	sub	sp, #44	; 0x2c
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6178      	str	r0, [r7, #20]
 8008de4:	6139      	str	r1, [r7, #16]
 8008de6:	60fa      	str	r2, [r7, #12]
 8008de8:	eeb0 7a40 	vmov.f32	s14, s0
 8008dec:	eef0 7a60 	vmov.f32	s15, s1
 8008df0:	603b      	str	r3, [r7, #0]
 8008df2:	ed87 7a01 	vstr	s14, [r7, #4]
 8008df6:	edc7 7a02 	vstr	s15, [r7, #8]
      _Distance __parent = (__holeIndex - 1) / 2;
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	3b01      	subs	r3, #1
 8008dfe:	0fda      	lsrs	r2, r3, #31
 8008e00:	4413      	add	r3, r2
 8008e02:	105b      	asrs	r3, r3, #1
 8008e04:	627b      	str	r3, [r7, #36]	; 0x24
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 8008e06:	693a      	ldr	r2, [r7, #16]
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	429a      	cmp	r2, r3
 8008e0c:	dd10      	ble.n	8008e30 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_+0x54>
 8008e0e:	f107 0314 	add.w	r3, r7, #20
 8008e12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008e14:	4618      	mov	r0, r3
 8008e16:	f7fe feb3 	bl	8007b80 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 8008e1a:	4601      	mov	r1, r0
 8008e1c:	1d3b      	adds	r3, r7, #4
 8008e1e:	461a      	mov	r2, r3
 8008e20:	6838      	ldr	r0, [r7, #0]
 8008e22:	f000 f862 	bl	8008eea <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEES7_EEbT_RT0_>
 8008e26:	4603      	mov	r3, r0
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d001      	beq.n	8008e30 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_+0x54>
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	e000      	b.n	8008e32 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_+0x56>
 8008e30:	2300      	movs	r3, #0
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d02d      	beq.n	8008e92 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_+0xb6>
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 8008e36:	f107 0314 	add.w	r3, r7, #20
 8008e3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f7fe fe9f 	bl	8007b80 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 8008e42:	4603      	mov	r3, r0
 8008e44:	61bb      	str	r3, [r7, #24]
 8008e46:	f107 0318 	add.w	r3, r7, #24
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f7ff facb 	bl	80083e6 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8008e50:	4603      	mov	r3, r0
 8008e52:	4618      	mov	r0, r3
 8008e54:	f7ff fad3 	bl	80083fe <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8008e58:	4604      	mov	r4, r0
 8008e5a:	f107 0314 	add.w	r3, r7, #20
 8008e5e:	6939      	ldr	r1, [r7, #16]
 8008e60:	4618      	mov	r0, r3
 8008e62:	f7fe fe8d 	bl	8007b80 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 8008e66:	4603      	mov	r3, r0
 8008e68:	61fb      	str	r3, [r7, #28]
 8008e6a:	f107 031c 	add.w	r3, r7, #28
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f7ff fab9 	bl	80083e6 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8008e74:	4603      	mov	r3, r0
 8008e76:	4622      	mov	r2, r4
 8008e78:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008e7c:	e883 0003 	stmia.w	r3, {r0, r1}
	  __holeIndex = __parent;
 8008e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e82:	613b      	str	r3, [r7, #16]
	  __parent = (__holeIndex - 1) / 2;
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	3b01      	subs	r3, #1
 8008e88:	0fda      	lsrs	r2, r3, #31
 8008e8a:	4413      	add	r3, r2
 8008e8c:	105b      	asrs	r3, r3, #1
 8008e8e:	627b      	str	r3, [r7, #36]	; 0x24
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 8008e90:	e7b9      	b.n	8008e06 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_+0x2a>
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
 8008e92:	1d3b      	adds	r3, r7, #4
 8008e94:	4618      	mov	r0, r3
 8008e96:	f7ff fab2 	bl	80083fe <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8008e9a:	4604      	mov	r4, r0
 8008e9c:	f107 0314 	add.w	r3, r7, #20
 8008ea0:	6939      	ldr	r1, [r7, #16]
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	f7fe fe6c 	bl	8007b80 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	623b      	str	r3, [r7, #32]
 8008eac:	f107 0320 	add.w	r3, r7, #32
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f7ff fa98 	bl	80083e6 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	4622      	mov	r2, r4
 8008eba:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008ebe:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8008ec2:	bf00      	nop
 8008ec4:	372c      	adds	r7, #44	; 0x2c
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd90      	pop	{r4, r7, pc}

08008eca <_ZSt23__copy_move_backward_a2ILb1EPN2ei8spectral10processing11freq_peak_tES4_ET1_T0_S6_S5_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8008eca:	b580      	push	{r7, lr}
 8008ecc:	b084      	sub	sp, #16
 8008ece:	af00      	add	r7, sp, #0
 8008ed0:	60f8      	str	r0, [r7, #12]
 8008ed2:	60b9      	str	r1, [r7, #8]
 8008ed4:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 8008ed6:	687a      	ldr	r2, [r7, #4]
 8008ed8:	68b9      	ldr	r1, [r7, #8]
 8008eda:	68f8      	ldr	r0, [r7, #12]
 8008edc:	f000 f81c 	bl	8008f18 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN2ei8spectral10processing11freq_peak_tEEEPT_PKS7_SA_S8_>
 8008ee0:	4603      	mov	r3, r0
    }
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3710      	adds	r7, #16
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}

08008eea <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEES7_EEbT_RT0_>:
	operator()(_Iterator __it, _Value& __val)
 8008eea:	b590      	push	{r4, r7, lr}
 8008eec:	b085      	sub	sp, #20
 8008eee:	af00      	add	r7, sp, #0
 8008ef0:	60f8      	str	r0, [r7, #12]
 8008ef2:	60b9      	str	r1, [r7, #8]
 8008ef4:	607a      	str	r2, [r7, #4]
	{ return bool(_M_comp(*__it, __val)); }
 8008ef6:	68fc      	ldr	r4, [r7, #12]
 8008ef8:	f107 0308 	add.w	r3, r7, #8
 8008efc:	4618      	mov	r0, r3
 8008efe:	f7ff fa72 	bl	80083e6 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8008f02:	4603      	mov	r3, r0
 8008f04:	687a      	ldr	r2, [r7, #4]
 8008f06:	4619      	mov	r1, r3
 8008f08:	4620      	mov	r0, r4
 8008f0a:	f7fa fa03 	bl	8003314 <_ZZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fftENKUlRKNS1_11freq_peak_tES6_E_clES6_S6_>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	4618      	mov	r0, r3
 8008f12:	3714      	adds	r7, #20
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd90      	pop	{r4, r7, pc}

08008f18 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN2ei8spectral10processing11freq_peak_tEEEPT_PKS7_SA_S8_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b086      	sub	sp, #24
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	60f8      	str	r0, [r7, #12]
 8008f20:	60b9      	str	r1, [r7, #8]
 8008f22:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8008f24:	68ba      	ldr	r2, [r7, #8]
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	1ad3      	subs	r3, r2, r3
 8008f2a:	10db      	asrs	r3, r3, #3
 8008f2c:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8008f2e:	697b      	ldr	r3, [r7, #20]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d00a      	beq.n	8008f4a <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN2ei8spectral10processing11freq_peak_tEEEPT_PKS7_SA_S8_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8008f34:	697b      	ldr	r3, [r7, #20]
 8008f36:	00db      	lsls	r3, r3, #3
 8008f38:	425b      	negs	r3, r3
 8008f3a:	687a      	ldr	r2, [r7, #4]
 8008f3c:	18d0      	adds	r0, r2, r3
 8008f3e:	697b      	ldr	r3, [r7, #20]
 8008f40:	00db      	lsls	r3, r3, #3
 8008f42:	461a      	mov	r2, r3
 8008f44:	68f9      	ldr	r1, [r7, #12]
 8008f46:	f01a fb09 	bl	802355c <memmove>
	  return __result - _Num;
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	00db      	lsls	r3, r3, #3
 8008f4e:	425b      	negs	r3, r3
 8008f50:	687a      	ldr	r2, [r7, #4]
 8008f52:	4413      	add	r3, r2
	}
 8008f54:	4618      	mov	r0, r3
 8008f56:	3718      	adds	r7, #24
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}

08008f5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	b083      	sub	sp, #12
 8008f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008f62:	2300      	movs	r3, #0
 8008f64:	607b      	str	r3, [r7, #4]
 8008f66:	4b10      	ldr	r3, [pc, #64]	; (8008fa8 <HAL_MspInit+0x4c>)
 8008f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f6a:	4a0f      	ldr	r2, [pc, #60]	; (8008fa8 <HAL_MspInit+0x4c>)
 8008f6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008f70:	6453      	str	r3, [r2, #68]	; 0x44
 8008f72:	4b0d      	ldr	r3, [pc, #52]	; (8008fa8 <HAL_MspInit+0x4c>)
 8008f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f7a:	607b      	str	r3, [r7, #4]
 8008f7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008f7e:	2300      	movs	r3, #0
 8008f80:	603b      	str	r3, [r7, #0]
 8008f82:	4b09      	ldr	r3, [pc, #36]	; (8008fa8 <HAL_MspInit+0x4c>)
 8008f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f86:	4a08      	ldr	r2, [pc, #32]	; (8008fa8 <HAL_MspInit+0x4c>)
 8008f88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f8c:	6413      	str	r3, [r2, #64]	; 0x40
 8008f8e:	4b06      	ldr	r3, [pc, #24]	; (8008fa8 <HAL_MspInit+0x4c>)
 8008f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f96:	603b      	str	r3, [r7, #0]
 8008f98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008f9a:	bf00      	nop
 8008f9c:	370c      	adds	r7, #12
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa4:	4770      	bx	lr
 8008fa6:	bf00      	nop
 8008fa8:	40023800 	.word	0x40023800

08008fac <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b085      	sub	sp, #20
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	4a0b      	ldr	r2, [pc, #44]	; (8008fe8 <HAL_CRC_MspInit+0x3c>)
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	d10d      	bne.n	8008fda <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	60fb      	str	r3, [r7, #12]
 8008fc2:	4b0a      	ldr	r3, [pc, #40]	; (8008fec <HAL_CRC_MspInit+0x40>)
 8008fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fc6:	4a09      	ldr	r2, [pc, #36]	; (8008fec <HAL_CRC_MspInit+0x40>)
 8008fc8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8008fce:	4b07      	ldr	r3, [pc, #28]	; (8008fec <HAL_CRC_MspInit+0x40>)
 8008fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008fd6:	60fb      	str	r3, [r7, #12]
 8008fd8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8008fda:	bf00      	nop
 8008fdc:	3714      	adds	r7, #20
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe4:	4770      	bx	lr
 8008fe6:	bf00      	nop
 8008fe8:	40023000 	.word	0x40023000
 8008fec:	40023800 	.word	0x40023800

08008ff0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b08a      	sub	sp, #40	; 0x28
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ff8:	f107 0314 	add.w	r3, r7, #20
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	601a      	str	r2, [r3, #0]
 8009000:	605a      	str	r2, [r3, #4]
 8009002:	609a      	str	r2, [r3, #8]
 8009004:	60da      	str	r2, [r3, #12]
 8009006:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	4a19      	ldr	r2, [pc, #100]	; (8009074 <HAL_SPI_MspInit+0x84>)
 800900e:	4293      	cmp	r3, r2
 8009010:	d12b      	bne.n	800906a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8009012:	2300      	movs	r3, #0
 8009014:	613b      	str	r3, [r7, #16]
 8009016:	4b18      	ldr	r3, [pc, #96]	; (8009078 <HAL_SPI_MspInit+0x88>)
 8009018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800901a:	4a17      	ldr	r2, [pc, #92]	; (8009078 <HAL_SPI_MspInit+0x88>)
 800901c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009020:	6453      	str	r3, [r2, #68]	; 0x44
 8009022:	4b15      	ldr	r3, [pc, #84]	; (8009078 <HAL_SPI_MspInit+0x88>)
 8009024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009026:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800902a:	613b      	str	r3, [r7, #16]
 800902c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800902e:	2300      	movs	r3, #0
 8009030:	60fb      	str	r3, [r7, #12]
 8009032:	4b11      	ldr	r3, [pc, #68]	; (8009078 <HAL_SPI_MspInit+0x88>)
 8009034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009036:	4a10      	ldr	r2, [pc, #64]	; (8009078 <HAL_SPI_MspInit+0x88>)
 8009038:	f043 0301 	orr.w	r3, r3, #1
 800903c:	6313      	str	r3, [r2, #48]	; 0x30
 800903e:	4b0e      	ldr	r3, [pc, #56]	; (8009078 <HAL_SPI_MspInit+0x88>)
 8009040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009042:	f003 0301 	and.w	r3, r3, #1
 8009046:	60fb      	str	r3, [r7, #12]
 8009048:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800904a:	23e0      	movs	r3, #224	; 0xe0
 800904c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800904e:	2302      	movs	r3, #2
 8009050:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009052:	2300      	movs	r3, #0
 8009054:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009056:	2303      	movs	r3, #3
 8009058:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800905a:	2305      	movs	r3, #5
 800905c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800905e:	f107 0314 	add.w	r3, r7, #20
 8009062:	4619      	mov	r1, r3
 8009064:	4805      	ldr	r0, [pc, #20]	; (800907c <HAL_SPI_MspInit+0x8c>)
 8009066:	f000 fb0d 	bl	8009684 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800906a:	bf00      	nop
 800906c:	3728      	adds	r7, #40	; 0x28
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}
 8009072:	bf00      	nop
 8009074:	40013000 	.word	0x40013000
 8009078:	40023800 	.word	0x40023800
 800907c:	40020000 	.word	0x40020000

08009080 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009080:	b480      	push	{r7}
 8009082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8009084:	e7fe      	b.n	8009084 <NMI_Handler+0x4>

08009086 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009086:	b480      	push	{r7}
 8009088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800908a:	e7fe      	b.n	800908a <HardFault_Handler+0x4>

0800908c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800908c:	b480      	push	{r7}
 800908e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009090:	e7fe      	b.n	8009090 <MemManage_Handler+0x4>

08009092 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009092:	b480      	push	{r7}
 8009094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009096:	e7fe      	b.n	8009096 <BusFault_Handler+0x4>

08009098 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009098:	b480      	push	{r7}
 800909a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800909c:	e7fe      	b.n	800909c <UsageFault_Handler+0x4>

0800909e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800909e:	b480      	push	{r7}
 80090a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80090a2:	bf00      	nop
 80090a4:	46bd      	mov	sp, r7
 80090a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090aa:	4770      	bx	lr

080090ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80090ac:	b480      	push	{r7}
 80090ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80090b0:	bf00      	nop
 80090b2:	46bd      	mov	sp, r7
 80090b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b8:	4770      	bx	lr

080090ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80090ba:	b480      	push	{r7}
 80090bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80090be:	bf00      	nop
 80090c0:	46bd      	mov	sp, r7
 80090c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c6:	4770      	bx	lr

080090c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80090cc:	f000 f968 	bl	80093a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80090d0:	bf00      	nop
 80090d2:	bd80      	pop	{r7, pc}

080090d4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80090d8:	2001      	movs	r0, #1
 80090da:	f000 fca3 	bl	8009a24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80090de:	bf00      	nop
 80090e0:	bd80      	pop	{r7, pc}
	...

080090e4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80090e8:	4802      	ldr	r0, [pc, #8]	; (80090f4 <OTG_FS_IRQHandler+0x10>)
 80090ea:	f000 fe03 	bl	8009cf4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80090ee:	bf00      	nop
 80090f0:	bd80      	pop	{r7, pc}
 80090f2:	bf00      	nop
 80090f4:	200038bc 	.word	0x200038bc

080090f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80090f8:	b480      	push	{r7}
 80090fa:	af00      	add	r7, sp, #0
	return 1;
 80090fc:	2301      	movs	r3, #1
}
 80090fe:	4618      	mov	r0, r3
 8009100:	46bd      	mov	sp, r7
 8009102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009106:	4770      	bx	lr

08009108 <_kill>:

int _kill(int pid, int sig)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b082      	sub	sp, #8
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
 8009110:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8009112:	f01a f9c5 	bl	80234a0 <__errno>
 8009116:	4603      	mov	r3, r0
 8009118:	2216      	movs	r2, #22
 800911a:	601a      	str	r2, [r3, #0]
	return -1;
 800911c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009120:	4618      	mov	r0, r3
 8009122:	3708      	adds	r7, #8
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}

08009128 <_exit>:

void _exit (int status)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b082      	sub	sp, #8
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8009130:	f04f 31ff 	mov.w	r1, #4294967295
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f7ff ffe7 	bl	8009108 <_kill>
	while (1) {}		/* Make sure we hang here */
 800913a:	e7fe      	b.n	800913a <_exit+0x12>

0800913c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b086      	sub	sp, #24
 8009140:	af00      	add	r7, sp, #0
 8009142:	60f8      	str	r0, [r7, #12]
 8009144:	60b9      	str	r1, [r7, #8]
 8009146:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009148:	2300      	movs	r3, #0
 800914a:	617b      	str	r3, [r7, #20]
 800914c:	e00a      	b.n	8009164 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800914e:	f3af 8000 	nop.w
 8009152:	4601      	mov	r1, r0
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	1c5a      	adds	r2, r3, #1
 8009158:	60ba      	str	r2, [r7, #8]
 800915a:	b2ca      	uxtb	r2, r1
 800915c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800915e:	697b      	ldr	r3, [r7, #20]
 8009160:	3301      	adds	r3, #1
 8009162:	617b      	str	r3, [r7, #20]
 8009164:	697a      	ldr	r2, [r7, #20]
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	429a      	cmp	r2, r3
 800916a:	dbf0      	blt.n	800914e <_read+0x12>
	}

return len;
 800916c:	687b      	ldr	r3, [r7, #4]
}
 800916e:	4618      	mov	r0, r3
 8009170:	3718      	adds	r7, #24
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}

08009176 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8009176:	b580      	push	{r7, lr}
 8009178:	b086      	sub	sp, #24
 800917a:	af00      	add	r7, sp, #0
 800917c:	60f8      	str	r0, [r7, #12]
 800917e:	60b9      	str	r1, [r7, #8]
 8009180:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009182:	2300      	movs	r3, #0
 8009184:	617b      	str	r3, [r7, #20]
 8009186:	e009      	b.n	800919c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	1c5a      	adds	r2, r3, #1
 800918c:	60ba      	str	r2, [r7, #8]
 800918e:	781b      	ldrb	r3, [r3, #0]
 8009190:	4618      	mov	r0, r3
 8009192:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009196:	697b      	ldr	r3, [r7, #20]
 8009198:	3301      	adds	r3, #1
 800919a:	617b      	str	r3, [r7, #20]
 800919c:	697a      	ldr	r2, [r7, #20]
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	429a      	cmp	r2, r3
 80091a2:	dbf1      	blt.n	8009188 <_write+0x12>
	}
	return len;
 80091a4:	687b      	ldr	r3, [r7, #4]
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3718      	adds	r7, #24
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}

080091ae <_close>:

int _close(int file)
{
 80091ae:	b480      	push	{r7}
 80091b0:	b083      	sub	sp, #12
 80091b2:	af00      	add	r7, sp, #0
 80091b4:	6078      	str	r0, [r7, #4]
	return -1;
 80091b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80091ba:	4618      	mov	r0, r3
 80091bc:	370c      	adds	r7, #12
 80091be:	46bd      	mov	sp, r7
 80091c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c4:	4770      	bx	lr

080091c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80091c6:	b480      	push	{r7}
 80091c8:	b083      	sub	sp, #12
 80091ca:	af00      	add	r7, sp, #0
 80091cc:	6078      	str	r0, [r7, #4]
 80091ce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80091d6:	605a      	str	r2, [r3, #4]
	return 0;
 80091d8:	2300      	movs	r3, #0
}
 80091da:	4618      	mov	r0, r3
 80091dc:	370c      	adds	r7, #12
 80091de:	46bd      	mov	sp, r7
 80091e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e4:	4770      	bx	lr

080091e6 <_isatty>:

int _isatty(int file)
{
 80091e6:	b480      	push	{r7}
 80091e8:	b083      	sub	sp, #12
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	6078      	str	r0, [r7, #4]
	return 1;
 80091ee:	2301      	movs	r3, #1
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	370c      	adds	r7, #12
 80091f4:	46bd      	mov	sp, r7
 80091f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fa:	4770      	bx	lr

080091fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80091fc:	b480      	push	{r7}
 80091fe:	b085      	sub	sp, #20
 8009200:	af00      	add	r7, sp, #0
 8009202:	60f8      	str	r0, [r7, #12]
 8009204:	60b9      	str	r1, [r7, #8]
 8009206:	607a      	str	r2, [r7, #4]
	return 0;
 8009208:	2300      	movs	r3, #0
}
 800920a:	4618      	mov	r0, r3
 800920c:	3714      	adds	r7, #20
 800920e:	46bd      	mov	sp, r7
 8009210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009214:	4770      	bx	lr
	...

08009218 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b086      	sub	sp, #24
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009220:	4a14      	ldr	r2, [pc, #80]	; (8009274 <_sbrk+0x5c>)
 8009222:	4b15      	ldr	r3, [pc, #84]	; (8009278 <_sbrk+0x60>)
 8009224:	1ad3      	subs	r3, r2, r3
 8009226:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800922c:	4b13      	ldr	r3, [pc, #76]	; (800927c <_sbrk+0x64>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d102      	bne.n	800923a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009234:	4b11      	ldr	r3, [pc, #68]	; (800927c <_sbrk+0x64>)
 8009236:	4a12      	ldr	r2, [pc, #72]	; (8009280 <_sbrk+0x68>)
 8009238:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800923a:	4b10      	ldr	r3, [pc, #64]	; (800927c <_sbrk+0x64>)
 800923c:	681a      	ldr	r2, [r3, #0]
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	4413      	add	r3, r2
 8009242:	693a      	ldr	r2, [r7, #16]
 8009244:	429a      	cmp	r2, r3
 8009246:	d207      	bcs.n	8009258 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009248:	f01a f92a 	bl	80234a0 <__errno>
 800924c:	4603      	mov	r3, r0
 800924e:	220c      	movs	r2, #12
 8009250:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8009252:	f04f 33ff 	mov.w	r3, #4294967295
 8009256:	e009      	b.n	800926c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009258:	4b08      	ldr	r3, [pc, #32]	; (800927c <_sbrk+0x64>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800925e:	4b07      	ldr	r3, [pc, #28]	; (800927c <_sbrk+0x64>)
 8009260:	681a      	ldr	r2, [r3, #0]
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	4413      	add	r3, r2
 8009266:	4a05      	ldr	r2, [pc, #20]	; (800927c <_sbrk+0x64>)
 8009268:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800926a:	68fb      	ldr	r3, [r7, #12]
}
 800926c:	4618      	mov	r0, r3
 800926e:	3718      	adds	r7, #24
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}
 8009274:	20020000 	.word	0x20020000
 8009278:	00000400 	.word	0x00000400
 800927c:	20001eec 	.word	0x20001eec
 8009280:	20004000 	.word	0x20004000

08009284 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009284:	b480      	push	{r7}
 8009286:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009288:	4b06      	ldr	r3, [pc, #24]	; (80092a4 <SystemInit+0x20>)
 800928a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800928e:	4a05      	ldr	r2, [pc, #20]	; (80092a4 <SystemInit+0x20>)
 8009290:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009294:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009298:	bf00      	nop
 800929a:	46bd      	mov	sp, r7
 800929c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a0:	4770      	bx	lr
 80092a2:	bf00      	nop
 80092a4:	e000ed00 	.word	0xe000ed00

080092a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80092a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80092e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80092ac:	480d      	ldr	r0, [pc, #52]	; (80092e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80092ae:	490e      	ldr	r1, [pc, #56]	; (80092e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80092b0:	4a0e      	ldr	r2, [pc, #56]	; (80092ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80092b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80092b4:	e002      	b.n	80092bc <LoopCopyDataInit>

080092b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80092b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80092b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80092ba:	3304      	adds	r3, #4

080092bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80092bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80092be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80092c0:	d3f9      	bcc.n	80092b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80092c2:	4a0b      	ldr	r2, [pc, #44]	; (80092f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80092c4:	4c0b      	ldr	r4, [pc, #44]	; (80092f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80092c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80092c8:	e001      	b.n	80092ce <LoopFillZerobss>

080092ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80092ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80092cc:	3204      	adds	r2, #4

080092ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80092ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80092d0:	d3fb      	bcc.n	80092ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80092d2:	f7ff ffd7 	bl	8009284 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80092d6:	f01a f8fb 	bl	80234d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80092da:	f7fc fef9 	bl	80060d0 <main>
  bx  lr    
 80092de:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80092e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80092e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80092e8:	20000454 	.word	0x20000454
  ldr r2, =_sidata
 80092ec:	0802a428 	.word	0x0802a428
  ldr r2, =_sbss
 80092f0:	20000454 	.word	0x20000454
  ldr r4, =_ebss
 80092f4:	20003ffc 	.word	0x20003ffc

080092f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80092f8:	e7fe      	b.n	80092f8 <ADC_IRQHandler>
	...

080092fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009300:	4b0e      	ldr	r3, [pc, #56]	; (800933c <HAL_Init+0x40>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	4a0d      	ldr	r2, [pc, #52]	; (800933c <HAL_Init+0x40>)
 8009306:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800930a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800930c:	4b0b      	ldr	r3, [pc, #44]	; (800933c <HAL_Init+0x40>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	4a0a      	ldr	r2, [pc, #40]	; (800933c <HAL_Init+0x40>)
 8009312:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009316:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009318:	4b08      	ldr	r3, [pc, #32]	; (800933c <HAL_Init+0x40>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	4a07      	ldr	r2, [pc, #28]	; (800933c <HAL_Init+0x40>)
 800931e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009322:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009324:	2003      	movs	r0, #3
 8009326:	f000 f94f 	bl	80095c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800932a:	200f      	movs	r0, #15
 800932c:	f000 f808 	bl	8009340 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009330:	f7ff fe14 	bl	8008f5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009334:	2300      	movs	r3, #0
}
 8009336:	4618      	mov	r0, r3
 8009338:	bd80      	pop	{r7, pc}
 800933a:	bf00      	nop
 800933c:	40023c00 	.word	0x40023c00

08009340 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b082      	sub	sp, #8
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009348:	4b12      	ldr	r3, [pc, #72]	; (8009394 <HAL_InitTick+0x54>)
 800934a:	681a      	ldr	r2, [r3, #0]
 800934c:	4b12      	ldr	r3, [pc, #72]	; (8009398 <HAL_InitTick+0x58>)
 800934e:	781b      	ldrb	r3, [r3, #0]
 8009350:	4619      	mov	r1, r3
 8009352:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009356:	fbb3 f3f1 	udiv	r3, r3, r1
 800935a:	fbb2 f3f3 	udiv	r3, r2, r3
 800935e:	4618      	mov	r0, r3
 8009360:	f000 f967 	bl	8009632 <HAL_SYSTICK_Config>
 8009364:	4603      	mov	r3, r0
 8009366:	2b00      	cmp	r3, #0
 8009368:	d001      	beq.n	800936e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800936a:	2301      	movs	r3, #1
 800936c:	e00e      	b.n	800938c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2b0f      	cmp	r3, #15
 8009372:	d80a      	bhi.n	800938a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009374:	2200      	movs	r2, #0
 8009376:	6879      	ldr	r1, [r7, #4]
 8009378:	f04f 30ff 	mov.w	r0, #4294967295
 800937c:	f000 f92f 	bl	80095de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009380:	4a06      	ldr	r2, [pc, #24]	; (800939c <HAL_InitTick+0x5c>)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009386:	2300      	movs	r3, #0
 8009388:	e000      	b.n	800938c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800938a:	2301      	movs	r3, #1
}
 800938c:	4618      	mov	r0, r3
 800938e:	3708      	adds	r7, #8
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}
 8009394:	20000070 	.word	0x20000070
 8009398:	20000078 	.word	0x20000078
 800939c:	20000074 	.word	0x20000074

080093a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80093a0:	b480      	push	{r7}
 80093a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80093a4:	4b06      	ldr	r3, [pc, #24]	; (80093c0 <HAL_IncTick+0x20>)
 80093a6:	781b      	ldrb	r3, [r3, #0]
 80093a8:	461a      	mov	r2, r3
 80093aa:	4b06      	ldr	r3, [pc, #24]	; (80093c4 <HAL_IncTick+0x24>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	4413      	add	r3, r2
 80093b0:	4a04      	ldr	r2, [pc, #16]	; (80093c4 <HAL_IncTick+0x24>)
 80093b2:	6013      	str	r3, [r2, #0]
}
 80093b4:	bf00      	nop
 80093b6:	46bd      	mov	sp, r7
 80093b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093bc:	4770      	bx	lr
 80093be:	bf00      	nop
 80093c0:	20000078 	.word	0x20000078
 80093c4:	20001ef0 	.word	0x20001ef0

080093c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80093c8:	b480      	push	{r7}
 80093ca:	af00      	add	r7, sp, #0
  return uwTick;
 80093cc:	4b03      	ldr	r3, [pc, #12]	; (80093dc <HAL_GetTick+0x14>)
 80093ce:	681b      	ldr	r3, [r3, #0]
}
 80093d0:	4618      	mov	r0, r3
 80093d2:	46bd      	mov	sp, r7
 80093d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d8:	4770      	bx	lr
 80093da:	bf00      	nop
 80093dc:	20001ef0 	.word	0x20001ef0

080093e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b084      	sub	sp, #16
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80093e8:	f7ff ffee 	bl	80093c8 <HAL_GetTick>
 80093ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093f8:	d005      	beq.n	8009406 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80093fa:	4b0a      	ldr	r3, [pc, #40]	; (8009424 <HAL_Delay+0x44>)
 80093fc:	781b      	ldrb	r3, [r3, #0]
 80093fe:	461a      	mov	r2, r3
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	4413      	add	r3, r2
 8009404:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8009406:	bf00      	nop
 8009408:	f7ff ffde 	bl	80093c8 <HAL_GetTick>
 800940c:	4602      	mov	r2, r0
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	1ad3      	subs	r3, r2, r3
 8009412:	68fa      	ldr	r2, [r7, #12]
 8009414:	429a      	cmp	r2, r3
 8009416:	d8f7      	bhi.n	8009408 <HAL_Delay+0x28>
  {
  }
}
 8009418:	bf00      	nop
 800941a:	bf00      	nop
 800941c:	3710      	adds	r7, #16
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}
 8009422:	bf00      	nop
 8009424:	20000078 	.word	0x20000078

08009428 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009428:	b480      	push	{r7}
 800942a:	b085      	sub	sp, #20
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f003 0307 	and.w	r3, r3, #7
 8009436:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009438:	4b0c      	ldr	r3, [pc, #48]	; (800946c <__NVIC_SetPriorityGrouping+0x44>)
 800943a:	68db      	ldr	r3, [r3, #12]
 800943c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800943e:	68ba      	ldr	r2, [r7, #8]
 8009440:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009444:	4013      	ands	r3, r2
 8009446:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009450:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009454:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009458:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800945a:	4a04      	ldr	r2, [pc, #16]	; (800946c <__NVIC_SetPriorityGrouping+0x44>)
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	60d3      	str	r3, [r2, #12]
}
 8009460:	bf00      	nop
 8009462:	3714      	adds	r7, #20
 8009464:	46bd      	mov	sp, r7
 8009466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946a:	4770      	bx	lr
 800946c:	e000ed00 	.word	0xe000ed00

08009470 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009470:	b480      	push	{r7}
 8009472:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009474:	4b04      	ldr	r3, [pc, #16]	; (8009488 <__NVIC_GetPriorityGrouping+0x18>)
 8009476:	68db      	ldr	r3, [r3, #12]
 8009478:	0a1b      	lsrs	r3, r3, #8
 800947a:	f003 0307 	and.w	r3, r3, #7
}
 800947e:	4618      	mov	r0, r3
 8009480:	46bd      	mov	sp, r7
 8009482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009486:	4770      	bx	lr
 8009488:	e000ed00 	.word	0xe000ed00

0800948c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800948c:	b480      	push	{r7}
 800948e:	b083      	sub	sp, #12
 8009490:	af00      	add	r7, sp, #0
 8009492:	4603      	mov	r3, r0
 8009494:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800949a:	2b00      	cmp	r3, #0
 800949c:	db0b      	blt.n	80094b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800949e:	79fb      	ldrb	r3, [r7, #7]
 80094a0:	f003 021f 	and.w	r2, r3, #31
 80094a4:	4907      	ldr	r1, [pc, #28]	; (80094c4 <__NVIC_EnableIRQ+0x38>)
 80094a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80094aa:	095b      	lsrs	r3, r3, #5
 80094ac:	2001      	movs	r0, #1
 80094ae:	fa00 f202 	lsl.w	r2, r0, r2
 80094b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80094b6:	bf00      	nop
 80094b8:	370c      	adds	r7, #12
 80094ba:	46bd      	mov	sp, r7
 80094bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c0:	4770      	bx	lr
 80094c2:	bf00      	nop
 80094c4:	e000e100 	.word	0xe000e100

080094c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80094c8:	b480      	push	{r7}
 80094ca:	b083      	sub	sp, #12
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	4603      	mov	r3, r0
 80094d0:	6039      	str	r1, [r7, #0]
 80094d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80094d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	db0a      	blt.n	80094f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	b2da      	uxtb	r2, r3
 80094e0:	490c      	ldr	r1, [pc, #48]	; (8009514 <__NVIC_SetPriority+0x4c>)
 80094e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80094e6:	0112      	lsls	r2, r2, #4
 80094e8:	b2d2      	uxtb	r2, r2
 80094ea:	440b      	add	r3, r1
 80094ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80094f0:	e00a      	b.n	8009508 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	b2da      	uxtb	r2, r3
 80094f6:	4908      	ldr	r1, [pc, #32]	; (8009518 <__NVIC_SetPriority+0x50>)
 80094f8:	79fb      	ldrb	r3, [r7, #7]
 80094fa:	f003 030f 	and.w	r3, r3, #15
 80094fe:	3b04      	subs	r3, #4
 8009500:	0112      	lsls	r2, r2, #4
 8009502:	b2d2      	uxtb	r2, r2
 8009504:	440b      	add	r3, r1
 8009506:	761a      	strb	r2, [r3, #24]
}
 8009508:	bf00      	nop
 800950a:	370c      	adds	r7, #12
 800950c:	46bd      	mov	sp, r7
 800950e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009512:	4770      	bx	lr
 8009514:	e000e100 	.word	0xe000e100
 8009518:	e000ed00 	.word	0xe000ed00

0800951c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800951c:	b480      	push	{r7}
 800951e:	b089      	sub	sp, #36	; 0x24
 8009520:	af00      	add	r7, sp, #0
 8009522:	60f8      	str	r0, [r7, #12]
 8009524:	60b9      	str	r1, [r7, #8]
 8009526:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	f003 0307 	and.w	r3, r3, #7
 800952e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009530:	69fb      	ldr	r3, [r7, #28]
 8009532:	f1c3 0307 	rsb	r3, r3, #7
 8009536:	2b04      	cmp	r3, #4
 8009538:	bf28      	it	cs
 800953a:	2304      	movcs	r3, #4
 800953c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800953e:	69fb      	ldr	r3, [r7, #28]
 8009540:	3304      	adds	r3, #4
 8009542:	2b06      	cmp	r3, #6
 8009544:	d902      	bls.n	800954c <NVIC_EncodePriority+0x30>
 8009546:	69fb      	ldr	r3, [r7, #28]
 8009548:	3b03      	subs	r3, #3
 800954a:	e000      	b.n	800954e <NVIC_EncodePriority+0x32>
 800954c:	2300      	movs	r3, #0
 800954e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009550:	f04f 32ff 	mov.w	r2, #4294967295
 8009554:	69bb      	ldr	r3, [r7, #24]
 8009556:	fa02 f303 	lsl.w	r3, r2, r3
 800955a:	43da      	mvns	r2, r3
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	401a      	ands	r2, r3
 8009560:	697b      	ldr	r3, [r7, #20]
 8009562:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009564:	f04f 31ff 	mov.w	r1, #4294967295
 8009568:	697b      	ldr	r3, [r7, #20]
 800956a:	fa01 f303 	lsl.w	r3, r1, r3
 800956e:	43d9      	mvns	r1, r3
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009574:	4313      	orrs	r3, r2
         );
}
 8009576:	4618      	mov	r0, r3
 8009578:	3724      	adds	r7, #36	; 0x24
 800957a:	46bd      	mov	sp, r7
 800957c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009580:	4770      	bx	lr
	...

08009584 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b082      	sub	sp, #8
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	3b01      	subs	r3, #1
 8009590:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009594:	d301      	bcc.n	800959a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009596:	2301      	movs	r3, #1
 8009598:	e00f      	b.n	80095ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800959a:	4a0a      	ldr	r2, [pc, #40]	; (80095c4 <SysTick_Config+0x40>)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	3b01      	subs	r3, #1
 80095a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80095a2:	210f      	movs	r1, #15
 80095a4:	f04f 30ff 	mov.w	r0, #4294967295
 80095a8:	f7ff ff8e 	bl	80094c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80095ac:	4b05      	ldr	r3, [pc, #20]	; (80095c4 <SysTick_Config+0x40>)
 80095ae:	2200      	movs	r2, #0
 80095b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80095b2:	4b04      	ldr	r3, [pc, #16]	; (80095c4 <SysTick_Config+0x40>)
 80095b4:	2207      	movs	r2, #7
 80095b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80095b8:	2300      	movs	r3, #0
}
 80095ba:	4618      	mov	r0, r3
 80095bc:	3708      	adds	r7, #8
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}
 80095c2:	bf00      	nop
 80095c4:	e000e010 	.word	0xe000e010

080095c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b082      	sub	sp, #8
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	f7ff ff29 	bl	8009428 <__NVIC_SetPriorityGrouping>
}
 80095d6:	bf00      	nop
 80095d8:	3708      	adds	r7, #8
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}

080095de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80095de:	b580      	push	{r7, lr}
 80095e0:	b086      	sub	sp, #24
 80095e2:	af00      	add	r7, sp, #0
 80095e4:	4603      	mov	r3, r0
 80095e6:	60b9      	str	r1, [r7, #8]
 80095e8:	607a      	str	r2, [r7, #4]
 80095ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80095ec:	2300      	movs	r3, #0
 80095ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80095f0:	f7ff ff3e 	bl	8009470 <__NVIC_GetPriorityGrouping>
 80095f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80095f6:	687a      	ldr	r2, [r7, #4]
 80095f8:	68b9      	ldr	r1, [r7, #8]
 80095fa:	6978      	ldr	r0, [r7, #20]
 80095fc:	f7ff ff8e 	bl	800951c <NVIC_EncodePriority>
 8009600:	4602      	mov	r2, r0
 8009602:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009606:	4611      	mov	r1, r2
 8009608:	4618      	mov	r0, r3
 800960a:	f7ff ff5d 	bl	80094c8 <__NVIC_SetPriority>
}
 800960e:	bf00      	nop
 8009610:	3718      	adds	r7, #24
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}

08009616 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009616:	b580      	push	{r7, lr}
 8009618:	b082      	sub	sp, #8
 800961a:	af00      	add	r7, sp, #0
 800961c:	4603      	mov	r3, r0
 800961e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009624:	4618      	mov	r0, r3
 8009626:	f7ff ff31 	bl	800948c <__NVIC_EnableIRQ>
}
 800962a:	bf00      	nop
 800962c:	3708      	adds	r7, #8
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}

08009632 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009632:	b580      	push	{r7, lr}
 8009634:	b082      	sub	sp, #8
 8009636:	af00      	add	r7, sp, #0
 8009638:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f7ff ffa2 	bl	8009584 <SysTick_Config>
 8009640:	4603      	mov	r3, r0
}
 8009642:	4618      	mov	r0, r3
 8009644:	3708      	adds	r7, #8
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}

0800964a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800964a:	b580      	push	{r7, lr}
 800964c:	b082      	sub	sp, #8
 800964e:	af00      	add	r7, sp, #0
 8009650:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d101      	bne.n	800965c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8009658:	2301      	movs	r3, #1
 800965a:	e00e      	b.n	800967a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	795b      	ldrb	r3, [r3, #5]
 8009660:	b2db      	uxtb	r3, r3
 8009662:	2b00      	cmp	r3, #0
 8009664:	d105      	bne.n	8009672 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2200      	movs	r2, #0
 800966a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f7ff fc9d 	bl	8008fac <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2201      	movs	r2, #1
 8009676:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8009678:	2300      	movs	r3, #0
}
 800967a:	4618      	mov	r0, r3
 800967c:	3708      	adds	r7, #8
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}
	...

08009684 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009684:	b480      	push	{r7}
 8009686:	b089      	sub	sp, #36	; 0x24
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
 800968c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800968e:	2300      	movs	r3, #0
 8009690:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8009692:	2300      	movs	r3, #0
 8009694:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8009696:	2300      	movs	r3, #0
 8009698:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800969a:	2300      	movs	r3, #0
 800969c:	61fb      	str	r3, [r7, #28]
 800969e:	e16b      	b.n	8009978 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80096a0:	2201      	movs	r2, #1
 80096a2:	69fb      	ldr	r3, [r7, #28]
 80096a4:	fa02 f303 	lsl.w	r3, r2, r3
 80096a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	697a      	ldr	r2, [r7, #20]
 80096b0:	4013      	ands	r3, r2
 80096b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80096b4:	693a      	ldr	r2, [r7, #16]
 80096b6:	697b      	ldr	r3, [r7, #20]
 80096b8:	429a      	cmp	r2, r3
 80096ba:	f040 815a 	bne.w	8009972 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	685b      	ldr	r3, [r3, #4]
 80096c2:	f003 0303 	and.w	r3, r3, #3
 80096c6:	2b01      	cmp	r3, #1
 80096c8:	d005      	beq.n	80096d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	685b      	ldr	r3, [r3, #4]
 80096ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80096d2:	2b02      	cmp	r3, #2
 80096d4:	d130      	bne.n	8009738 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	689b      	ldr	r3, [r3, #8]
 80096da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80096dc:	69fb      	ldr	r3, [r7, #28]
 80096de:	005b      	lsls	r3, r3, #1
 80096e0:	2203      	movs	r2, #3
 80096e2:	fa02 f303 	lsl.w	r3, r2, r3
 80096e6:	43db      	mvns	r3, r3
 80096e8:	69ba      	ldr	r2, [r7, #24]
 80096ea:	4013      	ands	r3, r2
 80096ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	68da      	ldr	r2, [r3, #12]
 80096f2:	69fb      	ldr	r3, [r7, #28]
 80096f4:	005b      	lsls	r3, r3, #1
 80096f6:	fa02 f303 	lsl.w	r3, r2, r3
 80096fa:	69ba      	ldr	r2, [r7, #24]
 80096fc:	4313      	orrs	r3, r2
 80096fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	69ba      	ldr	r2, [r7, #24]
 8009704:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	685b      	ldr	r3, [r3, #4]
 800970a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800970c:	2201      	movs	r2, #1
 800970e:	69fb      	ldr	r3, [r7, #28]
 8009710:	fa02 f303 	lsl.w	r3, r2, r3
 8009714:	43db      	mvns	r3, r3
 8009716:	69ba      	ldr	r2, [r7, #24]
 8009718:	4013      	ands	r3, r2
 800971a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	685b      	ldr	r3, [r3, #4]
 8009720:	091b      	lsrs	r3, r3, #4
 8009722:	f003 0201 	and.w	r2, r3, #1
 8009726:	69fb      	ldr	r3, [r7, #28]
 8009728:	fa02 f303 	lsl.w	r3, r2, r3
 800972c:	69ba      	ldr	r2, [r7, #24]
 800972e:	4313      	orrs	r3, r2
 8009730:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	69ba      	ldr	r2, [r7, #24]
 8009736:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	685b      	ldr	r3, [r3, #4]
 800973c:	f003 0303 	and.w	r3, r3, #3
 8009740:	2b03      	cmp	r3, #3
 8009742:	d017      	beq.n	8009774 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	68db      	ldr	r3, [r3, #12]
 8009748:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800974a:	69fb      	ldr	r3, [r7, #28]
 800974c:	005b      	lsls	r3, r3, #1
 800974e:	2203      	movs	r2, #3
 8009750:	fa02 f303 	lsl.w	r3, r2, r3
 8009754:	43db      	mvns	r3, r3
 8009756:	69ba      	ldr	r2, [r7, #24]
 8009758:	4013      	ands	r3, r2
 800975a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	689a      	ldr	r2, [r3, #8]
 8009760:	69fb      	ldr	r3, [r7, #28]
 8009762:	005b      	lsls	r3, r3, #1
 8009764:	fa02 f303 	lsl.w	r3, r2, r3
 8009768:	69ba      	ldr	r2, [r7, #24]
 800976a:	4313      	orrs	r3, r2
 800976c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	69ba      	ldr	r2, [r7, #24]
 8009772:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	685b      	ldr	r3, [r3, #4]
 8009778:	f003 0303 	and.w	r3, r3, #3
 800977c:	2b02      	cmp	r3, #2
 800977e:	d123      	bne.n	80097c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009780:	69fb      	ldr	r3, [r7, #28]
 8009782:	08da      	lsrs	r2, r3, #3
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	3208      	adds	r2, #8
 8009788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800978c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800978e:	69fb      	ldr	r3, [r7, #28]
 8009790:	f003 0307 	and.w	r3, r3, #7
 8009794:	009b      	lsls	r3, r3, #2
 8009796:	220f      	movs	r2, #15
 8009798:	fa02 f303 	lsl.w	r3, r2, r3
 800979c:	43db      	mvns	r3, r3
 800979e:	69ba      	ldr	r2, [r7, #24]
 80097a0:	4013      	ands	r3, r2
 80097a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	691a      	ldr	r2, [r3, #16]
 80097a8:	69fb      	ldr	r3, [r7, #28]
 80097aa:	f003 0307 	and.w	r3, r3, #7
 80097ae:	009b      	lsls	r3, r3, #2
 80097b0:	fa02 f303 	lsl.w	r3, r2, r3
 80097b4:	69ba      	ldr	r2, [r7, #24]
 80097b6:	4313      	orrs	r3, r2
 80097b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80097ba:	69fb      	ldr	r3, [r7, #28]
 80097bc:	08da      	lsrs	r2, r3, #3
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	3208      	adds	r2, #8
 80097c2:	69b9      	ldr	r1, [r7, #24]
 80097c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80097ce:	69fb      	ldr	r3, [r7, #28]
 80097d0:	005b      	lsls	r3, r3, #1
 80097d2:	2203      	movs	r2, #3
 80097d4:	fa02 f303 	lsl.w	r3, r2, r3
 80097d8:	43db      	mvns	r3, r3
 80097da:	69ba      	ldr	r2, [r7, #24]
 80097dc:	4013      	ands	r3, r2
 80097de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	685b      	ldr	r3, [r3, #4]
 80097e4:	f003 0203 	and.w	r2, r3, #3
 80097e8:	69fb      	ldr	r3, [r7, #28]
 80097ea:	005b      	lsls	r3, r3, #1
 80097ec:	fa02 f303 	lsl.w	r3, r2, r3
 80097f0:	69ba      	ldr	r2, [r7, #24]
 80097f2:	4313      	orrs	r3, r2
 80097f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	69ba      	ldr	r2, [r7, #24]
 80097fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	685b      	ldr	r3, [r3, #4]
 8009800:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009804:	2b00      	cmp	r3, #0
 8009806:	f000 80b4 	beq.w	8009972 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800980a:	2300      	movs	r3, #0
 800980c:	60fb      	str	r3, [r7, #12]
 800980e:	4b60      	ldr	r3, [pc, #384]	; (8009990 <HAL_GPIO_Init+0x30c>)
 8009810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009812:	4a5f      	ldr	r2, [pc, #380]	; (8009990 <HAL_GPIO_Init+0x30c>)
 8009814:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009818:	6453      	str	r3, [r2, #68]	; 0x44
 800981a:	4b5d      	ldr	r3, [pc, #372]	; (8009990 <HAL_GPIO_Init+0x30c>)
 800981c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800981e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009822:	60fb      	str	r3, [r7, #12]
 8009824:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009826:	4a5b      	ldr	r2, [pc, #364]	; (8009994 <HAL_GPIO_Init+0x310>)
 8009828:	69fb      	ldr	r3, [r7, #28]
 800982a:	089b      	lsrs	r3, r3, #2
 800982c:	3302      	adds	r3, #2
 800982e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009832:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009834:	69fb      	ldr	r3, [r7, #28]
 8009836:	f003 0303 	and.w	r3, r3, #3
 800983a:	009b      	lsls	r3, r3, #2
 800983c:	220f      	movs	r2, #15
 800983e:	fa02 f303 	lsl.w	r3, r2, r3
 8009842:	43db      	mvns	r3, r3
 8009844:	69ba      	ldr	r2, [r7, #24]
 8009846:	4013      	ands	r3, r2
 8009848:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	4a52      	ldr	r2, [pc, #328]	; (8009998 <HAL_GPIO_Init+0x314>)
 800984e:	4293      	cmp	r3, r2
 8009850:	d02b      	beq.n	80098aa <HAL_GPIO_Init+0x226>
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	4a51      	ldr	r2, [pc, #324]	; (800999c <HAL_GPIO_Init+0x318>)
 8009856:	4293      	cmp	r3, r2
 8009858:	d025      	beq.n	80098a6 <HAL_GPIO_Init+0x222>
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	4a50      	ldr	r2, [pc, #320]	; (80099a0 <HAL_GPIO_Init+0x31c>)
 800985e:	4293      	cmp	r3, r2
 8009860:	d01f      	beq.n	80098a2 <HAL_GPIO_Init+0x21e>
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	4a4f      	ldr	r2, [pc, #316]	; (80099a4 <HAL_GPIO_Init+0x320>)
 8009866:	4293      	cmp	r3, r2
 8009868:	d019      	beq.n	800989e <HAL_GPIO_Init+0x21a>
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	4a4e      	ldr	r2, [pc, #312]	; (80099a8 <HAL_GPIO_Init+0x324>)
 800986e:	4293      	cmp	r3, r2
 8009870:	d013      	beq.n	800989a <HAL_GPIO_Init+0x216>
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	4a4d      	ldr	r2, [pc, #308]	; (80099ac <HAL_GPIO_Init+0x328>)
 8009876:	4293      	cmp	r3, r2
 8009878:	d00d      	beq.n	8009896 <HAL_GPIO_Init+0x212>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	4a4c      	ldr	r2, [pc, #304]	; (80099b0 <HAL_GPIO_Init+0x32c>)
 800987e:	4293      	cmp	r3, r2
 8009880:	d007      	beq.n	8009892 <HAL_GPIO_Init+0x20e>
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	4a4b      	ldr	r2, [pc, #300]	; (80099b4 <HAL_GPIO_Init+0x330>)
 8009886:	4293      	cmp	r3, r2
 8009888:	d101      	bne.n	800988e <HAL_GPIO_Init+0x20a>
 800988a:	2307      	movs	r3, #7
 800988c:	e00e      	b.n	80098ac <HAL_GPIO_Init+0x228>
 800988e:	2308      	movs	r3, #8
 8009890:	e00c      	b.n	80098ac <HAL_GPIO_Init+0x228>
 8009892:	2306      	movs	r3, #6
 8009894:	e00a      	b.n	80098ac <HAL_GPIO_Init+0x228>
 8009896:	2305      	movs	r3, #5
 8009898:	e008      	b.n	80098ac <HAL_GPIO_Init+0x228>
 800989a:	2304      	movs	r3, #4
 800989c:	e006      	b.n	80098ac <HAL_GPIO_Init+0x228>
 800989e:	2303      	movs	r3, #3
 80098a0:	e004      	b.n	80098ac <HAL_GPIO_Init+0x228>
 80098a2:	2302      	movs	r3, #2
 80098a4:	e002      	b.n	80098ac <HAL_GPIO_Init+0x228>
 80098a6:	2301      	movs	r3, #1
 80098a8:	e000      	b.n	80098ac <HAL_GPIO_Init+0x228>
 80098aa:	2300      	movs	r3, #0
 80098ac:	69fa      	ldr	r2, [r7, #28]
 80098ae:	f002 0203 	and.w	r2, r2, #3
 80098b2:	0092      	lsls	r2, r2, #2
 80098b4:	4093      	lsls	r3, r2
 80098b6:	69ba      	ldr	r2, [r7, #24]
 80098b8:	4313      	orrs	r3, r2
 80098ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80098bc:	4935      	ldr	r1, [pc, #212]	; (8009994 <HAL_GPIO_Init+0x310>)
 80098be:	69fb      	ldr	r3, [r7, #28]
 80098c0:	089b      	lsrs	r3, r3, #2
 80098c2:	3302      	adds	r3, #2
 80098c4:	69ba      	ldr	r2, [r7, #24]
 80098c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80098ca:	4b3b      	ldr	r3, [pc, #236]	; (80099b8 <HAL_GPIO_Init+0x334>)
 80098cc:	689b      	ldr	r3, [r3, #8]
 80098ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80098d0:	693b      	ldr	r3, [r7, #16]
 80098d2:	43db      	mvns	r3, r3
 80098d4:	69ba      	ldr	r2, [r7, #24]
 80098d6:	4013      	ands	r3, r2
 80098d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	685b      	ldr	r3, [r3, #4]
 80098de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d003      	beq.n	80098ee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80098e6:	69ba      	ldr	r2, [r7, #24]
 80098e8:	693b      	ldr	r3, [r7, #16]
 80098ea:	4313      	orrs	r3, r2
 80098ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80098ee:	4a32      	ldr	r2, [pc, #200]	; (80099b8 <HAL_GPIO_Init+0x334>)
 80098f0:	69bb      	ldr	r3, [r7, #24]
 80098f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80098f4:	4b30      	ldr	r3, [pc, #192]	; (80099b8 <HAL_GPIO_Init+0x334>)
 80098f6:	68db      	ldr	r3, [r3, #12]
 80098f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	43db      	mvns	r3, r3
 80098fe:	69ba      	ldr	r2, [r7, #24]
 8009900:	4013      	ands	r3, r2
 8009902:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	685b      	ldr	r3, [r3, #4]
 8009908:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800990c:	2b00      	cmp	r3, #0
 800990e:	d003      	beq.n	8009918 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8009910:	69ba      	ldr	r2, [r7, #24]
 8009912:	693b      	ldr	r3, [r7, #16]
 8009914:	4313      	orrs	r3, r2
 8009916:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009918:	4a27      	ldr	r2, [pc, #156]	; (80099b8 <HAL_GPIO_Init+0x334>)
 800991a:	69bb      	ldr	r3, [r7, #24]
 800991c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800991e:	4b26      	ldr	r3, [pc, #152]	; (80099b8 <HAL_GPIO_Init+0x334>)
 8009920:	685b      	ldr	r3, [r3, #4]
 8009922:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009924:	693b      	ldr	r3, [r7, #16]
 8009926:	43db      	mvns	r3, r3
 8009928:	69ba      	ldr	r2, [r7, #24]
 800992a:	4013      	ands	r3, r2
 800992c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	685b      	ldr	r3, [r3, #4]
 8009932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009936:	2b00      	cmp	r3, #0
 8009938:	d003      	beq.n	8009942 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800993a:	69ba      	ldr	r2, [r7, #24]
 800993c:	693b      	ldr	r3, [r7, #16]
 800993e:	4313      	orrs	r3, r2
 8009940:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009942:	4a1d      	ldr	r2, [pc, #116]	; (80099b8 <HAL_GPIO_Init+0x334>)
 8009944:	69bb      	ldr	r3, [r7, #24]
 8009946:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009948:	4b1b      	ldr	r3, [pc, #108]	; (80099b8 <HAL_GPIO_Init+0x334>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800994e:	693b      	ldr	r3, [r7, #16]
 8009950:	43db      	mvns	r3, r3
 8009952:	69ba      	ldr	r2, [r7, #24]
 8009954:	4013      	ands	r3, r2
 8009956:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	685b      	ldr	r3, [r3, #4]
 800995c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009960:	2b00      	cmp	r3, #0
 8009962:	d003      	beq.n	800996c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8009964:	69ba      	ldr	r2, [r7, #24]
 8009966:	693b      	ldr	r3, [r7, #16]
 8009968:	4313      	orrs	r3, r2
 800996a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800996c:	4a12      	ldr	r2, [pc, #72]	; (80099b8 <HAL_GPIO_Init+0x334>)
 800996e:	69bb      	ldr	r3, [r7, #24]
 8009970:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009972:	69fb      	ldr	r3, [r7, #28]
 8009974:	3301      	adds	r3, #1
 8009976:	61fb      	str	r3, [r7, #28]
 8009978:	69fb      	ldr	r3, [r7, #28]
 800997a:	2b0f      	cmp	r3, #15
 800997c:	f67f ae90 	bls.w	80096a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009980:	bf00      	nop
 8009982:	bf00      	nop
 8009984:	3724      	adds	r7, #36	; 0x24
 8009986:	46bd      	mov	sp, r7
 8009988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998c:	4770      	bx	lr
 800998e:	bf00      	nop
 8009990:	40023800 	.word	0x40023800
 8009994:	40013800 	.word	0x40013800
 8009998:	40020000 	.word	0x40020000
 800999c:	40020400 	.word	0x40020400
 80099a0:	40020800 	.word	0x40020800
 80099a4:	40020c00 	.word	0x40020c00
 80099a8:	40021000 	.word	0x40021000
 80099ac:	40021400 	.word	0x40021400
 80099b0:	40021800 	.word	0x40021800
 80099b4:	40021c00 	.word	0x40021c00
 80099b8:	40013c00 	.word	0x40013c00

080099bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80099bc:	b480      	push	{r7}
 80099be:	b083      	sub	sp, #12
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
 80099c4:	460b      	mov	r3, r1
 80099c6:	807b      	strh	r3, [r7, #2]
 80099c8:	4613      	mov	r3, r2
 80099ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80099cc:	787b      	ldrb	r3, [r7, #1]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d003      	beq.n	80099da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80099d2:	887a      	ldrh	r2, [r7, #2]
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80099d8:	e003      	b.n	80099e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80099da:	887b      	ldrh	r3, [r7, #2]
 80099dc:	041a      	lsls	r2, r3, #16
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	619a      	str	r2, [r3, #24]
}
 80099e2:	bf00      	nop
 80099e4:	370c      	adds	r7, #12
 80099e6:	46bd      	mov	sp, r7
 80099e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ec:	4770      	bx	lr

080099ee <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80099ee:	b480      	push	{r7}
 80099f0:	b085      	sub	sp, #20
 80099f2:	af00      	add	r7, sp, #0
 80099f4:	6078      	str	r0, [r7, #4]
 80099f6:	460b      	mov	r3, r1
 80099f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	695b      	ldr	r3, [r3, #20]
 80099fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009a00:	887a      	ldrh	r2, [r7, #2]
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	4013      	ands	r3, r2
 8009a06:	041a      	lsls	r2, r3, #16
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	43d9      	mvns	r1, r3
 8009a0c:	887b      	ldrh	r3, [r7, #2]
 8009a0e:	400b      	ands	r3, r1
 8009a10:	431a      	orrs	r2, r3
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	619a      	str	r2, [r3, #24]
}
 8009a16:	bf00      	nop
 8009a18:	3714      	adds	r7, #20
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a20:	4770      	bx	lr
	...

08009a24 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b082      	sub	sp, #8
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8009a2e:	4b08      	ldr	r3, [pc, #32]	; (8009a50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009a30:	695a      	ldr	r2, [r3, #20]
 8009a32:	88fb      	ldrh	r3, [r7, #6]
 8009a34:	4013      	ands	r3, r2
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d006      	beq.n	8009a48 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009a3a:	4a05      	ldr	r2, [pc, #20]	; (8009a50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009a3c:	88fb      	ldrh	r3, [r7, #6]
 8009a3e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009a40:	88fb      	ldrh	r3, [r7, #6]
 8009a42:	4618      	mov	r0, r3
 8009a44:	f7fc fdc0 	bl	80065c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8009a48:	bf00      	nop
 8009a4a:	3708      	adds	r7, #8
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	bd80      	pop	{r7, pc}
 8009a50:	40013c00 	.word	0x40013c00

08009a54 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009a54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a56:	b08f      	sub	sp, #60	; 0x3c
 8009a58:	af0a      	add	r7, sp, #40	; 0x28
 8009a5a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d101      	bne.n	8009a66 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009a62:	2301      	movs	r3, #1
 8009a64:	e10f      	b.n	8009c86 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8009a72:	b2db      	uxtb	r3, r3
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d106      	bne.n	8009a86 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	f016 fc6b 	bl	802035c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2203      	movs	r2, #3
 8009a8a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d102      	bne.n	8009aa0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	f002 fd80 	bl	800c5aa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	603b      	str	r3, [r7, #0]
 8009ab0:	687e      	ldr	r6, [r7, #4]
 8009ab2:	466d      	mov	r5, sp
 8009ab4:	f106 0410 	add.w	r4, r6, #16
 8009ab8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009aba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009abc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009abe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009ac0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009ac4:	e885 0003 	stmia.w	r5, {r0, r1}
 8009ac8:	1d33      	adds	r3, r6, #4
 8009aca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009acc:	6838      	ldr	r0, [r7, #0]
 8009ace:	f002 fc57 	bl	800c380 <USB_CoreInit>
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d005      	beq.n	8009ae4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2202      	movs	r2, #2
 8009adc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	e0d0      	b.n	8009c86 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	2100      	movs	r1, #0
 8009aea:	4618      	mov	r0, r3
 8009aec:	f002 fd6e 	bl	800c5cc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009af0:	2300      	movs	r3, #0
 8009af2:	73fb      	strb	r3, [r7, #15]
 8009af4:	e04a      	b.n	8009b8c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009af6:	7bfa      	ldrb	r2, [r7, #15]
 8009af8:	6879      	ldr	r1, [r7, #4]
 8009afa:	4613      	mov	r3, r2
 8009afc:	00db      	lsls	r3, r3, #3
 8009afe:	4413      	add	r3, r2
 8009b00:	009b      	lsls	r3, r3, #2
 8009b02:	440b      	add	r3, r1
 8009b04:	333d      	adds	r3, #61	; 0x3d
 8009b06:	2201      	movs	r2, #1
 8009b08:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8009b0a:	7bfa      	ldrb	r2, [r7, #15]
 8009b0c:	6879      	ldr	r1, [r7, #4]
 8009b0e:	4613      	mov	r3, r2
 8009b10:	00db      	lsls	r3, r3, #3
 8009b12:	4413      	add	r3, r2
 8009b14:	009b      	lsls	r3, r3, #2
 8009b16:	440b      	add	r3, r1
 8009b18:	333c      	adds	r3, #60	; 0x3c
 8009b1a:	7bfa      	ldrb	r2, [r7, #15]
 8009b1c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8009b1e:	7bfa      	ldrb	r2, [r7, #15]
 8009b20:	7bfb      	ldrb	r3, [r7, #15]
 8009b22:	b298      	uxth	r0, r3
 8009b24:	6879      	ldr	r1, [r7, #4]
 8009b26:	4613      	mov	r3, r2
 8009b28:	00db      	lsls	r3, r3, #3
 8009b2a:	4413      	add	r3, r2
 8009b2c:	009b      	lsls	r3, r3, #2
 8009b2e:	440b      	add	r3, r1
 8009b30:	3344      	adds	r3, #68	; 0x44
 8009b32:	4602      	mov	r2, r0
 8009b34:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009b36:	7bfa      	ldrb	r2, [r7, #15]
 8009b38:	6879      	ldr	r1, [r7, #4]
 8009b3a:	4613      	mov	r3, r2
 8009b3c:	00db      	lsls	r3, r3, #3
 8009b3e:	4413      	add	r3, r2
 8009b40:	009b      	lsls	r3, r3, #2
 8009b42:	440b      	add	r3, r1
 8009b44:	3340      	adds	r3, #64	; 0x40
 8009b46:	2200      	movs	r2, #0
 8009b48:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009b4a:	7bfa      	ldrb	r2, [r7, #15]
 8009b4c:	6879      	ldr	r1, [r7, #4]
 8009b4e:	4613      	mov	r3, r2
 8009b50:	00db      	lsls	r3, r3, #3
 8009b52:	4413      	add	r3, r2
 8009b54:	009b      	lsls	r3, r3, #2
 8009b56:	440b      	add	r3, r1
 8009b58:	3348      	adds	r3, #72	; 0x48
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009b5e:	7bfa      	ldrb	r2, [r7, #15]
 8009b60:	6879      	ldr	r1, [r7, #4]
 8009b62:	4613      	mov	r3, r2
 8009b64:	00db      	lsls	r3, r3, #3
 8009b66:	4413      	add	r3, r2
 8009b68:	009b      	lsls	r3, r3, #2
 8009b6a:	440b      	add	r3, r1
 8009b6c:	334c      	adds	r3, #76	; 0x4c
 8009b6e:	2200      	movs	r2, #0
 8009b70:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009b72:	7bfa      	ldrb	r2, [r7, #15]
 8009b74:	6879      	ldr	r1, [r7, #4]
 8009b76:	4613      	mov	r3, r2
 8009b78:	00db      	lsls	r3, r3, #3
 8009b7a:	4413      	add	r3, r2
 8009b7c:	009b      	lsls	r3, r3, #2
 8009b7e:	440b      	add	r3, r1
 8009b80:	3354      	adds	r3, #84	; 0x54
 8009b82:	2200      	movs	r2, #0
 8009b84:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009b86:	7bfb      	ldrb	r3, [r7, #15]
 8009b88:	3301      	adds	r3, #1
 8009b8a:	73fb      	strb	r3, [r7, #15]
 8009b8c:	7bfa      	ldrb	r2, [r7, #15]
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	685b      	ldr	r3, [r3, #4]
 8009b92:	429a      	cmp	r2, r3
 8009b94:	d3af      	bcc.n	8009af6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009b96:	2300      	movs	r3, #0
 8009b98:	73fb      	strb	r3, [r7, #15]
 8009b9a:	e044      	b.n	8009c26 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8009b9c:	7bfa      	ldrb	r2, [r7, #15]
 8009b9e:	6879      	ldr	r1, [r7, #4]
 8009ba0:	4613      	mov	r3, r2
 8009ba2:	00db      	lsls	r3, r3, #3
 8009ba4:	4413      	add	r3, r2
 8009ba6:	009b      	lsls	r3, r3, #2
 8009ba8:	440b      	add	r3, r1
 8009baa:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8009bae:	2200      	movs	r2, #0
 8009bb0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8009bb2:	7bfa      	ldrb	r2, [r7, #15]
 8009bb4:	6879      	ldr	r1, [r7, #4]
 8009bb6:	4613      	mov	r3, r2
 8009bb8:	00db      	lsls	r3, r3, #3
 8009bba:	4413      	add	r3, r2
 8009bbc:	009b      	lsls	r3, r3, #2
 8009bbe:	440b      	add	r3, r1
 8009bc0:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8009bc4:	7bfa      	ldrb	r2, [r7, #15]
 8009bc6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009bc8:	7bfa      	ldrb	r2, [r7, #15]
 8009bca:	6879      	ldr	r1, [r7, #4]
 8009bcc:	4613      	mov	r3, r2
 8009bce:	00db      	lsls	r3, r3, #3
 8009bd0:	4413      	add	r3, r2
 8009bd2:	009b      	lsls	r3, r3, #2
 8009bd4:	440b      	add	r3, r1
 8009bd6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8009bda:	2200      	movs	r2, #0
 8009bdc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8009bde:	7bfa      	ldrb	r2, [r7, #15]
 8009be0:	6879      	ldr	r1, [r7, #4]
 8009be2:	4613      	mov	r3, r2
 8009be4:	00db      	lsls	r3, r3, #3
 8009be6:	4413      	add	r3, r2
 8009be8:	009b      	lsls	r3, r3, #2
 8009bea:	440b      	add	r3, r1
 8009bec:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009bf4:	7bfa      	ldrb	r2, [r7, #15]
 8009bf6:	6879      	ldr	r1, [r7, #4]
 8009bf8:	4613      	mov	r3, r2
 8009bfa:	00db      	lsls	r3, r3, #3
 8009bfc:	4413      	add	r3, r2
 8009bfe:	009b      	lsls	r3, r3, #2
 8009c00:	440b      	add	r3, r1
 8009c02:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009c06:	2200      	movs	r2, #0
 8009c08:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009c0a:	7bfa      	ldrb	r2, [r7, #15]
 8009c0c:	6879      	ldr	r1, [r7, #4]
 8009c0e:	4613      	mov	r3, r2
 8009c10:	00db      	lsls	r3, r3, #3
 8009c12:	4413      	add	r3, r2
 8009c14:	009b      	lsls	r3, r3, #2
 8009c16:	440b      	add	r3, r1
 8009c18:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009c20:	7bfb      	ldrb	r3, [r7, #15]
 8009c22:	3301      	adds	r3, #1
 8009c24:	73fb      	strb	r3, [r7, #15]
 8009c26:	7bfa      	ldrb	r2, [r7, #15]
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	685b      	ldr	r3, [r3, #4]
 8009c2c:	429a      	cmp	r2, r3
 8009c2e:	d3b5      	bcc.n	8009b9c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	603b      	str	r3, [r7, #0]
 8009c36:	687e      	ldr	r6, [r7, #4]
 8009c38:	466d      	mov	r5, sp
 8009c3a:	f106 0410 	add.w	r4, r6, #16
 8009c3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009c40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009c42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009c44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009c46:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009c4a:	e885 0003 	stmia.w	r5, {r0, r1}
 8009c4e:	1d33      	adds	r3, r6, #4
 8009c50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009c52:	6838      	ldr	r0, [r7, #0]
 8009c54:	f002 fd06 	bl	800c664 <USB_DevInit>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d005      	beq.n	8009c6a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2202      	movs	r2, #2
 8009c62:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8009c66:	2301      	movs	r3, #1
 8009c68:	e00d      	b.n	8009c86 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2201      	movs	r2, #1
 8009c76:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f003 fe55 	bl	800d92e <USB_DevDisconnect>

  return HAL_OK;
 8009c84:	2300      	movs	r3, #0
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	3714      	adds	r7, #20
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009c8e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8009c8e:	b580      	push	{r7, lr}
 8009c90:	b084      	sub	sp, #16
 8009c92:	af00      	add	r7, sp, #0
 8009c94:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009ca2:	2b01      	cmp	r3, #1
 8009ca4:	d101      	bne.n	8009caa <HAL_PCD_Start+0x1c>
 8009ca6:	2302      	movs	r3, #2
 8009ca8:	e020      	b.n	8009cec <HAL_PCD_Start+0x5e>
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2201      	movs	r2, #1
 8009cae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cb6:	2b01      	cmp	r3, #1
 8009cb8:	d109      	bne.n	8009cce <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8009cbe:	2b01      	cmp	r3, #1
 8009cc0:	d005      	beq.n	8009cce <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cc6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	f002 fc58 	bl	800c588 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	4618      	mov	r0, r3
 8009cde:	f003 fe05 	bl	800d8ec <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009cea:	2300      	movs	r3, #0
}
 8009cec:	4618      	mov	r0, r3
 8009cee:	3710      	adds	r7, #16
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	bd80      	pop	{r7, pc}

08009cf4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8009cf4:	b590      	push	{r4, r7, lr}
 8009cf6:	b08d      	sub	sp, #52	; 0x34
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d02:	6a3b      	ldr	r3, [r7, #32]
 8009d04:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f003 fec3 	bl	800da96 <USB_GetMode>
 8009d10:	4603      	mov	r3, r0
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	f040 848a 	bne.w	800a62c <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	f003 fe27 	bl	800d970 <USB_ReadInterrupts>
 8009d22:	4603      	mov	r3, r0
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	f000 8480 	beq.w	800a62a <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8009d2a:	69fb      	ldr	r3, [r7, #28]
 8009d2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d30:	689b      	ldr	r3, [r3, #8]
 8009d32:	0a1b      	lsrs	r3, r3, #8
 8009d34:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	4618      	mov	r0, r3
 8009d44:	f003 fe14 	bl	800d970 <USB_ReadInterrupts>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	f003 0302 	and.w	r3, r3, #2
 8009d4e:	2b02      	cmp	r3, #2
 8009d50:	d107      	bne.n	8009d62 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	695a      	ldr	r2, [r3, #20]
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	f002 0202 	and.w	r2, r2, #2
 8009d60:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	4618      	mov	r0, r3
 8009d68:	f003 fe02 	bl	800d970 <USB_ReadInterrupts>
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	f003 0310 	and.w	r3, r3, #16
 8009d72:	2b10      	cmp	r3, #16
 8009d74:	d161      	bne.n	8009e3a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	699a      	ldr	r2, [r3, #24]
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	f022 0210 	bic.w	r2, r2, #16
 8009d84:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8009d86:	6a3b      	ldr	r3, [r7, #32]
 8009d88:	6a1b      	ldr	r3, [r3, #32]
 8009d8a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8009d8c:	69bb      	ldr	r3, [r7, #24]
 8009d8e:	f003 020f 	and.w	r2, r3, #15
 8009d92:	4613      	mov	r3, r2
 8009d94:	00db      	lsls	r3, r3, #3
 8009d96:	4413      	add	r3, r2
 8009d98:	009b      	lsls	r3, r3, #2
 8009d9a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009d9e:	687a      	ldr	r2, [r7, #4]
 8009da0:	4413      	add	r3, r2
 8009da2:	3304      	adds	r3, #4
 8009da4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8009da6:	69bb      	ldr	r3, [r7, #24]
 8009da8:	0c5b      	lsrs	r3, r3, #17
 8009daa:	f003 030f 	and.w	r3, r3, #15
 8009dae:	2b02      	cmp	r3, #2
 8009db0:	d124      	bne.n	8009dfc <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8009db2:	69ba      	ldr	r2, [r7, #24]
 8009db4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8009db8:	4013      	ands	r3, r2
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d035      	beq.n	8009e2a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009dbe:	697b      	ldr	r3, [r7, #20]
 8009dc0:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8009dc2:	69bb      	ldr	r3, [r7, #24]
 8009dc4:	091b      	lsrs	r3, r3, #4
 8009dc6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009dc8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009dcc:	b29b      	uxth	r3, r3
 8009dce:	461a      	mov	r2, r3
 8009dd0:	6a38      	ldr	r0, [r7, #32]
 8009dd2:	f003 fc39 	bl	800d648 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009dd6:	697b      	ldr	r3, [r7, #20]
 8009dd8:	691a      	ldr	r2, [r3, #16]
 8009dda:	69bb      	ldr	r3, [r7, #24]
 8009ddc:	091b      	lsrs	r3, r3, #4
 8009dde:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009de2:	441a      	add	r2, r3
 8009de4:	697b      	ldr	r3, [r7, #20]
 8009de6:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009de8:	697b      	ldr	r3, [r7, #20]
 8009dea:	6a1a      	ldr	r2, [r3, #32]
 8009dec:	69bb      	ldr	r3, [r7, #24]
 8009dee:	091b      	lsrs	r3, r3, #4
 8009df0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009df4:	441a      	add	r2, r3
 8009df6:	697b      	ldr	r3, [r7, #20]
 8009df8:	621a      	str	r2, [r3, #32]
 8009dfa:	e016      	b.n	8009e2a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8009dfc:	69bb      	ldr	r3, [r7, #24]
 8009dfe:	0c5b      	lsrs	r3, r3, #17
 8009e00:	f003 030f 	and.w	r3, r3, #15
 8009e04:	2b06      	cmp	r3, #6
 8009e06:	d110      	bne.n	8009e2a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009e0e:	2208      	movs	r2, #8
 8009e10:	4619      	mov	r1, r3
 8009e12:	6a38      	ldr	r0, [r7, #32]
 8009e14:	f003 fc18 	bl	800d648 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009e18:	697b      	ldr	r3, [r7, #20]
 8009e1a:	6a1a      	ldr	r2, [r3, #32]
 8009e1c:	69bb      	ldr	r3, [r7, #24]
 8009e1e:	091b      	lsrs	r3, r3, #4
 8009e20:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009e24:	441a      	add	r2, r3
 8009e26:	697b      	ldr	r3, [r7, #20]
 8009e28:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	699a      	ldr	r2, [r3, #24]
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	f042 0210 	orr.w	r2, r2, #16
 8009e38:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f003 fd96 	bl	800d970 <USB_ReadInterrupts>
 8009e44:	4603      	mov	r3, r0
 8009e46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009e4a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009e4e:	f040 80a7 	bne.w	8009fa0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8009e52:	2300      	movs	r3, #0
 8009e54:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f003 fd9b 	bl	800d996 <USB_ReadDevAllOutEpInterrupt>
 8009e60:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8009e62:	e099      	b.n	8009f98 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8009e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e66:	f003 0301 	and.w	r3, r3, #1
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	f000 808e 	beq.w	8009f8c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e76:	b2d2      	uxtb	r2, r2
 8009e78:	4611      	mov	r1, r2
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f003 fdbf 	bl	800d9fe <USB_ReadDevOutEPInterrupt>
 8009e80:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8009e82:	693b      	ldr	r3, [r7, #16]
 8009e84:	f003 0301 	and.w	r3, r3, #1
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d00c      	beq.n	8009ea6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8009e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e8e:	015a      	lsls	r2, r3, #5
 8009e90:	69fb      	ldr	r3, [r7, #28]
 8009e92:	4413      	add	r3, r2
 8009e94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e98:	461a      	mov	r2, r3
 8009e9a:	2301      	movs	r3, #1
 8009e9c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8009e9e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	f000 fec3 	bl	800ac2c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8009ea6:	693b      	ldr	r3, [r7, #16]
 8009ea8:	f003 0308 	and.w	r3, r3, #8
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d00c      	beq.n	8009eca <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8009eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb2:	015a      	lsls	r2, r3, #5
 8009eb4:	69fb      	ldr	r3, [r7, #28]
 8009eb6:	4413      	add	r3, r2
 8009eb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ebc:	461a      	mov	r2, r3
 8009ebe:	2308      	movs	r3, #8
 8009ec0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8009ec2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f000 ff99 	bl	800adfc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8009eca:	693b      	ldr	r3, [r7, #16]
 8009ecc:	f003 0310 	and.w	r3, r3, #16
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d008      	beq.n	8009ee6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8009ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed6:	015a      	lsls	r2, r3, #5
 8009ed8:	69fb      	ldr	r3, [r7, #28]
 8009eda:	4413      	add	r3, r2
 8009edc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ee0:	461a      	mov	r2, r3
 8009ee2:	2310      	movs	r3, #16
 8009ee4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8009ee6:	693b      	ldr	r3, [r7, #16]
 8009ee8:	f003 0302 	and.w	r3, r3, #2
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d030      	beq.n	8009f52 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8009ef0:	6a3b      	ldr	r3, [r7, #32]
 8009ef2:	695b      	ldr	r3, [r3, #20]
 8009ef4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ef8:	2b80      	cmp	r3, #128	; 0x80
 8009efa:	d109      	bne.n	8009f10 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8009efc:	69fb      	ldr	r3, [r7, #28]
 8009efe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f02:	685b      	ldr	r3, [r3, #4]
 8009f04:	69fa      	ldr	r2, [r7, #28]
 8009f06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009f0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009f0e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8009f10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f12:	4613      	mov	r3, r2
 8009f14:	00db      	lsls	r3, r3, #3
 8009f16:	4413      	add	r3, r2
 8009f18:	009b      	lsls	r3, r3, #2
 8009f1a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009f1e:	687a      	ldr	r2, [r7, #4]
 8009f20:	4413      	add	r3, r2
 8009f22:	3304      	adds	r3, #4
 8009f24:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8009f26:	697b      	ldr	r3, [r7, #20]
 8009f28:	78db      	ldrb	r3, [r3, #3]
 8009f2a:	2b01      	cmp	r3, #1
 8009f2c:	d108      	bne.n	8009f40 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8009f2e:	697b      	ldr	r3, [r7, #20]
 8009f30:	2200      	movs	r2, #0
 8009f32:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8009f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f36:	b2db      	uxtb	r3, r3
 8009f38:	4619      	mov	r1, r3
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f016 fb14 	bl	8020568 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8009f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f42:	015a      	lsls	r2, r3, #5
 8009f44:	69fb      	ldr	r3, [r7, #28]
 8009f46:	4413      	add	r3, r2
 8009f48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f4c:	461a      	mov	r2, r3
 8009f4e:	2302      	movs	r3, #2
 8009f50:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009f52:	693b      	ldr	r3, [r7, #16]
 8009f54:	f003 0320 	and.w	r3, r3, #32
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d008      	beq.n	8009f6e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f5e:	015a      	lsls	r2, r3, #5
 8009f60:	69fb      	ldr	r3, [r7, #28]
 8009f62:	4413      	add	r3, r2
 8009f64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f68:	461a      	mov	r2, r3
 8009f6a:	2320      	movs	r3, #32
 8009f6c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8009f6e:	693b      	ldr	r3, [r7, #16]
 8009f70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d009      	beq.n	8009f8c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8009f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f7a:	015a      	lsls	r2, r3, #5
 8009f7c:	69fb      	ldr	r3, [r7, #28]
 8009f7e:	4413      	add	r3, r2
 8009f80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f84:	461a      	mov	r2, r3
 8009f86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009f8a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8009f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f8e:	3301      	adds	r3, #1
 8009f90:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f94:	085b      	lsrs	r3, r3, #1
 8009f96:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	f47f af62 	bne.w	8009e64 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	f003 fce3 	bl	800d970 <USB_ReadInterrupts>
 8009faa:	4603      	mov	r3, r0
 8009fac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009fb0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009fb4:	f040 80db 	bne.w	800a16e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	f003 fd04 	bl	800d9ca <USB_ReadDevAllInEpInterrupt>
 8009fc2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8009fc8:	e0cd      	b.n	800a166 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8009fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fcc:	f003 0301 	and.w	r3, r3, #1
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	f000 80c2 	beq.w	800a15a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fdc:	b2d2      	uxtb	r2, r2
 8009fde:	4611      	mov	r1, r2
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	f003 fd2a 	bl	800da3a <USB_ReadDevInEPInterrupt>
 8009fe6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8009fe8:	693b      	ldr	r3, [r7, #16]
 8009fea:	f003 0301 	and.w	r3, r3, #1
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d057      	beq.n	800a0a2 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff4:	f003 030f 	and.w	r3, r3, #15
 8009ff8:	2201      	movs	r2, #1
 8009ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8009ffe:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a000:	69fb      	ldr	r3, [r7, #28]
 800a002:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a006:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	43db      	mvns	r3, r3
 800a00c:	69f9      	ldr	r1, [r7, #28]
 800a00e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a012:	4013      	ands	r3, r2
 800a014:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800a016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a018:	015a      	lsls	r2, r3, #5
 800a01a:	69fb      	ldr	r3, [r7, #28]
 800a01c:	4413      	add	r3, r2
 800a01e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a022:	461a      	mov	r2, r3
 800a024:	2301      	movs	r3, #1
 800a026:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	691b      	ldr	r3, [r3, #16]
 800a02c:	2b01      	cmp	r3, #1
 800a02e:	d132      	bne.n	800a096 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800a030:	6879      	ldr	r1, [r7, #4]
 800a032:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a034:	4613      	mov	r3, r2
 800a036:	00db      	lsls	r3, r3, #3
 800a038:	4413      	add	r3, r2
 800a03a:	009b      	lsls	r3, r3, #2
 800a03c:	440b      	add	r3, r1
 800a03e:	334c      	adds	r3, #76	; 0x4c
 800a040:	6819      	ldr	r1, [r3, #0]
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a046:	4613      	mov	r3, r2
 800a048:	00db      	lsls	r3, r3, #3
 800a04a:	4413      	add	r3, r2
 800a04c:	009b      	lsls	r3, r3, #2
 800a04e:	4403      	add	r3, r0
 800a050:	3348      	adds	r3, #72	; 0x48
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	4419      	add	r1, r3
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a05a:	4613      	mov	r3, r2
 800a05c:	00db      	lsls	r3, r3, #3
 800a05e:	4413      	add	r3, r2
 800a060:	009b      	lsls	r3, r3, #2
 800a062:	4403      	add	r3, r0
 800a064:	334c      	adds	r3, #76	; 0x4c
 800a066:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800a068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d113      	bne.n	800a096 <HAL_PCD_IRQHandler+0x3a2>
 800a06e:	6879      	ldr	r1, [r7, #4]
 800a070:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a072:	4613      	mov	r3, r2
 800a074:	00db      	lsls	r3, r3, #3
 800a076:	4413      	add	r3, r2
 800a078:	009b      	lsls	r3, r3, #2
 800a07a:	440b      	add	r3, r1
 800a07c:	3354      	adds	r3, #84	; 0x54
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d108      	bne.n	800a096 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	6818      	ldr	r0, [r3, #0]
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a08e:	461a      	mov	r2, r3
 800a090:	2101      	movs	r1, #1
 800a092:	f003 fd31 	bl	800daf8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800a096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a098:	b2db      	uxtb	r3, r3
 800a09a:	4619      	mov	r1, r3
 800a09c:	6878      	ldr	r0, [r7, #4]
 800a09e:	f016 f9de 	bl	802045e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800a0a2:	693b      	ldr	r3, [r7, #16]
 800a0a4:	f003 0308 	and.w	r3, r3, #8
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d008      	beq.n	800a0be <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800a0ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ae:	015a      	lsls	r2, r3, #5
 800a0b0:	69fb      	ldr	r3, [r7, #28]
 800a0b2:	4413      	add	r3, r2
 800a0b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0b8:	461a      	mov	r2, r3
 800a0ba:	2308      	movs	r3, #8
 800a0bc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800a0be:	693b      	ldr	r3, [r7, #16]
 800a0c0:	f003 0310 	and.w	r3, r3, #16
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d008      	beq.n	800a0da <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800a0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ca:	015a      	lsls	r2, r3, #5
 800a0cc:	69fb      	ldr	r3, [r7, #28]
 800a0ce:	4413      	add	r3, r2
 800a0d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0d4:	461a      	mov	r2, r3
 800a0d6:	2310      	movs	r3, #16
 800a0d8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800a0da:	693b      	ldr	r3, [r7, #16]
 800a0dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d008      	beq.n	800a0f6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800a0e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0e6:	015a      	lsls	r2, r3, #5
 800a0e8:	69fb      	ldr	r3, [r7, #28]
 800a0ea:	4413      	add	r3, r2
 800a0ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0f0:	461a      	mov	r2, r3
 800a0f2:	2340      	movs	r3, #64	; 0x40
 800a0f4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800a0f6:	693b      	ldr	r3, [r7, #16]
 800a0f8:	f003 0302 	and.w	r3, r3, #2
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d023      	beq.n	800a148 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800a100:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a102:	6a38      	ldr	r0, [r7, #32]
 800a104:	f002 fc12 	bl	800c92c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800a108:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a10a:	4613      	mov	r3, r2
 800a10c:	00db      	lsls	r3, r3, #3
 800a10e:	4413      	add	r3, r2
 800a110:	009b      	lsls	r3, r3, #2
 800a112:	3338      	adds	r3, #56	; 0x38
 800a114:	687a      	ldr	r2, [r7, #4]
 800a116:	4413      	add	r3, r2
 800a118:	3304      	adds	r3, #4
 800a11a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800a11c:	697b      	ldr	r3, [r7, #20]
 800a11e:	78db      	ldrb	r3, [r3, #3]
 800a120:	2b01      	cmp	r3, #1
 800a122:	d108      	bne.n	800a136 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800a124:	697b      	ldr	r3, [r7, #20]
 800a126:	2200      	movs	r2, #0
 800a128:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800a12a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a12c:	b2db      	uxtb	r3, r3
 800a12e:	4619      	mov	r1, r3
 800a130:	6878      	ldr	r0, [r7, #4]
 800a132:	f016 fa2b 	bl	802058c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800a136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a138:	015a      	lsls	r2, r3, #5
 800a13a:	69fb      	ldr	r3, [r7, #28]
 800a13c:	4413      	add	r3, r2
 800a13e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a142:	461a      	mov	r2, r3
 800a144:	2302      	movs	r3, #2
 800a146:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800a148:	693b      	ldr	r3, [r7, #16]
 800a14a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d003      	beq.n	800a15a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800a152:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a154:	6878      	ldr	r0, [r7, #4]
 800a156:	f000 fcdb 	bl	800ab10 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800a15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a15c:	3301      	adds	r3, #1
 800a15e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800a160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a162:	085b      	lsrs	r3, r3, #1
 800a164:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800a166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a168:	2b00      	cmp	r3, #0
 800a16a:	f47f af2e 	bne.w	8009fca <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	4618      	mov	r0, r3
 800a174:	f003 fbfc 	bl	800d970 <USB_ReadInterrupts>
 800a178:	4603      	mov	r3, r0
 800a17a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a17e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a182:	d122      	bne.n	800a1ca <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a184:	69fb      	ldr	r3, [r7, #28]
 800a186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a18a:	685b      	ldr	r3, [r3, #4]
 800a18c:	69fa      	ldr	r2, [r7, #28]
 800a18e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a192:	f023 0301 	bic.w	r3, r3, #1
 800a196:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800a19e:	2b01      	cmp	r3, #1
 800a1a0:	d108      	bne.n	800a1b4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800a1aa:	2100      	movs	r1, #0
 800a1ac:	6878      	ldr	r0, [r7, #4]
 800a1ae:	f000 fec3 	bl	800af38 <HAL_PCDEx_LPM_Callback>
 800a1b2:	e002      	b.n	800a1ba <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	f016 f9c9 	bl	802054c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	695a      	ldr	r2, [r3, #20]
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800a1c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f003 fbce 	bl	800d970 <USB_ReadInterrupts>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a1da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a1de:	d112      	bne.n	800a206 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800a1e0:	69fb      	ldr	r3, [r7, #28]
 800a1e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1e6:	689b      	ldr	r3, [r3, #8]
 800a1e8:	f003 0301 	and.w	r3, r3, #1
 800a1ec:	2b01      	cmp	r3, #1
 800a1ee:	d102      	bne.n	800a1f6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f016 f985 	bl	8020500 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	695a      	ldr	r2, [r3, #20]
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800a204:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	4618      	mov	r0, r3
 800a20c:	f003 fbb0 	bl	800d970 <USB_ReadInterrupts>
 800a210:	4603      	mov	r3, r0
 800a212:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a216:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a21a:	f040 80b7 	bne.w	800a38c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a21e:	69fb      	ldr	r3, [r7, #28]
 800a220:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a224:	685b      	ldr	r3, [r3, #4]
 800a226:	69fa      	ldr	r2, [r7, #28]
 800a228:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a22c:	f023 0301 	bic.w	r3, r3, #1
 800a230:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	2110      	movs	r1, #16
 800a238:	4618      	mov	r0, r3
 800a23a:	f002 fb77 	bl	800c92c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a23e:	2300      	movs	r3, #0
 800a240:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a242:	e046      	b.n	800a2d2 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800a244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a246:	015a      	lsls	r2, r3, #5
 800a248:	69fb      	ldr	r3, [r7, #28]
 800a24a:	4413      	add	r3, r2
 800a24c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a250:	461a      	mov	r2, r3
 800a252:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a256:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a25a:	015a      	lsls	r2, r3, #5
 800a25c:	69fb      	ldr	r3, [r7, #28]
 800a25e:	4413      	add	r3, r2
 800a260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a268:	0151      	lsls	r1, r2, #5
 800a26a:	69fa      	ldr	r2, [r7, #28]
 800a26c:	440a      	add	r2, r1
 800a26e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a272:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a276:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800a278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a27a:	015a      	lsls	r2, r3, #5
 800a27c:	69fb      	ldr	r3, [r7, #28]
 800a27e:	4413      	add	r3, r2
 800a280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a284:	461a      	mov	r2, r3
 800a286:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a28a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a28c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a28e:	015a      	lsls	r2, r3, #5
 800a290:	69fb      	ldr	r3, [r7, #28]
 800a292:	4413      	add	r3, r2
 800a294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a29c:	0151      	lsls	r1, r2, #5
 800a29e:	69fa      	ldr	r2, [r7, #28]
 800a2a0:	440a      	add	r2, r1
 800a2a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a2a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a2aa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a2ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ae:	015a      	lsls	r2, r3, #5
 800a2b0:	69fb      	ldr	r3, [r7, #28]
 800a2b2:	4413      	add	r3, r2
 800a2b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a2bc:	0151      	lsls	r1, r2, #5
 800a2be:	69fa      	ldr	r2, [r7, #28]
 800a2c0:	440a      	add	r2, r1
 800a2c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a2c6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a2ca:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a2cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ce:	3301      	adds	r3, #1
 800a2d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	685b      	ldr	r3, [r3, #4]
 800a2d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a2d8:	429a      	cmp	r2, r3
 800a2da:	d3b3      	bcc.n	800a244 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800a2dc:	69fb      	ldr	r3, [r7, #28]
 800a2de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2e2:	69db      	ldr	r3, [r3, #28]
 800a2e4:	69fa      	ldr	r2, [r7, #28]
 800a2e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a2ea:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800a2ee:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d016      	beq.n	800a326 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800a2f8:	69fb      	ldr	r3, [r7, #28]
 800a2fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a302:	69fa      	ldr	r2, [r7, #28]
 800a304:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a308:	f043 030b 	orr.w	r3, r3, #11
 800a30c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800a310:	69fb      	ldr	r3, [r7, #28]
 800a312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a318:	69fa      	ldr	r2, [r7, #28]
 800a31a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a31e:	f043 030b 	orr.w	r3, r3, #11
 800a322:	6453      	str	r3, [r2, #68]	; 0x44
 800a324:	e015      	b.n	800a352 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800a326:	69fb      	ldr	r3, [r7, #28]
 800a328:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a32c:	695b      	ldr	r3, [r3, #20]
 800a32e:	69fa      	ldr	r2, [r7, #28]
 800a330:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a334:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a338:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800a33c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800a33e:	69fb      	ldr	r3, [r7, #28]
 800a340:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a344:	691b      	ldr	r3, [r3, #16]
 800a346:	69fa      	ldr	r2, [r7, #28]
 800a348:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a34c:	f043 030b 	orr.w	r3, r3, #11
 800a350:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800a352:	69fb      	ldr	r3, [r7, #28]
 800a354:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	69fa      	ldr	r2, [r7, #28]
 800a35c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a360:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a364:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	6818      	ldr	r0, [r3, #0]
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	691b      	ldr	r3, [r3, #16]
 800a36e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a376:	461a      	mov	r2, r3
 800a378:	f003 fbbe 	bl	800daf8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	695a      	ldr	r2, [r3, #20]
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800a38a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	4618      	mov	r0, r3
 800a392:	f003 faed 	bl	800d970 <USB_ReadInterrupts>
 800a396:	4603      	mov	r3, r0
 800a398:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a39c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a3a0:	d124      	bne.n	800a3ec <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f003 fb83 	bl	800dab2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	f002 fb38 	bl	800ca26 <USB_GetDevSpeed>
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	461a      	mov	r2, r3
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681c      	ldr	r4, [r3, #0]
 800a3c2:	f001 fa29 	bl	800b818 <HAL_RCC_GetHCLKFreq>
 800a3c6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a3cc:	b2db      	uxtb	r3, r3
 800a3ce:	461a      	mov	r2, r3
 800a3d0:	4620      	mov	r0, r4
 800a3d2:	f002 f837 	bl	800c444 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	f016 f869 	bl	80204ae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	695a      	ldr	r2, [r3, #20]
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800a3ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	f003 fabd 	bl	800d970 <USB_ReadInterrupts>
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	f003 0308 	and.w	r3, r3, #8
 800a3fc:	2b08      	cmp	r3, #8
 800a3fe:	d10a      	bne.n	800a416 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	f016 f846 	bl	8020492 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	695a      	ldr	r2, [r3, #20]
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	f002 0208 	and.w	r2, r2, #8
 800a414:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	4618      	mov	r0, r3
 800a41c:	f003 faa8 	bl	800d970 <USB_ReadInterrupts>
 800a420:	4603      	mov	r3, r0
 800a422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a426:	2b80      	cmp	r3, #128	; 0x80
 800a428:	d122      	bne.n	800a470 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800a42a:	6a3b      	ldr	r3, [r7, #32]
 800a42c:	699b      	ldr	r3, [r3, #24]
 800a42e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a432:	6a3b      	ldr	r3, [r7, #32]
 800a434:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a436:	2301      	movs	r3, #1
 800a438:	627b      	str	r3, [r7, #36]	; 0x24
 800a43a:	e014      	b.n	800a466 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800a43c:	6879      	ldr	r1, [r7, #4]
 800a43e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a440:	4613      	mov	r3, r2
 800a442:	00db      	lsls	r3, r3, #3
 800a444:	4413      	add	r3, r2
 800a446:	009b      	lsls	r3, r3, #2
 800a448:	440b      	add	r3, r1
 800a44a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800a44e:	781b      	ldrb	r3, [r3, #0]
 800a450:	2b01      	cmp	r3, #1
 800a452:	d105      	bne.n	800a460 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800a454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a456:	b2db      	uxtb	r3, r3
 800a458:	4619      	mov	r1, r3
 800a45a:	6878      	ldr	r0, [r7, #4]
 800a45c:	f000 fb27 	bl	800aaae <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a462:	3301      	adds	r3, #1
 800a464:	627b      	str	r3, [r7, #36]	; 0x24
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	685b      	ldr	r3, [r3, #4]
 800a46a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a46c:	429a      	cmp	r2, r3
 800a46e:	d3e5      	bcc.n	800a43c <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	4618      	mov	r0, r3
 800a476:	f003 fa7b 	bl	800d970 <USB_ReadInterrupts>
 800a47a:	4603      	mov	r3, r0
 800a47c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a480:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a484:	d13b      	bne.n	800a4fe <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a486:	2301      	movs	r3, #1
 800a488:	627b      	str	r3, [r7, #36]	; 0x24
 800a48a:	e02b      	b.n	800a4e4 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800a48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a48e:	015a      	lsls	r2, r3, #5
 800a490:	69fb      	ldr	r3, [r7, #28]
 800a492:	4413      	add	r3, r2
 800a494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a49c:	6879      	ldr	r1, [r7, #4]
 800a49e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4a0:	4613      	mov	r3, r2
 800a4a2:	00db      	lsls	r3, r3, #3
 800a4a4:	4413      	add	r3, r2
 800a4a6:	009b      	lsls	r3, r3, #2
 800a4a8:	440b      	add	r3, r1
 800a4aa:	3340      	adds	r3, #64	; 0x40
 800a4ac:	781b      	ldrb	r3, [r3, #0]
 800a4ae:	2b01      	cmp	r3, #1
 800a4b0:	d115      	bne.n	800a4de <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800a4b2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	da12      	bge.n	800a4de <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800a4b8:	6879      	ldr	r1, [r7, #4]
 800a4ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4bc:	4613      	mov	r3, r2
 800a4be:	00db      	lsls	r3, r3, #3
 800a4c0:	4413      	add	r3, r2
 800a4c2:	009b      	lsls	r3, r3, #2
 800a4c4:	440b      	add	r3, r1
 800a4c6:	333f      	adds	r3, #63	; 0x3f
 800a4c8:	2201      	movs	r2, #1
 800a4ca:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800a4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ce:	b2db      	uxtb	r3, r3
 800a4d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a4d4:	b2db      	uxtb	r3, r3
 800a4d6:	4619      	mov	r1, r3
 800a4d8:	6878      	ldr	r0, [r7, #4]
 800a4da:	f000 fae8 	bl	800aaae <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a4de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4e0:	3301      	adds	r3, #1
 800a4e2:	627b      	str	r3, [r7, #36]	; 0x24
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	685b      	ldr	r3, [r3, #4]
 800a4e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4ea:	429a      	cmp	r2, r3
 800a4ec:	d3ce      	bcc.n	800a48c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	695a      	ldr	r2, [r3, #20]
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800a4fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	4618      	mov	r0, r3
 800a504:	f003 fa34 	bl	800d970 <USB_ReadInterrupts>
 800a508:	4603      	mov	r3, r0
 800a50a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a50e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a512:	d155      	bne.n	800a5c0 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a514:	2301      	movs	r3, #1
 800a516:	627b      	str	r3, [r7, #36]	; 0x24
 800a518:	e045      	b.n	800a5a6 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800a51a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a51c:	015a      	lsls	r2, r3, #5
 800a51e:	69fb      	ldr	r3, [r7, #28]
 800a520:	4413      	add	r3, r2
 800a522:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800a52a:	6879      	ldr	r1, [r7, #4]
 800a52c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a52e:	4613      	mov	r3, r2
 800a530:	00db      	lsls	r3, r3, #3
 800a532:	4413      	add	r3, r2
 800a534:	009b      	lsls	r3, r3, #2
 800a536:	440b      	add	r3, r1
 800a538:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800a53c:	781b      	ldrb	r3, [r3, #0]
 800a53e:	2b01      	cmp	r3, #1
 800a540:	d12e      	bne.n	800a5a0 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800a542:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800a544:	2b00      	cmp	r3, #0
 800a546:	da2b      	bge.n	800a5a0 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800a548:	69bb      	ldr	r3, [r7, #24]
 800a54a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800a554:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800a558:	429a      	cmp	r2, r3
 800a55a:	d121      	bne.n	800a5a0 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800a55c:	6879      	ldr	r1, [r7, #4]
 800a55e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a560:	4613      	mov	r3, r2
 800a562:	00db      	lsls	r3, r3, #3
 800a564:	4413      	add	r3, r2
 800a566:	009b      	lsls	r3, r3, #2
 800a568:	440b      	add	r3, r1
 800a56a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800a56e:	2201      	movs	r2, #1
 800a570:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800a572:	6a3b      	ldr	r3, [r7, #32]
 800a574:	699b      	ldr	r3, [r3, #24]
 800a576:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a57a:	6a3b      	ldr	r3, [r7, #32]
 800a57c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800a57e:	6a3b      	ldr	r3, [r7, #32]
 800a580:	695b      	ldr	r3, [r3, #20]
 800a582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a586:	2b00      	cmp	r3, #0
 800a588:	d10a      	bne.n	800a5a0 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800a58a:	69fb      	ldr	r3, [r7, #28]
 800a58c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a590:	685b      	ldr	r3, [r3, #4]
 800a592:	69fa      	ldr	r2, [r7, #28]
 800a594:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a598:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a59c:	6053      	str	r3, [r2, #4]
            break;
 800a59e:	e007      	b.n	800a5b0 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5a2:	3301      	adds	r3, #1
 800a5a4:	627b      	str	r3, [r7, #36]	; 0x24
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	685b      	ldr	r3, [r3, #4]
 800a5aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5ac:	429a      	cmp	r2, r3
 800a5ae:	d3b4      	bcc.n	800a51a <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	695a      	ldr	r2, [r3, #20]
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800a5be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	f003 f9d3 	bl	800d970 <USB_ReadInterrupts>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a5d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5d4:	d10a      	bne.n	800a5ec <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800a5d6:	6878      	ldr	r0, [r7, #4]
 800a5d8:	f015 ffea 	bl	80205b0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	695a      	ldr	r2, [r3, #20]
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800a5ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	f003 f9bd 	bl	800d970 <USB_ReadInterrupts>
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	f003 0304 	and.w	r3, r3, #4
 800a5fc:	2b04      	cmp	r3, #4
 800a5fe:	d115      	bne.n	800a62c <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	685b      	ldr	r3, [r3, #4]
 800a606:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800a608:	69bb      	ldr	r3, [r7, #24]
 800a60a:	f003 0304 	and.w	r3, r3, #4
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d002      	beq.n	800a618 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	f015 ffda 	bl	80205cc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	6859      	ldr	r1, [r3, #4]
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	69ba      	ldr	r2, [r7, #24]
 800a624:	430a      	orrs	r2, r1
 800a626:	605a      	str	r2, [r3, #4]
 800a628:	e000      	b.n	800a62c <HAL_PCD_IRQHandler+0x938>
      return;
 800a62a:	bf00      	nop
    }
  }
}
 800a62c:	3734      	adds	r7, #52	; 0x34
 800a62e:	46bd      	mov	sp, r7
 800a630:	bd90      	pop	{r4, r7, pc}

0800a632 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800a632:	b580      	push	{r7, lr}
 800a634:	b082      	sub	sp, #8
 800a636:	af00      	add	r7, sp, #0
 800a638:	6078      	str	r0, [r7, #4]
 800a63a:	460b      	mov	r3, r1
 800a63c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a644:	2b01      	cmp	r3, #1
 800a646:	d101      	bne.n	800a64c <HAL_PCD_SetAddress+0x1a>
 800a648:	2302      	movs	r3, #2
 800a64a:	e013      	b.n	800a674 <HAL_PCD_SetAddress+0x42>
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2201      	movs	r2, #1
 800a650:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	78fa      	ldrb	r2, [r7, #3]
 800a658:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	78fa      	ldrb	r2, [r7, #3]
 800a662:	4611      	mov	r1, r2
 800a664:	4618      	mov	r0, r3
 800a666:	f003 f91b 	bl	800d8a0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	2200      	movs	r2, #0
 800a66e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a672:	2300      	movs	r3, #0
}
 800a674:	4618      	mov	r0, r3
 800a676:	3708      	adds	r7, #8
 800a678:	46bd      	mov	sp, r7
 800a67a:	bd80      	pop	{r7, pc}

0800a67c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b084      	sub	sp, #16
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
 800a684:	4608      	mov	r0, r1
 800a686:	4611      	mov	r1, r2
 800a688:	461a      	mov	r2, r3
 800a68a:	4603      	mov	r3, r0
 800a68c:	70fb      	strb	r3, [r7, #3]
 800a68e:	460b      	mov	r3, r1
 800a690:	803b      	strh	r3, [r7, #0]
 800a692:	4613      	mov	r3, r2
 800a694:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800a696:	2300      	movs	r3, #0
 800a698:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a69a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	da0f      	bge.n	800a6c2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a6a2:	78fb      	ldrb	r3, [r7, #3]
 800a6a4:	f003 020f 	and.w	r2, r3, #15
 800a6a8:	4613      	mov	r3, r2
 800a6aa:	00db      	lsls	r3, r3, #3
 800a6ac:	4413      	add	r3, r2
 800a6ae:	009b      	lsls	r3, r3, #2
 800a6b0:	3338      	adds	r3, #56	; 0x38
 800a6b2:	687a      	ldr	r2, [r7, #4]
 800a6b4:	4413      	add	r3, r2
 800a6b6:	3304      	adds	r3, #4
 800a6b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	2201      	movs	r2, #1
 800a6be:	705a      	strb	r2, [r3, #1]
 800a6c0:	e00f      	b.n	800a6e2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a6c2:	78fb      	ldrb	r3, [r7, #3]
 800a6c4:	f003 020f 	and.w	r2, r3, #15
 800a6c8:	4613      	mov	r3, r2
 800a6ca:	00db      	lsls	r3, r3, #3
 800a6cc:	4413      	add	r3, r2
 800a6ce:	009b      	lsls	r3, r3, #2
 800a6d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a6d4:	687a      	ldr	r2, [r7, #4]
 800a6d6:	4413      	add	r3, r2
 800a6d8:	3304      	adds	r3, #4
 800a6da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	2200      	movs	r2, #0
 800a6e0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800a6e2:	78fb      	ldrb	r3, [r7, #3]
 800a6e4:	f003 030f 	and.w	r3, r3, #15
 800a6e8:	b2da      	uxtb	r2, r3
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800a6ee:	883a      	ldrh	r2, [r7, #0]
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	78ba      	ldrb	r2, [r7, #2]
 800a6f8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	785b      	ldrb	r3, [r3, #1]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d004      	beq.n	800a70c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	781b      	ldrb	r3, [r3, #0]
 800a706:	b29a      	uxth	r2, r3
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800a70c:	78bb      	ldrb	r3, [r7, #2]
 800a70e:	2b02      	cmp	r3, #2
 800a710:	d102      	bne.n	800a718 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	2200      	movs	r2, #0
 800a716:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a71e:	2b01      	cmp	r3, #1
 800a720:	d101      	bne.n	800a726 <HAL_PCD_EP_Open+0xaa>
 800a722:	2302      	movs	r3, #2
 800a724:	e00e      	b.n	800a744 <HAL_PCD_EP_Open+0xc8>
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2201      	movs	r2, #1
 800a72a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	68f9      	ldr	r1, [r7, #12]
 800a734:	4618      	mov	r0, r3
 800a736:	f002 f99b 	bl	800ca70 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	2200      	movs	r2, #0
 800a73e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800a742:	7afb      	ldrb	r3, [r7, #11]
}
 800a744:	4618      	mov	r0, r3
 800a746:	3710      	adds	r7, #16
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd80      	pop	{r7, pc}

0800a74c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b084      	sub	sp, #16
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
 800a754:	460b      	mov	r3, r1
 800a756:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a758:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	da0f      	bge.n	800a780 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a760:	78fb      	ldrb	r3, [r7, #3]
 800a762:	f003 020f 	and.w	r2, r3, #15
 800a766:	4613      	mov	r3, r2
 800a768:	00db      	lsls	r3, r3, #3
 800a76a:	4413      	add	r3, r2
 800a76c:	009b      	lsls	r3, r3, #2
 800a76e:	3338      	adds	r3, #56	; 0x38
 800a770:	687a      	ldr	r2, [r7, #4]
 800a772:	4413      	add	r3, r2
 800a774:	3304      	adds	r3, #4
 800a776:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	2201      	movs	r2, #1
 800a77c:	705a      	strb	r2, [r3, #1]
 800a77e:	e00f      	b.n	800a7a0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a780:	78fb      	ldrb	r3, [r7, #3]
 800a782:	f003 020f 	and.w	r2, r3, #15
 800a786:	4613      	mov	r3, r2
 800a788:	00db      	lsls	r3, r3, #3
 800a78a:	4413      	add	r3, r2
 800a78c:	009b      	lsls	r3, r3, #2
 800a78e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a792:	687a      	ldr	r2, [r7, #4]
 800a794:	4413      	add	r3, r2
 800a796:	3304      	adds	r3, #4
 800a798:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	2200      	movs	r2, #0
 800a79e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800a7a0:	78fb      	ldrb	r3, [r7, #3]
 800a7a2:	f003 030f 	and.w	r3, r3, #15
 800a7a6:	b2da      	uxtb	r2, r3
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a7b2:	2b01      	cmp	r3, #1
 800a7b4:	d101      	bne.n	800a7ba <HAL_PCD_EP_Close+0x6e>
 800a7b6:	2302      	movs	r3, #2
 800a7b8:	e00e      	b.n	800a7d8 <HAL_PCD_EP_Close+0x8c>
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2201      	movs	r2, #1
 800a7be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	68f9      	ldr	r1, [r7, #12]
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	f002 f9d9 	bl	800cb80 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800a7d6:	2300      	movs	r3, #0
}
 800a7d8:	4618      	mov	r0, r3
 800a7da:	3710      	adds	r7, #16
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	bd80      	pop	{r7, pc}

0800a7e0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b086      	sub	sp, #24
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	60f8      	str	r0, [r7, #12]
 800a7e8:	607a      	str	r2, [r7, #4]
 800a7ea:	603b      	str	r3, [r7, #0]
 800a7ec:	460b      	mov	r3, r1
 800a7ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a7f0:	7afb      	ldrb	r3, [r7, #11]
 800a7f2:	f003 020f 	and.w	r2, r3, #15
 800a7f6:	4613      	mov	r3, r2
 800a7f8:	00db      	lsls	r3, r3, #3
 800a7fa:	4413      	add	r3, r2
 800a7fc:	009b      	lsls	r3, r3, #2
 800a7fe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a802:	68fa      	ldr	r2, [r7, #12]
 800a804:	4413      	add	r3, r2
 800a806:	3304      	adds	r3, #4
 800a808:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a80a:	697b      	ldr	r3, [r7, #20]
 800a80c:	687a      	ldr	r2, [r7, #4]
 800a80e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800a810:	697b      	ldr	r3, [r7, #20]
 800a812:	683a      	ldr	r2, [r7, #0]
 800a814:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800a816:	697b      	ldr	r3, [r7, #20]
 800a818:	2200      	movs	r2, #0
 800a81a:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800a81c:	697b      	ldr	r3, [r7, #20]
 800a81e:	2200      	movs	r2, #0
 800a820:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a822:	7afb      	ldrb	r3, [r7, #11]
 800a824:	f003 030f 	and.w	r3, r3, #15
 800a828:	b2da      	uxtb	r2, r3
 800a82a:	697b      	ldr	r3, [r7, #20]
 800a82c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	691b      	ldr	r3, [r3, #16]
 800a832:	2b01      	cmp	r3, #1
 800a834:	d102      	bne.n	800a83c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800a836:	687a      	ldr	r2, [r7, #4]
 800a838:	697b      	ldr	r3, [r7, #20]
 800a83a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a83c:	7afb      	ldrb	r3, [r7, #11]
 800a83e:	f003 030f 	and.w	r3, r3, #15
 800a842:	2b00      	cmp	r3, #0
 800a844:	d109      	bne.n	800a85a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	6818      	ldr	r0, [r3, #0]
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	691b      	ldr	r3, [r3, #16]
 800a84e:	b2db      	uxtb	r3, r3
 800a850:	461a      	mov	r2, r3
 800a852:	6979      	ldr	r1, [r7, #20]
 800a854:	f002 fcb8 	bl	800d1c8 <USB_EP0StartXfer>
 800a858:	e008      	b.n	800a86c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	6818      	ldr	r0, [r3, #0]
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	691b      	ldr	r3, [r3, #16]
 800a862:	b2db      	uxtb	r3, r3
 800a864:	461a      	mov	r2, r3
 800a866:	6979      	ldr	r1, [r7, #20]
 800a868:	f002 fa66 	bl	800cd38 <USB_EPStartXfer>
  }

  return HAL_OK;
 800a86c:	2300      	movs	r3, #0
}
 800a86e:	4618      	mov	r0, r3
 800a870:	3718      	adds	r7, #24
 800a872:	46bd      	mov	sp, r7
 800a874:	bd80      	pop	{r7, pc}

0800a876 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a876:	b480      	push	{r7}
 800a878:	b083      	sub	sp, #12
 800a87a:	af00      	add	r7, sp, #0
 800a87c:	6078      	str	r0, [r7, #4]
 800a87e:	460b      	mov	r3, r1
 800a880:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800a882:	78fb      	ldrb	r3, [r7, #3]
 800a884:	f003 020f 	and.w	r2, r3, #15
 800a888:	6879      	ldr	r1, [r7, #4]
 800a88a:	4613      	mov	r3, r2
 800a88c:	00db      	lsls	r3, r3, #3
 800a88e:	4413      	add	r3, r2
 800a890:	009b      	lsls	r3, r3, #2
 800a892:	440b      	add	r3, r1
 800a894:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800a898:	681b      	ldr	r3, [r3, #0]
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	370c      	adds	r7, #12
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a4:	4770      	bx	lr

0800a8a6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a8a6:	b580      	push	{r7, lr}
 800a8a8:	b086      	sub	sp, #24
 800a8aa:	af00      	add	r7, sp, #0
 800a8ac:	60f8      	str	r0, [r7, #12]
 800a8ae:	607a      	str	r2, [r7, #4]
 800a8b0:	603b      	str	r3, [r7, #0]
 800a8b2:	460b      	mov	r3, r1
 800a8b4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a8b6:	7afb      	ldrb	r3, [r7, #11]
 800a8b8:	f003 020f 	and.w	r2, r3, #15
 800a8bc:	4613      	mov	r3, r2
 800a8be:	00db      	lsls	r3, r3, #3
 800a8c0:	4413      	add	r3, r2
 800a8c2:	009b      	lsls	r3, r3, #2
 800a8c4:	3338      	adds	r3, #56	; 0x38
 800a8c6:	68fa      	ldr	r2, [r7, #12]
 800a8c8:	4413      	add	r3, r2
 800a8ca:	3304      	adds	r3, #4
 800a8cc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a8ce:	697b      	ldr	r3, [r7, #20]
 800a8d0:	687a      	ldr	r2, [r7, #4]
 800a8d2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800a8d4:	697b      	ldr	r3, [r7, #20]
 800a8d6:	683a      	ldr	r2, [r7, #0]
 800a8d8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800a8da:	697b      	ldr	r3, [r7, #20]
 800a8dc:	2200      	movs	r2, #0
 800a8de:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800a8e0:	697b      	ldr	r3, [r7, #20]
 800a8e2:	2201      	movs	r2, #1
 800a8e4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a8e6:	7afb      	ldrb	r3, [r7, #11]
 800a8e8:	f003 030f 	and.w	r3, r3, #15
 800a8ec:	b2da      	uxtb	r2, r3
 800a8ee:	697b      	ldr	r3, [r7, #20]
 800a8f0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	691b      	ldr	r3, [r3, #16]
 800a8f6:	2b01      	cmp	r3, #1
 800a8f8:	d102      	bne.n	800a900 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800a8fa:	687a      	ldr	r2, [r7, #4]
 800a8fc:	697b      	ldr	r3, [r7, #20]
 800a8fe:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a900:	7afb      	ldrb	r3, [r7, #11]
 800a902:	f003 030f 	and.w	r3, r3, #15
 800a906:	2b00      	cmp	r3, #0
 800a908:	d109      	bne.n	800a91e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	6818      	ldr	r0, [r3, #0]
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	691b      	ldr	r3, [r3, #16]
 800a912:	b2db      	uxtb	r3, r3
 800a914:	461a      	mov	r2, r3
 800a916:	6979      	ldr	r1, [r7, #20]
 800a918:	f002 fc56 	bl	800d1c8 <USB_EP0StartXfer>
 800a91c:	e008      	b.n	800a930 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	6818      	ldr	r0, [r3, #0]
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	691b      	ldr	r3, [r3, #16]
 800a926:	b2db      	uxtb	r3, r3
 800a928:	461a      	mov	r2, r3
 800a92a:	6979      	ldr	r1, [r7, #20]
 800a92c:	f002 fa04 	bl	800cd38 <USB_EPStartXfer>
  }

  return HAL_OK;
 800a930:	2300      	movs	r3, #0
}
 800a932:	4618      	mov	r0, r3
 800a934:	3718      	adds	r7, #24
 800a936:	46bd      	mov	sp, r7
 800a938:	bd80      	pop	{r7, pc}

0800a93a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a93a:	b580      	push	{r7, lr}
 800a93c:	b084      	sub	sp, #16
 800a93e:	af00      	add	r7, sp, #0
 800a940:	6078      	str	r0, [r7, #4]
 800a942:	460b      	mov	r3, r1
 800a944:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a946:	78fb      	ldrb	r3, [r7, #3]
 800a948:	f003 020f 	and.w	r2, r3, #15
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	685b      	ldr	r3, [r3, #4]
 800a950:	429a      	cmp	r2, r3
 800a952:	d901      	bls.n	800a958 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800a954:	2301      	movs	r3, #1
 800a956:	e050      	b.n	800a9fa <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a958:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	da0f      	bge.n	800a980 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a960:	78fb      	ldrb	r3, [r7, #3]
 800a962:	f003 020f 	and.w	r2, r3, #15
 800a966:	4613      	mov	r3, r2
 800a968:	00db      	lsls	r3, r3, #3
 800a96a:	4413      	add	r3, r2
 800a96c:	009b      	lsls	r3, r3, #2
 800a96e:	3338      	adds	r3, #56	; 0x38
 800a970:	687a      	ldr	r2, [r7, #4]
 800a972:	4413      	add	r3, r2
 800a974:	3304      	adds	r3, #4
 800a976:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	2201      	movs	r2, #1
 800a97c:	705a      	strb	r2, [r3, #1]
 800a97e:	e00d      	b.n	800a99c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a980:	78fa      	ldrb	r2, [r7, #3]
 800a982:	4613      	mov	r3, r2
 800a984:	00db      	lsls	r3, r3, #3
 800a986:	4413      	add	r3, r2
 800a988:	009b      	lsls	r3, r3, #2
 800a98a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a98e:	687a      	ldr	r2, [r7, #4]
 800a990:	4413      	add	r3, r2
 800a992:	3304      	adds	r3, #4
 800a994:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	2200      	movs	r2, #0
 800a99a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	2201      	movs	r2, #1
 800a9a0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a9a2:	78fb      	ldrb	r3, [r7, #3]
 800a9a4:	f003 030f 	and.w	r3, r3, #15
 800a9a8:	b2da      	uxtb	r2, r3
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a9b4:	2b01      	cmp	r3, #1
 800a9b6:	d101      	bne.n	800a9bc <HAL_PCD_EP_SetStall+0x82>
 800a9b8:	2302      	movs	r3, #2
 800a9ba:	e01e      	b.n	800a9fa <HAL_PCD_EP_SetStall+0xc0>
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2201      	movs	r2, #1
 800a9c0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	68f9      	ldr	r1, [r7, #12]
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f002 fe94 	bl	800d6f8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a9d0:	78fb      	ldrb	r3, [r7, #3]
 800a9d2:	f003 030f 	and.w	r3, r3, #15
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d10a      	bne.n	800a9f0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	6818      	ldr	r0, [r3, #0]
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	691b      	ldr	r3, [r3, #16]
 800a9e2:	b2d9      	uxtb	r1, r3
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a9ea:	461a      	mov	r2, r3
 800a9ec:	f003 f884 	bl	800daf8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a9f8:	2300      	movs	r3, #0
}
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	3710      	adds	r7, #16
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	bd80      	pop	{r7, pc}

0800aa02 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800aa02:	b580      	push	{r7, lr}
 800aa04:	b084      	sub	sp, #16
 800aa06:	af00      	add	r7, sp, #0
 800aa08:	6078      	str	r0, [r7, #4]
 800aa0a:	460b      	mov	r3, r1
 800aa0c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800aa0e:	78fb      	ldrb	r3, [r7, #3]
 800aa10:	f003 020f 	and.w	r2, r3, #15
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	685b      	ldr	r3, [r3, #4]
 800aa18:	429a      	cmp	r2, r3
 800aa1a:	d901      	bls.n	800aa20 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800aa1c:	2301      	movs	r3, #1
 800aa1e:	e042      	b.n	800aaa6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800aa20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	da0f      	bge.n	800aa48 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800aa28:	78fb      	ldrb	r3, [r7, #3]
 800aa2a:	f003 020f 	and.w	r2, r3, #15
 800aa2e:	4613      	mov	r3, r2
 800aa30:	00db      	lsls	r3, r3, #3
 800aa32:	4413      	add	r3, r2
 800aa34:	009b      	lsls	r3, r3, #2
 800aa36:	3338      	adds	r3, #56	; 0x38
 800aa38:	687a      	ldr	r2, [r7, #4]
 800aa3a:	4413      	add	r3, r2
 800aa3c:	3304      	adds	r3, #4
 800aa3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	2201      	movs	r2, #1
 800aa44:	705a      	strb	r2, [r3, #1]
 800aa46:	e00f      	b.n	800aa68 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800aa48:	78fb      	ldrb	r3, [r7, #3]
 800aa4a:	f003 020f 	and.w	r2, r3, #15
 800aa4e:	4613      	mov	r3, r2
 800aa50:	00db      	lsls	r3, r3, #3
 800aa52:	4413      	add	r3, r2
 800aa54:	009b      	lsls	r3, r3, #2
 800aa56:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800aa5a:	687a      	ldr	r2, [r7, #4]
 800aa5c:	4413      	add	r3, r2
 800aa5e:	3304      	adds	r3, #4
 800aa60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	2200      	movs	r2, #0
 800aa66:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800aa6e:	78fb      	ldrb	r3, [r7, #3]
 800aa70:	f003 030f 	and.w	r3, r3, #15
 800aa74:	b2da      	uxtb	r2, r3
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800aa80:	2b01      	cmp	r3, #1
 800aa82:	d101      	bne.n	800aa88 <HAL_PCD_EP_ClrStall+0x86>
 800aa84:	2302      	movs	r3, #2
 800aa86:	e00e      	b.n	800aaa6 <HAL_PCD_EP_ClrStall+0xa4>
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2201      	movs	r2, #1
 800aa8c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	68f9      	ldr	r1, [r7, #12]
 800aa96:	4618      	mov	r0, r3
 800aa98:	f002 fe9c 	bl	800d7d4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800aaa4:	2300      	movs	r3, #0
}
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	3710      	adds	r7, #16
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bd80      	pop	{r7, pc}

0800aaae <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800aaae:	b580      	push	{r7, lr}
 800aab0:	b084      	sub	sp, #16
 800aab2:	af00      	add	r7, sp, #0
 800aab4:	6078      	str	r0, [r7, #4]
 800aab6:	460b      	mov	r3, r1
 800aab8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800aaba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	da0c      	bge.n	800aadc <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800aac2:	78fb      	ldrb	r3, [r7, #3]
 800aac4:	f003 020f 	and.w	r2, r3, #15
 800aac8:	4613      	mov	r3, r2
 800aaca:	00db      	lsls	r3, r3, #3
 800aacc:	4413      	add	r3, r2
 800aace:	009b      	lsls	r3, r3, #2
 800aad0:	3338      	adds	r3, #56	; 0x38
 800aad2:	687a      	ldr	r2, [r7, #4]
 800aad4:	4413      	add	r3, r2
 800aad6:	3304      	adds	r3, #4
 800aad8:	60fb      	str	r3, [r7, #12]
 800aada:	e00c      	b.n	800aaf6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800aadc:	78fb      	ldrb	r3, [r7, #3]
 800aade:	f003 020f 	and.w	r2, r3, #15
 800aae2:	4613      	mov	r3, r2
 800aae4:	00db      	lsls	r3, r3, #3
 800aae6:	4413      	add	r3, r2
 800aae8:	009b      	lsls	r3, r3, #2
 800aaea:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800aaee:	687a      	ldr	r2, [r7, #4]
 800aaf0:	4413      	add	r3, r2
 800aaf2:	3304      	adds	r3, #4
 800aaf4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	68f9      	ldr	r1, [r7, #12]
 800aafc:	4618      	mov	r0, r3
 800aafe:	f002 fcbb 	bl	800d478 <USB_EPStopXfer>
 800ab02:	4603      	mov	r3, r0
 800ab04:	72fb      	strb	r3, [r7, #11]

  return ret;
 800ab06:	7afb      	ldrb	r3, [r7, #11]
}
 800ab08:	4618      	mov	r0, r3
 800ab0a:	3710      	adds	r7, #16
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	bd80      	pop	{r7, pc}

0800ab10 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b08a      	sub	sp, #40	; 0x28
 800ab14:	af02      	add	r7, sp, #8
 800ab16:	6078      	str	r0, [r7, #4]
 800ab18:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab20:	697b      	ldr	r3, [r7, #20]
 800ab22:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800ab24:	683a      	ldr	r2, [r7, #0]
 800ab26:	4613      	mov	r3, r2
 800ab28:	00db      	lsls	r3, r3, #3
 800ab2a:	4413      	add	r3, r2
 800ab2c:	009b      	lsls	r3, r3, #2
 800ab2e:	3338      	adds	r3, #56	; 0x38
 800ab30:	687a      	ldr	r2, [r7, #4]
 800ab32:	4413      	add	r3, r2
 800ab34:	3304      	adds	r3, #4
 800ab36:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	6a1a      	ldr	r2, [r3, #32]
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	699b      	ldr	r3, [r3, #24]
 800ab40:	429a      	cmp	r2, r3
 800ab42:	d901      	bls.n	800ab48 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800ab44:	2301      	movs	r3, #1
 800ab46:	e06c      	b.n	800ac22 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	699a      	ldr	r2, [r3, #24]
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	6a1b      	ldr	r3, [r3, #32]
 800ab50:	1ad3      	subs	r3, r2, r3
 800ab52:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	68db      	ldr	r3, [r3, #12]
 800ab58:	69fa      	ldr	r2, [r7, #28]
 800ab5a:	429a      	cmp	r2, r3
 800ab5c:	d902      	bls.n	800ab64 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	68db      	ldr	r3, [r3, #12]
 800ab62:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800ab64:	69fb      	ldr	r3, [r7, #28]
 800ab66:	3303      	adds	r3, #3
 800ab68:	089b      	lsrs	r3, r3, #2
 800ab6a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800ab6c:	e02b      	b.n	800abc6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	699a      	ldr	r2, [r3, #24]
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	6a1b      	ldr	r3, [r3, #32]
 800ab76:	1ad3      	subs	r3, r2, r3
 800ab78:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	68db      	ldr	r3, [r3, #12]
 800ab7e:	69fa      	ldr	r2, [r7, #28]
 800ab80:	429a      	cmp	r2, r3
 800ab82:	d902      	bls.n	800ab8a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	68db      	ldr	r3, [r3, #12]
 800ab88:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800ab8a:	69fb      	ldr	r3, [r7, #28]
 800ab8c:	3303      	adds	r3, #3
 800ab8e:	089b      	lsrs	r3, r3, #2
 800ab90:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	6919      	ldr	r1, [r3, #16]
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	b2da      	uxtb	r2, r3
 800ab9a:	69fb      	ldr	r3, [r7, #28]
 800ab9c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800aba2:	b2db      	uxtb	r3, r3
 800aba4:	9300      	str	r3, [sp, #0]
 800aba6:	4603      	mov	r3, r0
 800aba8:	6978      	ldr	r0, [r7, #20]
 800abaa:	f002 fd0f 	bl	800d5cc <USB_WritePacket>

    ep->xfer_buff  += len;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	691a      	ldr	r2, [r3, #16]
 800abb2:	69fb      	ldr	r3, [r7, #28]
 800abb4:	441a      	add	r2, r3
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	6a1a      	ldr	r2, [r3, #32]
 800abbe:	69fb      	ldr	r3, [r7, #28]
 800abc0:	441a      	add	r2, r3
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	015a      	lsls	r2, r3, #5
 800abca:	693b      	ldr	r3, [r7, #16]
 800abcc:	4413      	add	r3, r2
 800abce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abd2:	699b      	ldr	r3, [r3, #24]
 800abd4:	b29b      	uxth	r3, r3
 800abd6:	69ba      	ldr	r2, [r7, #24]
 800abd8:	429a      	cmp	r2, r3
 800abda:	d809      	bhi.n	800abf0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	6a1a      	ldr	r2, [r3, #32]
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800abe4:	429a      	cmp	r2, r3
 800abe6:	d203      	bcs.n	800abf0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	699b      	ldr	r3, [r3, #24]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d1be      	bne.n	800ab6e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	699a      	ldr	r2, [r3, #24]
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	6a1b      	ldr	r3, [r3, #32]
 800abf8:	429a      	cmp	r2, r3
 800abfa:	d811      	bhi.n	800ac20 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	f003 030f 	and.w	r3, r3, #15
 800ac02:	2201      	movs	r2, #1
 800ac04:	fa02 f303 	lsl.w	r3, r2, r3
 800ac08:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800ac0a:	693b      	ldr	r3, [r7, #16]
 800ac0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ac12:	68bb      	ldr	r3, [r7, #8]
 800ac14:	43db      	mvns	r3, r3
 800ac16:	6939      	ldr	r1, [r7, #16]
 800ac18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ac1c:	4013      	ands	r3, r2
 800ac1e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800ac20:	2300      	movs	r3, #0
}
 800ac22:	4618      	mov	r0, r3
 800ac24:	3720      	adds	r7, #32
 800ac26:	46bd      	mov	sp, r7
 800ac28:	bd80      	pop	{r7, pc}
	...

0800ac2c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b088      	sub	sp, #32
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
 800ac34:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac3c:	69fb      	ldr	r3, [r7, #28]
 800ac3e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ac40:	69fb      	ldr	r3, [r7, #28]
 800ac42:	333c      	adds	r3, #60	; 0x3c
 800ac44:	3304      	adds	r3, #4
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	015a      	lsls	r2, r3, #5
 800ac4e:	69bb      	ldr	r3, [r7, #24]
 800ac50:	4413      	add	r3, r2
 800ac52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac56:	689b      	ldr	r3, [r3, #8]
 800ac58:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	691b      	ldr	r3, [r3, #16]
 800ac5e:	2b01      	cmp	r3, #1
 800ac60:	d17b      	bne.n	800ad5a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800ac62:	693b      	ldr	r3, [r7, #16]
 800ac64:	f003 0308 	and.w	r3, r3, #8
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d015      	beq.n	800ac98 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ac6c:	697b      	ldr	r3, [r7, #20]
 800ac6e:	4a61      	ldr	r2, [pc, #388]	; (800adf4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800ac70:	4293      	cmp	r3, r2
 800ac72:	f240 80b9 	bls.w	800ade8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800ac76:	693b      	ldr	r3, [r7, #16]
 800ac78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	f000 80b3 	beq.w	800ade8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	015a      	lsls	r2, r3, #5
 800ac86:	69bb      	ldr	r3, [r7, #24]
 800ac88:	4413      	add	r3, r2
 800ac8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac8e:	461a      	mov	r2, r3
 800ac90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ac94:	6093      	str	r3, [r2, #8]
 800ac96:	e0a7      	b.n	800ade8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800ac98:	693b      	ldr	r3, [r7, #16]
 800ac9a:	f003 0320 	and.w	r3, r3, #32
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d009      	beq.n	800acb6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	015a      	lsls	r2, r3, #5
 800aca6:	69bb      	ldr	r3, [r7, #24]
 800aca8:	4413      	add	r3, r2
 800acaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acae:	461a      	mov	r2, r3
 800acb0:	2320      	movs	r3, #32
 800acb2:	6093      	str	r3, [r2, #8]
 800acb4:	e098      	b.n	800ade8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800acb6:	693b      	ldr	r3, [r7, #16]
 800acb8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	f040 8093 	bne.w	800ade8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800acc2:	697b      	ldr	r3, [r7, #20]
 800acc4:	4a4b      	ldr	r2, [pc, #300]	; (800adf4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800acc6:	4293      	cmp	r3, r2
 800acc8:	d90f      	bls.n	800acea <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800acca:	693b      	ldr	r3, [r7, #16]
 800accc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d00a      	beq.n	800acea <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	015a      	lsls	r2, r3, #5
 800acd8:	69bb      	ldr	r3, [r7, #24]
 800acda:	4413      	add	r3, r2
 800acdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ace0:	461a      	mov	r2, r3
 800ace2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ace6:	6093      	str	r3, [r2, #8]
 800ace8:	e07e      	b.n	800ade8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800acea:	683a      	ldr	r2, [r7, #0]
 800acec:	4613      	mov	r3, r2
 800acee:	00db      	lsls	r3, r3, #3
 800acf0:	4413      	add	r3, r2
 800acf2:	009b      	lsls	r3, r3, #2
 800acf4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800acf8:	687a      	ldr	r2, [r7, #4]
 800acfa:	4413      	add	r3, r2
 800acfc:	3304      	adds	r3, #4
 800acfe:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	69da      	ldr	r2, [r3, #28]
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	0159      	lsls	r1, r3, #5
 800ad08:	69bb      	ldr	r3, [r7, #24]
 800ad0a:	440b      	add	r3, r1
 800ad0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad10:	691b      	ldr	r3, [r3, #16]
 800ad12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ad16:	1ad2      	subs	r2, r2, r3
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d114      	bne.n	800ad4c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	699b      	ldr	r3, [r3, #24]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d109      	bne.n	800ad3e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	6818      	ldr	r0, [r3, #0]
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800ad34:	461a      	mov	r2, r3
 800ad36:	2101      	movs	r1, #1
 800ad38:	f002 fede 	bl	800daf8 <USB_EP0_OutStart>
 800ad3c:	e006      	b.n	800ad4c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	691a      	ldr	r2, [r3, #16]
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	6a1b      	ldr	r3, [r3, #32]
 800ad46:	441a      	add	r2, r3
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	b2db      	uxtb	r3, r3
 800ad50:	4619      	mov	r1, r3
 800ad52:	6878      	ldr	r0, [r7, #4]
 800ad54:	f015 fb68 	bl	8020428 <HAL_PCD_DataOutStageCallback>
 800ad58:	e046      	b.n	800ade8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800ad5a:	697b      	ldr	r3, [r7, #20]
 800ad5c:	4a26      	ldr	r2, [pc, #152]	; (800adf8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800ad5e:	4293      	cmp	r3, r2
 800ad60:	d124      	bne.n	800adac <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800ad62:	693b      	ldr	r3, [r7, #16]
 800ad64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d00a      	beq.n	800ad82 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800ad6c:	683b      	ldr	r3, [r7, #0]
 800ad6e:	015a      	lsls	r2, r3, #5
 800ad70:	69bb      	ldr	r3, [r7, #24]
 800ad72:	4413      	add	r3, r2
 800ad74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad78:	461a      	mov	r2, r3
 800ad7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ad7e:	6093      	str	r3, [r2, #8]
 800ad80:	e032      	b.n	800ade8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800ad82:	693b      	ldr	r3, [r7, #16]
 800ad84:	f003 0320 	and.w	r3, r3, #32
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d008      	beq.n	800ad9e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	015a      	lsls	r2, r3, #5
 800ad90:	69bb      	ldr	r3, [r7, #24]
 800ad92:	4413      	add	r3, r2
 800ad94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad98:	461a      	mov	r2, r3
 800ad9a:	2320      	movs	r3, #32
 800ad9c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800ad9e:	683b      	ldr	r3, [r7, #0]
 800ada0:	b2db      	uxtb	r3, r3
 800ada2:	4619      	mov	r1, r3
 800ada4:	6878      	ldr	r0, [r7, #4]
 800ada6:	f015 fb3f 	bl	8020428 <HAL_PCD_DataOutStageCallback>
 800adaa:	e01d      	b.n	800ade8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d114      	bne.n	800addc <PCD_EP_OutXfrComplete_int+0x1b0>
 800adb2:	6879      	ldr	r1, [r7, #4]
 800adb4:	683a      	ldr	r2, [r7, #0]
 800adb6:	4613      	mov	r3, r2
 800adb8:	00db      	lsls	r3, r3, #3
 800adba:	4413      	add	r3, r2
 800adbc:	009b      	lsls	r3, r3, #2
 800adbe:	440b      	add	r3, r1
 800adc0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d108      	bne.n	800addc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6818      	ldr	r0, [r3, #0]
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800add4:	461a      	mov	r2, r3
 800add6:	2100      	movs	r1, #0
 800add8:	f002 fe8e 	bl	800daf8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	b2db      	uxtb	r3, r3
 800ade0:	4619      	mov	r1, r3
 800ade2:	6878      	ldr	r0, [r7, #4]
 800ade4:	f015 fb20 	bl	8020428 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800ade8:	2300      	movs	r3, #0
}
 800adea:	4618      	mov	r0, r3
 800adec:	3720      	adds	r7, #32
 800adee:	46bd      	mov	sp, r7
 800adf0:	bd80      	pop	{r7, pc}
 800adf2:	bf00      	nop
 800adf4:	4f54300a 	.word	0x4f54300a
 800adf8:	4f54310a 	.word	0x4f54310a

0800adfc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b086      	sub	sp, #24
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
 800ae04:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae0c:	697b      	ldr	r3, [r7, #20]
 800ae0e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ae10:	697b      	ldr	r3, [r7, #20]
 800ae12:	333c      	adds	r3, #60	; 0x3c
 800ae14:	3304      	adds	r3, #4
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	015a      	lsls	r2, r3, #5
 800ae1e:	693b      	ldr	r3, [r7, #16]
 800ae20:	4413      	add	r3, r2
 800ae22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae26:	689b      	ldr	r3, [r3, #8]
 800ae28:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	4a15      	ldr	r2, [pc, #84]	; (800ae84 <PCD_EP_OutSetupPacket_int+0x88>)
 800ae2e:	4293      	cmp	r3, r2
 800ae30:	d90e      	bls.n	800ae50 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800ae32:	68bb      	ldr	r3, [r7, #8]
 800ae34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d009      	beq.n	800ae50 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	015a      	lsls	r2, r3, #5
 800ae40:	693b      	ldr	r3, [r7, #16]
 800ae42:	4413      	add	r3, r2
 800ae44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae48:	461a      	mov	r2, r3
 800ae4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ae4e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800ae50:	6878      	ldr	r0, [r7, #4]
 800ae52:	f015 fad7 	bl	8020404 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	4a0a      	ldr	r2, [pc, #40]	; (800ae84 <PCD_EP_OutSetupPacket_int+0x88>)
 800ae5a:	4293      	cmp	r3, r2
 800ae5c:	d90c      	bls.n	800ae78 <PCD_EP_OutSetupPacket_int+0x7c>
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	691b      	ldr	r3, [r3, #16]
 800ae62:	2b01      	cmp	r3, #1
 800ae64:	d108      	bne.n	800ae78 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	6818      	ldr	r0, [r3, #0]
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800ae70:	461a      	mov	r2, r3
 800ae72:	2101      	movs	r1, #1
 800ae74:	f002 fe40 	bl	800daf8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800ae78:	2300      	movs	r3, #0
}
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	3718      	adds	r7, #24
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	bd80      	pop	{r7, pc}
 800ae82:	bf00      	nop
 800ae84:	4f54300a 	.word	0x4f54300a

0800ae88 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800ae88:	b480      	push	{r7}
 800ae8a:	b085      	sub	sp, #20
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
 800ae90:	460b      	mov	r3, r1
 800ae92:	70fb      	strb	r3, [r7, #3]
 800ae94:	4613      	mov	r3, r2
 800ae96:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae9e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800aea0:	78fb      	ldrb	r3, [r7, #3]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d107      	bne.n	800aeb6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800aea6:	883b      	ldrh	r3, [r7, #0]
 800aea8:	0419      	lsls	r1, r3, #16
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	68ba      	ldr	r2, [r7, #8]
 800aeb0:	430a      	orrs	r2, r1
 800aeb2:	629a      	str	r2, [r3, #40]	; 0x28
 800aeb4:	e028      	b.n	800af08 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aebc:	0c1b      	lsrs	r3, r3, #16
 800aebe:	68ba      	ldr	r2, [r7, #8]
 800aec0:	4413      	add	r3, r2
 800aec2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800aec4:	2300      	movs	r3, #0
 800aec6:	73fb      	strb	r3, [r7, #15]
 800aec8:	e00d      	b.n	800aee6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681a      	ldr	r2, [r3, #0]
 800aece:	7bfb      	ldrb	r3, [r7, #15]
 800aed0:	3340      	adds	r3, #64	; 0x40
 800aed2:	009b      	lsls	r3, r3, #2
 800aed4:	4413      	add	r3, r2
 800aed6:	685b      	ldr	r3, [r3, #4]
 800aed8:	0c1b      	lsrs	r3, r3, #16
 800aeda:	68ba      	ldr	r2, [r7, #8]
 800aedc:	4413      	add	r3, r2
 800aede:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800aee0:	7bfb      	ldrb	r3, [r7, #15]
 800aee2:	3301      	adds	r3, #1
 800aee4:	73fb      	strb	r3, [r7, #15]
 800aee6:	7bfa      	ldrb	r2, [r7, #15]
 800aee8:	78fb      	ldrb	r3, [r7, #3]
 800aeea:	3b01      	subs	r3, #1
 800aeec:	429a      	cmp	r2, r3
 800aeee:	d3ec      	bcc.n	800aeca <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800aef0:	883b      	ldrh	r3, [r7, #0]
 800aef2:	0418      	lsls	r0, r3, #16
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	6819      	ldr	r1, [r3, #0]
 800aef8:	78fb      	ldrb	r3, [r7, #3]
 800aefa:	3b01      	subs	r3, #1
 800aefc:	68ba      	ldr	r2, [r7, #8]
 800aefe:	4302      	orrs	r2, r0
 800af00:	3340      	adds	r3, #64	; 0x40
 800af02:	009b      	lsls	r3, r3, #2
 800af04:	440b      	add	r3, r1
 800af06:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800af08:	2300      	movs	r3, #0
}
 800af0a:	4618      	mov	r0, r3
 800af0c:	3714      	adds	r7, #20
 800af0e:	46bd      	mov	sp, r7
 800af10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af14:	4770      	bx	lr

0800af16 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800af16:	b480      	push	{r7}
 800af18:	b083      	sub	sp, #12
 800af1a:	af00      	add	r7, sp, #0
 800af1c:	6078      	str	r0, [r7, #4]
 800af1e:	460b      	mov	r3, r1
 800af20:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	887a      	ldrh	r2, [r7, #2]
 800af28:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800af2a:	2300      	movs	r3, #0
}
 800af2c:	4618      	mov	r0, r3
 800af2e:	370c      	adds	r7, #12
 800af30:	46bd      	mov	sp, r7
 800af32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af36:	4770      	bx	lr

0800af38 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800af38:	b480      	push	{r7}
 800af3a:	b083      	sub	sp, #12
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
 800af40:	460b      	mov	r3, r1
 800af42:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800af44:	bf00      	nop
 800af46:	370c      	adds	r7, #12
 800af48:	46bd      	mov	sp, r7
 800af4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4e:	4770      	bx	lr

0800af50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b086      	sub	sp, #24
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d101      	bne.n	800af62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800af5e:	2301      	movs	r3, #1
 800af60:	e267      	b.n	800b432 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	f003 0301 	and.w	r3, r3, #1
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d075      	beq.n	800b05a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800af6e:	4b88      	ldr	r3, [pc, #544]	; (800b190 <HAL_RCC_OscConfig+0x240>)
 800af70:	689b      	ldr	r3, [r3, #8]
 800af72:	f003 030c 	and.w	r3, r3, #12
 800af76:	2b04      	cmp	r3, #4
 800af78:	d00c      	beq.n	800af94 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800af7a:	4b85      	ldr	r3, [pc, #532]	; (800b190 <HAL_RCC_OscConfig+0x240>)
 800af7c:	689b      	ldr	r3, [r3, #8]
 800af7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800af82:	2b08      	cmp	r3, #8
 800af84:	d112      	bne.n	800afac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800af86:	4b82      	ldr	r3, [pc, #520]	; (800b190 <HAL_RCC_OscConfig+0x240>)
 800af88:	685b      	ldr	r3, [r3, #4]
 800af8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800af8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800af92:	d10b      	bne.n	800afac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800af94:	4b7e      	ldr	r3, [pc, #504]	; (800b190 <HAL_RCC_OscConfig+0x240>)
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d05b      	beq.n	800b058 <HAL_RCC_OscConfig+0x108>
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	685b      	ldr	r3, [r3, #4]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d157      	bne.n	800b058 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800afa8:	2301      	movs	r3, #1
 800afaa:	e242      	b.n	800b432 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	685b      	ldr	r3, [r3, #4]
 800afb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800afb4:	d106      	bne.n	800afc4 <HAL_RCC_OscConfig+0x74>
 800afb6:	4b76      	ldr	r3, [pc, #472]	; (800b190 <HAL_RCC_OscConfig+0x240>)
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	4a75      	ldr	r2, [pc, #468]	; (800b190 <HAL_RCC_OscConfig+0x240>)
 800afbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800afc0:	6013      	str	r3, [r2, #0]
 800afc2:	e01d      	b.n	800b000 <HAL_RCC_OscConfig+0xb0>
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	685b      	ldr	r3, [r3, #4]
 800afc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800afcc:	d10c      	bne.n	800afe8 <HAL_RCC_OscConfig+0x98>
 800afce:	4b70      	ldr	r3, [pc, #448]	; (800b190 <HAL_RCC_OscConfig+0x240>)
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	4a6f      	ldr	r2, [pc, #444]	; (800b190 <HAL_RCC_OscConfig+0x240>)
 800afd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800afd8:	6013      	str	r3, [r2, #0]
 800afda:	4b6d      	ldr	r3, [pc, #436]	; (800b190 <HAL_RCC_OscConfig+0x240>)
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	4a6c      	ldr	r2, [pc, #432]	; (800b190 <HAL_RCC_OscConfig+0x240>)
 800afe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800afe4:	6013      	str	r3, [r2, #0]
 800afe6:	e00b      	b.n	800b000 <HAL_RCC_OscConfig+0xb0>
 800afe8:	4b69      	ldr	r3, [pc, #420]	; (800b190 <HAL_RCC_OscConfig+0x240>)
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	4a68      	ldr	r2, [pc, #416]	; (800b190 <HAL_RCC_OscConfig+0x240>)
 800afee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aff2:	6013      	str	r3, [r2, #0]
 800aff4:	4b66      	ldr	r3, [pc, #408]	; (800b190 <HAL_RCC_OscConfig+0x240>)
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	4a65      	ldr	r2, [pc, #404]	; (800b190 <HAL_RCC_OscConfig+0x240>)
 800affa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800affe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	685b      	ldr	r3, [r3, #4]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d013      	beq.n	800b030 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b008:	f7fe f9de 	bl	80093c8 <HAL_GetTick>
 800b00c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b00e:	e008      	b.n	800b022 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b010:	f7fe f9da 	bl	80093c8 <HAL_GetTick>
 800b014:	4602      	mov	r2, r0
 800b016:	693b      	ldr	r3, [r7, #16]
 800b018:	1ad3      	subs	r3, r2, r3
 800b01a:	2b64      	cmp	r3, #100	; 0x64
 800b01c:	d901      	bls.n	800b022 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800b01e:	2303      	movs	r3, #3
 800b020:	e207      	b.n	800b432 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b022:	4b5b      	ldr	r3, [pc, #364]	; (800b190 <HAL_RCC_OscConfig+0x240>)
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d0f0      	beq.n	800b010 <HAL_RCC_OscConfig+0xc0>
 800b02e:	e014      	b.n	800b05a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b030:	f7fe f9ca 	bl	80093c8 <HAL_GetTick>
 800b034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b036:	e008      	b.n	800b04a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b038:	f7fe f9c6 	bl	80093c8 <HAL_GetTick>
 800b03c:	4602      	mov	r2, r0
 800b03e:	693b      	ldr	r3, [r7, #16]
 800b040:	1ad3      	subs	r3, r2, r3
 800b042:	2b64      	cmp	r3, #100	; 0x64
 800b044:	d901      	bls.n	800b04a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b046:	2303      	movs	r3, #3
 800b048:	e1f3      	b.n	800b432 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b04a:	4b51      	ldr	r3, [pc, #324]	; (800b190 <HAL_RCC_OscConfig+0x240>)
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b052:	2b00      	cmp	r3, #0
 800b054:	d1f0      	bne.n	800b038 <HAL_RCC_OscConfig+0xe8>
 800b056:	e000      	b.n	800b05a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b058:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	f003 0302 	and.w	r3, r3, #2
 800b062:	2b00      	cmp	r3, #0
 800b064:	d063      	beq.n	800b12e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800b066:	4b4a      	ldr	r3, [pc, #296]	; (800b190 <HAL_RCC_OscConfig+0x240>)
 800b068:	689b      	ldr	r3, [r3, #8]
 800b06a:	f003 030c 	and.w	r3, r3, #12
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d00b      	beq.n	800b08a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b072:	4b47      	ldr	r3, [pc, #284]	; (800b190 <HAL_RCC_OscConfig+0x240>)
 800b074:	689b      	ldr	r3, [r3, #8]
 800b076:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800b07a:	2b08      	cmp	r3, #8
 800b07c:	d11c      	bne.n	800b0b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b07e:	4b44      	ldr	r3, [pc, #272]	; (800b190 <HAL_RCC_OscConfig+0x240>)
 800b080:	685b      	ldr	r3, [r3, #4]
 800b082:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b086:	2b00      	cmp	r3, #0
 800b088:	d116      	bne.n	800b0b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b08a:	4b41      	ldr	r3, [pc, #260]	; (800b190 <HAL_RCC_OscConfig+0x240>)
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	f003 0302 	and.w	r3, r3, #2
 800b092:	2b00      	cmp	r3, #0
 800b094:	d005      	beq.n	800b0a2 <HAL_RCC_OscConfig+0x152>
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	68db      	ldr	r3, [r3, #12]
 800b09a:	2b01      	cmp	r3, #1
 800b09c:	d001      	beq.n	800b0a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800b09e:	2301      	movs	r3, #1
 800b0a0:	e1c7      	b.n	800b432 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b0a2:	4b3b      	ldr	r3, [pc, #236]	; (800b190 <HAL_RCC_OscConfig+0x240>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	691b      	ldr	r3, [r3, #16]
 800b0ae:	00db      	lsls	r3, r3, #3
 800b0b0:	4937      	ldr	r1, [pc, #220]	; (800b190 <HAL_RCC_OscConfig+0x240>)
 800b0b2:	4313      	orrs	r3, r2
 800b0b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b0b6:	e03a      	b.n	800b12e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	68db      	ldr	r3, [r3, #12]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d020      	beq.n	800b102 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b0c0:	4b34      	ldr	r3, [pc, #208]	; (800b194 <HAL_RCC_OscConfig+0x244>)
 800b0c2:	2201      	movs	r2, #1
 800b0c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0c6:	f7fe f97f 	bl	80093c8 <HAL_GetTick>
 800b0ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b0cc:	e008      	b.n	800b0e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b0ce:	f7fe f97b 	bl	80093c8 <HAL_GetTick>
 800b0d2:	4602      	mov	r2, r0
 800b0d4:	693b      	ldr	r3, [r7, #16]
 800b0d6:	1ad3      	subs	r3, r2, r3
 800b0d8:	2b02      	cmp	r3, #2
 800b0da:	d901      	bls.n	800b0e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800b0dc:	2303      	movs	r3, #3
 800b0de:	e1a8      	b.n	800b432 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b0e0:	4b2b      	ldr	r3, [pc, #172]	; (800b190 <HAL_RCC_OscConfig+0x240>)
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	f003 0302 	and.w	r3, r3, #2
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d0f0      	beq.n	800b0ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b0ec:	4b28      	ldr	r3, [pc, #160]	; (800b190 <HAL_RCC_OscConfig+0x240>)
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	691b      	ldr	r3, [r3, #16]
 800b0f8:	00db      	lsls	r3, r3, #3
 800b0fa:	4925      	ldr	r1, [pc, #148]	; (800b190 <HAL_RCC_OscConfig+0x240>)
 800b0fc:	4313      	orrs	r3, r2
 800b0fe:	600b      	str	r3, [r1, #0]
 800b100:	e015      	b.n	800b12e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b102:	4b24      	ldr	r3, [pc, #144]	; (800b194 <HAL_RCC_OscConfig+0x244>)
 800b104:	2200      	movs	r2, #0
 800b106:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b108:	f7fe f95e 	bl	80093c8 <HAL_GetTick>
 800b10c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b10e:	e008      	b.n	800b122 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b110:	f7fe f95a 	bl	80093c8 <HAL_GetTick>
 800b114:	4602      	mov	r2, r0
 800b116:	693b      	ldr	r3, [r7, #16]
 800b118:	1ad3      	subs	r3, r2, r3
 800b11a:	2b02      	cmp	r3, #2
 800b11c:	d901      	bls.n	800b122 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800b11e:	2303      	movs	r3, #3
 800b120:	e187      	b.n	800b432 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b122:	4b1b      	ldr	r3, [pc, #108]	; (800b190 <HAL_RCC_OscConfig+0x240>)
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	f003 0302 	and.w	r3, r3, #2
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d1f0      	bne.n	800b110 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	f003 0308 	and.w	r3, r3, #8
 800b136:	2b00      	cmp	r3, #0
 800b138:	d036      	beq.n	800b1a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	695b      	ldr	r3, [r3, #20]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d016      	beq.n	800b170 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b142:	4b15      	ldr	r3, [pc, #84]	; (800b198 <HAL_RCC_OscConfig+0x248>)
 800b144:	2201      	movs	r2, #1
 800b146:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b148:	f7fe f93e 	bl	80093c8 <HAL_GetTick>
 800b14c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b14e:	e008      	b.n	800b162 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b150:	f7fe f93a 	bl	80093c8 <HAL_GetTick>
 800b154:	4602      	mov	r2, r0
 800b156:	693b      	ldr	r3, [r7, #16]
 800b158:	1ad3      	subs	r3, r2, r3
 800b15a:	2b02      	cmp	r3, #2
 800b15c:	d901      	bls.n	800b162 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800b15e:	2303      	movs	r3, #3
 800b160:	e167      	b.n	800b432 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b162:	4b0b      	ldr	r3, [pc, #44]	; (800b190 <HAL_RCC_OscConfig+0x240>)
 800b164:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b166:	f003 0302 	and.w	r3, r3, #2
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d0f0      	beq.n	800b150 <HAL_RCC_OscConfig+0x200>
 800b16e:	e01b      	b.n	800b1a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b170:	4b09      	ldr	r3, [pc, #36]	; (800b198 <HAL_RCC_OscConfig+0x248>)
 800b172:	2200      	movs	r2, #0
 800b174:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b176:	f7fe f927 	bl	80093c8 <HAL_GetTick>
 800b17a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b17c:	e00e      	b.n	800b19c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b17e:	f7fe f923 	bl	80093c8 <HAL_GetTick>
 800b182:	4602      	mov	r2, r0
 800b184:	693b      	ldr	r3, [r7, #16]
 800b186:	1ad3      	subs	r3, r2, r3
 800b188:	2b02      	cmp	r3, #2
 800b18a:	d907      	bls.n	800b19c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800b18c:	2303      	movs	r3, #3
 800b18e:	e150      	b.n	800b432 <HAL_RCC_OscConfig+0x4e2>
 800b190:	40023800 	.word	0x40023800
 800b194:	42470000 	.word	0x42470000
 800b198:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b19c:	4b88      	ldr	r3, [pc, #544]	; (800b3c0 <HAL_RCC_OscConfig+0x470>)
 800b19e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b1a0:	f003 0302 	and.w	r3, r3, #2
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d1ea      	bne.n	800b17e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	f003 0304 	and.w	r3, r3, #4
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	f000 8097 	beq.w	800b2e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b1ba:	4b81      	ldr	r3, [pc, #516]	; (800b3c0 <HAL_RCC_OscConfig+0x470>)
 800b1bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d10f      	bne.n	800b1e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	60bb      	str	r3, [r7, #8]
 800b1ca:	4b7d      	ldr	r3, [pc, #500]	; (800b3c0 <HAL_RCC_OscConfig+0x470>)
 800b1cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1ce:	4a7c      	ldr	r2, [pc, #496]	; (800b3c0 <HAL_RCC_OscConfig+0x470>)
 800b1d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b1d4:	6413      	str	r3, [r2, #64]	; 0x40
 800b1d6:	4b7a      	ldr	r3, [pc, #488]	; (800b3c0 <HAL_RCC_OscConfig+0x470>)
 800b1d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b1de:	60bb      	str	r3, [r7, #8]
 800b1e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b1e2:	2301      	movs	r3, #1
 800b1e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b1e6:	4b77      	ldr	r3, [pc, #476]	; (800b3c4 <HAL_RCC_OscConfig+0x474>)
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d118      	bne.n	800b224 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b1f2:	4b74      	ldr	r3, [pc, #464]	; (800b3c4 <HAL_RCC_OscConfig+0x474>)
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	4a73      	ldr	r2, [pc, #460]	; (800b3c4 <HAL_RCC_OscConfig+0x474>)
 800b1f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b1fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b1fe:	f7fe f8e3 	bl	80093c8 <HAL_GetTick>
 800b202:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b204:	e008      	b.n	800b218 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b206:	f7fe f8df 	bl	80093c8 <HAL_GetTick>
 800b20a:	4602      	mov	r2, r0
 800b20c:	693b      	ldr	r3, [r7, #16]
 800b20e:	1ad3      	subs	r3, r2, r3
 800b210:	2b02      	cmp	r3, #2
 800b212:	d901      	bls.n	800b218 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800b214:	2303      	movs	r3, #3
 800b216:	e10c      	b.n	800b432 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b218:	4b6a      	ldr	r3, [pc, #424]	; (800b3c4 <HAL_RCC_OscConfig+0x474>)
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b220:	2b00      	cmp	r3, #0
 800b222:	d0f0      	beq.n	800b206 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	689b      	ldr	r3, [r3, #8]
 800b228:	2b01      	cmp	r3, #1
 800b22a:	d106      	bne.n	800b23a <HAL_RCC_OscConfig+0x2ea>
 800b22c:	4b64      	ldr	r3, [pc, #400]	; (800b3c0 <HAL_RCC_OscConfig+0x470>)
 800b22e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b230:	4a63      	ldr	r2, [pc, #396]	; (800b3c0 <HAL_RCC_OscConfig+0x470>)
 800b232:	f043 0301 	orr.w	r3, r3, #1
 800b236:	6713      	str	r3, [r2, #112]	; 0x70
 800b238:	e01c      	b.n	800b274 <HAL_RCC_OscConfig+0x324>
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	689b      	ldr	r3, [r3, #8]
 800b23e:	2b05      	cmp	r3, #5
 800b240:	d10c      	bne.n	800b25c <HAL_RCC_OscConfig+0x30c>
 800b242:	4b5f      	ldr	r3, [pc, #380]	; (800b3c0 <HAL_RCC_OscConfig+0x470>)
 800b244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b246:	4a5e      	ldr	r2, [pc, #376]	; (800b3c0 <HAL_RCC_OscConfig+0x470>)
 800b248:	f043 0304 	orr.w	r3, r3, #4
 800b24c:	6713      	str	r3, [r2, #112]	; 0x70
 800b24e:	4b5c      	ldr	r3, [pc, #368]	; (800b3c0 <HAL_RCC_OscConfig+0x470>)
 800b250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b252:	4a5b      	ldr	r2, [pc, #364]	; (800b3c0 <HAL_RCC_OscConfig+0x470>)
 800b254:	f043 0301 	orr.w	r3, r3, #1
 800b258:	6713      	str	r3, [r2, #112]	; 0x70
 800b25a:	e00b      	b.n	800b274 <HAL_RCC_OscConfig+0x324>
 800b25c:	4b58      	ldr	r3, [pc, #352]	; (800b3c0 <HAL_RCC_OscConfig+0x470>)
 800b25e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b260:	4a57      	ldr	r2, [pc, #348]	; (800b3c0 <HAL_RCC_OscConfig+0x470>)
 800b262:	f023 0301 	bic.w	r3, r3, #1
 800b266:	6713      	str	r3, [r2, #112]	; 0x70
 800b268:	4b55      	ldr	r3, [pc, #340]	; (800b3c0 <HAL_RCC_OscConfig+0x470>)
 800b26a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b26c:	4a54      	ldr	r2, [pc, #336]	; (800b3c0 <HAL_RCC_OscConfig+0x470>)
 800b26e:	f023 0304 	bic.w	r3, r3, #4
 800b272:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	689b      	ldr	r3, [r3, #8]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d015      	beq.n	800b2a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b27c:	f7fe f8a4 	bl	80093c8 <HAL_GetTick>
 800b280:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b282:	e00a      	b.n	800b29a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b284:	f7fe f8a0 	bl	80093c8 <HAL_GetTick>
 800b288:	4602      	mov	r2, r0
 800b28a:	693b      	ldr	r3, [r7, #16]
 800b28c:	1ad3      	subs	r3, r2, r3
 800b28e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b292:	4293      	cmp	r3, r2
 800b294:	d901      	bls.n	800b29a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800b296:	2303      	movs	r3, #3
 800b298:	e0cb      	b.n	800b432 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b29a:	4b49      	ldr	r3, [pc, #292]	; (800b3c0 <HAL_RCC_OscConfig+0x470>)
 800b29c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b29e:	f003 0302 	and.w	r3, r3, #2
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d0ee      	beq.n	800b284 <HAL_RCC_OscConfig+0x334>
 800b2a6:	e014      	b.n	800b2d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b2a8:	f7fe f88e 	bl	80093c8 <HAL_GetTick>
 800b2ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b2ae:	e00a      	b.n	800b2c6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b2b0:	f7fe f88a 	bl	80093c8 <HAL_GetTick>
 800b2b4:	4602      	mov	r2, r0
 800b2b6:	693b      	ldr	r3, [r7, #16]
 800b2b8:	1ad3      	subs	r3, r2, r3
 800b2ba:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2be:	4293      	cmp	r3, r2
 800b2c0:	d901      	bls.n	800b2c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800b2c2:	2303      	movs	r3, #3
 800b2c4:	e0b5      	b.n	800b432 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b2c6:	4b3e      	ldr	r3, [pc, #248]	; (800b3c0 <HAL_RCC_OscConfig+0x470>)
 800b2c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2ca:	f003 0302 	and.w	r3, r3, #2
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d1ee      	bne.n	800b2b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b2d2:	7dfb      	ldrb	r3, [r7, #23]
 800b2d4:	2b01      	cmp	r3, #1
 800b2d6:	d105      	bne.n	800b2e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b2d8:	4b39      	ldr	r3, [pc, #228]	; (800b3c0 <HAL_RCC_OscConfig+0x470>)
 800b2da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2dc:	4a38      	ldr	r2, [pc, #224]	; (800b3c0 <HAL_RCC_OscConfig+0x470>)
 800b2de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b2e2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	699b      	ldr	r3, [r3, #24]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	f000 80a1 	beq.w	800b430 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b2ee:	4b34      	ldr	r3, [pc, #208]	; (800b3c0 <HAL_RCC_OscConfig+0x470>)
 800b2f0:	689b      	ldr	r3, [r3, #8]
 800b2f2:	f003 030c 	and.w	r3, r3, #12
 800b2f6:	2b08      	cmp	r3, #8
 800b2f8:	d05c      	beq.n	800b3b4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	699b      	ldr	r3, [r3, #24]
 800b2fe:	2b02      	cmp	r3, #2
 800b300:	d141      	bne.n	800b386 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b302:	4b31      	ldr	r3, [pc, #196]	; (800b3c8 <HAL_RCC_OscConfig+0x478>)
 800b304:	2200      	movs	r2, #0
 800b306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b308:	f7fe f85e 	bl	80093c8 <HAL_GetTick>
 800b30c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b30e:	e008      	b.n	800b322 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b310:	f7fe f85a 	bl	80093c8 <HAL_GetTick>
 800b314:	4602      	mov	r2, r0
 800b316:	693b      	ldr	r3, [r7, #16]
 800b318:	1ad3      	subs	r3, r2, r3
 800b31a:	2b02      	cmp	r3, #2
 800b31c:	d901      	bls.n	800b322 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800b31e:	2303      	movs	r3, #3
 800b320:	e087      	b.n	800b432 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b322:	4b27      	ldr	r3, [pc, #156]	; (800b3c0 <HAL_RCC_OscConfig+0x470>)
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d1f0      	bne.n	800b310 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	69da      	ldr	r2, [r3, #28]
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	6a1b      	ldr	r3, [r3, #32]
 800b336:	431a      	orrs	r2, r3
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b33c:	019b      	lsls	r3, r3, #6
 800b33e:	431a      	orrs	r2, r3
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b344:	085b      	lsrs	r3, r3, #1
 800b346:	3b01      	subs	r3, #1
 800b348:	041b      	lsls	r3, r3, #16
 800b34a:	431a      	orrs	r2, r3
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b350:	061b      	lsls	r3, r3, #24
 800b352:	491b      	ldr	r1, [pc, #108]	; (800b3c0 <HAL_RCC_OscConfig+0x470>)
 800b354:	4313      	orrs	r3, r2
 800b356:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b358:	4b1b      	ldr	r3, [pc, #108]	; (800b3c8 <HAL_RCC_OscConfig+0x478>)
 800b35a:	2201      	movs	r2, #1
 800b35c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b35e:	f7fe f833 	bl	80093c8 <HAL_GetTick>
 800b362:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b364:	e008      	b.n	800b378 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b366:	f7fe f82f 	bl	80093c8 <HAL_GetTick>
 800b36a:	4602      	mov	r2, r0
 800b36c:	693b      	ldr	r3, [r7, #16]
 800b36e:	1ad3      	subs	r3, r2, r3
 800b370:	2b02      	cmp	r3, #2
 800b372:	d901      	bls.n	800b378 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800b374:	2303      	movs	r3, #3
 800b376:	e05c      	b.n	800b432 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b378:	4b11      	ldr	r3, [pc, #68]	; (800b3c0 <HAL_RCC_OscConfig+0x470>)
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b380:	2b00      	cmp	r3, #0
 800b382:	d0f0      	beq.n	800b366 <HAL_RCC_OscConfig+0x416>
 800b384:	e054      	b.n	800b430 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b386:	4b10      	ldr	r3, [pc, #64]	; (800b3c8 <HAL_RCC_OscConfig+0x478>)
 800b388:	2200      	movs	r2, #0
 800b38a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b38c:	f7fe f81c 	bl	80093c8 <HAL_GetTick>
 800b390:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b392:	e008      	b.n	800b3a6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b394:	f7fe f818 	bl	80093c8 <HAL_GetTick>
 800b398:	4602      	mov	r2, r0
 800b39a:	693b      	ldr	r3, [r7, #16]
 800b39c:	1ad3      	subs	r3, r2, r3
 800b39e:	2b02      	cmp	r3, #2
 800b3a0:	d901      	bls.n	800b3a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800b3a2:	2303      	movs	r3, #3
 800b3a4:	e045      	b.n	800b432 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b3a6:	4b06      	ldr	r3, [pc, #24]	; (800b3c0 <HAL_RCC_OscConfig+0x470>)
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d1f0      	bne.n	800b394 <HAL_RCC_OscConfig+0x444>
 800b3b2:	e03d      	b.n	800b430 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	699b      	ldr	r3, [r3, #24]
 800b3b8:	2b01      	cmp	r3, #1
 800b3ba:	d107      	bne.n	800b3cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800b3bc:	2301      	movs	r3, #1
 800b3be:	e038      	b.n	800b432 <HAL_RCC_OscConfig+0x4e2>
 800b3c0:	40023800 	.word	0x40023800
 800b3c4:	40007000 	.word	0x40007000
 800b3c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800b3cc:	4b1b      	ldr	r3, [pc, #108]	; (800b43c <HAL_RCC_OscConfig+0x4ec>)
 800b3ce:	685b      	ldr	r3, [r3, #4]
 800b3d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	699b      	ldr	r3, [r3, #24]
 800b3d6:	2b01      	cmp	r3, #1
 800b3d8:	d028      	beq.n	800b42c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b3e4:	429a      	cmp	r2, r3
 800b3e6:	d121      	bne.n	800b42c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b3f2:	429a      	cmp	r2, r3
 800b3f4:	d11a      	bne.n	800b42c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b3f6:	68fa      	ldr	r2, [r7, #12]
 800b3f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800b3fc:	4013      	ands	r3, r2
 800b3fe:	687a      	ldr	r2, [r7, #4]
 800b400:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b402:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b404:	4293      	cmp	r3, r2
 800b406:	d111      	bne.n	800b42c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b412:	085b      	lsrs	r3, r3, #1
 800b414:	3b01      	subs	r3, #1
 800b416:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b418:	429a      	cmp	r2, r3
 800b41a:	d107      	bne.n	800b42c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b426:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b428:	429a      	cmp	r2, r3
 800b42a:	d001      	beq.n	800b430 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800b42c:	2301      	movs	r3, #1
 800b42e:	e000      	b.n	800b432 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800b430:	2300      	movs	r3, #0
}
 800b432:	4618      	mov	r0, r3
 800b434:	3718      	adds	r7, #24
 800b436:	46bd      	mov	sp, r7
 800b438:	bd80      	pop	{r7, pc}
 800b43a:	bf00      	nop
 800b43c:	40023800 	.word	0x40023800

0800b440 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b084      	sub	sp, #16
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
 800b448:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d101      	bne.n	800b454 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b450:	2301      	movs	r3, #1
 800b452:	e0cc      	b.n	800b5ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b454:	4b68      	ldr	r3, [pc, #416]	; (800b5f8 <HAL_RCC_ClockConfig+0x1b8>)
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	f003 0307 	and.w	r3, r3, #7
 800b45c:	683a      	ldr	r2, [r7, #0]
 800b45e:	429a      	cmp	r2, r3
 800b460:	d90c      	bls.n	800b47c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b462:	4b65      	ldr	r3, [pc, #404]	; (800b5f8 <HAL_RCC_ClockConfig+0x1b8>)
 800b464:	683a      	ldr	r2, [r7, #0]
 800b466:	b2d2      	uxtb	r2, r2
 800b468:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b46a:	4b63      	ldr	r3, [pc, #396]	; (800b5f8 <HAL_RCC_ClockConfig+0x1b8>)
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	f003 0307 	and.w	r3, r3, #7
 800b472:	683a      	ldr	r2, [r7, #0]
 800b474:	429a      	cmp	r2, r3
 800b476:	d001      	beq.n	800b47c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b478:	2301      	movs	r3, #1
 800b47a:	e0b8      	b.n	800b5ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	f003 0302 	and.w	r3, r3, #2
 800b484:	2b00      	cmp	r3, #0
 800b486:	d020      	beq.n	800b4ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	f003 0304 	and.w	r3, r3, #4
 800b490:	2b00      	cmp	r3, #0
 800b492:	d005      	beq.n	800b4a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b494:	4b59      	ldr	r3, [pc, #356]	; (800b5fc <HAL_RCC_ClockConfig+0x1bc>)
 800b496:	689b      	ldr	r3, [r3, #8]
 800b498:	4a58      	ldr	r2, [pc, #352]	; (800b5fc <HAL_RCC_ClockConfig+0x1bc>)
 800b49a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b49e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	f003 0308 	and.w	r3, r3, #8
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d005      	beq.n	800b4b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b4ac:	4b53      	ldr	r3, [pc, #332]	; (800b5fc <HAL_RCC_ClockConfig+0x1bc>)
 800b4ae:	689b      	ldr	r3, [r3, #8]
 800b4b0:	4a52      	ldr	r2, [pc, #328]	; (800b5fc <HAL_RCC_ClockConfig+0x1bc>)
 800b4b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b4b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b4b8:	4b50      	ldr	r3, [pc, #320]	; (800b5fc <HAL_RCC_ClockConfig+0x1bc>)
 800b4ba:	689b      	ldr	r3, [r3, #8]
 800b4bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	689b      	ldr	r3, [r3, #8]
 800b4c4:	494d      	ldr	r1, [pc, #308]	; (800b5fc <HAL_RCC_ClockConfig+0x1bc>)
 800b4c6:	4313      	orrs	r3, r2
 800b4c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	f003 0301 	and.w	r3, r3, #1
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d044      	beq.n	800b560 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	685b      	ldr	r3, [r3, #4]
 800b4da:	2b01      	cmp	r3, #1
 800b4dc:	d107      	bne.n	800b4ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b4de:	4b47      	ldr	r3, [pc, #284]	; (800b5fc <HAL_RCC_ClockConfig+0x1bc>)
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d119      	bne.n	800b51e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b4ea:	2301      	movs	r3, #1
 800b4ec:	e07f      	b.n	800b5ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	685b      	ldr	r3, [r3, #4]
 800b4f2:	2b02      	cmp	r3, #2
 800b4f4:	d003      	beq.n	800b4fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b4fa:	2b03      	cmp	r3, #3
 800b4fc:	d107      	bne.n	800b50e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b4fe:	4b3f      	ldr	r3, [pc, #252]	; (800b5fc <HAL_RCC_ClockConfig+0x1bc>)
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b506:	2b00      	cmp	r3, #0
 800b508:	d109      	bne.n	800b51e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b50a:	2301      	movs	r3, #1
 800b50c:	e06f      	b.n	800b5ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b50e:	4b3b      	ldr	r3, [pc, #236]	; (800b5fc <HAL_RCC_ClockConfig+0x1bc>)
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	f003 0302 	and.w	r3, r3, #2
 800b516:	2b00      	cmp	r3, #0
 800b518:	d101      	bne.n	800b51e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b51a:	2301      	movs	r3, #1
 800b51c:	e067      	b.n	800b5ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b51e:	4b37      	ldr	r3, [pc, #220]	; (800b5fc <HAL_RCC_ClockConfig+0x1bc>)
 800b520:	689b      	ldr	r3, [r3, #8]
 800b522:	f023 0203 	bic.w	r2, r3, #3
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	685b      	ldr	r3, [r3, #4]
 800b52a:	4934      	ldr	r1, [pc, #208]	; (800b5fc <HAL_RCC_ClockConfig+0x1bc>)
 800b52c:	4313      	orrs	r3, r2
 800b52e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b530:	f7fd ff4a 	bl	80093c8 <HAL_GetTick>
 800b534:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b536:	e00a      	b.n	800b54e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b538:	f7fd ff46 	bl	80093c8 <HAL_GetTick>
 800b53c:	4602      	mov	r2, r0
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	1ad3      	subs	r3, r2, r3
 800b542:	f241 3288 	movw	r2, #5000	; 0x1388
 800b546:	4293      	cmp	r3, r2
 800b548:	d901      	bls.n	800b54e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b54a:	2303      	movs	r3, #3
 800b54c:	e04f      	b.n	800b5ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b54e:	4b2b      	ldr	r3, [pc, #172]	; (800b5fc <HAL_RCC_ClockConfig+0x1bc>)
 800b550:	689b      	ldr	r3, [r3, #8]
 800b552:	f003 020c 	and.w	r2, r3, #12
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	685b      	ldr	r3, [r3, #4]
 800b55a:	009b      	lsls	r3, r3, #2
 800b55c:	429a      	cmp	r2, r3
 800b55e:	d1eb      	bne.n	800b538 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b560:	4b25      	ldr	r3, [pc, #148]	; (800b5f8 <HAL_RCC_ClockConfig+0x1b8>)
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	f003 0307 	and.w	r3, r3, #7
 800b568:	683a      	ldr	r2, [r7, #0]
 800b56a:	429a      	cmp	r2, r3
 800b56c:	d20c      	bcs.n	800b588 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b56e:	4b22      	ldr	r3, [pc, #136]	; (800b5f8 <HAL_RCC_ClockConfig+0x1b8>)
 800b570:	683a      	ldr	r2, [r7, #0]
 800b572:	b2d2      	uxtb	r2, r2
 800b574:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b576:	4b20      	ldr	r3, [pc, #128]	; (800b5f8 <HAL_RCC_ClockConfig+0x1b8>)
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	f003 0307 	and.w	r3, r3, #7
 800b57e:	683a      	ldr	r2, [r7, #0]
 800b580:	429a      	cmp	r2, r3
 800b582:	d001      	beq.n	800b588 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b584:	2301      	movs	r3, #1
 800b586:	e032      	b.n	800b5ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	f003 0304 	and.w	r3, r3, #4
 800b590:	2b00      	cmp	r3, #0
 800b592:	d008      	beq.n	800b5a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b594:	4b19      	ldr	r3, [pc, #100]	; (800b5fc <HAL_RCC_ClockConfig+0x1bc>)
 800b596:	689b      	ldr	r3, [r3, #8]
 800b598:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	68db      	ldr	r3, [r3, #12]
 800b5a0:	4916      	ldr	r1, [pc, #88]	; (800b5fc <HAL_RCC_ClockConfig+0x1bc>)
 800b5a2:	4313      	orrs	r3, r2
 800b5a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	f003 0308 	and.w	r3, r3, #8
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d009      	beq.n	800b5c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b5b2:	4b12      	ldr	r3, [pc, #72]	; (800b5fc <HAL_RCC_ClockConfig+0x1bc>)
 800b5b4:	689b      	ldr	r3, [r3, #8]
 800b5b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	691b      	ldr	r3, [r3, #16]
 800b5be:	00db      	lsls	r3, r3, #3
 800b5c0:	490e      	ldr	r1, [pc, #56]	; (800b5fc <HAL_RCC_ClockConfig+0x1bc>)
 800b5c2:	4313      	orrs	r3, r2
 800b5c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b5c6:	f000 f821 	bl	800b60c <HAL_RCC_GetSysClockFreq>
 800b5ca:	4602      	mov	r2, r0
 800b5cc:	4b0b      	ldr	r3, [pc, #44]	; (800b5fc <HAL_RCC_ClockConfig+0x1bc>)
 800b5ce:	689b      	ldr	r3, [r3, #8]
 800b5d0:	091b      	lsrs	r3, r3, #4
 800b5d2:	f003 030f 	and.w	r3, r3, #15
 800b5d6:	490a      	ldr	r1, [pc, #40]	; (800b600 <HAL_RCC_ClockConfig+0x1c0>)
 800b5d8:	5ccb      	ldrb	r3, [r1, r3]
 800b5da:	fa22 f303 	lsr.w	r3, r2, r3
 800b5de:	4a09      	ldr	r2, [pc, #36]	; (800b604 <HAL_RCC_ClockConfig+0x1c4>)
 800b5e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800b5e2:	4b09      	ldr	r3, [pc, #36]	; (800b608 <HAL_RCC_ClockConfig+0x1c8>)
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	f7fd feaa 	bl	8009340 <HAL_InitTick>

  return HAL_OK;
 800b5ec:	2300      	movs	r3, #0
}
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	3710      	adds	r7, #16
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	bd80      	pop	{r7, pc}
 800b5f6:	bf00      	nop
 800b5f8:	40023c00 	.word	0x40023c00
 800b5fc:	40023800 	.word	0x40023800
 800b600:	080296c0 	.word	0x080296c0
 800b604:	20000070 	.word	0x20000070
 800b608:	20000074 	.word	0x20000074

0800b60c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b60c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b610:	b094      	sub	sp, #80	; 0x50
 800b612:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800b614:	2300      	movs	r3, #0
 800b616:	647b      	str	r3, [r7, #68]	; 0x44
 800b618:	2300      	movs	r3, #0
 800b61a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b61c:	2300      	movs	r3, #0
 800b61e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800b620:	2300      	movs	r3, #0
 800b622:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b624:	4b79      	ldr	r3, [pc, #484]	; (800b80c <HAL_RCC_GetSysClockFreq+0x200>)
 800b626:	689b      	ldr	r3, [r3, #8]
 800b628:	f003 030c 	and.w	r3, r3, #12
 800b62c:	2b08      	cmp	r3, #8
 800b62e:	d00d      	beq.n	800b64c <HAL_RCC_GetSysClockFreq+0x40>
 800b630:	2b08      	cmp	r3, #8
 800b632:	f200 80e1 	bhi.w	800b7f8 <HAL_RCC_GetSysClockFreq+0x1ec>
 800b636:	2b00      	cmp	r3, #0
 800b638:	d002      	beq.n	800b640 <HAL_RCC_GetSysClockFreq+0x34>
 800b63a:	2b04      	cmp	r3, #4
 800b63c:	d003      	beq.n	800b646 <HAL_RCC_GetSysClockFreq+0x3a>
 800b63e:	e0db      	b.n	800b7f8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b640:	4b73      	ldr	r3, [pc, #460]	; (800b810 <HAL_RCC_GetSysClockFreq+0x204>)
 800b642:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800b644:	e0db      	b.n	800b7fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b646:	4b73      	ldr	r3, [pc, #460]	; (800b814 <HAL_RCC_GetSysClockFreq+0x208>)
 800b648:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800b64a:	e0d8      	b.n	800b7fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b64c:	4b6f      	ldr	r3, [pc, #444]	; (800b80c <HAL_RCC_GetSysClockFreq+0x200>)
 800b64e:	685b      	ldr	r3, [r3, #4]
 800b650:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b654:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b656:	4b6d      	ldr	r3, [pc, #436]	; (800b80c <HAL_RCC_GetSysClockFreq+0x200>)
 800b658:	685b      	ldr	r3, [r3, #4]
 800b65a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d063      	beq.n	800b72a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b662:	4b6a      	ldr	r3, [pc, #424]	; (800b80c <HAL_RCC_GetSysClockFreq+0x200>)
 800b664:	685b      	ldr	r3, [r3, #4]
 800b666:	099b      	lsrs	r3, r3, #6
 800b668:	2200      	movs	r2, #0
 800b66a:	63bb      	str	r3, [r7, #56]	; 0x38
 800b66c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b66e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b670:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b674:	633b      	str	r3, [r7, #48]	; 0x30
 800b676:	2300      	movs	r3, #0
 800b678:	637b      	str	r3, [r7, #52]	; 0x34
 800b67a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800b67e:	4622      	mov	r2, r4
 800b680:	462b      	mov	r3, r5
 800b682:	f04f 0000 	mov.w	r0, #0
 800b686:	f04f 0100 	mov.w	r1, #0
 800b68a:	0159      	lsls	r1, r3, #5
 800b68c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b690:	0150      	lsls	r0, r2, #5
 800b692:	4602      	mov	r2, r0
 800b694:	460b      	mov	r3, r1
 800b696:	4621      	mov	r1, r4
 800b698:	1a51      	subs	r1, r2, r1
 800b69a:	6139      	str	r1, [r7, #16]
 800b69c:	4629      	mov	r1, r5
 800b69e:	eb63 0301 	sbc.w	r3, r3, r1
 800b6a2:	617b      	str	r3, [r7, #20]
 800b6a4:	f04f 0200 	mov.w	r2, #0
 800b6a8:	f04f 0300 	mov.w	r3, #0
 800b6ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b6b0:	4659      	mov	r1, fp
 800b6b2:	018b      	lsls	r3, r1, #6
 800b6b4:	4651      	mov	r1, sl
 800b6b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800b6ba:	4651      	mov	r1, sl
 800b6bc:	018a      	lsls	r2, r1, #6
 800b6be:	4651      	mov	r1, sl
 800b6c0:	ebb2 0801 	subs.w	r8, r2, r1
 800b6c4:	4659      	mov	r1, fp
 800b6c6:	eb63 0901 	sbc.w	r9, r3, r1
 800b6ca:	f04f 0200 	mov.w	r2, #0
 800b6ce:	f04f 0300 	mov.w	r3, #0
 800b6d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b6d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b6da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b6de:	4690      	mov	r8, r2
 800b6e0:	4699      	mov	r9, r3
 800b6e2:	4623      	mov	r3, r4
 800b6e4:	eb18 0303 	adds.w	r3, r8, r3
 800b6e8:	60bb      	str	r3, [r7, #8]
 800b6ea:	462b      	mov	r3, r5
 800b6ec:	eb49 0303 	adc.w	r3, r9, r3
 800b6f0:	60fb      	str	r3, [r7, #12]
 800b6f2:	f04f 0200 	mov.w	r2, #0
 800b6f6:	f04f 0300 	mov.w	r3, #0
 800b6fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800b6fe:	4629      	mov	r1, r5
 800b700:	024b      	lsls	r3, r1, #9
 800b702:	4621      	mov	r1, r4
 800b704:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800b708:	4621      	mov	r1, r4
 800b70a:	024a      	lsls	r2, r1, #9
 800b70c:	4610      	mov	r0, r2
 800b70e:	4619      	mov	r1, r3
 800b710:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b712:	2200      	movs	r2, #0
 800b714:	62bb      	str	r3, [r7, #40]	; 0x28
 800b716:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b718:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b71c:	f7f5 fb0e 	bl	8000d3c <__aeabi_uldivmod>
 800b720:	4602      	mov	r2, r0
 800b722:	460b      	mov	r3, r1
 800b724:	4613      	mov	r3, r2
 800b726:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b728:	e058      	b.n	800b7dc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b72a:	4b38      	ldr	r3, [pc, #224]	; (800b80c <HAL_RCC_GetSysClockFreq+0x200>)
 800b72c:	685b      	ldr	r3, [r3, #4]
 800b72e:	099b      	lsrs	r3, r3, #6
 800b730:	2200      	movs	r2, #0
 800b732:	4618      	mov	r0, r3
 800b734:	4611      	mov	r1, r2
 800b736:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800b73a:	623b      	str	r3, [r7, #32]
 800b73c:	2300      	movs	r3, #0
 800b73e:	627b      	str	r3, [r7, #36]	; 0x24
 800b740:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800b744:	4642      	mov	r2, r8
 800b746:	464b      	mov	r3, r9
 800b748:	f04f 0000 	mov.w	r0, #0
 800b74c:	f04f 0100 	mov.w	r1, #0
 800b750:	0159      	lsls	r1, r3, #5
 800b752:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b756:	0150      	lsls	r0, r2, #5
 800b758:	4602      	mov	r2, r0
 800b75a:	460b      	mov	r3, r1
 800b75c:	4641      	mov	r1, r8
 800b75e:	ebb2 0a01 	subs.w	sl, r2, r1
 800b762:	4649      	mov	r1, r9
 800b764:	eb63 0b01 	sbc.w	fp, r3, r1
 800b768:	f04f 0200 	mov.w	r2, #0
 800b76c:	f04f 0300 	mov.w	r3, #0
 800b770:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800b774:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800b778:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800b77c:	ebb2 040a 	subs.w	r4, r2, sl
 800b780:	eb63 050b 	sbc.w	r5, r3, fp
 800b784:	f04f 0200 	mov.w	r2, #0
 800b788:	f04f 0300 	mov.w	r3, #0
 800b78c:	00eb      	lsls	r3, r5, #3
 800b78e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b792:	00e2      	lsls	r2, r4, #3
 800b794:	4614      	mov	r4, r2
 800b796:	461d      	mov	r5, r3
 800b798:	4643      	mov	r3, r8
 800b79a:	18e3      	adds	r3, r4, r3
 800b79c:	603b      	str	r3, [r7, #0]
 800b79e:	464b      	mov	r3, r9
 800b7a0:	eb45 0303 	adc.w	r3, r5, r3
 800b7a4:	607b      	str	r3, [r7, #4]
 800b7a6:	f04f 0200 	mov.w	r2, #0
 800b7aa:	f04f 0300 	mov.w	r3, #0
 800b7ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b7b2:	4629      	mov	r1, r5
 800b7b4:	028b      	lsls	r3, r1, #10
 800b7b6:	4621      	mov	r1, r4
 800b7b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800b7bc:	4621      	mov	r1, r4
 800b7be:	028a      	lsls	r2, r1, #10
 800b7c0:	4610      	mov	r0, r2
 800b7c2:	4619      	mov	r1, r3
 800b7c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	61bb      	str	r3, [r7, #24]
 800b7ca:	61fa      	str	r2, [r7, #28]
 800b7cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b7d0:	f7f5 fab4 	bl	8000d3c <__aeabi_uldivmod>
 800b7d4:	4602      	mov	r2, r0
 800b7d6:	460b      	mov	r3, r1
 800b7d8:	4613      	mov	r3, r2
 800b7da:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b7dc:	4b0b      	ldr	r3, [pc, #44]	; (800b80c <HAL_RCC_GetSysClockFreq+0x200>)
 800b7de:	685b      	ldr	r3, [r3, #4]
 800b7e0:	0c1b      	lsrs	r3, r3, #16
 800b7e2:	f003 0303 	and.w	r3, r3, #3
 800b7e6:	3301      	adds	r3, #1
 800b7e8:	005b      	lsls	r3, r3, #1
 800b7ea:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800b7ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b7ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800b7f6:	e002      	b.n	800b7fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b7f8:	4b05      	ldr	r3, [pc, #20]	; (800b810 <HAL_RCC_GetSysClockFreq+0x204>)
 800b7fa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800b7fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b7fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800b800:	4618      	mov	r0, r3
 800b802:	3750      	adds	r7, #80	; 0x50
 800b804:	46bd      	mov	sp, r7
 800b806:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b80a:	bf00      	nop
 800b80c:	40023800 	.word	0x40023800
 800b810:	00f42400 	.word	0x00f42400
 800b814:	007a1200 	.word	0x007a1200

0800b818 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b818:	b480      	push	{r7}
 800b81a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b81c:	4b03      	ldr	r3, [pc, #12]	; (800b82c <HAL_RCC_GetHCLKFreq+0x14>)
 800b81e:	681b      	ldr	r3, [r3, #0]
}
 800b820:	4618      	mov	r0, r3
 800b822:	46bd      	mov	sp, r7
 800b824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b828:	4770      	bx	lr
 800b82a:	bf00      	nop
 800b82c:	20000070 	.word	0x20000070

0800b830 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b082      	sub	sp, #8
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d101      	bne.n	800b842 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b83e:	2301      	movs	r3, #1
 800b840:	e07b      	b.n	800b93a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b846:	2b00      	cmp	r3, #0
 800b848:	d108      	bne.n	800b85c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	685b      	ldr	r3, [r3, #4]
 800b84e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b852:	d009      	beq.n	800b868 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2200      	movs	r2, #0
 800b858:	61da      	str	r2, [r3, #28]
 800b85a:	e005      	b.n	800b868 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	2200      	movs	r2, #0
 800b860:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	2200      	movs	r2, #0
 800b866:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	2200      	movs	r2, #0
 800b86c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b874:	b2db      	uxtb	r3, r3
 800b876:	2b00      	cmp	r3, #0
 800b878:	d106      	bne.n	800b888 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	2200      	movs	r2, #0
 800b87e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b882:	6878      	ldr	r0, [r7, #4]
 800b884:	f7fd fbb4 	bl	8008ff0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	2202      	movs	r2, #2
 800b88c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	681a      	ldr	r2, [r3, #0]
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b89e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	685b      	ldr	r3, [r3, #4]
 800b8a4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	689b      	ldr	r3, [r3, #8]
 800b8ac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b8b0:	431a      	orrs	r2, r3
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	68db      	ldr	r3, [r3, #12]
 800b8b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b8ba:	431a      	orrs	r2, r3
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	691b      	ldr	r3, [r3, #16]
 800b8c0:	f003 0302 	and.w	r3, r3, #2
 800b8c4:	431a      	orrs	r2, r3
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	695b      	ldr	r3, [r3, #20]
 800b8ca:	f003 0301 	and.w	r3, r3, #1
 800b8ce:	431a      	orrs	r2, r3
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	699b      	ldr	r3, [r3, #24]
 800b8d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b8d8:	431a      	orrs	r2, r3
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	69db      	ldr	r3, [r3, #28]
 800b8de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b8e2:	431a      	orrs	r2, r3
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	6a1b      	ldr	r3, [r3, #32]
 800b8e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b8ec:	ea42 0103 	orr.w	r1, r2, r3
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8f4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	430a      	orrs	r2, r1
 800b8fe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	699b      	ldr	r3, [r3, #24]
 800b904:	0c1b      	lsrs	r3, r3, #16
 800b906:	f003 0104 	and.w	r1, r3, #4
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b90e:	f003 0210 	and.w	r2, r3, #16
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	430a      	orrs	r2, r1
 800b918:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	69da      	ldr	r2, [r3, #28]
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b928:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	2200      	movs	r2, #0
 800b92e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	2201      	movs	r2, #1
 800b934:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800b938:	2300      	movs	r3, #0
}
 800b93a:	4618      	mov	r0, r3
 800b93c:	3708      	adds	r7, #8
 800b93e:	46bd      	mov	sp, r7
 800b940:	bd80      	pop	{r7, pc}

0800b942 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b942:	b580      	push	{r7, lr}
 800b944:	b088      	sub	sp, #32
 800b946:	af00      	add	r7, sp, #0
 800b948:	60f8      	str	r0, [r7, #12]
 800b94a:	60b9      	str	r1, [r7, #8]
 800b94c:	603b      	str	r3, [r7, #0]
 800b94e:	4613      	mov	r3, r2
 800b950:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b952:	2300      	movs	r3, #0
 800b954:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b95c:	2b01      	cmp	r3, #1
 800b95e:	d101      	bne.n	800b964 <HAL_SPI_Transmit+0x22>
 800b960:	2302      	movs	r3, #2
 800b962:	e126      	b.n	800bbb2 <HAL_SPI_Transmit+0x270>
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	2201      	movs	r2, #1
 800b968:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b96c:	f7fd fd2c 	bl	80093c8 <HAL_GetTick>
 800b970:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800b972:	88fb      	ldrh	r3, [r7, #6]
 800b974:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b97c:	b2db      	uxtb	r3, r3
 800b97e:	2b01      	cmp	r3, #1
 800b980:	d002      	beq.n	800b988 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800b982:	2302      	movs	r3, #2
 800b984:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b986:	e10b      	b.n	800bba0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800b988:	68bb      	ldr	r3, [r7, #8]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d002      	beq.n	800b994 <HAL_SPI_Transmit+0x52>
 800b98e:	88fb      	ldrh	r3, [r7, #6]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d102      	bne.n	800b99a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800b994:	2301      	movs	r3, #1
 800b996:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b998:	e102      	b.n	800bba0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	2203      	movs	r2, #3
 800b99e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	2200      	movs	r2, #0
 800b9a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	68ba      	ldr	r2, [r7, #8]
 800b9ac:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	88fa      	ldrh	r2, [r7, #6]
 800b9b2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	88fa      	ldrh	r2, [r7, #6]
 800b9b8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	2200      	movs	r2, #0
 800b9be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	689b      	ldr	r3, [r3, #8]
 800b9dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b9e0:	d10f      	bne.n	800ba02 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	681a      	ldr	r2, [r3, #0]
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b9f0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	681a      	ldr	r2, [r3, #0]
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ba00:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba0c:	2b40      	cmp	r3, #64	; 0x40
 800ba0e:	d007      	beq.n	800ba20 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	681a      	ldr	r2, [r3, #0]
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ba1e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	68db      	ldr	r3, [r3, #12]
 800ba24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ba28:	d14b      	bne.n	800bac2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	685b      	ldr	r3, [r3, #4]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d002      	beq.n	800ba38 <HAL_SPI_Transmit+0xf6>
 800ba32:	8afb      	ldrh	r3, [r7, #22]
 800ba34:	2b01      	cmp	r3, #1
 800ba36:	d13e      	bne.n	800bab6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba3c:	881a      	ldrh	r2, [r3, #0]
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba48:	1c9a      	adds	r2, r3, #2
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ba52:	b29b      	uxth	r3, r3
 800ba54:	3b01      	subs	r3, #1
 800ba56:	b29a      	uxth	r2, r3
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800ba5c:	e02b      	b.n	800bab6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	689b      	ldr	r3, [r3, #8]
 800ba64:	f003 0302 	and.w	r3, r3, #2
 800ba68:	2b02      	cmp	r3, #2
 800ba6a:	d112      	bne.n	800ba92 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba70:	881a      	ldrh	r2, [r3, #0]
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba7c:	1c9a      	adds	r2, r3, #2
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ba86:	b29b      	uxth	r3, r3
 800ba88:	3b01      	subs	r3, #1
 800ba8a:	b29a      	uxth	r2, r3
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	86da      	strh	r2, [r3, #54]	; 0x36
 800ba90:	e011      	b.n	800bab6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ba92:	f7fd fc99 	bl	80093c8 <HAL_GetTick>
 800ba96:	4602      	mov	r2, r0
 800ba98:	69bb      	ldr	r3, [r7, #24]
 800ba9a:	1ad3      	subs	r3, r2, r3
 800ba9c:	683a      	ldr	r2, [r7, #0]
 800ba9e:	429a      	cmp	r2, r3
 800baa0:	d803      	bhi.n	800baaa <HAL_SPI_Transmit+0x168>
 800baa2:	683b      	ldr	r3, [r7, #0]
 800baa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baa8:	d102      	bne.n	800bab0 <HAL_SPI_Transmit+0x16e>
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d102      	bne.n	800bab6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800bab0:	2303      	movs	r3, #3
 800bab2:	77fb      	strb	r3, [r7, #31]
          goto error;
 800bab4:	e074      	b.n	800bba0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800baba:	b29b      	uxth	r3, r3
 800babc:	2b00      	cmp	r3, #0
 800babe:	d1ce      	bne.n	800ba5e <HAL_SPI_Transmit+0x11c>
 800bac0:	e04c      	b.n	800bb5c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	685b      	ldr	r3, [r3, #4]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d002      	beq.n	800bad0 <HAL_SPI_Transmit+0x18e>
 800baca:	8afb      	ldrh	r3, [r7, #22]
 800bacc:	2b01      	cmp	r3, #1
 800bace:	d140      	bne.n	800bb52 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	330c      	adds	r3, #12
 800bada:	7812      	ldrb	r2, [r2, #0]
 800badc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bae2:	1c5a      	adds	r2, r3, #1
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800baec:	b29b      	uxth	r3, r3
 800baee:	3b01      	subs	r3, #1
 800baf0:	b29a      	uxth	r2, r3
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800baf6:	e02c      	b.n	800bb52 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	689b      	ldr	r3, [r3, #8]
 800bafe:	f003 0302 	and.w	r3, r3, #2
 800bb02:	2b02      	cmp	r3, #2
 800bb04:	d113      	bne.n	800bb2e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	330c      	adds	r3, #12
 800bb10:	7812      	ldrb	r2, [r2, #0]
 800bb12:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb18:	1c5a      	adds	r2, r3, #1
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bb22:	b29b      	uxth	r3, r3
 800bb24:	3b01      	subs	r3, #1
 800bb26:	b29a      	uxth	r2, r3
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	86da      	strh	r2, [r3, #54]	; 0x36
 800bb2c:	e011      	b.n	800bb52 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bb2e:	f7fd fc4b 	bl	80093c8 <HAL_GetTick>
 800bb32:	4602      	mov	r2, r0
 800bb34:	69bb      	ldr	r3, [r7, #24]
 800bb36:	1ad3      	subs	r3, r2, r3
 800bb38:	683a      	ldr	r2, [r7, #0]
 800bb3a:	429a      	cmp	r2, r3
 800bb3c:	d803      	bhi.n	800bb46 <HAL_SPI_Transmit+0x204>
 800bb3e:	683b      	ldr	r3, [r7, #0]
 800bb40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb44:	d102      	bne.n	800bb4c <HAL_SPI_Transmit+0x20a>
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d102      	bne.n	800bb52 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800bb4c:	2303      	movs	r3, #3
 800bb4e:	77fb      	strb	r3, [r7, #31]
          goto error;
 800bb50:	e026      	b.n	800bba0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bb56:	b29b      	uxth	r3, r3
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d1cd      	bne.n	800baf8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bb5c:	69ba      	ldr	r2, [r7, #24]
 800bb5e:	6839      	ldr	r1, [r7, #0]
 800bb60:	68f8      	ldr	r0, [r7, #12]
 800bb62:	f000 fbcb 	bl	800c2fc <SPI_EndRxTxTransaction>
 800bb66:	4603      	mov	r3, r0
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d002      	beq.n	800bb72 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	2220      	movs	r2, #32
 800bb70:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	689b      	ldr	r3, [r3, #8]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d10a      	bne.n	800bb90 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	613b      	str	r3, [r7, #16]
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	68db      	ldr	r3, [r3, #12]
 800bb84:	613b      	str	r3, [r7, #16]
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	689b      	ldr	r3, [r3, #8]
 800bb8c:	613b      	str	r3, [r7, #16]
 800bb8e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d002      	beq.n	800bb9e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800bb98:	2301      	movs	r3, #1
 800bb9a:	77fb      	strb	r3, [r7, #31]
 800bb9c:	e000      	b.n	800bba0 <HAL_SPI_Transmit+0x25e>
  }

error:
 800bb9e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	2201      	movs	r2, #1
 800bba4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	2200      	movs	r2, #0
 800bbac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800bbb0:	7ffb      	ldrb	r3, [r7, #31]
}
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	3720      	adds	r7, #32
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	bd80      	pop	{r7, pc}

0800bbba <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bbba:	b580      	push	{r7, lr}
 800bbbc:	b088      	sub	sp, #32
 800bbbe:	af02      	add	r7, sp, #8
 800bbc0:	60f8      	str	r0, [r7, #12]
 800bbc2:	60b9      	str	r1, [r7, #8]
 800bbc4:	603b      	str	r3, [r7, #0]
 800bbc6:	4613      	mov	r3, r2
 800bbc8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bbca:	2300      	movs	r3, #0
 800bbcc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	685b      	ldr	r3, [r3, #4]
 800bbd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bbd6:	d112      	bne.n	800bbfe <HAL_SPI_Receive+0x44>
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	689b      	ldr	r3, [r3, #8]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d10e      	bne.n	800bbfe <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	2204      	movs	r2, #4
 800bbe4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800bbe8:	88fa      	ldrh	r2, [r7, #6]
 800bbea:	683b      	ldr	r3, [r7, #0]
 800bbec:	9300      	str	r3, [sp, #0]
 800bbee:	4613      	mov	r3, r2
 800bbf0:	68ba      	ldr	r2, [r7, #8]
 800bbf2:	68b9      	ldr	r1, [r7, #8]
 800bbf4:	68f8      	ldr	r0, [r7, #12]
 800bbf6:	f000 f8f1 	bl	800bddc <HAL_SPI_TransmitReceive>
 800bbfa:	4603      	mov	r3, r0
 800bbfc:	e0ea      	b.n	800bdd4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bc04:	2b01      	cmp	r3, #1
 800bc06:	d101      	bne.n	800bc0c <HAL_SPI_Receive+0x52>
 800bc08:	2302      	movs	r3, #2
 800bc0a:	e0e3      	b.n	800bdd4 <HAL_SPI_Receive+0x21a>
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	2201      	movs	r2, #1
 800bc10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bc14:	f7fd fbd8 	bl	80093c8 <HAL_GetTick>
 800bc18:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bc20:	b2db      	uxtb	r3, r3
 800bc22:	2b01      	cmp	r3, #1
 800bc24:	d002      	beq.n	800bc2c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800bc26:	2302      	movs	r3, #2
 800bc28:	75fb      	strb	r3, [r7, #23]
    goto error;
 800bc2a:	e0ca      	b.n	800bdc2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800bc2c:	68bb      	ldr	r3, [r7, #8]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d002      	beq.n	800bc38 <HAL_SPI_Receive+0x7e>
 800bc32:	88fb      	ldrh	r3, [r7, #6]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d102      	bne.n	800bc3e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800bc38:	2301      	movs	r3, #1
 800bc3a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800bc3c:	e0c1      	b.n	800bdc2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	2204      	movs	r2, #4
 800bc42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	2200      	movs	r2, #0
 800bc4a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	68ba      	ldr	r2, [r7, #8]
 800bc50:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	88fa      	ldrh	r2, [r7, #6]
 800bc56:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	88fa      	ldrh	r2, [r7, #6]
 800bc5c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	2200      	movs	r2, #0
 800bc62:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	2200      	movs	r2, #0
 800bc68:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	2200      	movs	r2, #0
 800bc74:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	2200      	movs	r2, #0
 800bc7a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	689b      	ldr	r3, [r3, #8]
 800bc80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bc84:	d10f      	bne.n	800bca6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	681a      	ldr	r2, [r3, #0]
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bc94:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	681a      	ldr	r2, [r3, #0]
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800bca4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcb0:	2b40      	cmp	r3, #64	; 0x40
 800bcb2:	d007      	beq.n	800bcc4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	681a      	ldr	r2, [r3, #0]
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bcc2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	68db      	ldr	r3, [r3, #12]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d162      	bne.n	800bd92 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800bccc:	e02e      	b.n	800bd2c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	689b      	ldr	r3, [r3, #8]
 800bcd4:	f003 0301 	and.w	r3, r3, #1
 800bcd8:	2b01      	cmp	r3, #1
 800bcda:	d115      	bne.n	800bd08 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	f103 020c 	add.w	r2, r3, #12
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bce8:	7812      	ldrb	r2, [r2, #0]
 800bcea:	b2d2      	uxtb	r2, r2
 800bcec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcf2:	1c5a      	adds	r2, r3, #1
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bcfc:	b29b      	uxth	r3, r3
 800bcfe:	3b01      	subs	r3, #1
 800bd00:	b29a      	uxth	r2, r3
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bd06:	e011      	b.n	800bd2c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bd08:	f7fd fb5e 	bl	80093c8 <HAL_GetTick>
 800bd0c:	4602      	mov	r2, r0
 800bd0e:	693b      	ldr	r3, [r7, #16]
 800bd10:	1ad3      	subs	r3, r2, r3
 800bd12:	683a      	ldr	r2, [r7, #0]
 800bd14:	429a      	cmp	r2, r3
 800bd16:	d803      	bhi.n	800bd20 <HAL_SPI_Receive+0x166>
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd1e:	d102      	bne.n	800bd26 <HAL_SPI_Receive+0x16c>
 800bd20:	683b      	ldr	r3, [r7, #0]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d102      	bne.n	800bd2c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800bd26:	2303      	movs	r3, #3
 800bd28:	75fb      	strb	r3, [r7, #23]
          goto error;
 800bd2a:	e04a      	b.n	800bdc2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bd30:	b29b      	uxth	r3, r3
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d1cb      	bne.n	800bcce <HAL_SPI_Receive+0x114>
 800bd36:	e031      	b.n	800bd9c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	689b      	ldr	r3, [r3, #8]
 800bd3e:	f003 0301 	and.w	r3, r3, #1
 800bd42:	2b01      	cmp	r3, #1
 800bd44:	d113      	bne.n	800bd6e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	68da      	ldr	r2, [r3, #12]
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd50:	b292      	uxth	r2, r2
 800bd52:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd58:	1c9a      	adds	r2, r3, #2
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bd62:	b29b      	uxth	r3, r3
 800bd64:	3b01      	subs	r3, #1
 800bd66:	b29a      	uxth	r2, r3
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bd6c:	e011      	b.n	800bd92 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bd6e:	f7fd fb2b 	bl	80093c8 <HAL_GetTick>
 800bd72:	4602      	mov	r2, r0
 800bd74:	693b      	ldr	r3, [r7, #16]
 800bd76:	1ad3      	subs	r3, r2, r3
 800bd78:	683a      	ldr	r2, [r7, #0]
 800bd7a:	429a      	cmp	r2, r3
 800bd7c:	d803      	bhi.n	800bd86 <HAL_SPI_Receive+0x1cc>
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd84:	d102      	bne.n	800bd8c <HAL_SPI_Receive+0x1d2>
 800bd86:	683b      	ldr	r3, [r7, #0]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d102      	bne.n	800bd92 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800bd8c:	2303      	movs	r3, #3
 800bd8e:	75fb      	strb	r3, [r7, #23]
          goto error;
 800bd90:	e017      	b.n	800bdc2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bd96:	b29b      	uxth	r3, r3
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d1cd      	bne.n	800bd38 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bd9c:	693a      	ldr	r2, [r7, #16]
 800bd9e:	6839      	ldr	r1, [r7, #0]
 800bda0:	68f8      	ldr	r0, [r7, #12]
 800bda2:	f000 fa45 	bl	800c230 <SPI_EndRxTransaction>
 800bda6:	4603      	mov	r3, r0
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d002      	beq.n	800bdb2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	2220      	movs	r2, #32
 800bdb0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d002      	beq.n	800bdc0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800bdba:	2301      	movs	r3, #1
 800bdbc:	75fb      	strb	r3, [r7, #23]
 800bdbe:	e000      	b.n	800bdc2 <HAL_SPI_Receive+0x208>
  }

error :
 800bdc0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	2201      	movs	r2, #1
 800bdc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	2200      	movs	r2, #0
 800bdce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800bdd2:	7dfb      	ldrb	r3, [r7, #23]
}
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	3718      	adds	r7, #24
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	bd80      	pop	{r7, pc}

0800bddc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b08c      	sub	sp, #48	; 0x30
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	60f8      	str	r0, [r7, #12]
 800bde4:	60b9      	str	r1, [r7, #8]
 800bde6:	607a      	str	r2, [r7, #4]
 800bde8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800bdea:	2301      	movs	r3, #1
 800bdec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800bdee:	2300      	movs	r3, #0
 800bdf0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bdfa:	2b01      	cmp	r3, #1
 800bdfc:	d101      	bne.n	800be02 <HAL_SPI_TransmitReceive+0x26>
 800bdfe:	2302      	movs	r3, #2
 800be00:	e18a      	b.n	800c118 <HAL_SPI_TransmitReceive+0x33c>
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	2201      	movs	r2, #1
 800be06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800be0a:	f7fd fadd 	bl	80093c8 <HAL_GetTick>
 800be0e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800be16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	685b      	ldr	r3, [r3, #4]
 800be1e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800be20:	887b      	ldrh	r3, [r7, #2]
 800be22:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800be24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800be28:	2b01      	cmp	r3, #1
 800be2a:	d00f      	beq.n	800be4c <HAL_SPI_TransmitReceive+0x70>
 800be2c:	69fb      	ldr	r3, [r7, #28]
 800be2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800be32:	d107      	bne.n	800be44 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	689b      	ldr	r3, [r3, #8]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d103      	bne.n	800be44 <HAL_SPI_TransmitReceive+0x68>
 800be3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800be40:	2b04      	cmp	r3, #4
 800be42:	d003      	beq.n	800be4c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800be44:	2302      	movs	r3, #2
 800be46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800be4a:	e15b      	b.n	800c104 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800be4c:	68bb      	ldr	r3, [r7, #8]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d005      	beq.n	800be5e <HAL_SPI_TransmitReceive+0x82>
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d002      	beq.n	800be5e <HAL_SPI_TransmitReceive+0x82>
 800be58:	887b      	ldrh	r3, [r7, #2]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d103      	bne.n	800be66 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800be5e:	2301      	movs	r3, #1
 800be60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800be64:	e14e      	b.n	800c104 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800be6c:	b2db      	uxtb	r3, r3
 800be6e:	2b04      	cmp	r3, #4
 800be70:	d003      	beq.n	800be7a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	2205      	movs	r2, #5
 800be76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	2200      	movs	r2, #0
 800be7e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	687a      	ldr	r2, [r7, #4]
 800be84:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	887a      	ldrh	r2, [r7, #2]
 800be8a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	887a      	ldrh	r2, [r7, #2]
 800be90:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	68ba      	ldr	r2, [r7, #8]
 800be96:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	887a      	ldrh	r2, [r7, #2]
 800be9c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	887a      	ldrh	r2, [r7, #2]
 800bea2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	2200      	movs	r2, #0
 800bea8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	2200      	movs	r2, #0
 800beae:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800beba:	2b40      	cmp	r3, #64	; 0x40
 800bebc:	d007      	beq.n	800bece <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	681a      	ldr	r2, [r3, #0]
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800becc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	68db      	ldr	r3, [r3, #12]
 800bed2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bed6:	d178      	bne.n	800bfca <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	685b      	ldr	r3, [r3, #4]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d002      	beq.n	800bee6 <HAL_SPI_TransmitReceive+0x10a>
 800bee0:	8b7b      	ldrh	r3, [r7, #26]
 800bee2:	2b01      	cmp	r3, #1
 800bee4:	d166      	bne.n	800bfb4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800beea:	881a      	ldrh	r2, [r3, #0]
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bef6:	1c9a      	adds	r2, r3, #2
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bf00:	b29b      	uxth	r3, r3
 800bf02:	3b01      	subs	r3, #1
 800bf04:	b29a      	uxth	r2, r3
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bf0a:	e053      	b.n	800bfb4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	689b      	ldr	r3, [r3, #8]
 800bf12:	f003 0302 	and.w	r3, r3, #2
 800bf16:	2b02      	cmp	r3, #2
 800bf18:	d11b      	bne.n	800bf52 <HAL_SPI_TransmitReceive+0x176>
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bf1e:	b29b      	uxth	r3, r3
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d016      	beq.n	800bf52 <HAL_SPI_TransmitReceive+0x176>
 800bf24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf26:	2b01      	cmp	r3, #1
 800bf28:	d113      	bne.n	800bf52 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf2e:	881a      	ldrh	r2, [r3, #0]
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf3a:	1c9a      	adds	r2, r3, #2
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bf44:	b29b      	uxth	r3, r3
 800bf46:	3b01      	subs	r3, #1
 800bf48:	b29a      	uxth	r2, r3
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800bf4e:	2300      	movs	r3, #0
 800bf50:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	689b      	ldr	r3, [r3, #8]
 800bf58:	f003 0301 	and.w	r3, r3, #1
 800bf5c:	2b01      	cmp	r3, #1
 800bf5e:	d119      	bne.n	800bf94 <HAL_SPI_TransmitReceive+0x1b8>
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bf64:	b29b      	uxth	r3, r3
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d014      	beq.n	800bf94 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	68da      	ldr	r2, [r3, #12]
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf74:	b292      	uxth	r2, r2
 800bf76:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf7c:	1c9a      	adds	r2, r3, #2
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bf86:	b29b      	uxth	r3, r3
 800bf88:	3b01      	subs	r3, #1
 800bf8a:	b29a      	uxth	r2, r3
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800bf90:	2301      	movs	r3, #1
 800bf92:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800bf94:	f7fd fa18 	bl	80093c8 <HAL_GetTick>
 800bf98:	4602      	mov	r2, r0
 800bf9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf9c:	1ad3      	subs	r3, r2, r3
 800bf9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bfa0:	429a      	cmp	r2, r3
 800bfa2:	d807      	bhi.n	800bfb4 <HAL_SPI_TransmitReceive+0x1d8>
 800bfa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfaa:	d003      	beq.n	800bfb4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800bfac:	2303      	movs	r3, #3
 800bfae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800bfb2:	e0a7      	b.n	800c104 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bfb8:	b29b      	uxth	r3, r3
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d1a6      	bne.n	800bf0c <HAL_SPI_TransmitReceive+0x130>
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bfc2:	b29b      	uxth	r3, r3
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d1a1      	bne.n	800bf0c <HAL_SPI_TransmitReceive+0x130>
 800bfc8:	e07c      	b.n	800c0c4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	685b      	ldr	r3, [r3, #4]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d002      	beq.n	800bfd8 <HAL_SPI_TransmitReceive+0x1fc>
 800bfd2:	8b7b      	ldrh	r3, [r7, #26]
 800bfd4:	2b01      	cmp	r3, #1
 800bfd6:	d16b      	bne.n	800c0b0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	330c      	adds	r3, #12
 800bfe2:	7812      	ldrb	r2, [r2, #0]
 800bfe4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfea:	1c5a      	adds	r2, r3, #1
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bff4:	b29b      	uxth	r3, r3
 800bff6:	3b01      	subs	r3, #1
 800bff8:	b29a      	uxth	r2, r3
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bffe:	e057      	b.n	800c0b0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	689b      	ldr	r3, [r3, #8]
 800c006:	f003 0302 	and.w	r3, r3, #2
 800c00a:	2b02      	cmp	r3, #2
 800c00c:	d11c      	bne.n	800c048 <HAL_SPI_TransmitReceive+0x26c>
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c012:	b29b      	uxth	r3, r3
 800c014:	2b00      	cmp	r3, #0
 800c016:	d017      	beq.n	800c048 <HAL_SPI_TransmitReceive+0x26c>
 800c018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c01a:	2b01      	cmp	r3, #1
 800c01c:	d114      	bne.n	800c048 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	330c      	adds	r3, #12
 800c028:	7812      	ldrb	r2, [r2, #0]
 800c02a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c030:	1c5a      	adds	r2, r3, #1
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c03a:	b29b      	uxth	r3, r3
 800c03c:	3b01      	subs	r3, #1
 800c03e:	b29a      	uxth	r2, r3
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c044:	2300      	movs	r3, #0
 800c046:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	689b      	ldr	r3, [r3, #8]
 800c04e:	f003 0301 	and.w	r3, r3, #1
 800c052:	2b01      	cmp	r3, #1
 800c054:	d119      	bne.n	800c08a <HAL_SPI_TransmitReceive+0x2ae>
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c05a:	b29b      	uxth	r3, r3
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d014      	beq.n	800c08a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	68da      	ldr	r2, [r3, #12]
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c06a:	b2d2      	uxtb	r2, r2
 800c06c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c072:	1c5a      	adds	r2, r3, #1
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c07c:	b29b      	uxth	r3, r3
 800c07e:	3b01      	subs	r3, #1
 800c080:	b29a      	uxth	r2, r3
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c086:	2301      	movs	r3, #1
 800c088:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800c08a:	f7fd f99d 	bl	80093c8 <HAL_GetTick>
 800c08e:	4602      	mov	r2, r0
 800c090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c092:	1ad3      	subs	r3, r2, r3
 800c094:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c096:	429a      	cmp	r2, r3
 800c098:	d803      	bhi.n	800c0a2 <HAL_SPI_TransmitReceive+0x2c6>
 800c09a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c09c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0a0:	d102      	bne.n	800c0a8 <HAL_SPI_TransmitReceive+0x2cc>
 800c0a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d103      	bne.n	800c0b0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800c0a8:	2303      	movs	r3, #3
 800c0aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c0ae:	e029      	b.n	800c104 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c0b4:	b29b      	uxth	r3, r3
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d1a2      	bne.n	800c000 <HAL_SPI_TransmitReceive+0x224>
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c0be:	b29b      	uxth	r3, r3
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d19d      	bne.n	800c000 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c0c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c0c8:	68f8      	ldr	r0, [r7, #12]
 800c0ca:	f000 f917 	bl	800c2fc <SPI_EndRxTxTransaction>
 800c0ce:	4603      	mov	r3, r0
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d006      	beq.n	800c0e2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800c0d4:	2301      	movs	r3, #1
 800c0d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	2220      	movs	r2, #32
 800c0de:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800c0e0:	e010      	b.n	800c104 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	689b      	ldr	r3, [r3, #8]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d10b      	bne.n	800c102 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	617b      	str	r3, [r7, #20]
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	68db      	ldr	r3, [r3, #12]
 800c0f4:	617b      	str	r3, [r7, #20]
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	689b      	ldr	r3, [r3, #8]
 800c0fc:	617b      	str	r3, [r7, #20]
 800c0fe:	697b      	ldr	r3, [r7, #20]
 800c100:	e000      	b.n	800c104 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800c102:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	2201      	movs	r2, #1
 800c108:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	2200      	movs	r2, #0
 800c110:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c114:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800c118:	4618      	mov	r0, r3
 800c11a:	3730      	adds	r7, #48	; 0x30
 800c11c:	46bd      	mov	sp, r7
 800c11e:	bd80      	pop	{r7, pc}

0800c120 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b088      	sub	sp, #32
 800c124:	af00      	add	r7, sp, #0
 800c126:	60f8      	str	r0, [r7, #12]
 800c128:	60b9      	str	r1, [r7, #8]
 800c12a:	603b      	str	r3, [r7, #0]
 800c12c:	4613      	mov	r3, r2
 800c12e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800c130:	f7fd f94a 	bl	80093c8 <HAL_GetTick>
 800c134:	4602      	mov	r2, r0
 800c136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c138:	1a9b      	subs	r3, r3, r2
 800c13a:	683a      	ldr	r2, [r7, #0]
 800c13c:	4413      	add	r3, r2
 800c13e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800c140:	f7fd f942 	bl	80093c8 <HAL_GetTick>
 800c144:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800c146:	4b39      	ldr	r3, [pc, #228]	; (800c22c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	015b      	lsls	r3, r3, #5
 800c14c:	0d1b      	lsrs	r3, r3, #20
 800c14e:	69fa      	ldr	r2, [r7, #28]
 800c150:	fb02 f303 	mul.w	r3, r2, r3
 800c154:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c156:	e054      	b.n	800c202 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c158:	683b      	ldr	r3, [r7, #0]
 800c15a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c15e:	d050      	beq.n	800c202 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c160:	f7fd f932 	bl	80093c8 <HAL_GetTick>
 800c164:	4602      	mov	r2, r0
 800c166:	69bb      	ldr	r3, [r7, #24]
 800c168:	1ad3      	subs	r3, r2, r3
 800c16a:	69fa      	ldr	r2, [r7, #28]
 800c16c:	429a      	cmp	r2, r3
 800c16e:	d902      	bls.n	800c176 <SPI_WaitFlagStateUntilTimeout+0x56>
 800c170:	69fb      	ldr	r3, [r7, #28]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d13d      	bne.n	800c1f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	685a      	ldr	r2, [r3, #4]
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c184:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	685b      	ldr	r3, [r3, #4]
 800c18a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c18e:	d111      	bne.n	800c1b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	689b      	ldr	r3, [r3, #8]
 800c194:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c198:	d004      	beq.n	800c1a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	689b      	ldr	r3, [r3, #8]
 800c19e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c1a2:	d107      	bne.n	800c1b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	681a      	ldr	r2, [r3, #0]
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c1b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c1bc:	d10f      	bne.n	800c1de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	681a      	ldr	r2, [r3, #0]
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c1cc:	601a      	str	r2, [r3, #0]
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	681a      	ldr	r2, [r3, #0]
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c1dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	2201      	movs	r2, #1
 800c1e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800c1ee:	2303      	movs	r3, #3
 800c1f0:	e017      	b.n	800c222 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800c1f2:	697b      	ldr	r3, [r7, #20]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d101      	bne.n	800c1fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800c1fc:	697b      	ldr	r3, [r7, #20]
 800c1fe:	3b01      	subs	r3, #1
 800c200:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	689a      	ldr	r2, [r3, #8]
 800c208:	68bb      	ldr	r3, [r7, #8]
 800c20a:	4013      	ands	r3, r2
 800c20c:	68ba      	ldr	r2, [r7, #8]
 800c20e:	429a      	cmp	r2, r3
 800c210:	bf0c      	ite	eq
 800c212:	2301      	moveq	r3, #1
 800c214:	2300      	movne	r3, #0
 800c216:	b2db      	uxtb	r3, r3
 800c218:	461a      	mov	r2, r3
 800c21a:	79fb      	ldrb	r3, [r7, #7]
 800c21c:	429a      	cmp	r2, r3
 800c21e:	d19b      	bne.n	800c158 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800c220:	2300      	movs	r3, #0
}
 800c222:	4618      	mov	r0, r3
 800c224:	3720      	adds	r7, #32
 800c226:	46bd      	mov	sp, r7
 800c228:	bd80      	pop	{r7, pc}
 800c22a:	bf00      	nop
 800c22c:	20000070 	.word	0x20000070

0800c230 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b086      	sub	sp, #24
 800c234:	af02      	add	r7, sp, #8
 800c236:	60f8      	str	r0, [r7, #12]
 800c238:	60b9      	str	r1, [r7, #8]
 800c23a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	685b      	ldr	r3, [r3, #4]
 800c240:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c244:	d111      	bne.n	800c26a <SPI_EndRxTransaction+0x3a>
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	689b      	ldr	r3, [r3, #8]
 800c24a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c24e:	d004      	beq.n	800c25a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	689b      	ldr	r3, [r3, #8]
 800c254:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c258:	d107      	bne.n	800c26a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	681a      	ldr	r2, [r3, #0]
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c268:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	685b      	ldr	r3, [r3, #4]
 800c26e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c272:	d12a      	bne.n	800c2ca <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	689b      	ldr	r3, [r3, #8]
 800c278:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c27c:	d012      	beq.n	800c2a4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	9300      	str	r3, [sp, #0]
 800c282:	68bb      	ldr	r3, [r7, #8]
 800c284:	2200      	movs	r2, #0
 800c286:	2180      	movs	r1, #128	; 0x80
 800c288:	68f8      	ldr	r0, [r7, #12]
 800c28a:	f7ff ff49 	bl	800c120 <SPI_WaitFlagStateUntilTimeout>
 800c28e:	4603      	mov	r3, r0
 800c290:	2b00      	cmp	r3, #0
 800c292:	d02d      	beq.n	800c2f0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c298:	f043 0220 	orr.w	r2, r3, #32
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800c2a0:	2303      	movs	r3, #3
 800c2a2:	e026      	b.n	800c2f2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	9300      	str	r3, [sp, #0]
 800c2a8:	68bb      	ldr	r3, [r7, #8]
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	2101      	movs	r1, #1
 800c2ae:	68f8      	ldr	r0, [r7, #12]
 800c2b0:	f7ff ff36 	bl	800c120 <SPI_WaitFlagStateUntilTimeout>
 800c2b4:	4603      	mov	r3, r0
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d01a      	beq.n	800c2f0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2be:	f043 0220 	orr.w	r2, r3, #32
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800c2c6:	2303      	movs	r3, #3
 800c2c8:	e013      	b.n	800c2f2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	9300      	str	r3, [sp, #0]
 800c2ce:	68bb      	ldr	r3, [r7, #8]
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	2101      	movs	r1, #1
 800c2d4:	68f8      	ldr	r0, [r7, #12]
 800c2d6:	f7ff ff23 	bl	800c120 <SPI_WaitFlagStateUntilTimeout>
 800c2da:	4603      	mov	r3, r0
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d007      	beq.n	800c2f0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2e4:	f043 0220 	orr.w	r2, r3, #32
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c2ec:	2303      	movs	r3, #3
 800c2ee:	e000      	b.n	800c2f2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800c2f0:	2300      	movs	r3, #0
}
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	3710      	adds	r7, #16
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	bd80      	pop	{r7, pc}
	...

0800c2fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b088      	sub	sp, #32
 800c300:	af02      	add	r7, sp, #8
 800c302:	60f8      	str	r0, [r7, #12]
 800c304:	60b9      	str	r1, [r7, #8]
 800c306:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800c308:	4b1b      	ldr	r3, [pc, #108]	; (800c378 <SPI_EndRxTxTransaction+0x7c>)
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	4a1b      	ldr	r2, [pc, #108]	; (800c37c <SPI_EndRxTxTransaction+0x80>)
 800c30e:	fba2 2303 	umull	r2, r3, r2, r3
 800c312:	0d5b      	lsrs	r3, r3, #21
 800c314:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c318:	fb02 f303 	mul.w	r3, r2, r3
 800c31c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	685b      	ldr	r3, [r3, #4]
 800c322:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c326:	d112      	bne.n	800c34e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	9300      	str	r3, [sp, #0]
 800c32c:	68bb      	ldr	r3, [r7, #8]
 800c32e:	2200      	movs	r2, #0
 800c330:	2180      	movs	r1, #128	; 0x80
 800c332:	68f8      	ldr	r0, [r7, #12]
 800c334:	f7ff fef4 	bl	800c120 <SPI_WaitFlagStateUntilTimeout>
 800c338:	4603      	mov	r3, r0
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d016      	beq.n	800c36c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c342:	f043 0220 	orr.w	r2, r3, #32
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c34a:	2303      	movs	r3, #3
 800c34c:	e00f      	b.n	800c36e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800c34e:	697b      	ldr	r3, [r7, #20]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d00a      	beq.n	800c36a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800c354:	697b      	ldr	r3, [r7, #20]
 800c356:	3b01      	subs	r3, #1
 800c358:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	689b      	ldr	r3, [r3, #8]
 800c360:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c364:	2b80      	cmp	r3, #128	; 0x80
 800c366:	d0f2      	beq.n	800c34e <SPI_EndRxTxTransaction+0x52>
 800c368:	e000      	b.n	800c36c <SPI_EndRxTxTransaction+0x70>
        break;
 800c36a:	bf00      	nop
  }

  return HAL_OK;
 800c36c:	2300      	movs	r3, #0
}
 800c36e:	4618      	mov	r0, r3
 800c370:	3718      	adds	r7, #24
 800c372:	46bd      	mov	sp, r7
 800c374:	bd80      	pop	{r7, pc}
 800c376:	bf00      	nop
 800c378:	20000070 	.word	0x20000070
 800c37c:	165e9f81 	.word	0x165e9f81

0800c380 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c380:	b084      	sub	sp, #16
 800c382:	b580      	push	{r7, lr}
 800c384:	b084      	sub	sp, #16
 800c386:	af00      	add	r7, sp, #0
 800c388:	6078      	str	r0, [r7, #4]
 800c38a:	f107 001c 	add.w	r0, r7, #28
 800c38e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c394:	2b01      	cmp	r3, #1
 800c396:	d122      	bne.n	800c3de <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c39c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	68db      	ldr	r3, [r3, #12]
 800c3a8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800c3ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c3b0:	687a      	ldr	r2, [r7, #4]
 800c3b2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	68db      	ldr	r3, [r3, #12]
 800c3b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c3c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3c2:	2b01      	cmp	r3, #1
 800c3c4:	d105      	bne.n	800c3d2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	68db      	ldr	r3, [r3, #12]
 800c3ca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c3d2:	6878      	ldr	r0, [r7, #4]
 800c3d4:	f001 fbee 	bl	800dbb4 <USB_CoreReset>
 800c3d8:	4603      	mov	r3, r0
 800c3da:	73fb      	strb	r3, [r7, #15]
 800c3dc:	e01a      	b.n	800c414 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	68db      	ldr	r3, [r3, #12]
 800c3e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c3ea:	6878      	ldr	r0, [r7, #4]
 800c3ec:	f001 fbe2 	bl	800dbb4 <USB_CoreReset>
 800c3f0:	4603      	mov	r3, r0
 800c3f2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c3f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d106      	bne.n	800c408 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3fe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	639a      	str	r2, [r3, #56]	; 0x38
 800c406:	e005      	b.n	800c414 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c40c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c416:	2b01      	cmp	r3, #1
 800c418:	d10b      	bne.n	800c432 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	689b      	ldr	r3, [r3, #8]
 800c41e:	f043 0206 	orr.w	r2, r3, #6
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	689b      	ldr	r3, [r3, #8]
 800c42a:	f043 0220 	orr.w	r2, r3, #32
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c432:	7bfb      	ldrb	r3, [r7, #15]
}
 800c434:	4618      	mov	r0, r3
 800c436:	3710      	adds	r7, #16
 800c438:	46bd      	mov	sp, r7
 800c43a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c43e:	b004      	add	sp, #16
 800c440:	4770      	bx	lr
	...

0800c444 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800c444:	b480      	push	{r7}
 800c446:	b087      	sub	sp, #28
 800c448:	af00      	add	r7, sp, #0
 800c44a:	60f8      	str	r0, [r7, #12]
 800c44c:	60b9      	str	r1, [r7, #8]
 800c44e:	4613      	mov	r3, r2
 800c450:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800c452:	79fb      	ldrb	r3, [r7, #7]
 800c454:	2b02      	cmp	r3, #2
 800c456:	d165      	bne.n	800c524 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800c458:	68bb      	ldr	r3, [r7, #8]
 800c45a:	4a41      	ldr	r2, [pc, #260]	; (800c560 <USB_SetTurnaroundTime+0x11c>)
 800c45c:	4293      	cmp	r3, r2
 800c45e:	d906      	bls.n	800c46e <USB_SetTurnaroundTime+0x2a>
 800c460:	68bb      	ldr	r3, [r7, #8]
 800c462:	4a40      	ldr	r2, [pc, #256]	; (800c564 <USB_SetTurnaroundTime+0x120>)
 800c464:	4293      	cmp	r3, r2
 800c466:	d202      	bcs.n	800c46e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800c468:	230f      	movs	r3, #15
 800c46a:	617b      	str	r3, [r7, #20]
 800c46c:	e062      	b.n	800c534 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800c46e:	68bb      	ldr	r3, [r7, #8]
 800c470:	4a3c      	ldr	r2, [pc, #240]	; (800c564 <USB_SetTurnaroundTime+0x120>)
 800c472:	4293      	cmp	r3, r2
 800c474:	d306      	bcc.n	800c484 <USB_SetTurnaroundTime+0x40>
 800c476:	68bb      	ldr	r3, [r7, #8]
 800c478:	4a3b      	ldr	r2, [pc, #236]	; (800c568 <USB_SetTurnaroundTime+0x124>)
 800c47a:	4293      	cmp	r3, r2
 800c47c:	d202      	bcs.n	800c484 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800c47e:	230e      	movs	r3, #14
 800c480:	617b      	str	r3, [r7, #20]
 800c482:	e057      	b.n	800c534 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800c484:	68bb      	ldr	r3, [r7, #8]
 800c486:	4a38      	ldr	r2, [pc, #224]	; (800c568 <USB_SetTurnaroundTime+0x124>)
 800c488:	4293      	cmp	r3, r2
 800c48a:	d306      	bcc.n	800c49a <USB_SetTurnaroundTime+0x56>
 800c48c:	68bb      	ldr	r3, [r7, #8]
 800c48e:	4a37      	ldr	r2, [pc, #220]	; (800c56c <USB_SetTurnaroundTime+0x128>)
 800c490:	4293      	cmp	r3, r2
 800c492:	d202      	bcs.n	800c49a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800c494:	230d      	movs	r3, #13
 800c496:	617b      	str	r3, [r7, #20]
 800c498:	e04c      	b.n	800c534 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800c49a:	68bb      	ldr	r3, [r7, #8]
 800c49c:	4a33      	ldr	r2, [pc, #204]	; (800c56c <USB_SetTurnaroundTime+0x128>)
 800c49e:	4293      	cmp	r3, r2
 800c4a0:	d306      	bcc.n	800c4b0 <USB_SetTurnaroundTime+0x6c>
 800c4a2:	68bb      	ldr	r3, [r7, #8]
 800c4a4:	4a32      	ldr	r2, [pc, #200]	; (800c570 <USB_SetTurnaroundTime+0x12c>)
 800c4a6:	4293      	cmp	r3, r2
 800c4a8:	d802      	bhi.n	800c4b0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800c4aa:	230c      	movs	r3, #12
 800c4ac:	617b      	str	r3, [r7, #20]
 800c4ae:	e041      	b.n	800c534 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800c4b0:	68bb      	ldr	r3, [r7, #8]
 800c4b2:	4a2f      	ldr	r2, [pc, #188]	; (800c570 <USB_SetTurnaroundTime+0x12c>)
 800c4b4:	4293      	cmp	r3, r2
 800c4b6:	d906      	bls.n	800c4c6 <USB_SetTurnaroundTime+0x82>
 800c4b8:	68bb      	ldr	r3, [r7, #8]
 800c4ba:	4a2e      	ldr	r2, [pc, #184]	; (800c574 <USB_SetTurnaroundTime+0x130>)
 800c4bc:	4293      	cmp	r3, r2
 800c4be:	d802      	bhi.n	800c4c6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800c4c0:	230b      	movs	r3, #11
 800c4c2:	617b      	str	r3, [r7, #20]
 800c4c4:	e036      	b.n	800c534 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800c4c6:	68bb      	ldr	r3, [r7, #8]
 800c4c8:	4a2a      	ldr	r2, [pc, #168]	; (800c574 <USB_SetTurnaroundTime+0x130>)
 800c4ca:	4293      	cmp	r3, r2
 800c4cc:	d906      	bls.n	800c4dc <USB_SetTurnaroundTime+0x98>
 800c4ce:	68bb      	ldr	r3, [r7, #8]
 800c4d0:	4a29      	ldr	r2, [pc, #164]	; (800c578 <USB_SetTurnaroundTime+0x134>)
 800c4d2:	4293      	cmp	r3, r2
 800c4d4:	d802      	bhi.n	800c4dc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800c4d6:	230a      	movs	r3, #10
 800c4d8:	617b      	str	r3, [r7, #20]
 800c4da:	e02b      	b.n	800c534 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800c4dc:	68bb      	ldr	r3, [r7, #8]
 800c4de:	4a26      	ldr	r2, [pc, #152]	; (800c578 <USB_SetTurnaroundTime+0x134>)
 800c4e0:	4293      	cmp	r3, r2
 800c4e2:	d906      	bls.n	800c4f2 <USB_SetTurnaroundTime+0xae>
 800c4e4:	68bb      	ldr	r3, [r7, #8]
 800c4e6:	4a25      	ldr	r2, [pc, #148]	; (800c57c <USB_SetTurnaroundTime+0x138>)
 800c4e8:	4293      	cmp	r3, r2
 800c4ea:	d202      	bcs.n	800c4f2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800c4ec:	2309      	movs	r3, #9
 800c4ee:	617b      	str	r3, [r7, #20]
 800c4f0:	e020      	b.n	800c534 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800c4f2:	68bb      	ldr	r3, [r7, #8]
 800c4f4:	4a21      	ldr	r2, [pc, #132]	; (800c57c <USB_SetTurnaroundTime+0x138>)
 800c4f6:	4293      	cmp	r3, r2
 800c4f8:	d306      	bcc.n	800c508 <USB_SetTurnaroundTime+0xc4>
 800c4fa:	68bb      	ldr	r3, [r7, #8]
 800c4fc:	4a20      	ldr	r2, [pc, #128]	; (800c580 <USB_SetTurnaroundTime+0x13c>)
 800c4fe:	4293      	cmp	r3, r2
 800c500:	d802      	bhi.n	800c508 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800c502:	2308      	movs	r3, #8
 800c504:	617b      	str	r3, [r7, #20]
 800c506:	e015      	b.n	800c534 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800c508:	68bb      	ldr	r3, [r7, #8]
 800c50a:	4a1d      	ldr	r2, [pc, #116]	; (800c580 <USB_SetTurnaroundTime+0x13c>)
 800c50c:	4293      	cmp	r3, r2
 800c50e:	d906      	bls.n	800c51e <USB_SetTurnaroundTime+0xda>
 800c510:	68bb      	ldr	r3, [r7, #8]
 800c512:	4a1c      	ldr	r2, [pc, #112]	; (800c584 <USB_SetTurnaroundTime+0x140>)
 800c514:	4293      	cmp	r3, r2
 800c516:	d202      	bcs.n	800c51e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800c518:	2307      	movs	r3, #7
 800c51a:	617b      	str	r3, [r7, #20]
 800c51c:	e00a      	b.n	800c534 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800c51e:	2306      	movs	r3, #6
 800c520:	617b      	str	r3, [r7, #20]
 800c522:	e007      	b.n	800c534 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800c524:	79fb      	ldrb	r3, [r7, #7]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d102      	bne.n	800c530 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800c52a:	2309      	movs	r3, #9
 800c52c:	617b      	str	r3, [r7, #20]
 800c52e:	e001      	b.n	800c534 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800c530:	2309      	movs	r3, #9
 800c532:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	68db      	ldr	r3, [r3, #12]
 800c538:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	68da      	ldr	r2, [r3, #12]
 800c544:	697b      	ldr	r3, [r7, #20]
 800c546:	029b      	lsls	r3, r3, #10
 800c548:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800c54c:	431a      	orrs	r2, r3
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c552:	2300      	movs	r3, #0
}
 800c554:	4618      	mov	r0, r3
 800c556:	371c      	adds	r7, #28
 800c558:	46bd      	mov	sp, r7
 800c55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55e:	4770      	bx	lr
 800c560:	00d8acbf 	.word	0x00d8acbf
 800c564:	00e4e1c0 	.word	0x00e4e1c0
 800c568:	00f42400 	.word	0x00f42400
 800c56c:	01067380 	.word	0x01067380
 800c570:	011a499f 	.word	0x011a499f
 800c574:	01312cff 	.word	0x01312cff
 800c578:	014ca43f 	.word	0x014ca43f
 800c57c:	016e3600 	.word	0x016e3600
 800c580:	01a6ab1f 	.word	0x01a6ab1f
 800c584:	01e84800 	.word	0x01e84800

0800c588 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c588:	b480      	push	{r7}
 800c58a:	b083      	sub	sp, #12
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	689b      	ldr	r3, [r3, #8]
 800c594:	f043 0201 	orr.w	r2, r3, #1
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c59c:	2300      	movs	r3, #0
}
 800c59e:	4618      	mov	r0, r3
 800c5a0:	370c      	adds	r7, #12
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a8:	4770      	bx	lr

0800c5aa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c5aa:	b480      	push	{r7}
 800c5ac:	b083      	sub	sp, #12
 800c5ae:	af00      	add	r7, sp, #0
 800c5b0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	689b      	ldr	r3, [r3, #8]
 800c5b6:	f023 0201 	bic.w	r2, r3, #1
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c5be:	2300      	movs	r3, #0
}
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	370c      	adds	r7, #12
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ca:	4770      	bx	lr

0800c5cc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	b084      	sub	sp, #16
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
 800c5d4:	460b      	mov	r3, r1
 800c5d6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800c5d8:	2300      	movs	r3, #0
 800c5da:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	68db      	ldr	r3, [r3, #12]
 800c5e0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c5e8:	78fb      	ldrb	r3, [r7, #3]
 800c5ea:	2b01      	cmp	r3, #1
 800c5ec:	d115      	bne.n	800c61a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	68db      	ldr	r3, [r3, #12]
 800c5f2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c5fa:	2001      	movs	r0, #1
 800c5fc:	f7fc fef0 	bl	80093e0 <HAL_Delay>
      ms++;
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	3301      	adds	r3, #1
 800c604:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800c606:	6878      	ldr	r0, [r7, #4]
 800c608:	f001 fa45 	bl	800da96 <USB_GetMode>
 800c60c:	4603      	mov	r3, r0
 800c60e:	2b01      	cmp	r3, #1
 800c610:	d01e      	beq.n	800c650 <USB_SetCurrentMode+0x84>
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	2b31      	cmp	r3, #49	; 0x31
 800c616:	d9f0      	bls.n	800c5fa <USB_SetCurrentMode+0x2e>
 800c618:	e01a      	b.n	800c650 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800c61a:	78fb      	ldrb	r3, [r7, #3]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d115      	bne.n	800c64c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	68db      	ldr	r3, [r3, #12]
 800c624:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c62c:	2001      	movs	r0, #1
 800c62e:	f7fc fed7 	bl	80093e0 <HAL_Delay>
      ms++;
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	3301      	adds	r3, #1
 800c636:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800c638:	6878      	ldr	r0, [r7, #4]
 800c63a:	f001 fa2c 	bl	800da96 <USB_GetMode>
 800c63e:	4603      	mov	r3, r0
 800c640:	2b00      	cmp	r3, #0
 800c642:	d005      	beq.n	800c650 <USB_SetCurrentMode+0x84>
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	2b31      	cmp	r3, #49	; 0x31
 800c648:	d9f0      	bls.n	800c62c <USB_SetCurrentMode+0x60>
 800c64a:	e001      	b.n	800c650 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800c64c:	2301      	movs	r3, #1
 800c64e:	e005      	b.n	800c65c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	2b32      	cmp	r3, #50	; 0x32
 800c654:	d101      	bne.n	800c65a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800c656:	2301      	movs	r3, #1
 800c658:	e000      	b.n	800c65c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800c65a:	2300      	movs	r3, #0
}
 800c65c:	4618      	mov	r0, r3
 800c65e:	3710      	adds	r7, #16
 800c660:	46bd      	mov	sp, r7
 800c662:	bd80      	pop	{r7, pc}

0800c664 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c664:	b084      	sub	sp, #16
 800c666:	b580      	push	{r7, lr}
 800c668:	b086      	sub	sp, #24
 800c66a:	af00      	add	r7, sp, #0
 800c66c:	6078      	str	r0, [r7, #4]
 800c66e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c672:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c676:	2300      	movs	r3, #0
 800c678:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c67e:	2300      	movs	r3, #0
 800c680:	613b      	str	r3, [r7, #16]
 800c682:	e009      	b.n	800c698 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c684:	687a      	ldr	r2, [r7, #4]
 800c686:	693b      	ldr	r3, [r7, #16]
 800c688:	3340      	adds	r3, #64	; 0x40
 800c68a:	009b      	lsls	r3, r3, #2
 800c68c:	4413      	add	r3, r2
 800c68e:	2200      	movs	r2, #0
 800c690:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c692:	693b      	ldr	r3, [r7, #16]
 800c694:	3301      	adds	r3, #1
 800c696:	613b      	str	r3, [r7, #16]
 800c698:	693b      	ldr	r3, [r7, #16]
 800c69a:	2b0e      	cmp	r3, #14
 800c69c:	d9f2      	bls.n	800c684 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c69e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d11c      	bne.n	800c6de <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c6aa:	685b      	ldr	r3, [r3, #4]
 800c6ac:	68fa      	ldr	r2, [r7, #12]
 800c6ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c6b2:	f043 0302 	orr.w	r3, r3, #2
 800c6b6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6bc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6c8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6d4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	639a      	str	r2, [r3, #56]	; 0x38
 800c6dc:	e00b      	b.n	800c6f6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6e2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6ee:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c6fc:	461a      	mov	r2, r3
 800c6fe:	2300      	movs	r3, #0
 800c700:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c708:	4619      	mov	r1, r3
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c710:	461a      	mov	r2, r3
 800c712:	680b      	ldr	r3, [r1, #0]
 800c714:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c718:	2b01      	cmp	r3, #1
 800c71a:	d10c      	bne.n	800c736 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c71c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d104      	bne.n	800c72c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c722:	2100      	movs	r1, #0
 800c724:	6878      	ldr	r0, [r7, #4]
 800c726:	f000 f965 	bl	800c9f4 <USB_SetDevSpeed>
 800c72a:	e008      	b.n	800c73e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c72c:	2101      	movs	r1, #1
 800c72e:	6878      	ldr	r0, [r7, #4]
 800c730:	f000 f960 	bl	800c9f4 <USB_SetDevSpeed>
 800c734:	e003      	b.n	800c73e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c736:	2103      	movs	r1, #3
 800c738:	6878      	ldr	r0, [r7, #4]
 800c73a:	f000 f95b 	bl	800c9f4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c73e:	2110      	movs	r1, #16
 800c740:	6878      	ldr	r0, [r7, #4]
 800c742:	f000 f8f3 	bl	800c92c <USB_FlushTxFifo>
 800c746:	4603      	mov	r3, r0
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d001      	beq.n	800c750 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800c74c:	2301      	movs	r3, #1
 800c74e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c750:	6878      	ldr	r0, [r7, #4]
 800c752:	f000 f91f 	bl	800c994 <USB_FlushRxFifo>
 800c756:	4603      	mov	r3, r0
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d001      	beq.n	800c760 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800c75c:	2301      	movs	r3, #1
 800c75e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c766:	461a      	mov	r2, r3
 800c768:	2300      	movs	r3, #0
 800c76a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c772:	461a      	mov	r2, r3
 800c774:	2300      	movs	r3, #0
 800c776:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c77e:	461a      	mov	r2, r3
 800c780:	2300      	movs	r3, #0
 800c782:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c784:	2300      	movs	r3, #0
 800c786:	613b      	str	r3, [r7, #16]
 800c788:	e043      	b.n	800c812 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c78a:	693b      	ldr	r3, [r7, #16]
 800c78c:	015a      	lsls	r2, r3, #5
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	4413      	add	r3, r2
 800c792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c79c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c7a0:	d118      	bne.n	800c7d4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800c7a2:	693b      	ldr	r3, [r7, #16]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d10a      	bne.n	800c7be <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c7a8:	693b      	ldr	r3, [r7, #16]
 800c7aa:	015a      	lsls	r2, r3, #5
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	4413      	add	r3, r2
 800c7b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7b4:	461a      	mov	r2, r3
 800c7b6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c7ba:	6013      	str	r3, [r2, #0]
 800c7bc:	e013      	b.n	800c7e6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c7be:	693b      	ldr	r3, [r7, #16]
 800c7c0:	015a      	lsls	r2, r3, #5
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	4413      	add	r3, r2
 800c7c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7ca:	461a      	mov	r2, r3
 800c7cc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c7d0:	6013      	str	r3, [r2, #0]
 800c7d2:	e008      	b.n	800c7e6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c7d4:	693b      	ldr	r3, [r7, #16]
 800c7d6:	015a      	lsls	r2, r3, #5
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	4413      	add	r3, r2
 800c7dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7e0:	461a      	mov	r2, r3
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c7e6:	693b      	ldr	r3, [r7, #16]
 800c7e8:	015a      	lsls	r2, r3, #5
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	4413      	add	r3, r2
 800c7ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7f2:	461a      	mov	r2, r3
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c7f8:	693b      	ldr	r3, [r7, #16]
 800c7fa:	015a      	lsls	r2, r3, #5
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	4413      	add	r3, r2
 800c800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c804:	461a      	mov	r2, r3
 800c806:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c80a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c80c:	693b      	ldr	r3, [r7, #16]
 800c80e:	3301      	adds	r3, #1
 800c810:	613b      	str	r3, [r7, #16]
 800c812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c814:	693a      	ldr	r2, [r7, #16]
 800c816:	429a      	cmp	r2, r3
 800c818:	d3b7      	bcc.n	800c78a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c81a:	2300      	movs	r3, #0
 800c81c:	613b      	str	r3, [r7, #16]
 800c81e:	e043      	b.n	800c8a8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c820:	693b      	ldr	r3, [r7, #16]
 800c822:	015a      	lsls	r2, r3, #5
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	4413      	add	r3, r2
 800c828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c832:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c836:	d118      	bne.n	800c86a <USB_DevInit+0x206>
    {
      if (i == 0U)
 800c838:	693b      	ldr	r3, [r7, #16]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d10a      	bne.n	800c854 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c83e:	693b      	ldr	r3, [r7, #16]
 800c840:	015a      	lsls	r2, r3, #5
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	4413      	add	r3, r2
 800c846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c84a:	461a      	mov	r2, r3
 800c84c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c850:	6013      	str	r3, [r2, #0]
 800c852:	e013      	b.n	800c87c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c854:	693b      	ldr	r3, [r7, #16]
 800c856:	015a      	lsls	r2, r3, #5
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	4413      	add	r3, r2
 800c85c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c860:	461a      	mov	r2, r3
 800c862:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c866:	6013      	str	r3, [r2, #0]
 800c868:	e008      	b.n	800c87c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c86a:	693b      	ldr	r3, [r7, #16]
 800c86c:	015a      	lsls	r2, r3, #5
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	4413      	add	r3, r2
 800c872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c876:	461a      	mov	r2, r3
 800c878:	2300      	movs	r3, #0
 800c87a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c87c:	693b      	ldr	r3, [r7, #16]
 800c87e:	015a      	lsls	r2, r3, #5
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	4413      	add	r3, r2
 800c884:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c888:	461a      	mov	r2, r3
 800c88a:	2300      	movs	r3, #0
 800c88c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c88e:	693b      	ldr	r3, [r7, #16]
 800c890:	015a      	lsls	r2, r3, #5
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	4413      	add	r3, r2
 800c896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c89a:	461a      	mov	r2, r3
 800c89c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c8a0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c8a2:	693b      	ldr	r3, [r7, #16]
 800c8a4:	3301      	adds	r3, #1
 800c8a6:	613b      	str	r3, [r7, #16]
 800c8a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8aa:	693a      	ldr	r2, [r7, #16]
 800c8ac:	429a      	cmp	r2, r3
 800c8ae:	d3b7      	bcc.n	800c820 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8b6:	691b      	ldr	r3, [r3, #16]
 800c8b8:	68fa      	ldr	r2, [r7, #12]
 800c8ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c8be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c8c2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c8d0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c8d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d105      	bne.n	800c8e4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	699b      	ldr	r3, [r3, #24]
 800c8dc:	f043 0210 	orr.w	r2, r3, #16
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	699a      	ldr	r2, [r3, #24]
 800c8e8:	4b0f      	ldr	r3, [pc, #60]	; (800c928 <USB_DevInit+0x2c4>)
 800c8ea:	4313      	orrs	r3, r2
 800c8ec:	687a      	ldr	r2, [r7, #4]
 800c8ee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c8f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d005      	beq.n	800c902 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	699b      	ldr	r3, [r3, #24]
 800c8fa:	f043 0208 	orr.w	r2, r3, #8
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c902:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c904:	2b01      	cmp	r3, #1
 800c906:	d107      	bne.n	800c918 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	699b      	ldr	r3, [r3, #24]
 800c90c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c910:	f043 0304 	orr.w	r3, r3, #4
 800c914:	687a      	ldr	r2, [r7, #4]
 800c916:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c918:	7dfb      	ldrb	r3, [r7, #23]
}
 800c91a:	4618      	mov	r0, r3
 800c91c:	3718      	adds	r7, #24
 800c91e:	46bd      	mov	sp, r7
 800c920:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c924:	b004      	add	sp, #16
 800c926:	4770      	bx	lr
 800c928:	803c3800 	.word	0x803c3800

0800c92c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c92c:	b480      	push	{r7}
 800c92e:	b085      	sub	sp, #20
 800c930:	af00      	add	r7, sp, #0
 800c932:	6078      	str	r0, [r7, #4]
 800c934:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c936:	2300      	movs	r3, #0
 800c938:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	3301      	adds	r3, #1
 800c93e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	4a13      	ldr	r2, [pc, #76]	; (800c990 <USB_FlushTxFifo+0x64>)
 800c944:	4293      	cmp	r3, r2
 800c946:	d901      	bls.n	800c94c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800c948:	2303      	movs	r3, #3
 800c94a:	e01b      	b.n	800c984 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	691b      	ldr	r3, [r3, #16]
 800c950:	2b00      	cmp	r3, #0
 800c952:	daf2      	bge.n	800c93a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800c954:	2300      	movs	r3, #0
 800c956:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c958:	683b      	ldr	r3, [r7, #0]
 800c95a:	019b      	lsls	r3, r3, #6
 800c95c:	f043 0220 	orr.w	r2, r3, #32
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	3301      	adds	r3, #1
 800c968:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	4a08      	ldr	r2, [pc, #32]	; (800c990 <USB_FlushTxFifo+0x64>)
 800c96e:	4293      	cmp	r3, r2
 800c970:	d901      	bls.n	800c976 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800c972:	2303      	movs	r3, #3
 800c974:	e006      	b.n	800c984 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	691b      	ldr	r3, [r3, #16]
 800c97a:	f003 0320 	and.w	r3, r3, #32
 800c97e:	2b20      	cmp	r3, #32
 800c980:	d0f0      	beq.n	800c964 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800c982:	2300      	movs	r3, #0
}
 800c984:	4618      	mov	r0, r3
 800c986:	3714      	adds	r7, #20
 800c988:	46bd      	mov	sp, r7
 800c98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98e:	4770      	bx	lr
 800c990:	00030d40 	.word	0x00030d40

0800c994 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c994:	b480      	push	{r7}
 800c996:	b085      	sub	sp, #20
 800c998:	af00      	add	r7, sp, #0
 800c99a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c99c:	2300      	movs	r3, #0
 800c99e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	3301      	adds	r3, #1
 800c9a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	4a11      	ldr	r2, [pc, #68]	; (800c9f0 <USB_FlushRxFifo+0x5c>)
 800c9aa:	4293      	cmp	r3, r2
 800c9ac:	d901      	bls.n	800c9b2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800c9ae:	2303      	movs	r3, #3
 800c9b0:	e018      	b.n	800c9e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	691b      	ldr	r3, [r3, #16]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	daf2      	bge.n	800c9a0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	2210      	movs	r2, #16
 800c9c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	3301      	adds	r3, #1
 800c9c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	4a08      	ldr	r2, [pc, #32]	; (800c9f0 <USB_FlushRxFifo+0x5c>)
 800c9ce:	4293      	cmp	r3, r2
 800c9d0:	d901      	bls.n	800c9d6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800c9d2:	2303      	movs	r3, #3
 800c9d4:	e006      	b.n	800c9e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	691b      	ldr	r3, [r3, #16]
 800c9da:	f003 0310 	and.w	r3, r3, #16
 800c9de:	2b10      	cmp	r3, #16
 800c9e0:	d0f0      	beq.n	800c9c4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800c9e2:	2300      	movs	r3, #0
}
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	3714      	adds	r7, #20
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ee:	4770      	bx	lr
 800c9f0:	00030d40 	.word	0x00030d40

0800c9f4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c9f4:	b480      	push	{r7}
 800c9f6:	b085      	sub	sp, #20
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	6078      	str	r0, [r7, #4]
 800c9fc:	460b      	mov	r3, r1
 800c9fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca0a:	681a      	ldr	r2, [r3, #0]
 800ca0c:	78fb      	ldrb	r3, [r7, #3]
 800ca0e:	68f9      	ldr	r1, [r7, #12]
 800ca10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ca14:	4313      	orrs	r3, r2
 800ca16:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ca18:	2300      	movs	r3, #0
}
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	3714      	adds	r7, #20
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca24:	4770      	bx	lr

0800ca26 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800ca26:	b480      	push	{r7}
 800ca28:	b087      	sub	sp, #28
 800ca2a:	af00      	add	r7, sp, #0
 800ca2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ca32:	693b      	ldr	r3, [r7, #16]
 800ca34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca38:	689b      	ldr	r3, [r3, #8]
 800ca3a:	f003 0306 	and.w	r3, r3, #6
 800ca3e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d102      	bne.n	800ca4c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800ca46:	2300      	movs	r3, #0
 800ca48:	75fb      	strb	r3, [r7, #23]
 800ca4a:	e00a      	b.n	800ca62 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	2b02      	cmp	r3, #2
 800ca50:	d002      	beq.n	800ca58 <USB_GetDevSpeed+0x32>
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	2b06      	cmp	r3, #6
 800ca56:	d102      	bne.n	800ca5e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ca58:	2302      	movs	r3, #2
 800ca5a:	75fb      	strb	r3, [r7, #23]
 800ca5c:	e001      	b.n	800ca62 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800ca5e:	230f      	movs	r3, #15
 800ca60:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ca62:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca64:	4618      	mov	r0, r3
 800ca66:	371c      	adds	r7, #28
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6e:	4770      	bx	lr

0800ca70 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ca70:	b480      	push	{r7}
 800ca72:	b085      	sub	sp, #20
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	6078      	str	r0, [r7, #4]
 800ca78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ca7e:	683b      	ldr	r3, [r7, #0]
 800ca80:	781b      	ldrb	r3, [r3, #0]
 800ca82:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ca84:	683b      	ldr	r3, [r7, #0]
 800ca86:	785b      	ldrb	r3, [r3, #1]
 800ca88:	2b01      	cmp	r3, #1
 800ca8a:	d13a      	bne.n	800cb02 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca92:	69da      	ldr	r2, [r3, #28]
 800ca94:	683b      	ldr	r3, [r7, #0]
 800ca96:	781b      	ldrb	r3, [r3, #0]
 800ca98:	f003 030f 	and.w	r3, r3, #15
 800ca9c:	2101      	movs	r1, #1
 800ca9e:	fa01 f303 	lsl.w	r3, r1, r3
 800caa2:	b29b      	uxth	r3, r3
 800caa4:	68f9      	ldr	r1, [r7, #12]
 800caa6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800caaa:	4313      	orrs	r3, r2
 800caac:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800caae:	68bb      	ldr	r3, [r7, #8]
 800cab0:	015a      	lsls	r2, r3, #5
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	4413      	add	r3, r2
 800cab6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d155      	bne.n	800cb70 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cac4:	68bb      	ldr	r3, [r7, #8]
 800cac6:	015a      	lsls	r2, r3, #5
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	4413      	add	r3, r2
 800cacc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cad0:	681a      	ldr	r2, [r3, #0]
 800cad2:	683b      	ldr	r3, [r7, #0]
 800cad4:	68db      	ldr	r3, [r3, #12]
 800cad6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800cada:	683b      	ldr	r3, [r7, #0]
 800cadc:	791b      	ldrb	r3, [r3, #4]
 800cade:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cae0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800cae2:	68bb      	ldr	r3, [r7, #8]
 800cae4:	059b      	lsls	r3, r3, #22
 800cae6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cae8:	4313      	orrs	r3, r2
 800caea:	68ba      	ldr	r2, [r7, #8]
 800caec:	0151      	lsls	r1, r2, #5
 800caee:	68fa      	ldr	r2, [r7, #12]
 800caf0:	440a      	add	r2, r1
 800caf2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800caf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cafa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cafe:	6013      	str	r3, [r2, #0]
 800cb00:	e036      	b.n	800cb70 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb08:	69da      	ldr	r2, [r3, #28]
 800cb0a:	683b      	ldr	r3, [r7, #0]
 800cb0c:	781b      	ldrb	r3, [r3, #0]
 800cb0e:	f003 030f 	and.w	r3, r3, #15
 800cb12:	2101      	movs	r1, #1
 800cb14:	fa01 f303 	lsl.w	r3, r1, r3
 800cb18:	041b      	lsls	r3, r3, #16
 800cb1a:	68f9      	ldr	r1, [r7, #12]
 800cb1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cb20:	4313      	orrs	r3, r2
 800cb22:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800cb24:	68bb      	ldr	r3, [r7, #8]
 800cb26:	015a      	lsls	r2, r3, #5
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	4413      	add	r3, r2
 800cb2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d11a      	bne.n	800cb70 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cb3a:	68bb      	ldr	r3, [r7, #8]
 800cb3c:	015a      	lsls	r2, r3, #5
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	4413      	add	r3, r2
 800cb42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb46:	681a      	ldr	r2, [r3, #0]
 800cb48:	683b      	ldr	r3, [r7, #0]
 800cb4a:	68db      	ldr	r3, [r3, #12]
 800cb4c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800cb50:	683b      	ldr	r3, [r7, #0]
 800cb52:	791b      	ldrb	r3, [r3, #4]
 800cb54:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cb56:	430b      	orrs	r3, r1
 800cb58:	4313      	orrs	r3, r2
 800cb5a:	68ba      	ldr	r2, [r7, #8]
 800cb5c:	0151      	lsls	r1, r2, #5
 800cb5e:	68fa      	ldr	r2, [r7, #12]
 800cb60:	440a      	add	r2, r1
 800cb62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cb66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cb6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cb6e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800cb70:	2300      	movs	r3, #0
}
 800cb72:	4618      	mov	r0, r3
 800cb74:	3714      	adds	r7, #20
 800cb76:	46bd      	mov	sp, r7
 800cb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7c:	4770      	bx	lr
	...

0800cb80 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cb80:	b480      	push	{r7}
 800cb82:	b085      	sub	sp, #20
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
 800cb88:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cb8e:	683b      	ldr	r3, [r7, #0]
 800cb90:	781b      	ldrb	r3, [r3, #0]
 800cb92:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800cb94:	683b      	ldr	r3, [r7, #0]
 800cb96:	785b      	ldrb	r3, [r3, #1]
 800cb98:	2b01      	cmp	r3, #1
 800cb9a:	d161      	bne.n	800cc60 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cb9c:	68bb      	ldr	r3, [r7, #8]
 800cb9e:	015a      	lsls	r2, r3, #5
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	4413      	add	r3, r2
 800cba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cbae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cbb2:	d11f      	bne.n	800cbf4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800cbb4:	68bb      	ldr	r3, [r7, #8]
 800cbb6:	015a      	lsls	r2, r3, #5
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	4413      	add	r3, r2
 800cbbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	68ba      	ldr	r2, [r7, #8]
 800cbc4:	0151      	lsls	r1, r2, #5
 800cbc6:	68fa      	ldr	r2, [r7, #12]
 800cbc8:	440a      	add	r2, r1
 800cbca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cbce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cbd2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800cbd4:	68bb      	ldr	r3, [r7, #8]
 800cbd6:	015a      	lsls	r2, r3, #5
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	4413      	add	r3, r2
 800cbdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	68ba      	ldr	r2, [r7, #8]
 800cbe4:	0151      	lsls	r1, r2, #5
 800cbe6:	68fa      	ldr	r2, [r7, #12]
 800cbe8:	440a      	add	r2, r1
 800cbea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cbee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cbf2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cbfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cbfc:	683b      	ldr	r3, [r7, #0]
 800cbfe:	781b      	ldrb	r3, [r3, #0]
 800cc00:	f003 030f 	and.w	r3, r3, #15
 800cc04:	2101      	movs	r1, #1
 800cc06:	fa01 f303 	lsl.w	r3, r1, r3
 800cc0a:	b29b      	uxth	r3, r3
 800cc0c:	43db      	mvns	r3, r3
 800cc0e:	68f9      	ldr	r1, [r7, #12]
 800cc10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cc14:	4013      	ands	r3, r2
 800cc16:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc1e:	69da      	ldr	r2, [r3, #28]
 800cc20:	683b      	ldr	r3, [r7, #0]
 800cc22:	781b      	ldrb	r3, [r3, #0]
 800cc24:	f003 030f 	and.w	r3, r3, #15
 800cc28:	2101      	movs	r1, #1
 800cc2a:	fa01 f303 	lsl.w	r3, r1, r3
 800cc2e:	b29b      	uxth	r3, r3
 800cc30:	43db      	mvns	r3, r3
 800cc32:	68f9      	ldr	r1, [r7, #12]
 800cc34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cc38:	4013      	ands	r3, r2
 800cc3a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800cc3c:	68bb      	ldr	r3, [r7, #8]
 800cc3e:	015a      	lsls	r2, r3, #5
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	4413      	add	r3, r2
 800cc44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc48:	681a      	ldr	r2, [r3, #0]
 800cc4a:	68bb      	ldr	r3, [r7, #8]
 800cc4c:	0159      	lsls	r1, r3, #5
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	440b      	add	r3, r1
 800cc52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc56:	4619      	mov	r1, r3
 800cc58:	4b35      	ldr	r3, [pc, #212]	; (800cd30 <USB_DeactivateEndpoint+0x1b0>)
 800cc5a:	4013      	ands	r3, r2
 800cc5c:	600b      	str	r3, [r1, #0]
 800cc5e:	e060      	b.n	800cd22 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cc60:	68bb      	ldr	r3, [r7, #8]
 800cc62:	015a      	lsls	r2, r3, #5
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	4413      	add	r3, r2
 800cc68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cc72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cc76:	d11f      	bne.n	800ccb8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800cc78:	68bb      	ldr	r3, [r7, #8]
 800cc7a:	015a      	lsls	r2, r3, #5
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	4413      	add	r3, r2
 800cc80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	68ba      	ldr	r2, [r7, #8]
 800cc88:	0151      	lsls	r1, r2, #5
 800cc8a:	68fa      	ldr	r2, [r7, #12]
 800cc8c:	440a      	add	r2, r1
 800cc8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc92:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cc96:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800cc98:	68bb      	ldr	r3, [r7, #8]
 800cc9a:	015a      	lsls	r2, r3, #5
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	4413      	add	r3, r2
 800cca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	68ba      	ldr	r2, [r7, #8]
 800cca8:	0151      	lsls	r1, r2, #5
 800ccaa:	68fa      	ldr	r2, [r7, #12]
 800ccac:	440a      	add	r2, r1
 800ccae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ccb2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ccb6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ccbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ccc0:	683b      	ldr	r3, [r7, #0]
 800ccc2:	781b      	ldrb	r3, [r3, #0]
 800ccc4:	f003 030f 	and.w	r3, r3, #15
 800ccc8:	2101      	movs	r1, #1
 800ccca:	fa01 f303 	lsl.w	r3, r1, r3
 800ccce:	041b      	lsls	r3, r3, #16
 800ccd0:	43db      	mvns	r3, r3
 800ccd2:	68f9      	ldr	r1, [r7, #12]
 800ccd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ccd8:	4013      	ands	r3, r2
 800ccda:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cce2:	69da      	ldr	r2, [r3, #28]
 800cce4:	683b      	ldr	r3, [r7, #0]
 800cce6:	781b      	ldrb	r3, [r3, #0]
 800cce8:	f003 030f 	and.w	r3, r3, #15
 800ccec:	2101      	movs	r1, #1
 800ccee:	fa01 f303 	lsl.w	r3, r1, r3
 800ccf2:	041b      	lsls	r3, r3, #16
 800ccf4:	43db      	mvns	r3, r3
 800ccf6:	68f9      	ldr	r1, [r7, #12]
 800ccf8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ccfc:	4013      	ands	r3, r2
 800ccfe:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800cd00:	68bb      	ldr	r3, [r7, #8]
 800cd02:	015a      	lsls	r2, r3, #5
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	4413      	add	r3, r2
 800cd08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd0c:	681a      	ldr	r2, [r3, #0]
 800cd0e:	68bb      	ldr	r3, [r7, #8]
 800cd10:	0159      	lsls	r1, r3, #5
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	440b      	add	r3, r1
 800cd16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd1a:	4619      	mov	r1, r3
 800cd1c:	4b05      	ldr	r3, [pc, #20]	; (800cd34 <USB_DeactivateEndpoint+0x1b4>)
 800cd1e:	4013      	ands	r3, r2
 800cd20:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800cd22:	2300      	movs	r3, #0
}
 800cd24:	4618      	mov	r0, r3
 800cd26:	3714      	adds	r7, #20
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2e:	4770      	bx	lr
 800cd30:	ec337800 	.word	0xec337800
 800cd34:	eff37800 	.word	0xeff37800

0800cd38 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800cd38:	b580      	push	{r7, lr}
 800cd3a:	b08a      	sub	sp, #40	; 0x28
 800cd3c:	af02      	add	r7, sp, #8
 800cd3e:	60f8      	str	r0, [r7, #12]
 800cd40:	60b9      	str	r1, [r7, #8]
 800cd42:	4613      	mov	r3, r2
 800cd44:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800cd4a:	68bb      	ldr	r3, [r7, #8]
 800cd4c:	781b      	ldrb	r3, [r3, #0]
 800cd4e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cd50:	68bb      	ldr	r3, [r7, #8]
 800cd52:	785b      	ldrb	r3, [r3, #1]
 800cd54:	2b01      	cmp	r3, #1
 800cd56:	f040 815c 	bne.w	800d012 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800cd5a:	68bb      	ldr	r3, [r7, #8]
 800cd5c:	699b      	ldr	r3, [r3, #24]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d132      	bne.n	800cdc8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cd62:	69bb      	ldr	r3, [r7, #24]
 800cd64:	015a      	lsls	r2, r3, #5
 800cd66:	69fb      	ldr	r3, [r7, #28]
 800cd68:	4413      	add	r3, r2
 800cd6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd6e:	691b      	ldr	r3, [r3, #16]
 800cd70:	69ba      	ldr	r2, [r7, #24]
 800cd72:	0151      	lsls	r1, r2, #5
 800cd74:	69fa      	ldr	r2, [r7, #28]
 800cd76:	440a      	add	r2, r1
 800cd78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cd7c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800cd80:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800cd84:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800cd86:	69bb      	ldr	r3, [r7, #24]
 800cd88:	015a      	lsls	r2, r3, #5
 800cd8a:	69fb      	ldr	r3, [r7, #28]
 800cd8c:	4413      	add	r3, r2
 800cd8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd92:	691b      	ldr	r3, [r3, #16]
 800cd94:	69ba      	ldr	r2, [r7, #24]
 800cd96:	0151      	lsls	r1, r2, #5
 800cd98:	69fa      	ldr	r2, [r7, #28]
 800cd9a:	440a      	add	r2, r1
 800cd9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cda0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cda4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cda6:	69bb      	ldr	r3, [r7, #24]
 800cda8:	015a      	lsls	r2, r3, #5
 800cdaa:	69fb      	ldr	r3, [r7, #28]
 800cdac:	4413      	add	r3, r2
 800cdae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdb2:	691b      	ldr	r3, [r3, #16]
 800cdb4:	69ba      	ldr	r2, [r7, #24]
 800cdb6:	0151      	lsls	r1, r2, #5
 800cdb8:	69fa      	ldr	r2, [r7, #28]
 800cdba:	440a      	add	r2, r1
 800cdbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cdc0:	0cdb      	lsrs	r3, r3, #19
 800cdc2:	04db      	lsls	r3, r3, #19
 800cdc4:	6113      	str	r3, [r2, #16]
 800cdc6:	e074      	b.n	800ceb2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cdc8:	69bb      	ldr	r3, [r7, #24]
 800cdca:	015a      	lsls	r2, r3, #5
 800cdcc:	69fb      	ldr	r3, [r7, #28]
 800cdce:	4413      	add	r3, r2
 800cdd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdd4:	691b      	ldr	r3, [r3, #16]
 800cdd6:	69ba      	ldr	r2, [r7, #24]
 800cdd8:	0151      	lsls	r1, r2, #5
 800cdda:	69fa      	ldr	r2, [r7, #28]
 800cddc:	440a      	add	r2, r1
 800cdde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cde2:	0cdb      	lsrs	r3, r3, #19
 800cde4:	04db      	lsls	r3, r3, #19
 800cde6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cde8:	69bb      	ldr	r3, [r7, #24]
 800cdea:	015a      	lsls	r2, r3, #5
 800cdec:	69fb      	ldr	r3, [r7, #28]
 800cdee:	4413      	add	r3, r2
 800cdf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdf4:	691b      	ldr	r3, [r3, #16]
 800cdf6:	69ba      	ldr	r2, [r7, #24]
 800cdf8:	0151      	lsls	r1, r2, #5
 800cdfa:	69fa      	ldr	r2, [r7, #28]
 800cdfc:	440a      	add	r2, r1
 800cdfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce02:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ce06:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ce0a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800ce0c:	69bb      	ldr	r3, [r7, #24]
 800ce0e:	015a      	lsls	r2, r3, #5
 800ce10:	69fb      	ldr	r3, [r7, #28]
 800ce12:	4413      	add	r3, r2
 800ce14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce18:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800ce1a:	68bb      	ldr	r3, [r7, #8]
 800ce1c:	6999      	ldr	r1, [r3, #24]
 800ce1e:	68bb      	ldr	r3, [r7, #8]
 800ce20:	68db      	ldr	r3, [r3, #12]
 800ce22:	440b      	add	r3, r1
 800ce24:	1e59      	subs	r1, r3, #1
 800ce26:	68bb      	ldr	r3, [r7, #8]
 800ce28:	68db      	ldr	r3, [r3, #12]
 800ce2a:	fbb1 f3f3 	udiv	r3, r1, r3
 800ce2e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800ce30:	4b9d      	ldr	r3, [pc, #628]	; (800d0a8 <USB_EPStartXfer+0x370>)
 800ce32:	400b      	ands	r3, r1
 800ce34:	69b9      	ldr	r1, [r7, #24]
 800ce36:	0148      	lsls	r0, r1, #5
 800ce38:	69f9      	ldr	r1, [r7, #28]
 800ce3a:	4401      	add	r1, r0
 800ce3c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ce40:	4313      	orrs	r3, r2
 800ce42:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ce44:	69bb      	ldr	r3, [r7, #24]
 800ce46:	015a      	lsls	r2, r3, #5
 800ce48:	69fb      	ldr	r3, [r7, #28]
 800ce4a:	4413      	add	r3, r2
 800ce4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce50:	691a      	ldr	r2, [r3, #16]
 800ce52:	68bb      	ldr	r3, [r7, #8]
 800ce54:	699b      	ldr	r3, [r3, #24]
 800ce56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ce5a:	69b9      	ldr	r1, [r7, #24]
 800ce5c:	0148      	lsls	r0, r1, #5
 800ce5e:	69f9      	ldr	r1, [r7, #28]
 800ce60:	4401      	add	r1, r0
 800ce62:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ce66:	4313      	orrs	r3, r2
 800ce68:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800ce6a:	68bb      	ldr	r3, [r7, #8]
 800ce6c:	791b      	ldrb	r3, [r3, #4]
 800ce6e:	2b01      	cmp	r3, #1
 800ce70:	d11f      	bne.n	800ceb2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800ce72:	69bb      	ldr	r3, [r7, #24]
 800ce74:	015a      	lsls	r2, r3, #5
 800ce76:	69fb      	ldr	r3, [r7, #28]
 800ce78:	4413      	add	r3, r2
 800ce7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce7e:	691b      	ldr	r3, [r3, #16]
 800ce80:	69ba      	ldr	r2, [r7, #24]
 800ce82:	0151      	lsls	r1, r2, #5
 800ce84:	69fa      	ldr	r2, [r7, #28]
 800ce86:	440a      	add	r2, r1
 800ce88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce8c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800ce90:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800ce92:	69bb      	ldr	r3, [r7, #24]
 800ce94:	015a      	lsls	r2, r3, #5
 800ce96:	69fb      	ldr	r3, [r7, #28]
 800ce98:	4413      	add	r3, r2
 800ce9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce9e:	691b      	ldr	r3, [r3, #16]
 800cea0:	69ba      	ldr	r2, [r7, #24]
 800cea2:	0151      	lsls	r1, r2, #5
 800cea4:	69fa      	ldr	r2, [r7, #28]
 800cea6:	440a      	add	r2, r1
 800cea8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ceac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ceb0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800ceb2:	79fb      	ldrb	r3, [r7, #7]
 800ceb4:	2b01      	cmp	r3, #1
 800ceb6:	d14b      	bne.n	800cf50 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ceb8:	68bb      	ldr	r3, [r7, #8]
 800ceba:	695b      	ldr	r3, [r3, #20]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d009      	beq.n	800ced4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800cec0:	69bb      	ldr	r3, [r7, #24]
 800cec2:	015a      	lsls	r2, r3, #5
 800cec4:	69fb      	ldr	r3, [r7, #28]
 800cec6:	4413      	add	r3, r2
 800cec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cecc:	461a      	mov	r2, r3
 800cece:	68bb      	ldr	r3, [r7, #8]
 800ced0:	695b      	ldr	r3, [r3, #20]
 800ced2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800ced4:	68bb      	ldr	r3, [r7, #8]
 800ced6:	791b      	ldrb	r3, [r3, #4]
 800ced8:	2b01      	cmp	r3, #1
 800ceda:	d128      	bne.n	800cf2e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800cedc:	69fb      	ldr	r3, [r7, #28]
 800cede:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cee2:	689b      	ldr	r3, [r3, #8]
 800cee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d110      	bne.n	800cf0e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ceec:	69bb      	ldr	r3, [r7, #24]
 800ceee:	015a      	lsls	r2, r3, #5
 800cef0:	69fb      	ldr	r3, [r7, #28]
 800cef2:	4413      	add	r3, r2
 800cef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	69ba      	ldr	r2, [r7, #24]
 800cefc:	0151      	lsls	r1, r2, #5
 800cefe:	69fa      	ldr	r2, [r7, #28]
 800cf00:	440a      	add	r2, r1
 800cf02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf06:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cf0a:	6013      	str	r3, [r2, #0]
 800cf0c:	e00f      	b.n	800cf2e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800cf0e:	69bb      	ldr	r3, [r7, #24]
 800cf10:	015a      	lsls	r2, r3, #5
 800cf12:	69fb      	ldr	r3, [r7, #28]
 800cf14:	4413      	add	r3, r2
 800cf16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	69ba      	ldr	r2, [r7, #24]
 800cf1e:	0151      	lsls	r1, r2, #5
 800cf20:	69fa      	ldr	r2, [r7, #28]
 800cf22:	440a      	add	r2, r1
 800cf24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cf2c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cf2e:	69bb      	ldr	r3, [r7, #24]
 800cf30:	015a      	lsls	r2, r3, #5
 800cf32:	69fb      	ldr	r3, [r7, #28]
 800cf34:	4413      	add	r3, r2
 800cf36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	69ba      	ldr	r2, [r7, #24]
 800cf3e:	0151      	lsls	r1, r2, #5
 800cf40:	69fa      	ldr	r2, [r7, #28]
 800cf42:	440a      	add	r2, r1
 800cf44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf48:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cf4c:	6013      	str	r3, [r2, #0]
 800cf4e:	e133      	b.n	800d1b8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cf50:	69bb      	ldr	r3, [r7, #24]
 800cf52:	015a      	lsls	r2, r3, #5
 800cf54:	69fb      	ldr	r3, [r7, #28]
 800cf56:	4413      	add	r3, r2
 800cf58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	69ba      	ldr	r2, [r7, #24]
 800cf60:	0151      	lsls	r1, r2, #5
 800cf62:	69fa      	ldr	r2, [r7, #28]
 800cf64:	440a      	add	r2, r1
 800cf66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf6a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cf6e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800cf70:	68bb      	ldr	r3, [r7, #8]
 800cf72:	791b      	ldrb	r3, [r3, #4]
 800cf74:	2b01      	cmp	r3, #1
 800cf76:	d015      	beq.n	800cfa4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800cf78:	68bb      	ldr	r3, [r7, #8]
 800cf7a:	699b      	ldr	r3, [r3, #24]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	f000 811b 	beq.w	800d1b8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800cf82:	69fb      	ldr	r3, [r7, #28]
 800cf84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cf8a:	68bb      	ldr	r3, [r7, #8]
 800cf8c:	781b      	ldrb	r3, [r3, #0]
 800cf8e:	f003 030f 	and.w	r3, r3, #15
 800cf92:	2101      	movs	r1, #1
 800cf94:	fa01 f303 	lsl.w	r3, r1, r3
 800cf98:	69f9      	ldr	r1, [r7, #28]
 800cf9a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cf9e:	4313      	orrs	r3, r2
 800cfa0:	634b      	str	r3, [r1, #52]	; 0x34
 800cfa2:	e109      	b.n	800d1b8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800cfa4:	69fb      	ldr	r3, [r7, #28]
 800cfa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cfaa:	689b      	ldr	r3, [r3, #8]
 800cfac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d110      	bne.n	800cfd6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800cfb4:	69bb      	ldr	r3, [r7, #24]
 800cfb6:	015a      	lsls	r2, r3, #5
 800cfb8:	69fb      	ldr	r3, [r7, #28]
 800cfba:	4413      	add	r3, r2
 800cfbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	69ba      	ldr	r2, [r7, #24]
 800cfc4:	0151      	lsls	r1, r2, #5
 800cfc6:	69fa      	ldr	r2, [r7, #28]
 800cfc8:	440a      	add	r2, r1
 800cfca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cfce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cfd2:	6013      	str	r3, [r2, #0]
 800cfd4:	e00f      	b.n	800cff6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800cfd6:	69bb      	ldr	r3, [r7, #24]
 800cfd8:	015a      	lsls	r2, r3, #5
 800cfda:	69fb      	ldr	r3, [r7, #28]
 800cfdc:	4413      	add	r3, r2
 800cfde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	69ba      	ldr	r2, [r7, #24]
 800cfe6:	0151      	lsls	r1, r2, #5
 800cfe8:	69fa      	ldr	r2, [r7, #28]
 800cfea:	440a      	add	r2, r1
 800cfec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cff0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cff4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800cff6:	68bb      	ldr	r3, [r7, #8]
 800cff8:	6919      	ldr	r1, [r3, #16]
 800cffa:	68bb      	ldr	r3, [r7, #8]
 800cffc:	781a      	ldrb	r2, [r3, #0]
 800cffe:	68bb      	ldr	r3, [r7, #8]
 800d000:	699b      	ldr	r3, [r3, #24]
 800d002:	b298      	uxth	r0, r3
 800d004:	79fb      	ldrb	r3, [r7, #7]
 800d006:	9300      	str	r3, [sp, #0]
 800d008:	4603      	mov	r3, r0
 800d00a:	68f8      	ldr	r0, [r7, #12]
 800d00c:	f000 fade 	bl	800d5cc <USB_WritePacket>
 800d010:	e0d2      	b.n	800d1b8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d012:	69bb      	ldr	r3, [r7, #24]
 800d014:	015a      	lsls	r2, r3, #5
 800d016:	69fb      	ldr	r3, [r7, #28]
 800d018:	4413      	add	r3, r2
 800d01a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d01e:	691b      	ldr	r3, [r3, #16]
 800d020:	69ba      	ldr	r2, [r7, #24]
 800d022:	0151      	lsls	r1, r2, #5
 800d024:	69fa      	ldr	r2, [r7, #28]
 800d026:	440a      	add	r2, r1
 800d028:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d02c:	0cdb      	lsrs	r3, r3, #19
 800d02e:	04db      	lsls	r3, r3, #19
 800d030:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d032:	69bb      	ldr	r3, [r7, #24]
 800d034:	015a      	lsls	r2, r3, #5
 800d036:	69fb      	ldr	r3, [r7, #28]
 800d038:	4413      	add	r3, r2
 800d03a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d03e:	691b      	ldr	r3, [r3, #16]
 800d040:	69ba      	ldr	r2, [r7, #24]
 800d042:	0151      	lsls	r1, r2, #5
 800d044:	69fa      	ldr	r2, [r7, #28]
 800d046:	440a      	add	r2, r1
 800d048:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d04c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d050:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d054:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800d056:	68bb      	ldr	r3, [r7, #8]
 800d058:	699b      	ldr	r3, [r3, #24]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d126      	bne.n	800d0ac <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800d05e:	69bb      	ldr	r3, [r7, #24]
 800d060:	015a      	lsls	r2, r3, #5
 800d062:	69fb      	ldr	r3, [r7, #28]
 800d064:	4413      	add	r3, r2
 800d066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d06a:	691a      	ldr	r2, [r3, #16]
 800d06c:	68bb      	ldr	r3, [r7, #8]
 800d06e:	68db      	ldr	r3, [r3, #12]
 800d070:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d074:	69b9      	ldr	r1, [r7, #24]
 800d076:	0148      	lsls	r0, r1, #5
 800d078:	69f9      	ldr	r1, [r7, #28]
 800d07a:	4401      	add	r1, r0
 800d07c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d080:	4313      	orrs	r3, r2
 800d082:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d084:	69bb      	ldr	r3, [r7, #24]
 800d086:	015a      	lsls	r2, r3, #5
 800d088:	69fb      	ldr	r3, [r7, #28]
 800d08a:	4413      	add	r3, r2
 800d08c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d090:	691b      	ldr	r3, [r3, #16]
 800d092:	69ba      	ldr	r2, [r7, #24]
 800d094:	0151      	lsls	r1, r2, #5
 800d096:	69fa      	ldr	r2, [r7, #28]
 800d098:	440a      	add	r2, r1
 800d09a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d09e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d0a2:	6113      	str	r3, [r2, #16]
 800d0a4:	e03a      	b.n	800d11c <USB_EPStartXfer+0x3e4>
 800d0a6:	bf00      	nop
 800d0a8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d0ac:	68bb      	ldr	r3, [r7, #8]
 800d0ae:	699a      	ldr	r2, [r3, #24]
 800d0b0:	68bb      	ldr	r3, [r7, #8]
 800d0b2:	68db      	ldr	r3, [r3, #12]
 800d0b4:	4413      	add	r3, r2
 800d0b6:	1e5a      	subs	r2, r3, #1
 800d0b8:	68bb      	ldr	r3, [r7, #8]
 800d0ba:	68db      	ldr	r3, [r3, #12]
 800d0bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800d0c0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800d0c2:	68bb      	ldr	r3, [r7, #8]
 800d0c4:	68db      	ldr	r3, [r3, #12]
 800d0c6:	8afa      	ldrh	r2, [r7, #22]
 800d0c8:	fb03 f202 	mul.w	r2, r3, r2
 800d0cc:	68bb      	ldr	r3, [r7, #8]
 800d0ce:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d0d0:	69bb      	ldr	r3, [r7, #24]
 800d0d2:	015a      	lsls	r2, r3, #5
 800d0d4:	69fb      	ldr	r3, [r7, #28]
 800d0d6:	4413      	add	r3, r2
 800d0d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0dc:	691a      	ldr	r2, [r3, #16]
 800d0de:	8afb      	ldrh	r3, [r7, #22]
 800d0e0:	04d9      	lsls	r1, r3, #19
 800d0e2:	4b38      	ldr	r3, [pc, #224]	; (800d1c4 <USB_EPStartXfer+0x48c>)
 800d0e4:	400b      	ands	r3, r1
 800d0e6:	69b9      	ldr	r1, [r7, #24]
 800d0e8:	0148      	lsls	r0, r1, #5
 800d0ea:	69f9      	ldr	r1, [r7, #28]
 800d0ec:	4401      	add	r1, r0
 800d0ee:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d0f2:	4313      	orrs	r3, r2
 800d0f4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800d0f6:	69bb      	ldr	r3, [r7, #24]
 800d0f8:	015a      	lsls	r2, r3, #5
 800d0fa:	69fb      	ldr	r3, [r7, #28]
 800d0fc:	4413      	add	r3, r2
 800d0fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d102:	691a      	ldr	r2, [r3, #16]
 800d104:	68bb      	ldr	r3, [r7, #8]
 800d106:	69db      	ldr	r3, [r3, #28]
 800d108:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d10c:	69b9      	ldr	r1, [r7, #24]
 800d10e:	0148      	lsls	r0, r1, #5
 800d110:	69f9      	ldr	r1, [r7, #28]
 800d112:	4401      	add	r1, r0
 800d114:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d118:	4313      	orrs	r3, r2
 800d11a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d11c:	79fb      	ldrb	r3, [r7, #7]
 800d11e:	2b01      	cmp	r3, #1
 800d120:	d10d      	bne.n	800d13e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d122:	68bb      	ldr	r3, [r7, #8]
 800d124:	691b      	ldr	r3, [r3, #16]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d009      	beq.n	800d13e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d12a:	68bb      	ldr	r3, [r7, #8]
 800d12c:	6919      	ldr	r1, [r3, #16]
 800d12e:	69bb      	ldr	r3, [r7, #24]
 800d130:	015a      	lsls	r2, r3, #5
 800d132:	69fb      	ldr	r3, [r7, #28]
 800d134:	4413      	add	r3, r2
 800d136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d13a:	460a      	mov	r2, r1
 800d13c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800d13e:	68bb      	ldr	r3, [r7, #8]
 800d140:	791b      	ldrb	r3, [r3, #4]
 800d142:	2b01      	cmp	r3, #1
 800d144:	d128      	bne.n	800d198 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d146:	69fb      	ldr	r3, [r7, #28]
 800d148:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d14c:	689b      	ldr	r3, [r3, #8]
 800d14e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d152:	2b00      	cmp	r3, #0
 800d154:	d110      	bne.n	800d178 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800d156:	69bb      	ldr	r3, [r7, #24]
 800d158:	015a      	lsls	r2, r3, #5
 800d15a:	69fb      	ldr	r3, [r7, #28]
 800d15c:	4413      	add	r3, r2
 800d15e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	69ba      	ldr	r2, [r7, #24]
 800d166:	0151      	lsls	r1, r2, #5
 800d168:	69fa      	ldr	r2, [r7, #28]
 800d16a:	440a      	add	r2, r1
 800d16c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d170:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d174:	6013      	str	r3, [r2, #0]
 800d176:	e00f      	b.n	800d198 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800d178:	69bb      	ldr	r3, [r7, #24]
 800d17a:	015a      	lsls	r2, r3, #5
 800d17c:	69fb      	ldr	r3, [r7, #28]
 800d17e:	4413      	add	r3, r2
 800d180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	69ba      	ldr	r2, [r7, #24]
 800d188:	0151      	lsls	r1, r2, #5
 800d18a:	69fa      	ldr	r2, [r7, #28]
 800d18c:	440a      	add	r2, r1
 800d18e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d192:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d196:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d198:	69bb      	ldr	r3, [r7, #24]
 800d19a:	015a      	lsls	r2, r3, #5
 800d19c:	69fb      	ldr	r3, [r7, #28]
 800d19e:	4413      	add	r3, r2
 800d1a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	69ba      	ldr	r2, [r7, #24]
 800d1a8:	0151      	lsls	r1, r2, #5
 800d1aa:	69fa      	ldr	r2, [r7, #28]
 800d1ac:	440a      	add	r2, r1
 800d1ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d1b2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d1b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d1b8:	2300      	movs	r3, #0
}
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	3720      	adds	r7, #32
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	bd80      	pop	{r7, pc}
 800d1c2:	bf00      	nop
 800d1c4:	1ff80000 	.word	0x1ff80000

0800d1c8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800d1c8:	b480      	push	{r7}
 800d1ca:	b087      	sub	sp, #28
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	60f8      	str	r0, [r7, #12]
 800d1d0:	60b9      	str	r1, [r7, #8]
 800d1d2:	4613      	mov	r3, r2
 800d1d4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800d1da:	68bb      	ldr	r3, [r7, #8]
 800d1dc:	781b      	ldrb	r3, [r3, #0]
 800d1de:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d1e0:	68bb      	ldr	r3, [r7, #8]
 800d1e2:	785b      	ldrb	r3, [r3, #1]
 800d1e4:	2b01      	cmp	r3, #1
 800d1e6:	f040 80ce 	bne.w	800d386 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d1ea:	68bb      	ldr	r3, [r7, #8]
 800d1ec:	699b      	ldr	r3, [r3, #24]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d132      	bne.n	800d258 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d1f2:	693b      	ldr	r3, [r7, #16]
 800d1f4:	015a      	lsls	r2, r3, #5
 800d1f6:	697b      	ldr	r3, [r7, #20]
 800d1f8:	4413      	add	r3, r2
 800d1fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1fe:	691b      	ldr	r3, [r3, #16]
 800d200:	693a      	ldr	r2, [r7, #16]
 800d202:	0151      	lsls	r1, r2, #5
 800d204:	697a      	ldr	r2, [r7, #20]
 800d206:	440a      	add	r2, r1
 800d208:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d20c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d210:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d214:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d216:	693b      	ldr	r3, [r7, #16]
 800d218:	015a      	lsls	r2, r3, #5
 800d21a:	697b      	ldr	r3, [r7, #20]
 800d21c:	4413      	add	r3, r2
 800d21e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d222:	691b      	ldr	r3, [r3, #16]
 800d224:	693a      	ldr	r2, [r7, #16]
 800d226:	0151      	lsls	r1, r2, #5
 800d228:	697a      	ldr	r2, [r7, #20]
 800d22a:	440a      	add	r2, r1
 800d22c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d230:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d234:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d236:	693b      	ldr	r3, [r7, #16]
 800d238:	015a      	lsls	r2, r3, #5
 800d23a:	697b      	ldr	r3, [r7, #20]
 800d23c:	4413      	add	r3, r2
 800d23e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d242:	691b      	ldr	r3, [r3, #16]
 800d244:	693a      	ldr	r2, [r7, #16]
 800d246:	0151      	lsls	r1, r2, #5
 800d248:	697a      	ldr	r2, [r7, #20]
 800d24a:	440a      	add	r2, r1
 800d24c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d250:	0cdb      	lsrs	r3, r3, #19
 800d252:	04db      	lsls	r3, r3, #19
 800d254:	6113      	str	r3, [r2, #16]
 800d256:	e04e      	b.n	800d2f6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d258:	693b      	ldr	r3, [r7, #16]
 800d25a:	015a      	lsls	r2, r3, #5
 800d25c:	697b      	ldr	r3, [r7, #20]
 800d25e:	4413      	add	r3, r2
 800d260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d264:	691b      	ldr	r3, [r3, #16]
 800d266:	693a      	ldr	r2, [r7, #16]
 800d268:	0151      	lsls	r1, r2, #5
 800d26a:	697a      	ldr	r2, [r7, #20]
 800d26c:	440a      	add	r2, r1
 800d26e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d272:	0cdb      	lsrs	r3, r3, #19
 800d274:	04db      	lsls	r3, r3, #19
 800d276:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d278:	693b      	ldr	r3, [r7, #16]
 800d27a:	015a      	lsls	r2, r3, #5
 800d27c:	697b      	ldr	r3, [r7, #20]
 800d27e:	4413      	add	r3, r2
 800d280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d284:	691b      	ldr	r3, [r3, #16]
 800d286:	693a      	ldr	r2, [r7, #16]
 800d288:	0151      	lsls	r1, r2, #5
 800d28a:	697a      	ldr	r2, [r7, #20]
 800d28c:	440a      	add	r2, r1
 800d28e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d292:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d296:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d29a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800d29c:	68bb      	ldr	r3, [r7, #8]
 800d29e:	699a      	ldr	r2, [r3, #24]
 800d2a0:	68bb      	ldr	r3, [r7, #8]
 800d2a2:	68db      	ldr	r3, [r3, #12]
 800d2a4:	429a      	cmp	r2, r3
 800d2a6:	d903      	bls.n	800d2b0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800d2a8:	68bb      	ldr	r3, [r7, #8]
 800d2aa:	68da      	ldr	r2, [r3, #12]
 800d2ac:	68bb      	ldr	r3, [r7, #8]
 800d2ae:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d2b0:	693b      	ldr	r3, [r7, #16]
 800d2b2:	015a      	lsls	r2, r3, #5
 800d2b4:	697b      	ldr	r3, [r7, #20]
 800d2b6:	4413      	add	r3, r2
 800d2b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2bc:	691b      	ldr	r3, [r3, #16]
 800d2be:	693a      	ldr	r2, [r7, #16]
 800d2c0:	0151      	lsls	r1, r2, #5
 800d2c2:	697a      	ldr	r2, [r7, #20]
 800d2c4:	440a      	add	r2, r1
 800d2c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d2ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d2ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d2d0:	693b      	ldr	r3, [r7, #16]
 800d2d2:	015a      	lsls	r2, r3, #5
 800d2d4:	697b      	ldr	r3, [r7, #20]
 800d2d6:	4413      	add	r3, r2
 800d2d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2dc:	691a      	ldr	r2, [r3, #16]
 800d2de:	68bb      	ldr	r3, [r7, #8]
 800d2e0:	699b      	ldr	r3, [r3, #24]
 800d2e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d2e6:	6939      	ldr	r1, [r7, #16]
 800d2e8:	0148      	lsls	r0, r1, #5
 800d2ea:	6979      	ldr	r1, [r7, #20]
 800d2ec:	4401      	add	r1, r0
 800d2ee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d2f2:	4313      	orrs	r3, r2
 800d2f4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d2f6:	79fb      	ldrb	r3, [r7, #7]
 800d2f8:	2b01      	cmp	r3, #1
 800d2fa:	d11e      	bne.n	800d33a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d2fc:	68bb      	ldr	r3, [r7, #8]
 800d2fe:	695b      	ldr	r3, [r3, #20]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d009      	beq.n	800d318 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d304:	693b      	ldr	r3, [r7, #16]
 800d306:	015a      	lsls	r2, r3, #5
 800d308:	697b      	ldr	r3, [r7, #20]
 800d30a:	4413      	add	r3, r2
 800d30c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d310:	461a      	mov	r2, r3
 800d312:	68bb      	ldr	r3, [r7, #8]
 800d314:	695b      	ldr	r3, [r3, #20]
 800d316:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d318:	693b      	ldr	r3, [r7, #16]
 800d31a:	015a      	lsls	r2, r3, #5
 800d31c:	697b      	ldr	r3, [r7, #20]
 800d31e:	4413      	add	r3, r2
 800d320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	693a      	ldr	r2, [r7, #16]
 800d328:	0151      	lsls	r1, r2, #5
 800d32a:	697a      	ldr	r2, [r7, #20]
 800d32c:	440a      	add	r2, r1
 800d32e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d332:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d336:	6013      	str	r3, [r2, #0]
 800d338:	e097      	b.n	800d46a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d33a:	693b      	ldr	r3, [r7, #16]
 800d33c:	015a      	lsls	r2, r3, #5
 800d33e:	697b      	ldr	r3, [r7, #20]
 800d340:	4413      	add	r3, r2
 800d342:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	693a      	ldr	r2, [r7, #16]
 800d34a:	0151      	lsls	r1, r2, #5
 800d34c:	697a      	ldr	r2, [r7, #20]
 800d34e:	440a      	add	r2, r1
 800d350:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d354:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d358:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800d35a:	68bb      	ldr	r3, [r7, #8]
 800d35c:	699b      	ldr	r3, [r3, #24]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	f000 8083 	beq.w	800d46a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d364:	697b      	ldr	r3, [r7, #20]
 800d366:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d36a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d36c:	68bb      	ldr	r3, [r7, #8]
 800d36e:	781b      	ldrb	r3, [r3, #0]
 800d370:	f003 030f 	and.w	r3, r3, #15
 800d374:	2101      	movs	r1, #1
 800d376:	fa01 f303 	lsl.w	r3, r1, r3
 800d37a:	6979      	ldr	r1, [r7, #20]
 800d37c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d380:	4313      	orrs	r3, r2
 800d382:	634b      	str	r3, [r1, #52]	; 0x34
 800d384:	e071      	b.n	800d46a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d386:	693b      	ldr	r3, [r7, #16]
 800d388:	015a      	lsls	r2, r3, #5
 800d38a:	697b      	ldr	r3, [r7, #20]
 800d38c:	4413      	add	r3, r2
 800d38e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d392:	691b      	ldr	r3, [r3, #16]
 800d394:	693a      	ldr	r2, [r7, #16]
 800d396:	0151      	lsls	r1, r2, #5
 800d398:	697a      	ldr	r2, [r7, #20]
 800d39a:	440a      	add	r2, r1
 800d39c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d3a0:	0cdb      	lsrs	r3, r3, #19
 800d3a2:	04db      	lsls	r3, r3, #19
 800d3a4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d3a6:	693b      	ldr	r3, [r7, #16]
 800d3a8:	015a      	lsls	r2, r3, #5
 800d3aa:	697b      	ldr	r3, [r7, #20]
 800d3ac:	4413      	add	r3, r2
 800d3ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3b2:	691b      	ldr	r3, [r3, #16]
 800d3b4:	693a      	ldr	r2, [r7, #16]
 800d3b6:	0151      	lsls	r1, r2, #5
 800d3b8:	697a      	ldr	r2, [r7, #20]
 800d3ba:	440a      	add	r2, r1
 800d3bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d3c0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d3c4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d3c8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800d3ca:	68bb      	ldr	r3, [r7, #8]
 800d3cc:	699b      	ldr	r3, [r3, #24]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d003      	beq.n	800d3da <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800d3d2:	68bb      	ldr	r3, [r7, #8]
 800d3d4:	68da      	ldr	r2, [r3, #12]
 800d3d6:	68bb      	ldr	r3, [r7, #8]
 800d3d8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800d3da:	68bb      	ldr	r3, [r7, #8]
 800d3dc:	68da      	ldr	r2, [r3, #12]
 800d3de:	68bb      	ldr	r3, [r7, #8]
 800d3e0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d3e2:	693b      	ldr	r3, [r7, #16]
 800d3e4:	015a      	lsls	r2, r3, #5
 800d3e6:	697b      	ldr	r3, [r7, #20]
 800d3e8:	4413      	add	r3, r2
 800d3ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3ee:	691b      	ldr	r3, [r3, #16]
 800d3f0:	693a      	ldr	r2, [r7, #16]
 800d3f2:	0151      	lsls	r1, r2, #5
 800d3f4:	697a      	ldr	r2, [r7, #20]
 800d3f6:	440a      	add	r2, r1
 800d3f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d3fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d400:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800d402:	693b      	ldr	r3, [r7, #16]
 800d404:	015a      	lsls	r2, r3, #5
 800d406:	697b      	ldr	r3, [r7, #20]
 800d408:	4413      	add	r3, r2
 800d40a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d40e:	691a      	ldr	r2, [r3, #16]
 800d410:	68bb      	ldr	r3, [r7, #8]
 800d412:	69db      	ldr	r3, [r3, #28]
 800d414:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d418:	6939      	ldr	r1, [r7, #16]
 800d41a:	0148      	lsls	r0, r1, #5
 800d41c:	6979      	ldr	r1, [r7, #20]
 800d41e:	4401      	add	r1, r0
 800d420:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d424:	4313      	orrs	r3, r2
 800d426:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800d428:	79fb      	ldrb	r3, [r7, #7]
 800d42a:	2b01      	cmp	r3, #1
 800d42c:	d10d      	bne.n	800d44a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d42e:	68bb      	ldr	r3, [r7, #8]
 800d430:	691b      	ldr	r3, [r3, #16]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d009      	beq.n	800d44a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d436:	68bb      	ldr	r3, [r7, #8]
 800d438:	6919      	ldr	r1, [r3, #16]
 800d43a:	693b      	ldr	r3, [r7, #16]
 800d43c:	015a      	lsls	r2, r3, #5
 800d43e:	697b      	ldr	r3, [r7, #20]
 800d440:	4413      	add	r3, r2
 800d442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d446:	460a      	mov	r2, r1
 800d448:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d44a:	693b      	ldr	r3, [r7, #16]
 800d44c:	015a      	lsls	r2, r3, #5
 800d44e:	697b      	ldr	r3, [r7, #20]
 800d450:	4413      	add	r3, r2
 800d452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	693a      	ldr	r2, [r7, #16]
 800d45a:	0151      	lsls	r1, r2, #5
 800d45c:	697a      	ldr	r2, [r7, #20]
 800d45e:	440a      	add	r2, r1
 800d460:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d464:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d468:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d46a:	2300      	movs	r3, #0
}
 800d46c:	4618      	mov	r0, r3
 800d46e:	371c      	adds	r7, #28
 800d470:	46bd      	mov	sp, r7
 800d472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d476:	4770      	bx	lr

0800d478 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d478:	b480      	push	{r7}
 800d47a:	b087      	sub	sp, #28
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	6078      	str	r0, [r7, #4]
 800d480:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d482:	2300      	movs	r3, #0
 800d484:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800d486:	2300      	movs	r3, #0
 800d488:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d48e:	683b      	ldr	r3, [r7, #0]
 800d490:	785b      	ldrb	r3, [r3, #1]
 800d492:	2b01      	cmp	r3, #1
 800d494:	d14a      	bne.n	800d52c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d496:	683b      	ldr	r3, [r7, #0]
 800d498:	781b      	ldrb	r3, [r3, #0]
 800d49a:	015a      	lsls	r2, r3, #5
 800d49c:	693b      	ldr	r3, [r7, #16]
 800d49e:	4413      	add	r3, r2
 800d4a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d4aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d4ae:	f040 8086 	bne.w	800d5be <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800d4b2:	683b      	ldr	r3, [r7, #0]
 800d4b4:	781b      	ldrb	r3, [r3, #0]
 800d4b6:	015a      	lsls	r2, r3, #5
 800d4b8:	693b      	ldr	r3, [r7, #16]
 800d4ba:	4413      	add	r3, r2
 800d4bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	683a      	ldr	r2, [r7, #0]
 800d4c4:	7812      	ldrb	r2, [r2, #0]
 800d4c6:	0151      	lsls	r1, r2, #5
 800d4c8:	693a      	ldr	r2, [r7, #16]
 800d4ca:	440a      	add	r2, r1
 800d4cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d4d0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d4d4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800d4d6:	683b      	ldr	r3, [r7, #0]
 800d4d8:	781b      	ldrb	r3, [r3, #0]
 800d4da:	015a      	lsls	r2, r3, #5
 800d4dc:	693b      	ldr	r3, [r7, #16]
 800d4de:	4413      	add	r3, r2
 800d4e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	683a      	ldr	r2, [r7, #0]
 800d4e8:	7812      	ldrb	r2, [r2, #0]
 800d4ea:	0151      	lsls	r1, r2, #5
 800d4ec:	693a      	ldr	r2, [r7, #16]
 800d4ee:	440a      	add	r2, r1
 800d4f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d4f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d4f8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	3301      	adds	r3, #1
 800d4fe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	f242 7210 	movw	r2, #10000	; 0x2710
 800d506:	4293      	cmp	r3, r2
 800d508:	d902      	bls.n	800d510 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800d50a:	2301      	movs	r3, #1
 800d50c:	75fb      	strb	r3, [r7, #23]
          break;
 800d50e:	e056      	b.n	800d5be <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800d510:	683b      	ldr	r3, [r7, #0]
 800d512:	781b      	ldrb	r3, [r3, #0]
 800d514:	015a      	lsls	r2, r3, #5
 800d516:	693b      	ldr	r3, [r7, #16]
 800d518:	4413      	add	r3, r2
 800d51a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d524:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d528:	d0e7      	beq.n	800d4fa <USB_EPStopXfer+0x82>
 800d52a:	e048      	b.n	800d5be <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d52c:	683b      	ldr	r3, [r7, #0]
 800d52e:	781b      	ldrb	r3, [r3, #0]
 800d530:	015a      	lsls	r2, r3, #5
 800d532:	693b      	ldr	r3, [r7, #16]
 800d534:	4413      	add	r3, r2
 800d536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d540:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d544:	d13b      	bne.n	800d5be <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800d546:	683b      	ldr	r3, [r7, #0]
 800d548:	781b      	ldrb	r3, [r3, #0]
 800d54a:	015a      	lsls	r2, r3, #5
 800d54c:	693b      	ldr	r3, [r7, #16]
 800d54e:	4413      	add	r3, r2
 800d550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	683a      	ldr	r2, [r7, #0]
 800d558:	7812      	ldrb	r2, [r2, #0]
 800d55a:	0151      	lsls	r1, r2, #5
 800d55c:	693a      	ldr	r2, [r7, #16]
 800d55e:	440a      	add	r2, r1
 800d560:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d564:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d568:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800d56a:	683b      	ldr	r3, [r7, #0]
 800d56c:	781b      	ldrb	r3, [r3, #0]
 800d56e:	015a      	lsls	r2, r3, #5
 800d570:	693b      	ldr	r3, [r7, #16]
 800d572:	4413      	add	r3, r2
 800d574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	683a      	ldr	r2, [r7, #0]
 800d57c:	7812      	ldrb	r2, [r2, #0]
 800d57e:	0151      	lsls	r1, r2, #5
 800d580:	693a      	ldr	r2, [r7, #16]
 800d582:	440a      	add	r2, r1
 800d584:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d588:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d58c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	3301      	adds	r3, #1
 800d592:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	f242 7210 	movw	r2, #10000	; 0x2710
 800d59a:	4293      	cmp	r3, r2
 800d59c:	d902      	bls.n	800d5a4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800d59e:	2301      	movs	r3, #1
 800d5a0:	75fb      	strb	r3, [r7, #23]
          break;
 800d5a2:	e00c      	b.n	800d5be <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800d5a4:	683b      	ldr	r3, [r7, #0]
 800d5a6:	781b      	ldrb	r3, [r3, #0]
 800d5a8:	015a      	lsls	r2, r3, #5
 800d5aa:	693b      	ldr	r3, [r7, #16]
 800d5ac:	4413      	add	r3, r2
 800d5ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d5b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d5bc:	d0e7      	beq.n	800d58e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800d5be:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	371c      	adds	r7, #28
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ca:	4770      	bx	lr

0800d5cc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800d5cc:	b480      	push	{r7}
 800d5ce:	b089      	sub	sp, #36	; 0x24
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	60f8      	str	r0, [r7, #12]
 800d5d4:	60b9      	str	r1, [r7, #8]
 800d5d6:	4611      	mov	r1, r2
 800d5d8:	461a      	mov	r2, r3
 800d5da:	460b      	mov	r3, r1
 800d5dc:	71fb      	strb	r3, [r7, #7]
 800d5de:	4613      	mov	r3, r2
 800d5e0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800d5e6:	68bb      	ldr	r3, [r7, #8]
 800d5e8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800d5ea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d123      	bne.n	800d63a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800d5f2:	88bb      	ldrh	r3, [r7, #4]
 800d5f4:	3303      	adds	r3, #3
 800d5f6:	089b      	lsrs	r3, r3, #2
 800d5f8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	61bb      	str	r3, [r7, #24]
 800d5fe:	e018      	b.n	800d632 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d600:	79fb      	ldrb	r3, [r7, #7]
 800d602:	031a      	lsls	r2, r3, #12
 800d604:	697b      	ldr	r3, [r7, #20]
 800d606:	4413      	add	r3, r2
 800d608:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d60c:	461a      	mov	r2, r3
 800d60e:	69fb      	ldr	r3, [r7, #28]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	6013      	str	r3, [r2, #0]
      pSrc++;
 800d614:	69fb      	ldr	r3, [r7, #28]
 800d616:	3301      	adds	r3, #1
 800d618:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d61a:	69fb      	ldr	r3, [r7, #28]
 800d61c:	3301      	adds	r3, #1
 800d61e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d620:	69fb      	ldr	r3, [r7, #28]
 800d622:	3301      	adds	r3, #1
 800d624:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d626:	69fb      	ldr	r3, [r7, #28]
 800d628:	3301      	adds	r3, #1
 800d62a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800d62c:	69bb      	ldr	r3, [r7, #24]
 800d62e:	3301      	adds	r3, #1
 800d630:	61bb      	str	r3, [r7, #24]
 800d632:	69ba      	ldr	r2, [r7, #24]
 800d634:	693b      	ldr	r3, [r7, #16]
 800d636:	429a      	cmp	r2, r3
 800d638:	d3e2      	bcc.n	800d600 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800d63a:	2300      	movs	r3, #0
}
 800d63c:	4618      	mov	r0, r3
 800d63e:	3724      	adds	r7, #36	; 0x24
 800d640:	46bd      	mov	sp, r7
 800d642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d646:	4770      	bx	lr

0800d648 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d648:	b480      	push	{r7}
 800d64a:	b08b      	sub	sp, #44	; 0x2c
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	60f8      	str	r0, [r7, #12]
 800d650:	60b9      	str	r1, [r7, #8]
 800d652:	4613      	mov	r3, r2
 800d654:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800d65a:	68bb      	ldr	r3, [r7, #8]
 800d65c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800d65e:	88fb      	ldrh	r3, [r7, #6]
 800d660:	089b      	lsrs	r3, r3, #2
 800d662:	b29b      	uxth	r3, r3
 800d664:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800d666:	88fb      	ldrh	r3, [r7, #6]
 800d668:	f003 0303 	and.w	r3, r3, #3
 800d66c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800d66e:	2300      	movs	r3, #0
 800d670:	623b      	str	r3, [r7, #32]
 800d672:	e014      	b.n	800d69e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d674:	69bb      	ldr	r3, [r7, #24]
 800d676:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d67a:	681a      	ldr	r2, [r3, #0]
 800d67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d67e:	601a      	str	r2, [r3, #0]
    pDest++;
 800d680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d682:	3301      	adds	r3, #1
 800d684:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d688:	3301      	adds	r3, #1
 800d68a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d68e:	3301      	adds	r3, #1
 800d690:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d694:	3301      	adds	r3, #1
 800d696:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800d698:	6a3b      	ldr	r3, [r7, #32]
 800d69a:	3301      	adds	r3, #1
 800d69c:	623b      	str	r3, [r7, #32]
 800d69e:	6a3a      	ldr	r2, [r7, #32]
 800d6a0:	697b      	ldr	r3, [r7, #20]
 800d6a2:	429a      	cmp	r2, r3
 800d6a4:	d3e6      	bcc.n	800d674 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800d6a6:	8bfb      	ldrh	r3, [r7, #30]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d01e      	beq.n	800d6ea <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800d6b0:	69bb      	ldr	r3, [r7, #24]
 800d6b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d6b6:	461a      	mov	r2, r3
 800d6b8:	f107 0310 	add.w	r3, r7, #16
 800d6bc:	6812      	ldr	r2, [r2, #0]
 800d6be:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800d6c0:	693a      	ldr	r2, [r7, #16]
 800d6c2:	6a3b      	ldr	r3, [r7, #32]
 800d6c4:	b2db      	uxtb	r3, r3
 800d6c6:	00db      	lsls	r3, r3, #3
 800d6c8:	fa22 f303 	lsr.w	r3, r2, r3
 800d6cc:	b2da      	uxtb	r2, r3
 800d6ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6d0:	701a      	strb	r2, [r3, #0]
      i++;
 800d6d2:	6a3b      	ldr	r3, [r7, #32]
 800d6d4:	3301      	adds	r3, #1
 800d6d6:	623b      	str	r3, [r7, #32]
      pDest++;
 800d6d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6da:	3301      	adds	r3, #1
 800d6dc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800d6de:	8bfb      	ldrh	r3, [r7, #30]
 800d6e0:	3b01      	subs	r3, #1
 800d6e2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800d6e4:	8bfb      	ldrh	r3, [r7, #30]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d1ea      	bne.n	800d6c0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800d6ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	372c      	adds	r7, #44	; 0x2c
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f6:	4770      	bx	lr

0800d6f8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d6f8:	b480      	push	{r7}
 800d6fa:	b085      	sub	sp, #20
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]
 800d700:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d706:	683b      	ldr	r3, [r7, #0]
 800d708:	781b      	ldrb	r3, [r3, #0]
 800d70a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d70c:	683b      	ldr	r3, [r7, #0]
 800d70e:	785b      	ldrb	r3, [r3, #1]
 800d710:	2b01      	cmp	r3, #1
 800d712:	d12c      	bne.n	800d76e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d714:	68bb      	ldr	r3, [r7, #8]
 800d716:	015a      	lsls	r2, r3, #5
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	4413      	add	r3, r2
 800d71c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	2b00      	cmp	r3, #0
 800d724:	db12      	blt.n	800d74c <USB_EPSetStall+0x54>
 800d726:	68bb      	ldr	r3, [r7, #8]
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d00f      	beq.n	800d74c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800d72c:	68bb      	ldr	r3, [r7, #8]
 800d72e:	015a      	lsls	r2, r3, #5
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	4413      	add	r3, r2
 800d734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	68ba      	ldr	r2, [r7, #8]
 800d73c:	0151      	lsls	r1, r2, #5
 800d73e:	68fa      	ldr	r2, [r7, #12]
 800d740:	440a      	add	r2, r1
 800d742:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d746:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d74a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800d74c:	68bb      	ldr	r3, [r7, #8]
 800d74e:	015a      	lsls	r2, r3, #5
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	4413      	add	r3, r2
 800d754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	68ba      	ldr	r2, [r7, #8]
 800d75c:	0151      	lsls	r1, r2, #5
 800d75e:	68fa      	ldr	r2, [r7, #12]
 800d760:	440a      	add	r2, r1
 800d762:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d766:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d76a:	6013      	str	r3, [r2, #0]
 800d76c:	e02b      	b.n	800d7c6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d76e:	68bb      	ldr	r3, [r7, #8]
 800d770:	015a      	lsls	r2, r3, #5
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	4413      	add	r3, r2
 800d776:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	db12      	blt.n	800d7a6 <USB_EPSetStall+0xae>
 800d780:	68bb      	ldr	r3, [r7, #8]
 800d782:	2b00      	cmp	r3, #0
 800d784:	d00f      	beq.n	800d7a6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800d786:	68bb      	ldr	r3, [r7, #8]
 800d788:	015a      	lsls	r2, r3, #5
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	4413      	add	r3, r2
 800d78e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	68ba      	ldr	r2, [r7, #8]
 800d796:	0151      	lsls	r1, r2, #5
 800d798:	68fa      	ldr	r2, [r7, #12]
 800d79a:	440a      	add	r2, r1
 800d79c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d7a0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d7a4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800d7a6:	68bb      	ldr	r3, [r7, #8]
 800d7a8:	015a      	lsls	r2, r3, #5
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	4413      	add	r3, r2
 800d7ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	68ba      	ldr	r2, [r7, #8]
 800d7b6:	0151      	lsls	r1, r2, #5
 800d7b8:	68fa      	ldr	r2, [r7, #12]
 800d7ba:	440a      	add	r2, r1
 800d7bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d7c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d7c4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d7c6:	2300      	movs	r3, #0
}
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	3714      	adds	r7, #20
 800d7cc:	46bd      	mov	sp, r7
 800d7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d2:	4770      	bx	lr

0800d7d4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d7d4:	b480      	push	{r7}
 800d7d6:	b085      	sub	sp, #20
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]
 800d7dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d7e2:	683b      	ldr	r3, [r7, #0]
 800d7e4:	781b      	ldrb	r3, [r3, #0]
 800d7e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d7e8:	683b      	ldr	r3, [r7, #0]
 800d7ea:	785b      	ldrb	r3, [r3, #1]
 800d7ec:	2b01      	cmp	r3, #1
 800d7ee:	d128      	bne.n	800d842 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d7f0:	68bb      	ldr	r3, [r7, #8]
 800d7f2:	015a      	lsls	r2, r3, #5
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	4413      	add	r3, r2
 800d7f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	68ba      	ldr	r2, [r7, #8]
 800d800:	0151      	lsls	r1, r2, #5
 800d802:	68fa      	ldr	r2, [r7, #12]
 800d804:	440a      	add	r2, r1
 800d806:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d80a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d80e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d810:	683b      	ldr	r3, [r7, #0]
 800d812:	791b      	ldrb	r3, [r3, #4]
 800d814:	2b03      	cmp	r3, #3
 800d816:	d003      	beq.n	800d820 <USB_EPClearStall+0x4c>
 800d818:	683b      	ldr	r3, [r7, #0]
 800d81a:	791b      	ldrb	r3, [r3, #4]
 800d81c:	2b02      	cmp	r3, #2
 800d81e:	d138      	bne.n	800d892 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d820:	68bb      	ldr	r3, [r7, #8]
 800d822:	015a      	lsls	r2, r3, #5
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	4413      	add	r3, r2
 800d828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	68ba      	ldr	r2, [r7, #8]
 800d830:	0151      	lsls	r1, r2, #5
 800d832:	68fa      	ldr	r2, [r7, #12]
 800d834:	440a      	add	r2, r1
 800d836:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d83a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d83e:	6013      	str	r3, [r2, #0]
 800d840:	e027      	b.n	800d892 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d842:	68bb      	ldr	r3, [r7, #8]
 800d844:	015a      	lsls	r2, r3, #5
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	4413      	add	r3, r2
 800d84a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	68ba      	ldr	r2, [r7, #8]
 800d852:	0151      	lsls	r1, r2, #5
 800d854:	68fa      	ldr	r2, [r7, #12]
 800d856:	440a      	add	r2, r1
 800d858:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d85c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d860:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d862:	683b      	ldr	r3, [r7, #0]
 800d864:	791b      	ldrb	r3, [r3, #4]
 800d866:	2b03      	cmp	r3, #3
 800d868:	d003      	beq.n	800d872 <USB_EPClearStall+0x9e>
 800d86a:	683b      	ldr	r3, [r7, #0]
 800d86c:	791b      	ldrb	r3, [r3, #4]
 800d86e:	2b02      	cmp	r3, #2
 800d870:	d10f      	bne.n	800d892 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d872:	68bb      	ldr	r3, [r7, #8]
 800d874:	015a      	lsls	r2, r3, #5
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	4413      	add	r3, r2
 800d87a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	68ba      	ldr	r2, [r7, #8]
 800d882:	0151      	lsls	r1, r2, #5
 800d884:	68fa      	ldr	r2, [r7, #12]
 800d886:	440a      	add	r2, r1
 800d888:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d88c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d890:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800d892:	2300      	movs	r3, #0
}
 800d894:	4618      	mov	r0, r3
 800d896:	3714      	adds	r7, #20
 800d898:	46bd      	mov	sp, r7
 800d89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d89e:	4770      	bx	lr

0800d8a0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800d8a0:	b480      	push	{r7}
 800d8a2:	b085      	sub	sp, #20
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	6078      	str	r0, [r7, #4]
 800d8a8:	460b      	mov	r3, r1
 800d8aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	68fa      	ldr	r2, [r7, #12]
 800d8ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d8be:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800d8c2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d8ca:	681a      	ldr	r2, [r3, #0]
 800d8cc:	78fb      	ldrb	r3, [r7, #3]
 800d8ce:	011b      	lsls	r3, r3, #4
 800d8d0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800d8d4:	68f9      	ldr	r1, [r7, #12]
 800d8d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d8da:	4313      	orrs	r3, r2
 800d8dc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800d8de:	2300      	movs	r3, #0
}
 800d8e0:	4618      	mov	r0, r3
 800d8e2:	3714      	adds	r7, #20
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ea:	4770      	bx	lr

0800d8ec <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d8ec:	b480      	push	{r7}
 800d8ee:	b085      	sub	sp, #20
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	68fa      	ldr	r2, [r7, #12]
 800d902:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d906:	f023 0303 	bic.w	r3, r3, #3
 800d90a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d912:	685b      	ldr	r3, [r3, #4]
 800d914:	68fa      	ldr	r2, [r7, #12]
 800d916:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d91a:	f023 0302 	bic.w	r3, r3, #2
 800d91e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d920:	2300      	movs	r3, #0
}
 800d922:	4618      	mov	r0, r3
 800d924:	3714      	adds	r7, #20
 800d926:	46bd      	mov	sp, r7
 800d928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92c:	4770      	bx	lr

0800d92e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d92e:	b480      	push	{r7}
 800d930:	b085      	sub	sp, #20
 800d932:	af00      	add	r7, sp, #0
 800d934:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	68fa      	ldr	r2, [r7, #12]
 800d944:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d948:	f023 0303 	bic.w	r3, r3, #3
 800d94c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d954:	685b      	ldr	r3, [r3, #4]
 800d956:	68fa      	ldr	r2, [r7, #12]
 800d958:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d95c:	f043 0302 	orr.w	r3, r3, #2
 800d960:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d962:	2300      	movs	r3, #0
}
 800d964:	4618      	mov	r0, r3
 800d966:	3714      	adds	r7, #20
 800d968:	46bd      	mov	sp, r7
 800d96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d96e:	4770      	bx	lr

0800d970 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800d970:	b480      	push	{r7}
 800d972:	b085      	sub	sp, #20
 800d974:	af00      	add	r7, sp, #0
 800d976:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	695b      	ldr	r3, [r3, #20]
 800d97c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	699b      	ldr	r3, [r3, #24]
 800d982:	68fa      	ldr	r2, [r7, #12]
 800d984:	4013      	ands	r3, r2
 800d986:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d988:	68fb      	ldr	r3, [r7, #12]
}
 800d98a:	4618      	mov	r0, r3
 800d98c:	3714      	adds	r7, #20
 800d98e:	46bd      	mov	sp, r7
 800d990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d994:	4770      	bx	lr

0800d996 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d996:	b480      	push	{r7}
 800d998:	b085      	sub	sp, #20
 800d99a:	af00      	add	r7, sp, #0
 800d99c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d9a8:	699b      	ldr	r3, [r3, #24]
 800d9aa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d9b2:	69db      	ldr	r3, [r3, #28]
 800d9b4:	68ba      	ldr	r2, [r7, #8]
 800d9b6:	4013      	ands	r3, r2
 800d9b8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800d9ba:	68bb      	ldr	r3, [r7, #8]
 800d9bc:	0c1b      	lsrs	r3, r3, #16
}
 800d9be:	4618      	mov	r0, r3
 800d9c0:	3714      	adds	r7, #20
 800d9c2:	46bd      	mov	sp, r7
 800d9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c8:	4770      	bx	lr

0800d9ca <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d9ca:	b480      	push	{r7}
 800d9cc:	b085      	sub	sp, #20
 800d9ce:	af00      	add	r7, sp, #0
 800d9d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d9dc:	699b      	ldr	r3, [r3, #24]
 800d9de:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d9e6:	69db      	ldr	r3, [r3, #28]
 800d9e8:	68ba      	ldr	r2, [r7, #8]
 800d9ea:	4013      	ands	r3, r2
 800d9ec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800d9ee:	68bb      	ldr	r3, [r7, #8]
 800d9f0:	b29b      	uxth	r3, r3
}
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	3714      	adds	r7, #20
 800d9f6:	46bd      	mov	sp, r7
 800d9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9fc:	4770      	bx	lr

0800d9fe <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d9fe:	b480      	push	{r7}
 800da00:	b085      	sub	sp, #20
 800da02:	af00      	add	r7, sp, #0
 800da04:	6078      	str	r0, [r7, #4]
 800da06:	460b      	mov	r3, r1
 800da08:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800da0e:	78fb      	ldrb	r3, [r7, #3]
 800da10:	015a      	lsls	r2, r3, #5
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	4413      	add	r3, r2
 800da16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da1a:	689b      	ldr	r3, [r3, #8]
 800da1c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da24:	695b      	ldr	r3, [r3, #20]
 800da26:	68ba      	ldr	r2, [r7, #8]
 800da28:	4013      	ands	r3, r2
 800da2a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800da2c:	68bb      	ldr	r3, [r7, #8]
}
 800da2e:	4618      	mov	r0, r3
 800da30:	3714      	adds	r7, #20
 800da32:	46bd      	mov	sp, r7
 800da34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da38:	4770      	bx	lr

0800da3a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800da3a:	b480      	push	{r7}
 800da3c:	b087      	sub	sp, #28
 800da3e:	af00      	add	r7, sp, #0
 800da40:	6078      	str	r0, [r7, #4]
 800da42:	460b      	mov	r3, r1
 800da44:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800da4a:	697b      	ldr	r3, [r7, #20]
 800da4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da50:	691b      	ldr	r3, [r3, #16]
 800da52:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800da54:	697b      	ldr	r3, [r7, #20]
 800da56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da5c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800da5e:	78fb      	ldrb	r3, [r7, #3]
 800da60:	f003 030f 	and.w	r3, r3, #15
 800da64:	68fa      	ldr	r2, [r7, #12]
 800da66:	fa22 f303 	lsr.w	r3, r2, r3
 800da6a:	01db      	lsls	r3, r3, #7
 800da6c:	b2db      	uxtb	r3, r3
 800da6e:	693a      	ldr	r2, [r7, #16]
 800da70:	4313      	orrs	r3, r2
 800da72:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800da74:	78fb      	ldrb	r3, [r7, #3]
 800da76:	015a      	lsls	r2, r3, #5
 800da78:	697b      	ldr	r3, [r7, #20]
 800da7a:	4413      	add	r3, r2
 800da7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da80:	689b      	ldr	r3, [r3, #8]
 800da82:	693a      	ldr	r2, [r7, #16]
 800da84:	4013      	ands	r3, r2
 800da86:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800da88:	68bb      	ldr	r3, [r7, #8]
}
 800da8a:	4618      	mov	r0, r3
 800da8c:	371c      	adds	r7, #28
 800da8e:	46bd      	mov	sp, r7
 800da90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da94:	4770      	bx	lr

0800da96 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800da96:	b480      	push	{r7}
 800da98:	b083      	sub	sp, #12
 800da9a:	af00      	add	r7, sp, #0
 800da9c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	695b      	ldr	r3, [r3, #20]
 800daa2:	f003 0301 	and.w	r3, r3, #1
}
 800daa6:	4618      	mov	r0, r3
 800daa8:	370c      	adds	r7, #12
 800daaa:	46bd      	mov	sp, r7
 800daac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab0:	4770      	bx	lr

0800dab2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800dab2:	b480      	push	{r7}
 800dab4:	b085      	sub	sp, #20
 800dab6:	af00      	add	r7, sp, #0
 800dab8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	68fa      	ldr	r2, [r7, #12]
 800dac8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dacc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800dad0:	f023 0307 	bic.w	r3, r3, #7
 800dad4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dadc:	685b      	ldr	r3, [r3, #4]
 800dade:	68fa      	ldr	r2, [r7, #12]
 800dae0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800dae4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dae8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800daea:	2300      	movs	r3, #0
}
 800daec:	4618      	mov	r0, r3
 800daee:	3714      	adds	r7, #20
 800daf0:	46bd      	mov	sp, r7
 800daf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf6:	4770      	bx	lr

0800daf8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800daf8:	b480      	push	{r7}
 800dafa:	b087      	sub	sp, #28
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	60f8      	str	r0, [r7, #12]
 800db00:	460b      	mov	r3, r1
 800db02:	607a      	str	r2, [r7, #4]
 800db04:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	333c      	adds	r3, #60	; 0x3c
 800db0e:	3304      	adds	r3, #4
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800db14:	693b      	ldr	r3, [r7, #16]
 800db16:	4a26      	ldr	r2, [pc, #152]	; (800dbb0 <USB_EP0_OutStart+0xb8>)
 800db18:	4293      	cmp	r3, r2
 800db1a:	d90a      	bls.n	800db32 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800db1c:	697b      	ldr	r3, [r7, #20]
 800db1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800db28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800db2c:	d101      	bne.n	800db32 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800db2e:	2300      	movs	r3, #0
 800db30:	e037      	b.n	800dba2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800db32:	697b      	ldr	r3, [r7, #20]
 800db34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db38:	461a      	mov	r2, r3
 800db3a:	2300      	movs	r3, #0
 800db3c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800db3e:	697b      	ldr	r3, [r7, #20]
 800db40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db44:	691b      	ldr	r3, [r3, #16]
 800db46:	697a      	ldr	r2, [r7, #20]
 800db48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800db4c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800db50:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800db52:	697b      	ldr	r3, [r7, #20]
 800db54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db58:	691b      	ldr	r3, [r3, #16]
 800db5a:	697a      	ldr	r2, [r7, #20]
 800db5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800db60:	f043 0318 	orr.w	r3, r3, #24
 800db64:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800db66:	697b      	ldr	r3, [r7, #20]
 800db68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db6c:	691b      	ldr	r3, [r3, #16]
 800db6e:	697a      	ldr	r2, [r7, #20]
 800db70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800db74:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800db78:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800db7a:	7afb      	ldrb	r3, [r7, #11]
 800db7c:	2b01      	cmp	r3, #1
 800db7e:	d10f      	bne.n	800dba0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800db80:	697b      	ldr	r3, [r7, #20]
 800db82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db86:	461a      	mov	r2, r3
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800db8c:	697b      	ldr	r3, [r7, #20]
 800db8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	697a      	ldr	r2, [r7, #20]
 800db96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800db9a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800db9e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800dba0:	2300      	movs	r3, #0
}
 800dba2:	4618      	mov	r0, r3
 800dba4:	371c      	adds	r7, #28
 800dba6:	46bd      	mov	sp, r7
 800dba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbac:	4770      	bx	lr
 800dbae:	bf00      	nop
 800dbb0:	4f54300a 	.word	0x4f54300a

0800dbb4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800dbb4:	b480      	push	{r7}
 800dbb6:	b085      	sub	sp, #20
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800dbbc:	2300      	movs	r3, #0
 800dbbe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	3301      	adds	r3, #1
 800dbc4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	4a13      	ldr	r2, [pc, #76]	; (800dc18 <USB_CoreReset+0x64>)
 800dbca:	4293      	cmp	r3, r2
 800dbcc:	d901      	bls.n	800dbd2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800dbce:	2303      	movs	r3, #3
 800dbd0:	e01b      	b.n	800dc0a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	691b      	ldr	r3, [r3, #16]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	daf2      	bge.n	800dbc0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800dbda:	2300      	movs	r3, #0
 800dbdc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	691b      	ldr	r3, [r3, #16]
 800dbe2:	f043 0201 	orr.w	r2, r3, #1
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	3301      	adds	r3, #1
 800dbee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	4a09      	ldr	r2, [pc, #36]	; (800dc18 <USB_CoreReset+0x64>)
 800dbf4:	4293      	cmp	r3, r2
 800dbf6:	d901      	bls.n	800dbfc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800dbf8:	2303      	movs	r3, #3
 800dbfa:	e006      	b.n	800dc0a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	691b      	ldr	r3, [r3, #16]
 800dc00:	f003 0301 	and.w	r3, r3, #1
 800dc04:	2b01      	cmp	r3, #1
 800dc06:	d0f0      	beq.n	800dbea <USB_CoreReset+0x36>

  return HAL_OK;
 800dc08:	2300      	movs	r3, #0
}
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	3714      	adds	r7, #20
 800dc0e:	46bd      	mov	sp, r7
 800dc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc14:	4770      	bx	lr
 800dc16:	bf00      	nop
 800dc18:	00030d40 	.word	0x00030d40

0800dc1c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	b084      	sub	sp, #16
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	6078      	str	r0, [r7, #4]
 800dc24:	460b      	mov	r3, r1
 800dc26:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800dc28:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800dc2c:	f012 fe66 	bl	80208fc <USBD_static_malloc>
 800dc30:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d109      	bne.n	800dc4c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	32b0      	adds	r2, #176	; 0xb0
 800dc42:	2100      	movs	r1, #0
 800dc44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800dc48:	2302      	movs	r3, #2
 800dc4a:	e0d4      	b.n	800ddf6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800dc4c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800dc50:	2100      	movs	r1, #0
 800dc52:	68f8      	ldr	r0, [r7, #12]
 800dc54:	f015 fc9c 	bl	8023590 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	32b0      	adds	r2, #176	; 0xb0
 800dc62:	68f9      	ldr	r1, [r7, #12]
 800dc64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	32b0      	adds	r2, #176	; 0xb0
 800dc72:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	7c1b      	ldrb	r3, [r3, #16]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d138      	bne.n	800dcf6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800dc84:	4b5e      	ldr	r3, [pc, #376]	; (800de00 <USBD_CDC_Init+0x1e4>)
 800dc86:	7819      	ldrb	r1, [r3, #0]
 800dc88:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dc8c:	2202      	movs	r2, #2
 800dc8e:	6878      	ldr	r0, [r7, #4]
 800dc90:	f012 fd11 	bl	80206b6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800dc94:	4b5a      	ldr	r3, [pc, #360]	; (800de00 <USBD_CDC_Init+0x1e4>)
 800dc96:	781b      	ldrb	r3, [r3, #0]
 800dc98:	f003 020f 	and.w	r2, r3, #15
 800dc9c:	6879      	ldr	r1, [r7, #4]
 800dc9e:	4613      	mov	r3, r2
 800dca0:	009b      	lsls	r3, r3, #2
 800dca2:	4413      	add	r3, r2
 800dca4:	009b      	lsls	r3, r3, #2
 800dca6:	440b      	add	r3, r1
 800dca8:	3324      	adds	r3, #36	; 0x24
 800dcaa:	2201      	movs	r2, #1
 800dcac:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800dcae:	4b55      	ldr	r3, [pc, #340]	; (800de04 <USBD_CDC_Init+0x1e8>)
 800dcb0:	7819      	ldrb	r1, [r3, #0]
 800dcb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dcb6:	2202      	movs	r2, #2
 800dcb8:	6878      	ldr	r0, [r7, #4]
 800dcba:	f012 fcfc 	bl	80206b6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800dcbe:	4b51      	ldr	r3, [pc, #324]	; (800de04 <USBD_CDC_Init+0x1e8>)
 800dcc0:	781b      	ldrb	r3, [r3, #0]
 800dcc2:	f003 020f 	and.w	r2, r3, #15
 800dcc6:	6879      	ldr	r1, [r7, #4]
 800dcc8:	4613      	mov	r3, r2
 800dcca:	009b      	lsls	r3, r3, #2
 800dccc:	4413      	add	r3, r2
 800dcce:	009b      	lsls	r3, r3, #2
 800dcd0:	440b      	add	r3, r1
 800dcd2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800dcd6:	2201      	movs	r2, #1
 800dcd8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800dcda:	4b4b      	ldr	r3, [pc, #300]	; (800de08 <USBD_CDC_Init+0x1ec>)
 800dcdc:	781b      	ldrb	r3, [r3, #0]
 800dcde:	f003 020f 	and.w	r2, r3, #15
 800dce2:	6879      	ldr	r1, [r7, #4]
 800dce4:	4613      	mov	r3, r2
 800dce6:	009b      	lsls	r3, r3, #2
 800dce8:	4413      	add	r3, r2
 800dcea:	009b      	lsls	r3, r3, #2
 800dcec:	440b      	add	r3, r1
 800dcee:	3326      	adds	r3, #38	; 0x26
 800dcf0:	2210      	movs	r2, #16
 800dcf2:	801a      	strh	r2, [r3, #0]
 800dcf4:	e035      	b.n	800dd62 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800dcf6:	4b42      	ldr	r3, [pc, #264]	; (800de00 <USBD_CDC_Init+0x1e4>)
 800dcf8:	7819      	ldrb	r1, [r3, #0]
 800dcfa:	2340      	movs	r3, #64	; 0x40
 800dcfc:	2202      	movs	r2, #2
 800dcfe:	6878      	ldr	r0, [r7, #4]
 800dd00:	f012 fcd9 	bl	80206b6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800dd04:	4b3e      	ldr	r3, [pc, #248]	; (800de00 <USBD_CDC_Init+0x1e4>)
 800dd06:	781b      	ldrb	r3, [r3, #0]
 800dd08:	f003 020f 	and.w	r2, r3, #15
 800dd0c:	6879      	ldr	r1, [r7, #4]
 800dd0e:	4613      	mov	r3, r2
 800dd10:	009b      	lsls	r3, r3, #2
 800dd12:	4413      	add	r3, r2
 800dd14:	009b      	lsls	r3, r3, #2
 800dd16:	440b      	add	r3, r1
 800dd18:	3324      	adds	r3, #36	; 0x24
 800dd1a:	2201      	movs	r2, #1
 800dd1c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800dd1e:	4b39      	ldr	r3, [pc, #228]	; (800de04 <USBD_CDC_Init+0x1e8>)
 800dd20:	7819      	ldrb	r1, [r3, #0]
 800dd22:	2340      	movs	r3, #64	; 0x40
 800dd24:	2202      	movs	r2, #2
 800dd26:	6878      	ldr	r0, [r7, #4]
 800dd28:	f012 fcc5 	bl	80206b6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800dd2c:	4b35      	ldr	r3, [pc, #212]	; (800de04 <USBD_CDC_Init+0x1e8>)
 800dd2e:	781b      	ldrb	r3, [r3, #0]
 800dd30:	f003 020f 	and.w	r2, r3, #15
 800dd34:	6879      	ldr	r1, [r7, #4]
 800dd36:	4613      	mov	r3, r2
 800dd38:	009b      	lsls	r3, r3, #2
 800dd3a:	4413      	add	r3, r2
 800dd3c:	009b      	lsls	r3, r3, #2
 800dd3e:	440b      	add	r3, r1
 800dd40:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800dd44:	2201      	movs	r2, #1
 800dd46:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800dd48:	4b2f      	ldr	r3, [pc, #188]	; (800de08 <USBD_CDC_Init+0x1ec>)
 800dd4a:	781b      	ldrb	r3, [r3, #0]
 800dd4c:	f003 020f 	and.w	r2, r3, #15
 800dd50:	6879      	ldr	r1, [r7, #4]
 800dd52:	4613      	mov	r3, r2
 800dd54:	009b      	lsls	r3, r3, #2
 800dd56:	4413      	add	r3, r2
 800dd58:	009b      	lsls	r3, r3, #2
 800dd5a:	440b      	add	r3, r1
 800dd5c:	3326      	adds	r3, #38	; 0x26
 800dd5e:	2210      	movs	r2, #16
 800dd60:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800dd62:	4b29      	ldr	r3, [pc, #164]	; (800de08 <USBD_CDC_Init+0x1ec>)
 800dd64:	7819      	ldrb	r1, [r3, #0]
 800dd66:	2308      	movs	r3, #8
 800dd68:	2203      	movs	r2, #3
 800dd6a:	6878      	ldr	r0, [r7, #4]
 800dd6c:	f012 fca3 	bl	80206b6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800dd70:	4b25      	ldr	r3, [pc, #148]	; (800de08 <USBD_CDC_Init+0x1ec>)
 800dd72:	781b      	ldrb	r3, [r3, #0]
 800dd74:	f003 020f 	and.w	r2, r3, #15
 800dd78:	6879      	ldr	r1, [r7, #4]
 800dd7a:	4613      	mov	r3, r2
 800dd7c:	009b      	lsls	r3, r3, #2
 800dd7e:	4413      	add	r3, r2
 800dd80:	009b      	lsls	r3, r3, #2
 800dd82:	440b      	add	r3, r1
 800dd84:	3324      	adds	r3, #36	; 0x24
 800dd86:	2201      	movs	r2, #1
 800dd88:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	2200      	movs	r2, #0
 800dd8e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800dd98:	687a      	ldr	r2, [r7, #4]
 800dd9a:	33b0      	adds	r3, #176	; 0xb0
 800dd9c:	009b      	lsls	r3, r3, #2
 800dd9e:	4413      	add	r3, r2
 800dda0:	685b      	ldr	r3, [r3, #4]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	2200      	movs	r2, #0
 800ddaa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	2200      	movs	r2, #0
 800ddb2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d101      	bne.n	800ddc4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800ddc0:	2302      	movs	r3, #2
 800ddc2:	e018      	b.n	800ddf6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	7c1b      	ldrb	r3, [r3, #16]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d10a      	bne.n	800dde2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ddcc:	4b0d      	ldr	r3, [pc, #52]	; (800de04 <USBD_CDC_Init+0x1e8>)
 800ddce:	7819      	ldrb	r1, [r3, #0]
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ddd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ddda:	6878      	ldr	r0, [r7, #4]
 800dddc:	f012 fd5a 	bl	8020894 <USBD_LL_PrepareReceive>
 800dde0:	e008      	b.n	800ddf4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800dde2:	4b08      	ldr	r3, [pc, #32]	; (800de04 <USBD_CDC_Init+0x1e8>)
 800dde4:	7819      	ldrb	r1, [r3, #0]
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ddec:	2340      	movs	r3, #64	; 0x40
 800ddee:	6878      	ldr	r0, [r7, #4]
 800ddf0:	f012 fd50 	bl	8020894 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ddf4:	2300      	movs	r3, #0
}
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	3710      	adds	r7, #16
 800ddfa:	46bd      	mov	sp, r7
 800ddfc:	bd80      	pop	{r7, pc}
 800ddfe:	bf00      	nop
 800de00:	20000103 	.word	0x20000103
 800de04:	20000104 	.word	0x20000104
 800de08:	20000105 	.word	0x20000105

0800de0c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800de0c:	b580      	push	{r7, lr}
 800de0e:	b082      	sub	sp, #8
 800de10:	af00      	add	r7, sp, #0
 800de12:	6078      	str	r0, [r7, #4]
 800de14:	460b      	mov	r3, r1
 800de16:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800de18:	4b3a      	ldr	r3, [pc, #232]	; (800df04 <USBD_CDC_DeInit+0xf8>)
 800de1a:	781b      	ldrb	r3, [r3, #0]
 800de1c:	4619      	mov	r1, r3
 800de1e:	6878      	ldr	r0, [r7, #4]
 800de20:	f012 fc6f 	bl	8020702 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800de24:	4b37      	ldr	r3, [pc, #220]	; (800df04 <USBD_CDC_DeInit+0xf8>)
 800de26:	781b      	ldrb	r3, [r3, #0]
 800de28:	f003 020f 	and.w	r2, r3, #15
 800de2c:	6879      	ldr	r1, [r7, #4]
 800de2e:	4613      	mov	r3, r2
 800de30:	009b      	lsls	r3, r3, #2
 800de32:	4413      	add	r3, r2
 800de34:	009b      	lsls	r3, r3, #2
 800de36:	440b      	add	r3, r1
 800de38:	3324      	adds	r3, #36	; 0x24
 800de3a:	2200      	movs	r2, #0
 800de3c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800de3e:	4b32      	ldr	r3, [pc, #200]	; (800df08 <USBD_CDC_DeInit+0xfc>)
 800de40:	781b      	ldrb	r3, [r3, #0]
 800de42:	4619      	mov	r1, r3
 800de44:	6878      	ldr	r0, [r7, #4]
 800de46:	f012 fc5c 	bl	8020702 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800de4a:	4b2f      	ldr	r3, [pc, #188]	; (800df08 <USBD_CDC_DeInit+0xfc>)
 800de4c:	781b      	ldrb	r3, [r3, #0]
 800de4e:	f003 020f 	and.w	r2, r3, #15
 800de52:	6879      	ldr	r1, [r7, #4]
 800de54:	4613      	mov	r3, r2
 800de56:	009b      	lsls	r3, r3, #2
 800de58:	4413      	add	r3, r2
 800de5a:	009b      	lsls	r3, r3, #2
 800de5c:	440b      	add	r3, r1
 800de5e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800de62:	2200      	movs	r2, #0
 800de64:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800de66:	4b29      	ldr	r3, [pc, #164]	; (800df0c <USBD_CDC_DeInit+0x100>)
 800de68:	781b      	ldrb	r3, [r3, #0]
 800de6a:	4619      	mov	r1, r3
 800de6c:	6878      	ldr	r0, [r7, #4]
 800de6e:	f012 fc48 	bl	8020702 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800de72:	4b26      	ldr	r3, [pc, #152]	; (800df0c <USBD_CDC_DeInit+0x100>)
 800de74:	781b      	ldrb	r3, [r3, #0]
 800de76:	f003 020f 	and.w	r2, r3, #15
 800de7a:	6879      	ldr	r1, [r7, #4]
 800de7c:	4613      	mov	r3, r2
 800de7e:	009b      	lsls	r3, r3, #2
 800de80:	4413      	add	r3, r2
 800de82:	009b      	lsls	r3, r3, #2
 800de84:	440b      	add	r3, r1
 800de86:	3324      	adds	r3, #36	; 0x24
 800de88:	2200      	movs	r2, #0
 800de8a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800de8c:	4b1f      	ldr	r3, [pc, #124]	; (800df0c <USBD_CDC_DeInit+0x100>)
 800de8e:	781b      	ldrb	r3, [r3, #0]
 800de90:	f003 020f 	and.w	r2, r3, #15
 800de94:	6879      	ldr	r1, [r7, #4]
 800de96:	4613      	mov	r3, r2
 800de98:	009b      	lsls	r3, r3, #2
 800de9a:	4413      	add	r3, r2
 800de9c:	009b      	lsls	r3, r3, #2
 800de9e:	440b      	add	r3, r1
 800dea0:	3326      	adds	r3, #38	; 0x26
 800dea2:	2200      	movs	r2, #0
 800dea4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	32b0      	adds	r2, #176	; 0xb0
 800deb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d01f      	beq.n	800def8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800debe:	687a      	ldr	r2, [r7, #4]
 800dec0:	33b0      	adds	r3, #176	; 0xb0
 800dec2:	009b      	lsls	r3, r3, #2
 800dec4:	4413      	add	r3, r2
 800dec6:	685b      	ldr	r3, [r3, #4]
 800dec8:	685b      	ldr	r3, [r3, #4]
 800deca:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	32b0      	adds	r2, #176	; 0xb0
 800ded6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800deda:	4618      	mov	r0, r3
 800dedc:	f012 fd1c 	bl	8020918 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	32b0      	adds	r2, #176	; 0xb0
 800deea:	2100      	movs	r1, #0
 800deec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	2200      	movs	r2, #0
 800def4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800def8:	2300      	movs	r3, #0
}
 800defa:	4618      	mov	r0, r3
 800defc:	3708      	adds	r7, #8
 800defe:	46bd      	mov	sp, r7
 800df00:	bd80      	pop	{r7, pc}
 800df02:	bf00      	nop
 800df04:	20000103 	.word	0x20000103
 800df08:	20000104 	.word	0x20000104
 800df0c:	20000105 	.word	0x20000105

0800df10 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800df10:	b580      	push	{r7, lr}
 800df12:	b086      	sub	sp, #24
 800df14:	af00      	add	r7, sp, #0
 800df16:	6078      	str	r0, [r7, #4]
 800df18:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	32b0      	adds	r2, #176	; 0xb0
 800df24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df28:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800df2a:	2300      	movs	r3, #0
 800df2c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800df2e:	2300      	movs	r3, #0
 800df30:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800df32:	2300      	movs	r3, #0
 800df34:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800df36:	693b      	ldr	r3, [r7, #16]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d101      	bne.n	800df40 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800df3c:	2303      	movs	r3, #3
 800df3e:	e0bf      	b.n	800e0c0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800df40:	683b      	ldr	r3, [r7, #0]
 800df42:	781b      	ldrb	r3, [r3, #0]
 800df44:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d050      	beq.n	800dfee <USBD_CDC_Setup+0xde>
 800df4c:	2b20      	cmp	r3, #32
 800df4e:	f040 80af 	bne.w	800e0b0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800df52:	683b      	ldr	r3, [r7, #0]
 800df54:	88db      	ldrh	r3, [r3, #6]
 800df56:	2b00      	cmp	r3, #0
 800df58:	d03a      	beq.n	800dfd0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800df5a:	683b      	ldr	r3, [r7, #0]
 800df5c:	781b      	ldrb	r3, [r3, #0]
 800df5e:	b25b      	sxtb	r3, r3
 800df60:	2b00      	cmp	r3, #0
 800df62:	da1b      	bge.n	800df9c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800df6a:	687a      	ldr	r2, [r7, #4]
 800df6c:	33b0      	adds	r3, #176	; 0xb0
 800df6e:	009b      	lsls	r3, r3, #2
 800df70:	4413      	add	r3, r2
 800df72:	685b      	ldr	r3, [r3, #4]
 800df74:	689b      	ldr	r3, [r3, #8]
 800df76:	683a      	ldr	r2, [r7, #0]
 800df78:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800df7a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800df7c:	683a      	ldr	r2, [r7, #0]
 800df7e:	88d2      	ldrh	r2, [r2, #6]
 800df80:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800df82:	683b      	ldr	r3, [r7, #0]
 800df84:	88db      	ldrh	r3, [r3, #6]
 800df86:	2b07      	cmp	r3, #7
 800df88:	bf28      	it	cs
 800df8a:	2307      	movcs	r3, #7
 800df8c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800df8e:	693b      	ldr	r3, [r7, #16]
 800df90:	89fa      	ldrh	r2, [r7, #14]
 800df92:	4619      	mov	r1, r3
 800df94:	6878      	ldr	r0, [r7, #4]
 800df96:	f001 fd89 	bl	800faac <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800df9a:	e090      	b.n	800e0be <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800df9c:	683b      	ldr	r3, [r7, #0]
 800df9e:	785a      	ldrb	r2, [r3, #1]
 800dfa0:	693b      	ldr	r3, [r7, #16]
 800dfa2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800dfa6:	683b      	ldr	r3, [r7, #0]
 800dfa8:	88db      	ldrh	r3, [r3, #6]
 800dfaa:	2b3f      	cmp	r3, #63	; 0x3f
 800dfac:	d803      	bhi.n	800dfb6 <USBD_CDC_Setup+0xa6>
 800dfae:	683b      	ldr	r3, [r7, #0]
 800dfb0:	88db      	ldrh	r3, [r3, #6]
 800dfb2:	b2da      	uxtb	r2, r3
 800dfb4:	e000      	b.n	800dfb8 <USBD_CDC_Setup+0xa8>
 800dfb6:	2240      	movs	r2, #64	; 0x40
 800dfb8:	693b      	ldr	r3, [r7, #16]
 800dfba:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800dfbe:	6939      	ldr	r1, [r7, #16]
 800dfc0:	693b      	ldr	r3, [r7, #16]
 800dfc2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800dfc6:	461a      	mov	r2, r3
 800dfc8:	6878      	ldr	r0, [r7, #4]
 800dfca:	f001 fd9b 	bl	800fb04 <USBD_CtlPrepareRx>
      break;
 800dfce:	e076      	b.n	800e0be <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800dfd6:	687a      	ldr	r2, [r7, #4]
 800dfd8:	33b0      	adds	r3, #176	; 0xb0
 800dfda:	009b      	lsls	r3, r3, #2
 800dfdc:	4413      	add	r3, r2
 800dfde:	685b      	ldr	r3, [r3, #4]
 800dfe0:	689b      	ldr	r3, [r3, #8]
 800dfe2:	683a      	ldr	r2, [r7, #0]
 800dfe4:	7850      	ldrb	r0, [r2, #1]
 800dfe6:	2200      	movs	r2, #0
 800dfe8:	6839      	ldr	r1, [r7, #0]
 800dfea:	4798      	blx	r3
      break;
 800dfec:	e067      	b.n	800e0be <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800dfee:	683b      	ldr	r3, [r7, #0]
 800dff0:	785b      	ldrb	r3, [r3, #1]
 800dff2:	2b0b      	cmp	r3, #11
 800dff4:	d851      	bhi.n	800e09a <USBD_CDC_Setup+0x18a>
 800dff6:	a201      	add	r2, pc, #4	; (adr r2, 800dffc <USBD_CDC_Setup+0xec>)
 800dff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dffc:	0800e02d 	.word	0x0800e02d
 800e000:	0800e0a9 	.word	0x0800e0a9
 800e004:	0800e09b 	.word	0x0800e09b
 800e008:	0800e09b 	.word	0x0800e09b
 800e00c:	0800e09b 	.word	0x0800e09b
 800e010:	0800e09b 	.word	0x0800e09b
 800e014:	0800e09b 	.word	0x0800e09b
 800e018:	0800e09b 	.word	0x0800e09b
 800e01c:	0800e09b 	.word	0x0800e09b
 800e020:	0800e09b 	.word	0x0800e09b
 800e024:	0800e057 	.word	0x0800e057
 800e028:	0800e081 	.word	0x0800e081
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e032:	b2db      	uxtb	r3, r3
 800e034:	2b03      	cmp	r3, #3
 800e036:	d107      	bne.n	800e048 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e038:	f107 030a 	add.w	r3, r7, #10
 800e03c:	2202      	movs	r2, #2
 800e03e:	4619      	mov	r1, r3
 800e040:	6878      	ldr	r0, [r7, #4]
 800e042:	f001 fd33 	bl	800faac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e046:	e032      	b.n	800e0ae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800e048:	6839      	ldr	r1, [r7, #0]
 800e04a:	6878      	ldr	r0, [r7, #4]
 800e04c:	f001 fcbd 	bl	800f9ca <USBD_CtlError>
            ret = USBD_FAIL;
 800e050:	2303      	movs	r3, #3
 800e052:	75fb      	strb	r3, [r7, #23]
          break;
 800e054:	e02b      	b.n	800e0ae <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e05c:	b2db      	uxtb	r3, r3
 800e05e:	2b03      	cmp	r3, #3
 800e060:	d107      	bne.n	800e072 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e062:	f107 030d 	add.w	r3, r7, #13
 800e066:	2201      	movs	r2, #1
 800e068:	4619      	mov	r1, r3
 800e06a:	6878      	ldr	r0, [r7, #4]
 800e06c:	f001 fd1e 	bl	800faac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e070:	e01d      	b.n	800e0ae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800e072:	6839      	ldr	r1, [r7, #0]
 800e074:	6878      	ldr	r0, [r7, #4]
 800e076:	f001 fca8 	bl	800f9ca <USBD_CtlError>
            ret = USBD_FAIL;
 800e07a:	2303      	movs	r3, #3
 800e07c:	75fb      	strb	r3, [r7, #23]
          break;
 800e07e:	e016      	b.n	800e0ae <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e086:	b2db      	uxtb	r3, r3
 800e088:	2b03      	cmp	r3, #3
 800e08a:	d00f      	beq.n	800e0ac <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800e08c:	6839      	ldr	r1, [r7, #0]
 800e08e:	6878      	ldr	r0, [r7, #4]
 800e090:	f001 fc9b 	bl	800f9ca <USBD_CtlError>
            ret = USBD_FAIL;
 800e094:	2303      	movs	r3, #3
 800e096:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800e098:	e008      	b.n	800e0ac <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e09a:	6839      	ldr	r1, [r7, #0]
 800e09c:	6878      	ldr	r0, [r7, #4]
 800e09e:	f001 fc94 	bl	800f9ca <USBD_CtlError>
          ret = USBD_FAIL;
 800e0a2:	2303      	movs	r3, #3
 800e0a4:	75fb      	strb	r3, [r7, #23]
          break;
 800e0a6:	e002      	b.n	800e0ae <USBD_CDC_Setup+0x19e>
          break;
 800e0a8:	bf00      	nop
 800e0aa:	e008      	b.n	800e0be <USBD_CDC_Setup+0x1ae>
          break;
 800e0ac:	bf00      	nop
      }
      break;
 800e0ae:	e006      	b.n	800e0be <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800e0b0:	6839      	ldr	r1, [r7, #0]
 800e0b2:	6878      	ldr	r0, [r7, #4]
 800e0b4:	f001 fc89 	bl	800f9ca <USBD_CtlError>
      ret = USBD_FAIL;
 800e0b8:	2303      	movs	r3, #3
 800e0ba:	75fb      	strb	r3, [r7, #23]
      break;
 800e0bc:	bf00      	nop
  }

  return (uint8_t)ret;
 800e0be:	7dfb      	ldrb	r3, [r7, #23]
}
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	3718      	adds	r7, #24
 800e0c4:	46bd      	mov	sp, r7
 800e0c6:	bd80      	pop	{r7, pc}

0800e0c8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e0c8:	b580      	push	{r7, lr}
 800e0ca:	b084      	sub	sp, #16
 800e0cc:	af00      	add	r7, sp, #0
 800e0ce:	6078      	str	r0, [r7, #4]
 800e0d0:	460b      	mov	r3, r1
 800e0d2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e0da:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	32b0      	adds	r2, #176	; 0xb0
 800e0e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d101      	bne.n	800e0f2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800e0ee:	2303      	movs	r3, #3
 800e0f0:	e065      	b.n	800e1be <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	32b0      	adds	r2, #176	; 0xb0
 800e0fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e100:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e102:	78fb      	ldrb	r3, [r7, #3]
 800e104:	f003 020f 	and.w	r2, r3, #15
 800e108:	6879      	ldr	r1, [r7, #4]
 800e10a:	4613      	mov	r3, r2
 800e10c:	009b      	lsls	r3, r3, #2
 800e10e:	4413      	add	r3, r2
 800e110:	009b      	lsls	r3, r3, #2
 800e112:	440b      	add	r3, r1
 800e114:	3318      	adds	r3, #24
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d02f      	beq.n	800e17c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800e11c:	78fb      	ldrb	r3, [r7, #3]
 800e11e:	f003 020f 	and.w	r2, r3, #15
 800e122:	6879      	ldr	r1, [r7, #4]
 800e124:	4613      	mov	r3, r2
 800e126:	009b      	lsls	r3, r3, #2
 800e128:	4413      	add	r3, r2
 800e12a:	009b      	lsls	r3, r3, #2
 800e12c:	440b      	add	r3, r1
 800e12e:	3318      	adds	r3, #24
 800e130:	681a      	ldr	r2, [r3, #0]
 800e132:	78fb      	ldrb	r3, [r7, #3]
 800e134:	f003 010f 	and.w	r1, r3, #15
 800e138:	68f8      	ldr	r0, [r7, #12]
 800e13a:	460b      	mov	r3, r1
 800e13c:	00db      	lsls	r3, r3, #3
 800e13e:	440b      	add	r3, r1
 800e140:	009b      	lsls	r3, r3, #2
 800e142:	4403      	add	r3, r0
 800e144:	3348      	adds	r3, #72	; 0x48
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	fbb2 f1f3 	udiv	r1, r2, r3
 800e14c:	fb01 f303 	mul.w	r3, r1, r3
 800e150:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e152:	2b00      	cmp	r3, #0
 800e154:	d112      	bne.n	800e17c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800e156:	78fb      	ldrb	r3, [r7, #3]
 800e158:	f003 020f 	and.w	r2, r3, #15
 800e15c:	6879      	ldr	r1, [r7, #4]
 800e15e:	4613      	mov	r3, r2
 800e160:	009b      	lsls	r3, r3, #2
 800e162:	4413      	add	r3, r2
 800e164:	009b      	lsls	r3, r3, #2
 800e166:	440b      	add	r3, r1
 800e168:	3318      	adds	r3, #24
 800e16a:	2200      	movs	r2, #0
 800e16c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e16e:	78f9      	ldrb	r1, [r7, #3]
 800e170:	2300      	movs	r3, #0
 800e172:	2200      	movs	r2, #0
 800e174:	6878      	ldr	r0, [r7, #4]
 800e176:	f012 fb6c 	bl	8020852 <USBD_LL_Transmit>
 800e17a:	e01f      	b.n	800e1bc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800e17c:	68bb      	ldr	r3, [r7, #8]
 800e17e:	2200      	movs	r2, #0
 800e180:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e18a:	687a      	ldr	r2, [r7, #4]
 800e18c:	33b0      	adds	r3, #176	; 0xb0
 800e18e:	009b      	lsls	r3, r3, #2
 800e190:	4413      	add	r3, r2
 800e192:	685b      	ldr	r3, [r3, #4]
 800e194:	691b      	ldr	r3, [r3, #16]
 800e196:	2b00      	cmp	r3, #0
 800e198:	d010      	beq.n	800e1bc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e1a0:	687a      	ldr	r2, [r7, #4]
 800e1a2:	33b0      	adds	r3, #176	; 0xb0
 800e1a4:	009b      	lsls	r3, r3, #2
 800e1a6:	4413      	add	r3, r2
 800e1a8:	685b      	ldr	r3, [r3, #4]
 800e1aa:	691b      	ldr	r3, [r3, #16]
 800e1ac:	68ba      	ldr	r2, [r7, #8]
 800e1ae:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800e1b2:	68ba      	ldr	r2, [r7, #8]
 800e1b4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800e1b8:	78fa      	ldrb	r2, [r7, #3]
 800e1ba:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e1bc:	2300      	movs	r3, #0
}
 800e1be:	4618      	mov	r0, r3
 800e1c0:	3710      	adds	r7, #16
 800e1c2:	46bd      	mov	sp, r7
 800e1c4:	bd80      	pop	{r7, pc}

0800e1c6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e1c6:	b580      	push	{r7, lr}
 800e1c8:	b084      	sub	sp, #16
 800e1ca:	af00      	add	r7, sp, #0
 800e1cc:	6078      	str	r0, [r7, #4]
 800e1ce:	460b      	mov	r3, r1
 800e1d0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	32b0      	adds	r2, #176	; 0xb0
 800e1dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e1e0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	32b0      	adds	r2, #176	; 0xb0
 800e1ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d101      	bne.n	800e1f8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800e1f4:	2303      	movs	r3, #3
 800e1f6:	e01a      	b.n	800e22e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e1f8:	78fb      	ldrb	r3, [r7, #3]
 800e1fa:	4619      	mov	r1, r3
 800e1fc:	6878      	ldr	r0, [r7, #4]
 800e1fe:	f012 fb6a 	bl	80208d6 <USBD_LL_GetRxDataSize>
 800e202:	4602      	mov	r2, r0
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e210:	687a      	ldr	r2, [r7, #4]
 800e212:	33b0      	adds	r3, #176	; 0xb0
 800e214:	009b      	lsls	r3, r3, #2
 800e216:	4413      	add	r3, r2
 800e218:	685b      	ldr	r3, [r3, #4]
 800e21a:	68db      	ldr	r3, [r3, #12]
 800e21c:	68fa      	ldr	r2, [r7, #12]
 800e21e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800e222:	68fa      	ldr	r2, [r7, #12]
 800e224:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800e228:	4611      	mov	r1, r2
 800e22a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e22c:	2300      	movs	r3, #0
}
 800e22e:	4618      	mov	r0, r3
 800e230:	3710      	adds	r7, #16
 800e232:	46bd      	mov	sp, r7
 800e234:	bd80      	pop	{r7, pc}

0800e236 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e236:	b580      	push	{r7, lr}
 800e238:	b084      	sub	sp, #16
 800e23a:	af00      	add	r7, sp, #0
 800e23c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	32b0      	adds	r2, #176	; 0xb0
 800e248:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e24c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	2b00      	cmp	r3, #0
 800e252:	d101      	bne.n	800e258 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e254:	2303      	movs	r3, #3
 800e256:	e025      	b.n	800e2a4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e25e:	687a      	ldr	r2, [r7, #4]
 800e260:	33b0      	adds	r3, #176	; 0xb0
 800e262:	009b      	lsls	r3, r3, #2
 800e264:	4413      	add	r3, r2
 800e266:	685b      	ldr	r3, [r3, #4]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d01a      	beq.n	800e2a2 <USBD_CDC_EP0_RxReady+0x6c>
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800e272:	2bff      	cmp	r3, #255	; 0xff
 800e274:	d015      	beq.n	800e2a2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e27c:	687a      	ldr	r2, [r7, #4]
 800e27e:	33b0      	adds	r3, #176	; 0xb0
 800e280:	009b      	lsls	r3, r3, #2
 800e282:	4413      	add	r3, r2
 800e284:	685b      	ldr	r3, [r3, #4]
 800e286:	689b      	ldr	r3, [r3, #8]
 800e288:	68fa      	ldr	r2, [r7, #12]
 800e28a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800e28e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800e290:	68fa      	ldr	r2, [r7, #12]
 800e292:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e296:	b292      	uxth	r2, r2
 800e298:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	22ff      	movs	r2, #255	; 0xff
 800e29e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800e2a2:	2300      	movs	r3, #0
}
 800e2a4:	4618      	mov	r0, r3
 800e2a6:	3710      	adds	r7, #16
 800e2a8:	46bd      	mov	sp, r7
 800e2aa:	bd80      	pop	{r7, pc}

0800e2ac <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e2ac:	b580      	push	{r7, lr}
 800e2ae:	b086      	sub	sp, #24
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e2b4:	2182      	movs	r1, #130	; 0x82
 800e2b6:	4818      	ldr	r0, [pc, #96]	; (800e318 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e2b8:	f000 fd4f 	bl	800ed5a <USBD_GetEpDesc>
 800e2bc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e2be:	2101      	movs	r1, #1
 800e2c0:	4815      	ldr	r0, [pc, #84]	; (800e318 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e2c2:	f000 fd4a 	bl	800ed5a <USBD_GetEpDesc>
 800e2c6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e2c8:	2181      	movs	r1, #129	; 0x81
 800e2ca:	4813      	ldr	r0, [pc, #76]	; (800e318 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e2cc:	f000 fd45 	bl	800ed5a <USBD_GetEpDesc>
 800e2d0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e2d2:	697b      	ldr	r3, [r7, #20]
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d002      	beq.n	800e2de <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e2d8:	697b      	ldr	r3, [r7, #20]
 800e2da:	2210      	movs	r2, #16
 800e2dc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e2de:	693b      	ldr	r3, [r7, #16]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d006      	beq.n	800e2f2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e2e4:	693b      	ldr	r3, [r7, #16]
 800e2e6:	2200      	movs	r2, #0
 800e2e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e2ec:	711a      	strb	r2, [r3, #4]
 800e2ee:	2200      	movs	r2, #0
 800e2f0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d006      	beq.n	800e306 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	2200      	movs	r2, #0
 800e2fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e300:	711a      	strb	r2, [r3, #4]
 800e302:	2200      	movs	r2, #0
 800e304:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	2243      	movs	r2, #67	; 0x43
 800e30a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e30c:	4b02      	ldr	r3, [pc, #8]	; (800e318 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800e30e:	4618      	mov	r0, r3
 800e310:	3718      	adds	r7, #24
 800e312:	46bd      	mov	sp, r7
 800e314:	bd80      	pop	{r7, pc}
 800e316:	bf00      	nop
 800e318:	200000c0 	.word	0x200000c0

0800e31c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e31c:	b580      	push	{r7, lr}
 800e31e:	b086      	sub	sp, #24
 800e320:	af00      	add	r7, sp, #0
 800e322:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e324:	2182      	movs	r1, #130	; 0x82
 800e326:	4818      	ldr	r0, [pc, #96]	; (800e388 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e328:	f000 fd17 	bl	800ed5a <USBD_GetEpDesc>
 800e32c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e32e:	2101      	movs	r1, #1
 800e330:	4815      	ldr	r0, [pc, #84]	; (800e388 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e332:	f000 fd12 	bl	800ed5a <USBD_GetEpDesc>
 800e336:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e338:	2181      	movs	r1, #129	; 0x81
 800e33a:	4813      	ldr	r0, [pc, #76]	; (800e388 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e33c:	f000 fd0d 	bl	800ed5a <USBD_GetEpDesc>
 800e340:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e342:	697b      	ldr	r3, [r7, #20]
 800e344:	2b00      	cmp	r3, #0
 800e346:	d002      	beq.n	800e34e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800e348:	697b      	ldr	r3, [r7, #20]
 800e34a:	2210      	movs	r2, #16
 800e34c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e34e:	693b      	ldr	r3, [r7, #16]
 800e350:	2b00      	cmp	r3, #0
 800e352:	d006      	beq.n	800e362 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e354:	693b      	ldr	r3, [r7, #16]
 800e356:	2200      	movs	r2, #0
 800e358:	711a      	strb	r2, [r3, #4]
 800e35a:	2200      	movs	r2, #0
 800e35c:	f042 0202 	orr.w	r2, r2, #2
 800e360:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	2b00      	cmp	r3, #0
 800e366:	d006      	beq.n	800e376 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	2200      	movs	r2, #0
 800e36c:	711a      	strb	r2, [r3, #4]
 800e36e:	2200      	movs	r2, #0
 800e370:	f042 0202 	orr.w	r2, r2, #2
 800e374:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	2243      	movs	r2, #67	; 0x43
 800e37a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e37c:	4b02      	ldr	r3, [pc, #8]	; (800e388 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800e37e:	4618      	mov	r0, r3
 800e380:	3718      	adds	r7, #24
 800e382:	46bd      	mov	sp, r7
 800e384:	bd80      	pop	{r7, pc}
 800e386:	bf00      	nop
 800e388:	200000c0 	.word	0x200000c0

0800e38c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e38c:	b580      	push	{r7, lr}
 800e38e:	b086      	sub	sp, #24
 800e390:	af00      	add	r7, sp, #0
 800e392:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e394:	2182      	movs	r1, #130	; 0x82
 800e396:	4818      	ldr	r0, [pc, #96]	; (800e3f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e398:	f000 fcdf 	bl	800ed5a <USBD_GetEpDesc>
 800e39c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e39e:	2101      	movs	r1, #1
 800e3a0:	4815      	ldr	r0, [pc, #84]	; (800e3f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e3a2:	f000 fcda 	bl	800ed5a <USBD_GetEpDesc>
 800e3a6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e3a8:	2181      	movs	r1, #129	; 0x81
 800e3aa:	4813      	ldr	r0, [pc, #76]	; (800e3f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e3ac:	f000 fcd5 	bl	800ed5a <USBD_GetEpDesc>
 800e3b0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e3b2:	697b      	ldr	r3, [r7, #20]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d002      	beq.n	800e3be <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e3b8:	697b      	ldr	r3, [r7, #20]
 800e3ba:	2210      	movs	r2, #16
 800e3bc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e3be:	693b      	ldr	r3, [r7, #16]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d006      	beq.n	800e3d2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e3c4:	693b      	ldr	r3, [r7, #16]
 800e3c6:	2200      	movs	r2, #0
 800e3c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e3cc:	711a      	strb	r2, [r3, #4]
 800e3ce:	2200      	movs	r2, #0
 800e3d0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d006      	beq.n	800e3e6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	2200      	movs	r2, #0
 800e3dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e3e0:	711a      	strb	r2, [r3, #4]
 800e3e2:	2200      	movs	r2, #0
 800e3e4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	2243      	movs	r2, #67	; 0x43
 800e3ea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e3ec:	4b02      	ldr	r3, [pc, #8]	; (800e3f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	3718      	adds	r7, #24
 800e3f2:	46bd      	mov	sp, r7
 800e3f4:	bd80      	pop	{r7, pc}
 800e3f6:	bf00      	nop
 800e3f8:	200000c0 	.word	0x200000c0

0800e3fc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e3fc:	b480      	push	{r7}
 800e3fe:	b083      	sub	sp, #12
 800e400:	af00      	add	r7, sp, #0
 800e402:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	220a      	movs	r2, #10
 800e408:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e40a:	4b03      	ldr	r3, [pc, #12]	; (800e418 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e40c:	4618      	mov	r0, r3
 800e40e:	370c      	adds	r7, #12
 800e410:	46bd      	mov	sp, r7
 800e412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e416:	4770      	bx	lr
 800e418:	2000007c 	.word	0x2000007c

0800e41c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e41c:	b480      	push	{r7}
 800e41e:	b083      	sub	sp, #12
 800e420:	af00      	add	r7, sp, #0
 800e422:	6078      	str	r0, [r7, #4]
 800e424:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e426:	683b      	ldr	r3, [r7, #0]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d101      	bne.n	800e430 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e42c:	2303      	movs	r3, #3
 800e42e:	e009      	b.n	800e444 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e436:	687a      	ldr	r2, [r7, #4]
 800e438:	33b0      	adds	r3, #176	; 0xb0
 800e43a:	009b      	lsls	r3, r3, #2
 800e43c:	4413      	add	r3, r2
 800e43e:	683a      	ldr	r2, [r7, #0]
 800e440:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800e442:	2300      	movs	r3, #0
}
 800e444:	4618      	mov	r0, r3
 800e446:	370c      	adds	r7, #12
 800e448:	46bd      	mov	sp, r7
 800e44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e44e:	4770      	bx	lr

0800e450 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e450:	b480      	push	{r7}
 800e452:	b087      	sub	sp, #28
 800e454:	af00      	add	r7, sp, #0
 800e456:	60f8      	str	r0, [r7, #12]
 800e458:	60b9      	str	r1, [r7, #8]
 800e45a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	32b0      	adds	r2, #176	; 0xb0
 800e466:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e46a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800e46c:	697b      	ldr	r3, [r7, #20]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d101      	bne.n	800e476 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800e472:	2303      	movs	r3, #3
 800e474:	e008      	b.n	800e488 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800e476:	697b      	ldr	r3, [r7, #20]
 800e478:	68ba      	ldr	r2, [r7, #8]
 800e47a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800e47e:	697b      	ldr	r3, [r7, #20]
 800e480:	687a      	ldr	r2, [r7, #4]
 800e482:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800e486:	2300      	movs	r3, #0
}
 800e488:	4618      	mov	r0, r3
 800e48a:	371c      	adds	r7, #28
 800e48c:	46bd      	mov	sp, r7
 800e48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e492:	4770      	bx	lr

0800e494 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e494:	b480      	push	{r7}
 800e496:	b085      	sub	sp, #20
 800e498:	af00      	add	r7, sp, #0
 800e49a:	6078      	str	r0, [r7, #4]
 800e49c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	32b0      	adds	r2, #176	; 0xb0
 800e4a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4ac:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d101      	bne.n	800e4b8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800e4b4:	2303      	movs	r3, #3
 800e4b6:	e004      	b.n	800e4c2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	683a      	ldr	r2, [r7, #0]
 800e4bc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800e4c0:	2300      	movs	r3, #0
}
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	3714      	adds	r7, #20
 800e4c6:	46bd      	mov	sp, r7
 800e4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4cc:	4770      	bx	lr
	...

0800e4d0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800e4d0:	b580      	push	{r7, lr}
 800e4d2:	b084      	sub	sp, #16
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	32b0      	adds	r2, #176	; 0xb0
 800e4e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4e6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800e4e8:	2301      	movs	r3, #1
 800e4ea:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	32b0      	adds	r2, #176	; 0xb0
 800e4f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d101      	bne.n	800e502 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800e4fe:	2303      	movs	r3, #3
 800e500:	e025      	b.n	800e54e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800e502:	68bb      	ldr	r3, [r7, #8]
 800e504:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d11f      	bne.n	800e54c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800e50c:	68bb      	ldr	r3, [r7, #8]
 800e50e:	2201      	movs	r2, #1
 800e510:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800e514:	4b10      	ldr	r3, [pc, #64]	; (800e558 <USBD_CDC_TransmitPacket+0x88>)
 800e516:	781b      	ldrb	r3, [r3, #0]
 800e518:	f003 020f 	and.w	r2, r3, #15
 800e51c:	68bb      	ldr	r3, [r7, #8]
 800e51e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800e522:	6878      	ldr	r0, [r7, #4]
 800e524:	4613      	mov	r3, r2
 800e526:	009b      	lsls	r3, r3, #2
 800e528:	4413      	add	r3, r2
 800e52a:	009b      	lsls	r3, r3, #2
 800e52c:	4403      	add	r3, r0
 800e52e:	3318      	adds	r3, #24
 800e530:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800e532:	4b09      	ldr	r3, [pc, #36]	; (800e558 <USBD_CDC_TransmitPacket+0x88>)
 800e534:	7819      	ldrb	r1, [r3, #0]
 800e536:	68bb      	ldr	r3, [r7, #8]
 800e538:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800e53c:	68bb      	ldr	r3, [r7, #8]
 800e53e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800e542:	6878      	ldr	r0, [r7, #4]
 800e544:	f012 f985 	bl	8020852 <USBD_LL_Transmit>

    ret = USBD_OK;
 800e548:	2300      	movs	r3, #0
 800e54a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800e54c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e54e:	4618      	mov	r0, r3
 800e550:	3710      	adds	r7, #16
 800e552:	46bd      	mov	sp, r7
 800e554:	bd80      	pop	{r7, pc}
 800e556:	bf00      	nop
 800e558:	20000103 	.word	0x20000103

0800e55c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e55c:	b580      	push	{r7, lr}
 800e55e:	b084      	sub	sp, #16
 800e560:	af00      	add	r7, sp, #0
 800e562:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	32b0      	adds	r2, #176	; 0xb0
 800e56e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e572:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	32b0      	adds	r2, #176	; 0xb0
 800e57e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e582:	2b00      	cmp	r3, #0
 800e584:	d101      	bne.n	800e58a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800e586:	2303      	movs	r3, #3
 800e588:	e018      	b.n	800e5bc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	7c1b      	ldrb	r3, [r3, #16]
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d10a      	bne.n	800e5a8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e592:	4b0c      	ldr	r3, [pc, #48]	; (800e5c4 <USBD_CDC_ReceivePacket+0x68>)
 800e594:	7819      	ldrb	r1, [r3, #0]
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e59c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e5a0:	6878      	ldr	r0, [r7, #4]
 800e5a2:	f012 f977 	bl	8020894 <USBD_LL_PrepareReceive>
 800e5a6:	e008      	b.n	800e5ba <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e5a8:	4b06      	ldr	r3, [pc, #24]	; (800e5c4 <USBD_CDC_ReceivePacket+0x68>)
 800e5aa:	7819      	ldrb	r1, [r3, #0]
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e5b2:	2340      	movs	r3, #64	; 0x40
 800e5b4:	6878      	ldr	r0, [r7, #4]
 800e5b6:	f012 f96d 	bl	8020894 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e5ba:	2300      	movs	r3, #0
}
 800e5bc:	4618      	mov	r0, r3
 800e5be:	3710      	adds	r7, #16
 800e5c0:	46bd      	mov	sp, r7
 800e5c2:	bd80      	pop	{r7, pc}
 800e5c4:	20000104 	.word	0x20000104

0800e5c8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	b086      	sub	sp, #24
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	60f8      	str	r0, [r7, #12]
 800e5d0:	60b9      	str	r1, [r7, #8]
 800e5d2:	4613      	mov	r3, r2
 800e5d4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d101      	bne.n	800e5e0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e5dc:	2303      	movs	r3, #3
 800e5de:	e01f      	b.n	800e620 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	2200      	movs	r2, #0
 800e5e4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	2200      	movs	r2, #0
 800e5ec:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	2200      	movs	r2, #0
 800e5f4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e5f8:	68bb      	ldr	r3, [r7, #8]
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d003      	beq.n	800e606 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	68ba      	ldr	r2, [r7, #8]
 800e602:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	2201      	movs	r2, #1
 800e60a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	79fa      	ldrb	r2, [r7, #7]
 800e612:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e614:	68f8      	ldr	r0, [r7, #12]
 800e616:	f011 ffe7 	bl	80205e8 <USBD_LL_Init>
 800e61a:	4603      	mov	r3, r0
 800e61c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e61e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e620:	4618      	mov	r0, r3
 800e622:	3718      	adds	r7, #24
 800e624:	46bd      	mov	sp, r7
 800e626:	bd80      	pop	{r7, pc}

0800e628 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e628:	b580      	push	{r7, lr}
 800e62a:	b084      	sub	sp, #16
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	6078      	str	r0, [r7, #4]
 800e630:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e632:	2300      	movs	r3, #0
 800e634:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e636:	683b      	ldr	r3, [r7, #0]
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d101      	bne.n	800e640 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e63c:	2303      	movs	r3, #3
 800e63e:	e025      	b.n	800e68c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	683a      	ldr	r2, [r7, #0]
 800e644:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	32ae      	adds	r2, #174	; 0xae
 800e652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d00f      	beq.n	800e67c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	32ae      	adds	r2, #174	; 0xae
 800e666:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e66a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e66c:	f107 020e 	add.w	r2, r7, #14
 800e670:	4610      	mov	r0, r2
 800e672:	4798      	blx	r3
 800e674:	4602      	mov	r2, r0
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800e682:	1c5a      	adds	r2, r3, #1
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800e68a:	2300      	movs	r3, #0
}
 800e68c:	4618      	mov	r0, r3
 800e68e:	3710      	adds	r7, #16
 800e690:	46bd      	mov	sp, r7
 800e692:	bd80      	pop	{r7, pc}

0800e694 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e694:	b580      	push	{r7, lr}
 800e696:	b082      	sub	sp, #8
 800e698:	af00      	add	r7, sp, #0
 800e69a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e69c:	6878      	ldr	r0, [r7, #4]
 800e69e:	f011 ffef 	bl	8020680 <USBD_LL_Start>
 800e6a2:	4603      	mov	r3, r0
}
 800e6a4:	4618      	mov	r0, r3
 800e6a6:	3708      	adds	r7, #8
 800e6a8:	46bd      	mov	sp, r7
 800e6aa:	bd80      	pop	{r7, pc}

0800e6ac <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800e6ac:	b480      	push	{r7}
 800e6ae:	b083      	sub	sp, #12
 800e6b0:	af00      	add	r7, sp, #0
 800e6b2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e6b4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	370c      	adds	r7, #12
 800e6ba:	46bd      	mov	sp, r7
 800e6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c0:	4770      	bx	lr

0800e6c2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e6c2:	b580      	push	{r7, lr}
 800e6c4:	b084      	sub	sp, #16
 800e6c6:	af00      	add	r7, sp, #0
 800e6c8:	6078      	str	r0, [r7, #4]
 800e6ca:	460b      	mov	r3, r1
 800e6cc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e6ce:	2300      	movs	r3, #0
 800e6d0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d009      	beq.n	800e6f0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	78fa      	ldrb	r2, [r7, #3]
 800e6e6:	4611      	mov	r1, r2
 800e6e8:	6878      	ldr	r0, [r7, #4]
 800e6ea:	4798      	blx	r3
 800e6ec:	4603      	mov	r3, r0
 800e6ee:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e6f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	3710      	adds	r7, #16
 800e6f6:	46bd      	mov	sp, r7
 800e6f8:	bd80      	pop	{r7, pc}

0800e6fa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e6fa:	b580      	push	{r7, lr}
 800e6fc:	b084      	sub	sp, #16
 800e6fe:	af00      	add	r7, sp, #0
 800e700:	6078      	str	r0, [r7, #4]
 800e702:	460b      	mov	r3, r1
 800e704:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e706:	2300      	movs	r3, #0
 800e708:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e710:	685b      	ldr	r3, [r3, #4]
 800e712:	78fa      	ldrb	r2, [r7, #3]
 800e714:	4611      	mov	r1, r2
 800e716:	6878      	ldr	r0, [r7, #4]
 800e718:	4798      	blx	r3
 800e71a:	4603      	mov	r3, r0
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d001      	beq.n	800e724 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800e720:	2303      	movs	r3, #3
 800e722:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e724:	7bfb      	ldrb	r3, [r7, #15]
}
 800e726:	4618      	mov	r0, r3
 800e728:	3710      	adds	r7, #16
 800e72a:	46bd      	mov	sp, r7
 800e72c:	bd80      	pop	{r7, pc}

0800e72e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e72e:	b580      	push	{r7, lr}
 800e730:	b084      	sub	sp, #16
 800e732:	af00      	add	r7, sp, #0
 800e734:	6078      	str	r0, [r7, #4]
 800e736:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e73e:	6839      	ldr	r1, [r7, #0]
 800e740:	4618      	mov	r0, r3
 800e742:	f001 f908 	bl	800f956 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	2201      	movs	r2, #1
 800e74a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800e754:	461a      	mov	r2, r3
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e762:	f003 031f 	and.w	r3, r3, #31
 800e766:	2b02      	cmp	r3, #2
 800e768:	d01a      	beq.n	800e7a0 <USBD_LL_SetupStage+0x72>
 800e76a:	2b02      	cmp	r3, #2
 800e76c:	d822      	bhi.n	800e7b4 <USBD_LL_SetupStage+0x86>
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d002      	beq.n	800e778 <USBD_LL_SetupStage+0x4a>
 800e772:	2b01      	cmp	r3, #1
 800e774:	d00a      	beq.n	800e78c <USBD_LL_SetupStage+0x5e>
 800e776:	e01d      	b.n	800e7b4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e77e:	4619      	mov	r1, r3
 800e780:	6878      	ldr	r0, [r7, #4]
 800e782:	f000 fb5f 	bl	800ee44 <USBD_StdDevReq>
 800e786:	4603      	mov	r3, r0
 800e788:	73fb      	strb	r3, [r7, #15]
      break;
 800e78a:	e020      	b.n	800e7ce <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e792:	4619      	mov	r1, r3
 800e794:	6878      	ldr	r0, [r7, #4]
 800e796:	f000 fbc7 	bl	800ef28 <USBD_StdItfReq>
 800e79a:	4603      	mov	r3, r0
 800e79c:	73fb      	strb	r3, [r7, #15]
      break;
 800e79e:	e016      	b.n	800e7ce <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e7a6:	4619      	mov	r1, r3
 800e7a8:	6878      	ldr	r0, [r7, #4]
 800e7aa:	f000 fc29 	bl	800f000 <USBD_StdEPReq>
 800e7ae:	4603      	mov	r3, r0
 800e7b0:	73fb      	strb	r3, [r7, #15]
      break;
 800e7b2:	e00c      	b.n	800e7ce <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e7ba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e7be:	b2db      	uxtb	r3, r3
 800e7c0:	4619      	mov	r1, r3
 800e7c2:	6878      	ldr	r0, [r7, #4]
 800e7c4:	f011 ffbc 	bl	8020740 <USBD_LL_StallEP>
 800e7c8:	4603      	mov	r3, r0
 800e7ca:	73fb      	strb	r3, [r7, #15]
      break;
 800e7cc:	bf00      	nop
  }

  return ret;
 800e7ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7d0:	4618      	mov	r0, r3
 800e7d2:	3710      	adds	r7, #16
 800e7d4:	46bd      	mov	sp, r7
 800e7d6:	bd80      	pop	{r7, pc}

0800e7d8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e7d8:	b580      	push	{r7, lr}
 800e7da:	b086      	sub	sp, #24
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	60f8      	str	r0, [r7, #12]
 800e7e0:	460b      	mov	r3, r1
 800e7e2:	607a      	str	r2, [r7, #4]
 800e7e4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800e7e6:	2300      	movs	r3, #0
 800e7e8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800e7ea:	7afb      	ldrb	r3, [r7, #11]
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d16e      	bne.n	800e8ce <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800e7f6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e7fe:	2b03      	cmp	r3, #3
 800e800:	f040 8098 	bne.w	800e934 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800e804:	693b      	ldr	r3, [r7, #16]
 800e806:	689a      	ldr	r2, [r3, #8]
 800e808:	693b      	ldr	r3, [r7, #16]
 800e80a:	68db      	ldr	r3, [r3, #12]
 800e80c:	429a      	cmp	r2, r3
 800e80e:	d913      	bls.n	800e838 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800e810:	693b      	ldr	r3, [r7, #16]
 800e812:	689a      	ldr	r2, [r3, #8]
 800e814:	693b      	ldr	r3, [r7, #16]
 800e816:	68db      	ldr	r3, [r3, #12]
 800e818:	1ad2      	subs	r2, r2, r3
 800e81a:	693b      	ldr	r3, [r7, #16]
 800e81c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e81e:	693b      	ldr	r3, [r7, #16]
 800e820:	68da      	ldr	r2, [r3, #12]
 800e822:	693b      	ldr	r3, [r7, #16]
 800e824:	689b      	ldr	r3, [r3, #8]
 800e826:	4293      	cmp	r3, r2
 800e828:	bf28      	it	cs
 800e82a:	4613      	movcs	r3, r2
 800e82c:	461a      	mov	r2, r3
 800e82e:	6879      	ldr	r1, [r7, #4]
 800e830:	68f8      	ldr	r0, [r7, #12]
 800e832:	f001 f984 	bl	800fb3e <USBD_CtlContinueRx>
 800e836:	e07d      	b.n	800e934 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e83e:	f003 031f 	and.w	r3, r3, #31
 800e842:	2b02      	cmp	r3, #2
 800e844:	d014      	beq.n	800e870 <USBD_LL_DataOutStage+0x98>
 800e846:	2b02      	cmp	r3, #2
 800e848:	d81d      	bhi.n	800e886 <USBD_LL_DataOutStage+0xae>
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d002      	beq.n	800e854 <USBD_LL_DataOutStage+0x7c>
 800e84e:	2b01      	cmp	r3, #1
 800e850:	d003      	beq.n	800e85a <USBD_LL_DataOutStage+0x82>
 800e852:	e018      	b.n	800e886 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800e854:	2300      	movs	r3, #0
 800e856:	75bb      	strb	r3, [r7, #22]
            break;
 800e858:	e018      	b.n	800e88c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800e860:	b2db      	uxtb	r3, r3
 800e862:	4619      	mov	r1, r3
 800e864:	68f8      	ldr	r0, [r7, #12]
 800e866:	f000 fa5e 	bl	800ed26 <USBD_CoreFindIF>
 800e86a:	4603      	mov	r3, r0
 800e86c:	75bb      	strb	r3, [r7, #22]
            break;
 800e86e:	e00d      	b.n	800e88c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800e876:	b2db      	uxtb	r3, r3
 800e878:	4619      	mov	r1, r3
 800e87a:	68f8      	ldr	r0, [r7, #12]
 800e87c:	f000 fa60 	bl	800ed40 <USBD_CoreFindEP>
 800e880:	4603      	mov	r3, r0
 800e882:	75bb      	strb	r3, [r7, #22]
            break;
 800e884:	e002      	b.n	800e88c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800e886:	2300      	movs	r3, #0
 800e888:	75bb      	strb	r3, [r7, #22]
            break;
 800e88a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800e88c:	7dbb      	ldrb	r3, [r7, #22]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d119      	bne.n	800e8c6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e898:	b2db      	uxtb	r3, r3
 800e89a:	2b03      	cmp	r3, #3
 800e89c:	d113      	bne.n	800e8c6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800e89e:	7dba      	ldrb	r2, [r7, #22]
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	32ae      	adds	r2, #174	; 0xae
 800e8a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e8a8:	691b      	ldr	r3, [r3, #16]
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d00b      	beq.n	800e8c6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800e8ae:	7dba      	ldrb	r2, [r7, #22]
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800e8b6:	7dba      	ldrb	r2, [r7, #22]
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	32ae      	adds	r2, #174	; 0xae
 800e8bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e8c0:	691b      	ldr	r3, [r3, #16]
 800e8c2:	68f8      	ldr	r0, [r7, #12]
 800e8c4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800e8c6:	68f8      	ldr	r0, [r7, #12]
 800e8c8:	f001 f94a 	bl	800fb60 <USBD_CtlSendStatus>
 800e8cc:	e032      	b.n	800e934 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800e8ce:	7afb      	ldrb	r3, [r7, #11]
 800e8d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e8d4:	b2db      	uxtb	r3, r3
 800e8d6:	4619      	mov	r1, r3
 800e8d8:	68f8      	ldr	r0, [r7, #12]
 800e8da:	f000 fa31 	bl	800ed40 <USBD_CoreFindEP>
 800e8de:	4603      	mov	r3, r0
 800e8e0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e8e2:	7dbb      	ldrb	r3, [r7, #22]
 800e8e4:	2bff      	cmp	r3, #255	; 0xff
 800e8e6:	d025      	beq.n	800e934 <USBD_LL_DataOutStage+0x15c>
 800e8e8:	7dbb      	ldrb	r3, [r7, #22]
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d122      	bne.n	800e934 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e8f4:	b2db      	uxtb	r3, r3
 800e8f6:	2b03      	cmp	r3, #3
 800e8f8:	d117      	bne.n	800e92a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800e8fa:	7dba      	ldrb	r2, [r7, #22]
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	32ae      	adds	r2, #174	; 0xae
 800e900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e904:	699b      	ldr	r3, [r3, #24]
 800e906:	2b00      	cmp	r3, #0
 800e908:	d00f      	beq.n	800e92a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800e90a:	7dba      	ldrb	r2, [r7, #22]
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800e912:	7dba      	ldrb	r2, [r7, #22]
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	32ae      	adds	r2, #174	; 0xae
 800e918:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e91c:	699b      	ldr	r3, [r3, #24]
 800e91e:	7afa      	ldrb	r2, [r7, #11]
 800e920:	4611      	mov	r1, r2
 800e922:	68f8      	ldr	r0, [r7, #12]
 800e924:	4798      	blx	r3
 800e926:	4603      	mov	r3, r0
 800e928:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800e92a:	7dfb      	ldrb	r3, [r7, #23]
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d001      	beq.n	800e934 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800e930:	7dfb      	ldrb	r3, [r7, #23]
 800e932:	e000      	b.n	800e936 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800e934:	2300      	movs	r3, #0
}
 800e936:	4618      	mov	r0, r3
 800e938:	3718      	adds	r7, #24
 800e93a:	46bd      	mov	sp, r7
 800e93c:	bd80      	pop	{r7, pc}

0800e93e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e93e:	b580      	push	{r7, lr}
 800e940:	b086      	sub	sp, #24
 800e942:	af00      	add	r7, sp, #0
 800e944:	60f8      	str	r0, [r7, #12]
 800e946:	460b      	mov	r3, r1
 800e948:	607a      	str	r2, [r7, #4]
 800e94a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800e94c:	7afb      	ldrb	r3, [r7, #11]
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d16f      	bne.n	800ea32 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	3314      	adds	r3, #20
 800e956:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e95e:	2b02      	cmp	r3, #2
 800e960:	d15a      	bne.n	800ea18 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800e962:	693b      	ldr	r3, [r7, #16]
 800e964:	689a      	ldr	r2, [r3, #8]
 800e966:	693b      	ldr	r3, [r7, #16]
 800e968:	68db      	ldr	r3, [r3, #12]
 800e96a:	429a      	cmp	r2, r3
 800e96c:	d914      	bls.n	800e998 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e96e:	693b      	ldr	r3, [r7, #16]
 800e970:	689a      	ldr	r2, [r3, #8]
 800e972:	693b      	ldr	r3, [r7, #16]
 800e974:	68db      	ldr	r3, [r3, #12]
 800e976:	1ad2      	subs	r2, r2, r3
 800e978:	693b      	ldr	r3, [r7, #16]
 800e97a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e97c:	693b      	ldr	r3, [r7, #16]
 800e97e:	689b      	ldr	r3, [r3, #8]
 800e980:	461a      	mov	r2, r3
 800e982:	6879      	ldr	r1, [r7, #4]
 800e984:	68f8      	ldr	r0, [r7, #12]
 800e986:	f001 f8ac 	bl	800fae2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e98a:	2300      	movs	r3, #0
 800e98c:	2200      	movs	r2, #0
 800e98e:	2100      	movs	r1, #0
 800e990:	68f8      	ldr	r0, [r7, #12]
 800e992:	f011 ff7f 	bl	8020894 <USBD_LL_PrepareReceive>
 800e996:	e03f      	b.n	800ea18 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e998:	693b      	ldr	r3, [r7, #16]
 800e99a:	68da      	ldr	r2, [r3, #12]
 800e99c:	693b      	ldr	r3, [r7, #16]
 800e99e:	689b      	ldr	r3, [r3, #8]
 800e9a0:	429a      	cmp	r2, r3
 800e9a2:	d11c      	bne.n	800e9de <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800e9a4:	693b      	ldr	r3, [r7, #16]
 800e9a6:	685a      	ldr	r2, [r3, #4]
 800e9a8:	693b      	ldr	r3, [r7, #16]
 800e9aa:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e9ac:	429a      	cmp	r2, r3
 800e9ae:	d316      	bcc.n	800e9de <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800e9b0:	693b      	ldr	r3, [r7, #16]
 800e9b2:	685a      	ldr	r2, [r3, #4]
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e9ba:	429a      	cmp	r2, r3
 800e9bc:	d20f      	bcs.n	800e9de <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e9be:	2200      	movs	r2, #0
 800e9c0:	2100      	movs	r1, #0
 800e9c2:	68f8      	ldr	r0, [r7, #12]
 800e9c4:	f001 f88d 	bl	800fae2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	2200      	movs	r2, #0
 800e9cc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e9d0:	2300      	movs	r3, #0
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	2100      	movs	r1, #0
 800e9d6:	68f8      	ldr	r0, [r7, #12]
 800e9d8:	f011 ff5c 	bl	8020894 <USBD_LL_PrepareReceive>
 800e9dc:	e01c      	b.n	800ea18 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e9e4:	b2db      	uxtb	r3, r3
 800e9e6:	2b03      	cmp	r3, #3
 800e9e8:	d10f      	bne.n	800ea0a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e9f0:	68db      	ldr	r3, [r3, #12]
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d009      	beq.n	800ea0a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	2200      	movs	r2, #0
 800e9fa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea04:	68db      	ldr	r3, [r3, #12]
 800ea06:	68f8      	ldr	r0, [r7, #12]
 800ea08:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ea0a:	2180      	movs	r1, #128	; 0x80
 800ea0c:	68f8      	ldr	r0, [r7, #12]
 800ea0e:	f011 fe97 	bl	8020740 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ea12:	68f8      	ldr	r0, [r7, #12]
 800ea14:	f001 f8b7 	bl	800fb86 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d03a      	beq.n	800ea98 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800ea22:	68f8      	ldr	r0, [r7, #12]
 800ea24:	f7ff fe42 	bl	800e6ac <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	2200      	movs	r2, #0
 800ea2c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ea30:	e032      	b.n	800ea98 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800ea32:	7afb      	ldrb	r3, [r7, #11]
 800ea34:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ea38:	b2db      	uxtb	r3, r3
 800ea3a:	4619      	mov	r1, r3
 800ea3c:	68f8      	ldr	r0, [r7, #12]
 800ea3e:	f000 f97f 	bl	800ed40 <USBD_CoreFindEP>
 800ea42:	4603      	mov	r3, r0
 800ea44:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ea46:	7dfb      	ldrb	r3, [r7, #23]
 800ea48:	2bff      	cmp	r3, #255	; 0xff
 800ea4a:	d025      	beq.n	800ea98 <USBD_LL_DataInStage+0x15a>
 800ea4c:	7dfb      	ldrb	r3, [r7, #23]
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d122      	bne.n	800ea98 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ea58:	b2db      	uxtb	r3, r3
 800ea5a:	2b03      	cmp	r3, #3
 800ea5c:	d11c      	bne.n	800ea98 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800ea5e:	7dfa      	ldrb	r2, [r7, #23]
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	32ae      	adds	r2, #174	; 0xae
 800ea64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea68:	695b      	ldr	r3, [r3, #20]
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d014      	beq.n	800ea98 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800ea6e:	7dfa      	ldrb	r2, [r7, #23]
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ea76:	7dfa      	ldrb	r2, [r7, #23]
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	32ae      	adds	r2, #174	; 0xae
 800ea7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea80:	695b      	ldr	r3, [r3, #20]
 800ea82:	7afa      	ldrb	r2, [r7, #11]
 800ea84:	4611      	mov	r1, r2
 800ea86:	68f8      	ldr	r0, [r7, #12]
 800ea88:	4798      	blx	r3
 800ea8a:	4603      	mov	r3, r0
 800ea8c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ea8e:	7dbb      	ldrb	r3, [r7, #22]
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d001      	beq.n	800ea98 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800ea94:	7dbb      	ldrb	r3, [r7, #22]
 800ea96:	e000      	b.n	800ea9a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800ea98:	2300      	movs	r3, #0
}
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	3718      	adds	r7, #24
 800ea9e:	46bd      	mov	sp, r7
 800eaa0:	bd80      	pop	{r7, pc}

0800eaa2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800eaa2:	b580      	push	{r7, lr}
 800eaa4:	b084      	sub	sp, #16
 800eaa6:	af00      	add	r7, sp, #0
 800eaa8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800eaaa:	2300      	movs	r3, #0
 800eaac:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	2201      	movs	r2, #1
 800eab2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	2200      	movs	r2, #0
 800eaba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	2200      	movs	r2, #0
 800eac2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	2200      	movs	r2, #0
 800eac8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	2200      	movs	r2, #0
 800ead0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d014      	beq.n	800eb08 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eae4:	685b      	ldr	r3, [r3, #4]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d00e      	beq.n	800eb08 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eaf0:	685b      	ldr	r3, [r3, #4]
 800eaf2:	687a      	ldr	r2, [r7, #4]
 800eaf4:	6852      	ldr	r2, [r2, #4]
 800eaf6:	b2d2      	uxtb	r2, r2
 800eaf8:	4611      	mov	r1, r2
 800eafa:	6878      	ldr	r0, [r7, #4]
 800eafc:	4798      	blx	r3
 800eafe:	4603      	mov	r3, r0
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d001      	beq.n	800eb08 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800eb04:	2303      	movs	r3, #3
 800eb06:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800eb08:	2340      	movs	r3, #64	; 0x40
 800eb0a:	2200      	movs	r2, #0
 800eb0c:	2100      	movs	r1, #0
 800eb0e:	6878      	ldr	r0, [r7, #4]
 800eb10:	f011 fdd1 	bl	80206b6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	2201      	movs	r2, #1
 800eb18:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	2240      	movs	r2, #64	; 0x40
 800eb20:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800eb24:	2340      	movs	r3, #64	; 0x40
 800eb26:	2200      	movs	r2, #0
 800eb28:	2180      	movs	r1, #128	; 0x80
 800eb2a:	6878      	ldr	r0, [r7, #4]
 800eb2c:	f011 fdc3 	bl	80206b6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	2201      	movs	r2, #1
 800eb34:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	2240      	movs	r2, #64	; 0x40
 800eb3a:	621a      	str	r2, [r3, #32]

  return ret;
 800eb3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb3e:	4618      	mov	r0, r3
 800eb40:	3710      	adds	r7, #16
 800eb42:	46bd      	mov	sp, r7
 800eb44:	bd80      	pop	{r7, pc}

0800eb46 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800eb46:	b480      	push	{r7}
 800eb48:	b083      	sub	sp, #12
 800eb4a:	af00      	add	r7, sp, #0
 800eb4c:	6078      	str	r0, [r7, #4]
 800eb4e:	460b      	mov	r3, r1
 800eb50:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	78fa      	ldrb	r2, [r7, #3]
 800eb56:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800eb58:	2300      	movs	r3, #0
}
 800eb5a:	4618      	mov	r0, r3
 800eb5c:	370c      	adds	r7, #12
 800eb5e:	46bd      	mov	sp, r7
 800eb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb64:	4770      	bx	lr

0800eb66 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800eb66:	b480      	push	{r7}
 800eb68:	b083      	sub	sp, #12
 800eb6a:	af00      	add	r7, sp, #0
 800eb6c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eb74:	b2da      	uxtb	r2, r3
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	2204      	movs	r2, #4
 800eb80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800eb84:	2300      	movs	r3, #0
}
 800eb86:	4618      	mov	r0, r3
 800eb88:	370c      	adds	r7, #12
 800eb8a:	46bd      	mov	sp, r7
 800eb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb90:	4770      	bx	lr

0800eb92 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800eb92:	b480      	push	{r7}
 800eb94:	b083      	sub	sp, #12
 800eb96:	af00      	add	r7, sp, #0
 800eb98:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eba0:	b2db      	uxtb	r3, r3
 800eba2:	2b04      	cmp	r3, #4
 800eba4:	d106      	bne.n	800ebb4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800ebac:	b2da      	uxtb	r2, r3
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ebb4:	2300      	movs	r3, #0
}
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	370c      	adds	r7, #12
 800ebba:	46bd      	mov	sp, r7
 800ebbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc0:	4770      	bx	lr

0800ebc2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ebc2:	b580      	push	{r7, lr}
 800ebc4:	b082      	sub	sp, #8
 800ebc6:	af00      	add	r7, sp, #0
 800ebc8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ebd0:	b2db      	uxtb	r3, r3
 800ebd2:	2b03      	cmp	r3, #3
 800ebd4:	d110      	bne.n	800ebf8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d00b      	beq.n	800ebf8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ebe6:	69db      	ldr	r3, [r3, #28]
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d005      	beq.n	800ebf8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ebf2:	69db      	ldr	r3, [r3, #28]
 800ebf4:	6878      	ldr	r0, [r7, #4]
 800ebf6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800ebf8:	2300      	movs	r3, #0
}
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	3708      	adds	r7, #8
 800ebfe:	46bd      	mov	sp, r7
 800ec00:	bd80      	pop	{r7, pc}

0800ec02 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ec02:	b580      	push	{r7, lr}
 800ec04:	b082      	sub	sp, #8
 800ec06:	af00      	add	r7, sp, #0
 800ec08:	6078      	str	r0, [r7, #4]
 800ec0a:	460b      	mov	r3, r1
 800ec0c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	32ae      	adds	r2, #174	; 0xae
 800ec18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d101      	bne.n	800ec24 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800ec20:	2303      	movs	r3, #3
 800ec22:	e01c      	b.n	800ec5e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec2a:	b2db      	uxtb	r3, r3
 800ec2c:	2b03      	cmp	r3, #3
 800ec2e:	d115      	bne.n	800ec5c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	32ae      	adds	r2, #174	; 0xae
 800ec3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec3e:	6a1b      	ldr	r3, [r3, #32]
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d00b      	beq.n	800ec5c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	32ae      	adds	r2, #174	; 0xae
 800ec4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec52:	6a1b      	ldr	r3, [r3, #32]
 800ec54:	78fa      	ldrb	r2, [r7, #3]
 800ec56:	4611      	mov	r1, r2
 800ec58:	6878      	ldr	r0, [r7, #4]
 800ec5a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ec5c:	2300      	movs	r3, #0
}
 800ec5e:	4618      	mov	r0, r3
 800ec60:	3708      	adds	r7, #8
 800ec62:	46bd      	mov	sp, r7
 800ec64:	bd80      	pop	{r7, pc}

0800ec66 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ec66:	b580      	push	{r7, lr}
 800ec68:	b082      	sub	sp, #8
 800ec6a:	af00      	add	r7, sp, #0
 800ec6c:	6078      	str	r0, [r7, #4]
 800ec6e:	460b      	mov	r3, r1
 800ec70:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	32ae      	adds	r2, #174	; 0xae
 800ec7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d101      	bne.n	800ec88 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800ec84:	2303      	movs	r3, #3
 800ec86:	e01c      	b.n	800ecc2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec8e:	b2db      	uxtb	r3, r3
 800ec90:	2b03      	cmp	r3, #3
 800ec92:	d115      	bne.n	800ecc0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	32ae      	adds	r2, #174	; 0xae
 800ec9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d00b      	beq.n	800ecc0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	32ae      	adds	r2, #174	; 0xae
 800ecb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ecb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecb8:	78fa      	ldrb	r2, [r7, #3]
 800ecba:	4611      	mov	r1, r2
 800ecbc:	6878      	ldr	r0, [r7, #4]
 800ecbe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ecc0:	2300      	movs	r3, #0
}
 800ecc2:	4618      	mov	r0, r3
 800ecc4:	3708      	adds	r7, #8
 800ecc6:	46bd      	mov	sp, r7
 800ecc8:	bd80      	pop	{r7, pc}

0800ecca <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ecca:	b480      	push	{r7}
 800eccc:	b083      	sub	sp, #12
 800ecce:	af00      	add	r7, sp, #0
 800ecd0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ecd2:	2300      	movs	r3, #0
}
 800ecd4:	4618      	mov	r0, r3
 800ecd6:	370c      	adds	r7, #12
 800ecd8:	46bd      	mov	sp, r7
 800ecda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecde:	4770      	bx	lr

0800ece0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ece0:	b580      	push	{r7, lr}
 800ece2:	b084      	sub	sp, #16
 800ece4:	af00      	add	r7, sp, #0
 800ece6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800ece8:	2300      	movs	r3, #0
 800ecea:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	2201      	movs	r2, #1
 800ecf0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d00e      	beq.n	800ed1c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed04:	685b      	ldr	r3, [r3, #4]
 800ed06:	687a      	ldr	r2, [r7, #4]
 800ed08:	6852      	ldr	r2, [r2, #4]
 800ed0a:	b2d2      	uxtb	r2, r2
 800ed0c:	4611      	mov	r1, r2
 800ed0e:	6878      	ldr	r0, [r7, #4]
 800ed10:	4798      	blx	r3
 800ed12:	4603      	mov	r3, r0
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d001      	beq.n	800ed1c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800ed18:	2303      	movs	r3, #3
 800ed1a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ed1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed1e:	4618      	mov	r0, r3
 800ed20:	3710      	adds	r7, #16
 800ed22:	46bd      	mov	sp, r7
 800ed24:	bd80      	pop	{r7, pc}

0800ed26 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ed26:	b480      	push	{r7}
 800ed28:	b083      	sub	sp, #12
 800ed2a:	af00      	add	r7, sp, #0
 800ed2c:	6078      	str	r0, [r7, #4]
 800ed2e:	460b      	mov	r3, r1
 800ed30:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ed32:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ed34:	4618      	mov	r0, r3
 800ed36:	370c      	adds	r7, #12
 800ed38:	46bd      	mov	sp, r7
 800ed3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed3e:	4770      	bx	lr

0800ed40 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ed40:	b480      	push	{r7}
 800ed42:	b083      	sub	sp, #12
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	6078      	str	r0, [r7, #4]
 800ed48:	460b      	mov	r3, r1
 800ed4a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ed4c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ed4e:	4618      	mov	r0, r3
 800ed50:	370c      	adds	r7, #12
 800ed52:	46bd      	mov	sp, r7
 800ed54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed58:	4770      	bx	lr

0800ed5a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ed5a:	b580      	push	{r7, lr}
 800ed5c:	b086      	sub	sp, #24
 800ed5e:	af00      	add	r7, sp, #0
 800ed60:	6078      	str	r0, [r7, #4]
 800ed62:	460b      	mov	r3, r1
 800ed64:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ed6e:	2300      	movs	r3, #0
 800ed70:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	885b      	ldrh	r3, [r3, #2]
 800ed76:	b29a      	uxth	r2, r3
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	781b      	ldrb	r3, [r3, #0]
 800ed7c:	b29b      	uxth	r3, r3
 800ed7e:	429a      	cmp	r2, r3
 800ed80:	d920      	bls.n	800edc4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	781b      	ldrb	r3, [r3, #0]
 800ed86:	b29b      	uxth	r3, r3
 800ed88:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ed8a:	e013      	b.n	800edb4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ed8c:	f107 030a 	add.w	r3, r7, #10
 800ed90:	4619      	mov	r1, r3
 800ed92:	6978      	ldr	r0, [r7, #20]
 800ed94:	f000 f81b 	bl	800edce <USBD_GetNextDesc>
 800ed98:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ed9a:	697b      	ldr	r3, [r7, #20]
 800ed9c:	785b      	ldrb	r3, [r3, #1]
 800ed9e:	2b05      	cmp	r3, #5
 800eda0:	d108      	bne.n	800edb4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800eda2:	697b      	ldr	r3, [r7, #20]
 800eda4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800eda6:	693b      	ldr	r3, [r7, #16]
 800eda8:	789b      	ldrb	r3, [r3, #2]
 800edaa:	78fa      	ldrb	r2, [r7, #3]
 800edac:	429a      	cmp	r2, r3
 800edae:	d008      	beq.n	800edc2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800edb0:	2300      	movs	r3, #0
 800edb2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	885b      	ldrh	r3, [r3, #2]
 800edb8:	b29a      	uxth	r2, r3
 800edba:	897b      	ldrh	r3, [r7, #10]
 800edbc:	429a      	cmp	r2, r3
 800edbe:	d8e5      	bhi.n	800ed8c <USBD_GetEpDesc+0x32>
 800edc0:	e000      	b.n	800edc4 <USBD_GetEpDesc+0x6a>
          break;
 800edc2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800edc4:	693b      	ldr	r3, [r7, #16]
}
 800edc6:	4618      	mov	r0, r3
 800edc8:	3718      	adds	r7, #24
 800edca:	46bd      	mov	sp, r7
 800edcc:	bd80      	pop	{r7, pc}

0800edce <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800edce:	b480      	push	{r7}
 800edd0:	b085      	sub	sp, #20
 800edd2:	af00      	add	r7, sp, #0
 800edd4:	6078      	str	r0, [r7, #4]
 800edd6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800eddc:	683b      	ldr	r3, [r7, #0]
 800edde:	881a      	ldrh	r2, [r3, #0]
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	781b      	ldrb	r3, [r3, #0]
 800ede4:	b29b      	uxth	r3, r3
 800ede6:	4413      	add	r3, r2
 800ede8:	b29a      	uxth	r2, r3
 800edea:	683b      	ldr	r3, [r7, #0]
 800edec:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	781b      	ldrb	r3, [r3, #0]
 800edf2:	461a      	mov	r2, r3
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	4413      	add	r3, r2
 800edf8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800edfa:	68fb      	ldr	r3, [r7, #12]
}
 800edfc:	4618      	mov	r0, r3
 800edfe:	3714      	adds	r7, #20
 800ee00:	46bd      	mov	sp, r7
 800ee02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee06:	4770      	bx	lr

0800ee08 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ee08:	b480      	push	{r7}
 800ee0a:	b087      	sub	sp, #28
 800ee0c:	af00      	add	r7, sp, #0
 800ee0e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ee14:	697b      	ldr	r3, [r7, #20]
 800ee16:	781b      	ldrb	r3, [r3, #0]
 800ee18:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ee1a:	697b      	ldr	r3, [r7, #20]
 800ee1c:	3301      	adds	r3, #1
 800ee1e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ee20:	697b      	ldr	r3, [r7, #20]
 800ee22:	781b      	ldrb	r3, [r3, #0]
 800ee24:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ee26:	8a3b      	ldrh	r3, [r7, #16]
 800ee28:	021b      	lsls	r3, r3, #8
 800ee2a:	b21a      	sxth	r2, r3
 800ee2c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ee30:	4313      	orrs	r3, r2
 800ee32:	b21b      	sxth	r3, r3
 800ee34:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ee36:	89fb      	ldrh	r3, [r7, #14]
}
 800ee38:	4618      	mov	r0, r3
 800ee3a:	371c      	adds	r7, #28
 800ee3c:	46bd      	mov	sp, r7
 800ee3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee42:	4770      	bx	lr

0800ee44 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ee44:	b580      	push	{r7, lr}
 800ee46:	b084      	sub	sp, #16
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	6078      	str	r0, [r7, #4]
 800ee4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ee4e:	2300      	movs	r3, #0
 800ee50:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ee52:	683b      	ldr	r3, [r7, #0]
 800ee54:	781b      	ldrb	r3, [r3, #0]
 800ee56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ee5a:	2b40      	cmp	r3, #64	; 0x40
 800ee5c:	d005      	beq.n	800ee6a <USBD_StdDevReq+0x26>
 800ee5e:	2b40      	cmp	r3, #64	; 0x40
 800ee60:	d857      	bhi.n	800ef12 <USBD_StdDevReq+0xce>
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d00f      	beq.n	800ee86 <USBD_StdDevReq+0x42>
 800ee66:	2b20      	cmp	r3, #32
 800ee68:	d153      	bne.n	800ef12 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	32ae      	adds	r2, #174	; 0xae
 800ee74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee78:	689b      	ldr	r3, [r3, #8]
 800ee7a:	6839      	ldr	r1, [r7, #0]
 800ee7c:	6878      	ldr	r0, [r7, #4]
 800ee7e:	4798      	blx	r3
 800ee80:	4603      	mov	r3, r0
 800ee82:	73fb      	strb	r3, [r7, #15]
      break;
 800ee84:	e04a      	b.n	800ef1c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ee86:	683b      	ldr	r3, [r7, #0]
 800ee88:	785b      	ldrb	r3, [r3, #1]
 800ee8a:	2b09      	cmp	r3, #9
 800ee8c:	d83b      	bhi.n	800ef06 <USBD_StdDevReq+0xc2>
 800ee8e:	a201      	add	r2, pc, #4	; (adr r2, 800ee94 <USBD_StdDevReq+0x50>)
 800ee90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee94:	0800eee9 	.word	0x0800eee9
 800ee98:	0800eefd 	.word	0x0800eefd
 800ee9c:	0800ef07 	.word	0x0800ef07
 800eea0:	0800eef3 	.word	0x0800eef3
 800eea4:	0800ef07 	.word	0x0800ef07
 800eea8:	0800eec7 	.word	0x0800eec7
 800eeac:	0800eebd 	.word	0x0800eebd
 800eeb0:	0800ef07 	.word	0x0800ef07
 800eeb4:	0800eedf 	.word	0x0800eedf
 800eeb8:	0800eed1 	.word	0x0800eed1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800eebc:	6839      	ldr	r1, [r7, #0]
 800eebe:	6878      	ldr	r0, [r7, #4]
 800eec0:	f000 fa3c 	bl	800f33c <USBD_GetDescriptor>
          break;
 800eec4:	e024      	b.n	800ef10 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800eec6:	6839      	ldr	r1, [r7, #0]
 800eec8:	6878      	ldr	r0, [r7, #4]
 800eeca:	f000 fba1 	bl	800f610 <USBD_SetAddress>
          break;
 800eece:	e01f      	b.n	800ef10 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800eed0:	6839      	ldr	r1, [r7, #0]
 800eed2:	6878      	ldr	r0, [r7, #4]
 800eed4:	f000 fbe0 	bl	800f698 <USBD_SetConfig>
 800eed8:	4603      	mov	r3, r0
 800eeda:	73fb      	strb	r3, [r7, #15]
          break;
 800eedc:	e018      	b.n	800ef10 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800eede:	6839      	ldr	r1, [r7, #0]
 800eee0:	6878      	ldr	r0, [r7, #4]
 800eee2:	f000 fc83 	bl	800f7ec <USBD_GetConfig>
          break;
 800eee6:	e013      	b.n	800ef10 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800eee8:	6839      	ldr	r1, [r7, #0]
 800eeea:	6878      	ldr	r0, [r7, #4]
 800eeec:	f000 fcb4 	bl	800f858 <USBD_GetStatus>
          break;
 800eef0:	e00e      	b.n	800ef10 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800eef2:	6839      	ldr	r1, [r7, #0]
 800eef4:	6878      	ldr	r0, [r7, #4]
 800eef6:	f000 fce3 	bl	800f8c0 <USBD_SetFeature>
          break;
 800eefa:	e009      	b.n	800ef10 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800eefc:	6839      	ldr	r1, [r7, #0]
 800eefe:	6878      	ldr	r0, [r7, #4]
 800ef00:	f000 fd07 	bl	800f912 <USBD_ClrFeature>
          break;
 800ef04:	e004      	b.n	800ef10 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800ef06:	6839      	ldr	r1, [r7, #0]
 800ef08:	6878      	ldr	r0, [r7, #4]
 800ef0a:	f000 fd5e 	bl	800f9ca <USBD_CtlError>
          break;
 800ef0e:	bf00      	nop
      }
      break;
 800ef10:	e004      	b.n	800ef1c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800ef12:	6839      	ldr	r1, [r7, #0]
 800ef14:	6878      	ldr	r0, [r7, #4]
 800ef16:	f000 fd58 	bl	800f9ca <USBD_CtlError>
      break;
 800ef1a:	bf00      	nop
  }

  return ret;
 800ef1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef1e:	4618      	mov	r0, r3
 800ef20:	3710      	adds	r7, #16
 800ef22:	46bd      	mov	sp, r7
 800ef24:	bd80      	pop	{r7, pc}
 800ef26:	bf00      	nop

0800ef28 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ef28:	b580      	push	{r7, lr}
 800ef2a:	b084      	sub	sp, #16
 800ef2c:	af00      	add	r7, sp, #0
 800ef2e:	6078      	str	r0, [r7, #4]
 800ef30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ef32:	2300      	movs	r3, #0
 800ef34:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ef36:	683b      	ldr	r3, [r7, #0]
 800ef38:	781b      	ldrb	r3, [r3, #0]
 800ef3a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ef3e:	2b40      	cmp	r3, #64	; 0x40
 800ef40:	d005      	beq.n	800ef4e <USBD_StdItfReq+0x26>
 800ef42:	2b40      	cmp	r3, #64	; 0x40
 800ef44:	d852      	bhi.n	800efec <USBD_StdItfReq+0xc4>
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d001      	beq.n	800ef4e <USBD_StdItfReq+0x26>
 800ef4a:	2b20      	cmp	r3, #32
 800ef4c:	d14e      	bne.n	800efec <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ef54:	b2db      	uxtb	r3, r3
 800ef56:	3b01      	subs	r3, #1
 800ef58:	2b02      	cmp	r3, #2
 800ef5a:	d840      	bhi.n	800efde <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ef5c:	683b      	ldr	r3, [r7, #0]
 800ef5e:	889b      	ldrh	r3, [r3, #4]
 800ef60:	b2db      	uxtb	r3, r3
 800ef62:	2b01      	cmp	r3, #1
 800ef64:	d836      	bhi.n	800efd4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ef66:	683b      	ldr	r3, [r7, #0]
 800ef68:	889b      	ldrh	r3, [r3, #4]
 800ef6a:	b2db      	uxtb	r3, r3
 800ef6c:	4619      	mov	r1, r3
 800ef6e:	6878      	ldr	r0, [r7, #4]
 800ef70:	f7ff fed9 	bl	800ed26 <USBD_CoreFindIF>
 800ef74:	4603      	mov	r3, r0
 800ef76:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ef78:	7bbb      	ldrb	r3, [r7, #14]
 800ef7a:	2bff      	cmp	r3, #255	; 0xff
 800ef7c:	d01d      	beq.n	800efba <USBD_StdItfReq+0x92>
 800ef7e:	7bbb      	ldrb	r3, [r7, #14]
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d11a      	bne.n	800efba <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800ef84:	7bba      	ldrb	r2, [r7, #14]
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	32ae      	adds	r2, #174	; 0xae
 800ef8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef8e:	689b      	ldr	r3, [r3, #8]
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d00f      	beq.n	800efb4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ef94:	7bba      	ldrb	r2, [r7, #14]
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ef9c:	7bba      	ldrb	r2, [r7, #14]
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	32ae      	adds	r2, #174	; 0xae
 800efa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800efa6:	689b      	ldr	r3, [r3, #8]
 800efa8:	6839      	ldr	r1, [r7, #0]
 800efaa:	6878      	ldr	r0, [r7, #4]
 800efac:	4798      	blx	r3
 800efae:	4603      	mov	r3, r0
 800efb0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800efb2:	e004      	b.n	800efbe <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800efb4:	2303      	movs	r3, #3
 800efb6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800efb8:	e001      	b.n	800efbe <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800efba:	2303      	movs	r3, #3
 800efbc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800efbe:	683b      	ldr	r3, [r7, #0]
 800efc0:	88db      	ldrh	r3, [r3, #6]
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d110      	bne.n	800efe8 <USBD_StdItfReq+0xc0>
 800efc6:	7bfb      	ldrb	r3, [r7, #15]
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d10d      	bne.n	800efe8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800efcc:	6878      	ldr	r0, [r7, #4]
 800efce:	f000 fdc7 	bl	800fb60 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800efd2:	e009      	b.n	800efe8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800efd4:	6839      	ldr	r1, [r7, #0]
 800efd6:	6878      	ldr	r0, [r7, #4]
 800efd8:	f000 fcf7 	bl	800f9ca <USBD_CtlError>
          break;
 800efdc:	e004      	b.n	800efe8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800efde:	6839      	ldr	r1, [r7, #0]
 800efe0:	6878      	ldr	r0, [r7, #4]
 800efe2:	f000 fcf2 	bl	800f9ca <USBD_CtlError>
          break;
 800efe6:	e000      	b.n	800efea <USBD_StdItfReq+0xc2>
          break;
 800efe8:	bf00      	nop
      }
      break;
 800efea:	e004      	b.n	800eff6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800efec:	6839      	ldr	r1, [r7, #0]
 800efee:	6878      	ldr	r0, [r7, #4]
 800eff0:	f000 fceb 	bl	800f9ca <USBD_CtlError>
      break;
 800eff4:	bf00      	nop
  }

  return ret;
 800eff6:	7bfb      	ldrb	r3, [r7, #15]
}
 800eff8:	4618      	mov	r0, r3
 800effa:	3710      	adds	r7, #16
 800effc:	46bd      	mov	sp, r7
 800effe:	bd80      	pop	{r7, pc}

0800f000 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f000:	b580      	push	{r7, lr}
 800f002:	b084      	sub	sp, #16
 800f004:	af00      	add	r7, sp, #0
 800f006:	6078      	str	r0, [r7, #4]
 800f008:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800f00a:	2300      	movs	r3, #0
 800f00c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800f00e:	683b      	ldr	r3, [r7, #0]
 800f010:	889b      	ldrh	r3, [r3, #4]
 800f012:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f014:	683b      	ldr	r3, [r7, #0]
 800f016:	781b      	ldrb	r3, [r3, #0]
 800f018:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f01c:	2b40      	cmp	r3, #64	; 0x40
 800f01e:	d007      	beq.n	800f030 <USBD_StdEPReq+0x30>
 800f020:	2b40      	cmp	r3, #64	; 0x40
 800f022:	f200 817f 	bhi.w	800f324 <USBD_StdEPReq+0x324>
 800f026:	2b00      	cmp	r3, #0
 800f028:	d02a      	beq.n	800f080 <USBD_StdEPReq+0x80>
 800f02a:	2b20      	cmp	r3, #32
 800f02c:	f040 817a 	bne.w	800f324 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800f030:	7bbb      	ldrb	r3, [r7, #14]
 800f032:	4619      	mov	r1, r3
 800f034:	6878      	ldr	r0, [r7, #4]
 800f036:	f7ff fe83 	bl	800ed40 <USBD_CoreFindEP>
 800f03a:	4603      	mov	r3, r0
 800f03c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f03e:	7b7b      	ldrb	r3, [r7, #13]
 800f040:	2bff      	cmp	r3, #255	; 0xff
 800f042:	f000 8174 	beq.w	800f32e <USBD_StdEPReq+0x32e>
 800f046:	7b7b      	ldrb	r3, [r7, #13]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	f040 8170 	bne.w	800f32e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800f04e:	7b7a      	ldrb	r2, [r7, #13]
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800f056:	7b7a      	ldrb	r2, [r7, #13]
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	32ae      	adds	r2, #174	; 0xae
 800f05c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f060:	689b      	ldr	r3, [r3, #8]
 800f062:	2b00      	cmp	r3, #0
 800f064:	f000 8163 	beq.w	800f32e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800f068:	7b7a      	ldrb	r2, [r7, #13]
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	32ae      	adds	r2, #174	; 0xae
 800f06e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f072:	689b      	ldr	r3, [r3, #8]
 800f074:	6839      	ldr	r1, [r7, #0]
 800f076:	6878      	ldr	r0, [r7, #4]
 800f078:	4798      	blx	r3
 800f07a:	4603      	mov	r3, r0
 800f07c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800f07e:	e156      	b.n	800f32e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f080:	683b      	ldr	r3, [r7, #0]
 800f082:	785b      	ldrb	r3, [r3, #1]
 800f084:	2b03      	cmp	r3, #3
 800f086:	d008      	beq.n	800f09a <USBD_StdEPReq+0x9a>
 800f088:	2b03      	cmp	r3, #3
 800f08a:	f300 8145 	bgt.w	800f318 <USBD_StdEPReq+0x318>
 800f08e:	2b00      	cmp	r3, #0
 800f090:	f000 809b 	beq.w	800f1ca <USBD_StdEPReq+0x1ca>
 800f094:	2b01      	cmp	r3, #1
 800f096:	d03c      	beq.n	800f112 <USBD_StdEPReq+0x112>
 800f098:	e13e      	b.n	800f318 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f0a0:	b2db      	uxtb	r3, r3
 800f0a2:	2b02      	cmp	r3, #2
 800f0a4:	d002      	beq.n	800f0ac <USBD_StdEPReq+0xac>
 800f0a6:	2b03      	cmp	r3, #3
 800f0a8:	d016      	beq.n	800f0d8 <USBD_StdEPReq+0xd8>
 800f0aa:	e02c      	b.n	800f106 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f0ac:	7bbb      	ldrb	r3, [r7, #14]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d00d      	beq.n	800f0ce <USBD_StdEPReq+0xce>
 800f0b2:	7bbb      	ldrb	r3, [r7, #14]
 800f0b4:	2b80      	cmp	r3, #128	; 0x80
 800f0b6:	d00a      	beq.n	800f0ce <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f0b8:	7bbb      	ldrb	r3, [r7, #14]
 800f0ba:	4619      	mov	r1, r3
 800f0bc:	6878      	ldr	r0, [r7, #4]
 800f0be:	f011 fb3f 	bl	8020740 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f0c2:	2180      	movs	r1, #128	; 0x80
 800f0c4:	6878      	ldr	r0, [r7, #4]
 800f0c6:	f011 fb3b 	bl	8020740 <USBD_LL_StallEP>
 800f0ca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f0cc:	e020      	b.n	800f110 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800f0ce:	6839      	ldr	r1, [r7, #0]
 800f0d0:	6878      	ldr	r0, [r7, #4]
 800f0d2:	f000 fc7a 	bl	800f9ca <USBD_CtlError>
              break;
 800f0d6:	e01b      	b.n	800f110 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f0d8:	683b      	ldr	r3, [r7, #0]
 800f0da:	885b      	ldrh	r3, [r3, #2]
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d10e      	bne.n	800f0fe <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f0e0:	7bbb      	ldrb	r3, [r7, #14]
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d00b      	beq.n	800f0fe <USBD_StdEPReq+0xfe>
 800f0e6:	7bbb      	ldrb	r3, [r7, #14]
 800f0e8:	2b80      	cmp	r3, #128	; 0x80
 800f0ea:	d008      	beq.n	800f0fe <USBD_StdEPReq+0xfe>
 800f0ec:	683b      	ldr	r3, [r7, #0]
 800f0ee:	88db      	ldrh	r3, [r3, #6]
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d104      	bne.n	800f0fe <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f0f4:	7bbb      	ldrb	r3, [r7, #14]
 800f0f6:	4619      	mov	r1, r3
 800f0f8:	6878      	ldr	r0, [r7, #4]
 800f0fa:	f011 fb21 	bl	8020740 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f0fe:	6878      	ldr	r0, [r7, #4]
 800f100:	f000 fd2e 	bl	800fb60 <USBD_CtlSendStatus>

              break;
 800f104:	e004      	b.n	800f110 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800f106:	6839      	ldr	r1, [r7, #0]
 800f108:	6878      	ldr	r0, [r7, #4]
 800f10a:	f000 fc5e 	bl	800f9ca <USBD_CtlError>
              break;
 800f10e:	bf00      	nop
          }
          break;
 800f110:	e107      	b.n	800f322 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f118:	b2db      	uxtb	r3, r3
 800f11a:	2b02      	cmp	r3, #2
 800f11c:	d002      	beq.n	800f124 <USBD_StdEPReq+0x124>
 800f11e:	2b03      	cmp	r3, #3
 800f120:	d016      	beq.n	800f150 <USBD_StdEPReq+0x150>
 800f122:	e04b      	b.n	800f1bc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f124:	7bbb      	ldrb	r3, [r7, #14]
 800f126:	2b00      	cmp	r3, #0
 800f128:	d00d      	beq.n	800f146 <USBD_StdEPReq+0x146>
 800f12a:	7bbb      	ldrb	r3, [r7, #14]
 800f12c:	2b80      	cmp	r3, #128	; 0x80
 800f12e:	d00a      	beq.n	800f146 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f130:	7bbb      	ldrb	r3, [r7, #14]
 800f132:	4619      	mov	r1, r3
 800f134:	6878      	ldr	r0, [r7, #4]
 800f136:	f011 fb03 	bl	8020740 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f13a:	2180      	movs	r1, #128	; 0x80
 800f13c:	6878      	ldr	r0, [r7, #4]
 800f13e:	f011 faff 	bl	8020740 <USBD_LL_StallEP>
 800f142:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f144:	e040      	b.n	800f1c8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800f146:	6839      	ldr	r1, [r7, #0]
 800f148:	6878      	ldr	r0, [r7, #4]
 800f14a:	f000 fc3e 	bl	800f9ca <USBD_CtlError>
              break;
 800f14e:	e03b      	b.n	800f1c8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f150:	683b      	ldr	r3, [r7, #0]
 800f152:	885b      	ldrh	r3, [r3, #2]
 800f154:	2b00      	cmp	r3, #0
 800f156:	d136      	bne.n	800f1c6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f158:	7bbb      	ldrb	r3, [r7, #14]
 800f15a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d004      	beq.n	800f16c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f162:	7bbb      	ldrb	r3, [r7, #14]
 800f164:	4619      	mov	r1, r3
 800f166:	6878      	ldr	r0, [r7, #4]
 800f168:	f011 fb09 	bl	802077e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f16c:	6878      	ldr	r0, [r7, #4]
 800f16e:	f000 fcf7 	bl	800fb60 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800f172:	7bbb      	ldrb	r3, [r7, #14]
 800f174:	4619      	mov	r1, r3
 800f176:	6878      	ldr	r0, [r7, #4]
 800f178:	f7ff fde2 	bl	800ed40 <USBD_CoreFindEP>
 800f17c:	4603      	mov	r3, r0
 800f17e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f180:	7b7b      	ldrb	r3, [r7, #13]
 800f182:	2bff      	cmp	r3, #255	; 0xff
 800f184:	d01f      	beq.n	800f1c6 <USBD_StdEPReq+0x1c6>
 800f186:	7b7b      	ldrb	r3, [r7, #13]
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d11c      	bne.n	800f1c6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800f18c:	7b7a      	ldrb	r2, [r7, #13]
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800f194:	7b7a      	ldrb	r2, [r7, #13]
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	32ae      	adds	r2, #174	; 0xae
 800f19a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f19e:	689b      	ldr	r3, [r3, #8]
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d010      	beq.n	800f1c6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f1a4:	7b7a      	ldrb	r2, [r7, #13]
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	32ae      	adds	r2, #174	; 0xae
 800f1aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1ae:	689b      	ldr	r3, [r3, #8]
 800f1b0:	6839      	ldr	r1, [r7, #0]
 800f1b2:	6878      	ldr	r0, [r7, #4]
 800f1b4:	4798      	blx	r3
 800f1b6:	4603      	mov	r3, r0
 800f1b8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800f1ba:	e004      	b.n	800f1c6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800f1bc:	6839      	ldr	r1, [r7, #0]
 800f1be:	6878      	ldr	r0, [r7, #4]
 800f1c0:	f000 fc03 	bl	800f9ca <USBD_CtlError>
              break;
 800f1c4:	e000      	b.n	800f1c8 <USBD_StdEPReq+0x1c8>
              break;
 800f1c6:	bf00      	nop
          }
          break;
 800f1c8:	e0ab      	b.n	800f322 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f1d0:	b2db      	uxtb	r3, r3
 800f1d2:	2b02      	cmp	r3, #2
 800f1d4:	d002      	beq.n	800f1dc <USBD_StdEPReq+0x1dc>
 800f1d6:	2b03      	cmp	r3, #3
 800f1d8:	d032      	beq.n	800f240 <USBD_StdEPReq+0x240>
 800f1da:	e097      	b.n	800f30c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f1dc:	7bbb      	ldrb	r3, [r7, #14]
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d007      	beq.n	800f1f2 <USBD_StdEPReq+0x1f2>
 800f1e2:	7bbb      	ldrb	r3, [r7, #14]
 800f1e4:	2b80      	cmp	r3, #128	; 0x80
 800f1e6:	d004      	beq.n	800f1f2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800f1e8:	6839      	ldr	r1, [r7, #0]
 800f1ea:	6878      	ldr	r0, [r7, #4]
 800f1ec:	f000 fbed 	bl	800f9ca <USBD_CtlError>
                break;
 800f1f0:	e091      	b.n	800f316 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f1f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	da0b      	bge.n	800f212 <USBD_StdEPReq+0x212>
 800f1fa:	7bbb      	ldrb	r3, [r7, #14]
 800f1fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f200:	4613      	mov	r3, r2
 800f202:	009b      	lsls	r3, r3, #2
 800f204:	4413      	add	r3, r2
 800f206:	009b      	lsls	r3, r3, #2
 800f208:	3310      	adds	r3, #16
 800f20a:	687a      	ldr	r2, [r7, #4]
 800f20c:	4413      	add	r3, r2
 800f20e:	3304      	adds	r3, #4
 800f210:	e00b      	b.n	800f22a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f212:	7bbb      	ldrb	r3, [r7, #14]
 800f214:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f218:	4613      	mov	r3, r2
 800f21a:	009b      	lsls	r3, r3, #2
 800f21c:	4413      	add	r3, r2
 800f21e:	009b      	lsls	r3, r3, #2
 800f220:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f224:	687a      	ldr	r2, [r7, #4]
 800f226:	4413      	add	r3, r2
 800f228:	3304      	adds	r3, #4
 800f22a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f22c:	68bb      	ldr	r3, [r7, #8]
 800f22e:	2200      	movs	r2, #0
 800f230:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f232:	68bb      	ldr	r3, [r7, #8]
 800f234:	2202      	movs	r2, #2
 800f236:	4619      	mov	r1, r3
 800f238:	6878      	ldr	r0, [r7, #4]
 800f23a:	f000 fc37 	bl	800faac <USBD_CtlSendData>
              break;
 800f23e:	e06a      	b.n	800f316 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f240:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f244:	2b00      	cmp	r3, #0
 800f246:	da11      	bge.n	800f26c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f248:	7bbb      	ldrb	r3, [r7, #14]
 800f24a:	f003 020f 	and.w	r2, r3, #15
 800f24e:	6879      	ldr	r1, [r7, #4]
 800f250:	4613      	mov	r3, r2
 800f252:	009b      	lsls	r3, r3, #2
 800f254:	4413      	add	r3, r2
 800f256:	009b      	lsls	r3, r3, #2
 800f258:	440b      	add	r3, r1
 800f25a:	3324      	adds	r3, #36	; 0x24
 800f25c:	881b      	ldrh	r3, [r3, #0]
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d117      	bne.n	800f292 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f262:	6839      	ldr	r1, [r7, #0]
 800f264:	6878      	ldr	r0, [r7, #4]
 800f266:	f000 fbb0 	bl	800f9ca <USBD_CtlError>
                  break;
 800f26a:	e054      	b.n	800f316 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f26c:	7bbb      	ldrb	r3, [r7, #14]
 800f26e:	f003 020f 	and.w	r2, r3, #15
 800f272:	6879      	ldr	r1, [r7, #4]
 800f274:	4613      	mov	r3, r2
 800f276:	009b      	lsls	r3, r3, #2
 800f278:	4413      	add	r3, r2
 800f27a:	009b      	lsls	r3, r3, #2
 800f27c:	440b      	add	r3, r1
 800f27e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800f282:	881b      	ldrh	r3, [r3, #0]
 800f284:	2b00      	cmp	r3, #0
 800f286:	d104      	bne.n	800f292 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f288:	6839      	ldr	r1, [r7, #0]
 800f28a:	6878      	ldr	r0, [r7, #4]
 800f28c:	f000 fb9d 	bl	800f9ca <USBD_CtlError>
                  break;
 800f290:	e041      	b.n	800f316 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f292:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f296:	2b00      	cmp	r3, #0
 800f298:	da0b      	bge.n	800f2b2 <USBD_StdEPReq+0x2b2>
 800f29a:	7bbb      	ldrb	r3, [r7, #14]
 800f29c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f2a0:	4613      	mov	r3, r2
 800f2a2:	009b      	lsls	r3, r3, #2
 800f2a4:	4413      	add	r3, r2
 800f2a6:	009b      	lsls	r3, r3, #2
 800f2a8:	3310      	adds	r3, #16
 800f2aa:	687a      	ldr	r2, [r7, #4]
 800f2ac:	4413      	add	r3, r2
 800f2ae:	3304      	adds	r3, #4
 800f2b0:	e00b      	b.n	800f2ca <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f2b2:	7bbb      	ldrb	r3, [r7, #14]
 800f2b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f2b8:	4613      	mov	r3, r2
 800f2ba:	009b      	lsls	r3, r3, #2
 800f2bc:	4413      	add	r3, r2
 800f2be:	009b      	lsls	r3, r3, #2
 800f2c0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f2c4:	687a      	ldr	r2, [r7, #4]
 800f2c6:	4413      	add	r3, r2
 800f2c8:	3304      	adds	r3, #4
 800f2ca:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f2cc:	7bbb      	ldrb	r3, [r7, #14]
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d002      	beq.n	800f2d8 <USBD_StdEPReq+0x2d8>
 800f2d2:	7bbb      	ldrb	r3, [r7, #14]
 800f2d4:	2b80      	cmp	r3, #128	; 0x80
 800f2d6:	d103      	bne.n	800f2e0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800f2d8:	68bb      	ldr	r3, [r7, #8]
 800f2da:	2200      	movs	r2, #0
 800f2dc:	601a      	str	r2, [r3, #0]
 800f2de:	e00e      	b.n	800f2fe <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f2e0:	7bbb      	ldrb	r3, [r7, #14]
 800f2e2:	4619      	mov	r1, r3
 800f2e4:	6878      	ldr	r0, [r7, #4]
 800f2e6:	f011 fa69 	bl	80207bc <USBD_LL_IsStallEP>
 800f2ea:	4603      	mov	r3, r0
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d003      	beq.n	800f2f8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800f2f0:	68bb      	ldr	r3, [r7, #8]
 800f2f2:	2201      	movs	r2, #1
 800f2f4:	601a      	str	r2, [r3, #0]
 800f2f6:	e002      	b.n	800f2fe <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800f2f8:	68bb      	ldr	r3, [r7, #8]
 800f2fa:	2200      	movs	r2, #0
 800f2fc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f2fe:	68bb      	ldr	r3, [r7, #8]
 800f300:	2202      	movs	r2, #2
 800f302:	4619      	mov	r1, r3
 800f304:	6878      	ldr	r0, [r7, #4]
 800f306:	f000 fbd1 	bl	800faac <USBD_CtlSendData>
              break;
 800f30a:	e004      	b.n	800f316 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800f30c:	6839      	ldr	r1, [r7, #0]
 800f30e:	6878      	ldr	r0, [r7, #4]
 800f310:	f000 fb5b 	bl	800f9ca <USBD_CtlError>
              break;
 800f314:	bf00      	nop
          }
          break;
 800f316:	e004      	b.n	800f322 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800f318:	6839      	ldr	r1, [r7, #0]
 800f31a:	6878      	ldr	r0, [r7, #4]
 800f31c:	f000 fb55 	bl	800f9ca <USBD_CtlError>
          break;
 800f320:	bf00      	nop
      }
      break;
 800f322:	e005      	b.n	800f330 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800f324:	6839      	ldr	r1, [r7, #0]
 800f326:	6878      	ldr	r0, [r7, #4]
 800f328:	f000 fb4f 	bl	800f9ca <USBD_CtlError>
      break;
 800f32c:	e000      	b.n	800f330 <USBD_StdEPReq+0x330>
      break;
 800f32e:	bf00      	nop
  }

  return ret;
 800f330:	7bfb      	ldrb	r3, [r7, #15]
}
 800f332:	4618      	mov	r0, r3
 800f334:	3710      	adds	r7, #16
 800f336:	46bd      	mov	sp, r7
 800f338:	bd80      	pop	{r7, pc}
	...

0800f33c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f33c:	b580      	push	{r7, lr}
 800f33e:	b084      	sub	sp, #16
 800f340:	af00      	add	r7, sp, #0
 800f342:	6078      	str	r0, [r7, #4]
 800f344:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f346:	2300      	movs	r3, #0
 800f348:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f34a:	2300      	movs	r3, #0
 800f34c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f34e:	2300      	movs	r3, #0
 800f350:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f352:	683b      	ldr	r3, [r7, #0]
 800f354:	885b      	ldrh	r3, [r3, #2]
 800f356:	0a1b      	lsrs	r3, r3, #8
 800f358:	b29b      	uxth	r3, r3
 800f35a:	3b01      	subs	r3, #1
 800f35c:	2b06      	cmp	r3, #6
 800f35e:	f200 8128 	bhi.w	800f5b2 <USBD_GetDescriptor+0x276>
 800f362:	a201      	add	r2, pc, #4	; (adr r2, 800f368 <USBD_GetDescriptor+0x2c>)
 800f364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f368:	0800f385 	.word	0x0800f385
 800f36c:	0800f39d 	.word	0x0800f39d
 800f370:	0800f3dd 	.word	0x0800f3dd
 800f374:	0800f5b3 	.word	0x0800f5b3
 800f378:	0800f5b3 	.word	0x0800f5b3
 800f37c:	0800f553 	.word	0x0800f553
 800f380:	0800f57f 	.word	0x0800f57f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	687a      	ldr	r2, [r7, #4]
 800f38e:	7c12      	ldrb	r2, [r2, #16]
 800f390:	f107 0108 	add.w	r1, r7, #8
 800f394:	4610      	mov	r0, r2
 800f396:	4798      	blx	r3
 800f398:	60f8      	str	r0, [r7, #12]
      break;
 800f39a:	e112      	b.n	800f5c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	7c1b      	ldrb	r3, [r3, #16]
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d10d      	bne.n	800f3c0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f3aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3ac:	f107 0208 	add.w	r2, r7, #8
 800f3b0:	4610      	mov	r0, r2
 800f3b2:	4798      	blx	r3
 800f3b4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	3301      	adds	r3, #1
 800f3ba:	2202      	movs	r2, #2
 800f3bc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f3be:	e100      	b.n	800f5c2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f3c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3c8:	f107 0208 	add.w	r2, r7, #8
 800f3cc:	4610      	mov	r0, r2
 800f3ce:	4798      	blx	r3
 800f3d0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	3301      	adds	r3, #1
 800f3d6:	2202      	movs	r2, #2
 800f3d8:	701a      	strb	r2, [r3, #0]
      break;
 800f3da:	e0f2      	b.n	800f5c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f3dc:	683b      	ldr	r3, [r7, #0]
 800f3de:	885b      	ldrh	r3, [r3, #2]
 800f3e0:	b2db      	uxtb	r3, r3
 800f3e2:	2b05      	cmp	r3, #5
 800f3e4:	f200 80ac 	bhi.w	800f540 <USBD_GetDescriptor+0x204>
 800f3e8:	a201      	add	r2, pc, #4	; (adr r2, 800f3f0 <USBD_GetDescriptor+0xb4>)
 800f3ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3ee:	bf00      	nop
 800f3f0:	0800f409 	.word	0x0800f409
 800f3f4:	0800f43d 	.word	0x0800f43d
 800f3f8:	0800f471 	.word	0x0800f471
 800f3fc:	0800f4a5 	.word	0x0800f4a5
 800f400:	0800f4d9 	.word	0x0800f4d9
 800f404:	0800f50d 	.word	0x0800f50d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f40e:	685b      	ldr	r3, [r3, #4]
 800f410:	2b00      	cmp	r3, #0
 800f412:	d00b      	beq.n	800f42c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f41a:	685b      	ldr	r3, [r3, #4]
 800f41c:	687a      	ldr	r2, [r7, #4]
 800f41e:	7c12      	ldrb	r2, [r2, #16]
 800f420:	f107 0108 	add.w	r1, r7, #8
 800f424:	4610      	mov	r0, r2
 800f426:	4798      	blx	r3
 800f428:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f42a:	e091      	b.n	800f550 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f42c:	6839      	ldr	r1, [r7, #0]
 800f42e:	6878      	ldr	r0, [r7, #4]
 800f430:	f000 facb 	bl	800f9ca <USBD_CtlError>
            err++;
 800f434:	7afb      	ldrb	r3, [r7, #11]
 800f436:	3301      	adds	r3, #1
 800f438:	72fb      	strb	r3, [r7, #11]
          break;
 800f43a:	e089      	b.n	800f550 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f442:	689b      	ldr	r3, [r3, #8]
 800f444:	2b00      	cmp	r3, #0
 800f446:	d00b      	beq.n	800f460 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f44e:	689b      	ldr	r3, [r3, #8]
 800f450:	687a      	ldr	r2, [r7, #4]
 800f452:	7c12      	ldrb	r2, [r2, #16]
 800f454:	f107 0108 	add.w	r1, r7, #8
 800f458:	4610      	mov	r0, r2
 800f45a:	4798      	blx	r3
 800f45c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f45e:	e077      	b.n	800f550 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f460:	6839      	ldr	r1, [r7, #0]
 800f462:	6878      	ldr	r0, [r7, #4]
 800f464:	f000 fab1 	bl	800f9ca <USBD_CtlError>
            err++;
 800f468:	7afb      	ldrb	r3, [r7, #11]
 800f46a:	3301      	adds	r3, #1
 800f46c:	72fb      	strb	r3, [r7, #11]
          break;
 800f46e:	e06f      	b.n	800f550 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f476:	68db      	ldr	r3, [r3, #12]
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d00b      	beq.n	800f494 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f482:	68db      	ldr	r3, [r3, #12]
 800f484:	687a      	ldr	r2, [r7, #4]
 800f486:	7c12      	ldrb	r2, [r2, #16]
 800f488:	f107 0108 	add.w	r1, r7, #8
 800f48c:	4610      	mov	r0, r2
 800f48e:	4798      	blx	r3
 800f490:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f492:	e05d      	b.n	800f550 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f494:	6839      	ldr	r1, [r7, #0]
 800f496:	6878      	ldr	r0, [r7, #4]
 800f498:	f000 fa97 	bl	800f9ca <USBD_CtlError>
            err++;
 800f49c:	7afb      	ldrb	r3, [r7, #11]
 800f49e:	3301      	adds	r3, #1
 800f4a0:	72fb      	strb	r3, [r7, #11]
          break;
 800f4a2:	e055      	b.n	800f550 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f4aa:	691b      	ldr	r3, [r3, #16]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d00b      	beq.n	800f4c8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f4b6:	691b      	ldr	r3, [r3, #16]
 800f4b8:	687a      	ldr	r2, [r7, #4]
 800f4ba:	7c12      	ldrb	r2, [r2, #16]
 800f4bc:	f107 0108 	add.w	r1, r7, #8
 800f4c0:	4610      	mov	r0, r2
 800f4c2:	4798      	blx	r3
 800f4c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f4c6:	e043      	b.n	800f550 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f4c8:	6839      	ldr	r1, [r7, #0]
 800f4ca:	6878      	ldr	r0, [r7, #4]
 800f4cc:	f000 fa7d 	bl	800f9ca <USBD_CtlError>
            err++;
 800f4d0:	7afb      	ldrb	r3, [r7, #11]
 800f4d2:	3301      	adds	r3, #1
 800f4d4:	72fb      	strb	r3, [r7, #11]
          break;
 800f4d6:	e03b      	b.n	800f550 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f4de:	695b      	ldr	r3, [r3, #20]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d00b      	beq.n	800f4fc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f4ea:	695b      	ldr	r3, [r3, #20]
 800f4ec:	687a      	ldr	r2, [r7, #4]
 800f4ee:	7c12      	ldrb	r2, [r2, #16]
 800f4f0:	f107 0108 	add.w	r1, r7, #8
 800f4f4:	4610      	mov	r0, r2
 800f4f6:	4798      	blx	r3
 800f4f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f4fa:	e029      	b.n	800f550 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f4fc:	6839      	ldr	r1, [r7, #0]
 800f4fe:	6878      	ldr	r0, [r7, #4]
 800f500:	f000 fa63 	bl	800f9ca <USBD_CtlError>
            err++;
 800f504:	7afb      	ldrb	r3, [r7, #11]
 800f506:	3301      	adds	r3, #1
 800f508:	72fb      	strb	r3, [r7, #11]
          break;
 800f50a:	e021      	b.n	800f550 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f512:	699b      	ldr	r3, [r3, #24]
 800f514:	2b00      	cmp	r3, #0
 800f516:	d00b      	beq.n	800f530 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f51e:	699b      	ldr	r3, [r3, #24]
 800f520:	687a      	ldr	r2, [r7, #4]
 800f522:	7c12      	ldrb	r2, [r2, #16]
 800f524:	f107 0108 	add.w	r1, r7, #8
 800f528:	4610      	mov	r0, r2
 800f52a:	4798      	blx	r3
 800f52c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f52e:	e00f      	b.n	800f550 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f530:	6839      	ldr	r1, [r7, #0]
 800f532:	6878      	ldr	r0, [r7, #4]
 800f534:	f000 fa49 	bl	800f9ca <USBD_CtlError>
            err++;
 800f538:	7afb      	ldrb	r3, [r7, #11]
 800f53a:	3301      	adds	r3, #1
 800f53c:	72fb      	strb	r3, [r7, #11]
          break;
 800f53e:	e007      	b.n	800f550 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800f540:	6839      	ldr	r1, [r7, #0]
 800f542:	6878      	ldr	r0, [r7, #4]
 800f544:	f000 fa41 	bl	800f9ca <USBD_CtlError>
          err++;
 800f548:	7afb      	ldrb	r3, [r7, #11]
 800f54a:	3301      	adds	r3, #1
 800f54c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800f54e:	bf00      	nop
      }
      break;
 800f550:	e037      	b.n	800f5c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	7c1b      	ldrb	r3, [r3, #16]
 800f556:	2b00      	cmp	r3, #0
 800f558:	d109      	bne.n	800f56e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f562:	f107 0208 	add.w	r2, r7, #8
 800f566:	4610      	mov	r0, r2
 800f568:	4798      	blx	r3
 800f56a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f56c:	e029      	b.n	800f5c2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f56e:	6839      	ldr	r1, [r7, #0]
 800f570:	6878      	ldr	r0, [r7, #4]
 800f572:	f000 fa2a 	bl	800f9ca <USBD_CtlError>
        err++;
 800f576:	7afb      	ldrb	r3, [r7, #11]
 800f578:	3301      	adds	r3, #1
 800f57a:	72fb      	strb	r3, [r7, #11]
      break;
 800f57c:	e021      	b.n	800f5c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	7c1b      	ldrb	r3, [r3, #16]
 800f582:	2b00      	cmp	r3, #0
 800f584:	d10d      	bne.n	800f5a2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f58c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f58e:	f107 0208 	add.w	r2, r7, #8
 800f592:	4610      	mov	r0, r2
 800f594:	4798      	blx	r3
 800f596:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	3301      	adds	r3, #1
 800f59c:	2207      	movs	r2, #7
 800f59e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f5a0:	e00f      	b.n	800f5c2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f5a2:	6839      	ldr	r1, [r7, #0]
 800f5a4:	6878      	ldr	r0, [r7, #4]
 800f5a6:	f000 fa10 	bl	800f9ca <USBD_CtlError>
        err++;
 800f5aa:	7afb      	ldrb	r3, [r7, #11]
 800f5ac:	3301      	adds	r3, #1
 800f5ae:	72fb      	strb	r3, [r7, #11]
      break;
 800f5b0:	e007      	b.n	800f5c2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800f5b2:	6839      	ldr	r1, [r7, #0]
 800f5b4:	6878      	ldr	r0, [r7, #4]
 800f5b6:	f000 fa08 	bl	800f9ca <USBD_CtlError>
      err++;
 800f5ba:	7afb      	ldrb	r3, [r7, #11]
 800f5bc:	3301      	adds	r3, #1
 800f5be:	72fb      	strb	r3, [r7, #11]
      break;
 800f5c0:	bf00      	nop
  }

  if (err != 0U)
 800f5c2:	7afb      	ldrb	r3, [r7, #11]
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d11e      	bne.n	800f606 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800f5c8:	683b      	ldr	r3, [r7, #0]
 800f5ca:	88db      	ldrh	r3, [r3, #6]
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d016      	beq.n	800f5fe <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800f5d0:	893b      	ldrh	r3, [r7, #8]
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d00e      	beq.n	800f5f4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800f5d6:	683b      	ldr	r3, [r7, #0]
 800f5d8:	88da      	ldrh	r2, [r3, #6]
 800f5da:	893b      	ldrh	r3, [r7, #8]
 800f5dc:	4293      	cmp	r3, r2
 800f5de:	bf28      	it	cs
 800f5e0:	4613      	movcs	r3, r2
 800f5e2:	b29b      	uxth	r3, r3
 800f5e4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f5e6:	893b      	ldrh	r3, [r7, #8]
 800f5e8:	461a      	mov	r2, r3
 800f5ea:	68f9      	ldr	r1, [r7, #12]
 800f5ec:	6878      	ldr	r0, [r7, #4]
 800f5ee:	f000 fa5d 	bl	800faac <USBD_CtlSendData>
 800f5f2:	e009      	b.n	800f608 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800f5f4:	6839      	ldr	r1, [r7, #0]
 800f5f6:	6878      	ldr	r0, [r7, #4]
 800f5f8:	f000 f9e7 	bl	800f9ca <USBD_CtlError>
 800f5fc:	e004      	b.n	800f608 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800f5fe:	6878      	ldr	r0, [r7, #4]
 800f600:	f000 faae 	bl	800fb60 <USBD_CtlSendStatus>
 800f604:	e000      	b.n	800f608 <USBD_GetDescriptor+0x2cc>
    return;
 800f606:	bf00      	nop
  }
}
 800f608:	3710      	adds	r7, #16
 800f60a:	46bd      	mov	sp, r7
 800f60c:	bd80      	pop	{r7, pc}
 800f60e:	bf00      	nop

0800f610 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f610:	b580      	push	{r7, lr}
 800f612:	b084      	sub	sp, #16
 800f614:	af00      	add	r7, sp, #0
 800f616:	6078      	str	r0, [r7, #4]
 800f618:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f61a:	683b      	ldr	r3, [r7, #0]
 800f61c:	889b      	ldrh	r3, [r3, #4]
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d131      	bne.n	800f686 <USBD_SetAddress+0x76>
 800f622:	683b      	ldr	r3, [r7, #0]
 800f624:	88db      	ldrh	r3, [r3, #6]
 800f626:	2b00      	cmp	r3, #0
 800f628:	d12d      	bne.n	800f686 <USBD_SetAddress+0x76>
 800f62a:	683b      	ldr	r3, [r7, #0]
 800f62c:	885b      	ldrh	r3, [r3, #2]
 800f62e:	2b7f      	cmp	r3, #127	; 0x7f
 800f630:	d829      	bhi.n	800f686 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f632:	683b      	ldr	r3, [r7, #0]
 800f634:	885b      	ldrh	r3, [r3, #2]
 800f636:	b2db      	uxtb	r3, r3
 800f638:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f63c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f644:	b2db      	uxtb	r3, r3
 800f646:	2b03      	cmp	r3, #3
 800f648:	d104      	bne.n	800f654 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800f64a:	6839      	ldr	r1, [r7, #0]
 800f64c:	6878      	ldr	r0, [r7, #4]
 800f64e:	f000 f9bc 	bl	800f9ca <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f652:	e01d      	b.n	800f690 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	7bfa      	ldrb	r2, [r7, #15]
 800f658:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f65c:	7bfb      	ldrb	r3, [r7, #15]
 800f65e:	4619      	mov	r1, r3
 800f660:	6878      	ldr	r0, [r7, #4]
 800f662:	f011 f8d7 	bl	8020814 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f666:	6878      	ldr	r0, [r7, #4]
 800f668:	f000 fa7a 	bl	800fb60 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f66c:	7bfb      	ldrb	r3, [r7, #15]
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d004      	beq.n	800f67c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	2202      	movs	r2, #2
 800f676:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f67a:	e009      	b.n	800f690 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	2201      	movs	r2, #1
 800f680:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f684:	e004      	b.n	800f690 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f686:	6839      	ldr	r1, [r7, #0]
 800f688:	6878      	ldr	r0, [r7, #4]
 800f68a:	f000 f99e 	bl	800f9ca <USBD_CtlError>
  }
}
 800f68e:	bf00      	nop
 800f690:	bf00      	nop
 800f692:	3710      	adds	r7, #16
 800f694:	46bd      	mov	sp, r7
 800f696:	bd80      	pop	{r7, pc}

0800f698 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f698:	b580      	push	{r7, lr}
 800f69a:	b084      	sub	sp, #16
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	6078      	str	r0, [r7, #4]
 800f6a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f6a2:	2300      	movs	r3, #0
 800f6a4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f6a6:	683b      	ldr	r3, [r7, #0]
 800f6a8:	885b      	ldrh	r3, [r3, #2]
 800f6aa:	b2da      	uxtb	r2, r3
 800f6ac:	4b4e      	ldr	r3, [pc, #312]	; (800f7e8 <USBD_SetConfig+0x150>)
 800f6ae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f6b0:	4b4d      	ldr	r3, [pc, #308]	; (800f7e8 <USBD_SetConfig+0x150>)
 800f6b2:	781b      	ldrb	r3, [r3, #0]
 800f6b4:	2b01      	cmp	r3, #1
 800f6b6:	d905      	bls.n	800f6c4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f6b8:	6839      	ldr	r1, [r7, #0]
 800f6ba:	6878      	ldr	r0, [r7, #4]
 800f6bc:	f000 f985 	bl	800f9ca <USBD_CtlError>
    return USBD_FAIL;
 800f6c0:	2303      	movs	r3, #3
 800f6c2:	e08c      	b.n	800f7de <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f6ca:	b2db      	uxtb	r3, r3
 800f6cc:	2b02      	cmp	r3, #2
 800f6ce:	d002      	beq.n	800f6d6 <USBD_SetConfig+0x3e>
 800f6d0:	2b03      	cmp	r3, #3
 800f6d2:	d029      	beq.n	800f728 <USBD_SetConfig+0x90>
 800f6d4:	e075      	b.n	800f7c2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800f6d6:	4b44      	ldr	r3, [pc, #272]	; (800f7e8 <USBD_SetConfig+0x150>)
 800f6d8:	781b      	ldrb	r3, [r3, #0]
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d020      	beq.n	800f720 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800f6de:	4b42      	ldr	r3, [pc, #264]	; (800f7e8 <USBD_SetConfig+0x150>)
 800f6e0:	781b      	ldrb	r3, [r3, #0]
 800f6e2:	461a      	mov	r2, r3
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f6e8:	4b3f      	ldr	r3, [pc, #252]	; (800f7e8 <USBD_SetConfig+0x150>)
 800f6ea:	781b      	ldrb	r3, [r3, #0]
 800f6ec:	4619      	mov	r1, r3
 800f6ee:	6878      	ldr	r0, [r7, #4]
 800f6f0:	f7fe ffe7 	bl	800e6c2 <USBD_SetClassConfig>
 800f6f4:	4603      	mov	r3, r0
 800f6f6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800f6f8:	7bfb      	ldrb	r3, [r7, #15]
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d008      	beq.n	800f710 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800f6fe:	6839      	ldr	r1, [r7, #0]
 800f700:	6878      	ldr	r0, [r7, #4]
 800f702:	f000 f962 	bl	800f9ca <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	2202      	movs	r2, #2
 800f70a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f70e:	e065      	b.n	800f7dc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f710:	6878      	ldr	r0, [r7, #4]
 800f712:	f000 fa25 	bl	800fb60 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	2203      	movs	r2, #3
 800f71a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800f71e:	e05d      	b.n	800f7dc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f720:	6878      	ldr	r0, [r7, #4]
 800f722:	f000 fa1d 	bl	800fb60 <USBD_CtlSendStatus>
      break;
 800f726:	e059      	b.n	800f7dc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800f728:	4b2f      	ldr	r3, [pc, #188]	; (800f7e8 <USBD_SetConfig+0x150>)
 800f72a:	781b      	ldrb	r3, [r3, #0]
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d112      	bne.n	800f756 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	2202      	movs	r2, #2
 800f734:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800f738:	4b2b      	ldr	r3, [pc, #172]	; (800f7e8 <USBD_SetConfig+0x150>)
 800f73a:	781b      	ldrb	r3, [r3, #0]
 800f73c:	461a      	mov	r2, r3
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f742:	4b29      	ldr	r3, [pc, #164]	; (800f7e8 <USBD_SetConfig+0x150>)
 800f744:	781b      	ldrb	r3, [r3, #0]
 800f746:	4619      	mov	r1, r3
 800f748:	6878      	ldr	r0, [r7, #4]
 800f74a:	f7fe ffd6 	bl	800e6fa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800f74e:	6878      	ldr	r0, [r7, #4]
 800f750:	f000 fa06 	bl	800fb60 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f754:	e042      	b.n	800f7dc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800f756:	4b24      	ldr	r3, [pc, #144]	; (800f7e8 <USBD_SetConfig+0x150>)
 800f758:	781b      	ldrb	r3, [r3, #0]
 800f75a:	461a      	mov	r2, r3
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	685b      	ldr	r3, [r3, #4]
 800f760:	429a      	cmp	r2, r3
 800f762:	d02a      	beq.n	800f7ba <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	685b      	ldr	r3, [r3, #4]
 800f768:	b2db      	uxtb	r3, r3
 800f76a:	4619      	mov	r1, r3
 800f76c:	6878      	ldr	r0, [r7, #4]
 800f76e:	f7fe ffc4 	bl	800e6fa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f772:	4b1d      	ldr	r3, [pc, #116]	; (800f7e8 <USBD_SetConfig+0x150>)
 800f774:	781b      	ldrb	r3, [r3, #0]
 800f776:	461a      	mov	r2, r3
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f77c:	4b1a      	ldr	r3, [pc, #104]	; (800f7e8 <USBD_SetConfig+0x150>)
 800f77e:	781b      	ldrb	r3, [r3, #0]
 800f780:	4619      	mov	r1, r3
 800f782:	6878      	ldr	r0, [r7, #4]
 800f784:	f7fe ff9d 	bl	800e6c2 <USBD_SetClassConfig>
 800f788:	4603      	mov	r3, r0
 800f78a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800f78c:	7bfb      	ldrb	r3, [r7, #15]
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d00f      	beq.n	800f7b2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800f792:	6839      	ldr	r1, [r7, #0]
 800f794:	6878      	ldr	r0, [r7, #4]
 800f796:	f000 f918 	bl	800f9ca <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	685b      	ldr	r3, [r3, #4]
 800f79e:	b2db      	uxtb	r3, r3
 800f7a0:	4619      	mov	r1, r3
 800f7a2:	6878      	ldr	r0, [r7, #4]
 800f7a4:	f7fe ffa9 	bl	800e6fa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	2202      	movs	r2, #2
 800f7ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800f7b0:	e014      	b.n	800f7dc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f7b2:	6878      	ldr	r0, [r7, #4]
 800f7b4:	f000 f9d4 	bl	800fb60 <USBD_CtlSendStatus>
      break;
 800f7b8:	e010      	b.n	800f7dc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f7ba:	6878      	ldr	r0, [r7, #4]
 800f7bc:	f000 f9d0 	bl	800fb60 <USBD_CtlSendStatus>
      break;
 800f7c0:	e00c      	b.n	800f7dc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800f7c2:	6839      	ldr	r1, [r7, #0]
 800f7c4:	6878      	ldr	r0, [r7, #4]
 800f7c6:	f000 f900 	bl	800f9ca <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f7ca:	4b07      	ldr	r3, [pc, #28]	; (800f7e8 <USBD_SetConfig+0x150>)
 800f7cc:	781b      	ldrb	r3, [r3, #0]
 800f7ce:	4619      	mov	r1, r3
 800f7d0:	6878      	ldr	r0, [r7, #4]
 800f7d2:	f7fe ff92 	bl	800e6fa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800f7d6:	2303      	movs	r3, #3
 800f7d8:	73fb      	strb	r3, [r7, #15]
      break;
 800f7da:	bf00      	nop
  }

  return ret;
 800f7dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7de:	4618      	mov	r0, r3
 800f7e0:	3710      	adds	r7, #16
 800f7e2:	46bd      	mov	sp, r7
 800f7e4:	bd80      	pop	{r7, pc}
 800f7e6:	bf00      	nop
 800f7e8:	20001ef4 	.word	0x20001ef4

0800f7ec <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f7ec:	b580      	push	{r7, lr}
 800f7ee:	b082      	sub	sp, #8
 800f7f0:	af00      	add	r7, sp, #0
 800f7f2:	6078      	str	r0, [r7, #4]
 800f7f4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f7f6:	683b      	ldr	r3, [r7, #0]
 800f7f8:	88db      	ldrh	r3, [r3, #6]
 800f7fa:	2b01      	cmp	r3, #1
 800f7fc:	d004      	beq.n	800f808 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f7fe:	6839      	ldr	r1, [r7, #0]
 800f800:	6878      	ldr	r0, [r7, #4]
 800f802:	f000 f8e2 	bl	800f9ca <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800f806:	e023      	b.n	800f850 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f80e:	b2db      	uxtb	r3, r3
 800f810:	2b02      	cmp	r3, #2
 800f812:	dc02      	bgt.n	800f81a <USBD_GetConfig+0x2e>
 800f814:	2b00      	cmp	r3, #0
 800f816:	dc03      	bgt.n	800f820 <USBD_GetConfig+0x34>
 800f818:	e015      	b.n	800f846 <USBD_GetConfig+0x5a>
 800f81a:	2b03      	cmp	r3, #3
 800f81c:	d00b      	beq.n	800f836 <USBD_GetConfig+0x4a>
 800f81e:	e012      	b.n	800f846 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	2200      	movs	r2, #0
 800f824:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	3308      	adds	r3, #8
 800f82a:	2201      	movs	r2, #1
 800f82c:	4619      	mov	r1, r3
 800f82e:	6878      	ldr	r0, [r7, #4]
 800f830:	f000 f93c 	bl	800faac <USBD_CtlSendData>
        break;
 800f834:	e00c      	b.n	800f850 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	3304      	adds	r3, #4
 800f83a:	2201      	movs	r2, #1
 800f83c:	4619      	mov	r1, r3
 800f83e:	6878      	ldr	r0, [r7, #4]
 800f840:	f000 f934 	bl	800faac <USBD_CtlSendData>
        break;
 800f844:	e004      	b.n	800f850 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800f846:	6839      	ldr	r1, [r7, #0]
 800f848:	6878      	ldr	r0, [r7, #4]
 800f84a:	f000 f8be 	bl	800f9ca <USBD_CtlError>
        break;
 800f84e:	bf00      	nop
}
 800f850:	bf00      	nop
 800f852:	3708      	adds	r7, #8
 800f854:	46bd      	mov	sp, r7
 800f856:	bd80      	pop	{r7, pc}

0800f858 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f858:	b580      	push	{r7, lr}
 800f85a:	b082      	sub	sp, #8
 800f85c:	af00      	add	r7, sp, #0
 800f85e:	6078      	str	r0, [r7, #4]
 800f860:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f868:	b2db      	uxtb	r3, r3
 800f86a:	3b01      	subs	r3, #1
 800f86c:	2b02      	cmp	r3, #2
 800f86e:	d81e      	bhi.n	800f8ae <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800f870:	683b      	ldr	r3, [r7, #0]
 800f872:	88db      	ldrh	r3, [r3, #6]
 800f874:	2b02      	cmp	r3, #2
 800f876:	d004      	beq.n	800f882 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800f878:	6839      	ldr	r1, [r7, #0]
 800f87a:	6878      	ldr	r0, [r7, #4]
 800f87c:	f000 f8a5 	bl	800f9ca <USBD_CtlError>
        break;
 800f880:	e01a      	b.n	800f8b8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	2201      	movs	r2, #1
 800f886:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d005      	beq.n	800f89e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	68db      	ldr	r3, [r3, #12]
 800f896:	f043 0202 	orr.w	r2, r3, #2
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	330c      	adds	r3, #12
 800f8a2:	2202      	movs	r2, #2
 800f8a4:	4619      	mov	r1, r3
 800f8a6:	6878      	ldr	r0, [r7, #4]
 800f8a8:	f000 f900 	bl	800faac <USBD_CtlSendData>
      break;
 800f8ac:	e004      	b.n	800f8b8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800f8ae:	6839      	ldr	r1, [r7, #0]
 800f8b0:	6878      	ldr	r0, [r7, #4]
 800f8b2:	f000 f88a 	bl	800f9ca <USBD_CtlError>
      break;
 800f8b6:	bf00      	nop
  }
}
 800f8b8:	bf00      	nop
 800f8ba:	3708      	adds	r7, #8
 800f8bc:	46bd      	mov	sp, r7
 800f8be:	bd80      	pop	{r7, pc}

0800f8c0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f8c0:	b580      	push	{r7, lr}
 800f8c2:	b082      	sub	sp, #8
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	6078      	str	r0, [r7, #4]
 800f8c8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f8ca:	683b      	ldr	r3, [r7, #0]
 800f8cc:	885b      	ldrh	r3, [r3, #2]
 800f8ce:	2b01      	cmp	r3, #1
 800f8d0:	d107      	bne.n	800f8e2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	2201      	movs	r2, #1
 800f8d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f8da:	6878      	ldr	r0, [r7, #4]
 800f8dc:	f000 f940 	bl	800fb60 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800f8e0:	e013      	b.n	800f90a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800f8e2:	683b      	ldr	r3, [r7, #0]
 800f8e4:	885b      	ldrh	r3, [r3, #2]
 800f8e6:	2b02      	cmp	r3, #2
 800f8e8:	d10b      	bne.n	800f902 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800f8ea:	683b      	ldr	r3, [r7, #0]
 800f8ec:	889b      	ldrh	r3, [r3, #4]
 800f8ee:	0a1b      	lsrs	r3, r3, #8
 800f8f0:	b29b      	uxth	r3, r3
 800f8f2:	b2da      	uxtb	r2, r3
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800f8fa:	6878      	ldr	r0, [r7, #4]
 800f8fc:	f000 f930 	bl	800fb60 <USBD_CtlSendStatus>
}
 800f900:	e003      	b.n	800f90a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800f902:	6839      	ldr	r1, [r7, #0]
 800f904:	6878      	ldr	r0, [r7, #4]
 800f906:	f000 f860 	bl	800f9ca <USBD_CtlError>
}
 800f90a:	bf00      	nop
 800f90c:	3708      	adds	r7, #8
 800f90e:	46bd      	mov	sp, r7
 800f910:	bd80      	pop	{r7, pc}

0800f912 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f912:	b580      	push	{r7, lr}
 800f914:	b082      	sub	sp, #8
 800f916:	af00      	add	r7, sp, #0
 800f918:	6078      	str	r0, [r7, #4]
 800f91a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f922:	b2db      	uxtb	r3, r3
 800f924:	3b01      	subs	r3, #1
 800f926:	2b02      	cmp	r3, #2
 800f928:	d80b      	bhi.n	800f942 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f92a:	683b      	ldr	r3, [r7, #0]
 800f92c:	885b      	ldrh	r3, [r3, #2]
 800f92e:	2b01      	cmp	r3, #1
 800f930:	d10c      	bne.n	800f94c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	2200      	movs	r2, #0
 800f936:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f93a:	6878      	ldr	r0, [r7, #4]
 800f93c:	f000 f910 	bl	800fb60 <USBD_CtlSendStatus>
      }
      break;
 800f940:	e004      	b.n	800f94c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800f942:	6839      	ldr	r1, [r7, #0]
 800f944:	6878      	ldr	r0, [r7, #4]
 800f946:	f000 f840 	bl	800f9ca <USBD_CtlError>
      break;
 800f94a:	e000      	b.n	800f94e <USBD_ClrFeature+0x3c>
      break;
 800f94c:	bf00      	nop
  }
}
 800f94e:	bf00      	nop
 800f950:	3708      	adds	r7, #8
 800f952:	46bd      	mov	sp, r7
 800f954:	bd80      	pop	{r7, pc}

0800f956 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f956:	b580      	push	{r7, lr}
 800f958:	b084      	sub	sp, #16
 800f95a:	af00      	add	r7, sp, #0
 800f95c:	6078      	str	r0, [r7, #4]
 800f95e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f960:	683b      	ldr	r3, [r7, #0]
 800f962:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	781a      	ldrb	r2, [r3, #0]
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	3301      	adds	r3, #1
 800f970:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	781a      	ldrb	r2, [r3, #0]
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	3301      	adds	r3, #1
 800f97e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f980:	68f8      	ldr	r0, [r7, #12]
 800f982:	f7ff fa41 	bl	800ee08 <SWAPBYTE>
 800f986:	4603      	mov	r3, r0
 800f988:	461a      	mov	r2, r3
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	3301      	adds	r3, #1
 800f992:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	3301      	adds	r3, #1
 800f998:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f99a:	68f8      	ldr	r0, [r7, #12]
 800f99c:	f7ff fa34 	bl	800ee08 <SWAPBYTE>
 800f9a0:	4603      	mov	r3, r0
 800f9a2:	461a      	mov	r2, r3
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	3301      	adds	r3, #1
 800f9ac:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f9ae:	68fb      	ldr	r3, [r7, #12]
 800f9b0:	3301      	adds	r3, #1
 800f9b2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f9b4:	68f8      	ldr	r0, [r7, #12]
 800f9b6:	f7ff fa27 	bl	800ee08 <SWAPBYTE>
 800f9ba:	4603      	mov	r3, r0
 800f9bc:	461a      	mov	r2, r3
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	80da      	strh	r2, [r3, #6]
}
 800f9c2:	bf00      	nop
 800f9c4:	3710      	adds	r7, #16
 800f9c6:	46bd      	mov	sp, r7
 800f9c8:	bd80      	pop	{r7, pc}

0800f9ca <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f9ca:	b580      	push	{r7, lr}
 800f9cc:	b082      	sub	sp, #8
 800f9ce:	af00      	add	r7, sp, #0
 800f9d0:	6078      	str	r0, [r7, #4]
 800f9d2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f9d4:	2180      	movs	r1, #128	; 0x80
 800f9d6:	6878      	ldr	r0, [r7, #4]
 800f9d8:	f010 feb2 	bl	8020740 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f9dc:	2100      	movs	r1, #0
 800f9de:	6878      	ldr	r0, [r7, #4]
 800f9e0:	f010 feae 	bl	8020740 <USBD_LL_StallEP>
}
 800f9e4:	bf00      	nop
 800f9e6:	3708      	adds	r7, #8
 800f9e8:	46bd      	mov	sp, r7
 800f9ea:	bd80      	pop	{r7, pc}

0800f9ec <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f9ec:	b580      	push	{r7, lr}
 800f9ee:	b086      	sub	sp, #24
 800f9f0:	af00      	add	r7, sp, #0
 800f9f2:	60f8      	str	r0, [r7, #12]
 800f9f4:	60b9      	str	r1, [r7, #8]
 800f9f6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f9f8:	2300      	movs	r3, #0
 800f9fa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d036      	beq.n	800fa70 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800fa06:	6938      	ldr	r0, [r7, #16]
 800fa08:	f000 f836 	bl	800fa78 <USBD_GetLen>
 800fa0c:	4603      	mov	r3, r0
 800fa0e:	3301      	adds	r3, #1
 800fa10:	b29b      	uxth	r3, r3
 800fa12:	005b      	lsls	r3, r3, #1
 800fa14:	b29a      	uxth	r2, r3
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800fa1a:	7dfb      	ldrb	r3, [r7, #23]
 800fa1c:	68ba      	ldr	r2, [r7, #8]
 800fa1e:	4413      	add	r3, r2
 800fa20:	687a      	ldr	r2, [r7, #4]
 800fa22:	7812      	ldrb	r2, [r2, #0]
 800fa24:	701a      	strb	r2, [r3, #0]
  idx++;
 800fa26:	7dfb      	ldrb	r3, [r7, #23]
 800fa28:	3301      	adds	r3, #1
 800fa2a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800fa2c:	7dfb      	ldrb	r3, [r7, #23]
 800fa2e:	68ba      	ldr	r2, [r7, #8]
 800fa30:	4413      	add	r3, r2
 800fa32:	2203      	movs	r2, #3
 800fa34:	701a      	strb	r2, [r3, #0]
  idx++;
 800fa36:	7dfb      	ldrb	r3, [r7, #23]
 800fa38:	3301      	adds	r3, #1
 800fa3a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800fa3c:	e013      	b.n	800fa66 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800fa3e:	7dfb      	ldrb	r3, [r7, #23]
 800fa40:	68ba      	ldr	r2, [r7, #8]
 800fa42:	4413      	add	r3, r2
 800fa44:	693a      	ldr	r2, [r7, #16]
 800fa46:	7812      	ldrb	r2, [r2, #0]
 800fa48:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800fa4a:	693b      	ldr	r3, [r7, #16]
 800fa4c:	3301      	adds	r3, #1
 800fa4e:	613b      	str	r3, [r7, #16]
    idx++;
 800fa50:	7dfb      	ldrb	r3, [r7, #23]
 800fa52:	3301      	adds	r3, #1
 800fa54:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800fa56:	7dfb      	ldrb	r3, [r7, #23]
 800fa58:	68ba      	ldr	r2, [r7, #8]
 800fa5a:	4413      	add	r3, r2
 800fa5c:	2200      	movs	r2, #0
 800fa5e:	701a      	strb	r2, [r3, #0]
    idx++;
 800fa60:	7dfb      	ldrb	r3, [r7, #23]
 800fa62:	3301      	adds	r3, #1
 800fa64:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800fa66:	693b      	ldr	r3, [r7, #16]
 800fa68:	781b      	ldrb	r3, [r3, #0]
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d1e7      	bne.n	800fa3e <USBD_GetString+0x52>
 800fa6e:	e000      	b.n	800fa72 <USBD_GetString+0x86>
    return;
 800fa70:	bf00      	nop
  }
}
 800fa72:	3718      	adds	r7, #24
 800fa74:	46bd      	mov	sp, r7
 800fa76:	bd80      	pop	{r7, pc}

0800fa78 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800fa78:	b480      	push	{r7}
 800fa7a:	b085      	sub	sp, #20
 800fa7c:	af00      	add	r7, sp, #0
 800fa7e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800fa80:	2300      	movs	r3, #0
 800fa82:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800fa88:	e005      	b.n	800fa96 <USBD_GetLen+0x1e>
  {
    len++;
 800fa8a:	7bfb      	ldrb	r3, [r7, #15]
 800fa8c:	3301      	adds	r3, #1
 800fa8e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800fa90:	68bb      	ldr	r3, [r7, #8]
 800fa92:	3301      	adds	r3, #1
 800fa94:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800fa96:	68bb      	ldr	r3, [r7, #8]
 800fa98:	781b      	ldrb	r3, [r3, #0]
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d1f5      	bne.n	800fa8a <USBD_GetLen+0x12>
  }

  return len;
 800fa9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800faa0:	4618      	mov	r0, r3
 800faa2:	3714      	adds	r7, #20
 800faa4:	46bd      	mov	sp, r7
 800faa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faaa:	4770      	bx	lr

0800faac <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800faac:	b580      	push	{r7, lr}
 800faae:	b084      	sub	sp, #16
 800fab0:	af00      	add	r7, sp, #0
 800fab2:	60f8      	str	r0, [r7, #12]
 800fab4:	60b9      	str	r1, [r7, #8]
 800fab6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	2202      	movs	r2, #2
 800fabc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	687a      	ldr	r2, [r7, #4]
 800fac4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	687a      	ldr	r2, [r7, #4]
 800faca:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	68ba      	ldr	r2, [r7, #8]
 800fad0:	2100      	movs	r1, #0
 800fad2:	68f8      	ldr	r0, [r7, #12]
 800fad4:	f010 febd 	bl	8020852 <USBD_LL_Transmit>

  return USBD_OK;
 800fad8:	2300      	movs	r3, #0
}
 800fada:	4618      	mov	r0, r3
 800fadc:	3710      	adds	r7, #16
 800fade:	46bd      	mov	sp, r7
 800fae0:	bd80      	pop	{r7, pc}

0800fae2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800fae2:	b580      	push	{r7, lr}
 800fae4:	b084      	sub	sp, #16
 800fae6:	af00      	add	r7, sp, #0
 800fae8:	60f8      	str	r0, [r7, #12]
 800faea:	60b9      	str	r1, [r7, #8]
 800faec:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	68ba      	ldr	r2, [r7, #8]
 800faf2:	2100      	movs	r1, #0
 800faf4:	68f8      	ldr	r0, [r7, #12]
 800faf6:	f010 feac 	bl	8020852 <USBD_LL_Transmit>

  return USBD_OK;
 800fafa:	2300      	movs	r3, #0
}
 800fafc:	4618      	mov	r0, r3
 800fafe:	3710      	adds	r7, #16
 800fb00:	46bd      	mov	sp, r7
 800fb02:	bd80      	pop	{r7, pc}

0800fb04 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800fb04:	b580      	push	{r7, lr}
 800fb06:	b084      	sub	sp, #16
 800fb08:	af00      	add	r7, sp, #0
 800fb0a:	60f8      	str	r0, [r7, #12]
 800fb0c:	60b9      	str	r1, [r7, #8]
 800fb0e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	2203      	movs	r2, #3
 800fb14:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	687a      	ldr	r2, [r7, #4]
 800fb1c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	687a      	ldr	r2, [r7, #4]
 800fb24:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	68ba      	ldr	r2, [r7, #8]
 800fb2c:	2100      	movs	r1, #0
 800fb2e:	68f8      	ldr	r0, [r7, #12]
 800fb30:	f010 feb0 	bl	8020894 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fb34:	2300      	movs	r3, #0
}
 800fb36:	4618      	mov	r0, r3
 800fb38:	3710      	adds	r7, #16
 800fb3a:	46bd      	mov	sp, r7
 800fb3c:	bd80      	pop	{r7, pc}

0800fb3e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800fb3e:	b580      	push	{r7, lr}
 800fb40:	b084      	sub	sp, #16
 800fb42:	af00      	add	r7, sp, #0
 800fb44:	60f8      	str	r0, [r7, #12]
 800fb46:	60b9      	str	r1, [r7, #8]
 800fb48:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	68ba      	ldr	r2, [r7, #8]
 800fb4e:	2100      	movs	r1, #0
 800fb50:	68f8      	ldr	r0, [r7, #12]
 800fb52:	f010 fe9f 	bl	8020894 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fb56:	2300      	movs	r3, #0
}
 800fb58:	4618      	mov	r0, r3
 800fb5a:	3710      	adds	r7, #16
 800fb5c:	46bd      	mov	sp, r7
 800fb5e:	bd80      	pop	{r7, pc}

0800fb60 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800fb60:	b580      	push	{r7, lr}
 800fb62:	b082      	sub	sp, #8
 800fb64:	af00      	add	r7, sp, #0
 800fb66:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	2204      	movs	r2, #4
 800fb6c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800fb70:	2300      	movs	r3, #0
 800fb72:	2200      	movs	r2, #0
 800fb74:	2100      	movs	r1, #0
 800fb76:	6878      	ldr	r0, [r7, #4]
 800fb78:	f010 fe6b 	bl	8020852 <USBD_LL_Transmit>

  return USBD_OK;
 800fb7c:	2300      	movs	r3, #0
}
 800fb7e:	4618      	mov	r0, r3
 800fb80:	3708      	adds	r7, #8
 800fb82:	46bd      	mov	sp, r7
 800fb84:	bd80      	pop	{r7, pc}

0800fb86 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800fb86:	b580      	push	{r7, lr}
 800fb88:	b082      	sub	sp, #8
 800fb8a:	af00      	add	r7, sp, #0
 800fb8c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	2205      	movs	r2, #5
 800fb92:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fb96:	2300      	movs	r3, #0
 800fb98:	2200      	movs	r2, #0
 800fb9a:	2100      	movs	r1, #0
 800fb9c:	6878      	ldr	r0, [r7, #4]
 800fb9e:	f010 fe79 	bl	8020894 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fba2:	2300      	movs	r3, #0
}
 800fba4:	4618      	mov	r0, r3
 800fba6:	3708      	adds	r7, #8
 800fba8:	46bd      	mov	sp, r7
 800fbaa:	bd80      	pop	{r7, pc}

0800fbac <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 800fbac:	b480      	push	{r7}
 800fbae:	b08b      	sub	sp, #44	; 0x2c
 800fbb0:	af00      	add	r7, sp, #0
 800fbb2:	60f8      	str	r0, [r7, #12]
 800fbb4:	ed87 0a02 	vstr	s0, [r7, #8]
 800fbb8:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	685b      	ldr	r3, [r3, #4]
 800fbbe:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	685b      	ldr	r3, [r3, #4]
 800fbc4:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	881b      	ldrh	r3, [r3, #0]
 800fbca:	461a      	mov	r2, r3
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	885b      	ldrh	r3, [r3, #2]
 800fbd0:	fb02 f303 	mul.w	r3, r2, r3
 800fbd4:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800fbd6:	69bb      	ldr	r3, [r7, #24]
 800fbd8:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800fbda:	e010      	b.n	800fbfe <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 800fbdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbde:	1d1a      	adds	r2, r3, #4
 800fbe0:	627a      	str	r2, [r7, #36]	; 0x24
 800fbe2:	ed93 7a00 	vldr	s14, [r3]
 800fbe6:	6a3b      	ldr	r3, [r7, #32]
 800fbe8:	1d1a      	adds	r2, r3, #4
 800fbea:	623a      	str	r2, [r7, #32]
 800fbec:	edd7 7a02 	vldr	s15, [r7, #8]
 800fbf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fbf4:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800fbf8:	69fb      	ldr	r3, [r7, #28]
 800fbfa:	3b01      	subs	r3, #1
 800fbfc:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 800fbfe:	69fb      	ldr	r3, [r7, #28]
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d1eb      	bne.n	800fbdc <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800fc04:	2300      	movs	r3, #0
 800fc06:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 800fc08:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fc0c:	4618      	mov	r0, r3
 800fc0e:	372c      	adds	r7, #44	; 0x2c
 800fc10:	46bd      	mov	sp, r7
 800fc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc16:	4770      	bx	lr

0800fc18 <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800fc18:	b480      	push	{r7}
 800fc1a:	b08b      	sub	sp, #44	; 0x2c
 800fc1c:	af00      	add	r7, sp, #0
 800fc1e:	6078      	str	r0, [r7, #4]
 800fc20:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	685b      	ldr	r3, [r3, #4]
 800fc26:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800fc28:	683b      	ldr	r3, [r7, #0]
 800fc2a:	685b      	ldr	r3, [r3, #4]
 800fc2c:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	881b      	ldrh	r3, [r3, #0]
 800fc32:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	885b      	ldrh	r3, [r3, #2]
 800fc38:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 800fc3a:	89fb      	ldrh	r3, [r7, #14]
 800fc3c:	61bb      	str	r3, [r7, #24]
 800fc3e:	2300      	movs	r3, #0
 800fc40:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 800fc42:	697b      	ldr	r3, [r7, #20]
 800fc44:	009b      	lsls	r3, r3, #2
 800fc46:	693a      	ldr	r2, [r7, #16]
 800fc48:	4413      	add	r3, r2
 800fc4a:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 800fc4c:	89bb      	ldrh	r3, [r7, #12]
 800fc4e:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 800fc50:	e00d      	b.n	800fc6e <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 800fc52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc54:	1d1a      	adds	r2, r3, #4
 800fc56:	627a      	str	r2, [r7, #36]	; 0x24
 800fc58:	681a      	ldr	r2, [r3, #0]
 800fc5a:	6a3b      	ldr	r3, [r7, #32]
 800fc5c:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 800fc5e:	89fb      	ldrh	r3, [r7, #14]
 800fc60:	009b      	lsls	r3, r3, #2
 800fc62:	6a3a      	ldr	r2, [r7, #32]
 800fc64:	4413      	add	r3, r2
 800fc66:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 800fc68:	69fb      	ldr	r3, [r7, #28]
 800fc6a:	3b01      	subs	r3, #1
 800fc6c:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 800fc6e:	69fb      	ldr	r3, [r7, #28]
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d1ee      	bne.n	800fc52 <arm_mat_trans_f32+0x3a>
      }

      i++;
 800fc74:	697b      	ldr	r3, [r7, #20]
 800fc76:	3301      	adds	r3, #1
 800fc78:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 800fc7a:	69bb      	ldr	r3, [r7, #24]
 800fc7c:	3b01      	subs	r3, #1
 800fc7e:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 800fc80:	69bb      	ldr	r3, [r7, #24]
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d1dd      	bne.n	800fc42 <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800fc86:	2300      	movs	r3, #0
 800fc88:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 800fc8a:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800fc8e:	4618      	mov	r0, r3
 800fc90:	372c      	adds	r7, #44	; 0x2c
 800fc92:	46bd      	mov	sp, r7
 800fc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc98:	4770      	bx	lr

0800fc9a <arm_mean_f32>:
#else
void arm_mean_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult)
{
 800fc9a:	b480      	push	{r7}
 800fc9c:	b087      	sub	sp, #28
 800fc9e:	af00      	add	r7, sp, #0
 800fca0:	60f8      	str	r0, [r7, #12]
 800fca2:	60b9      	str	r1, [r7, #8]
 800fca4:	607a      	str	r2, [r7, #4]
        uint32_t blkCnt;                               /* Loop counter */
        float32_t sum = 0.0f;                          /* Temporary result storage */
 800fca6:	f04f 0300 	mov.w	r3, #0
 800fcaa:	613b      	str	r3, [r7, #16]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 800fcac:	68bb      	ldr	r3, [r7, #8]
 800fcae:	617b      	str	r3, [r7, #20]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 800fcb0:	e00d      	b.n	800fcce <arm_mean_f32+0x34>
  {
    /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) */
    sum += *pSrc++;
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	1d1a      	adds	r2, r3, #4
 800fcb6:	60fa      	str	r2, [r7, #12]
 800fcb8:	edd3 7a00 	vldr	s15, [r3]
 800fcbc:	ed97 7a04 	vldr	s14, [r7, #16]
 800fcc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fcc4:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Decrement loop counter */
    blkCnt--;
 800fcc8:	697b      	ldr	r3, [r7, #20]
 800fcca:	3b01      	subs	r3, #1
 800fccc:	617b      	str	r3, [r7, #20]
  while (blkCnt > 0U)
 800fcce:	697b      	ldr	r3, [r7, #20]
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d1ee      	bne.n	800fcb2 <arm_mean_f32+0x18>
  }

  /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) / blockSize  */
  /* Store result to destination */
  *pResult = (sum / blockSize);
 800fcd4:	68bb      	ldr	r3, [r7, #8]
 800fcd6:	ee07 3a90 	vmov	s15, r3
 800fcda:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800fcde:	edd7 6a04 	vldr	s13, [r7, #16]
 800fce2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	edc3 7a00 	vstr	s15, [r3]
}
 800fcec:	bf00      	nop
 800fcee:	371c      	adds	r7, #28
 800fcf0:	46bd      	mov	sp, r7
 800fcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcf6:	4770      	bx	lr

0800fcf8 <arm_rms_f32>:
#else
void arm_rms_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult)
{
 800fcf8:	b580      	push	{r7, lr}
 800fcfa:	b08a      	sub	sp, #40	; 0x28
 800fcfc:	af00      	add	r7, sp, #0
 800fcfe:	60f8      	str	r0, [r7, #12]
 800fd00:	60b9      	str	r1, [r7, #8]
 800fd02:	607a      	str	r2, [r7, #4]
        uint32_t blkCnt;                               /* Loop counter */
        float32_t sum = 0.0f;                          /* Temporary result storage */
 800fd04:	f04f 0300 	mov.w	r3, #0
 800fd08:	623b      	str	r3, [r7, #32]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 800fd0a:	68bb      	ldr	r3, [r7, #8]
 800fd0c:	627b      	str	r3, [r7, #36]	; 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 800fd0e:	e011      	b.n	800fd34 <arm_rms_f32+0x3c>
  {
    /* C = A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1] */

    in = *pSrc++;
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	1d1a      	adds	r2, r3, #4
 800fd14:	60fa      	str	r2, [r7, #12]
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	61fb      	str	r3, [r7, #28]
    /* Compute sum of squares and store result in a temporary variable. */
    sum += ( in * in);
 800fd1a:	edd7 7a07 	vldr	s15, [r7, #28]
 800fd1e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800fd22:	ed97 7a08 	vldr	s14, [r7, #32]
 800fd26:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fd2a:	edc7 7a08 	vstr	s15, [r7, #32]

    /* Decrement loop counter */
    blkCnt--;
 800fd2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd30:	3b01      	subs	r3, #1
 800fd32:	627b      	str	r3, [r7, #36]	; 0x24
  while (blkCnt > 0U)
 800fd34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d1ea      	bne.n	800fd10 <arm_rms_f32+0x18>
  }

  /* Compute Rms and store result in destination */
  arm_sqrt_f32(sum / (float32_t) blockSize, pResult);
 800fd3a:	68bb      	ldr	r3, [r7, #8]
 800fd3c:	ee07 3a90 	vmov	s15, r3
 800fd40:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800fd44:	edd7 6a08 	vldr	s13, [r7, #32]
 800fd48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fd4c:	edc7 7a06 	vstr	s15, [r7, #24]
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	617b      	str	r3, [r7, #20]
    if (in >= 0.0f)
 800fd54:	edd7 7a06 	vldr	s15, [r7, #24]
 800fd58:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fd5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd60:	db09      	blt.n	800fd76 <arm_rms_f32+0x7e>
      *pOut = sqrtf(in);
 800fd62:	ed97 0a06 	vldr	s0, [r7, #24]
 800fd66:	f011 f959 	bl	802101c <sqrtf>
 800fd6a:	eef0 7a40 	vmov.f32	s15, s0
 800fd6e:	697b      	ldr	r3, [r7, #20]
 800fd70:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 800fd74:	e004      	b.n	800fd80 <arm_rms_f32+0x88>
      *pOut = 0.0f;
 800fd76:	697b      	ldr	r3, [r7, #20]
 800fd78:	f04f 0200 	mov.w	r2, #0
 800fd7c:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 800fd7e:	bf00      	nop
}
 800fd80:	bf00      	nop
 800fd82:	3728      	adds	r7, #40	; 0x28
 800fd84:	46bd      	mov	sp, r7
 800fd86:	bd80      	pop	{r7, pc}

0800fd88 <arm_bitreversal_32>:

void arm_bitreversal_32(
        uint32_t *pSrc,
  const uint16_t bitRevLen,
  const uint16_t *pBitRevTab)
{
 800fd88:	b480      	push	{r7}
 800fd8a:	b089      	sub	sp, #36	; 0x24
 800fd8c:	af00      	add	r7, sp, #0
 800fd8e:	60f8      	str	r0, [r7, #12]
 800fd90:	460b      	mov	r3, r1
 800fd92:	607a      	str	r2, [r7, #4]
 800fd94:	817b      	strh	r3, [r7, #10]
  uint32_t a, b, i, tmp;

  for (i = 0; i < bitRevLen; )
 800fd96:	2300      	movs	r3, #0
 800fd98:	61fb      	str	r3, [r7, #28]
 800fd9a:	e043      	b.n	800fe24 <arm_bitreversal_32+0x9c>
  {
     a = pBitRevTab[i    ] >> 2;
 800fd9c:	69fb      	ldr	r3, [r7, #28]
 800fd9e:	005b      	lsls	r3, r3, #1
 800fda0:	687a      	ldr	r2, [r7, #4]
 800fda2:	4413      	add	r3, r2
 800fda4:	881b      	ldrh	r3, [r3, #0]
 800fda6:	089b      	lsrs	r3, r3, #2
 800fda8:	b29b      	uxth	r3, r3
 800fdaa:	61bb      	str	r3, [r7, #24]
     b = pBitRevTab[i + 1] >> 2;
 800fdac:	69fb      	ldr	r3, [r7, #28]
 800fdae:	3301      	adds	r3, #1
 800fdb0:	005b      	lsls	r3, r3, #1
 800fdb2:	687a      	ldr	r2, [r7, #4]
 800fdb4:	4413      	add	r3, r2
 800fdb6:	881b      	ldrh	r3, [r3, #0]
 800fdb8:	089b      	lsrs	r3, r3, #2
 800fdba:	b29b      	uxth	r3, r3
 800fdbc:	617b      	str	r3, [r7, #20]

     //real
     tmp = pSrc[a];
 800fdbe:	69bb      	ldr	r3, [r7, #24]
 800fdc0:	009b      	lsls	r3, r3, #2
 800fdc2:	68fa      	ldr	r2, [r7, #12]
 800fdc4:	4413      	add	r3, r2
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	613b      	str	r3, [r7, #16]
     pSrc[a] = pSrc[b];
 800fdca:	697b      	ldr	r3, [r7, #20]
 800fdcc:	009b      	lsls	r3, r3, #2
 800fdce:	68fa      	ldr	r2, [r7, #12]
 800fdd0:	441a      	add	r2, r3
 800fdd2:	69bb      	ldr	r3, [r7, #24]
 800fdd4:	009b      	lsls	r3, r3, #2
 800fdd6:	68f9      	ldr	r1, [r7, #12]
 800fdd8:	440b      	add	r3, r1
 800fdda:	6812      	ldr	r2, [r2, #0]
 800fddc:	601a      	str	r2, [r3, #0]
     pSrc[b] = tmp;
 800fdde:	697b      	ldr	r3, [r7, #20]
 800fde0:	009b      	lsls	r3, r3, #2
 800fde2:	68fa      	ldr	r2, [r7, #12]
 800fde4:	4413      	add	r3, r2
 800fde6:	693a      	ldr	r2, [r7, #16]
 800fde8:	601a      	str	r2, [r3, #0]

     //complex
     tmp = pSrc[a+1];
 800fdea:	69bb      	ldr	r3, [r7, #24]
 800fdec:	3301      	adds	r3, #1
 800fdee:	009b      	lsls	r3, r3, #2
 800fdf0:	68fa      	ldr	r2, [r7, #12]
 800fdf2:	4413      	add	r3, r2
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	613b      	str	r3, [r7, #16]
     pSrc[a+1] = pSrc[b+1];
 800fdf8:	697b      	ldr	r3, [r7, #20]
 800fdfa:	3301      	adds	r3, #1
 800fdfc:	009b      	lsls	r3, r3, #2
 800fdfe:	68fa      	ldr	r2, [r7, #12]
 800fe00:	441a      	add	r2, r3
 800fe02:	69bb      	ldr	r3, [r7, #24]
 800fe04:	3301      	adds	r3, #1
 800fe06:	009b      	lsls	r3, r3, #2
 800fe08:	68f9      	ldr	r1, [r7, #12]
 800fe0a:	440b      	add	r3, r1
 800fe0c:	6812      	ldr	r2, [r2, #0]
 800fe0e:	601a      	str	r2, [r3, #0]
     pSrc[b+1] = tmp;
 800fe10:	697b      	ldr	r3, [r7, #20]
 800fe12:	3301      	adds	r3, #1
 800fe14:	009b      	lsls	r3, r3, #2
 800fe16:	68fa      	ldr	r2, [r7, #12]
 800fe18:	4413      	add	r3, r2
 800fe1a:	693a      	ldr	r2, [r7, #16]
 800fe1c:	601a      	str	r2, [r3, #0]

    i += 2;
 800fe1e:	69fb      	ldr	r3, [r7, #28]
 800fe20:	3302      	adds	r3, #2
 800fe22:	61fb      	str	r3, [r7, #28]
  for (i = 0; i < bitRevLen; )
 800fe24:	897b      	ldrh	r3, [r7, #10]
 800fe26:	69fa      	ldr	r2, [r7, #28]
 800fe28:	429a      	cmp	r2, r3
 800fe2a:	d3b7      	bcc.n	800fd9c <arm_bitreversal_32+0x14>
  }
}
 800fe2c:	bf00      	nop
 800fe2e:	bf00      	nop
 800fe30:	3724      	adds	r7, #36	; 0x24
 800fe32:	46bd      	mov	sp, r7
 800fe34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe38:	4770      	bx	lr

0800fe3a <arm_cfft_radix8by2_f32>:
  @endcode
 
 */

void arm_cfft_radix8by2_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 800fe3a:	b580      	push	{r7, lr}
 800fe3c:	b0a0      	sub	sp, #128	; 0x80
 800fe3e:	af00      	add	r7, sp, #0
 800fe40:	6078      	str	r0, [r7, #4]
 800fe42:	6039      	str	r1, [r7, #0]
  uint32_t    L  = S->fftLen;
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	881b      	ldrh	r3, [r3, #0]
 800fe48:	66bb      	str	r3, [r7, #104]	; 0x68
  float32_t * pCol1, * pCol2, * pMid1, * pMid2;
  float32_t * p2 = p1 + L;
 800fe4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fe4c:	009b      	lsls	r3, r3, #2
 800fe4e:	683a      	ldr	r2, [r7, #0]
 800fe50:	4413      	add	r3, r2
 800fe52:	677b      	str	r3, [r7, #116]	; 0x74
  const float32_t * tw = (float32_t *) S->pTwiddle;
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	685b      	ldr	r3, [r3, #4]
 800fe58:	673b      	str	r3, [r7, #112]	; 0x70
  float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
  float32_t m0, m1, m2, m3;
  uint32_t l;

  pCol1 = p1;
 800fe5a:	683b      	ldr	r3, [r7, #0]
 800fe5c:	667b      	str	r3, [r7, #100]	; 0x64
  pCol2 = p2;
 800fe5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fe60:	663b      	str	r3, [r7, #96]	; 0x60

  /* Define new length */
  L >>= 1;
 800fe62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fe64:	085b      	lsrs	r3, r3, #1
 800fe66:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Initialize mid pointers */
  pMid1 = p1 + L;
 800fe68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fe6a:	009b      	lsls	r3, r3, #2
 800fe6c:	683a      	ldr	r2, [r7, #0]
 800fe6e:	4413      	add	r3, r2
 800fe70:	67fb      	str	r3, [r7, #124]	; 0x7c
  pMid2 = p2 + L;
 800fe72:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fe74:	009b      	lsls	r3, r3, #2
 800fe76:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800fe78:	4413      	add	r3, r2
 800fe7a:	67bb      	str	r3, [r7, #120]	; 0x78

  /* do two dot Fourier transform */
  for (l = L >> 2; l > 0; l-- )
 800fe7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fe7e:	089b      	lsrs	r3, r3, #2
 800fe80:	66fb      	str	r3, [r7, #108]	; 0x6c
 800fe82:	e1b6      	b.n	80101f2 <arm_cfft_radix8by2_f32+0x3b8>
  {
    t1[0] = p1[0];
 800fe84:	683b      	ldr	r3, [r7, #0]
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	63bb      	str	r3, [r7, #56]	; 0x38
    t1[1] = p1[1];
 800fe8a:	683b      	ldr	r3, [r7, #0]
 800fe8c:	685b      	ldr	r3, [r3, #4]
 800fe8e:	63fb      	str	r3, [r7, #60]	; 0x3c
    t1[2] = p1[2];
 800fe90:	683b      	ldr	r3, [r7, #0]
 800fe92:	689b      	ldr	r3, [r3, #8]
 800fe94:	643b      	str	r3, [r7, #64]	; 0x40
    t1[3] = p1[3];
 800fe96:	683b      	ldr	r3, [r7, #0]
 800fe98:	68db      	ldr	r3, [r3, #12]
 800fe9a:	647b      	str	r3, [r7, #68]	; 0x44

    t2[0] = p2[0];
 800fe9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	62bb      	str	r3, [r7, #40]	; 0x28
    t2[1] = p2[1];
 800fea2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fea4:	685b      	ldr	r3, [r3, #4]
 800fea6:	62fb      	str	r3, [r7, #44]	; 0x2c
    t2[2] = p2[2];
 800fea8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800feaa:	689b      	ldr	r3, [r3, #8]
 800feac:	633b      	str	r3, [r7, #48]	; 0x30
    t2[3] = p2[3];
 800feae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800feb0:	68db      	ldr	r3, [r3, #12]
 800feb2:	637b      	str	r3, [r7, #52]	; 0x34

    t3[0] = pMid1[0];
 800feb4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	61bb      	str	r3, [r7, #24]
    t3[1] = pMid1[1];
 800feba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800febc:	685b      	ldr	r3, [r3, #4]
 800febe:	61fb      	str	r3, [r7, #28]
    t3[2] = pMid1[2];
 800fec0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fec2:	689b      	ldr	r3, [r3, #8]
 800fec4:	623b      	str	r3, [r7, #32]
    t3[3] = pMid1[3];
 800fec6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fec8:	68db      	ldr	r3, [r3, #12]
 800feca:	627b      	str	r3, [r7, #36]	; 0x24

    t4[0] = pMid2[0];
 800fecc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	60bb      	str	r3, [r7, #8]
    t4[1] = pMid2[1];
 800fed2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fed4:	685b      	ldr	r3, [r3, #4]
 800fed6:	60fb      	str	r3, [r7, #12]
    t4[2] = pMid2[2];
 800fed8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800feda:	689b      	ldr	r3, [r3, #8]
 800fedc:	613b      	str	r3, [r7, #16]
    t4[3] = pMid2[3];
 800fede:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fee0:	68db      	ldr	r3, [r3, #12]
 800fee2:	617b      	str	r3, [r7, #20]

    *p1++ = t1[0] + t2[0];
 800fee4:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800fee8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800feec:	683b      	ldr	r3, [r7, #0]
 800feee:	1d1a      	adds	r2, r3, #4
 800fef0:	603a      	str	r2, [r7, #0]
 800fef2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fef6:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[1] + t2[1];
 800fefa:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800fefe:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800ff02:	683b      	ldr	r3, [r7, #0]
 800ff04:	1d1a      	adds	r2, r3, #4
 800ff06:	603a      	str	r2, [r7, #0]
 800ff08:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ff0c:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[2] + t2[2];
 800ff10:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800ff14:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800ff18:	683b      	ldr	r3, [r7, #0]
 800ff1a:	1d1a      	adds	r2, r3, #4
 800ff1c:	603a      	str	r2, [r7, #0]
 800ff1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ff22:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[3] + t2[3];    /* col 1 */
 800ff26:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800ff2a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800ff2e:	683b      	ldr	r3, [r7, #0]
 800ff30:	1d1a      	adds	r2, r3, #4
 800ff32:	603a      	str	r2, [r7, #0]
 800ff34:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ff38:	edc3 7a00 	vstr	s15, [r3]

    t2[0] = t1[0] - t2[0];
 800ff3c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800ff40:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ff44:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ff48:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    t2[1] = t1[1] - t2[1];
 800ff4c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800ff50:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800ff54:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ff58:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[2] = t1[2] - t2[2];
 800ff5c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800ff60:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800ff64:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ff68:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    t2[3] = t1[3] - t2[3];    /* for col 2 */
 800ff6c:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800ff70:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800ff74:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ff78:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

    *pMid1++ = t3[0] + t4[0];
 800ff7c:	ed97 7a06 	vldr	s14, [r7, #24]
 800ff80:	edd7 7a02 	vldr	s15, [r7, #8]
 800ff84:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ff86:	1d1a      	adds	r2, r3, #4
 800ff88:	67fa      	str	r2, [r7, #124]	; 0x7c
 800ff8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ff8e:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[1] + t4[1];
 800ff92:	ed97 7a07 	vldr	s14, [r7, #28]
 800ff96:	edd7 7a03 	vldr	s15, [r7, #12]
 800ff9a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ff9c:	1d1a      	adds	r2, r3, #4
 800ff9e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800ffa0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ffa4:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[2] + t4[2];
 800ffa8:	ed97 7a08 	vldr	s14, [r7, #32]
 800ffac:	edd7 7a04 	vldr	s15, [r7, #16]
 800ffb0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ffb2:	1d1a      	adds	r2, r3, #4
 800ffb4:	67fa      	str	r2, [r7, #124]	; 0x7c
 800ffb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ffba:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[3] + t4[3]; /* col 1 */
 800ffbe:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800ffc2:	edd7 7a05 	vldr	s15, [r7, #20]
 800ffc6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ffc8:	1d1a      	adds	r2, r3, #4
 800ffca:	67fa      	str	r2, [r7, #124]	; 0x7c
 800ffcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ffd0:	edc3 7a00 	vstr	s15, [r3]

    t4[0] = t4[0] - t3[0];
 800ffd4:	ed97 7a02 	vldr	s14, [r7, #8]
 800ffd8:	edd7 7a06 	vldr	s15, [r7, #24]
 800ffdc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ffe0:	edc7 7a02 	vstr	s15, [r7, #8]
    t4[1] = t4[1] - t3[1];
 800ffe4:	ed97 7a03 	vldr	s14, [r7, #12]
 800ffe8:	edd7 7a07 	vldr	s15, [r7, #28]
 800ffec:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fff0:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[2] = t4[2] - t3[2];
 800fff4:	ed97 7a04 	vldr	s14, [r7, #16]
 800fff8:	edd7 7a08 	vldr	s15, [r7, #32]
 800fffc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010000:	edc7 7a04 	vstr	s15, [r7, #16]
    t4[3] = t4[3] - t3[3];    /* for col 2 */
 8010004:	ed97 7a05 	vldr	s14, [r7, #20]
 8010008:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801000c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010010:	edc7 7a05 	vstr	s15, [r7, #20]

    twR = *tw++;
 8010014:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010016:	1d1a      	adds	r2, r3, #4
 8010018:	673a      	str	r2, [r7, #112]	; 0x70
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	65fb      	str	r3, [r7, #92]	; 0x5c
    twI = *tw++;
 801001e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010020:	1d1a      	adds	r2, r3, #4
 8010022:	673a      	str	r2, [r7, #112]	; 0x70
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	65bb      	str	r3, [r7, #88]	; 0x58

    /* multiply by twiddle factors */
    m0 = t2[0] * twR;
 8010028:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 801002c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8010030:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010034:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t2[1] * twI;
 8010038:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801003c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8010040:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010044:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t2[1] * twR;
 8010048:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801004c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8010050:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010054:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t2[0] * twI;
 8010058:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 801005c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8010060:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010064:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    /* R  =  R  *  Tr - I * Ti */
    *p2++ = m0 + m1;
 8010068:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801006a:	1d1a      	adds	r2, r3, #4
 801006c:	677a      	str	r2, [r7, #116]	; 0x74
 801006e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8010072:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8010076:	ee77 7a27 	vadd.f32	s15, s14, s15
 801007a:	edc3 7a00 	vstr	s15, [r3]
    /* I  =  I  *  Tr + R * Ti */
    *p2++ = m2 - m3;
 801007e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010080:	1d1a      	adds	r2, r3, #4
 8010082:	677a      	str	r2, [r7, #116]	; 0x74
 8010084:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8010088:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 801008c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010090:	edc3 7a00 	vstr	s15, [r3]

    /* use vertical symmetry */
    /*  0.9988 - 0.0491i <==> -0.0491 - 0.9988i */
    m0 = t4[0] * twI;
 8010094:	edd7 7a02 	vldr	s15, [r7, #8]
 8010098:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 801009c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80100a0:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t4[1] * twR;
 80100a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80100a8:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80100ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80100b0:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t4[1] * twI;
 80100b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80100b8:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80100bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80100c0:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t4[0] * twR;
 80100c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80100c8:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80100cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80100d0:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *pMid2++ = m0 - m1;
 80100d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80100d6:	1d1a      	adds	r2, r3, #4
 80100d8:	67ba      	str	r2, [r7, #120]	; 0x78
 80100da:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80100de:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80100e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80100e6:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 80100ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80100ec:	1d1a      	adds	r2, r3, #4
 80100ee:	67ba      	str	r2, [r7, #120]	; 0x78
 80100f0:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80100f4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80100f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80100fc:	edc3 7a00 	vstr	s15, [r3]

    twR = *tw++;
 8010100:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010102:	1d1a      	adds	r2, r3, #4
 8010104:	673a      	str	r2, [r7, #112]	; 0x70
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	65fb      	str	r3, [r7, #92]	; 0x5c
    twI = *tw++;
 801010a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801010c:	1d1a      	adds	r2, r3, #4
 801010e:	673a      	str	r2, [r7, #112]	; 0x70
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	65bb      	str	r3, [r7, #88]	; 0x58

    m0 = t2[2] * twR;
 8010114:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8010118:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 801011c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010120:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t2[3] * twI;
 8010124:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8010128:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 801012c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010130:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t2[3] * twR;
 8010134:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8010138:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 801013c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010140:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t2[2] * twI;
 8010144:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8010148:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 801014c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010150:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *p2++ = m0 + m1;
 8010154:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010156:	1d1a      	adds	r2, r3, #4
 8010158:	677a      	str	r2, [r7, #116]	; 0x74
 801015a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 801015e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8010162:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010166:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 801016a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801016c:	1d1a      	adds	r2, r3, #4
 801016e:	677a      	str	r2, [r7, #116]	; 0x74
 8010170:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8010174:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8010178:	ee77 7a67 	vsub.f32	s15, s14, s15
 801017c:	edc3 7a00 	vstr	s15, [r3]

    m0 = t4[2] * twI;
 8010180:	edd7 7a04 	vldr	s15, [r7, #16]
 8010184:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8010188:	ee67 7a27 	vmul.f32	s15, s14, s15
 801018c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t4[3] * twR;
 8010190:	edd7 7a05 	vldr	s15, [r7, #20]
 8010194:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8010198:	ee67 7a27 	vmul.f32	s15, s14, s15
 801019c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t4[3] * twI;
 80101a0:	edd7 7a05 	vldr	s15, [r7, #20]
 80101a4:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80101a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80101ac:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t4[2] * twR;
 80101b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80101b4:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80101b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80101bc:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *pMid2++ = m0 - m1;
 80101c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80101c2:	1d1a      	adds	r2, r3, #4
 80101c4:	67ba      	str	r2, [r7, #120]	; 0x78
 80101c6:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80101ca:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80101ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80101d2:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 80101d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80101d8:	1d1a      	adds	r2, r3, #4
 80101da:	67ba      	str	r2, [r7, #120]	; 0x78
 80101dc:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80101e0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80101e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80101e8:	edc3 7a00 	vstr	s15, [r3]
  for (l = L >> 2; l > 0; l-- )
 80101ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80101ee:	3b01      	subs	r3, #1
 80101f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80101f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	f47f ae45 	bne.w	800fe84 <arm_cfft_radix8by2_f32+0x4a>
  }

  /* first col */
  arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 2U);
 80101fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80101fc:	b299      	uxth	r1, r3
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	685a      	ldr	r2, [r3, #4]
 8010202:	2302      	movs	r3, #2
 8010204:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8010206:	f000 fef1 	bl	8010fec <arm_radix8_butterfly_f32>

  /* second col */
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
 801020a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801020c:	b299      	uxth	r1, r3
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	685a      	ldr	r2, [r3, #4]
 8010212:	2302      	movs	r3, #2
 8010214:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8010216:	f000 fee9 	bl	8010fec <arm_radix8_butterfly_f32>
}
 801021a:	bf00      	nop
 801021c:	3780      	adds	r7, #128	; 0x80
 801021e:	46bd      	mov	sp, r7
 8010220:	bd80      	pop	{r7, pc}

08010222 <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 8010222:	b580      	push	{r7, lr}
 8010224:	b0ac      	sub	sp, #176	; 0xb0
 8010226:	af00      	add	r7, sp, #0
 8010228:	6078      	str	r0, [r7, #4]
 801022a:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	881b      	ldrh	r3, [r3, #0]
 8010230:	085b      	lsrs	r3, r3, #1
 8010232:	b29b      	uxth	r3, r3
 8010234:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 8010238:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801023c:	009b      	lsls	r3, r3, #2
 801023e:	683a      	ldr	r2, [r7, #0]
 8010240:	4413      	add	r3, r2
 8010242:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float32_t * p3 = p2 + L;
 8010246:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801024a:	009b      	lsls	r3, r3, #2
 801024c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8010250:	4413      	add	r3, r2
 8010252:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float32_t * p4 = p3 + L;
 8010256:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801025a:	009b      	lsls	r3, r3, #2
 801025c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8010260:	4413      	add	r3, r2
 8010262:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         /* points to real values by default */
 8010266:	683b      	ldr	r3, [r7, #0]
 8010268:	67fb      	str	r3, [r7, #124]	; 0x7c
    pCol2 = p2;
 801026a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801026e:	67bb      	str	r3, [r7, #120]	; 0x78
    pCol3 = p3;
 8010270:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010274:	677b      	str	r3, [r7, #116]	; 0x74
    pCol4 = p4;
 8010276:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801027a:	673b      	str	r3, [r7, #112]	; 0x70
    pEnd1 = p2 - 1;     /* points to imaginary values by default */
 801027c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010280:	3b04      	subs	r3, #4
 8010282:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    pEnd2 = p3 - 1;
 8010286:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801028a:	3b04      	subs	r3, #4
 801028c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    pEnd3 = p4 - 1;
 8010290:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010294:	3b04      	subs	r3, #4
 8010296:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    pEnd4 = pEnd3 + L;
 801029a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801029e:	009b      	lsls	r3, r3, #2
 80102a0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80102a4:	4413      	add	r3, r2
 80102a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	685b      	ldr	r3, [r3, #4]
 80102ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80102b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80102b6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80102ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80102be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    L >>= 1;
 80102c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80102c6:	085b      	lsrs	r3, r3, #1
 80102c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    /* do four dot Fourier transform */

    twMod2 = 2;
 80102cc:	2302      	movs	r3, #2
 80102ce:	66fb      	str	r3, [r7, #108]	; 0x6c
    twMod3 = 4;
 80102d0:	2304      	movs	r3, #4
 80102d2:	66bb      	str	r3, [r7, #104]	; 0x68
    twMod4 = 6;
 80102d4:	2306      	movs	r3, #6
 80102d6:	667b      	str	r3, [r7, #100]	; 0x64

    /* TOP */
    p1ap3_0 = p1[0] + p3[0];
 80102d8:	683b      	ldr	r3, [r7, #0]
 80102da:	ed93 7a00 	vldr	s14, [r3]
 80102de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80102e2:	edd3 7a00 	vldr	s15, [r3]
 80102e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80102ea:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 80102ee:	683b      	ldr	r3, [r7, #0]
 80102f0:	ed93 7a00 	vldr	s14, [r3]
 80102f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80102f8:	edd3 7a00 	vldr	s15, [r3]
 80102fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010300:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8010304:	683b      	ldr	r3, [r7, #0]
 8010306:	3304      	adds	r3, #4
 8010308:	ed93 7a00 	vldr	s14, [r3]
 801030c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010310:	3304      	adds	r3, #4
 8010312:	edd3 7a00 	vldr	s15, [r3]
 8010316:	ee77 7a27 	vadd.f32	s15, s14, s15
 801031a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 801031e:	683b      	ldr	r3, [r7, #0]
 8010320:	3304      	adds	r3, #4
 8010322:	ed93 7a00 	vldr	s14, [r3]
 8010326:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801032a:	3304      	adds	r3, #4
 801032c:	edd3 7a00 	vldr	s15, [r3]
 8010330:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010334:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8010338:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801033c:	3304      	adds	r3, #4
 801033e:	ed93 7a00 	vldr	s14, [r3]
 8010342:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8010346:	ee37 7a27 	vadd.f32	s14, s14, s15
 801034a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801034e:	3304      	adds	r3, #4
 8010350:	edd3 7a00 	vldr	s15, [r3]
 8010354:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010358:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 801035c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010360:	edd3 7a00 	vldr	s15, [r3]
 8010364:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8010368:	ee37 7a67 	vsub.f32	s14, s14, s15
 801036c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010370:	edd3 7a00 	vldr	s15, [r3]
 8010374:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010378:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 801037c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010380:	edd3 7a00 	vldr	s15, [r3]
 8010384:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8010388:	ee37 7a67 	vsub.f32	s14, s14, s15
 801038c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010390:	edd3 7a00 	vldr	s15, [r3]
 8010394:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010398:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 801039c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80103a0:	3304      	adds	r3, #4
 80103a2:	edd3 7a00 	vldr	s15, [r3]
 80103a6:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80103aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80103ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80103b2:	3304      	adds	r3, #4
 80103b4:	edd3 7a00 	vldr	s15, [r3]
 80103b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80103bc:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 80103c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80103c4:	3304      	adds	r3, #4
 80103c6:	edd3 7a00 	vldr	s15, [r3]
 80103ca:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80103ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 80103d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80103d6:	3304      	adds	r3, #4
 80103d8:	edd3 7a00 	vldr	s15, [r3]
 80103dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80103e0:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 80103e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80103e8:	ed93 7a00 	vldr	s14, [r3]
 80103ec:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80103f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80103f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80103f8:	edd3 7a00 	vldr	s15, [r3]
 80103fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010400:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8010404:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010408:	ed93 7a00 	vldr	s14, [r3]
 801040c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8010410:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010414:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010418:	edd3 7a00 	vldr	s15, [r3]
 801041c:	683b      	ldr	r3, [r7, #0]
 801041e:	1d1a      	adds	r2, r3, #4
 8010420:	603a      	str	r2, [r7, #0]
 8010422:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010426:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 801042a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801042e:	3304      	adds	r3, #4
 8010430:	ed93 7a00 	vldr	s14, [r3]
 8010434:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8010438:	ee37 7a27 	vadd.f32	s14, s14, s15
 801043c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010440:	3304      	adds	r3, #4
 8010442:	edd3 7a00 	vldr	s15, [r3]
 8010446:	683b      	ldr	r3, [r7, #0]
 8010448:	1d1a      	adds	r2, r3, #4
 801044a:	603a      	str	r2, [r7, #0]
 801044c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010450:	edc3 7a00 	vstr	s15, [r3]

    /* Twiddle factors are ones */
    *p2++ = t2[0];
 8010454:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010458:	1d1a      	adds	r2, r3, #4
 801045a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 801045e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010460:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 8010462:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010466:	1d1a      	adds	r2, r3, #4
 8010468:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 801046c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801046e:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 8010470:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010474:	1d1a      	adds	r2, r3, #4
 8010476:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 801047a:	69fa      	ldr	r2, [r7, #28]
 801047c:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 801047e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010482:	1d1a      	adds	r2, r3, #4
 8010484:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8010488:	6a3a      	ldr	r2, [r7, #32]
 801048a:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 801048c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010490:	1d1a      	adds	r2, r3, #4
 8010492:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8010496:	68fa      	ldr	r2, [r7, #12]
 8010498:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 801049a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801049e:	1d1a      	adds	r2, r3, #4
 80104a0:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80104a4:	693a      	ldr	r2, [r7, #16]
 80104a6:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 80104a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80104aa:	009b      	lsls	r3, r3, #2
 80104ac:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80104b0:	4413      	add	r3, r2
 80104b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    tw3 += twMod3;
 80104b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80104b8:	009b      	lsls	r3, r3, #2
 80104ba:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80104be:	4413      	add	r3, r2
 80104c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    tw4 += twMod4;
 80104c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80104c6:	009b      	lsls	r3, r3, #2
 80104c8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80104cc:	4413      	add	r3, r2
 80104ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    for (l = (L - 2) >> 1; l > 0; l-- )
 80104d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80104d6:	3b02      	subs	r3, #2
 80104d8:	085b      	lsrs	r3, r3, #1
 80104da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80104de:	e31a      	b.n	8010b16 <arm_cfft_radix8by4_f32+0x8f4>
    {
      /* TOP */
      p1ap3_0 = p1[0] + p3[0];
 80104e0:	683b      	ldr	r3, [r7, #0]
 80104e2:	ed93 7a00 	vldr	s14, [r3]
 80104e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80104ea:	edd3 7a00 	vldr	s15, [r3]
 80104ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80104f2:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
      p1sp3_0 = p1[0] - p3[0];
 80104f6:	683b      	ldr	r3, [r7, #0]
 80104f8:	ed93 7a00 	vldr	s14, [r3]
 80104fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010500:	edd3 7a00 	vldr	s15, [r3]
 8010504:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010508:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
      p1ap3_1 = p1[1] + p3[1];
 801050c:	683b      	ldr	r3, [r7, #0]
 801050e:	3304      	adds	r3, #4
 8010510:	ed93 7a00 	vldr	s14, [r3]
 8010514:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010518:	3304      	adds	r3, #4
 801051a:	edd3 7a00 	vldr	s15, [r3]
 801051e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010522:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
      p1sp3_1 = p1[1] - p3[1];
 8010526:	683b      	ldr	r3, [r7, #0]
 8010528:	3304      	adds	r3, #4
 801052a:	ed93 7a00 	vldr	s14, [r3]
 801052e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010532:	3304      	adds	r3, #4
 8010534:	edd3 7a00 	vldr	s15, [r3]
 8010538:	ee77 7a67 	vsub.f32	s15, s14, s15
 801053c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
      /* col 2 */
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 8010540:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010544:	3304      	adds	r3, #4
 8010546:	ed93 7a00 	vldr	s14, [r3]
 801054a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 801054e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010552:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010556:	3304      	adds	r3, #4
 8010558:	edd3 7a00 	vldr	s15, [r3]
 801055c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010560:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 8010564:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010568:	edd3 7a00 	vldr	s15, [r3]
 801056c:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8010570:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010574:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010578:	edd3 7a00 	vldr	s15, [r3]
 801057c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010580:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
      /* col 3 */
      t3[0] = p1ap3_0 - p2[0] - p4[0];
 8010584:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010588:	edd3 7a00 	vldr	s15, [r3]
 801058c:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8010590:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010594:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010598:	edd3 7a00 	vldr	s15, [r3]
 801059c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80105a0:	edc7 7a07 	vstr	s15, [r7, #28]
      t3[1] = p1ap3_1 - p2[1] - p4[1];
 80105a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80105a8:	3304      	adds	r3, #4
 80105aa:	edd3 7a00 	vldr	s15, [r3]
 80105ae:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80105b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80105b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80105ba:	3304      	adds	r3, #4
 80105bc:	edd3 7a00 	vldr	s15, [r3]
 80105c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80105c4:	edc7 7a08 	vstr	s15, [r7, #32]
      /* col 4 */
      t4[0] = p1sp3_0 - p2[1] + p4[1];
 80105c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80105cc:	3304      	adds	r3, #4
 80105ce:	edd3 7a00 	vldr	s15, [r3]
 80105d2:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80105d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80105da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80105de:	3304      	adds	r3, #4
 80105e0:	edd3 7a00 	vldr	s15, [r3]
 80105e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80105e8:	edc7 7a03 	vstr	s15, [r7, #12]
      t4[1] = p1sp3_1 + p2[0] - p4[0];
 80105ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80105f0:	ed93 7a00 	vldr	s14, [r3]
 80105f4:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80105f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80105fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010600:	edd3 7a00 	vldr	s15, [r3]
 8010604:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010608:	edc7 7a04 	vstr	s15, [r7, #16]
      /* col 1 - top */
      *p1++ = p1ap3_0 + p2[0] + p4[0];
 801060c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010610:	ed93 7a00 	vldr	s14, [r3]
 8010614:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8010618:	ee37 7a27 	vadd.f32	s14, s14, s15
 801061c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010620:	edd3 7a00 	vldr	s15, [r3]
 8010624:	683b      	ldr	r3, [r7, #0]
 8010626:	1d1a      	adds	r2, r3, #4
 8010628:	603a      	str	r2, [r7, #0]
 801062a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801062e:	edc3 7a00 	vstr	s15, [r3]
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 8010632:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010636:	3304      	adds	r3, #4
 8010638:	ed93 7a00 	vldr	s14, [r3]
 801063c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8010640:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010644:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010648:	3304      	adds	r3, #4
 801064a:	edd3 7a00 	vldr	s15, [r3]
 801064e:	683b      	ldr	r3, [r7, #0]
 8010650:	1d1a      	adds	r2, r3, #4
 8010652:	603a      	str	r2, [r7, #0]
 8010654:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010658:	edc3 7a00 	vstr	s15, [r3]

      /* BOTTOM */
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 801065c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010660:	3b04      	subs	r3, #4
 8010662:	ed93 7a00 	vldr	s14, [r3]
 8010666:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801066a:	3b04      	subs	r3, #4
 801066c:	edd3 7a00 	vldr	s15, [r3]
 8010670:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010674:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
      p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 8010678:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801067c:	3b04      	subs	r3, #4
 801067e:	ed93 7a00 	vldr	s14, [r3]
 8010682:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010686:	3b04      	subs	r3, #4
 8010688:	edd3 7a00 	vldr	s15, [r3]
 801068c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010690:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
 8010694:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010698:	ed93 7a00 	vldr	s14, [r3]
 801069c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80106a0:	edd3 7a00 	vldr	s15, [r3]
 80106a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80106a8:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
      p1sp3_0 = pEnd1[ 0] - pEnd3[0];
 80106ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80106b0:	ed93 7a00 	vldr	s14, [r3]
 80106b4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80106b8:	edd3 7a00 	vldr	s15, [r3]
 80106bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80106c0:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
      /* col 2 */
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 80106c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80106c8:	ed93 7a00 	vldr	s14, [r3]
 80106cc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80106d0:	edd3 7a00 	vldr	s15, [r3]
 80106d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80106d8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80106dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80106e0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 80106e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80106e8:	ed93 7a00 	vldr	s14, [r3]
 80106ec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80106f0:	edd3 7a00 	vldr	s15, [r3]
 80106f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80106f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80106fc:	3b04      	subs	r3, #4
 80106fe:	edd3 7a00 	vldr	s15, [r3]
 8010702:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010706:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801070a:	3b04      	subs	r3, #4
 801070c:	edd3 7a00 	vldr	s15, [r3]
 8010710:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010714:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
      /* col 3 */
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 8010718:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801071c:	3b04      	subs	r3, #4
 801071e:	edd3 7a00 	vldr	s15, [r3]
 8010722:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8010726:	ee37 7a67 	vsub.f32	s14, s14, s15
 801072a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801072e:	3b04      	subs	r3, #4
 8010730:	edd3 7a00 	vldr	s15, [r3]
 8010734:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010738:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
 801073c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010740:	edd3 7a00 	vldr	s15, [r3]
 8010744:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8010748:	ee37 7a67 	vsub.f32	s14, s14, s15
 801074c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010750:	edd3 7a00 	vldr	s15, [r3]
 8010754:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010758:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
      /* col 4 */
      t4[2] = pEnd2[ 0] - pEnd4[ 0] - p1sp3_1;
 801075c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010760:	ed93 7a00 	vldr	s14, [r3]
 8010764:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010768:	edd3 7a00 	vldr	s15, [r3]
 801076c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010770:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8010774:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010778:	edc7 7a05 	vstr	s15, [r7, #20]
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 801077c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010780:	3b04      	subs	r3, #4
 8010782:	ed93 7a00 	vldr	s14, [r3]
 8010786:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801078a:	3b04      	subs	r3, #4
 801078c:	edd3 7a00 	vldr	s15, [r3]
 8010790:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010794:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8010798:	ee77 7a67 	vsub.f32	s15, s14, s15
 801079c:	edc7 7a06 	vstr	s15, [r7, #24]
      /* col 1 - Bottom */
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
 80107a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80107a4:	ed93 7a00 	vldr	s14, [r3]
 80107a8:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80107ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80107b0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80107b4:	edd3 7a00 	vldr	s15, [r3]
 80107b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80107bc:	1f1a      	subs	r2, r3, #4
 80107be:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80107c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80107c6:	edc3 7a00 	vstr	s15, [r3]
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 80107ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80107ce:	3b04      	subs	r3, #4
 80107d0:	ed93 7a00 	vldr	s14, [r3]
 80107d4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80107d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80107dc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80107e0:	3b04      	subs	r3, #4
 80107e2:	edd3 7a00 	vldr	s15, [r3]
 80107e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80107ea:	1f1a      	subs	r2, r3, #4
 80107ec:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80107f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80107f4:	edc3 7a00 	vstr	s15, [r3]

      /* COL 2 */
      /* read twiddle factors */
      twR = *tw2++;
 80107f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80107fc:	1d1a      	adds	r2, r3, #4
 80107fe:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	653b      	str	r3, [r7, #80]	; 0x50
      twI = *tw2++;
 8010806:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801080a:	1d1a      	adds	r2, r3, #4
 801080c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	64fb      	str	r3, [r7, #76]	; 0x4c
      /* multiply by twiddle factors */
      /*  let    Z1 = a + i(b),   Z2 = c + i(d) */
      /*   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d) */

      /* Top */
      m0 = t2[0] * twR;
 8010814:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8010818:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 801081c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010820:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t2[1] * twI;
 8010824:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8010828:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 801082c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010830:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t2[1] * twR;
 8010834:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8010838:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 801083c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010840:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t2[0] * twI;
 8010844:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8010848:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 801084c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010850:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p2++ = m0 + m1;
 8010854:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010858:	1d1a      	adds	r2, r3, #4
 801085a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 801085e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8010862:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8010866:	ee77 7a27 	vadd.f32	s15, s14, s15
 801086a:	edc3 7a00 	vstr	s15, [r3]
      *p2++ = m2 - m3;
 801086e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010872:	1d1a      	adds	r2, r3, #4
 8010874:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8010878:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 801087c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8010880:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010884:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 2 */
      /* 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i */
      /* Bottom */
      m0 = t2[3] * twI;
 8010888:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801088c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8010890:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010894:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t2[2] * twR;
 8010898:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801089c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80108a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80108a4:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t2[2] * twI;
 80108a8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80108ac:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80108b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80108b4:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t2[3] * twR;
 80108b8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80108bc:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80108c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80108c4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd2-- = m0 - m1;
 80108c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80108cc:	1f1a      	subs	r2, r3, #4
 80108ce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80108d2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80108d6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80108da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80108de:	edc3 7a00 	vstr	s15, [r3]
      *pEnd2-- = m2 + m3;
 80108e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80108e6:	1f1a      	subs	r2, r3, #4
 80108e8:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80108ec:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80108f0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80108f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80108f8:	edc3 7a00 	vstr	s15, [r3]

      /* COL 3 */
      twR = tw3[0];
 80108fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	653b      	str	r3, [r7, #80]	; 0x50
      twI = tw3[1];
 8010904:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010908:	685b      	ldr	r3, [r3, #4]
 801090a:	64fb      	str	r3, [r7, #76]	; 0x4c
      tw3 += twMod3;
 801090c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801090e:	009b      	lsls	r3, r3, #2
 8010910:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8010914:	4413      	add	r3, r2
 8010916:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
      /* Top */
      m0 = t3[0] * twR;
 801091a:	edd7 7a07 	vldr	s15, [r7, #28]
 801091e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8010922:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010926:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t3[1] * twI;
 801092a:	edd7 7a08 	vldr	s15, [r7, #32]
 801092e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8010932:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010936:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t3[1] * twR;
 801093a:	edd7 7a08 	vldr	s15, [r7, #32]
 801093e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8010942:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010946:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t3[0] * twI;
 801094a:	edd7 7a07 	vldr	s15, [r7, #28]
 801094e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8010952:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010956:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p3++ = m0 + m1;
 801095a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801095e:	1d1a      	adds	r2, r3, #4
 8010960:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8010964:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8010968:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 801096c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010970:	edc3 7a00 	vstr	s15, [r3]
      *p3++ = m2 - m3;
 8010974:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010978:	1d1a      	adds	r2, r3, #4
 801097a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 801097e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8010982:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8010986:	ee77 7a67 	vsub.f32	s15, s14, s15
 801098a:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 3 */
      /* 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i */
      /* Bottom */
      m0 = -t3[3] * twR;
 801098e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8010992:	eef1 7a67 	vneg.f32	s15, s15
 8010996:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 801099a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801099e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 =  t3[2] * twI;
 80109a2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80109a6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80109aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80109ae:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 =  t3[2] * twR;
 80109b2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80109b6:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80109ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80109be:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 =  t3[3] * twI;
 80109c2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80109c6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80109ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80109ce:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd3-- = m0 - m1;
 80109d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80109d6:	1f1a      	subs	r2, r3, #4
 80109d8:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80109dc:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80109e0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80109e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80109e8:	edc3 7a00 	vstr	s15, [r3]
      *pEnd3-- = m3 - m2;
 80109ec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80109f0:	1f1a      	subs	r2, r3, #4
 80109f2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80109f6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80109fa:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80109fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010a02:	edc3 7a00 	vstr	s15, [r3]

      /* COL 4 */
      twR = tw4[0];
 8010a06:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	653b      	str	r3, [r7, #80]	; 0x50
      twI = tw4[1];
 8010a0e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010a12:	685b      	ldr	r3, [r3, #4]
 8010a14:	64fb      	str	r3, [r7, #76]	; 0x4c
      tw4 += twMod4;
 8010a16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010a18:	009b      	lsls	r3, r3, #2
 8010a1a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010a1e:	4413      	add	r3, r2
 8010a20:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      /* Top */
      m0 = t4[0] * twR;
 8010a24:	edd7 7a03 	vldr	s15, [r7, #12]
 8010a28:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8010a2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010a30:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t4[1] * twI;
 8010a34:	edd7 7a04 	vldr	s15, [r7, #16]
 8010a38:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8010a3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010a40:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t4[1] * twR;
 8010a44:	edd7 7a04 	vldr	s15, [r7, #16]
 8010a48:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8010a4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010a50:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t4[0] * twI;
 8010a54:	edd7 7a03 	vldr	s15, [r7, #12]
 8010a58:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8010a5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010a60:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p4++ = m0 + m1;
 8010a64:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010a68:	1d1a      	adds	r2, r3, #4
 8010a6a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8010a6e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8010a72:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8010a76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010a7a:	edc3 7a00 	vstr	s15, [r3]
      *p4++ = m2 - m3;
 8010a7e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010a82:	1d1a      	adds	r2, r3, #4
 8010a84:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8010a88:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8010a8c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8010a90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010a94:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 4 */
      /* 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i */
      /* Bottom */
      m0 = t4[3] * twI;
 8010a98:	edd7 7a06 	vldr	s15, [r7, #24]
 8010a9c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8010aa0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010aa4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t4[2] * twR;
 8010aa8:	edd7 7a05 	vldr	s15, [r7, #20]
 8010aac:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8010ab0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010ab4:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t4[2] * twI;
 8010ab8:	edd7 7a05 	vldr	s15, [r7, #20]
 8010abc:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8010ac0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010ac4:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t4[3] * twR;
 8010ac8:	edd7 7a06 	vldr	s15, [r7, #24]
 8010acc:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8010ad0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010ad4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd4-- = m0 - m1;
 8010ad8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010adc:	1f1a      	subs	r2, r3, #4
 8010ade:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8010ae2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8010ae6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8010aea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010aee:	edc3 7a00 	vstr	s15, [r3]
      *pEnd4-- = m2 + m3;
 8010af2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010af6:	1f1a      	subs	r2, r3, #4
 8010af8:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8010afc:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8010b00:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8010b04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010b08:	edc3 7a00 	vstr	s15, [r3]
    for (l = (L - 2) >> 1; l > 0; l-- )
 8010b0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010b10:	3b01      	subs	r3, #1
 8010b12:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010b16:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	f47f ace0 	bne.w	80104e0 <arm_cfft_radix8by4_f32+0x2be>
    }

    /* MIDDLE */
    /* Twiddle factors are */
    /*  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i */
    p1ap3_0 = p1[0] + p3[0];
 8010b20:	683b      	ldr	r3, [r7, #0]
 8010b22:	ed93 7a00 	vldr	s14, [r3]
 8010b26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010b2a:	edd3 7a00 	vldr	s15, [r3]
 8010b2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010b32:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 8010b36:	683b      	ldr	r3, [r7, #0]
 8010b38:	ed93 7a00 	vldr	s14, [r3]
 8010b3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010b40:	edd3 7a00 	vldr	s15, [r3]
 8010b44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010b48:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8010b4c:	683b      	ldr	r3, [r7, #0]
 8010b4e:	3304      	adds	r3, #4
 8010b50:	ed93 7a00 	vldr	s14, [r3]
 8010b54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010b58:	3304      	adds	r3, #4
 8010b5a:	edd3 7a00 	vldr	s15, [r3]
 8010b5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010b62:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 8010b66:	683b      	ldr	r3, [r7, #0]
 8010b68:	3304      	adds	r3, #4
 8010b6a:	ed93 7a00 	vldr	s14, [r3]
 8010b6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010b72:	3304      	adds	r3, #4
 8010b74:	edd3 7a00 	vldr	s15, [r3]
 8010b78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010b7c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8010b80:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010b84:	3304      	adds	r3, #4
 8010b86:	ed93 7a00 	vldr	s14, [r3]
 8010b8a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8010b8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010b92:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010b96:	3304      	adds	r3, #4
 8010b98:	edd3 7a00 	vldr	s15, [r3]
 8010b9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010ba0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8010ba4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010ba8:	edd3 7a00 	vldr	s15, [r3]
 8010bac:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8010bb0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010bb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010bb8:	edd3 7a00 	vldr	s15, [r3]
 8010bbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010bc0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8010bc4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010bc8:	edd3 7a00 	vldr	s15, [r3]
 8010bcc:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8010bd0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010bd4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010bd8:	edd3 7a00 	vldr	s15, [r3]
 8010bdc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010be0:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8010be4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010be8:	3304      	adds	r3, #4
 8010bea:	edd3 7a00 	vldr	s15, [r3]
 8010bee:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8010bf2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010bf6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010bfa:	3304      	adds	r3, #4
 8010bfc:	edd3 7a00 	vldr	s15, [r3]
 8010c00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010c04:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8010c08:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010c0c:	3304      	adds	r3, #4
 8010c0e:	edd3 7a00 	vldr	s15, [r3]
 8010c12:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8010c16:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010c1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010c1e:	3304      	adds	r3, #4
 8010c20:	edd3 7a00 	vldr	s15, [r3]
 8010c24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010c28:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8010c2c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010c30:	ed93 7a00 	vldr	s14, [r3]
 8010c34:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8010c38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010c3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010c40:	edd3 7a00 	vldr	s15, [r3]
 8010c44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010c48:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 - Top */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8010c4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010c50:	ed93 7a00 	vldr	s14, [r3]
 8010c54:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8010c58:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010c5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010c60:	edd3 7a00 	vldr	s15, [r3]
 8010c64:	683b      	ldr	r3, [r7, #0]
 8010c66:	1d1a      	adds	r2, r3, #4
 8010c68:	603a      	str	r2, [r7, #0]
 8010c6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010c6e:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8010c72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010c76:	3304      	adds	r3, #4
 8010c78:	ed93 7a00 	vldr	s14, [r3]
 8010c7c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8010c80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010c84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010c88:	3304      	adds	r3, #4
 8010c8a:	edd3 7a00 	vldr	s15, [r3]
 8010c8e:	683b      	ldr	r3, [r7, #0]
 8010c90:	1d1a      	adds	r2, r3, #4
 8010c92:	603a      	str	r2, [r7, #0]
 8010c94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010c98:	edc3 7a00 	vstr	s15, [r3]

    /* COL 2 */
    twR = tw2[0];
 8010c9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010ca0:	681b      	ldr	r3, [r3, #0]
 8010ca2:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw2[1];
 8010ca4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010ca8:	685b      	ldr	r3, [r3, #4]
 8010caa:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t2[0] * twR;
 8010cac:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8010cb0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8010cb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010cb8:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t2[1] * twI;
 8010cbc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8010cc0:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8010cc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010cc8:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t2[1] * twR;
 8010ccc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8010cd0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8010cd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010cd8:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t2[0] * twI;
 8010cdc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8010ce0:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8010ce4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010ce8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p2++ = m0 + m1;
 8010cec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010cf0:	1d1a      	adds	r2, r3, #4
 8010cf2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8010cf6:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8010cfa:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8010cfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010d02:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 8010d06:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010d0a:	1d1a      	adds	r2, r3, #4
 8010d0c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8010d10:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8010d14:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8010d18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010d1c:	edc3 7a00 	vstr	s15, [r3]
    /* COL 3 */
    twR = tw3[0];
 8010d20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010d24:	681b      	ldr	r3, [r3, #0]
 8010d26:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw3[1];
 8010d28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010d2c:	685b      	ldr	r3, [r3, #4]
 8010d2e:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t3[0] * twR;
 8010d30:	edd7 7a07 	vldr	s15, [r7, #28]
 8010d34:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8010d38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010d3c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t3[1] * twI;
 8010d40:	edd7 7a08 	vldr	s15, [r7, #32]
 8010d44:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8010d48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010d4c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t3[1] * twR;
 8010d50:	edd7 7a08 	vldr	s15, [r7, #32]
 8010d54:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8010d58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010d5c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t3[0] * twI;
 8010d60:	edd7 7a07 	vldr	s15, [r7, #28]
 8010d64:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8010d68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010d6c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p3++ = m0 + m1;
 8010d70:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010d74:	1d1a      	adds	r2, r3, #4
 8010d76:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8010d7a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8010d7e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8010d82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010d86:	edc3 7a00 	vstr	s15, [r3]
    *p3++ = m2 - m3;
 8010d8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010d8e:	1d1a      	adds	r2, r3, #4
 8010d90:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8010d94:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8010d98:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8010d9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010da0:	edc3 7a00 	vstr	s15, [r3]
    /* COL 4 */
    twR = tw4[0];
 8010da4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010da8:	681b      	ldr	r3, [r3, #0]
 8010daa:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw4[1];
 8010dac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010db0:	685b      	ldr	r3, [r3, #4]
 8010db2:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t4[0] * twR;
 8010db4:	edd7 7a03 	vldr	s15, [r7, #12]
 8010db8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8010dbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010dc0:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t4[1] * twI;
 8010dc4:	edd7 7a04 	vldr	s15, [r7, #16]
 8010dc8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8010dcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010dd0:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t4[1] * twR;
 8010dd4:	edd7 7a04 	vldr	s15, [r7, #16]
 8010dd8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8010ddc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010de0:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t4[0] * twI;
 8010de4:	edd7 7a03 	vldr	s15, [r7, #12]
 8010de8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8010dec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010df0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p4++ = m0 + m1;
 8010df4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010df8:	1d1a      	adds	r2, r3, #4
 8010dfa:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8010dfe:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8010e02:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8010e06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010e0a:	edc3 7a00 	vstr	s15, [r3]
    *p4++ = m2 - m3;
 8010e0e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010e12:	1d1a      	adds	r2, r3, #4
 8010e14:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8010e18:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8010e1c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8010e20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010e24:	edc3 7a00 	vstr	s15, [r3]

    /* first col */
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 8010e28:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010e2c:	b299      	uxth	r1, r3
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	685a      	ldr	r2, [r3, #4]
 8010e32:	2304      	movs	r3, #4
 8010e34:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8010e36:	f000 f8d9 	bl	8010fec <arm_radix8_butterfly_f32>

    /* second col */
    arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 4U);
 8010e3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010e3e:	b299      	uxth	r1, r3
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	685a      	ldr	r2, [r3, #4]
 8010e44:	2304      	movs	r3, #4
 8010e46:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8010e48:	f000 f8d0 	bl	8010fec <arm_radix8_butterfly_f32>

    /* third col */
    arm_radix8_butterfly_f32 (pCol3, L, (float32_t *) S->pTwiddle, 4U);
 8010e4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010e50:	b299      	uxth	r1, r3
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	685a      	ldr	r2, [r3, #4]
 8010e56:	2304      	movs	r3, #4
 8010e58:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8010e5a:	f000 f8c7 	bl	8010fec <arm_radix8_butterfly_f32>

    /* fourth col */
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
 8010e5e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010e62:	b299      	uxth	r1, r3
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	685a      	ldr	r2, [r3, #4]
 8010e68:	2304      	movs	r3, #4
 8010e6a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8010e6c:	f000 f8be 	bl	8010fec <arm_radix8_butterfly_f32>
}
 8010e70:	bf00      	nop
 8010e72:	37b0      	adds	r7, #176	; 0xb0
 8010e74:	46bd      	mov	sp, r7
 8010e76:	bd80      	pop	{r7, pc}

08010e78 <arm_cfft_f32>:
void arm_cfft_f32(
  const arm_cfft_instance_f32 * S,
        float32_t * p1,
        uint8_t ifftFlag,
        uint8_t bitReverseFlag)
{
 8010e78:	b580      	push	{r7, lr}
 8010e7a:	b088      	sub	sp, #32
 8010e7c:	af00      	add	r7, sp, #0
 8010e7e:	60f8      	str	r0, [r7, #12]
 8010e80:	60b9      	str	r1, [r7, #8]
 8010e82:	4611      	mov	r1, r2
 8010e84:	461a      	mov	r2, r3
 8010e86:	460b      	mov	r3, r1
 8010e88:	71fb      	strb	r3, [r7, #7]
 8010e8a:	4613      	mov	r3, r2
 8010e8c:	71bb      	strb	r3, [r7, #6]
  uint32_t  L = S->fftLen, l;
 8010e8e:	68fb      	ldr	r3, [r7, #12]
 8010e90:	881b      	ldrh	r3, [r3, #0]
 8010e92:	617b      	str	r3, [r7, #20]
  float32_t invL, * pSrc;

  if (ifftFlag == 1U)
 8010e94:	79fb      	ldrb	r3, [r7, #7]
 8010e96:	2b01      	cmp	r3, #1
 8010e98:	d117      	bne.n	8010eca <arm_cfft_f32+0x52>
  {
    /* Conjugate input data */
    pSrc = p1 + 1;
 8010e9a:	68bb      	ldr	r3, [r7, #8]
 8010e9c:	3304      	adds	r3, #4
 8010e9e:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 8010ea0:	2300      	movs	r3, #0
 8010ea2:	61fb      	str	r3, [r7, #28]
 8010ea4:	e00d      	b.n	8010ec2 <arm_cfft_f32+0x4a>
    {
      *pSrc = -*pSrc;
 8010ea6:	69bb      	ldr	r3, [r7, #24]
 8010ea8:	edd3 7a00 	vldr	s15, [r3]
 8010eac:	eef1 7a67 	vneg.f32	s15, s15
 8010eb0:	69bb      	ldr	r3, [r7, #24]
 8010eb2:	edc3 7a00 	vstr	s15, [r3]
      pSrc += 2;
 8010eb6:	69bb      	ldr	r3, [r7, #24]
 8010eb8:	3308      	adds	r3, #8
 8010eba:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 8010ebc:	69fb      	ldr	r3, [r7, #28]
 8010ebe:	3301      	adds	r3, #1
 8010ec0:	61fb      	str	r3, [r7, #28]
 8010ec2:	69fa      	ldr	r2, [r7, #28]
 8010ec4:	697b      	ldr	r3, [r7, #20]
 8010ec6:	429a      	cmp	r2, r3
 8010ec8:	d3ed      	bcc.n	8010ea6 <arm_cfft_f32+0x2e>
    }
  }

  switch (L)
 8010eca:	697b      	ldr	r3, [r7, #20]
 8010ecc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010ed0:	d040      	beq.n	8010f54 <arm_cfft_f32+0xdc>
 8010ed2:	697b      	ldr	r3, [r7, #20]
 8010ed4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010ed8:	d845      	bhi.n	8010f66 <arm_cfft_f32+0xee>
 8010eda:	697b      	ldr	r3, [r7, #20]
 8010edc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010ee0:	d033      	beq.n	8010f4a <arm_cfft_f32+0xd2>
 8010ee2:	697b      	ldr	r3, [r7, #20]
 8010ee4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010ee8:	d83d      	bhi.n	8010f66 <arm_cfft_f32+0xee>
 8010eea:	697b      	ldr	r3, [r7, #20]
 8010eec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010ef0:	d026      	beq.n	8010f40 <arm_cfft_f32+0xc8>
 8010ef2:	697b      	ldr	r3, [r7, #20]
 8010ef4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010ef8:	d835      	bhi.n	8010f66 <arm_cfft_f32+0xee>
 8010efa:	697b      	ldr	r3, [r7, #20]
 8010efc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010f00:	d028      	beq.n	8010f54 <arm_cfft_f32+0xdc>
 8010f02:	697b      	ldr	r3, [r7, #20]
 8010f04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010f08:	d82d      	bhi.n	8010f66 <arm_cfft_f32+0xee>
 8010f0a:	697b      	ldr	r3, [r7, #20]
 8010f0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010f10:	d01b      	beq.n	8010f4a <arm_cfft_f32+0xd2>
 8010f12:	697b      	ldr	r3, [r7, #20]
 8010f14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010f18:	d825      	bhi.n	8010f66 <arm_cfft_f32+0xee>
 8010f1a:	697b      	ldr	r3, [r7, #20]
 8010f1c:	2b80      	cmp	r3, #128	; 0x80
 8010f1e:	d00f      	beq.n	8010f40 <arm_cfft_f32+0xc8>
 8010f20:	697b      	ldr	r3, [r7, #20]
 8010f22:	2b80      	cmp	r3, #128	; 0x80
 8010f24:	d81f      	bhi.n	8010f66 <arm_cfft_f32+0xee>
 8010f26:	697b      	ldr	r3, [r7, #20]
 8010f28:	2b40      	cmp	r3, #64	; 0x40
 8010f2a:	d013      	beq.n	8010f54 <arm_cfft_f32+0xdc>
 8010f2c:	697b      	ldr	r3, [r7, #20]
 8010f2e:	2b40      	cmp	r3, #64	; 0x40
 8010f30:	d819      	bhi.n	8010f66 <arm_cfft_f32+0xee>
 8010f32:	697b      	ldr	r3, [r7, #20]
 8010f34:	2b10      	cmp	r3, #16
 8010f36:	d003      	beq.n	8010f40 <arm_cfft_f32+0xc8>
 8010f38:	697b      	ldr	r3, [r7, #20]
 8010f3a:	2b20      	cmp	r3, #32
 8010f3c:	d005      	beq.n	8010f4a <arm_cfft_f32+0xd2>
 8010f3e:	e012      	b.n	8010f66 <arm_cfft_f32+0xee>
  {
  case 16:
  case 128:
  case 1024:
    arm_cfft_radix8by2_f32 ( (arm_cfft_instance_f32 *) S, p1);
 8010f40:	68b9      	ldr	r1, [r7, #8]
 8010f42:	68f8      	ldr	r0, [r7, #12]
 8010f44:	f7fe ff79 	bl	800fe3a <arm_cfft_radix8by2_f32>
    break;
 8010f48:	e00d      	b.n	8010f66 <arm_cfft_f32+0xee>
  case 32:
  case 256:
  case 2048:
    arm_cfft_radix8by4_f32 ( (arm_cfft_instance_f32 *) S, p1);
 8010f4a:	68b9      	ldr	r1, [r7, #8]
 8010f4c:	68f8      	ldr	r0, [r7, #12]
 8010f4e:	f7ff f968 	bl	8010222 <arm_cfft_radix8by4_f32>
    break;
 8010f52:	e008      	b.n	8010f66 <arm_cfft_f32+0xee>
  case 64:
  case 512:
  case 4096:
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
 8010f54:	697b      	ldr	r3, [r7, #20]
 8010f56:	b299      	uxth	r1, r3
 8010f58:	68fb      	ldr	r3, [r7, #12]
 8010f5a:	685a      	ldr	r2, [r3, #4]
 8010f5c:	2301      	movs	r3, #1
 8010f5e:	68b8      	ldr	r0, [r7, #8]
 8010f60:	f000 f844 	bl	8010fec <arm_radix8_butterfly_f32>
    break;
 8010f64:	bf00      	nop
  }

  if ( bitReverseFlag )
 8010f66:	79bb      	ldrb	r3, [r7, #6]
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d007      	beq.n	8010f7c <arm_cfft_f32+0x104>
    arm_bitreversal_32 ((uint32_t*) p1, S->bitRevLength, S->pBitRevTable);
 8010f6c:	68fb      	ldr	r3, [r7, #12]
 8010f6e:	8999      	ldrh	r1, [r3, #12]
 8010f70:	68fb      	ldr	r3, [r7, #12]
 8010f72:	689b      	ldr	r3, [r3, #8]
 8010f74:	461a      	mov	r2, r3
 8010f76:	68b8      	ldr	r0, [r7, #8]
 8010f78:	f7fe ff06 	bl	800fd88 <arm_bitreversal_32>

  if (ifftFlag == 1U)
 8010f7c:	79fb      	ldrb	r3, [r7, #7]
 8010f7e:	2b01      	cmp	r3, #1
 8010f80:	d130      	bne.n	8010fe4 <arm_cfft_f32+0x16c>
  {
    invL = 1.0f / (float32_t)L;
 8010f82:	697b      	ldr	r3, [r7, #20]
 8010f84:	ee07 3a90 	vmov	s15, r3
 8010f88:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8010f8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010f90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010f94:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Conjugate and scale output data */
    pSrc = p1;
 8010f98:	68bb      	ldr	r3, [r7, #8]
 8010f9a:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 8010f9c:	2300      	movs	r3, #0
 8010f9e:	61fb      	str	r3, [r7, #28]
 8010fa0:	e01c      	b.n	8010fdc <arm_cfft_f32+0x164>
    {
      *pSrc++ *=   invL ;
 8010fa2:	69bb      	ldr	r3, [r7, #24]
 8010fa4:	1d1a      	adds	r2, r3, #4
 8010fa6:	61ba      	str	r2, [r7, #24]
 8010fa8:	ed93 7a00 	vldr	s14, [r3]
 8010fac:	edd7 7a04 	vldr	s15, [r7, #16]
 8010fb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010fb4:	edc3 7a00 	vstr	s15, [r3]
      *pSrc    = -(*pSrc) * invL;
 8010fb8:	69bb      	ldr	r3, [r7, #24]
 8010fba:	edd3 7a00 	vldr	s15, [r3]
 8010fbe:	eeb1 7a67 	vneg.f32	s14, s15
 8010fc2:	edd7 7a04 	vldr	s15, [r7, #16]
 8010fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010fca:	69bb      	ldr	r3, [r7, #24]
 8010fcc:	edc3 7a00 	vstr	s15, [r3]
      pSrc++;
 8010fd0:	69bb      	ldr	r3, [r7, #24]
 8010fd2:	3304      	adds	r3, #4
 8010fd4:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 8010fd6:	69fb      	ldr	r3, [r7, #28]
 8010fd8:	3301      	adds	r3, #1
 8010fda:	61fb      	str	r3, [r7, #28]
 8010fdc:	69fa      	ldr	r2, [r7, #28]
 8010fde:	697b      	ldr	r3, [r7, #20]
 8010fe0:	429a      	cmp	r2, r3
 8010fe2:	d3de      	bcc.n	8010fa2 <arm_cfft_f32+0x12a>
    }
  }
}
 8010fe4:	bf00      	nop
 8010fe6:	3720      	adds	r7, #32
 8010fe8:	46bd      	mov	sp, r7
 8010fea:	bd80      	pop	{r7, pc}

08010fec <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
  float32_t * pSrc,
  uint16_t fftLen,
  const float32_t * pCoef,
  uint16_t twidCoefModifier)
{
 8010fec:	b480      	push	{r7}
 8010fee:	b0bd      	sub	sp, #244	; 0xf4
 8010ff0:	af00      	add	r7, sp, #0
 8010ff2:	60f8      	str	r0, [r7, #12]
 8010ff4:	607a      	str	r2, [r7, #4]
 8010ff6:	461a      	mov	r2, r3
 8010ff8:	460b      	mov	r3, r1
 8010ffa:	817b      	strh	r3, [r7, #10]
 8010ffc:	4613      	mov	r3, r2
 8010ffe:	813b      	strh	r3, [r7, #8]
   float32_t t1, t2;
   float32_t s1, s2, s3, s4, s5, s6, s7, s8;
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;
 8011000:	4b09      	ldr	r3, [pc, #36]	; (8011028 <arm_radix8_butterfly_f32+0x3c>)
 8011002:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

   n2 = fftLen;
 8011006:	897b      	ldrh	r3, [r7, #10]
 8011008:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

   do
   {
      n1 = n2;
 801100c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011010:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      n2 = n2 >> 3;
 8011014:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011018:	08db      	lsrs	r3, r3, #3
 801101a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      i1 = 0;
 801101e:	2300      	movs	r3, #0
 8011020:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8011024:	e002      	b.n	801102c <arm_radix8_butterfly_f32+0x40>
 8011026:	bf00      	nop
 8011028:	3f3504f3 	.word	0x3f3504f3

      do
      {
         i2 = i1 + n2;
 801102c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8011030:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011034:	4413      	add	r3, r2
 8011036:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
         i3 = i2 + n2;
 801103a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 801103e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011042:	4413      	add	r3, r2
 8011044:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
         i4 = i3 + n2;
 8011048:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801104c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011050:	4413      	add	r3, r2
 8011052:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
         i5 = i4 + n2;
 8011056:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 801105a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801105e:	4413      	add	r3, r2
 8011060:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
         i6 = i5 + n2;
 8011064:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8011068:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801106c:	4413      	add	r3, r2
 801106e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
         i7 = i6 + n2;
 8011072:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8011076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801107a:	4413      	add	r3, r2
 801107c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
         i8 = i7 + n2;
 8011080:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8011084:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011088:	4413      	add	r3, r2
 801108a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 801108e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011092:	00db      	lsls	r3, r3, #3
 8011094:	68fa      	ldr	r2, [r7, #12]
 8011096:	4413      	add	r3, r2
 8011098:	ed93 7a00 	vldr	s14, [r3]
 801109c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80110a0:	00db      	lsls	r3, r3, #3
 80110a2:	68fa      	ldr	r2, [r7, #12]
 80110a4:	4413      	add	r3, r2
 80110a6:	edd3 7a00 	vldr	s15, [r3]
 80110aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80110ae:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 80110b2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80110b6:	00db      	lsls	r3, r3, #3
 80110b8:	68fa      	ldr	r2, [r7, #12]
 80110ba:	4413      	add	r3, r2
 80110bc:	ed93 7a00 	vldr	s14, [r3]
 80110c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80110c4:	00db      	lsls	r3, r3, #3
 80110c6:	68fa      	ldr	r2, [r7, #12]
 80110c8:	4413      	add	r3, r2
 80110ca:	edd3 7a00 	vldr	s15, [r3]
 80110ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80110d2:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 80110d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80110da:	00db      	lsls	r3, r3, #3
 80110dc:	68fa      	ldr	r2, [r7, #12]
 80110de:	4413      	add	r3, r2
 80110e0:	ed93 7a00 	vldr	s14, [r3]
 80110e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80110e8:	00db      	lsls	r3, r3, #3
 80110ea:	68fa      	ldr	r2, [r7, #12]
 80110ec:	4413      	add	r3, r2
 80110ee:	edd3 7a00 	vldr	s15, [r3]
 80110f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80110f6:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 80110fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80110fe:	00db      	lsls	r3, r3, #3
 8011100:	68fa      	ldr	r2, [r7, #12]
 8011102:	4413      	add	r3, r2
 8011104:	ed93 7a00 	vldr	s14, [r3]
 8011108:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801110c:	00db      	lsls	r3, r3, #3
 801110e:	68fa      	ldr	r2, [r7, #12]
 8011110:	4413      	add	r3, r2
 8011112:	edd3 7a00 	vldr	s15, [r3]
 8011116:	ee77 7a67 	vsub.f32	s15, s14, s15
 801111a:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 801111e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8011122:	00db      	lsls	r3, r3, #3
 8011124:	68fa      	ldr	r2, [r7, #12]
 8011126:	4413      	add	r3, r2
 8011128:	ed93 7a00 	vldr	s14, [r3]
 801112c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8011130:	00db      	lsls	r3, r3, #3
 8011132:	68fa      	ldr	r2, [r7, #12]
 8011134:	4413      	add	r3, r2
 8011136:	edd3 7a00 	vldr	s15, [r3]
 801113a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801113e:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8011142:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8011146:	00db      	lsls	r3, r3, #3
 8011148:	68fa      	ldr	r2, [r7, #12]
 801114a:	4413      	add	r3, r2
 801114c:	ed93 7a00 	vldr	s14, [r3]
 8011150:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8011154:	00db      	lsls	r3, r3, #3
 8011156:	68fa      	ldr	r2, [r7, #12]
 8011158:	4413      	add	r3, r2
 801115a:	edd3 7a00 	vldr	s15, [r3]
 801115e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011162:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8011166:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801116a:	00db      	lsls	r3, r3, #3
 801116c:	68fa      	ldr	r2, [r7, #12]
 801116e:	4413      	add	r3, r2
 8011170:	ed93 7a00 	vldr	s14, [r3]
 8011174:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8011178:	00db      	lsls	r3, r3, #3
 801117a:	68fa      	ldr	r2, [r7, #12]
 801117c:	4413      	add	r3, r2
 801117e:	edd3 7a00 	vldr	s15, [r3]
 8011182:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011186:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 801118a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801118e:	00db      	lsls	r3, r3, #3
 8011190:	68fa      	ldr	r2, [r7, #12]
 8011192:	4413      	add	r3, r2
 8011194:	ed93 7a00 	vldr	s14, [r3]
 8011198:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801119c:	00db      	lsls	r3, r3, #3
 801119e:	68fa      	ldr	r2, [r7, #12]
 80111a0:	4413      	add	r3, r2
 80111a2:	edd3 7a00 	vldr	s15, [r3]
 80111a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80111aa:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         t1 = r1 - r3;
 80111ae:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80111b2:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80111b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80111ba:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r1 = r1 + r3;
 80111be:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80111c2:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80111c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80111ca:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r3 = r2 - r4;
 80111ce:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80111d2:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80111d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80111da:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r2 = r2 + r4;
 80111de:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80111e2:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80111e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80111ea:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1] = r1 + r2;
 80111ee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80111f2:	00db      	lsls	r3, r3, #3
 80111f4:	68fa      	ldr	r2, [r7, #12]
 80111f6:	4413      	add	r3, r2
 80111f8:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80111fc:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8011200:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011204:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5] = r1 - r2;
 8011208:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801120c:	00db      	lsls	r3, r3, #3
 801120e:	68fa      	ldr	r2, [r7, #12]
 8011210:	4413      	add	r3, r2
 8011212:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8011216:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 801121a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801121e:	edc3 7a00 	vstr	s15, [r3]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8011222:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011226:	00db      	lsls	r3, r3, #3
 8011228:	3304      	adds	r3, #4
 801122a:	68fa      	ldr	r2, [r7, #12]
 801122c:	4413      	add	r3, r2
 801122e:	ed93 7a00 	vldr	s14, [r3]
 8011232:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011236:	00db      	lsls	r3, r3, #3
 8011238:	3304      	adds	r3, #4
 801123a:	68fa      	ldr	r2, [r7, #12]
 801123c:	4413      	add	r3, r2
 801123e:	edd3 7a00 	vldr	s15, [r3]
 8011242:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011246:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 801124a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801124e:	00db      	lsls	r3, r3, #3
 8011250:	3304      	adds	r3, #4
 8011252:	68fa      	ldr	r2, [r7, #12]
 8011254:	4413      	add	r3, r2
 8011256:	ed93 7a00 	vldr	s14, [r3]
 801125a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801125e:	00db      	lsls	r3, r3, #3
 8011260:	3304      	adds	r3, #4
 8011262:	68fa      	ldr	r2, [r7, #12]
 8011264:	4413      	add	r3, r2
 8011266:	edd3 7a00 	vldr	s15, [r3]
 801126a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801126e:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8011272:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8011276:	00db      	lsls	r3, r3, #3
 8011278:	3304      	adds	r3, #4
 801127a:	68fa      	ldr	r2, [r7, #12]
 801127c:	4413      	add	r3, r2
 801127e:	ed93 7a00 	vldr	s14, [r3]
 8011282:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8011286:	00db      	lsls	r3, r3, #3
 8011288:	3304      	adds	r3, #4
 801128a:	68fa      	ldr	r2, [r7, #12]
 801128c:	4413      	add	r3, r2
 801128e:	edd3 7a00 	vldr	s15, [r3]
 8011292:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011296:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 801129a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801129e:	00db      	lsls	r3, r3, #3
 80112a0:	3304      	adds	r3, #4
 80112a2:	68fa      	ldr	r2, [r7, #12]
 80112a4:	4413      	add	r3, r2
 80112a6:	ed93 7a00 	vldr	s14, [r3]
 80112aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80112ae:	00db      	lsls	r3, r3, #3
 80112b0:	3304      	adds	r3, #4
 80112b2:	68fa      	ldr	r2, [r7, #12]
 80112b4:	4413      	add	r3, r2
 80112b6:	edd3 7a00 	vldr	s15, [r3]
 80112ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80112be:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 80112c2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80112c6:	00db      	lsls	r3, r3, #3
 80112c8:	3304      	adds	r3, #4
 80112ca:	68fa      	ldr	r2, [r7, #12]
 80112cc:	4413      	add	r3, r2
 80112ce:	ed93 7a00 	vldr	s14, [r3]
 80112d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80112d6:	00db      	lsls	r3, r3, #3
 80112d8:	3304      	adds	r3, #4
 80112da:	68fa      	ldr	r2, [r7, #12]
 80112dc:	4413      	add	r3, r2
 80112de:	edd3 7a00 	vldr	s15, [r3]
 80112e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80112e6:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 80112ea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80112ee:	00db      	lsls	r3, r3, #3
 80112f0:	3304      	adds	r3, #4
 80112f2:	68fa      	ldr	r2, [r7, #12]
 80112f4:	4413      	add	r3, r2
 80112f6:	ed93 7a00 	vldr	s14, [r3]
 80112fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80112fe:	00db      	lsls	r3, r3, #3
 8011300:	3304      	adds	r3, #4
 8011302:	68fa      	ldr	r2, [r7, #12]
 8011304:	4413      	add	r3, r2
 8011306:	edd3 7a00 	vldr	s15, [r3]
 801130a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801130e:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8011312:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011316:	00db      	lsls	r3, r3, #3
 8011318:	3304      	adds	r3, #4
 801131a:	68fa      	ldr	r2, [r7, #12]
 801131c:	4413      	add	r3, r2
 801131e:	ed93 7a00 	vldr	s14, [r3]
 8011322:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8011326:	00db      	lsls	r3, r3, #3
 8011328:	3304      	adds	r3, #4
 801132a:	68fa      	ldr	r2, [r7, #12]
 801132c:	4413      	add	r3, r2
 801132e:	edd3 7a00 	vldr	s15, [r3]
 8011332:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011336:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 801133a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801133e:	00db      	lsls	r3, r3, #3
 8011340:	3304      	adds	r3, #4
 8011342:	68fa      	ldr	r2, [r7, #12]
 8011344:	4413      	add	r3, r2
 8011346:	ed93 7a00 	vldr	s14, [r3]
 801134a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801134e:	00db      	lsls	r3, r3, #3
 8011350:	3304      	adds	r3, #4
 8011352:	68fa      	ldr	r2, [r7, #12]
 8011354:	4413      	add	r3, r2
 8011356:	edd3 7a00 	vldr	s15, [r3]
 801135a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801135e:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         t2 = r1 - s3;
 8011362:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8011366:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 801136a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801136e:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         r1 = r1 + s3;
 8011372:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8011376:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 801137a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801137e:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s3 = r2 - r4;
 8011382:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8011386:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 801138a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801138e:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         r2 = r2 + r4;
 8011392:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8011396:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 801139a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801139e:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1 + 1] = r1 + r2;
 80113a2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80113a6:	00db      	lsls	r3, r3, #3
 80113a8:	3304      	adds	r3, #4
 80113aa:	68fa      	ldr	r2, [r7, #12]
 80113ac:	4413      	add	r3, r2
 80113ae:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80113b2:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80113b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80113ba:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5 + 1] = r1 - r2;
 80113be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80113c2:	00db      	lsls	r3, r3, #3
 80113c4:	3304      	adds	r3, #4
 80113c6:	68fa      	ldr	r2, [r7, #12]
 80113c8:	4413      	add	r3, r2
 80113ca:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80113ce:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80113d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80113d6:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3]     = t1 + s3;
 80113da:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80113de:	00db      	lsls	r3, r3, #3
 80113e0:	68fa      	ldr	r2, [r7, #12]
 80113e2:	4413      	add	r3, r2
 80113e4:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80113e8:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80113ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80113f0:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7]     = t1 - s3;
 80113f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80113f8:	00db      	lsls	r3, r3, #3
 80113fa:	68fa      	ldr	r2, [r7, #12]
 80113fc:	4413      	add	r3, r2
 80113fe:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8011402:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8011406:	ee77 7a67 	vsub.f32	s15, s14, s15
 801140a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3 + 1] = t2 - r3;
 801140e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8011412:	00db      	lsls	r3, r3, #3
 8011414:	3304      	adds	r3, #4
 8011416:	68fa      	ldr	r2, [r7, #12]
 8011418:	4413      	add	r3, r2
 801141a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 801141e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8011422:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011426:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7 + 1] = t2 + r3;
 801142a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801142e:	00db      	lsls	r3, r3, #3
 8011430:	3304      	adds	r3, #4
 8011432:	68fa      	ldr	r2, [r7, #12]
 8011434:	4413      	add	r3, r2
 8011436:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 801143a:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 801143e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011442:	edc3 7a00 	vstr	s15, [r3]
         r1 = (r6 - r8) * C81;
 8011446:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 801144a:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 801144e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011452:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8011456:	ee67 7a27 	vmul.f32	s15, s14, s15
 801145a:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r6 = (r6 + r8) * C81;
 801145e:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8011462:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8011466:	ee77 7a27 	vadd.f32	s15, s14, s15
 801146a:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 801146e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011472:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r2 = (s6 - s8) * C81;
 8011476:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 801147a:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 801147e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011482:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8011486:	ee67 7a27 	vmul.f32	s15, s14, s15
 801148a:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = (s6 + s8) * C81;
 801148e:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8011492:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8011496:	ee77 7a27 	vadd.f32	s15, s14, s15
 801149a:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 801149e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80114a2:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         t1 = r5 - r1;
 80114a6:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80114aa:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80114ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80114b2:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r5 = r5 + r1;
 80114b6:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80114ba:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80114be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80114c2:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r8 = r7 - r6;
 80114c6:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80114ca:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80114ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80114d2:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         r7 = r7 + r6;
 80114d6:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80114da:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80114de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80114e2:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         t2 = s5 - r2;
 80114e6:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80114ea:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80114ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80114f2:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         s5 = s5 + r2;
 80114f6:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80114fa:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80114fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011502:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         s8 = s7 - s6;
 8011506:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 801150a:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 801150e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011512:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         s7 = s7 + s6;
 8011516:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 801151a:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 801151e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011522:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         pSrc[2 * i2]     = r5 + s7;
 8011526:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801152a:	00db      	lsls	r3, r3, #3
 801152c:	68fa      	ldr	r2, [r7, #12]
 801152e:	4413      	add	r3, r2
 8011530:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8011534:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8011538:	ee77 7a27 	vadd.f32	s15, s14, s15
 801153c:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8]     = r5 - s7;
 8011540:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8011544:	00db      	lsls	r3, r3, #3
 8011546:	68fa      	ldr	r2, [r7, #12]
 8011548:	4413      	add	r3, r2
 801154a:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 801154e:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8011552:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011556:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6]     = t1 + s8;
 801155a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801155e:	00db      	lsls	r3, r3, #3
 8011560:	68fa      	ldr	r2, [r7, #12]
 8011562:	4413      	add	r3, r2
 8011564:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8011568:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 801156c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011570:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4]     = t1 - s8;
 8011574:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011578:	00db      	lsls	r3, r3, #3
 801157a:	68fa      	ldr	r2, [r7, #12]
 801157c:	4413      	add	r3, r2
 801157e:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8011582:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8011586:	ee77 7a67 	vsub.f32	s15, s14, s15
 801158a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
 801158e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8011592:	00db      	lsls	r3, r3, #3
 8011594:	3304      	adds	r3, #4
 8011596:	68fa      	ldr	r2, [r7, #12]
 8011598:	4413      	add	r3, r2
 801159a:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 801159e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80115a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80115a6:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8 + 1] = s5 + r7;
 80115aa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80115ae:	00db      	lsls	r3, r3, #3
 80115b0:	3304      	adds	r3, #4
 80115b2:	68fa      	ldr	r2, [r7, #12]
 80115b4:	4413      	add	r3, r2
 80115b6:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80115ba:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80115be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80115c2:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6 + 1] = t2 - r8;
 80115c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80115ca:	00db      	lsls	r3, r3, #3
 80115cc:	3304      	adds	r3, #4
 80115ce:	68fa      	ldr	r2, [r7, #12]
 80115d0:	4413      	add	r3, r2
 80115d2:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80115d6:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80115da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80115de:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4 + 1] = t2 + r8;
 80115e2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80115e6:	00db      	lsls	r3, r3, #3
 80115e8:	3304      	adds	r3, #4
 80115ea:	68fa      	ldr	r2, [r7, #12]
 80115ec:	4413      	add	r3, r2
 80115ee:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80115f2:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80115f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80115fa:	edc3 7a00 	vstr	s15, [r3]

         i1 += n1;
 80115fe:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8011602:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8011606:	4413      	add	r3, r2
 8011608:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      } while (i1 < fftLen);
 801160c:	897b      	ldrh	r3, [r7, #10]
 801160e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8011612:	429a      	cmp	r2, r3
 8011614:	f4ff ad0a 	bcc.w	801102c <arm_radix8_butterfly_f32+0x40>

      if (n2 < 8)
 8011618:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801161c:	2b07      	cmp	r3, #7
 801161e:	f240 84e3 	bls.w	8011fe8 <arm_radix8_butterfly_f32+0xffc>
         break;

      ia1 = 0;
 8011622:	2300      	movs	r3, #0
 8011624:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      j = 1;
 8011628:	2301      	movs	r3, #1
 801162a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

      do
      {
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 801162e:	893b      	ldrh	r3, [r7, #8]
 8011630:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8011634:	4413      	add	r3, r2
 8011636:	67fb      	str	r3, [r7, #124]	; 0x7c
         ia1 = id;
 8011638:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801163a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
         ia2 = ia1 + id;
 801163e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8011642:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011644:	4413      	add	r3, r2
 8011646:	67bb      	str	r3, [r7, #120]	; 0x78
         ia3 = ia2 + id;
 8011648:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801164a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801164c:	4413      	add	r3, r2
 801164e:	677b      	str	r3, [r7, #116]	; 0x74
         ia4 = ia3 + id;
 8011650:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8011652:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011654:	4413      	add	r3, r2
 8011656:	673b      	str	r3, [r7, #112]	; 0x70
         ia5 = ia4 + id;
 8011658:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801165a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801165c:	4413      	add	r3, r2
 801165e:	66fb      	str	r3, [r7, #108]	; 0x6c
         ia6 = ia5 + id;
 8011660:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8011662:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011664:	4413      	add	r3, r2
 8011666:	66bb      	str	r3, [r7, #104]	; 0x68
         ia7 = ia6 + id;
 8011668:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801166a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801166c:	4413      	add	r3, r2
 801166e:	667b      	str	r3, [r7, #100]	; 0x64

         co2 = pCoef[2 * ia1];
 8011670:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011674:	00db      	lsls	r3, r3, #3
 8011676:	687a      	ldr	r2, [r7, #4]
 8011678:	4413      	add	r3, r2
 801167a:	681b      	ldr	r3, [r3, #0]
 801167c:	663b      	str	r3, [r7, #96]	; 0x60
         co3 = pCoef[2 * ia2];
 801167e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011680:	00db      	lsls	r3, r3, #3
 8011682:	687a      	ldr	r2, [r7, #4]
 8011684:	4413      	add	r3, r2
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	65fb      	str	r3, [r7, #92]	; 0x5c
         co4 = pCoef[2 * ia3];
 801168a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801168c:	00db      	lsls	r3, r3, #3
 801168e:	687a      	ldr	r2, [r7, #4]
 8011690:	4413      	add	r3, r2
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	65bb      	str	r3, [r7, #88]	; 0x58
         co5 = pCoef[2 * ia4];
 8011696:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011698:	00db      	lsls	r3, r3, #3
 801169a:	687a      	ldr	r2, [r7, #4]
 801169c:	4413      	add	r3, r2
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	657b      	str	r3, [r7, #84]	; 0x54
         co6 = pCoef[2 * ia5];
 80116a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80116a4:	00db      	lsls	r3, r3, #3
 80116a6:	687a      	ldr	r2, [r7, #4]
 80116a8:	4413      	add	r3, r2
 80116aa:	681b      	ldr	r3, [r3, #0]
 80116ac:	653b      	str	r3, [r7, #80]	; 0x50
         co7 = pCoef[2 * ia6];
 80116ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80116b0:	00db      	lsls	r3, r3, #3
 80116b2:	687a      	ldr	r2, [r7, #4]
 80116b4:	4413      	add	r3, r2
 80116b6:	681b      	ldr	r3, [r3, #0]
 80116b8:	64fb      	str	r3, [r7, #76]	; 0x4c
         co8 = pCoef[2 * ia7];
 80116ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80116bc:	00db      	lsls	r3, r3, #3
 80116be:	687a      	ldr	r2, [r7, #4]
 80116c0:	4413      	add	r3, r2
 80116c2:	681b      	ldr	r3, [r3, #0]
 80116c4:	64bb      	str	r3, [r7, #72]	; 0x48
         si2 = pCoef[2 * ia1 + 1];
 80116c6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80116ca:	00db      	lsls	r3, r3, #3
 80116cc:	3304      	adds	r3, #4
 80116ce:	687a      	ldr	r2, [r7, #4]
 80116d0:	4413      	add	r3, r2
 80116d2:	681b      	ldr	r3, [r3, #0]
 80116d4:	647b      	str	r3, [r7, #68]	; 0x44
         si3 = pCoef[2 * ia2 + 1];
 80116d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80116d8:	00db      	lsls	r3, r3, #3
 80116da:	3304      	adds	r3, #4
 80116dc:	687a      	ldr	r2, [r7, #4]
 80116de:	4413      	add	r3, r2
 80116e0:	681b      	ldr	r3, [r3, #0]
 80116e2:	643b      	str	r3, [r7, #64]	; 0x40
         si4 = pCoef[2 * ia3 + 1];
 80116e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80116e6:	00db      	lsls	r3, r3, #3
 80116e8:	3304      	adds	r3, #4
 80116ea:	687a      	ldr	r2, [r7, #4]
 80116ec:	4413      	add	r3, r2
 80116ee:	681b      	ldr	r3, [r3, #0]
 80116f0:	63fb      	str	r3, [r7, #60]	; 0x3c
         si5 = pCoef[2 * ia4 + 1];
 80116f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80116f4:	00db      	lsls	r3, r3, #3
 80116f6:	3304      	adds	r3, #4
 80116f8:	687a      	ldr	r2, [r7, #4]
 80116fa:	4413      	add	r3, r2
 80116fc:	681b      	ldr	r3, [r3, #0]
 80116fe:	63bb      	str	r3, [r7, #56]	; 0x38
         si6 = pCoef[2 * ia5 + 1];
 8011700:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011702:	00db      	lsls	r3, r3, #3
 8011704:	3304      	adds	r3, #4
 8011706:	687a      	ldr	r2, [r7, #4]
 8011708:	4413      	add	r3, r2
 801170a:	681b      	ldr	r3, [r3, #0]
 801170c:	637b      	str	r3, [r7, #52]	; 0x34
         si7 = pCoef[2 * ia6 + 1];
 801170e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011710:	00db      	lsls	r3, r3, #3
 8011712:	3304      	adds	r3, #4
 8011714:	687a      	ldr	r2, [r7, #4]
 8011716:	4413      	add	r3, r2
 8011718:	681b      	ldr	r3, [r3, #0]
 801171a:	633b      	str	r3, [r7, #48]	; 0x30
         si8 = pCoef[2 * ia7 + 1];
 801171c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801171e:	00db      	lsls	r3, r3, #3
 8011720:	3304      	adds	r3, #4
 8011722:	687a      	ldr	r2, [r7, #4]
 8011724:	4413      	add	r3, r2
 8011726:	681b      	ldr	r3, [r3, #0]
 8011728:	62fb      	str	r3, [r7, #44]	; 0x2c

         i1 = j;
 801172a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801172e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 8011732:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8011736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801173a:	4413      	add	r3, r2
 801173c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
            i3 = i2 + n2;
 8011740:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8011744:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011748:	4413      	add	r3, r2
 801174a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
            i4 = i3 + n2;
 801174e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8011752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011756:	4413      	add	r3, r2
 8011758:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            i5 = i4 + n2;
 801175c:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8011760:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011764:	4413      	add	r3, r2
 8011766:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            i6 = i5 + n2;
 801176a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801176e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011772:	4413      	add	r3, r2
 8011774:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            i7 = i6 + n2;
 8011778:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801177c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011780:	4413      	add	r3, r2
 8011782:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
            i8 = i7 + n2;
 8011786:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 801178a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801178e:	4413      	add	r3, r2
 8011790:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8011794:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011798:	00db      	lsls	r3, r3, #3
 801179a:	68fa      	ldr	r2, [r7, #12]
 801179c:	4413      	add	r3, r2
 801179e:	ed93 7a00 	vldr	s14, [r3]
 80117a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80117a6:	00db      	lsls	r3, r3, #3
 80117a8:	68fa      	ldr	r2, [r7, #12]
 80117aa:	4413      	add	r3, r2
 80117ac:	edd3 7a00 	vldr	s15, [r3]
 80117b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80117b4:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 80117b8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80117bc:	00db      	lsls	r3, r3, #3
 80117be:	68fa      	ldr	r2, [r7, #12]
 80117c0:	4413      	add	r3, r2
 80117c2:	ed93 7a00 	vldr	s14, [r3]
 80117c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80117ca:	00db      	lsls	r3, r3, #3
 80117cc:	68fa      	ldr	r2, [r7, #12]
 80117ce:	4413      	add	r3, r2
 80117d0:	edd3 7a00 	vldr	s15, [r3]
 80117d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80117d8:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 80117dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80117e0:	00db      	lsls	r3, r3, #3
 80117e2:	68fa      	ldr	r2, [r7, #12]
 80117e4:	4413      	add	r3, r2
 80117e6:	ed93 7a00 	vldr	s14, [r3]
 80117ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80117ee:	00db      	lsls	r3, r3, #3
 80117f0:	68fa      	ldr	r2, [r7, #12]
 80117f2:	4413      	add	r3, r2
 80117f4:	edd3 7a00 	vldr	s15, [r3]
 80117f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80117fc:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8011800:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8011804:	00db      	lsls	r3, r3, #3
 8011806:	68fa      	ldr	r2, [r7, #12]
 8011808:	4413      	add	r3, r2
 801180a:	ed93 7a00 	vldr	s14, [r3]
 801180e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8011812:	00db      	lsls	r3, r3, #3
 8011814:	68fa      	ldr	r2, [r7, #12]
 8011816:	4413      	add	r3, r2
 8011818:	edd3 7a00 	vldr	s15, [r3]
 801181c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011820:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8011824:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8011828:	00db      	lsls	r3, r3, #3
 801182a:	68fa      	ldr	r2, [r7, #12]
 801182c:	4413      	add	r3, r2
 801182e:	ed93 7a00 	vldr	s14, [r3]
 8011832:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8011836:	00db      	lsls	r3, r3, #3
 8011838:	68fa      	ldr	r2, [r7, #12]
 801183a:	4413      	add	r3, r2
 801183c:	edd3 7a00 	vldr	s15, [r3]
 8011840:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011844:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8011848:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801184c:	00db      	lsls	r3, r3, #3
 801184e:	68fa      	ldr	r2, [r7, #12]
 8011850:	4413      	add	r3, r2
 8011852:	ed93 7a00 	vldr	s14, [r3]
 8011856:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801185a:	00db      	lsls	r3, r3, #3
 801185c:	68fa      	ldr	r2, [r7, #12]
 801185e:	4413      	add	r3, r2
 8011860:	edd3 7a00 	vldr	s15, [r3]
 8011864:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011868:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 801186c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011870:	00db      	lsls	r3, r3, #3
 8011872:	68fa      	ldr	r2, [r7, #12]
 8011874:	4413      	add	r3, r2
 8011876:	ed93 7a00 	vldr	s14, [r3]
 801187a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801187e:	00db      	lsls	r3, r3, #3
 8011880:	68fa      	ldr	r2, [r7, #12]
 8011882:	4413      	add	r3, r2
 8011884:	edd3 7a00 	vldr	s15, [r3]
 8011888:	ee77 7a27 	vadd.f32	s15, s14, s15
 801188c:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8011890:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011894:	00db      	lsls	r3, r3, #3
 8011896:	68fa      	ldr	r2, [r7, #12]
 8011898:	4413      	add	r3, r2
 801189a:	ed93 7a00 	vldr	s14, [r3]
 801189e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80118a2:	00db      	lsls	r3, r3, #3
 80118a4:	68fa      	ldr	r2, [r7, #12]
 80118a6:	4413      	add	r3, r2
 80118a8:	edd3 7a00 	vldr	s15, [r3]
 80118ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80118b0:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            t1 = r1 - r3;
 80118b4:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80118b8:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80118bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80118c0:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r1 = r1 + r3;
 80118c4:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80118c8:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80118cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80118d0:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r3 = r2 - r4;
 80118d4:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80118d8:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80118dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80118e0:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r2 = r2 + r4;
 80118e4:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80118e8:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80118ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80118f0:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            pSrc[2 * i1] = r1 + r2;
 80118f4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80118f8:	00db      	lsls	r3, r3, #3
 80118fa:	68fa      	ldr	r2, [r7, #12]
 80118fc:	4413      	add	r3, r2
 80118fe:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8011902:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8011906:	ee77 7a27 	vadd.f32	s15, s14, s15
 801190a:	edc3 7a00 	vstr	s15, [r3]
            r2 = r1 - r2;
 801190e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8011912:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8011916:	ee77 7a67 	vsub.f32	s15, s14, s15
 801191a:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 801191e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011922:	00db      	lsls	r3, r3, #3
 8011924:	3304      	adds	r3, #4
 8011926:	68fa      	ldr	r2, [r7, #12]
 8011928:	4413      	add	r3, r2
 801192a:	ed93 7a00 	vldr	s14, [r3]
 801192e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011932:	00db      	lsls	r3, r3, #3
 8011934:	3304      	adds	r3, #4
 8011936:	68fa      	ldr	r2, [r7, #12]
 8011938:	4413      	add	r3, r2
 801193a:	edd3 7a00 	vldr	s15, [r3]
 801193e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011942:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8011946:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801194a:	00db      	lsls	r3, r3, #3
 801194c:	3304      	adds	r3, #4
 801194e:	68fa      	ldr	r2, [r7, #12]
 8011950:	4413      	add	r3, r2
 8011952:	ed93 7a00 	vldr	s14, [r3]
 8011956:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801195a:	00db      	lsls	r3, r3, #3
 801195c:	3304      	adds	r3, #4
 801195e:	68fa      	ldr	r2, [r7, #12]
 8011960:	4413      	add	r3, r2
 8011962:	edd3 7a00 	vldr	s15, [r3]
 8011966:	ee77 7a67 	vsub.f32	s15, s14, s15
 801196a:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 801196e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8011972:	00db      	lsls	r3, r3, #3
 8011974:	3304      	adds	r3, #4
 8011976:	68fa      	ldr	r2, [r7, #12]
 8011978:	4413      	add	r3, r2
 801197a:	ed93 7a00 	vldr	s14, [r3]
 801197e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8011982:	00db      	lsls	r3, r3, #3
 8011984:	3304      	adds	r3, #4
 8011986:	68fa      	ldr	r2, [r7, #12]
 8011988:	4413      	add	r3, r2
 801198a:	edd3 7a00 	vldr	s15, [r3]
 801198e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011992:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8011996:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801199a:	00db      	lsls	r3, r3, #3
 801199c:	3304      	adds	r3, #4
 801199e:	68fa      	ldr	r2, [r7, #12]
 80119a0:	4413      	add	r3, r2
 80119a2:	ed93 7a00 	vldr	s14, [r3]
 80119a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80119aa:	00db      	lsls	r3, r3, #3
 80119ac:	3304      	adds	r3, #4
 80119ae:	68fa      	ldr	r2, [r7, #12]
 80119b0:	4413      	add	r3, r2
 80119b2:	edd3 7a00 	vldr	s15, [r3]
 80119b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80119ba:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 80119be:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80119c2:	00db      	lsls	r3, r3, #3
 80119c4:	3304      	adds	r3, #4
 80119c6:	68fa      	ldr	r2, [r7, #12]
 80119c8:	4413      	add	r3, r2
 80119ca:	ed93 7a00 	vldr	s14, [r3]
 80119ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80119d2:	00db      	lsls	r3, r3, #3
 80119d4:	3304      	adds	r3, #4
 80119d6:	68fa      	ldr	r2, [r7, #12]
 80119d8:	4413      	add	r3, r2
 80119da:	edd3 7a00 	vldr	s15, [r3]
 80119de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80119e2:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 80119e6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80119ea:	00db      	lsls	r3, r3, #3
 80119ec:	3304      	adds	r3, #4
 80119ee:	68fa      	ldr	r2, [r7, #12]
 80119f0:	4413      	add	r3, r2
 80119f2:	ed93 7a00 	vldr	s14, [r3]
 80119f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80119fa:	00db      	lsls	r3, r3, #3
 80119fc:	3304      	adds	r3, #4
 80119fe:	68fa      	ldr	r2, [r7, #12]
 8011a00:	4413      	add	r3, r2
 8011a02:	edd3 7a00 	vldr	s15, [r3]
 8011a06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011a0a:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8011a0e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011a12:	00db      	lsls	r3, r3, #3
 8011a14:	3304      	adds	r3, #4
 8011a16:	68fa      	ldr	r2, [r7, #12]
 8011a18:	4413      	add	r3, r2
 8011a1a:	ed93 7a00 	vldr	s14, [r3]
 8011a1e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8011a22:	00db      	lsls	r3, r3, #3
 8011a24:	3304      	adds	r3, #4
 8011a26:	68fa      	ldr	r2, [r7, #12]
 8011a28:	4413      	add	r3, r2
 8011a2a:	edd3 7a00 	vldr	s15, [r3]
 8011a2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011a32:	edc7 7a08 	vstr	s15, [r7, #32]
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8011a36:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011a3a:	00db      	lsls	r3, r3, #3
 8011a3c:	3304      	adds	r3, #4
 8011a3e:	68fa      	ldr	r2, [r7, #12]
 8011a40:	4413      	add	r3, r2
 8011a42:	ed93 7a00 	vldr	s14, [r3]
 8011a46:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8011a4a:	00db      	lsls	r3, r3, #3
 8011a4c:	3304      	adds	r3, #4
 8011a4e:	68fa      	ldr	r2, [r7, #12]
 8011a50:	4413      	add	r3, r2
 8011a52:	edd3 7a00 	vldr	s15, [r3]
 8011a56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011a5a:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            t2 = s1 - s3;
 8011a5e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8011a62:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8011a66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011a6a:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s1 = s1 + s3;
 8011a6e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8011a72:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8011a76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011a7a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s3 = s2 - s4;
 8011a7e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8011a82:	edd7 7a08 	vldr	s15, [r7, #32]
 8011a86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011a8a:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s2 = s2 + s4;
 8011a8e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8011a92:	edd7 7a08 	vldr	s15, [r7, #32]
 8011a96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011a9a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            r1 = t1 + s3;
 8011a9e:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8011aa2:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8011aa6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011aaa:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            t1 = t1 - s3;
 8011aae:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8011ab2:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8011ab6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011aba:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            pSrc[2 * i1 + 1] = s1 + s2;
 8011abe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011ac2:	00db      	lsls	r3, r3, #3
 8011ac4:	3304      	adds	r3, #4
 8011ac6:	68fa      	ldr	r2, [r7, #12]
 8011ac8:	4413      	add	r3, r2
 8011aca:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8011ace:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8011ad2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011ad6:	edc3 7a00 	vstr	s15, [r3]
            s2 = s1 - s2;
 8011ada:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8011ade:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8011ae2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011ae6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s1 = t2 - r3;
 8011aea:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8011aee:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8011af2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011af6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            t2 = t2 + r3;
 8011afa:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8011afe:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8011b02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011b06:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co5 * r2;
 8011b0a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8011b0e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8011b12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011b16:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si5 * s2;
 8011b1a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8011b1e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8011b22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011b26:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co5 * s2;
 8011b2a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8011b2e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8011b32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011b36:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si5 * r2;
 8011b3a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8011b3e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8011b42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011b46:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i5]     = p1 + p2;
 8011b4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011b4e:	00db      	lsls	r3, r3, #3
 8011b50:	68fa      	ldr	r2, [r7, #12]
 8011b52:	4413      	add	r3, r2
 8011b54:	ed97 7a07 	vldr	s14, [r7, #28]
 8011b58:	edd7 7a06 	vldr	s15, [r7, #24]
 8011b5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011b60:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i5 + 1] = p3 - p4;
 8011b64:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011b68:	00db      	lsls	r3, r3, #3
 8011b6a:	3304      	adds	r3, #4
 8011b6c:	68fa      	ldr	r2, [r7, #12]
 8011b6e:	4413      	add	r3, r2
 8011b70:	ed97 7a05 	vldr	s14, [r7, #20]
 8011b74:	edd7 7a04 	vldr	s15, [r7, #16]
 8011b78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011b7c:	edc3 7a00 	vstr	s15, [r3]
            p1 = co3 * r1;
 8011b80:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8011b84:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8011b88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011b8c:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si3 * s1;
 8011b90:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8011b94:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8011b98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011b9c:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co3 * s1;
 8011ba0:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8011ba4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8011ba8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011bac:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si3 * r1;
 8011bb0:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8011bb4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8011bb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011bbc:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i3]     = p1 + p2;
 8011bc0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8011bc4:	00db      	lsls	r3, r3, #3
 8011bc6:	68fa      	ldr	r2, [r7, #12]
 8011bc8:	4413      	add	r3, r2
 8011bca:	ed97 7a07 	vldr	s14, [r7, #28]
 8011bce:	edd7 7a06 	vldr	s15, [r7, #24]
 8011bd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011bd6:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i3 + 1] = p3 - p4;
 8011bda:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8011bde:	00db      	lsls	r3, r3, #3
 8011be0:	3304      	adds	r3, #4
 8011be2:	68fa      	ldr	r2, [r7, #12]
 8011be4:	4413      	add	r3, r2
 8011be6:	ed97 7a05 	vldr	s14, [r7, #20]
 8011bea:	edd7 7a04 	vldr	s15, [r7, #16]
 8011bee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011bf2:	edc3 7a00 	vstr	s15, [r3]
            p1 = co7 * t1;
 8011bf6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8011bfa:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8011bfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011c02:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si7 * t2;
 8011c06:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8011c0a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8011c0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011c12:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co7 * t2;
 8011c16:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8011c1a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8011c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011c22:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si7 * t1;
 8011c26:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8011c2a:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8011c2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011c32:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i7]     = p1 + p2;
 8011c36:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8011c3a:	00db      	lsls	r3, r3, #3
 8011c3c:	68fa      	ldr	r2, [r7, #12]
 8011c3e:	4413      	add	r3, r2
 8011c40:	ed97 7a07 	vldr	s14, [r7, #28]
 8011c44:	edd7 7a06 	vldr	s15, [r7, #24]
 8011c48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011c4c:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i7 + 1] = p3 - p4;
 8011c50:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8011c54:	00db      	lsls	r3, r3, #3
 8011c56:	3304      	adds	r3, #4
 8011c58:	68fa      	ldr	r2, [r7, #12]
 8011c5a:	4413      	add	r3, r2
 8011c5c:	ed97 7a05 	vldr	s14, [r7, #20]
 8011c60:	edd7 7a04 	vldr	s15, [r7, #16]
 8011c64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011c68:	edc3 7a00 	vstr	s15, [r3]
            r1 = (r6 - r8) * C81;
 8011c6c:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8011c70:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8011c74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011c78:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8011c7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011c80:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r6 = (r6 + r8) * C81;
 8011c84:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8011c88:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8011c8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011c90:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8011c94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011c98:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            s1 = (s6 - s8) * C81;
 8011c9c:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8011ca0:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8011ca4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011ca8:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8011cac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011cb0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s6 = (s6 + s8) * C81;
 8011cb4:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8011cb8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8011cbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011cc0:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8011cc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011cc8:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t1 = r5 - r1;
 8011ccc:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8011cd0:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8011cd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011cd8:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r5 = r5 + r1;
 8011cdc:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8011ce0:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8011ce4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011ce8:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r8 = r7 - r6;
 8011cec:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8011cf0:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8011cf4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011cf8:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            r7 = r7 + r6;
 8011cfc:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8011d00:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8011d04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011d08:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            t2 = s5 - s1;
 8011d0c:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8011d10:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8011d14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011d18:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s5 = s5 + s1;
 8011d1c:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8011d20:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8011d24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011d28:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s8 = s7 - s6;
 8011d2c:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8011d30:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8011d34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011d38:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            s7 = s7 + s6;
 8011d3c:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8011d40:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8011d44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011d48:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            r1 = r5 + s7;
 8011d4c:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8011d50:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8011d54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011d58:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = r5 - s7;
 8011d5c:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8011d60:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8011d64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011d68:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r6 = t1 + s8;
 8011d6c:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8011d70:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8011d74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011d78:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            t1 = t1 - s8;
 8011d7c:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8011d80:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8011d84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011d88:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            s1 = s5 - r7;
 8011d8c:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8011d90:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8011d94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011d98:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = s5 + r7;
 8011d9c:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8011da0:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8011da4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011da8:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s6 = t2 - r8;
 8011dac:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8011db0:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8011db4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011db8:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t2 = t2 + r8;
 8011dbc:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8011dc0:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8011dc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011dc8:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co2 * r1;
 8011dcc:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8011dd0:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8011dd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011dd8:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si2 * s1;
 8011ddc:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8011de0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8011de4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011de8:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co2 * s1;
 8011dec:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8011df0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8011df4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011df8:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si2 * r1;
 8011dfc:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8011e00:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8011e04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011e08:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i2]     = p1 + p2;
 8011e0c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8011e10:	00db      	lsls	r3, r3, #3
 8011e12:	68fa      	ldr	r2, [r7, #12]
 8011e14:	4413      	add	r3, r2
 8011e16:	ed97 7a07 	vldr	s14, [r7, #28]
 8011e1a:	edd7 7a06 	vldr	s15, [r7, #24]
 8011e1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011e22:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i2 + 1] = p3 - p4;
 8011e26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8011e2a:	00db      	lsls	r3, r3, #3
 8011e2c:	3304      	adds	r3, #4
 8011e2e:	68fa      	ldr	r2, [r7, #12]
 8011e30:	4413      	add	r3, r2
 8011e32:	ed97 7a05 	vldr	s14, [r7, #20]
 8011e36:	edd7 7a04 	vldr	s15, [r7, #16]
 8011e3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011e3e:	edc3 7a00 	vstr	s15, [r3]
            p1 = co8 * r5;
 8011e42:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8011e46:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8011e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011e4e:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si8 * s5;
 8011e52:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8011e56:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8011e5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011e5e:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co8 * s5;
 8011e62:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8011e66:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8011e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011e6e:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si8 * r5;
 8011e72:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8011e76:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8011e7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011e7e:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i8]     = p1 + p2;
 8011e82:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8011e86:	00db      	lsls	r3, r3, #3
 8011e88:	68fa      	ldr	r2, [r7, #12]
 8011e8a:	4413      	add	r3, r2
 8011e8c:	ed97 7a07 	vldr	s14, [r7, #28]
 8011e90:	edd7 7a06 	vldr	s15, [r7, #24]
 8011e94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011e98:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i8 + 1] = p3 - p4;
 8011e9c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8011ea0:	00db      	lsls	r3, r3, #3
 8011ea2:	3304      	adds	r3, #4
 8011ea4:	68fa      	ldr	r2, [r7, #12]
 8011ea6:	4413      	add	r3, r2
 8011ea8:	ed97 7a05 	vldr	s14, [r7, #20]
 8011eac:	edd7 7a04 	vldr	s15, [r7, #16]
 8011eb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011eb4:	edc3 7a00 	vstr	s15, [r3]
            p1 = co6 * r6;
 8011eb8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8011ebc:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8011ec0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011ec4:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si6 * s6;
 8011ec8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8011ecc:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8011ed0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011ed4:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co6 * s6;
 8011ed8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8011edc:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8011ee0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011ee4:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si6 * r6;
 8011ee8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8011eec:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8011ef0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011ef4:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i6]     = p1 + p2;
 8011ef8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8011efc:	00db      	lsls	r3, r3, #3
 8011efe:	68fa      	ldr	r2, [r7, #12]
 8011f00:	4413      	add	r3, r2
 8011f02:	ed97 7a07 	vldr	s14, [r7, #28]
 8011f06:	edd7 7a06 	vldr	s15, [r7, #24]
 8011f0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011f0e:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i6 + 1] = p3 - p4;
 8011f12:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8011f16:	00db      	lsls	r3, r3, #3
 8011f18:	3304      	adds	r3, #4
 8011f1a:	68fa      	ldr	r2, [r7, #12]
 8011f1c:	4413      	add	r3, r2
 8011f1e:	ed97 7a05 	vldr	s14, [r7, #20]
 8011f22:	edd7 7a04 	vldr	s15, [r7, #16]
 8011f26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011f2a:	edc3 7a00 	vstr	s15, [r3]
            p1 = co4 * t1;
 8011f2e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8011f32:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8011f36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011f3a:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si4 * t2;
 8011f3e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8011f42:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8011f46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011f4a:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co4 * t2;
 8011f4e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8011f52:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8011f56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011f5a:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si4 * t1;
 8011f5e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8011f62:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8011f66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011f6a:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i4]     = p1 + p2;
 8011f6e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011f72:	00db      	lsls	r3, r3, #3
 8011f74:	68fa      	ldr	r2, [r7, #12]
 8011f76:	4413      	add	r3, r2
 8011f78:	ed97 7a07 	vldr	s14, [r7, #28]
 8011f7c:	edd7 7a06 	vldr	s15, [r7, #24]
 8011f80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011f84:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i4 + 1] = p3 - p4;
 8011f88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011f8c:	00db      	lsls	r3, r3, #3
 8011f8e:	3304      	adds	r3, #4
 8011f90:	68fa      	ldr	r2, [r7, #12]
 8011f92:	4413      	add	r3, r2
 8011f94:	ed97 7a05 	vldr	s14, [r7, #20]
 8011f98:	edd7 7a04 	vldr	s15, [r7, #16]
 8011f9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011fa0:	edc3 7a00 	vstr	s15, [r3]

            i1 += n1;
 8011fa4:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8011fa8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8011fac:	4413      	add	r3, r2
 8011fae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         } while (i1 < fftLen);
 8011fb2:	897b      	ldrh	r3, [r7, #10]
 8011fb4:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8011fb8:	429a      	cmp	r2, r3
 8011fba:	f4ff abba 	bcc.w	8011732 <arm_radix8_butterfly_f32+0x746>

         j++;
 8011fbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011fc2:	3301      	adds	r3, #1
 8011fc4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      } while (j < n2);
 8011fc8:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8011fcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011fd0:	429a      	cmp	r2, r3
 8011fd2:	f4ff ab2c 	bcc.w	801162e <arm_radix8_butterfly_f32+0x642>

      twidCoefModifier <<= 3;
 8011fd6:	893b      	ldrh	r3, [r7, #8]
 8011fd8:	00db      	lsls	r3, r3, #3
 8011fda:	813b      	strh	r3, [r7, #8]
   } while (n2 > 7);
 8011fdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011fe0:	2b07      	cmp	r3, #7
 8011fe2:	f63f a813 	bhi.w	801100c <arm_radix8_butterfly_f32+0x20>
}
 8011fe6:	e000      	b.n	8011fea <arm_radix8_butterfly_f32+0xffe>
         break;
 8011fe8:	bf00      	nop
}
 8011fea:	bf00      	nop
 8011fec:	37f4      	adds	r7, #244	; 0xf4
 8011fee:	46bd      	mov	sp, r7
 8011ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ff4:	4770      	bx	lr
 8011ff6:	bf00      	nop

08011ff8 <stage_rfft_f32>:
#else
void stage_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 8011ff8:	b480      	push	{r7}
 8011ffa:	b095      	sub	sp, #84	; 0x54
 8011ffc:	af00      	add	r7, sp, #0
 8011ffe:	60f8      	str	r0, [r7, #12]
 8012000:	60b9      	str	r1, [r7, #8]
 8012002:	607a      	str	r2, [r7, #4]
        int32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t * pCoeff = S->pTwiddleRFFT;       /* Points to RFFT Twiddle factors */
 8012004:	68fb      	ldr	r3, [r7, #12]
 8012006:	695b      	ldr	r3, [r3, #20]
 8012008:	64bb      	str	r3, [r7, #72]	; 0x48
        float32_t *pA = p;                          /* increasing pointer */
 801200a:	68bb      	ldr	r3, [r7, #8]
 801200c:	647b      	str	r3, [r7, #68]	; 0x44
        float32_t *pB = p;                          /* decreasing pointer */
 801200e:	68bb      	ldr	r3, [r7, #8]
 8012010:	643b      	str	r3, [r7, #64]	; 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b;                         /* temporary variables */
        float32_t p0, p1, p2, p3;                   /* temporary variables */


   k = (S->Sint).fftLen - 1;
 8012012:	68fb      	ldr	r3, [r7, #12]
 8012014:	881b      	ldrh	r3, [r3, #0]
 8012016:	3b01      	subs	r3, #1
 8012018:	64fb      	str	r3, [r7, #76]	; 0x4c

   /* Pack first and last sample of the frequency domain together */

   xBR = pB[0];
 801201a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801201c:	681b      	ldr	r3, [r3, #0]
 801201e:	63fb      	str	r3, [r7, #60]	; 0x3c
   xBI = pB[1];
 8012020:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012022:	685b      	ldr	r3, [r3, #4]
 8012024:	63bb      	str	r3, [r7, #56]	; 0x38
   xAR = pA[0];
 8012026:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	637b      	str	r3, [r7, #52]	; 0x34
   xAI = pA[1];
 801202c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801202e:	685b      	ldr	r3, [r3, #4]
 8012030:	633b      	str	r3, [r7, #48]	; 0x30

   twR = *pCoeff++ ;
 8012032:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012034:	1d1a      	adds	r2, r3, #4
 8012036:	64ba      	str	r2, [r7, #72]	; 0x48
 8012038:	681b      	ldr	r3, [r3, #0]
 801203a:	62fb      	str	r3, [r7, #44]	; 0x2c
   twI = *pCoeff++ ;
 801203c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801203e:	1d1a      	adds	r2, r3, #4
 8012040:	64ba      	str	r2, [r7, #72]	; 0x48
 8012042:	681b      	ldr	r3, [r3, #0]
 8012044:	62bb      	str	r3, [r7, #40]	; 0x28


   // U1 = XA(1) + XB(1); % It is real
   t1a = xBR + xAR  ;
 8012046:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 801204a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801204e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012052:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

   // U2 = XB(1) - XA(1); % It is imaginary
   t1b = xBI + xAI  ;
 8012056:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 801205a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801205e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012062:	edc7 7a08 	vstr	s15, [r7, #32]

   // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
   // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
   *pOut++ = 0.5f * ( t1a + t1b );
 8012066:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 801206a:	edd7 7a08 	vldr	s15, [r7, #32]
 801206e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	1d1a      	adds	r2, r3, #4
 8012076:	607a      	str	r2, [r7, #4]
 8012078:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801207c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012080:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( t1a - t1b );
 8012084:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8012088:	edd7 7a08 	vldr	s15, [r7, #32]
 801208c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	1d1a      	adds	r2, r3, #4
 8012094:	607a      	str	r2, [r7, #4]
 8012096:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801209a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801209e:	edc3 7a00 	vstr	s15, [r3]

   // XA(1) = 1/2*( U1 - imag(U2) +  i*( U1 +imag(U2) ));
   pB  = p + 2*k;
 80120a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80120a4:	00db      	lsls	r3, r3, #3
 80120a6:	68ba      	ldr	r2, [r7, #8]
 80120a8:	4413      	add	r3, r2
 80120aa:	643b      	str	r3, [r7, #64]	; 0x40
   pA += 2;
 80120ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80120ae:	3308      	adds	r3, #8
 80120b0:	647b      	str	r3, [r7, #68]	; 0x44
         end
         XA(1) = 1/2* (XA(1) + XB(1) + TW(1) * (XB(1) - XA(1))) + i*( 1/2*( XA(1) + XB(1) + i*( XA(1) - XB(1))));
         X = XA;
      */

      xBI = pB[1];
 80120b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80120b4:	685b      	ldr	r3, [r3, #4]
 80120b6:	63bb      	str	r3, [r7, #56]	; 0x38
      xBR = pB[0];
 80120b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80120ba:	681b      	ldr	r3, [r3, #0]
 80120bc:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAR = pA[0];
 80120be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80120c0:	681b      	ldr	r3, [r3, #0]
 80120c2:	637b      	str	r3, [r7, #52]	; 0x34
      xAI = pA[1];
 80120c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80120c6:	685b      	ldr	r3, [r3, #4]
 80120c8:	633b      	str	r3, [r7, #48]	; 0x30

      twR = *pCoeff++;
 80120ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80120cc:	1d1a      	adds	r2, r3, #4
 80120ce:	64ba      	str	r2, [r7, #72]	; 0x48
 80120d0:	681b      	ldr	r3, [r3, #0]
 80120d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 80120d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80120d6:	1d1a      	adds	r2, r3, #4
 80120d8:	64ba      	str	r2, [r7, #72]	; 0x48
 80120da:	681b      	ldr	r3, [r3, #0]
 80120dc:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xBR - xAR ;
 80120de:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80120e2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80120e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80120ea:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xBI + xAI ;
 80120ee:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80120f2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80120f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80120fa:	edc7 7a08 	vstr	s15, [r7, #32]

      // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
      // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
      p0 = twR * t1a;
 80120fe:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8012102:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8012106:	ee67 7a27 	vmul.f32	s15, s14, s15
 801210a:	edc7 7a07 	vstr	s15, [r7, #28]
      p1 = twI * t1a;
 801210e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8012112:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8012116:	ee67 7a27 	vmul.f32	s15, s14, s15
 801211a:	edc7 7a06 	vstr	s15, [r7, #24]
      p2 = twR * t1b;
 801211e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8012122:	edd7 7a08 	vldr	s15, [r7, #32]
 8012126:	ee67 7a27 	vmul.f32	s15, s14, s15
 801212a:	edc7 7a05 	vstr	s15, [r7, #20]
      p3 = twI * t1b;
 801212e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8012132:	edd7 7a08 	vldr	s15, [r7, #32]
 8012136:	ee67 7a27 	vmul.f32	s15, s14, s15
 801213a:	edc7 7a04 	vstr	s15, [r7, #16]

      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 801213e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8012142:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8012146:	ee37 7a27 	vadd.f32	s14, s14, s15
 801214a:	edd7 7a07 	vldr	s15, [r7, #28]
 801214e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012152:	edd7 7a04 	vldr	s15, [r7, #16]
 8012156:	ee77 7a27 	vadd.f32	s15, s14, s15
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	1d1a      	adds	r2, r3, #4
 801215e:	607a      	str	r2, [r7, #4]
 8012160:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8012164:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012168:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 801216c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8012170:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8012174:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012178:	edd7 7a06 	vldr	s15, [r7, #24]
 801217c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012180:	edd7 7a05 	vldr	s15, [r7, #20]
 8012184:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	1d1a      	adds	r2, r3, #4
 801218c:	607a      	str	r2, [r7, #4]
 801218e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8012192:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012196:	edc3 7a00 	vstr	s15, [r3]


      pA += 2;
 801219a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801219c:	3308      	adds	r3, #8
 801219e:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 80121a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80121a2:	3b08      	subs	r3, #8
 80121a4:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 80121a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80121a8:	3b01      	subs	r3, #1
 80121aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   } while (k > 0);
 80121ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	f73f af7f 	bgt.w	80120b2 <stage_rfft_f32+0xba>
}
 80121b4:	bf00      	nop
 80121b6:	bf00      	nop
 80121b8:	3754      	adds	r7, #84	; 0x54
 80121ba:	46bd      	mov	sp, r7
 80121bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121c0:	4770      	bx	lr

080121c2 <merge_rfft_f32>:
/* Prepares data for inverse cfft */
void merge_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 80121c2:	b480      	push	{r7}
 80121c4:	b095      	sub	sp, #84	; 0x54
 80121c6:	af00      	add	r7, sp, #0
 80121c8:	60f8      	str	r0, [r7, #12]
 80121ca:	60b9      	str	r1, [r7, #8]
 80121cc:	607a      	str	r2, [r7, #4]
        int32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t *pCoeff = S->pTwiddleRFFT;        /* Points to RFFT Twiddle factors */
 80121ce:	68fb      	ldr	r3, [r7, #12]
 80121d0:	695b      	ldr	r3, [r3, #20]
 80121d2:	64bb      	str	r3, [r7, #72]	; 0x48
        float32_t *pA = p;                          /* increasing pointer */
 80121d4:	68bb      	ldr	r3, [r7, #8]
 80121d6:	647b      	str	r3, [r7, #68]	; 0x44
        float32_t *pB = p;                          /* decreasing pointer */
 80121d8:	68bb      	ldr	r3, [r7, #8]
 80121da:	643b      	str	r3, [r7, #64]	; 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b, r, s, t, u;             /* temporary variables */

   k = (S->Sint).fftLen - 1;
 80121dc:	68fb      	ldr	r3, [r7, #12]
 80121de:	881b      	ldrh	r3, [r3, #0]
 80121e0:	3b01      	subs	r3, #1
 80121e2:	64fb      	str	r3, [r7, #76]	; 0x4c

   xAR = pA[0];
 80121e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80121e6:	681b      	ldr	r3, [r3, #0]
 80121e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   xAI = pA[1];
 80121ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80121ec:	685b      	ldr	r3, [r3, #4]
 80121ee:	63bb      	str	r3, [r7, #56]	; 0x38

   pCoeff += 2 ;
 80121f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80121f2:	3308      	adds	r3, #8
 80121f4:	64bb      	str	r3, [r7, #72]	; 0x48

   *pOut++ = 0.5f * ( xAR + xAI );
 80121f6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80121fa:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80121fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	1d1a      	adds	r2, r3, #4
 8012206:	607a      	str	r2, [r7, #4]
 8012208:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801220c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012210:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( xAR - xAI );
 8012214:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8012218:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801221c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	1d1a      	adds	r2, r3, #4
 8012224:	607a      	str	r2, [r7, #4]
 8012226:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801222a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801222e:	edc3 7a00 	vstr	s15, [r3]

   pB  =  p + 2*k ;
 8012232:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012234:	00db      	lsls	r3, r3, #3
 8012236:	68ba      	ldr	r2, [r7, #8]
 8012238:	4413      	add	r3, r2
 801223a:	643b      	str	r3, [r7, #64]	; 0x40
   pA +=  2	   ;
 801223c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801223e:	3308      	adds	r3, #8
 8012240:	647b      	str	r3, [r7, #68]	; 0x44

   while (k > 0)
 8012242:	e07c      	b.n	801233e <merge_rfft_f32+0x17c>
   {
      /* G is half of the frequency complex spectrum */
      //for k = 2:N
      //    Xk(k) = 1/2 * (G(k) + conj(G(N-k+2)) + Tw(k)*( G(k) - conj(G(N-k+2))));
      xBI =   pB[1]    ;
 8012244:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012246:	685b      	ldr	r3, [r3, #4]
 8012248:	637b      	str	r3, [r7, #52]	; 0x34
      xBR =   pB[0]    ;
 801224a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801224c:	681b      	ldr	r3, [r3, #0]
 801224e:	633b      	str	r3, [r7, #48]	; 0x30
      xAR =  pA[0];
 8012250:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012252:	681b      	ldr	r3, [r3, #0]
 8012254:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAI =  pA[1];
 8012256:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012258:	685b      	ldr	r3, [r3, #4]
 801225a:	63bb      	str	r3, [r7, #56]	; 0x38

      twR = *pCoeff++;
 801225c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801225e:	1d1a      	adds	r2, r3, #4
 8012260:	64ba      	str	r2, [r7, #72]	; 0x48
 8012262:	681b      	ldr	r3, [r3, #0]
 8012264:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 8012266:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012268:	1d1a      	adds	r2, r3, #4
 801226a:	64ba      	str	r2, [r7, #72]	; 0x48
 801226c:	681b      	ldr	r3, [r3, #0]
 801226e:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xAR - xBR ;
 8012270:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8012274:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8012278:	ee77 7a67 	vsub.f32	s15, s14, s15
 801227c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xAI + xBI ;
 8012280:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8012284:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8012288:	ee77 7a27 	vadd.f32	s15, s14, s15
 801228c:	edc7 7a08 	vstr	s15, [r7, #32]

      r = twR * t1a;
 8012290:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8012294:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8012298:	ee67 7a27 	vmul.f32	s15, s14, s15
 801229c:	edc7 7a07 	vstr	s15, [r7, #28]
      s = twI * t1b;
 80122a0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80122a4:	edd7 7a08 	vldr	s15, [r7, #32]
 80122a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80122ac:	edc7 7a06 	vstr	s15, [r7, #24]
      t = twI * t1a;
 80122b0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80122b4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80122b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80122bc:	edc7 7a05 	vstr	s15, [r7, #20]
      u = twR * t1b;
 80122c0:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80122c4:	edd7 7a08 	vldr	s15, [r7, #32]
 80122c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80122cc:	edc7 7a04 	vstr	s15, [r7, #16]

      // real(tw * (xA - xB)) = twR * (xAR - xBR) - twI * (xAI - xBI);
      // imag(tw * (xA - xB)) = twI * (xAR - xBR) + twR * (xAI - xBI);
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 80122d0:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80122d4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80122d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80122dc:	edd7 7a07 	vldr	s15, [r7, #28]
 80122e0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80122e4:	edd7 7a06 	vldr	s15, [r7, #24]
 80122e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	1d1a      	adds	r2, r3, #4
 80122f0:	607a      	str	r2, [r7, #4]
 80122f2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80122f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80122fa:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 80122fe:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8012302:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8012306:	ee37 7a67 	vsub.f32	s14, s14, s15
 801230a:	edd7 7a05 	vldr	s15, [r7, #20]
 801230e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012312:	edd7 7a04 	vldr	s15, [r7, #16]
 8012316:	ee77 7a67 	vsub.f32	s15, s14, s15
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	1d1a      	adds	r2, r3, #4
 801231e:	607a      	str	r2, [r7, #4]
 8012320:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8012324:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012328:	edc3 7a00 	vstr	s15, [r3]

      pA += 2;
 801232c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801232e:	3308      	adds	r3, #8
 8012330:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 8012332:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012334:	3b08      	subs	r3, #8
 8012336:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 8012338:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801233a:	3b01      	subs	r3, #1
 801233c:	64fb      	str	r3, [r7, #76]	; 0x4c
   while (k > 0)
 801233e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012340:	2b00      	cmp	r3, #0
 8012342:	f73f af7f 	bgt.w	8012244 <merge_rfft_f32+0x82>
   }

}
 8012346:	bf00      	nop
 8012348:	bf00      	nop
 801234a:	3754      	adds	r7, #84	; 0x54
 801234c:	46bd      	mov	sp, r7
 801234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012352:	4770      	bx	lr

08012354 <arm_rfft_fast_f32>:
void arm_rfft_fast_f32(
  const arm_rfft_fast_instance_f32 * S,
  float32_t * p,
  float32_t * pOut,
  uint8_t ifftFlag)
{
 8012354:	b580      	push	{r7, lr}
 8012356:	b086      	sub	sp, #24
 8012358:	af00      	add	r7, sp, #0
 801235a:	60f8      	str	r0, [r7, #12]
 801235c:	60b9      	str	r1, [r7, #8]
 801235e:	607a      	str	r2, [r7, #4]
 8012360:	70fb      	strb	r3, [r7, #3]
   const arm_cfft_instance_f32 * Sint = &(S->Sint);
 8012362:	68fb      	ldr	r3, [r7, #12]
 8012364:	617b      	str	r3, [r7, #20]

   /* Calculation of Real FFT */
   if (ifftFlag)
 8012366:	78fb      	ldrb	r3, [r7, #3]
 8012368:	2b00      	cmp	r3, #0
 801236a:	d00b      	beq.n	8012384 <arm_rfft_fast_f32+0x30>
   {
      /*  Real FFT compression */
      merge_rfft_f32(S, p, pOut);
 801236c:	687a      	ldr	r2, [r7, #4]
 801236e:	68b9      	ldr	r1, [r7, #8]
 8012370:	68f8      	ldr	r0, [r7, #12]
 8012372:	f7ff ff26 	bl	80121c2 <merge_rfft_f32>
      /* Complex radix-4 IFFT process */
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
 8012376:	78fa      	ldrb	r2, [r7, #3]
 8012378:	2301      	movs	r3, #1
 801237a:	6879      	ldr	r1, [r7, #4]
 801237c:	6978      	ldr	r0, [r7, #20]
 801237e:	f7fe fd7b 	bl	8010e78 <arm_cfft_f32>
      arm_cfft_f32( Sint, p, ifftFlag, 1);

      /*  Real FFT extraction */
      stage_rfft_f32(S, p, pOut);
   }
}
 8012382:	e00a      	b.n	801239a <arm_rfft_fast_f32+0x46>
      arm_cfft_f32( Sint, p, ifftFlag, 1);
 8012384:	78fa      	ldrb	r2, [r7, #3]
 8012386:	2301      	movs	r3, #1
 8012388:	68b9      	ldr	r1, [r7, #8]
 801238a:	6978      	ldr	r0, [r7, #20]
 801238c:	f7fe fd74 	bl	8010e78 <arm_cfft_f32>
      stage_rfft_f32(S, p, pOut);
 8012390:	687a      	ldr	r2, [r7, #4]
 8012392:	68b9      	ldr	r1, [r7, #8]
 8012394:	68f8      	ldr	r0, [r7, #12]
 8012396:	f7ff fe2f 	bl	8011ff8 <stage_rfft_f32>
}
 801239a:	bf00      	nop
 801239c:	3718      	adds	r7, #24
 801239e:	46bd      	mov	sp, r7
 80123a0:	bd80      	pop	{r7, pc}

080123a2 <arm_fully_connected_s8>:
                                  const q7_t *kernel,
                                  const cmsis_nn_dims *bias_dims,
                                  const int32_t *bias,
                                  const cmsis_nn_dims *output_dims,
                                  q7_t *output)
{
 80123a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80123a4:	b093      	sub	sp, #76	; 0x4c
 80123a6:	af0a      	add	r7, sp, #40	; 0x28
 80123a8:	6178      	str	r0, [r7, #20]
 80123aa:	6139      	str	r1, [r7, #16]
 80123ac:	60fa      	str	r2, [r7, #12]
 80123ae:	60bb      	str	r3, [r7, #8]
    (void)bias_dims;
    (void)ctx;
    int32_t batch_cnt = input_dims->n;
 80123b0:	68bb      	ldr	r3, [r7, #8]
 80123b2:	681b      	ldr	r3, [r3, #0]
 80123b4:	61fb      	str	r3, [r7, #28]

    while (batch_cnt)
 80123b6:	e033      	b.n	8012420 <arm_fully_connected_s8+0x7e>
    {
        arm_nn_vec_mat_mult_t_s8(input,
 80123b8:	693b      	ldr	r3, [r7, #16]
 80123ba:	681b      	ldr	r3, [r3, #0]
 80123bc:	607b      	str	r3, [r7, #4]
 80123be:	693a      	ldr	r2, [r7, #16]
 80123c0:	6852      	ldr	r2, [r2, #4]
 80123c2:	6939      	ldr	r1, [r7, #16]
 80123c4:	6889      	ldr	r1, [r1, #8]
 80123c6:	68f8      	ldr	r0, [r7, #12]
 80123c8:	6800      	ldr	r0, [r0, #0]
 80123ca:	68fc      	ldr	r4, [r7, #12]
 80123cc:	6864      	ldr	r4, [r4, #4]
 80123ce:	6bfd      	ldr	r5, [r7, #60]	; 0x3c
 80123d0:	682d      	ldr	r5, [r5, #0]
 80123d2:	6cfe      	ldr	r6, [r7, #76]	; 0x4c
 80123d4:	68f6      	ldr	r6, [r6, #12]
 80123d6:	693b      	ldr	r3, [r7, #16]
 80123d8:	68db      	ldr	r3, [r3, #12]
 80123da:	603b      	str	r3, [r7, #0]
 80123dc:	693b      	ldr	r3, [r7, #16]
 80123de:	691b      	ldr	r3, [r3, #16]
 80123e0:	9308      	str	r3, [sp, #32]
 80123e2:	683b      	ldr	r3, [r7, #0]
 80123e4:	9307      	str	r3, [sp, #28]
 80123e6:	9606      	str	r6, [sp, #24]
 80123e8:	9505      	str	r5, [sp, #20]
 80123ea:	9404      	str	r4, [sp, #16]
 80123ec:	9003      	str	r0, [sp, #12]
 80123ee:	9102      	str	r1, [sp, #8]
 80123f0:	9201      	str	r2, [sp, #4]
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	9300      	str	r3, [sp, #0]
 80123f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80123fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80123fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80123fe:	f000 f822 	bl	8012446 <arm_nn_vec_mat_mult_t_s8>
                                 quant_params->shift,
                                 filter_dims->n, /* col_dim or accum_depth */
                                 output_dims->c, /* row_dim or output_depth */
                                 fc_params->activation.min,
                                 fc_params->activation.max);
        input += filter_dims->n;
 8012402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012404:	681b      	ldr	r3, [r3, #0]
 8012406:	461a      	mov	r2, r3
 8012408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801240a:	4413      	add	r3, r2
 801240c:	63bb      	str	r3, [r7, #56]	; 0x38
        output += output_dims->c;
 801240e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012410:	68db      	ldr	r3, [r3, #12]
 8012412:	461a      	mov	r2, r3
 8012414:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012416:	4413      	add	r3, r2
 8012418:	653b      	str	r3, [r7, #80]	; 0x50
        batch_cnt--;
 801241a:	69fb      	ldr	r3, [r7, #28]
 801241c:	3b01      	subs	r3, #1
 801241e:	61fb      	str	r3, [r7, #28]
    while (batch_cnt)
 8012420:	69fb      	ldr	r3, [r7, #28]
 8012422:	2b00      	cmp	r3, #0
 8012424:	d1c8      	bne.n	80123b8 <arm_fully_connected_s8+0x16>
    }
    return (ARM_MATH_SUCCESS);
 8012426:	2300      	movs	r3, #0
}
 8012428:	4618      	mov	r0, r3
 801242a:	3724      	adds	r7, #36	; 0x24
 801242c:	46bd      	mov	sp, r7
 801242e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012430 <arm_fully_connected_s8_get_buffer_size>:

int32_t arm_fully_connected_s8_get_buffer_size(const cmsis_nn_dims *filter_dims)
{
 8012430:	b480      	push	{r7}
 8012432:	b083      	sub	sp, #12
 8012434:	af00      	add	r7, sp, #0
 8012436:	6078      	str	r0, [r7, #4]
    (void)filter_dims;
    return 0;
 8012438:	2300      	movs	r3, #0
}
 801243a:	4618      	mov	r0, r3
 801243c:	370c      	adds	r7, #12
 801243e:	46bd      	mov	sp, r7
 8012440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012444:	4770      	bx	lr

08012446 <arm_nn_vec_mat_mult_t_s8>:
                                    const int32_t dst_shift,
                                    const int32_t rhs_cols,
                                    const int32_t rhs_rows,
                                    const int32_t activation_min,
                                    const int32_t activation_max)
{
 8012446:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801244a:	f5ad 6dc6 	sub.w	sp, sp, #1584	; 0x630
 801244e:	af00      	add	r7, sp, #0
 8012450:	f507 64c6 	add.w	r4, r7, #1584	; 0x630
 8012454:	f2a4 54dc 	subw	r4, r4, #1500	; 0x5dc
 8012458:	6020      	str	r0, [r4, #0]
 801245a:	f507 60c6 	add.w	r0, r7, #1584	; 0x630
 801245e:	f5a0 60bc 	sub.w	r0, r0, #1504	; 0x5e0
 8012462:	6001      	str	r1, [r0, #0]
 8012464:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8012468:	f2a1 51e4 	subw	r1, r1, #1508	; 0x5e4
 801246c:	600a      	str	r2, [r1, #0]
 801246e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8012472:	f5a2 62bd 	sub.w	r2, r2, #1512	; 0x5e8
 8012476:	6013      	str	r3, [r2, #0]
        *dst = MIN(acc_0, activation_max);
        dst++;
    }

#elif defined(ARM_MATH_DSP)
    const int32_t off0 = rhs_cols - 4;
 8012478:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 801247c:	3b04      	subs	r3, #4
 801247e:	f8c7 3614 	str.w	r3, [r7, #1556]	; 0x614
    const int16_t lhs_offset_s16 = lhs_offset;
 8012482:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 8012486:	f8a7 3612 	strh.w	r3, [r7, #1554]	; 0x612
    const int16_t rhs_offset_s16 = rhs_offset;
 801248a:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 801248e:	f8a7 3610 	strh.w	r3, [r7, #1552]	; 0x610

    const uint32_t lhs_offset_s16x2 = __PKHBT(lhs_offset_s16, lhs_offset_s16, 16);
 8012492:	f9b7 3612 	ldrsh.w	r3, [r7, #1554]	; 0x612
 8012496:	f8c7 360c 	str.w	r3, [r7, #1548]	; 0x60c
 801249a:	f9b7 3612 	ldrsh.w	r3, [r7, #1554]	; 0x612
 801249e:	f8c7 3608 	str.w	r3, [r7, #1544]	; 0x608
 80124a2:	f8d7 260c 	ldr.w	r2, [r7, #1548]	; 0x60c
 80124a6:	f8d7 3608 	ldr.w	r3, [r7, #1544]	; 0x608
 80124aa:	eac2 4303 	pkhbt	r3, r2, r3, lsl #16
 80124ae:	f8c7 3604 	str.w	r3, [r7, #1540]	; 0x604
 80124b2:	f8d7 3604 	ldr.w	r3, [r7, #1540]	; 0x604
 80124b6:	f8c7 3600 	str.w	r3, [r7, #1536]	; 0x600
    const uint32_t rhs_offset_s16x2 = __PKHBT(rhs_offset_s16, rhs_offset_s16, 16);
 80124ba:	f9b7 3610 	ldrsh.w	r3, [r7, #1552]	; 0x610
 80124be:	f8c7 35fc 	str.w	r3, [r7, #1532]	; 0x5fc
 80124c2:	f9b7 3610 	ldrsh.w	r3, [r7, #1552]	; 0x610
 80124c6:	f8c7 35f8 	str.w	r3, [r7, #1528]	; 0x5f8
 80124ca:	f8d7 25fc 	ldr.w	r2, [r7, #1532]	; 0x5fc
 80124ce:	f8d7 35f8 	ldr.w	r3, [r7, #1528]	; 0x5f8
 80124d2:	eac2 4303 	pkhbt	r3, r2, r3, lsl #16
 80124d6:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
 80124da:	f8d7 35f4 	ldr.w	r3, [r7, #1524]	; 0x5f4
 80124de:	f8c7 35f0 	str.w	r3, [r7, #1520]	; 0x5f0

    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 80124e2:	2300      	movs	r3, #0
 80124e4:	f8c7 362c 	str.w	r3, [r7, #1580]	; 0x62c
 80124e8:	f001 bd13 	b.w	8013f12 <arm_nn_vec_mat_mult_t_s8+0x1acc>
    {
        const q7_t *lhs_ptr = &lhs[0];
 80124ec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80124f0:	f5a3 62ac 	sub.w	r2, r3, #1376	; 0x560
 80124f4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80124f8:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 80124fc:	681b      	ldr	r3, [r3, #0]
 80124fe:	6013      	str	r3, [r2, #0]
        const q7_t *rhs_ptr = &rhs[0];
 8012500:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012504:	f2a3 5264 	subw	r2, r3, #1380	; 0x564
 8012508:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801250c:	f5a3 63bc 	sub.w	r3, r3, #1504	; 0x5e0
 8012510:	681b      	ldr	r3, [r3, #0]
 8012512:	6013      	str	r3, [r2, #0]

        q31_t res00 = 0;
 8012514:	2300      	movs	r3, #0
 8012516:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
        q31_t res01 = 0;
 801251a:	2300      	movs	r3, #0
 801251c:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
        if (bias)
 8012520:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012524:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 8012528:	681b      	ldr	r3, [r3, #0]
 801252a:	2b00      	cmp	r3, #0
 801252c:	d01b      	beq.n	8012566 <arm_nn_vec_mat_mult_t_s8+0x120>
        {
            res00 = *bias++;
 801252e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012532:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 8012536:	6819      	ldr	r1, [r3, #0]
 8012538:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801253c:	f2a3 52e4 	subw	r2, r3, #1508	; 0x5e4
 8012540:	1d0b      	adds	r3, r1, #4
 8012542:	6013      	str	r3, [r2, #0]
 8012544:	680b      	ldr	r3, [r1, #0]
 8012546:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            res01 = *bias++;
 801254a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801254e:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 8012552:	6819      	ldr	r1, [r3, #0]
 8012554:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012558:	f2a3 52e4 	subw	r2, r3, #1508	; 0x5e4
 801255c:	1d0b      	adds	r3, r1, #4
 801255e:	6013      	str	r3, [r2, #0]
 8012560:	680b      	ldr	r3, [r1, #0]
 8012562:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
        }

        int32_t rhs_cols_idx = 0;
 8012566:	2300      	movs	r3, #0
 8012568:	f8c7 3620 	str.w	r3, [r7, #1568]	; 0x620

        q31_t val0, val1, val2, val3, val4, val5;
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 801256c:	f001 b9db 	b.w	8013926 <arm_nn_vec_mat_mult_t_s8+0x14e0>
 8012570:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012574:	f5a3 724b 	sub.w	r2, r3, #812	; 0x32c
 8012578:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801257c:	6013      	str	r3, [r2, #0]
  @return        q31 value
 */
__STATIC_FORCEINLINE q31_t arm_nn_read_q7x4_ia(const q7_t **in_q7)
{
    q31_t val;
    memcpy(&val, *in_q7, 4);
 801257e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012582:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 8012586:	681b      	ldr	r3, [r3, #0]
 8012588:	681b      	ldr	r3, [r3, #0]
 801258a:	681b      	ldr	r3, [r3, #0]
 801258c:	461a      	mov	r2, r3
 801258e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012592:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8012596:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8012598:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801259c:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 80125a0:	681b      	ldr	r3, [r3, #0]
 80125a2:	681b      	ldr	r3, [r3, #0]
 80125a4:	1d1a      	adds	r2, r3, #4
 80125a6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80125aa:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 80125ae:	681b      	ldr	r3, [r3, #0]
 80125b0:	601a      	str	r2, [r3, #0]

    return (val);
 80125b2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80125b6:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 80125ba:	681b      	ldr	r3, [r3, #0]
        {
            // Read 4 x int8 values from the RHS matrix
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 80125bc:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val2 = __SXTAB16(rhs_offset_s16x2, val0);
 80125c0:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 80125c4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80125c8:	f5a3 7248 	sub.w	r2, r3, #800	; 0x320
 80125cc:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 80125d0:	6013      	str	r3, [r2, #0]
 80125d2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80125d6:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 80125da:	6019      	str	r1, [r3, #0]

__STATIC_FORCEINLINE uint32_t __SXTAB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80125dc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80125e0:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 80125e4:	681a      	ldr	r2, [r3, #0]
 80125e6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80125ea:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 80125ee:	681b      	ldr	r3, [r3, #0]
 80125f0:	fa22 f283 	sxtab16	r2, r2, r3
 80125f4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80125f8:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 80125fc:	601a      	str	r2, [r3, #0]
  return(result);
 80125fe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012602:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8012606:	681b      	ldr	r3, [r3, #0]
 8012608:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 801260c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012610:	f5a3 7247 	sub.w	r2, r3, #796	; 0x31c
 8012614:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8012618:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801261a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801261e:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8012622:	681b      	ldr	r3, [r3, #0]
 8012624:	681b      	ldr	r3, [r3, #0]
 8012626:	681b      	ldr	r3, [r3, #0]
 8012628:	461a      	mov	r2, r3
 801262a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801262e:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8012632:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8012634:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012638:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 801263c:	681b      	ldr	r3, [r3, #0]
 801263e:	681b      	ldr	r3, [r3, #0]
 8012640:	1d1a      	adds	r2, r3, #4
 8012642:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012646:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 801264a:	681b      	ldr	r3, [r3, #0]
 801264c:	601a      	str	r2, [r3, #0]
    return (val);
 801264e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012652:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8012656:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the LHS vector
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 8012658:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 801265c:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 8012660:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012664:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8012668:	601a      	str	r2, [r3, #0]
 801266a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801266e:	f5a3 7246 	sub.w	r2, r3, #792	; 0x318
 8012672:	2308      	movs	r3, #8
 8012674:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8012676:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801267a:	f5a3 7246 	sub.w	r2, r3, #792	; 0x318
 801267e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012682:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 8012686:	681b      	ldr	r3, [r3, #0]
 8012688:	f003 031f 	and.w	r3, r3, #31
 801268c:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801268e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012692:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 8012696:	681b      	ldr	r3, [r3, #0]
 8012698:	2b00      	cmp	r3, #0
 801269a:	d105      	bne.n	80126a8 <arm_nn_vec_mat_mult_t_s8+0x262>
    return op1;
 801269c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80126a0:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 80126a4:	6819      	ldr	r1, [r3, #0]
 80126a6:	e00b      	b.n	80126c0 <arm_nn_vec_mat_mult_t_s8+0x27a>
  return (op1 >> op2) | (op1 << (32U - op2));
 80126a8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80126ac:	f5a3 7245 	sub.w	r2, r3, #788	; 0x314
 80126b0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80126b4:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 80126b8:	6812      	ldr	r2, [r2, #0]
 80126ba:	681b      	ldr	r3, [r3, #0]
 80126bc:	fa62 f103 	ror.w	r1, r2, r3
 80126c0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80126c4:	f5a3 7242 	sub.w	r2, r3, #776	; 0x308
 80126c8:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 80126cc:	6013      	str	r3, [r2, #0]
 80126ce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80126d2:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 80126d6:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80126d8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80126dc:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 80126e0:	681a      	ldr	r2, [r3, #0]
 80126e2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80126e6:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 80126ea:	681b      	ldr	r3, [r3, #0]
 80126ec:	fa22 f283 	sxtab16	r2, r2, r3
 80126f0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80126f4:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 80126f8:	601a      	str	r2, [r3, #0]
  return(result);
 80126fa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80126fe:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8012702:	681b      	ldr	r3, [r3, #0]
 8012704:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val3 = __SXTAB16(lhs_offset_s16x2, val1);
 8012708:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 801270c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012710:	f5a3 723f 	sub.w	r2, r3, #764	; 0x2fc
 8012714:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 8012718:	6013      	str	r3, [r2, #0]
 801271a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801271e:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 8012722:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012724:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012728:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 801272c:	681a      	ldr	r2, [r3, #0]
 801272e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012732:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 8012736:	681b      	ldr	r3, [r3, #0]
 8012738:	fa22 f283 	sxtab16	r2, r2, r3
 801273c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012740:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8012744:	601a      	str	r2, [r3, #0]
  return(result);
 8012746:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801274a:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 801274e:	681b      	ldr	r3, [r3, #0]
 8012750:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
            // Read 4 x int8 values from the RHS matrix
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 8012754:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012758:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 801275c:	681a      	ldr	r2, [r3, #0]
 801275e:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 8012762:	441a      	add	r2, r3
 8012764:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012768:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 801276c:	601a      	str	r2, [r3, #0]
 801276e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012772:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8012776:	681b      	ldr	r3, [r3, #0]
 8012778:	681b      	ldr	r3, [r3, #0]
 801277a:	461a      	mov	r2, r3
  @return        q31 value
 */
__STATIC_FORCEINLINE q31_t arm_nn_read_q7x4(const q7_t *in_q7)
{
    q31_t val;
    memcpy(&val, in_q7, 4);
 801277c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012780:	f2a3 5384 	subw	r3, r3, #1412	; 0x584
 8012784:	601a      	str	r2, [r3, #0]

    return (val);
 8012786:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801278a:	f2a3 5384 	subw	r3, r3, #1412	; 0x584
 801278e:	681b      	ldr	r3, [r3, #0]
 8012790:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            val1 = __SXTAB16(lhs_offset_s16x2, __ROR(val1, 8));
 8012794:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 8012798:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801279c:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 80127a0:	601a      	str	r2, [r3, #0]
 80127a2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80127a6:	f5a3 723d 	sub.w	r2, r3, #756	; 0x2f4
 80127aa:	2308      	movs	r3, #8
 80127ac:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 80127ae:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80127b2:	f5a3 723d 	sub.w	r2, r3, #756	; 0x2f4
 80127b6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80127ba:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 80127be:	681b      	ldr	r3, [r3, #0]
 80127c0:	f003 031f 	and.w	r3, r3, #31
 80127c4:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 80127c6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80127ca:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 80127ce:	681b      	ldr	r3, [r3, #0]
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	d105      	bne.n	80127e0 <arm_nn_vec_mat_mult_t_s8+0x39a>
    return op1;
 80127d4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80127d8:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 80127dc:	6819      	ldr	r1, [r3, #0]
 80127de:	e00b      	b.n	80127f8 <arm_nn_vec_mat_mult_t_s8+0x3b2>
  return (op1 >> op2) | (op1 << (32U - op2));
 80127e0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80127e4:	f5a3 723c 	sub.w	r2, r3, #752	; 0x2f0
 80127e8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80127ec:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 80127f0:	6812      	ldr	r2, [r2, #0]
 80127f2:	681b      	ldr	r3, [r3, #0]
 80127f4:	fa62 f103 	ror.w	r1, r2, r3
 80127f8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80127fc:	f5a3 7239 	sub.w	r2, r3, #740	; 0x2e4
 8012800:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 8012804:	6013      	str	r3, [r2, #0]
 8012806:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801280a:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 801280e:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012810:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012814:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8012818:	681a      	ldr	r2, [r3, #0]
 801281a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801281e:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8012822:	681b      	ldr	r3, [r3, #0]
 8012824:	fa22 f283 	sxtab16	r2, r2, r3
 8012828:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801282c:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8012830:	601a      	str	r2, [r3, #0]
  return(result);
 8012832:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012836:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 801283a:	681b      	ldr	r3, [r3, #0]
 801283c:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0

            // Perform the accumulations
            res00 = __SMLAD(val3, val2, res00);
 8012840:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 8012844:	f8d7 15c4 	ldr.w	r1, [r7, #1476]	; 0x5c4
 8012848:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 801284c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012850:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8012854:	601a      	str	r2, [r3, #0]
 8012856:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801285a:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 801285e:	6019      	str	r1, [r3, #0]
 8012860:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012864:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8012868:	6018      	str	r0, [r3, #0]

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801286a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801286e:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8012872:	6819      	ldr	r1, [r3, #0]
 8012874:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012878:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 801287c:	681a      	ldr	r2, [r3, #0]
 801287e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012882:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8012886:	681b      	ldr	r3, [r3, #0]
 8012888:	fb21 3202 	smlad	r2, r1, r2, r3
 801288c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012890:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8012894:	601a      	str	r2, [r3, #0]
  return(result);
 8012896:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801289a:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 801289e:	681b      	ldr	r3, [r3, #0]
 80128a0:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val5 = __SXTAB16(rhs_offset_s16x2, val4);
 80128a4:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 80128a8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80128ac:	f5a3 7232 	sub.w	r2, r3, #712	; 0x2c8
 80128b0:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 80128b4:	6013      	str	r3, [r2, #0]
 80128b6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80128ba:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 80128be:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80128c0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80128c4:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 80128c8:	681a      	ldr	r2, [r3, #0]
 80128ca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80128ce:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 80128d2:	681b      	ldr	r3, [r3, #0]
 80128d4:	fa22 f283 	sxtab16	r2, r2, r3
 80128d8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80128dc:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80128e0:	601a      	str	r2, [r3, #0]
  return(result);
 80128e2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80128e6:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80128ea:	681b      	ldr	r3, [r3, #0]
 80128ec:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
            res00 = __SMLAD(val1, val0, res00);
 80128f0:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 80128f4:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 80128f8:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 80128fc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012900:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 8012904:	601a      	str	r2, [r3, #0]
 8012906:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801290a:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 801290e:	6019      	str	r1, [r3, #0]
 8012910:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012914:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8012918:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801291a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801291e:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 8012922:	6819      	ldr	r1, [r3, #0]
 8012924:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012928:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 801292c:	681a      	ldr	r2, [r3, #0]
 801292e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012932:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8012936:	681b      	ldr	r3, [r3, #0]
 8012938:	fb21 3202 	smlad	r2, r1, r2, r3
 801293c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012940:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8012944:	601a      	str	r2, [r3, #0]
  return(result);
 8012946:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801294a:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 801294e:	681b      	ldr	r3, [r3, #0]
 8012950:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val4 = __SXTAB16(rhs_offset_s16x2, __ROR(val4, 8));
 8012954:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 8012958:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801295c:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 8012960:	601a      	str	r2, [r3, #0]
 8012962:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012966:	f5a3 722d 	sub.w	r2, r3, #692	; 0x2b4
 801296a:	2308      	movs	r3, #8
 801296c:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801296e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012972:	f5a3 722d 	sub.w	r2, r3, #692	; 0x2b4
 8012976:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801297a:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 801297e:	681b      	ldr	r3, [r3, #0]
 8012980:	f003 031f 	and.w	r3, r3, #31
 8012984:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8012986:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801298a:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 801298e:	681b      	ldr	r3, [r3, #0]
 8012990:	2b00      	cmp	r3, #0
 8012992:	d105      	bne.n	80129a0 <arm_nn_vec_mat_mult_t_s8+0x55a>
    return op1;
 8012994:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012998:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 801299c:	6819      	ldr	r1, [r3, #0]
 801299e:	e00b      	b.n	80129b8 <arm_nn_vec_mat_mult_t_s8+0x572>
  return (op1 >> op2) | (op1 << (32U - op2));
 80129a0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80129a4:	f5a3 722c 	sub.w	r2, r3, #688	; 0x2b0
 80129a8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80129ac:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 80129b0:	6812      	ldr	r2, [r2, #0]
 80129b2:	681b      	ldr	r3, [r3, #0]
 80129b4:	fa62 f103 	ror.w	r1, r2, r3
 80129b8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80129bc:	f5a3 7229 	sub.w	r2, r3, #676	; 0x2a4
 80129c0:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 80129c4:	6013      	str	r3, [r2, #0]
 80129c6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80129ca:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 80129ce:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80129d0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80129d4:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 80129d8:	681a      	ldr	r2, [r3, #0]
 80129da:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80129de:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 80129e2:	681b      	ldr	r3, [r3, #0]
 80129e4:	fa22 f283 	sxtab16	r2, r2, r3
 80129e8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80129ec:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 80129f0:	601a      	str	r2, [r3, #0]
  return(result);
 80129f2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80129f6:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 80129fa:	681b      	ldr	r3, [r3, #0]
 80129fc:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
 8012a00:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012a04:	f5a3 7228 	sub.w	r2, r3, #672	; 0x2a0
 8012a08:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8012a0c:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 8012a0e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012a12:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8012a16:	681b      	ldr	r3, [r3, #0]
 8012a18:	681b      	ldr	r3, [r3, #0]
 8012a1a:	681b      	ldr	r3, [r3, #0]
 8012a1c:	461a      	mov	r2, r3
 8012a1e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012a22:	f5a3 63b1 	sub.w	r3, r3, #1416	; 0x588
 8012a26:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8012a28:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012a2c:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8012a30:	681b      	ldr	r3, [r3, #0]
 8012a32:	681b      	ldr	r3, [r3, #0]
 8012a34:	1d1a      	adds	r2, r3, #4
 8012a36:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012a3a:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8012a3e:	681b      	ldr	r3, [r3, #0]
 8012a40:	601a      	str	r2, [r3, #0]
    return (val);
 8012a42:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012a46:	f5a3 63b1 	sub.w	r3, r3, #1416	; 0x588
 8012a4a:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the RHS matrix
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 8012a4c:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            res01 = __SMLAD(val3, val5, res01);
 8012a50:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 8012a54:	f8d7 15b4 	ldr.w	r1, [r7, #1460]	; 0x5b4
 8012a58:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 8012a5c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012a60:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8012a64:	601a      	str	r2, [r3, #0]
 8012a66:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012a6a:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8012a6e:	6019      	str	r1, [r3, #0]
 8012a70:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012a74:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8012a78:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8012a7a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012a7e:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8012a82:	6819      	ldr	r1, [r3, #0]
 8012a84:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012a88:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8012a8c:	681a      	ldr	r2, [r3, #0]
 8012a8e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012a92:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8012a96:	681b      	ldr	r3, [r3, #0]
 8012a98:	fb21 3202 	smlad	r2, r1, r2, r3
 8012a9c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012aa0:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8012aa4:	601a      	str	r2, [r3, #0]
  return(result);
 8012aa6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012aaa:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8012aae:	681b      	ldr	r3, [r3, #0]
 8012ab0:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
            res01 = __SMLAD(val1, val4, res01);
 8012ab4:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 8012ab8:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 8012abc:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 8012ac0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012ac4:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8012ac8:	601a      	str	r2, [r3, #0]
 8012aca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012ace:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8012ad2:	6019      	str	r1, [r3, #0]
 8012ad4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012ad8:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8012adc:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8012ade:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012ae2:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8012ae6:	6819      	ldr	r1, [r3, #0]
 8012ae8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012aec:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8012af0:	681a      	ldr	r2, [r3, #0]
 8012af2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012af6:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8012afa:	681b      	ldr	r3, [r3, #0]
 8012afc:	fb21 3202 	smlad	r2, r1, r2, r3
 8012b00:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012b04:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8012b08:	601a      	str	r2, [r3, #0]
  return(result);
 8012b0a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012b0e:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8012b12:	681b      	ldr	r3, [r3, #0]
 8012b14:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

            val2 = __SXTAB16(rhs_offset_s16x2, val0);
 8012b18:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 8012b1c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012b20:	f5a3 721d 	sub.w	r2, r3, #628	; 0x274
 8012b24:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8012b28:	6013      	str	r3, [r2, #0]
 8012b2a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012b2e:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8012b32:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012b34:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012b38:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8012b3c:	681a      	ldr	r2, [r3, #0]
 8012b3e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012b42:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8012b46:	681b      	ldr	r3, [r3, #0]
 8012b48:	fa22 f283 	sxtab16	r2, r2, r3
 8012b4c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012b50:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8012b54:	601a      	str	r2, [r3, #0]
  return(result);
 8012b56:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012b5a:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8012b5e:	681b      	ldr	r3, [r3, #0]
 8012b60:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 8012b64:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012b68:	f5a3 721c 	sub.w	r2, r3, #624	; 0x270
 8012b6c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8012b70:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 8012b72:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012b76:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8012b7a:	681b      	ldr	r3, [r3, #0]
 8012b7c:	681b      	ldr	r3, [r3, #0]
 8012b7e:	681b      	ldr	r3, [r3, #0]
 8012b80:	461a      	mov	r2, r3
 8012b82:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012b86:	f2a3 538c 	subw	r3, r3, #1420	; 0x58c
 8012b8a:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8012b8c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012b90:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8012b94:	681b      	ldr	r3, [r3, #0]
 8012b96:	681b      	ldr	r3, [r3, #0]
 8012b98:	1d1a      	adds	r2, r3, #4
 8012b9a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012b9e:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8012ba2:	681b      	ldr	r3, [r3, #0]
 8012ba4:	601a      	str	r2, [r3, #0]
    return (val);
 8012ba6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012baa:	f2a3 538c 	subw	r3, r3, #1420	; 0x58c
 8012bae:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the LHS vector
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 8012bb0:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 8012bb4:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 8012bb8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012bbc:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8012bc0:	601a      	str	r2, [r3, #0]
 8012bc2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012bc6:	f5a3 721b 	sub.w	r2, r3, #620	; 0x26c
 8012bca:	2308      	movs	r3, #8
 8012bcc:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8012bce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012bd2:	f5a3 721b 	sub.w	r2, r3, #620	; 0x26c
 8012bd6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012bda:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8012bde:	681b      	ldr	r3, [r3, #0]
 8012be0:	f003 031f 	and.w	r3, r3, #31
 8012be4:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8012be6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012bea:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8012bee:	681b      	ldr	r3, [r3, #0]
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	d105      	bne.n	8012c00 <arm_nn_vec_mat_mult_t_s8+0x7ba>
    return op1;
 8012bf4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012bf8:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8012bfc:	6819      	ldr	r1, [r3, #0]
 8012bfe:	e00b      	b.n	8012c18 <arm_nn_vec_mat_mult_t_s8+0x7d2>
  return (op1 >> op2) | (op1 << (32U - op2));
 8012c00:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012c04:	f5a3 721a 	sub.w	r2, r3, #616	; 0x268
 8012c08:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012c0c:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8012c10:	6812      	ldr	r2, [r2, #0]
 8012c12:	681b      	ldr	r3, [r3, #0]
 8012c14:	fa62 f103 	ror.w	r1, r2, r3
 8012c18:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012c1c:	f5a3 7217 	sub.w	r2, r3, #604	; 0x25c
 8012c20:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8012c24:	6013      	str	r3, [r2, #0]
 8012c26:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012c2a:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8012c2e:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012c30:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012c34:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8012c38:	681a      	ldr	r2, [r3, #0]
 8012c3a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012c3e:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8012c42:	681b      	ldr	r3, [r3, #0]
 8012c44:	fa22 f283 	sxtab16	r2, r2, r3
 8012c48:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012c4c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8012c50:	601a      	str	r2, [r3, #0]
  return(result);
 8012c52:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012c56:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8012c5a:	681b      	ldr	r3, [r3, #0]
 8012c5c:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val3 = __SXTAB16(lhs_offset_s16x2, val1);
 8012c60:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 8012c64:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012c68:	f5a3 7214 	sub.w	r2, r3, #592	; 0x250
 8012c6c:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 8012c70:	6013      	str	r3, [r2, #0]
 8012c72:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012c76:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8012c7a:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012c7c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012c80:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8012c84:	681a      	ldr	r2, [r3, #0]
 8012c86:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012c8a:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8012c8e:	681b      	ldr	r3, [r3, #0]
 8012c90:	fa22 f283 	sxtab16	r2, r2, r3
 8012c94:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012c98:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8012c9c:	601a      	str	r2, [r3, #0]
  return(result);
 8012c9e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012ca2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8012ca6:	681b      	ldr	r3, [r3, #0]
 8012ca8:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
            // Read 4 x int8 values from the RHS matrix
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 8012cac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012cb0:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 8012cb4:	681a      	ldr	r2, [r3, #0]
 8012cb6:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 8012cba:	441a      	add	r2, r3
 8012cbc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012cc0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8012cc4:	601a      	str	r2, [r3, #0]
 8012cc6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012cca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8012cce:	681b      	ldr	r3, [r3, #0]
 8012cd0:	681b      	ldr	r3, [r3, #0]
 8012cd2:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 8012cd4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012cd8:	f5a3 63b2 	sub.w	r3, r3, #1424	; 0x590
 8012cdc:	601a      	str	r2, [r3, #0]
    return (val);
 8012cde:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012ce2:	f5a3 63b2 	sub.w	r3, r3, #1424	; 0x590
 8012ce6:	681b      	ldr	r3, [r3, #0]
 8012ce8:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            val1 = __SXTAB16(lhs_offset_s16x2, __ROR(val1, 8));
 8012cec:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 8012cf0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012cf4:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8012cf8:	601a      	str	r2, [r3, #0]
 8012cfa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012cfe:	f5a3 7212 	sub.w	r2, r3, #584	; 0x248
 8012d02:	2308      	movs	r3, #8
 8012d04:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8012d06:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012d0a:	f5a3 7212 	sub.w	r2, r3, #584	; 0x248
 8012d0e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012d12:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8012d16:	681b      	ldr	r3, [r3, #0]
 8012d18:	f003 031f 	and.w	r3, r3, #31
 8012d1c:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8012d1e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012d22:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8012d26:	681b      	ldr	r3, [r3, #0]
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d105      	bne.n	8012d38 <arm_nn_vec_mat_mult_t_s8+0x8f2>
    return op1;
 8012d2c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012d30:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8012d34:	6819      	ldr	r1, [r3, #0]
 8012d36:	e00b      	b.n	8012d50 <arm_nn_vec_mat_mult_t_s8+0x90a>
  return (op1 >> op2) | (op1 << (32U - op2));
 8012d38:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012d3c:	f5a3 7211 	sub.w	r2, r3, #580	; 0x244
 8012d40:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012d44:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8012d48:	6812      	ldr	r2, [r2, #0]
 8012d4a:	681b      	ldr	r3, [r3, #0]
 8012d4c:	fa62 f103 	ror.w	r1, r2, r3
 8012d50:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012d54:	f5a3 720e 	sub.w	r2, r3, #568	; 0x238
 8012d58:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 8012d5c:	6013      	str	r3, [r2, #0]
 8012d5e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012d62:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8012d66:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012d68:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012d6c:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8012d70:	681a      	ldr	r2, [r3, #0]
 8012d72:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012d76:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8012d7a:	681b      	ldr	r3, [r3, #0]
 8012d7c:	fa22 f283 	sxtab16	r2, r2, r3
 8012d80:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012d84:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8012d88:	601a      	str	r2, [r3, #0]
  return(result);
 8012d8a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012d8e:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8012d92:	681b      	ldr	r3, [r3, #0]
 8012d94:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0

            // Perform the accumulations
            res00 = __SMLAD(val3, val2, res00);
 8012d98:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 8012d9c:	f8d7 15c4 	ldr.w	r1, [r7, #1476]	; 0x5c4
 8012da0:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 8012da4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012da8:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8012dac:	601a      	str	r2, [r3, #0]
 8012dae:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012db2:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8012db6:	6019      	str	r1, [r3, #0]
 8012db8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012dbc:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8012dc0:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8012dc2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012dc6:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8012dca:	6819      	ldr	r1, [r3, #0]
 8012dcc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012dd0:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8012dd4:	681a      	ldr	r2, [r3, #0]
 8012dd6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012dda:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8012dde:	681b      	ldr	r3, [r3, #0]
 8012de0:	fb21 3202 	smlad	r2, r1, r2, r3
 8012de4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012de8:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8012dec:	601a      	str	r2, [r3, #0]
  return(result);
 8012dee:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012df2:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8012df6:	681b      	ldr	r3, [r3, #0]
 8012df8:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val5 = __SXTAB16(rhs_offset_s16x2, val4);
 8012dfc:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 8012e00:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012e04:	f5a3 7207 	sub.w	r2, r3, #540	; 0x21c
 8012e08:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8012e0c:	6013      	str	r3, [r2, #0]
 8012e0e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012e12:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8012e16:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012e18:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012e1c:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8012e20:	681a      	ldr	r2, [r3, #0]
 8012e22:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012e26:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8012e2a:	681b      	ldr	r3, [r3, #0]
 8012e2c:	fa22 f283 	sxtab16	r2, r2, r3
 8012e30:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012e34:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8012e38:	601a      	str	r2, [r3, #0]
  return(result);
 8012e3a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012e3e:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8012e42:	681b      	ldr	r3, [r3, #0]
 8012e44:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
            res00 = __SMLAD(val1, val0, res00);
 8012e48:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 8012e4c:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 8012e50:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 8012e54:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012e58:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012e5c:	601a      	str	r2, [r3, #0]
 8012e5e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012e62:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8012e66:	6019      	str	r1, [r3, #0]
 8012e68:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012e6c:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8012e70:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8012e72:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012e76:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012e7a:	6819      	ldr	r1, [r3, #0]
 8012e7c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012e80:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8012e84:	681a      	ldr	r2, [r3, #0]
 8012e86:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012e8a:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8012e8e:	681b      	ldr	r3, [r3, #0]
 8012e90:	fb21 3202 	smlad	r2, r1, r2, r3
 8012e94:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012e98:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8012e9c:	601a      	str	r2, [r3, #0]
  return(result);
 8012e9e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012ea2:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8012ea6:	681b      	ldr	r3, [r3, #0]
 8012ea8:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val4 = __SXTAB16(rhs_offset_s16x2, __ROR(val4, 8));
 8012eac:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 8012eb0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012eb4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8012eb8:	601a      	str	r2, [r3, #0]
 8012eba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012ebe:	f5a3 7202 	sub.w	r2, r3, #520	; 0x208
 8012ec2:	2308      	movs	r3, #8
 8012ec4:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8012ec6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012eca:	f5a3 7202 	sub.w	r2, r3, #520	; 0x208
 8012ece:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012ed2:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8012ed6:	681b      	ldr	r3, [r3, #0]
 8012ed8:	f003 031f 	and.w	r3, r3, #31
 8012edc:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8012ede:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012ee2:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8012ee6:	681b      	ldr	r3, [r3, #0]
 8012ee8:	2b00      	cmp	r3, #0
 8012eea:	d105      	bne.n	8012ef8 <arm_nn_vec_mat_mult_t_s8+0xab2>
    return op1;
 8012eec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012ef0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8012ef4:	6819      	ldr	r1, [r3, #0]
 8012ef6:	e00b      	b.n	8012f10 <arm_nn_vec_mat_mult_t_s8+0xaca>
  return (op1 >> op2) | (op1 << (32U - op2));
 8012ef8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012efc:	f5a3 7201 	sub.w	r2, r3, #516	; 0x204
 8012f00:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012f04:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8012f08:	6812      	ldr	r2, [r2, #0]
 8012f0a:	681b      	ldr	r3, [r3, #0]
 8012f0c:	fa62 f103 	ror.w	r1, r2, r3
 8012f10:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012f14:	f5a3 72fc 	sub.w	r2, r3, #504	; 0x1f8
 8012f18:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8012f1c:	6013      	str	r3, [r2, #0]
 8012f1e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012f22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8012f26:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012f28:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012f2c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8012f30:	681a      	ldr	r2, [r3, #0]
 8012f32:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012f36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8012f3a:	681b      	ldr	r3, [r3, #0]
 8012f3c:	fa22 f283 	sxtab16	r2, r2, r3
 8012f40:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012f44:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8012f48:	601a      	str	r2, [r3, #0]
  return(result);
 8012f4a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012f4e:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8012f52:	681b      	ldr	r3, [r3, #0]
 8012f54:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
 8012f58:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012f5c:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 8012f60:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8012f64:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 8012f66:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012f6a:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8012f6e:	681b      	ldr	r3, [r3, #0]
 8012f70:	681b      	ldr	r3, [r3, #0]
 8012f72:	681b      	ldr	r3, [r3, #0]
 8012f74:	461a      	mov	r2, r3
 8012f76:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012f7a:	f2a3 5394 	subw	r3, r3, #1428	; 0x594
 8012f7e:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8012f80:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012f84:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8012f88:	681b      	ldr	r3, [r3, #0]
 8012f8a:	681b      	ldr	r3, [r3, #0]
 8012f8c:	1d1a      	adds	r2, r3, #4
 8012f8e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012f92:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8012f96:	681b      	ldr	r3, [r3, #0]
 8012f98:	601a      	str	r2, [r3, #0]
    return (val);
 8012f9a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012f9e:	f2a3 5394 	subw	r3, r3, #1428	; 0x594
 8012fa2:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the RHS matrix
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 8012fa4:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            res01 = __SMLAD(val3, val5, res01);
 8012fa8:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 8012fac:	f8d7 15b4 	ldr.w	r1, [r7, #1460]	; 0x5b4
 8012fb0:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 8012fb4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012fb8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8012fbc:	601a      	str	r2, [r3, #0]
 8012fbe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012fc2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8012fc6:	6019      	str	r1, [r3, #0]
 8012fc8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012fcc:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8012fd0:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8012fd2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012fd6:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8012fda:	6819      	ldr	r1, [r3, #0]
 8012fdc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012fe0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8012fe4:	681a      	ldr	r2, [r3, #0]
 8012fe6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012fea:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8012fee:	681b      	ldr	r3, [r3, #0]
 8012ff0:	fb21 3202 	smlad	r2, r1, r2, r3
 8012ff4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012ff8:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8012ffc:	601a      	str	r2, [r3, #0]
  return(result);
 8012ffe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013002:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8013006:	681b      	ldr	r3, [r3, #0]
 8013008:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
            res01 = __SMLAD(val1, val4, res01);
 801300c:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 8013010:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 8013014:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 8013018:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801301c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8013020:	601a      	str	r2, [r3, #0]
 8013022:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013026:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 801302a:	6019      	str	r1, [r3, #0]
 801302c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013030:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8013034:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8013036:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801303a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 801303e:	6819      	ldr	r1, [r3, #0]
 8013040:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013044:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8013048:	681a      	ldr	r2, [r3, #0]
 801304a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801304e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8013052:	681b      	ldr	r3, [r3, #0]
 8013054:	fb21 3202 	smlad	r2, r1, r2, r3
 8013058:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801305c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8013060:	601a      	str	r2, [r3, #0]
  return(result);
 8013062:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013066:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 801306a:	681b      	ldr	r3, [r3, #0]
 801306c:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

            val2 = __SXTAB16(rhs_offset_s16x2, val0);
 8013070:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 8013074:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013078:	f5a3 72e4 	sub.w	r2, r3, #456	; 0x1c8
 801307c:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8013080:	6013      	str	r3, [r2, #0]
 8013082:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013086:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 801308a:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801308c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013090:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8013094:	681a      	ldr	r2, [r3, #0]
 8013096:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801309a:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 801309e:	681b      	ldr	r3, [r3, #0]
 80130a0:	fa22 f283 	sxtab16	r2, r2, r3
 80130a4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80130a8:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80130ac:	601a      	str	r2, [r3, #0]
  return(result);
 80130ae:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80130b2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80130b6:	681b      	ldr	r3, [r3, #0]
 80130b8:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 80130bc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80130c0:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 80130c4:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80130c8:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 80130ca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80130ce:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80130d2:	681b      	ldr	r3, [r3, #0]
 80130d4:	681b      	ldr	r3, [r3, #0]
 80130d6:	681b      	ldr	r3, [r3, #0]
 80130d8:	461a      	mov	r2, r3
 80130da:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80130de:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 80130e2:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 80130e4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80130e8:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80130ec:	681b      	ldr	r3, [r3, #0]
 80130ee:	681b      	ldr	r3, [r3, #0]
 80130f0:	1d1a      	adds	r2, r3, #4
 80130f2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80130f6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80130fa:	681b      	ldr	r3, [r3, #0]
 80130fc:	601a      	str	r2, [r3, #0]
    return (val);
 80130fe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013102:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 8013106:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the LHS vector
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 8013108:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 801310c:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 8013110:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013114:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8013118:	601a      	str	r2, [r3, #0]
 801311a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801311e:	f5a3 72e0 	sub.w	r2, r3, #448	; 0x1c0
 8013122:	2308      	movs	r3, #8
 8013124:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8013126:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801312a:	f5a3 72e0 	sub.w	r2, r3, #448	; 0x1c0
 801312e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013132:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8013136:	681b      	ldr	r3, [r3, #0]
 8013138:	f003 031f 	and.w	r3, r3, #31
 801313c:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801313e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013142:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8013146:	681b      	ldr	r3, [r3, #0]
 8013148:	2b00      	cmp	r3, #0
 801314a:	d105      	bne.n	8013158 <arm_nn_vec_mat_mult_t_s8+0xd12>
    return op1;
 801314c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013150:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8013154:	6819      	ldr	r1, [r3, #0]
 8013156:	e00b      	b.n	8013170 <arm_nn_vec_mat_mult_t_s8+0xd2a>
  return (op1 >> op2) | (op1 << (32U - op2));
 8013158:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801315c:	f5a3 72de 	sub.w	r2, r3, #444	; 0x1bc
 8013160:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013164:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8013168:	6812      	ldr	r2, [r2, #0]
 801316a:	681b      	ldr	r3, [r3, #0]
 801316c:	fa62 f103 	ror.w	r1, r2, r3
 8013170:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013174:	f5a3 72d8 	sub.w	r2, r3, #432	; 0x1b0
 8013178:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 801317c:	6013      	str	r3, [r2, #0]
 801317e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013182:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8013186:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013188:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801318c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8013190:	681a      	ldr	r2, [r3, #0]
 8013192:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013196:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 801319a:	681b      	ldr	r3, [r3, #0]
 801319c:	fa22 f283 	sxtab16	r2, r2, r3
 80131a0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80131a4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80131a8:	601a      	str	r2, [r3, #0]
  return(result);
 80131aa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80131ae:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80131b2:	681b      	ldr	r3, [r3, #0]
 80131b4:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val3 = __SXTAB16(lhs_offset_s16x2, val1);
 80131b8:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 80131bc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80131c0:	f5a3 72d2 	sub.w	r2, r3, #420	; 0x1a4
 80131c4:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 80131c8:	6013      	str	r3, [r2, #0]
 80131ca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80131ce:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80131d2:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80131d4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80131d8:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 80131dc:	681a      	ldr	r2, [r3, #0]
 80131de:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80131e2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80131e6:	681b      	ldr	r3, [r3, #0]
 80131e8:	fa22 f283 	sxtab16	r2, r2, r3
 80131ec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80131f0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80131f4:	601a      	str	r2, [r3, #0]
  return(result);
 80131f6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80131fa:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80131fe:	681b      	ldr	r3, [r3, #0]
 8013200:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
            // Read 4 x int8 values from the RHS matrix
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 8013204:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013208:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 801320c:	681a      	ldr	r2, [r3, #0]
 801320e:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 8013212:	441a      	add	r2, r3
 8013214:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013218:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 801321c:	601a      	str	r2, [r3, #0]
 801321e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013222:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8013226:	681b      	ldr	r3, [r3, #0]
 8013228:	681b      	ldr	r3, [r3, #0]
 801322a:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801322c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013230:	f2a3 539c 	subw	r3, r3, #1436	; 0x59c
 8013234:	601a      	str	r2, [r3, #0]
    return (val);
 8013236:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801323a:	f2a3 539c 	subw	r3, r3, #1436	; 0x59c
 801323e:	681b      	ldr	r3, [r3, #0]
 8013240:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            val1 = __SXTAB16(lhs_offset_s16x2, __ROR(val1, 8));
 8013244:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 8013248:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801324c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8013250:	601a      	str	r2, [r3, #0]
 8013252:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013256:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 801325a:	2308      	movs	r3, #8
 801325c:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801325e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013262:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 8013266:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801326a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 801326e:	681b      	ldr	r3, [r3, #0]
 8013270:	f003 031f 	and.w	r3, r3, #31
 8013274:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8013276:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801327a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 801327e:	681b      	ldr	r3, [r3, #0]
 8013280:	2b00      	cmp	r3, #0
 8013282:	d105      	bne.n	8013290 <arm_nn_vec_mat_mult_t_s8+0xe4a>
    return op1;
 8013284:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013288:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 801328c:	6819      	ldr	r1, [r3, #0]
 801328e:	e00b      	b.n	80132a8 <arm_nn_vec_mat_mult_t_s8+0xe62>
  return (op1 >> op2) | (op1 << (32U - op2));
 8013290:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013294:	f5a3 72cc 	sub.w	r2, r3, #408	; 0x198
 8013298:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801329c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80132a0:	6812      	ldr	r2, [r2, #0]
 80132a2:	681b      	ldr	r3, [r3, #0]
 80132a4:	fa62 f103 	ror.w	r1, r2, r3
 80132a8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80132ac:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 80132b0:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 80132b4:	6013      	str	r3, [r2, #0]
 80132b6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80132ba:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80132be:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80132c0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80132c4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80132c8:	681a      	ldr	r2, [r3, #0]
 80132ca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80132ce:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80132d2:	681b      	ldr	r3, [r3, #0]
 80132d4:	fa22 f283 	sxtab16	r2, r2, r3
 80132d8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80132dc:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80132e0:	601a      	str	r2, [r3, #0]
  return(result);
 80132e2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80132e6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80132ea:	681b      	ldr	r3, [r3, #0]
 80132ec:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0

            // Perform the accumulations
            res00 = __SMLAD(val3, val2, res00);
 80132f0:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 80132f4:	f8d7 15c4 	ldr.w	r1, [r7, #1476]	; 0x5c4
 80132f8:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 80132fc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013300:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8013304:	601a      	str	r2, [r3, #0]
 8013306:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801330a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 801330e:	6019      	str	r1, [r3, #0]
 8013310:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013314:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8013318:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801331a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801331e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8013322:	6819      	ldr	r1, [r3, #0]
 8013324:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013328:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 801332c:	681a      	ldr	r2, [r3, #0]
 801332e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013332:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8013336:	681b      	ldr	r3, [r3, #0]
 8013338:	fb21 3202 	smlad	r2, r1, r2, r3
 801333c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013340:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8013344:	601a      	str	r2, [r3, #0]
  return(result);
 8013346:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801334a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 801334e:	681b      	ldr	r3, [r3, #0]
 8013350:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val5 = __SXTAB16(rhs_offset_s16x2, val4);
 8013354:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 8013358:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801335c:	f5a3 72b8 	sub.w	r2, r3, #368	; 0x170
 8013360:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8013364:	6013      	str	r3, [r2, #0]
 8013366:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801336a:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 801336e:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013370:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013374:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8013378:	681a      	ldr	r2, [r3, #0]
 801337a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801337e:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8013382:	681b      	ldr	r3, [r3, #0]
 8013384:	fa22 f283 	sxtab16	r2, r2, r3
 8013388:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801338c:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8013390:	601a      	str	r2, [r3, #0]
  return(result);
 8013392:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013396:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 801339a:	681b      	ldr	r3, [r3, #0]
 801339c:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
            res00 = __SMLAD(val1, val0, res00);
 80133a0:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 80133a4:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 80133a8:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 80133ac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80133b0:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80133b4:	601a      	str	r2, [r3, #0]
 80133b6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80133ba:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80133be:	6019      	str	r1, [r3, #0]
 80133c0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80133c4:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80133c8:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80133ca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80133ce:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80133d2:	6819      	ldr	r1, [r3, #0]
 80133d4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80133d8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80133dc:	681a      	ldr	r2, [r3, #0]
 80133de:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80133e2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80133e6:	681b      	ldr	r3, [r3, #0]
 80133e8:	fb21 3202 	smlad	r2, r1, r2, r3
 80133ec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80133f0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80133f4:	601a      	str	r2, [r3, #0]
  return(result);
 80133f6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80133fa:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80133fe:	681b      	ldr	r3, [r3, #0]
 8013400:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val4 = __SXTAB16(rhs_offset_s16x2, __ROR(val4, 8));
 8013404:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 8013408:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801340c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8013410:	601a      	str	r2, [r3, #0]
 8013412:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013416:	f5a3 72ae 	sub.w	r2, r3, #348	; 0x15c
 801341a:	2308      	movs	r3, #8
 801341c:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801341e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013422:	f5a3 72ae 	sub.w	r2, r3, #348	; 0x15c
 8013426:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801342a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 801342e:	681b      	ldr	r3, [r3, #0]
 8013430:	f003 031f 	and.w	r3, r3, #31
 8013434:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8013436:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801343a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 801343e:	681b      	ldr	r3, [r3, #0]
 8013440:	2b00      	cmp	r3, #0
 8013442:	d105      	bne.n	8013450 <arm_nn_vec_mat_mult_t_s8+0x100a>
    return op1;
 8013444:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013448:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 801344c:	6819      	ldr	r1, [r3, #0]
 801344e:	e00b      	b.n	8013468 <arm_nn_vec_mat_mult_t_s8+0x1022>
  return (op1 >> op2) | (op1 << (32U - op2));
 8013450:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013454:	f5a3 72ac 	sub.w	r2, r3, #344	; 0x158
 8013458:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801345c:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8013460:	6812      	ldr	r2, [r2, #0]
 8013462:	681b      	ldr	r3, [r3, #0]
 8013464:	fa62 f103 	ror.w	r1, r2, r3
 8013468:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801346c:	f5a3 72a6 	sub.w	r2, r3, #332	; 0x14c
 8013470:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8013474:	6013      	str	r3, [r2, #0]
 8013476:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801347a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 801347e:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013480:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013484:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8013488:	681a      	ldr	r2, [r3, #0]
 801348a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801348e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8013492:	681b      	ldr	r3, [r3, #0]
 8013494:	fa22 f283 	sxtab16	r2, r2, r3
 8013498:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801349c:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80134a0:	601a      	str	r2, [r3, #0]
  return(result);
 80134a2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80134a6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80134aa:	681b      	ldr	r3, [r3, #0]
 80134ac:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
 80134b0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80134b4:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 80134b8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80134bc:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 80134be:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80134c2:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80134c6:	681b      	ldr	r3, [r3, #0]
 80134c8:	681b      	ldr	r3, [r3, #0]
 80134ca:	681b      	ldr	r3, [r3, #0]
 80134cc:	461a      	mov	r2, r3
 80134ce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80134d2:	f5a3 63b4 	sub.w	r3, r3, #1440	; 0x5a0
 80134d6:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 80134d8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80134dc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80134e0:	681b      	ldr	r3, [r3, #0]
 80134e2:	681b      	ldr	r3, [r3, #0]
 80134e4:	1d1a      	adds	r2, r3, #4
 80134e6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80134ea:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80134ee:	681b      	ldr	r3, [r3, #0]
 80134f0:	601a      	str	r2, [r3, #0]
    return (val);
 80134f2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80134f6:	f5a3 63b4 	sub.w	r3, r3, #1440	; 0x5a0
 80134fa:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the RHS matrix
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 80134fc:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            res01 = __SMLAD(val3, val5, res01);
 8013500:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 8013504:	f8d7 15b4 	ldr.w	r1, [r7, #1460]	; 0x5b4
 8013508:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 801350c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013510:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8013514:	601a      	str	r2, [r3, #0]
 8013516:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801351a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 801351e:	6019      	str	r1, [r3, #0]
 8013520:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013524:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8013528:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801352a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801352e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8013532:	6819      	ldr	r1, [r3, #0]
 8013534:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013538:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 801353c:	681a      	ldr	r2, [r3, #0]
 801353e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013542:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8013546:	681b      	ldr	r3, [r3, #0]
 8013548:	fb21 3202 	smlad	r2, r1, r2, r3
 801354c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013550:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8013554:	601a      	str	r2, [r3, #0]
  return(result);
 8013556:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801355a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 801355e:	681b      	ldr	r3, [r3, #0]
 8013560:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
            res01 = __SMLAD(val1, val4, res01);
 8013564:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 8013568:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 801356c:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 8013570:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013574:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8013578:	601a      	str	r2, [r3, #0]
 801357a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801357e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8013582:	6019      	str	r1, [r3, #0]
 8013584:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013588:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801358c:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801358e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013592:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8013596:	6819      	ldr	r1, [r3, #0]
 8013598:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801359c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80135a0:	681a      	ldr	r2, [r3, #0]
 80135a2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80135a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80135aa:	681b      	ldr	r3, [r3, #0]
 80135ac:	fb21 3202 	smlad	r2, r1, r2, r3
 80135b0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80135b4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80135b8:	601a      	str	r2, [r3, #0]
  return(result);
 80135ba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80135be:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80135c2:	681b      	ldr	r3, [r3, #0]
 80135c4:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

            val2 = __SXTAB16(rhs_offset_s16x2, val0);
 80135c8:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 80135cc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80135d0:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 80135d4:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 80135d8:	6013      	str	r3, [r2, #0]
 80135da:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80135de:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80135e2:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80135e4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80135e8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80135ec:	681a      	ldr	r2, [r3, #0]
 80135ee:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80135f2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80135f6:	681b      	ldr	r3, [r3, #0]
 80135f8:	fa22 f283 	sxtab16	r2, r2, r3
 80135fc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013600:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8013604:	601a      	str	r2, [r3, #0]
  return(result);
 8013606:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801360a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 801360e:	681b      	ldr	r3, [r3, #0]
 8013610:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 8013614:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013618:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 801361c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8013620:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 8013622:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013626:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 801362a:	681b      	ldr	r3, [r3, #0]
 801362c:	681b      	ldr	r3, [r3, #0]
 801362e:	681b      	ldr	r3, [r3, #0]
 8013630:	461a      	mov	r2, r3
 8013632:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013636:	f2a3 53a4 	subw	r3, r3, #1444	; 0x5a4
 801363a:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801363c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013640:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8013644:	681b      	ldr	r3, [r3, #0]
 8013646:	681b      	ldr	r3, [r3, #0]
 8013648:	1d1a      	adds	r2, r3, #4
 801364a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801364e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8013652:	681b      	ldr	r3, [r3, #0]
 8013654:	601a      	str	r2, [r3, #0]
    return (val);
 8013656:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801365a:	f2a3 53a4 	subw	r3, r3, #1444	; 0x5a4
 801365e:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the LHS vector
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 8013660:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 8013664:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 8013668:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801366c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8013670:	601a      	str	r2, [r3, #0]
 8013672:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013676:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 801367a:	2308      	movs	r3, #8
 801367c:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801367e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013682:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 8013686:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801368a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801368e:	681b      	ldr	r3, [r3, #0]
 8013690:	f003 031f 	and.w	r3, r3, #31
 8013694:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8013696:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801369a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801369e:	681b      	ldr	r3, [r3, #0]
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	d105      	bne.n	80136b0 <arm_nn_vec_mat_mult_t_s8+0x126a>
    return op1;
 80136a4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80136a8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80136ac:	6819      	ldr	r1, [r3, #0]
 80136ae:	e00b      	b.n	80136c8 <arm_nn_vec_mat_mult_t_s8+0x1282>
  return (op1 >> op2) | (op1 << (32U - op2));
 80136b0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80136b4:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 80136b8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80136bc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80136c0:	6812      	ldr	r2, [r2, #0]
 80136c2:	681b      	ldr	r3, [r3, #0]
 80136c4:	fa62 f103 	ror.w	r1, r2, r3
 80136c8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80136cc:	f5a3 7282 	sub.w	r2, r3, #260	; 0x104
 80136d0:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 80136d4:	6013      	str	r3, [r2, #0]
 80136d6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80136da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80136de:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80136e0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80136e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80136e8:	681a      	ldr	r2, [r3, #0]
 80136ea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80136ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80136f2:	681b      	ldr	r3, [r3, #0]
 80136f4:	fa22 f283 	sxtab16	r2, r2, r3
 80136f8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80136fc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013700:	601a      	str	r2, [r3, #0]
  return(result);
 8013702:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013706:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801370a:	681b      	ldr	r3, [r3, #0]
 801370c:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val3 = __SXTAB16(lhs_offset_s16x2, val1);
 8013710:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 8013714:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 8013718:	f8c7 3538 	str.w	r3, [r7, #1336]	; 0x538
 801371c:	f8c7 2534 	str.w	r2, [r7, #1332]	; 0x534
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013720:	f8d7 2538 	ldr.w	r2, [r7, #1336]	; 0x538
 8013724:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 8013728:	fa22 f283 	sxtab16	r2, r2, r3
 801372c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013730:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8013734:	601a      	str	r2, [r3, #0]
  return(result);
 8013736:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801373a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 801373e:	681b      	ldr	r3, [r3, #0]
 8013740:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
            // Read 4 x int8 values from the RHS matrix
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 8013744:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013748:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 801374c:	681a      	ldr	r2, [r3, #0]
 801374e:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 8013752:	4413      	add	r3, r2
 8013754:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
 8013758:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 801375c:	681b      	ldr	r3, [r3, #0]
 801375e:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 8013760:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013764:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 8013768:	601a      	str	r2, [r3, #0]
    return (val);
 801376a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801376e:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 8013772:	681b      	ldr	r3, [r3, #0]
 8013774:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            val1 = __SXTAB16(lhs_offset_s16x2, __ROR(val1, 8));
 8013778:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	; 0x5c0
 801377c:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
 8013780:	2308      	movs	r3, #8
 8013782:	f8c7 3540 	str.w	r3, [r7, #1344]	; 0x540
  op2 %= 32U;
 8013786:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 801378a:	f003 031f 	and.w	r3, r3, #31
 801378e:	f8c7 3540 	str.w	r3, [r7, #1344]	; 0x540
  if (op2 == 0U)
 8013792:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 8013796:	2b00      	cmp	r3, #0
 8013798:	d102      	bne.n	80137a0 <arm_nn_vec_mat_mult_t_s8+0x135a>
    return op1;
 801379a:	f8d7 2544 	ldr.w	r2, [r7, #1348]	; 0x544
 801379e:	e004      	b.n	80137aa <arm_nn_vec_mat_mult_t_s8+0x1364>
  return (op1 >> op2) | (op1 << (32U - op2));
 80137a0:	f8d7 2544 	ldr.w	r2, [r7, #1348]	; 0x544
 80137a4:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 80137a8:	41da      	rors	r2, r3
 80137aa:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 80137ae:	f8c7 3550 	str.w	r3, [r7, #1360]	; 0x550
 80137b2:	f8c7 254c 	str.w	r2, [r7, #1356]	; 0x54c
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80137b6:	f8d7 2550 	ldr.w	r2, [r7, #1360]	; 0x550
 80137ba:	f8d7 354c 	ldr.w	r3, [r7, #1356]	; 0x54c
 80137be:	fa22 f383 	sxtab16	r3, r2, r3
 80137c2:	f8c7 3548 	str.w	r3, [r7, #1352]	; 0x548
  return(result);
 80137c6:	f8d7 3548 	ldr.w	r3, [r7, #1352]	; 0x548
 80137ca:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0

            // Perform the accumulations
            res00 = __SMLAD(val3, val2, res00);
 80137ce:	f8d7 15bc 	ldr.w	r1, [r7, #1468]	; 0x5bc
 80137d2:	f8d7 25c4 	ldr.w	r2, [r7, #1476]	; 0x5c4
 80137d6:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 80137da:	f8c7 1560 	str.w	r1, [r7, #1376]	; 0x560
 80137de:	f8c7 255c 	str.w	r2, [r7, #1372]	; 0x55c
 80137e2:	f8c7 3558 	str.w	r3, [r7, #1368]	; 0x558
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80137e6:	f8d7 1560 	ldr.w	r1, [r7, #1376]	; 0x560
 80137ea:	f8d7 255c 	ldr.w	r2, [r7, #1372]	; 0x55c
 80137ee:	f8d7 3558 	ldr.w	r3, [r7, #1368]	; 0x558
 80137f2:	fb21 3302 	smlad	r3, r1, r2, r3
 80137f6:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
  return(result);
 80137fa:	f8d7 3554 	ldr.w	r3, [r7, #1364]	; 0x554
 80137fe:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val5 = __SXTAB16(rhs_offset_s16x2, val4);
 8013802:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 8013806:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 801380a:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 801380e:	f8c7 2568 	str.w	r2, [r7, #1384]	; 0x568
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013812:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8013816:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 801381a:	fa22 f383 	sxtab16	r3, r2, r3
 801381e:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
  return(result);
 8013822:	f8d7 3564 	ldr.w	r3, [r7, #1380]	; 0x564
 8013826:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
            res00 = __SMLAD(val1, val0, res00);
 801382a:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 801382e:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 8013832:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 8013836:	f8c7 157c 	str.w	r1, [r7, #1404]	; 0x57c
 801383a:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 801383e:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8013842:	f8d7 157c 	ldr.w	r1, [r7, #1404]	; 0x57c
 8013846:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 801384a:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 801384e:	fb21 3302 	smlad	r3, r1, r2, r3
 8013852:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
  return(result);
 8013856:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801385a:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val4 = __SXTAB16(rhs_offset_s16x2, __ROR(val4, 8));
 801385e:	f8d7 35b8 	ldr.w	r3, [r7, #1464]	; 0x5b8
 8013862:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 8013866:	2308      	movs	r3, #8
 8013868:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
  op2 %= 32U;
 801386c:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 8013870:	f003 031f 	and.w	r3, r3, #31
 8013874:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
  if (op2 == 0U)
 8013878:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 801387c:	2b00      	cmp	r3, #0
 801387e:	d102      	bne.n	8013886 <arm_nn_vec_mat_mult_t_s8+0x1440>
    return op1;
 8013880:	f8d7 2584 	ldr.w	r2, [r7, #1412]	; 0x584
 8013884:	e004      	b.n	8013890 <arm_nn_vec_mat_mult_t_s8+0x144a>
  return (op1 >> op2) | (op1 << (32U - op2));
 8013886:	f8d7 2584 	ldr.w	r2, [r7, #1412]	; 0x584
 801388a:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 801388e:	41da      	rors	r2, r3
 8013890:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8013894:	f8c7 3590 	str.w	r3, [r7, #1424]	; 0x590
 8013898:	f8c7 258c 	str.w	r2, [r7, #1420]	; 0x58c
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801389c:	f8d7 2590 	ldr.w	r2, [r7, #1424]	; 0x590
 80138a0:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 80138a4:	fa22 f383 	sxtab16	r3, r2, r3
 80138a8:	f8c7 3588 	str.w	r3, [r7, #1416]	; 0x588
  return(result);
 80138ac:	f8d7 3588 	ldr.w	r3, [r7, #1416]	; 0x588
 80138b0:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            res01 = __SMLAD(val3, val5, res01);
 80138b4:	f8d7 15bc 	ldr.w	r1, [r7, #1468]	; 0x5bc
 80138b8:	f8d7 25b4 	ldr.w	r2, [r7, #1460]	; 0x5b4
 80138bc:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 80138c0:	f8c7 15a0 	str.w	r1, [r7, #1440]	; 0x5a0
 80138c4:	f8c7 259c 	str.w	r2, [r7, #1436]	; 0x59c
 80138c8:	f8c7 3598 	str.w	r3, [r7, #1432]	; 0x598
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80138cc:	f8d7 15a0 	ldr.w	r1, [r7, #1440]	; 0x5a0
 80138d0:	f8d7 259c 	ldr.w	r2, [r7, #1436]	; 0x59c
 80138d4:	f8d7 3598 	ldr.w	r3, [r7, #1432]	; 0x598
 80138d8:	fb21 3302 	smlad	r3, r1, r2, r3
 80138dc:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
  return(result);
 80138e0:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 80138e4:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
            res01 = __SMLAD(val1, val4, res01);
 80138e8:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 80138ec:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 80138f0:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 80138f4:	f8c7 15b0 	str.w	r1, [r7, #1456]	; 0x5b0
 80138f8:	f8c7 25ac 	str.w	r2, [r7, #1452]	; 0x5ac
 80138fc:	f8c7 35a8 	str.w	r3, [r7, #1448]	; 0x5a8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8013900:	f8d7 15b0 	ldr.w	r1, [r7, #1456]	; 0x5b0
 8013904:	f8d7 25ac 	ldr.w	r2, [r7, #1452]	; 0x5ac
 8013908:	f8d7 35a8 	ldr.w	r3, [r7, #1448]	; 0x5a8
 801390c:	fb21 3302 	smlad	r3, r1, r2, r3
 8013910:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
  return(result);
 8013914:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 8013918:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 801391c:	f8d7 3620 	ldr.w	r3, [r7, #1568]	; 0x620
 8013920:	3310      	adds	r3, #16
 8013922:	f8c7 3620 	str.w	r3, [r7, #1568]	; 0x620
 8013926:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 801392a:	f1a3 020f 	sub.w	r2, r3, #15
 801392e:	f8d7 3620 	ldr.w	r3, [r7, #1568]	; 0x620
 8013932:	4293      	cmp	r3, r2
 8013934:	f6fe ae1c 	blt.w	8012570 <arm_nn_vec_mat_mult_t_s8+0x12a>
        }

        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 8013938:	e05a      	b.n	80139f0 <arm_nn_vec_mat_mult_t_s8+0x15aa>
        {
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 801393a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801393e:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 8013942:	681b      	ldr	r3, [r3, #0]
 8013944:	f993 3000 	ldrsb.w	r3, [r3]
 8013948:	461a      	mov	r2, r3
 801394a:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 801394e:	4413      	add	r3, r2
 8013950:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
 8013954:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013958:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 801395c:	681a      	ldr	r2, [r3, #0]
 801395e:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8013962:	4413      	add	r3, r2
 8013964:	f993 3000 	ldrsb.w	r3, [r3]
 8013968:	461a      	mov	r2, r3
 801396a:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 801396e:	4413      	add	r3, r2
 8013970:	f8c7 35d0 	str.w	r3, [r7, #1488]	; 0x5d0
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
 8013974:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013978:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 801397c:	681b      	ldr	r3, [r3, #0]
 801397e:	f993 3000 	ldrsb.w	r3, [r3]
 8013982:	461a      	mov	r2, r3
 8013984:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 8013988:	4413      	add	r3, r2
 801398a:	f8c7 35cc 	str.w	r3, [r7, #1484]	; 0x5cc

            res00 += lhs_value * rhs_value0;
 801398e:	f8d7 25cc 	ldr.w	r2, [r7, #1484]	; 0x5cc
 8013992:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 8013996:	fb03 f202 	mul.w	r2, r3, r2
 801399a:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 801399e:	4413      	add	r3, r2
 80139a0:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            res01 += lhs_value * rhs_value1;
 80139a4:	f8d7 25cc 	ldr.w	r2, [r7, #1484]	; 0x5cc
 80139a8:	f8d7 35d0 	ldr.w	r3, [r7, #1488]	; 0x5d0
 80139ac:	fb03 f202 	mul.w	r2, r3, r2
 80139b0:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 80139b4:	4413      	add	r3, r2
 80139b6:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

            ++rhs_ptr;
 80139ba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80139be:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 80139c2:	681b      	ldr	r3, [r3, #0]
 80139c4:	1c5a      	adds	r2, r3, #1
 80139c6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80139ca:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 80139ce:	601a      	str	r2, [r3, #0]
            ++lhs_ptr;
 80139d0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80139d4:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 80139d8:	681b      	ldr	r3, [r3, #0]
 80139da:	1c5a      	adds	r2, r3, #1
 80139dc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80139e0:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 80139e4:	601a      	str	r2, [r3, #0]
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 80139e6:	f8d7 3620 	ldr.w	r3, [r7, #1568]	; 0x620
 80139ea:	3301      	adds	r3, #1
 80139ec:	f8c7 3620 	str.w	r3, [r7, #1568]	; 0x620
 80139f0:	f8d7 2620 	ldr.w	r2, [r7, #1568]	; 0x620
 80139f4:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 80139f8:	429a      	cmp	r2, r3
 80139fa:	db9e      	blt.n	801393a <arm_nn_vec_mat_mult_t_s8+0x14f4>
 80139fc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013a00:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 8013a04:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 8013a08:	6013      	str	r3, [r2, #0]
 8013a0a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013a0e:	f5a3 7259 	sub.w	r2, r3, #868	; 0x364
 8013a12:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 8013a16:	6013      	str	r3, [r2, #0]
 8013a18:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013a1c:	f5a3 725a 	sub.w	r2, r3, #872	; 0x368
 8013a20:	f8d7 3660 	ldr.w	r3, [r7, #1632]	; 0x660
 8013a24:	6013      	str	r3, [r2, #0]
 * @return          Returns (val * multiplier)/(2 ^ shift)
 *
 */
__STATIC_FORCEINLINE q31_t arm_nn_requantize(const q31_t val, const q31_t multiplier, const q31_t shift)
{
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8013a26:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013a2a:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8013a2e:	681b      	ldr	r3, [r3, #0]
 8013a30:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8013a34:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013a38:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8013a3c:	681b      	ldr	r3, [r3, #0]
 8013a3e:	fa03 f202 	lsl.w	r2, r3, r2
 8013a42:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013a46:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8013a4a:	601a      	str	r2, [r3, #0]
 8013a4c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013a50:	f5a3 725c 	sub.w	r2, r3, #880	; 0x370
 8013a54:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013a58:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 8013a5c:	681b      	ldr	r3, [r3, #0]
 8013a5e:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8013a60:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013a64:	f5a3 725d 	sub.w	r2, r3, #884	; 0x374
 8013a68:	2300      	movs	r3, #0
 8013a6a:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 8013a6c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8013a70:	461a      	mov	r2, r3
 8013a72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013a76:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 8013a78:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8013a7c:	461a      	mov	r2, r3
 8013a7e:	2300      	movs	r3, #0
 8013a80:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8013a82:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8013a86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013a8a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013a8e:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8013a92:	681b      	ldr	r3, [r3, #0]
 8013a94:	17da      	asrs	r2, r3, #31
 8013a96:	633b      	str	r3, [r7, #48]	; 0x30
 8013a98:	637a      	str	r2, [r7, #52]	; 0x34
 8013a9a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013a9e:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 8013aa2:	681b      	ldr	r3, [r3, #0]
 8013aa4:	17da      	asrs	r2, r3, #31
 8013aa6:	62bb      	str	r3, [r7, #40]	; 0x28
 8013aa8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013aac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013aae:	fb02 f203 	mul.w	r2, r2, r3
 8013ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ab4:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8013ab6:	fb04 f303 	mul.w	r3, r4, r3
 8013aba:	4413      	add	r3, r2
 8013abc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013abe:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8013ac0:	fba2 5604 	umull	r5, r6, r2, r4
 8013ac4:	4433      	add	r3, r6
 8013ac6:	461e      	mov	r6, r3
 8013ac8:	1943      	adds	r3, r0, r5
 8013aca:	61bb      	str	r3, [r7, #24]
 8013acc:	eb41 0306 	adc.w	r3, r1, r6
 8013ad0:	61fb      	str	r3, [r7, #28]
 8013ad2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8013ad6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8013ada:	e9c3 1200 	strd	r1, r2, [r3]
    result = (int32_t)(mult.long_long >> 31);
 8013ade:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8013ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ae6:	f04f 0000 	mov.w	r0, #0
 8013aea:	f04f 0100 	mov.w	r1, #0
 8013aee:	0fd0      	lsrs	r0, r2, #31
 8013af0:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8013af4:	17d9      	asrs	r1, r3, #31
 8013af6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013afa:	f5a3 725d 	sub.w	r2, r3, #884	; 0x374
 8013afe:	4603      	mov	r3, r0
 8013b00:	6013      	str	r3, [r2, #0]
    return result;
 8013b02:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013b06:	f5a3 735d 	sub.w	r3, r3, #884	; 0x374
 8013b0a:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8013b0c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013b10:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8013b14:	681b      	ldr	r3, [r3, #0]
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	dc06      	bgt.n	8013b28 <arm_nn_vec_mat_mult_t_s8+0x16e2>
 8013b1a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013b1e:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8013b22:	681b      	ldr	r3, [r3, #0]
 8013b24:	425a      	negs	r2, r3
 8013b26:	e000      	b.n	8013b2a <arm_nn_vec_mat_mult_t_s8+0x16e4>
 8013b28:	2200      	movs	r2, #0
 8013b2a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013b2e:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 8013b32:	6019      	str	r1, [r3, #0]
 8013b34:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013b38:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8013b3c:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8013b3e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013b42:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 8013b46:	2300      	movs	r3, #0
 8013b48:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8013b4a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013b4e:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8013b52:	2201      	movs	r2, #1
 8013b54:	681b      	ldr	r3, [r3, #0]
 8013b56:	fa02 f103 	lsl.w	r1, r2, r3
 8013b5a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013b5e:	f5a3 7261 	sub.w	r2, r3, #900	; 0x384
 8013b62:	1e4b      	subs	r3, r1, #1
 8013b64:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8013b66:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013b6a:	f5a3 7162 	sub.w	r1, r3, #904	; 0x388
 8013b6e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013b72:	f5a3 725e 	sub.w	r2, r3, #888	; 0x378
 8013b76:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013b7a:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8013b7e:	6812      	ldr	r2, [r2, #0]
 8013b80:	681b      	ldr	r3, [r3, #0]
 8013b82:	4013      	ands	r3, r2
 8013b84:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8013b86:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013b8a:	f5a3 7160 	sub.w	r1, r3, #896	; 0x380
 8013b8e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013b92:	f5a3 725e 	sub.w	r2, r3, #888	; 0x378
 8013b96:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013b9a:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8013b9e:	6812      	ldr	r2, [r2, #0]
 8013ba0:	681b      	ldr	r3, [r3, #0]
 8013ba2:	fa42 f303 	asr.w	r3, r2, r3
 8013ba6:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 8013ba8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013bac:	f5a3 7263 	sub.w	r2, r3, #908	; 0x38c
 8013bb0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013bb4:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8013bb8:	681b      	ldr	r3, [r3, #0]
 8013bba:	105b      	asrs	r3, r3, #1
 8013bbc:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8013bbe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013bc2:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8013bc6:	681b      	ldr	r3, [r3, #0]
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	da0a      	bge.n	8013be2 <arm_nn_vec_mat_mult_t_s8+0x179c>
        threshold++;
 8013bcc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013bd0:	f5a3 7263 	sub.w	r2, r3, #908	; 0x38c
 8013bd4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013bd8:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 8013bdc:	681b      	ldr	r3, [r3, #0]
 8013bde:	3301      	adds	r3, #1
 8013be0:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8013be2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013be6:	f5a3 7262 	sub.w	r2, r3, #904	; 0x388
 8013bea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013bee:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 8013bf2:	6812      	ldr	r2, [r2, #0]
 8013bf4:	681b      	ldr	r3, [r3, #0]
 8013bf6:	429a      	cmp	r2, r3
 8013bf8:	dd0a      	ble.n	8013c10 <arm_nn_vec_mat_mult_t_s8+0x17ca>
        result++;
 8013bfa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013bfe:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 8013c02:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013c06:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8013c0a:	681b      	ldr	r3, [r3, #0]
 8013c0c:	3301      	adds	r3, #1
 8013c0e:	6013      	str	r3, [r2, #0]
    return result;
 8013c10:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013c14:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8013c18:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8013c1a:	bf00      	nop
        }

        // Quantize down
        res00 = arm_nn_requantize(res00, dst_multiplier, dst_shift);
 8013c1c:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
 8013c20:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013c24:	f5a3 724c 	sub.w	r2, r3, #816	; 0x330
 8013c28:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 8013c2c:	6013      	str	r3, [r2, #0]
 8013c2e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013c32:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8013c36:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 8013c3a:	6013      	str	r3, [r2, #0]
 8013c3c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013c40:	f5a3 724e 	sub.w	r2, r3, #824	; 0x338
 8013c44:	f8d7 3660 	ldr.w	r3, [r7, #1632]	; 0x660
 8013c48:	6013      	str	r3, [r2, #0]
 8013c4a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013c4e:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8013c52:	681b      	ldr	r3, [r3, #0]
 8013c54:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8013c58:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013c5c:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8013c60:	681b      	ldr	r3, [r3, #0]
 8013c62:	fa03 f202 	lsl.w	r2, r3, r2
 8013c66:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013c6a:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 8013c6e:	601a      	str	r2, [r3, #0]
 8013c70:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013c74:	f5a3 7250 	sub.w	r2, r3, #832	; 0x340
 8013c78:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013c7c:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8013c80:	681b      	ldr	r3, [r3, #0]
 8013c82:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8013c84:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013c88:	f5a3 7251 	sub.w	r2, r3, #836	; 0x344
 8013c8c:	2300      	movs	r3, #0
 8013c8e:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 8013c90:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8013c94:	461a      	mov	r2, r3
 8013c96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013c9a:	f842 3c08 	str.w	r3, [r2, #-8]
    mult.word.high = 0;
 8013c9e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8013ca2:	461a      	mov	r2, r3
 8013ca4:	2300      	movs	r3, #0
 8013ca6:	f842 3c04 	str.w	r3, [r2, #-4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8013caa:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8013cae:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8013cb2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013cb6:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 8013cba:	681b      	ldr	r3, [r3, #0]
 8013cbc:	17da      	asrs	r2, r3, #31
 8013cbe:	643b      	str	r3, [r7, #64]	; 0x40
 8013cc0:	647a      	str	r2, [r7, #68]	; 0x44
 8013cc2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013cc6:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 8013cca:	681b      	ldr	r3, [r3, #0]
 8013ccc:	17da      	asrs	r2, r3, #31
 8013cce:	63bb      	str	r3, [r7, #56]	; 0x38
 8013cd0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8013cd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013cd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013cd6:	fb02 f203 	mul.w	r2, r2, r3
 8013cda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013cdc:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8013cde:	fb04 f303 	mul.w	r3, r4, r3
 8013ce2:	4413      	add	r3, r2
 8013ce4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013ce6:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8013ce8:	fba2 ab04 	umull	sl, fp, r2, r4
 8013cec:	445b      	add	r3, fp
 8013cee:	469b      	mov	fp, r3
 8013cf0:	eb10 030a 	adds.w	r3, r0, sl
 8013cf4:	623b      	str	r3, [r7, #32]
 8013cf6:	eb41 030b 	adc.w	r3, r1, fp
 8013cfa:	627b      	str	r3, [r7, #36]	; 0x24
 8013cfc:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8013d00:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8013d04:	e943 1202 	strd	r1, r2, [r3, #-8]
    result = (int32_t)(mult.long_long >> 31);
 8013d08:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8013d0c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8013d10:	f04f 0000 	mov.w	r0, #0
 8013d14:	f04f 0100 	mov.w	r1, #0
 8013d18:	0fd0      	lsrs	r0, r2, #31
 8013d1a:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8013d1e:	17d9      	asrs	r1, r3, #31
 8013d20:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013d24:	f5a3 7251 	sub.w	r2, r3, #836	; 0x344
 8013d28:	4603      	mov	r3, r0
 8013d2a:	6013      	str	r3, [r2, #0]
    return result;
 8013d2c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013d30:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 8013d34:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8013d36:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013d3a:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8013d3e:	681b      	ldr	r3, [r3, #0]
 8013d40:	2b00      	cmp	r3, #0
 8013d42:	dc06      	bgt.n	8013d52 <arm_nn_vec_mat_mult_t_s8+0x190c>
 8013d44:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013d48:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8013d4c:	681b      	ldr	r3, [r3, #0]
 8013d4e:	425a      	negs	r2, r3
 8013d50:	e000      	b.n	8013d54 <arm_nn_vec_mat_mult_t_s8+0x190e>
 8013d52:	2200      	movs	r2, #0
 8013d54:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013d58:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8013d5c:	6019      	str	r1, [r3, #0]
 8013d5e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013d62:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8013d66:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8013d68:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013d6c:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 8013d70:	2300      	movs	r3, #0
 8013d72:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8013d74:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013d78:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8013d7c:	2201      	movs	r2, #1
 8013d7e:	681b      	ldr	r3, [r3, #0]
 8013d80:	fa02 f103 	lsl.w	r1, r2, r3
 8013d84:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013d88:	f5a3 7255 	sub.w	r2, r3, #852	; 0x354
 8013d8c:	1e4b      	subs	r3, r1, #1
 8013d8e:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8013d90:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013d94:	f5a3 7156 	sub.w	r1, r3, #856	; 0x358
 8013d98:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013d9c:	f5a3 7252 	sub.w	r2, r3, #840	; 0x348
 8013da0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013da4:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 8013da8:	6812      	ldr	r2, [r2, #0]
 8013daa:	681b      	ldr	r3, [r3, #0]
 8013dac:	4013      	ands	r3, r2
 8013dae:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8013db0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013db4:	f5a3 7154 	sub.w	r1, r3, #848	; 0x350
 8013db8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013dbc:	f5a3 7252 	sub.w	r2, r3, #840	; 0x348
 8013dc0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013dc4:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8013dc8:	6812      	ldr	r2, [r2, #0]
 8013dca:	681b      	ldr	r3, [r3, #0]
 8013dcc:	fa42 f303 	asr.w	r3, r2, r3
 8013dd0:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 8013dd2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013dd6:	f5a3 7257 	sub.w	r2, r3, #860	; 0x35c
 8013dda:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013dde:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 8013de2:	681b      	ldr	r3, [r3, #0]
 8013de4:	105b      	asrs	r3, r3, #1
 8013de6:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8013de8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013dec:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 8013df0:	681b      	ldr	r3, [r3, #0]
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	da0a      	bge.n	8013e0c <arm_nn_vec_mat_mult_t_s8+0x19c6>
        threshold++;
 8013df6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013dfa:	f5a3 7257 	sub.w	r2, r3, #860	; 0x35c
 8013dfe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013e02:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 8013e06:	681b      	ldr	r3, [r3, #0]
 8013e08:	3301      	adds	r3, #1
 8013e0a:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8013e0c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013e10:	f5a3 7256 	sub.w	r2, r3, #856	; 0x358
 8013e14:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013e18:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 8013e1c:	6812      	ldr	r2, [r2, #0]
 8013e1e:	681b      	ldr	r3, [r3, #0]
 8013e20:	429a      	cmp	r2, r3
 8013e22:	dd0a      	ble.n	8013e3a <arm_nn_vec_mat_mult_t_s8+0x19f4>
        result++;
 8013e24:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013e28:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 8013e2c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013e30:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 8013e34:	681b      	ldr	r3, [r3, #0]
 8013e36:	3301      	adds	r3, #1
 8013e38:	6013      	str	r3, [r2, #0]
    return result;
 8013e3a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013e3e:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 8013e42:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8013e44:	bf00      	nop
        res01 = arm_nn_requantize(res01, dst_multiplier, dst_shift);
 8013e46:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

        // Add offset
        res00 += dst_offset;
 8013e4a:	f8d7 2628 	ldr.w	r2, [r7, #1576]	; 0x628
 8013e4e:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 8013e52:	4413      	add	r3, r2
 8013e54:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
        res01 += dst_offset;
 8013e58:	f8d7 2624 	ldr.w	r2, [r7, #1572]	; 0x624
 8013e5c:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 8013e60:	4413      	add	r3, r2
 8013e62:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

        // Clamp the result
        res00 = MAX(res00, activation_min);
 8013e66:	f8d7 2628 	ldr.w	r2, [r7, #1576]	; 0x628
 8013e6a:	f8d7 366c 	ldr.w	r3, [r7, #1644]	; 0x66c
 8013e6e:	4293      	cmp	r3, r2
 8013e70:	bfb8      	it	lt
 8013e72:	4613      	movlt	r3, r2
 8013e74:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
        res00 = MIN(res00, activation_max);
 8013e78:	f8d7 2628 	ldr.w	r2, [r7, #1576]	; 0x628
 8013e7c:	f8d7 3670 	ldr.w	r3, [r7, #1648]	; 0x670
 8013e80:	4293      	cmp	r3, r2
 8013e82:	bfa8      	it	ge
 8013e84:	4613      	movge	r3, r2
 8013e86:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
        res01 = MAX(res01, activation_min);
 8013e8a:	f8d7 2624 	ldr.w	r2, [r7, #1572]	; 0x624
 8013e8e:	f8d7 366c 	ldr.w	r3, [r7, #1644]	; 0x66c
 8013e92:	4293      	cmp	r3, r2
 8013e94:	bfb8      	it	lt
 8013e96:	4613      	movlt	r3, r2
 8013e98:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
        res01 = MIN(res01, activation_max);
 8013e9c:	f8d7 2624 	ldr.w	r2, [r7, #1572]	; 0x624
 8013ea0:	f8d7 3670 	ldr.w	r3, [r7, #1648]	; 0x670
 8013ea4:	4293      	cmp	r3, r2
 8013ea6:	bfa8      	it	ge
 8013ea8:	4613      	movge	r3, r2
 8013eaa:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

        *dst++ = (q7_t)res00;
 8013eae:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013eb2:	f5a3 63bd 	sub.w	r3, r3, #1512	; 0x5e8
 8013eb6:	6819      	ldr	r1, [r3, #0]
 8013eb8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013ebc:	f5a3 62bd 	sub.w	r2, r3, #1512	; 0x5e8
 8013ec0:	1c4b      	adds	r3, r1, #1
 8013ec2:	6013      	str	r3, [r2, #0]
 8013ec4:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 8013ec8:	b25b      	sxtb	r3, r3
 8013eca:	700b      	strb	r3, [r1, #0]
        *dst++ = (q7_t)res01;
 8013ecc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013ed0:	f5a3 63bd 	sub.w	r3, r3, #1512	; 0x5e8
 8013ed4:	6819      	ldr	r1, [r3, #0]
 8013ed6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013eda:	f5a3 62bd 	sub.w	r2, r3, #1512	; 0x5e8
 8013ede:	1c4b      	adds	r3, r1, #1
 8013ee0:	6013      	str	r3, [r2, #0]
 8013ee2:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 8013ee6:	b25b      	sxtb	r3, r3
 8013ee8:	700b      	strb	r3, [r1, #0]

        rhs += 2 * rhs_cols;
 8013eea:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8013eee:	005b      	lsls	r3, r3, #1
 8013ef0:	4619      	mov	r1, r3
 8013ef2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013ef6:	f5a3 62bc 	sub.w	r2, r3, #1504	; 0x5e0
 8013efa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013efe:	f5a3 63bc 	sub.w	r3, r3, #1504	; 0x5e0
 8013f02:	681b      	ldr	r3, [r3, #0]
 8013f04:	440b      	add	r3, r1
 8013f06:	6013      	str	r3, [r2, #0]
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 8013f08:	f8d7 362c 	ldr.w	r3, [r7, #1580]	; 0x62c
 8013f0c:	3302      	adds	r3, #2
 8013f0e:	f8c7 362c 	str.w	r3, [r7, #1580]	; 0x62c
 8013f12:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 8013f16:	1e5a      	subs	r2, r3, #1
 8013f18:	f8d7 362c 	ldr.w	r3, [r7, #1580]	; 0x62c
 8013f1c:	4293      	cmp	r3, r2
 8013f1e:	f6fe aae5 	blt.w	80124ec <arm_nn_vec_mat_mult_t_s8+0xa6>
    }

    if (rhs_rows % 2)
 8013f22:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 8013f26:	f003 0301 	and.w	r3, r3, #1
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	f001 806e 	beq.w	801500c <arm_nn_vec_mat_mult_t_s8+0x2bc6>
    {
        const q7_t *lhs_ptr = &lhs[0];
 8013f30:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013f34:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 8013f38:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013f3c:	f2a2 52dc 	subw	r2, r2, #1500	; 0x5dc
 8013f40:	6812      	ldr	r2, [r2, #0]
 8013f42:	601a      	str	r2, [r3, #0]
        const q7_t *rhs_ptr = &rhs[0];
 8013f44:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013f48:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 8013f4c:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013f50:	f5a2 62bc 	sub.w	r2, r2, #1504	; 0x5e0
 8013f54:	6812      	ldr	r2, [r2, #0]
 8013f56:	601a      	str	r2, [r3, #0]

        q31_t res00 = 0;
 8013f58:	2300      	movs	r3, #0
 8013f5a:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
        if (bias)
 8013f5e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013f62:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 8013f66:	681b      	ldr	r3, [r3, #0]
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	d00d      	beq.n	8013f88 <arm_nn_vec_mat_mult_t_s8+0x1b42>
        {
            res00 = *bias++;
 8013f6c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013f70:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 8013f74:	681b      	ldr	r3, [r3, #0]
 8013f76:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013f7a:	f2a2 52e4 	subw	r2, r2, #1508	; 0x5e4
 8013f7e:	1d19      	adds	r1, r3, #4
 8013f80:	6011      	str	r1, [r2, #0]
 8013f82:	681b      	ldr	r3, [r3, #0]
 8013f84:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
        }

        int32_t rhs_cols_idx = 0;
 8013f88:	2300      	movs	r3, #0
 8013f8a:	f8c7 3618 	str.w	r3, [r7, #1560]	; 0x618

        q31_t val0, val1, val2, val3;
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 8013f8e:	f000 beb5 	b.w	8014cfc <arm_nn_vec_mat_mult_t_s8+0x28b6>
 8013f92:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013f96:	f2a3 532c 	subw	r3, r3, #1324	; 0x52c
 8013f9a:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8013f9e:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 8013fa0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013fa4:	f2a3 532c 	subw	r3, r3, #1324	; 0x52c
 8013fa8:	681b      	ldr	r3, [r3, #0]
 8013faa:	681b      	ldr	r3, [r3, #0]
 8013fac:	681b      	ldr	r3, [r3, #0]
 8013fae:	461a      	mov	r2, r3
 8013fb0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013fb4:	f2a3 53bc 	subw	r3, r3, #1468	; 0x5bc
 8013fb8:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8013fba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013fbe:	f2a3 532c 	subw	r3, r3, #1324	; 0x52c
 8013fc2:	681b      	ldr	r3, [r3, #0]
 8013fc4:	681b      	ldr	r3, [r3, #0]
 8013fc6:	1d1a      	adds	r2, r3, #4
 8013fc8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013fcc:	f2a3 532c 	subw	r3, r3, #1324	; 0x52c
 8013fd0:	681b      	ldr	r3, [r3, #0]
 8013fd2:	601a      	str	r2, [r3, #0]
    return (val);
 8013fd4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013fd8:	f2a3 53bc 	subw	r3, r3, #1468	; 0x5bc
 8013fdc:	681b      	ldr	r3, [r3, #0]
        {
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 8013fde:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val1 = __SXTAB16(rhs_offset_s16x2, val0);
 8013fe2:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 8013fe6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013fea:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 8013fee:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 8013ff2:	6019      	str	r1, [r3, #0]
 8013ff4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013ff8:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8013ffc:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013ffe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014002:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 8014006:	681b      	ldr	r3, [r3, #0]
 8014008:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801400c:	f2a2 5224 	subw	r2, r2, #1316	; 0x524
 8014010:	6812      	ldr	r2, [r2, #0]
 8014012:	fa23 f282 	sxtab16	r2, r3, r2
 8014016:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801401a:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 801401e:	601a      	str	r2, [r3, #0]
  return(result);
 8014020:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014024:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 8014028:	681b      	ldr	r3, [r3, #0]
 801402a:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
 801402e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014032:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8014036:	f107 0284 	add.w	r2, r7, #132	; 0x84
 801403a:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 801403c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014040:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8014044:	681b      	ldr	r3, [r3, #0]
 8014046:	681b      	ldr	r3, [r3, #0]
 8014048:	681b      	ldr	r3, [r3, #0]
 801404a:	461a      	mov	r2, r3
 801404c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014050:	f5a3 63b8 	sub.w	r3, r3, #1472	; 0x5c0
 8014054:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8014056:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801405a:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 801405e:	681b      	ldr	r3, [r3, #0]
 8014060:	681b      	ldr	r3, [r3, #0]
 8014062:	1d1a      	adds	r2, r3, #4
 8014064:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014068:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 801406c:	681b      	ldr	r3, [r3, #0]
 801406e:	601a      	str	r2, [r3, #0]
    return (val);
 8014070:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014074:	f5a3 63b8 	sub.w	r3, r3, #1472	; 0x5c0
 8014078:	681b      	ldr	r3, [r3, #0]
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 801407a:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 801407e:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 8014082:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014086:	f2a3 5314 	subw	r3, r3, #1300	; 0x514
 801408a:	601a      	str	r2, [r3, #0]
 801408c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014090:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 8014094:	2208      	movs	r2, #8
 8014096:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8014098:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801409c:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 80140a0:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80140a4:	f5a2 62a3 	sub.w	r2, r2, #1304	; 0x518
 80140a8:	6812      	ldr	r2, [r2, #0]
 80140aa:	f002 021f 	and.w	r2, r2, #31
 80140ae:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 80140b0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80140b4:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 80140b8:	681b      	ldr	r3, [r3, #0]
 80140ba:	2b00      	cmp	r3, #0
 80140bc:	d105      	bne.n	80140ca <arm_nn_vec_mat_mult_t_s8+0x1c84>
    return op1;
 80140be:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80140c2:	f2a3 5314 	subw	r3, r3, #1300	; 0x514
 80140c6:	681b      	ldr	r3, [r3, #0]
 80140c8:	e00b      	b.n	80140e2 <arm_nn_vec_mat_mult_t_s8+0x1c9c>
  return (op1 >> op2) | (op1 << (32U - op2));
 80140ca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80140ce:	f2a3 5214 	subw	r2, r3, #1300	; 0x514
 80140d2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80140d6:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 80140da:	6812      	ldr	r2, [r2, #0]
 80140dc:	681b      	ldr	r3, [r3, #0]
 80140de:	fa62 f303 	ror.w	r3, r2, r3
 80140e2:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80140e6:	f5a2 62a1 	sub.w	r2, r2, #1288	; 0x508
 80140ea:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 80140ee:	6011      	str	r1, [r2, #0]
 80140f0:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80140f4:	f2a2 520c 	subw	r2, r2, #1292	; 0x50c
 80140f8:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80140fa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80140fe:	f5a3 63a1 	sub.w	r3, r3, #1288	; 0x508
 8014102:	681b      	ldr	r3, [r3, #0]
 8014104:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014108:	f2a2 520c 	subw	r2, r2, #1292	; 0x50c
 801410c:	6812      	ldr	r2, [r2, #0]
 801410e:	fa23 f282 	sxtab16	r2, r3, r2
 8014112:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014116:	f5a3 63a2 	sub.w	r3, r3, #1296	; 0x510
 801411a:	601a      	str	r2, [r3, #0]
  return(result);
 801411c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014120:	f5a3 63a2 	sub.w	r3, r3, #1296	; 0x510
 8014124:	681b      	ldr	r3, [r3, #0]
 8014126:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val3 = __SXTAB16(lhs_offset_s16x2, val2);
 801412a:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 801412e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014132:	f2a3 43fc 	subw	r3, r3, #1276	; 0x4fc
 8014136:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 801413a:	6019      	str	r1, [r3, #0]
 801413c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014140:	f5a3 63a0 	sub.w	r3, r3, #1280	; 0x500
 8014144:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014146:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801414a:	f2a3 43fc 	subw	r3, r3, #1276	; 0x4fc
 801414e:	681b      	ldr	r3, [r3, #0]
 8014150:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014154:	f5a2 62a0 	sub.w	r2, r2, #1280	; 0x500
 8014158:	6812      	ldr	r2, [r2, #0]
 801415a:	fa23 f282 	sxtab16	r2, r3, r2
 801415e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014162:	f2a3 5304 	subw	r3, r3, #1284	; 0x504
 8014166:	601a      	str	r2, [r3, #0]
  return(result);
 8014168:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801416c:	f2a3 5304 	subw	r3, r3, #1284	; 0x504
 8014170:	681b      	ldr	r3, [r3, #0]
 8014172:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
            val2 = __SXTAB16(lhs_offset_s16x2, __ROR(val2, 8));
 8014176:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 801417a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801417e:	f2a3 43f4 	subw	r3, r3, #1268	; 0x4f4
 8014182:	601a      	str	r2, [r3, #0]
 8014184:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014188:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 801418c:	2208      	movs	r2, #8
 801418e:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8014190:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014194:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 8014198:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801419c:	f5a2 629f 	sub.w	r2, r2, #1272	; 0x4f8
 80141a0:	6812      	ldr	r2, [r2, #0]
 80141a2:	f002 021f 	and.w	r2, r2, #31
 80141a6:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 80141a8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80141ac:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 80141b0:	681b      	ldr	r3, [r3, #0]
 80141b2:	2b00      	cmp	r3, #0
 80141b4:	d105      	bne.n	80141c2 <arm_nn_vec_mat_mult_t_s8+0x1d7c>
    return op1;
 80141b6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80141ba:	f2a3 43f4 	subw	r3, r3, #1268	; 0x4f4
 80141be:	681b      	ldr	r3, [r3, #0]
 80141c0:	e00b      	b.n	80141da <arm_nn_vec_mat_mult_t_s8+0x1d94>
  return (op1 >> op2) | (op1 << (32U - op2));
 80141c2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80141c6:	f2a3 42f4 	subw	r2, r3, #1268	; 0x4f4
 80141ca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80141ce:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 80141d2:	6812      	ldr	r2, [r2, #0]
 80141d4:	681b      	ldr	r3, [r3, #0]
 80141d6:	fa62 f303 	ror.w	r3, r2, r3
 80141da:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80141de:	f5a2 629d 	sub.w	r2, r2, #1256	; 0x4e8
 80141e2:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 80141e6:	6011      	str	r1, [r2, #0]
 80141e8:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80141ec:	f2a2 42ec 	subw	r2, r2, #1260	; 0x4ec
 80141f0:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80141f2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80141f6:	f5a3 639d 	sub.w	r3, r3, #1256	; 0x4e8
 80141fa:	681b      	ldr	r3, [r3, #0]
 80141fc:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014200:	f2a2 42ec 	subw	r2, r2, #1260	; 0x4ec
 8014204:	6812      	ldr	r2, [r2, #0]
 8014206:	fa23 f282 	sxtab16	r2, r3, r2
 801420a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801420e:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 8014212:	601a      	str	r2, [r3, #0]
  return(result);
 8014214:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014218:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 801421c:	681b      	ldr	r3, [r3, #0]
 801421e:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc

            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
 8014222:	f8d7 05d8 	ldr.w	r0, [r7, #1496]	; 0x5d8
 8014226:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 801422a:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 801422e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014232:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 8014236:	6018      	str	r0, [r3, #0]
 8014238:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801423c:	f2a3 43dc 	subw	r3, r3, #1244	; 0x4dc
 8014240:	6019      	str	r1, [r3, #0]
 8014242:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014246:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 801424a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801424c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014250:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 8014254:	681b      	ldr	r3, [r3, #0]
 8014256:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801425a:	f2a2 42dc 	subw	r2, r2, #1244	; 0x4dc
 801425e:	6812      	ldr	r2, [r2, #0]
 8014260:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8014264:	f5a1 619c 	sub.w	r1, r1, #1248	; 0x4e0
 8014268:	6809      	ldr	r1, [r1, #0]
 801426a:	fb23 1202 	smlad	r2, r3, r2, r1
 801426e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014272:	f2a3 43e4 	subw	r3, r3, #1252	; 0x4e4
 8014276:	601a      	str	r2, [r3, #0]
  return(result);
 8014278:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801427c:	f2a3 43e4 	subw	r3, r3, #1252	; 0x4e4
 8014280:	681b      	ldr	r3, [r3, #0]
 8014282:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
            res00 = __SMLAD(val2, val0, res00);
 8014286:	f8d7 05dc 	ldr.w	r0, [r7, #1500]	; 0x5dc
 801428a:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 801428e:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 8014292:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014296:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 801429a:	6018      	str	r0, [r3, #0]
 801429c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80142a0:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 80142a4:	6019      	str	r1, [r3, #0]
 80142a6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80142aa:	f5a3 639a 	sub.w	r3, r3, #1232	; 0x4d0
 80142ae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80142b0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80142b4:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 80142b8:	681b      	ldr	r3, [r3, #0]
 80142ba:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80142be:	f2a2 42cc 	subw	r2, r2, #1228	; 0x4cc
 80142c2:	6812      	ldr	r2, [r2, #0]
 80142c4:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 80142c8:	f5a1 619a 	sub.w	r1, r1, #1232	; 0x4d0
 80142cc:	6809      	ldr	r1, [r1, #0]
 80142ce:	fb23 1202 	smlad	r2, r3, r2, r1
 80142d2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80142d6:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 80142da:	601a      	str	r2, [r3, #0]
  return(result);
 80142dc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80142e0:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 80142e4:	681b      	ldr	r3, [r3, #0]
 80142e6:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 80142ea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80142ee:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 80142f2:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80142f6:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 80142f8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80142fc:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 8014300:	681b      	ldr	r3, [r3, #0]
 8014302:	681b      	ldr	r3, [r3, #0]
 8014304:	681b      	ldr	r3, [r3, #0]
 8014306:	461a      	mov	r2, r3
 8014308:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801430c:	f2a3 53c4 	subw	r3, r3, #1476	; 0x5c4
 8014310:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8014312:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014316:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 801431a:	681b      	ldr	r3, [r3, #0]
 801431c:	681b      	ldr	r3, [r3, #0]
 801431e:	1d1a      	adds	r2, r3, #4
 8014320:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014324:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 8014328:	681b      	ldr	r3, [r3, #0]
 801432a:	601a      	str	r2, [r3, #0]
    return (val);
 801432c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014330:	f2a3 53c4 	subw	r3, r3, #1476	; 0x5c4
 8014334:	681b      	ldr	r3, [r3, #0]

            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 8014336:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val1 = __SXTAB16(rhs_offset_s16x2, val0);
 801433a:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 801433e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014342:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 8014346:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 801434a:	6019      	str	r1, [r3, #0]
 801434c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014350:	f2a3 43bc 	subw	r3, r3, #1212	; 0x4bc
 8014354:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014356:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801435a:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 801435e:	681b      	ldr	r3, [r3, #0]
 8014360:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014364:	f2a2 42bc 	subw	r2, r2, #1212	; 0x4bc
 8014368:	6812      	ldr	r2, [r2, #0]
 801436a:	fa23 f282 	sxtab16	r2, r3, r2
 801436e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014372:	f5a3 6398 	sub.w	r3, r3, #1216	; 0x4c0
 8014376:	601a      	str	r2, [r3, #0]
  return(result);
 8014378:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801437c:	f5a3 6398 	sub.w	r3, r3, #1216	; 0x4c0
 8014380:	681b      	ldr	r3, [r3, #0]
 8014382:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
 8014386:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801438a:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 801438e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8014392:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 8014394:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014398:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 801439c:	681b      	ldr	r3, [r3, #0]
 801439e:	681b      	ldr	r3, [r3, #0]
 80143a0:	681b      	ldr	r3, [r3, #0]
 80143a2:	461a      	mov	r2, r3
 80143a4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80143a8:	f5a3 63b9 	sub.w	r3, r3, #1480	; 0x5c8
 80143ac:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 80143ae:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80143b2:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 80143b6:	681b      	ldr	r3, [r3, #0]
 80143b8:	681b      	ldr	r3, [r3, #0]
 80143ba:	1d1a      	adds	r2, r3, #4
 80143bc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80143c0:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 80143c4:	681b      	ldr	r3, [r3, #0]
 80143c6:	601a      	str	r2, [r3, #0]
    return (val);
 80143c8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80143cc:	f5a3 63b9 	sub.w	r3, r3, #1480	; 0x5c8
 80143d0:	681b      	ldr	r3, [r3, #0]
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 80143d2:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 80143d6:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 80143da:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80143de:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 80143e2:	601a      	str	r2, [r3, #0]
 80143e4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80143e8:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 80143ec:	2208      	movs	r2, #8
 80143ee:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 80143f0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80143f4:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 80143f8:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80143fc:	f5a2 6296 	sub.w	r2, r2, #1200	; 0x4b0
 8014400:	6812      	ldr	r2, [r2, #0]
 8014402:	f002 021f 	and.w	r2, r2, #31
 8014406:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8014408:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801440c:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 8014410:	681b      	ldr	r3, [r3, #0]
 8014412:	2b00      	cmp	r3, #0
 8014414:	d105      	bne.n	8014422 <arm_nn_vec_mat_mult_t_s8+0x1fdc>
    return op1;
 8014416:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801441a:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 801441e:	681b      	ldr	r3, [r3, #0]
 8014420:	e00b      	b.n	801443a <arm_nn_vec_mat_mult_t_s8+0x1ff4>
  return (op1 >> op2) | (op1 << (32U - op2));
 8014422:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014426:	f2a3 42ac 	subw	r2, r3, #1196	; 0x4ac
 801442a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801442e:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 8014432:	6812      	ldr	r2, [r2, #0]
 8014434:	681b      	ldr	r3, [r3, #0]
 8014436:	fa62 f303 	ror.w	r3, r2, r3
 801443a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801443e:	f5a2 6294 	sub.w	r2, r2, #1184	; 0x4a0
 8014442:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 8014446:	6011      	str	r1, [r2, #0]
 8014448:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801444c:	f2a2 42a4 	subw	r2, r2, #1188	; 0x4a4
 8014450:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014452:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014456:	f5a3 6394 	sub.w	r3, r3, #1184	; 0x4a0
 801445a:	681b      	ldr	r3, [r3, #0]
 801445c:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014460:	f2a2 42a4 	subw	r2, r2, #1188	; 0x4a4
 8014464:	6812      	ldr	r2, [r2, #0]
 8014466:	fa23 f282 	sxtab16	r2, r3, r2
 801446a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801446e:	f5a3 6395 	sub.w	r3, r3, #1192	; 0x4a8
 8014472:	601a      	str	r2, [r3, #0]
  return(result);
 8014474:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014478:	f5a3 6395 	sub.w	r3, r3, #1192	; 0x4a8
 801447c:	681b      	ldr	r3, [r3, #0]
 801447e:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val3 = __SXTAB16(lhs_offset_s16x2, val2);
 8014482:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 8014486:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801448a:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 801448e:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 8014492:	6019      	str	r1, [r3, #0]
 8014494:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014498:	f5a3 6393 	sub.w	r3, r3, #1176	; 0x498
 801449c:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801449e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80144a2:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 80144a6:	681b      	ldr	r3, [r3, #0]
 80144a8:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80144ac:	f5a2 6293 	sub.w	r2, r2, #1176	; 0x498
 80144b0:	6812      	ldr	r2, [r2, #0]
 80144b2:	fa23 f282 	sxtab16	r2, r3, r2
 80144b6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80144ba:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 80144be:	601a      	str	r2, [r3, #0]
  return(result);
 80144c0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80144c4:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 80144c8:	681b      	ldr	r3, [r3, #0]
 80144ca:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
            val2 = __SXTAB16(lhs_offset_s16x2, __ROR(val2, 8));
 80144ce:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 80144d2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80144d6:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 80144da:	601a      	str	r2, [r3, #0]
 80144dc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80144e0:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 80144e4:	2208      	movs	r2, #8
 80144e6:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 80144e8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80144ec:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 80144f0:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80144f4:	f5a2 6292 	sub.w	r2, r2, #1168	; 0x490
 80144f8:	6812      	ldr	r2, [r2, #0]
 80144fa:	f002 021f 	and.w	r2, r2, #31
 80144fe:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8014500:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014504:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 8014508:	681b      	ldr	r3, [r3, #0]
 801450a:	2b00      	cmp	r3, #0
 801450c:	d105      	bne.n	801451a <arm_nn_vec_mat_mult_t_s8+0x20d4>
    return op1;
 801450e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014512:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 8014516:	681b      	ldr	r3, [r3, #0]
 8014518:	e00b      	b.n	8014532 <arm_nn_vec_mat_mult_t_s8+0x20ec>
  return (op1 >> op2) | (op1 << (32U - op2));
 801451a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801451e:	f2a3 428c 	subw	r2, r3, #1164	; 0x48c
 8014522:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014526:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 801452a:	6812      	ldr	r2, [r2, #0]
 801452c:	681b      	ldr	r3, [r3, #0]
 801452e:	fa62 f303 	ror.w	r3, r2, r3
 8014532:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014536:	f5a2 6290 	sub.w	r2, r2, #1152	; 0x480
 801453a:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 801453e:	6011      	str	r1, [r2, #0]
 8014540:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014544:	f2a2 4284 	subw	r2, r2, #1156	; 0x484
 8014548:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801454a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801454e:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 8014552:	681b      	ldr	r3, [r3, #0]
 8014554:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014558:	f2a2 4284 	subw	r2, r2, #1156	; 0x484
 801455c:	6812      	ldr	r2, [r2, #0]
 801455e:	fa23 f282 	sxtab16	r2, r3, r2
 8014562:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014566:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 801456a:	601a      	str	r2, [r3, #0]
  return(result);
 801456c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014570:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 8014574:	681b      	ldr	r3, [r3, #0]
 8014576:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc

            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
 801457a:	f8d7 05d8 	ldr.w	r0, [r7, #1496]	; 0x5d8
 801457e:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 8014582:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 8014586:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801458a:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 801458e:	6018      	str	r0, [r3, #0]
 8014590:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014594:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 8014598:	6019      	str	r1, [r3, #0]
 801459a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801459e:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 80145a2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80145a4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80145a8:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 80145ac:	681b      	ldr	r3, [r3, #0]
 80145ae:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80145b2:	f2a2 4274 	subw	r2, r2, #1140	; 0x474
 80145b6:	6812      	ldr	r2, [r2, #0]
 80145b8:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 80145bc:	f5a1 618f 	sub.w	r1, r1, #1144	; 0x478
 80145c0:	6809      	ldr	r1, [r1, #0]
 80145c2:	fb23 1202 	smlad	r2, r3, r2, r1
 80145c6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80145ca:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 80145ce:	601a      	str	r2, [r3, #0]
  return(result);
 80145d0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80145d4:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 80145d8:	681b      	ldr	r3, [r3, #0]
 80145da:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
            res00 = __SMLAD(val2, val0, res00);
 80145de:	f8d7 05dc 	ldr.w	r0, [r7, #1500]	; 0x5dc
 80145e2:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 80145e6:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 80145ea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80145ee:	f5a3 638c 	sub.w	r3, r3, #1120	; 0x460
 80145f2:	6018      	str	r0, [r3, #0]
 80145f4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80145f8:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80145fc:	6019      	str	r1, [r3, #0]
 80145fe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014602:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 8014606:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8014608:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801460c:	f5a3 638c 	sub.w	r3, r3, #1120	; 0x460
 8014610:	681b      	ldr	r3, [r3, #0]
 8014612:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014616:	f2a2 4264 	subw	r2, r2, #1124	; 0x464
 801461a:	6812      	ldr	r2, [r2, #0]
 801461c:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8014620:	f5a1 618d 	sub.w	r1, r1, #1128	; 0x468
 8014624:	6809      	ldr	r1, [r1, #0]
 8014626:	fb23 1202 	smlad	r2, r3, r2, r1
 801462a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801462e:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 8014632:	601a      	str	r2, [r3, #0]
  return(result);
 8014634:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014638:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 801463c:	681b      	ldr	r3, [r3, #0]
 801463e:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 8014642:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014646:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 801464a:	f107 0280 	add.w	r2, r7, #128	; 0x80
 801464e:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 8014650:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014654:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 8014658:	681b      	ldr	r3, [r3, #0]
 801465a:	681b      	ldr	r3, [r3, #0]
 801465c:	681b      	ldr	r3, [r3, #0]
 801465e:	461a      	mov	r2, r3
 8014660:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014664:	f2a3 53cc 	subw	r3, r3, #1484	; 0x5cc
 8014668:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801466a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801466e:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 8014672:	681b      	ldr	r3, [r3, #0]
 8014674:	681b      	ldr	r3, [r3, #0]
 8014676:	1d1a      	adds	r2, r3, #4
 8014678:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801467c:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 8014680:	681b      	ldr	r3, [r3, #0]
 8014682:	601a      	str	r2, [r3, #0]
    return (val);
 8014684:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014688:	f2a3 53cc 	subw	r3, r3, #1484	; 0x5cc
 801468c:	681b      	ldr	r3, [r3, #0]

            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 801468e:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val1 = __SXTAB16(rhs_offset_s16x2, val0);
 8014692:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 8014696:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801469a:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 801469e:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 80146a2:	6019      	str	r1, [r3, #0]
 80146a4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80146a8:	f2a3 4354 	subw	r3, r3, #1108	; 0x454
 80146ac:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80146ae:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80146b2:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 80146b6:	681b      	ldr	r3, [r3, #0]
 80146b8:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80146bc:	f2a2 4254 	subw	r2, r2, #1108	; 0x454
 80146c0:	6812      	ldr	r2, [r2, #0]
 80146c2:	fa23 f282 	sxtab16	r2, r3, r2
 80146c6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80146ca:	f5a3 638b 	sub.w	r3, r3, #1112	; 0x458
 80146ce:	601a      	str	r2, [r3, #0]
  return(result);
 80146d0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80146d4:	f5a3 638b 	sub.w	r3, r3, #1112	; 0x458
 80146d8:	681b      	ldr	r3, [r3, #0]
 80146da:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
 80146de:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80146e2:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 80146e6:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80146ea:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 80146ec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80146f0:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 80146f4:	681b      	ldr	r3, [r3, #0]
 80146f6:	681b      	ldr	r3, [r3, #0]
 80146f8:	681b      	ldr	r3, [r3, #0]
 80146fa:	461a      	mov	r2, r3
 80146fc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014700:	f5a3 63ba 	sub.w	r3, r3, #1488	; 0x5d0
 8014704:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8014706:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801470a:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 801470e:	681b      	ldr	r3, [r3, #0]
 8014710:	681b      	ldr	r3, [r3, #0]
 8014712:	1d1a      	adds	r2, r3, #4
 8014714:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014718:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 801471c:	681b      	ldr	r3, [r3, #0]
 801471e:	601a      	str	r2, [r3, #0]
    return (val);
 8014720:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014724:	f5a3 63ba 	sub.w	r3, r3, #1488	; 0x5d0
 8014728:	681b      	ldr	r3, [r3, #0]
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 801472a:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 801472e:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 8014732:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014736:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 801473a:	601a      	str	r2, [r3, #0]
 801473c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014740:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8014744:	2208      	movs	r2, #8
 8014746:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8014748:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801474c:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8014750:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014754:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 8014758:	6812      	ldr	r2, [r2, #0]
 801475a:	f002 021f 	and.w	r2, r2, #31
 801475e:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8014760:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014764:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8014768:	681b      	ldr	r3, [r3, #0]
 801476a:	2b00      	cmp	r3, #0
 801476c:	d105      	bne.n	801477a <arm_nn_vec_mat_mult_t_s8+0x2334>
    return op1;
 801476e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014772:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 8014776:	681b      	ldr	r3, [r3, #0]
 8014778:	e00b      	b.n	8014792 <arm_nn_vec_mat_mult_t_s8+0x234c>
  return (op1 >> op2) | (op1 << (32U - op2));
 801477a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801477e:	f2a3 4244 	subw	r2, r3, #1092	; 0x444
 8014782:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014786:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 801478a:	6812      	ldr	r2, [r2, #0]
 801478c:	681b      	ldr	r3, [r3, #0]
 801478e:	fa62 f303 	ror.w	r3, r2, r3
 8014792:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014796:	f5a2 6287 	sub.w	r2, r2, #1080	; 0x438
 801479a:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 801479e:	6011      	str	r1, [r2, #0]
 80147a0:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80147a4:	f2a2 423c 	subw	r2, r2, #1084	; 0x43c
 80147a8:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80147aa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80147ae:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 80147b2:	681b      	ldr	r3, [r3, #0]
 80147b4:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80147b8:	f2a2 423c 	subw	r2, r2, #1084	; 0x43c
 80147bc:	6812      	ldr	r2, [r2, #0]
 80147be:	fa23 f282 	sxtab16	r2, r3, r2
 80147c2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80147c6:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 80147ca:	601a      	str	r2, [r3, #0]
  return(result);
 80147cc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80147d0:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 80147d4:	681b      	ldr	r3, [r3, #0]
 80147d6:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val3 = __SXTAB16(lhs_offset_s16x2, val2);
 80147da:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 80147de:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80147e2:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 80147e6:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 80147ea:	6019      	str	r1, [r3, #0]
 80147ec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80147f0:	f5a3 6386 	sub.w	r3, r3, #1072	; 0x430
 80147f4:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80147f6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80147fa:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 80147fe:	681b      	ldr	r3, [r3, #0]
 8014800:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014804:	f5a2 6286 	sub.w	r2, r2, #1072	; 0x430
 8014808:	6812      	ldr	r2, [r2, #0]
 801480a:	fa23 f282 	sxtab16	r2, r3, r2
 801480e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014812:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8014816:	601a      	str	r2, [r3, #0]
  return(result);
 8014818:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801481c:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8014820:	681b      	ldr	r3, [r3, #0]
 8014822:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
            val2 = __SXTAB16(lhs_offset_s16x2, __ROR(val2, 8));
 8014826:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 801482a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801482e:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8014832:	601a      	str	r2, [r3, #0]
 8014834:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014838:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 801483c:	2208      	movs	r2, #8
 801483e:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8014840:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014844:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8014848:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801484c:	f5a2 6285 	sub.w	r2, r2, #1064	; 0x428
 8014850:	6812      	ldr	r2, [r2, #0]
 8014852:	f002 021f 	and.w	r2, r2, #31
 8014856:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8014858:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801485c:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8014860:	681b      	ldr	r3, [r3, #0]
 8014862:	2b00      	cmp	r3, #0
 8014864:	d105      	bne.n	8014872 <arm_nn_vec_mat_mult_t_s8+0x242c>
    return op1;
 8014866:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801486a:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 801486e:	681b      	ldr	r3, [r3, #0]
 8014870:	e00b      	b.n	801488a <arm_nn_vec_mat_mult_t_s8+0x2444>
  return (op1 >> op2) | (op1 << (32U - op2));
 8014872:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014876:	f2a3 4224 	subw	r2, r3, #1060	; 0x424
 801487a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801487e:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8014882:	6812      	ldr	r2, [r2, #0]
 8014884:	681b      	ldr	r3, [r3, #0]
 8014886:	fa62 f303 	ror.w	r3, r2, r3
 801488a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801488e:	f5a2 6283 	sub.w	r2, r2, #1048	; 0x418
 8014892:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 8014896:	6011      	str	r1, [r2, #0]
 8014898:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801489c:	f2a2 421c 	subw	r2, r2, #1052	; 0x41c
 80148a0:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80148a2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80148a6:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80148aa:	681b      	ldr	r3, [r3, #0]
 80148ac:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80148b0:	f2a2 421c 	subw	r2, r2, #1052	; 0x41c
 80148b4:	6812      	ldr	r2, [r2, #0]
 80148b6:	fa23 f282 	sxtab16	r2, r3, r2
 80148ba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80148be:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 80148c2:	601a      	str	r2, [r3, #0]
  return(result);
 80148c4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80148c8:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 80148cc:	681b      	ldr	r3, [r3, #0]
 80148ce:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc

            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
 80148d2:	f8d7 05d8 	ldr.w	r0, [r7, #1496]	; 0x5d8
 80148d6:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 80148da:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 80148de:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80148e2:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 80148e6:	6018      	str	r0, [r3, #0]
 80148e8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80148ec:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 80148f0:	6019      	str	r1, [r3, #0]
 80148f2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80148f6:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 80148fa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80148fc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014900:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8014904:	681b      	ldr	r3, [r3, #0]
 8014906:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801490a:	f2a2 420c 	subw	r2, r2, #1036	; 0x40c
 801490e:	6812      	ldr	r2, [r2, #0]
 8014910:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8014914:	f5a1 6182 	sub.w	r1, r1, #1040	; 0x410
 8014918:	6809      	ldr	r1, [r1, #0]
 801491a:	fb23 1202 	smlad	r2, r3, r2, r1
 801491e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014922:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8014926:	601a      	str	r2, [r3, #0]
  return(result);
 8014928:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801492c:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8014930:	681b      	ldr	r3, [r3, #0]
 8014932:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
            res00 = __SMLAD(val2, val0, res00);
 8014936:	f8d7 05dc 	ldr.w	r0, [r7, #1500]	; 0x5dc
 801493a:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 801493e:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 8014942:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014946:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 801494a:	6018      	str	r0, [r3, #0]
 801494c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014950:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8014954:	6019      	str	r1, [r3, #0]
 8014956:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801495a:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 801495e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8014960:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014964:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 8014968:	681b      	ldr	r3, [r3, #0]
 801496a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801496e:	f5a2 727f 	sub.w	r2, r2, #1020	; 0x3fc
 8014972:	6812      	ldr	r2, [r2, #0]
 8014974:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8014978:	f5a1 6180 	sub.w	r1, r1, #1024	; 0x400
 801497c:	6809      	ldr	r1, [r1, #0]
 801497e:	fb23 1202 	smlad	r2, r3, r2, r1
 8014982:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014986:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 801498a:	601a      	str	r2, [r3, #0]
  return(result);
 801498c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014990:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8014994:	681b      	ldr	r3, [r3, #0]
 8014996:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 801499a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801499e:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 80149a2:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80149a6:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 80149a8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80149ac:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 80149b0:	681b      	ldr	r3, [r3, #0]
 80149b2:	681b      	ldr	r3, [r3, #0]
 80149b4:	681b      	ldr	r3, [r3, #0]
 80149b6:	461a      	mov	r2, r3
 80149b8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80149bc:	f2a3 53d4 	subw	r3, r3, #1492	; 0x5d4
 80149c0:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 80149c2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80149c6:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 80149ca:	681b      	ldr	r3, [r3, #0]
 80149cc:	681b      	ldr	r3, [r3, #0]
 80149ce:	1d1a      	adds	r2, r3, #4
 80149d0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80149d4:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 80149d8:	681b      	ldr	r3, [r3, #0]
 80149da:	601a      	str	r2, [r3, #0]
    return (val);
 80149dc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80149e0:	f2a3 53d4 	subw	r3, r3, #1492	; 0x5d4
 80149e4:	681b      	ldr	r3, [r3, #0]

            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 80149e6:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val1 = __SXTAB16(rhs_offset_s16x2, val0);
 80149ea:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 80149ee:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80149f2:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80149f6:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 80149fa:	6019      	str	r1, [r3, #0]
 80149fc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014a00:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 8014a04:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014a06:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014a0a:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8014a0e:	681b      	ldr	r3, [r3, #0]
 8014a10:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014a14:	f5a2 727b 	sub.w	r2, r2, #1004	; 0x3ec
 8014a18:	6812      	ldr	r2, [r2, #0]
 8014a1a:	fa23 f282 	sxtab16	r2, r3, r2
 8014a1e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014a22:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 8014a26:	601a      	str	r2, [r3, #0]
  return(result);
 8014a28:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014a2c:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 8014a30:	681b      	ldr	r3, [r3, #0]
 8014a32:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
 8014a36:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014a3a:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8014a3e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8014a42:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 8014a44:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014a48:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8014a4c:	681b      	ldr	r3, [r3, #0]
 8014a4e:	681b      	ldr	r3, [r3, #0]
 8014a50:	681b      	ldr	r3, [r3, #0]
 8014a52:	461a      	mov	r2, r3
 8014a54:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014a58:	f5a3 63bb 	sub.w	r3, r3, #1496	; 0x5d8
 8014a5c:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8014a5e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014a62:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8014a66:	681b      	ldr	r3, [r3, #0]
 8014a68:	681b      	ldr	r3, [r3, #0]
 8014a6a:	1d1a      	adds	r2, r3, #4
 8014a6c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014a70:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8014a74:	681b      	ldr	r3, [r3, #0]
 8014a76:	601a      	str	r2, [r3, #0]
    return (val);
 8014a78:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014a7c:	f5a3 63bb 	sub.w	r3, r3, #1496	; 0x5d8
 8014a80:	681b      	ldr	r3, [r3, #0]
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 8014a82:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 8014a86:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 8014a8a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014a8e:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8014a92:	601a      	str	r2, [r3, #0]
 8014a94:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014a98:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8014a9c:	2208      	movs	r2, #8
 8014a9e:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8014aa0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014aa4:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8014aa8:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014aac:	f5a2 7278 	sub.w	r2, r2, #992	; 0x3e0
 8014ab0:	6812      	ldr	r2, [r2, #0]
 8014ab2:	f002 021f 	and.w	r2, r2, #31
 8014ab6:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8014ab8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014abc:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8014ac0:	681b      	ldr	r3, [r3, #0]
 8014ac2:	2b00      	cmp	r3, #0
 8014ac4:	d105      	bne.n	8014ad2 <arm_nn_vec_mat_mult_t_s8+0x268c>
    return op1;
 8014ac6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014aca:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8014ace:	681b      	ldr	r3, [r3, #0]
 8014ad0:	e00b      	b.n	8014aea <arm_nn_vec_mat_mult_t_s8+0x26a4>
  return (op1 >> op2) | (op1 << (32U - op2));
 8014ad2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014ad6:	f5a3 7277 	sub.w	r2, r3, #988	; 0x3dc
 8014ada:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014ade:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8014ae2:	6812      	ldr	r2, [r2, #0]
 8014ae4:	681b      	ldr	r3, [r3, #0]
 8014ae6:	fa62 f303 	ror.w	r3, r2, r3
 8014aea:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014aee:	f5a2 7274 	sub.w	r2, r2, #976	; 0x3d0
 8014af2:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 8014af6:	6011      	str	r1, [r2, #0]
 8014af8:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014afc:	f5a2 7275 	sub.w	r2, r2, #980	; 0x3d4
 8014b00:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014b02:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014b06:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 8014b0a:	681b      	ldr	r3, [r3, #0]
 8014b0c:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014b10:	f5a2 7275 	sub.w	r2, r2, #980	; 0x3d4
 8014b14:	6812      	ldr	r2, [r2, #0]
 8014b16:	fa23 f282 	sxtab16	r2, r3, r2
 8014b1a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014b1e:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 8014b22:	601a      	str	r2, [r3, #0]
  return(result);
 8014b24:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014b28:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 8014b2c:	681b      	ldr	r3, [r3, #0]
 8014b2e:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val3 = __SXTAB16(lhs_offset_s16x2, val2);
 8014b32:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 8014b36:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014b3a:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 8014b3e:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 8014b42:	6019      	str	r1, [r3, #0]
 8014b44:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014b48:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 8014b4c:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014b4e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014b52:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 8014b56:	681b      	ldr	r3, [r3, #0]
 8014b58:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014b5c:	f5a2 7272 	sub.w	r2, r2, #968	; 0x3c8
 8014b60:	6812      	ldr	r2, [r2, #0]
 8014b62:	fa23 f282 	sxtab16	r2, r3, r2
 8014b66:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014b6a:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8014b6e:	601a      	str	r2, [r3, #0]
  return(result);
 8014b70:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014b74:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8014b78:	681b      	ldr	r3, [r3, #0]
 8014b7a:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
            val2 = __SXTAB16(lhs_offset_s16x2, __ROR(val2, 8));
 8014b7e:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 8014b82:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014b86:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 8014b8a:	601a      	str	r2, [r3, #0]
 8014b8c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014b90:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 8014b94:	2208      	movs	r2, #8
 8014b96:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8014b98:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014b9c:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 8014ba0:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014ba4:	f5a2 7270 	sub.w	r2, r2, #960	; 0x3c0
 8014ba8:	6812      	ldr	r2, [r2, #0]
 8014baa:	f002 021f 	and.w	r2, r2, #31
 8014bae:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8014bb0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014bb4:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 8014bb8:	681b      	ldr	r3, [r3, #0]
 8014bba:	2b00      	cmp	r3, #0
 8014bbc:	d105      	bne.n	8014bca <arm_nn_vec_mat_mult_t_s8+0x2784>
    return op1;
 8014bbe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014bc2:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 8014bc6:	681b      	ldr	r3, [r3, #0]
 8014bc8:	e00b      	b.n	8014be2 <arm_nn_vec_mat_mult_t_s8+0x279c>
  return (op1 >> op2) | (op1 << (32U - op2));
 8014bca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014bce:	f5a3 726f 	sub.w	r2, r3, #956	; 0x3bc
 8014bd2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014bd6:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 8014bda:	6812      	ldr	r2, [r2, #0]
 8014bdc:	681b      	ldr	r3, [r3, #0]
 8014bde:	fa62 f303 	ror.w	r3, r2, r3
 8014be2:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014be6:	f5a2 726c 	sub.w	r2, r2, #944	; 0x3b0
 8014bea:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 8014bee:	6011      	str	r1, [r2, #0]
 8014bf0:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014bf4:	f5a2 726d 	sub.w	r2, r2, #948	; 0x3b4
 8014bf8:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014bfa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014bfe:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8014c02:	681b      	ldr	r3, [r3, #0]
 8014c04:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014c08:	f5a2 726d 	sub.w	r2, r2, #948	; 0x3b4
 8014c0c:	6812      	ldr	r2, [r2, #0]
 8014c0e:	fa23 f282 	sxtab16	r2, r3, r2
 8014c12:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014c16:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 8014c1a:	601a      	str	r2, [r3, #0]
  return(result);
 8014c1c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014c20:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 8014c24:	681b      	ldr	r3, [r3, #0]
 8014c26:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc

            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
 8014c2a:	f8d7 05d8 	ldr.w	r0, [r7, #1496]	; 0x5d8
 8014c2e:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 8014c32:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 8014c36:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014c3a:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8014c3e:	6018      	str	r0, [r3, #0]
 8014c40:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014c44:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8014c48:	6019      	str	r1, [r3, #0]
 8014c4a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014c4e:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 8014c52:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8014c54:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014c58:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8014c5c:	681b      	ldr	r3, [r3, #0]
 8014c5e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014c62:	f5a2 7269 	sub.w	r2, r2, #932	; 0x3a4
 8014c66:	6812      	ldr	r2, [r2, #0]
 8014c68:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8014c6c:	f5a1 716a 	sub.w	r1, r1, #936	; 0x3a8
 8014c70:	6809      	ldr	r1, [r1, #0]
 8014c72:	fb23 1202 	smlad	r2, r3, r2, r1
 8014c76:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014c7a:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8014c7e:	601a      	str	r2, [r3, #0]
  return(result);
 8014c80:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014c84:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8014c88:	681b      	ldr	r3, [r3, #0]
 8014c8a:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
            res00 = __SMLAD(val2, val0, res00);
 8014c8e:	f8d7 05dc 	ldr.w	r0, [r7, #1500]	; 0x5dc
 8014c92:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 8014c96:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 8014c9a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014c9e:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 8014ca2:	6018      	str	r0, [r3, #0]
 8014ca4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014ca8:	f5a3 7365 	sub.w	r3, r3, #916	; 0x394
 8014cac:	6019      	str	r1, [r3, #0]
 8014cae:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014cb2:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 8014cb6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8014cb8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014cbc:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 8014cc0:	681b      	ldr	r3, [r3, #0]
 8014cc2:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014cc6:	f5a2 7265 	sub.w	r2, r2, #916	; 0x394
 8014cca:	6812      	ldr	r2, [r2, #0]
 8014ccc:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8014cd0:	f5a1 7166 	sub.w	r1, r1, #920	; 0x398
 8014cd4:	6809      	ldr	r1, [r1, #0]
 8014cd6:	fb23 1202 	smlad	r2, r3, r2, r1
 8014cda:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014cde:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 8014ce2:	601a      	str	r2, [r3, #0]
  return(result);
 8014ce4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014ce8:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 8014cec:	681b      	ldr	r3, [r3, #0]
 8014cee:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 8014cf2:	f8d7 3618 	ldr.w	r3, [r7, #1560]	; 0x618
 8014cf6:	3310      	adds	r3, #16
 8014cf8:	f8c7 3618 	str.w	r3, [r7, #1560]	; 0x618
 8014cfc:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8014d00:	3b0f      	subs	r3, #15
 8014d02:	f8d7 2618 	ldr.w	r2, [r7, #1560]	; 0x618
 8014d06:	429a      	cmp	r2, r3
 8014d08:	f6ff a943 	blt.w	8013f92 <arm_nn_vec_mat_mult_t_s8+0x1b4c>
        }

        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 8014d0c:	e03f      	b.n	8014d8e <arm_nn_vec_mat_mult_t_s8+0x2948>
        {
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 8014d0e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014d12:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 8014d16:	681b      	ldr	r3, [r3, #0]
 8014d18:	f993 3000 	ldrsb.w	r3, [r3]
 8014d1c:	461a      	mov	r2, r3
 8014d1e:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 8014d22:	4413      	add	r3, r2
 8014d24:	f8c7 35ec 	str.w	r3, [r7, #1516]	; 0x5ec
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
 8014d28:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014d2c:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 8014d30:	681b      	ldr	r3, [r3, #0]
 8014d32:	f993 3000 	ldrsb.w	r3, [r3]
 8014d36:	461a      	mov	r2, r3
 8014d38:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 8014d3c:	4413      	add	r3, r2
 8014d3e:	f8c7 35e8 	str.w	r3, [r7, #1512]	; 0x5e8

            res00 += lhs_value * rhs_value0;
 8014d42:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	; 0x5e8
 8014d46:	f8d7 25ec 	ldr.w	r2, [r7, #1516]	; 0x5ec
 8014d4a:	fb02 f303 	mul.w	r3, r2, r3
 8014d4e:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 8014d52:	4413      	add	r3, r2
 8014d54:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c

            ++rhs_ptr;
 8014d58:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014d5c:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 8014d60:	681b      	ldr	r3, [r3, #0]
 8014d62:	1c5a      	adds	r2, r3, #1
 8014d64:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014d68:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 8014d6c:	601a      	str	r2, [r3, #0]
            ++lhs_ptr;
 8014d6e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014d72:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 8014d76:	681b      	ldr	r3, [r3, #0]
 8014d78:	1c5a      	adds	r2, r3, #1
 8014d7a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014d7e:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 8014d82:	601a      	str	r2, [r3, #0]
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 8014d84:	f8d7 3618 	ldr.w	r3, [r7, #1560]	; 0x618
 8014d88:	3301      	adds	r3, #1
 8014d8a:	f8c7 3618 	str.w	r3, [r7, #1560]	; 0x618
 8014d8e:	f8d7 2618 	ldr.w	r2, [r7, #1560]	; 0x618
 8014d92:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8014d96:	429a      	cmp	r2, r3
 8014d98:	dbb9      	blt.n	8014d0e <arm_nn_vec_mat_mult_t_s8+0x28c8>
 8014d9a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014d9e:	f5a3 63a6 	sub.w	r3, r3, #1328	; 0x530
 8014da2:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 8014da6:	601a      	str	r2, [r3, #0]
 8014da8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014dac:	f2a3 5334 	subw	r3, r3, #1332	; 0x534
 8014db0:	f8d7 265c 	ldr.w	r2, [r7, #1628]	; 0x65c
 8014db4:	601a      	str	r2, [r3, #0]
 8014db6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014dba:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 8014dbe:	f8d7 2660 	ldr.w	r2, [r7, #1632]	; 0x660
 8014dc2:	601a      	str	r2, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8014dc4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014dc8:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 8014dcc:	681b      	ldr	r3, [r3, #0]
 8014dce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014dd2:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014dd6:	f5a2 62a6 	sub.w	r2, r2, #1328	; 0x530
 8014dda:	6812      	ldr	r2, [r2, #0]
 8014ddc:	409a      	lsls	r2, r3
 8014dde:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014de2:	f2a3 533c 	subw	r3, r3, #1340	; 0x53c
 8014de6:	601a      	str	r2, [r3, #0]
 8014de8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014dec:	f5a3 63a8 	sub.w	r3, r3, #1344	; 0x540
 8014df0:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014df4:	f2a2 5234 	subw	r2, r2, #1332	; 0x534
 8014df8:	6812      	ldr	r2, [r2, #0]
 8014dfa:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8014dfc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014e00:	f2a3 5344 	subw	r3, r3, #1348	; 0x544
 8014e04:	2200      	movs	r2, #0
 8014e06:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 8014e08:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8014e0c:	461a      	mov	r2, r3
 8014e0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014e12:	f842 3c08 	str.w	r3, [r2, #-8]
    mult.word.high = 0;
 8014e16:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8014e1a:	461a      	mov	r2, r3
 8014e1c:	2300      	movs	r3, #0
 8014e1e:	f842 3c04 	str.w	r3, [r2, #-4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8014e22:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8014e26:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8014e2a:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8014e2e:	f2a1 513c 	subw	r1, r1, #1340	; 0x53c
 8014e32:	6809      	ldr	r1, [r1, #0]
 8014e34:	17c8      	asrs	r0, r1, #31
 8014e36:	6139      	str	r1, [r7, #16]
 8014e38:	6178      	str	r0, [r7, #20]
 8014e3a:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8014e3e:	f5a1 61a8 	sub.w	r1, r1, #1344	; 0x540
 8014e42:	6809      	ldr	r1, [r1, #0]
 8014e44:	17c8      	asrs	r0, r1, #31
 8014e46:	60b9      	str	r1, [r7, #8]
 8014e48:	60f8      	str	r0, [r7, #12]
 8014e4a:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 8014e4e:	4631      	mov	r1, r6
 8014e50:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8014e54:	4650      	mov	r0, sl
 8014e56:	fb00 f001 	mul.w	r0, r0, r1
 8014e5a:	4659      	mov	r1, fp
 8014e5c:	462c      	mov	r4, r5
 8014e5e:	fb04 f101 	mul.w	r1, r4, r1
 8014e62:	4401      	add	r1, r0
 8014e64:	4628      	mov	r0, r5
 8014e66:	4654      	mov	r4, sl
 8014e68:	fba0 8904 	umull	r8, r9, r0, r4
 8014e6c:	4449      	add	r1, r9
 8014e6e:	4689      	mov	r9, r1
 8014e70:	eb12 0108 	adds.w	r1, r2, r8
 8014e74:	6039      	str	r1, [r7, #0]
 8014e76:	eb43 0309 	adc.w	r3, r3, r9
 8014e7a:	607b      	str	r3, [r7, #4]
 8014e7c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8014e80:	e9d7 1200 	ldrd	r1, r2, [r7]
 8014e84:	e943 1202 	strd	r1, r2, [r3, #-8]
    result = (int32_t)(mult.long_long >> 31);
 8014e88:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8014e8c:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8014e90:	f04f 0200 	mov.w	r2, #0
 8014e94:	f04f 0300 	mov.w	r3, #0
 8014e98:	0fc2      	lsrs	r2, r0, #31
 8014e9a:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8014e9e:	17cb      	asrs	r3, r1, #31
 8014ea0:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8014ea4:	f2a1 5144 	subw	r1, r1, #1348	; 0x544
 8014ea8:	4613      	mov	r3, r2
 8014eaa:	600b      	str	r3, [r1, #0]
    return result;
 8014eac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014eb0:	f2a3 5344 	subw	r3, r3, #1348	; 0x544
 8014eb4:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8014eb6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014eba:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 8014ebe:	681b      	ldr	r3, [r3, #0]
 8014ec0:	2b00      	cmp	r3, #0
 8014ec2:	dc06      	bgt.n	8014ed2 <arm_nn_vec_mat_mult_t_s8+0x2a8c>
 8014ec4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014ec8:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 8014ecc:	681b      	ldr	r3, [r3, #0]
 8014ece:	425b      	negs	r3, r3
 8014ed0:	e000      	b.n	8014ed4 <arm_nn_vec_mat_mult_t_s8+0x2a8e>
 8014ed2:	2300      	movs	r3, #0
 8014ed4:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014ed8:	f5a2 62a9 	sub.w	r2, r2, #1352	; 0x548
 8014edc:	6011      	str	r1, [r2, #0]
 8014ede:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014ee2:	f2a2 524c 	subw	r2, r2, #1356	; 0x54c
 8014ee6:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8014ee8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014eec:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8014ef0:	2200      	movs	r2, #0
 8014ef2:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8014ef4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014ef8:	f2a3 534c 	subw	r3, r3, #1356	; 0x54c
 8014efc:	2201      	movs	r2, #1
 8014efe:	681b      	ldr	r3, [r3, #0]
 8014f00:	409a      	lsls	r2, r3
 8014f02:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014f06:	f2a3 5354 	subw	r3, r3, #1364	; 0x554
 8014f0a:	3a01      	subs	r2, #1
 8014f0c:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 8014f0e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014f12:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8014f16:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014f1a:	f5a2 61a9 	sub.w	r1, r2, #1352	; 0x548
 8014f1e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014f22:	f2a2 5254 	subw	r2, r2, #1364	; 0x554
 8014f26:	6809      	ldr	r1, [r1, #0]
 8014f28:	6812      	ldr	r2, [r2, #0]
 8014f2a:	400a      	ands	r2, r1
 8014f2c:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 8014f2e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014f32:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8014f36:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014f3a:	f5a2 61a9 	sub.w	r1, r2, #1352	; 0x548
 8014f3e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014f42:	f2a2 524c 	subw	r2, r2, #1356	; 0x54c
 8014f46:	6809      	ldr	r1, [r1, #0]
 8014f48:	6812      	ldr	r2, [r2, #0]
 8014f4a:	fa41 f202 	asr.w	r2, r1, r2
 8014f4e:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 8014f50:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014f54:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 8014f58:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014f5c:	f2a2 5254 	subw	r2, r2, #1364	; 0x554
 8014f60:	6812      	ldr	r2, [r2, #0]
 8014f62:	1052      	asrs	r2, r2, #1
 8014f64:	601a      	str	r2, [r3, #0]
    if (result < 0)
 8014f66:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014f6a:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8014f6e:	681b      	ldr	r3, [r3, #0]
 8014f70:	2b00      	cmp	r3, #0
 8014f72:	da0a      	bge.n	8014f8a <arm_nn_vec_mat_mult_t_s8+0x2b44>
        threshold++;
 8014f74:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014f78:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 8014f7c:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014f80:	f2a2 525c 	subw	r2, r2, #1372	; 0x55c
 8014f84:	6812      	ldr	r2, [r2, #0]
 8014f86:	3201      	adds	r2, #1
 8014f88:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 8014f8a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014f8e:	f5a3 62ab 	sub.w	r2, r3, #1368	; 0x558
 8014f92:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014f96:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 8014f9a:	6812      	ldr	r2, [r2, #0]
 8014f9c:	681b      	ldr	r3, [r3, #0]
 8014f9e:	429a      	cmp	r2, r3
 8014fa0:	dd0a      	ble.n	8014fb8 <arm_nn_vec_mat_mult_t_s8+0x2b72>
        result++;
 8014fa2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014fa6:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8014faa:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014fae:	f5a2 62aa 	sub.w	r2, r2, #1360	; 0x550
 8014fb2:	6812      	ldr	r2, [r2, #0]
 8014fb4:	3201      	adds	r2, #1
 8014fb6:	601a      	str	r2, [r3, #0]
    return result;
 8014fb8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014fbc:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8014fc0:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8014fc2:	bf00      	nop
        }

        // Quantize down
        res00 = arm_nn_requantize(res00, dst_multiplier, dst_shift);
 8014fc4:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c

        // Add offset
        res00 += dst_offset;
 8014fc8:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 8014fcc:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 8014fd0:	4413      	add	r3, r2
 8014fd2:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c

        // Clamp the result
        res00 = MAX(res00, activation_min);
 8014fd6:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 8014fda:	f8d7 366c 	ldr.w	r3, [r7, #1644]	; 0x66c
 8014fde:	4293      	cmp	r3, r2
 8014fe0:	bfb8      	it	lt
 8014fe2:	4613      	movlt	r3, r2
 8014fe4:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
        res00 = MIN(res00, activation_max);
 8014fe8:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 8014fec:	f8d7 3670 	ldr.w	r3, [r7, #1648]	; 0x670
 8014ff0:	4293      	cmp	r3, r2
 8014ff2:	bfa8      	it	ge
 8014ff4:	4613      	movge	r3, r2
 8014ff6:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c

        *dst = (q7_t)res00;
 8014ffa:	f8d7 361c 	ldr.w	r3, [r7, #1564]	; 0x61c
 8014ffe:	b25a      	sxtb	r2, r3
 8015000:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015004:	f5a3 63bd 	sub.w	r3, r3, #1512	; 0x5e8
 8015008:	681b      	ldr	r3, [r3, #0]
 801500a:	701a      	strb	r2, [r3, #0]

        *dst = (q7_t)res00;
    }
#endif

    return ARM_MATH_SUCCESS;
 801500c:	2300      	movs	r3, #0
}
 801500e:	4618      	mov	r0, r3
 8015010:	f507 67c6 	add.w	r7, r7, #1584	; 0x630
 8015014:	46bd      	mov	sp, r7
 8015016:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801501a:	4770      	bx	lr
 801501c:	0000      	movs	r0, r0
	...

08015020 <arm_softmax_s8>:
                    const int32_t row_size,
                    const int32_t mult,
                    const int32_t shift,
                    const int32_t diff_min,
                    int8_t *output)
{
 8015020:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8015024:	f6ad 1da8 	subw	sp, sp, #2472	; 0x9a8
 8015028:	af00      	add	r7, sp, #0
 801502a:	f607 14a8 	addw	r4, r7, #2472	; 0x9a8
 801502e:	f5a4 7471 	sub.w	r4, r4, #964	; 0x3c4
 8015032:	6020      	str	r0, [r4, #0]
 8015034:	f607 10a8 	addw	r0, r7, #2472	; 0x9a8
 8015038:	f5a0 7072 	sub.w	r0, r0, #968	; 0x3c8
 801503c:	6001      	str	r1, [r0, #0]
 801503e:	f607 11a8 	addw	r1, r7, #2472	; 0x9a8
 8015042:	f5a1 7173 	sub.w	r1, r1, #972	; 0x3cc
 8015046:	600a      	str	r2, [r1, #0]
 8015048:	f607 12a8 	addw	r2, r7, #2472	; 0x9a8
 801504c:	f5a2 7274 	sub.w	r2, r2, #976	; 0x3d0
 8015050:	6013      	str	r3, [r2, #0]

        input += row_size;
        output += row_size;
    }
#else
    const int32_t mask = (1 << shift);
 8015052:	2201      	movs	r2, #1
 8015054:	f8d7 39c8 	ldr.w	r3, [r7, #2504]	; 0x9c8
 8015058:	fa02 f303 	lsl.w	r3, r2, r3
 801505c:	f8c7 3994 	str.w	r3, [r7, #2452]	; 0x994

    int32_t col = 0;
 8015060:	2300      	movs	r3, #0
 8015062:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
    int32_t row_idx;

    for (row_idx = 0; row_idx < num_rows; ++row_idx)
 8015066:	2300      	movs	r3, #0
 8015068:	f8c7 39a0 	str.w	r3, [r7, #2464]	; 0x9a0
 801506c:	f004 b863 	b.w	8019136 <arm_softmax_s8+0x4116>
    {
        // Find the maximum value in order to ensure numerical stability
        int8_t max = *input;
 8015070:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015074:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 8015078:	681b      	ldr	r3, [r3, #0]
 801507a:	781b      	ldrb	r3, [r3, #0]
 801507c:	f887 399f 	strb.w	r3, [r7, #2463]	; 0x99f

        for (col = 1; col < row_size; ++col)
 8015080:	2301      	movs	r3, #1
 8015082:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 8015086:	e015      	b.n	80150b4 <arm_softmax_s8+0x94>
        {
            max = MAX(max, input[col]);
 8015088:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 801508c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015090:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 8015094:	681b      	ldr	r3, [r3, #0]
 8015096:	4413      	add	r3, r2
 8015098:	f993 2000 	ldrsb.w	r2, [r3]
 801509c:	f997 399f 	ldrsb.w	r3, [r7, #2463]	; 0x99f
 80150a0:	4293      	cmp	r3, r2
 80150a2:	bfb8      	it	lt
 80150a4:	4613      	movlt	r3, r2
 80150a6:	f887 399f 	strb.w	r3, [r7, #2463]	; 0x99f
        for (col = 1; col < row_size; ++col)
 80150aa:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	; 0x9a4
 80150ae:	3301      	adds	r3, #1
 80150b0:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 80150b4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80150b8:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80150bc:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 80150c0:	681b      	ldr	r3, [r3, #0]
 80150c2:	429a      	cmp	r2, r3
 80150c4:	dbe0      	blt.n	8015088 <arm_softmax_s8+0x68>
        }

        int32_t diff = 0;
 80150c6:	2300      	movs	r3, #0
 80150c8:	f8c7 3990 	str.w	r3, [r7, #2448]	; 0x990
        int32_t sum = 0;
 80150cc:	2300      	movs	r3, #0
 80150ce:	f8c7 3998 	str.w	r3, [r7, #2456]	; 0x998

        for (col = 0; col < row_size; ++col)
 80150d2:	2300      	movs	r3, #0
 80150d4:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 80150d8:	f001 ba24 	b.w	8016524 <arm_softmax_s8+0x1504>
        {
            diff = input[col] - max;
 80150dc:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 80150e0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80150e4:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 80150e8:	681b      	ldr	r3, [r3, #0]
 80150ea:	4413      	add	r3, r2
 80150ec:	f993 3000 	ldrsb.w	r3, [r3]
 80150f0:	461a      	mov	r2, r3
 80150f2:	f997 399f 	ldrsb.w	r3, [r7, #2463]	; 0x99f
 80150f6:	1ad3      	subs	r3, r2, r3
 80150f8:	f8c7 3990 	str.w	r3, [r7, #2448]	; 0x990
            if (diff >= diff_min)
 80150fc:	f8d7 2990 	ldr.w	r2, [r7, #2448]	; 0x990
 8015100:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	; 0x9cc
 8015104:	429a      	cmp	r2, r3
 8015106:	f2c1 8208 	blt.w	801651a <arm_softmax_s8+0x14fa>
            {
                sum += DIV_POW2(EXP_ON_NEG(MUL_SAT(diff * mask, mult)), ACCUM_BITS);
 801510a:	f8d7 2990 	ldr.w	r2, [r7, #2448]	; 0x990
 801510e:	f8d7 3994 	ldr.w	r3, [r7, #2452]	; 0x994
 8015112:	fb03 f202 	mul.w	r2, r3, r2
 8015116:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801511a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 801511e:	601a      	str	r2, [r3, #0]
 8015120:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015124:	f5a3 72b0 	sub.w	r2, r3, #352	; 0x160
 8015128:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801512c:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 8015130:	681b      	ldr	r3, [r3, #0]
 8015132:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8015134:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015138:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 801513c:	2300      	movs	r3, #0
 801513e:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8015140:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8015144:	f04f 0300 	mov.w	r3, #0
 8015148:	f607 0138 	addw	r1, r7, #2104	; 0x838
 801514c:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8015150:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015154:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8015158:	681b      	ldr	r3, [r3, #0]
 801515a:	0fdb      	lsrs	r3, r3, #31
 801515c:	b2da      	uxtb	r2, r3
 801515e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015162:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8015166:	681b      	ldr	r3, [r3, #0]
 8015168:	0fdb      	lsrs	r3, r3, #31
 801516a:	b2db      	uxtb	r3, r3
 801516c:	4053      	eors	r3, r2
 801516e:	b2db      	uxtb	r3, r3
 8015170:	2b00      	cmp	r3, #0
 8015172:	d012      	beq.n	801519a <arm_softmax_s8+0x17a>
        mult = 1 - mult;
 8015174:	f607 0338 	addw	r3, r7, #2104	; 0x838
 8015178:	e9d3 2300 	ldrd	r2, r3, [r3]
 801517c:	2100      	movs	r1, #0
 801517e:	f1d2 0001 	rsbs	r0, r2, #1
 8015182:	f8c7 0330 	str.w	r0, [r7, #816]	; 0x330
 8015186:	eb61 0303 	sbc.w	r3, r1, r3
 801518a:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 801518e:	e9d7 34cc 	ldrd	r3, r4, [r7, #816]	; 0x330
 8015192:	f607 0238 	addw	r2, r7, #2104	; 0x838
 8015196:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801519a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801519e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80151a2:	681b      	ldr	r3, [r3, #0]
 80151a4:	17da      	asrs	r2, r3, #31
 80151a6:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 80151aa:	f8c7 2464 	str.w	r2, [r7, #1124]	; 0x464
 80151ae:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80151b2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80151b6:	681b      	ldr	r3, [r3, #0]
 80151b8:	17da      	asrs	r2, r3, #31
 80151ba:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
 80151be:	f8c7 245c 	str.w	r2, [r7, #1116]	; 0x45c
 80151c2:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80151c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80151ca:	460b      	mov	r3, r1
 80151cc:	f8d7 2458 	ldr.w	r2, [r7, #1112]	; 0x458
 80151d0:	fb02 f203 	mul.w	r2, r2, r3
 80151d4:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 80151d8:	f507 648c 	add.w	r4, r7, #1120	; 0x460
 80151dc:	e9c4 0100 	strd	r0, r1, [r4]
 80151e0:	4601      	mov	r1, r0
 80151e2:	fb01 f303 	mul.w	r3, r1, r3
 80151e6:	4413      	add	r3, r2
 80151e8:	f8d7 2460 	ldr.w	r2, [r7, #1120]	; 0x460
 80151ec:	f8d7 1458 	ldr.w	r1, [r7, #1112]	; 0x458
 80151f0:	fba2 1201 	umull	r1, r2, r2, r1
 80151f4:	f8c7 258c 	str.w	r2, [r7, #1420]	; 0x58c
 80151f8:	460a      	mov	r2, r1
 80151fa:	f8c7 2588 	str.w	r2, [r7, #1416]	; 0x588
 80151fe:	f8d7 258c 	ldr.w	r2, [r7, #1420]	; 0x58c
 8015202:	4413      	add	r3, r2
 8015204:	f8c7 358c 	str.w	r3, [r7, #1420]	; 0x58c
 8015208:	f607 0338 	addw	r3, r7, #2104	; 0x838
 801520c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015210:	f8d7 1588 	ldr.w	r1, [r7, #1416]	; 0x588
 8015214:	1851      	adds	r1, r2, r1
 8015216:	f8c7 1328 	str.w	r1, [r7, #808]	; 0x328
 801521a:	f8d7 158c 	ldr.w	r1, [r7, #1420]	; 0x58c
 801521e:	414b      	adcs	r3, r1
 8015220:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
 8015224:	e9d7 34ca 	ldrd	r3, r4, [r7, #808]	; 0x328
 8015228:	f607 0238 	addw	r2, r7, #2104	; 0x838
 801522c:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8015230:	f607 0338 	addw	r3, r7, #2104	; 0x838
 8015234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015238:	2b00      	cmp	r3, #0
 801523a:	da0a      	bge.n	8015252 <arm_softmax_s8+0x232>
 801523c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015240:	1851      	adds	r1, r2, r1
 8015242:	f8c7 1320 	str.w	r1, [r7, #800]	; 0x320
 8015246:	f143 0300 	adc.w	r3, r3, #0
 801524a:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
 801524e:	e9d7 23c8 	ldrd	r2, r3, [r7, #800]	; 0x320
 8015252:	f04f 0000 	mov.w	r0, #0
 8015256:	f04f 0100 	mov.w	r1, #0
 801525a:	0fd0      	lsrs	r0, r2, #31
 801525c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8015260:	17d9      	asrs	r1, r3, #31
 8015262:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015266:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 801526a:	4603      	mov	r3, r0
 801526c:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 801526e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015272:	f5a3 72ae 	sub.w	r2, r3, #348	; 0x15c
 8015276:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801527a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 801527e:	6812      	ldr	r2, [r2, #0]
 8015280:	681b      	ldr	r3, [r3, #0]
 8015282:	429a      	cmp	r2, r3
 8015284:	d10e      	bne.n	80152a4 <arm_softmax_s8+0x284>
 8015286:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801528a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 801528e:	681b      	ldr	r3, [r3, #0]
 8015290:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015294:	d106      	bne.n	80152a4 <arm_softmax_s8+0x284>
        result = Q31_MAX;
 8015296:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801529a:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 801529e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80152a2:	6013      	str	r3, [r2, #0]
    return result;
 80152a4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80152a8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80152ac:	681b      	ldr	r3, [r3, #0]
 80152ae:	f8c7 3968 	str.w	r3, [r7, #2408]	; 0x968

// @note The following functions are used only for softmax layer, scaled bits = 5 assumed

__STATIC_FORCEINLINE int32_t arm_nn_exp_on_negative_values(int32_t val)
{
    int32_t mask = 0;
 80152b2:	2300      	movs	r3, #0
 80152b4:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
    int32_t shift = 24;
 80152b8:	2318      	movs	r3, #24
 80152ba:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960

    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
 80152be:	2201      	movs	r2, #1
 80152c0:	f8d7 3960 	ldr.w	r3, [r7, #2400]	; 0x960
 80152c4:	fa02 f303 	lsl.w	r3, r2, r3
 80152c8:	1e5a      	subs	r2, r3, #1
 80152ca:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 80152ce:	ea02 0103 	and.w	r1, r2, r3
 80152d2:	2201      	movs	r2, #1
 80152d4:	f8d7 3960 	ldr.w	r3, [r7, #2400]	; 0x960
 80152d8:	fa02 f303 	lsl.w	r3, r2, r3
 80152dc:	1acb      	subs	r3, r1, r3
 80152de:	f8c7 395c 	str.w	r3, [r7, #2396]	; 0x95c
    const int32_t remainder = val_mod_minus_quarter - val;
 80152e2:	f8d7 295c 	ldr.w	r2, [r7, #2396]	; 0x95c
 80152e6:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 80152ea:	1ad3      	subs	r3, r2, r3
 80152ec:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
 80152f0:	f8d7 395c 	ldr.w	r3, [r7, #2396]	; 0x95c
 80152f4:	015b      	lsls	r3, r3, #5
 80152f6:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 80152fa:	f8c7 3954 	str.w	r3, [r7, #2388]	; 0x954
 80152fe:	f8d7 3954 	ldr.w	r3, [r7, #2388]	; 0x954
 8015302:	f8c7 3950 	str.w	r3, [r7, #2384]	; 0x950
 8015306:	f8d7 3954 	ldr.w	r3, [r7, #2388]	; 0x954
 801530a:	f8c7 394c 	str.w	r3, [r7, #2380]	; 0x94c
    q31_t result = 0;
 801530e:	2300      	movs	r3, #0
 8015310:	f8c7 3948 	str.w	r3, [r7, #2376]	; 0x948
    q63_t mult = 1 << 30;
 8015314:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8015318:	f04f 0300 	mov.w	r3, #0
 801531c:	f507 6114 	add.w	r1, r7, #2368	; 0x940
 8015320:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8015324:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 8015328:	0fdb      	lsrs	r3, r3, #31
 801532a:	b2da      	uxtb	r2, r3
 801532c:	f8d7 394c 	ldr.w	r3, [r7, #2380]	; 0x94c
 8015330:	0fdb      	lsrs	r3, r3, #31
 8015332:	b2db      	uxtb	r3, r3
 8015334:	4053      	eors	r3, r2
 8015336:	b2db      	uxtb	r3, r3
 8015338:	2b00      	cmp	r3, #0
 801533a:	d012      	beq.n	8015362 <arm_softmax_s8+0x342>
        mult = 1 - mult;
 801533c:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8015340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015344:	2100      	movs	r1, #0
 8015346:	f1d2 0001 	rsbs	r0, r2, #1
 801534a:	f8c7 0318 	str.w	r0, [r7, #792]	; 0x318
 801534e:	eb61 0303 	sbc.w	r3, r1, r3
 8015352:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
 8015356:	e9d7 34c6 	ldrd	r3, r4, [r7, #792]	; 0x318
 801535a:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 801535e:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8015362:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 8015366:	17da      	asrs	r2, r3, #31
 8015368:	f8c7 34d8 	str.w	r3, [r7, #1240]	; 0x4d8
 801536c:	f8c7 24dc 	str.w	r2, [r7, #1244]	; 0x4dc
 8015370:	f8d7 394c 	ldr.w	r3, [r7, #2380]	; 0x94c
 8015374:	17da      	asrs	r2, r3, #31
 8015376:	f8c7 34d0 	str.w	r3, [r7, #1232]	; 0x4d0
 801537a:	f8c7 24d4 	str.w	r2, [r7, #1236]	; 0x4d4
 801537e:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8015382:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015386:	460b      	mov	r3, r1
 8015388:	f8d7 24d0 	ldr.w	r2, [r7, #1232]	; 0x4d0
 801538c:	fb02 f203 	mul.w	r2, r2, r3
 8015390:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 8015394:	f507 649b 	add.w	r4, r7, #1240	; 0x4d8
 8015398:	e9c4 0100 	strd	r0, r1, [r4]
 801539c:	4601      	mov	r1, r0
 801539e:	fb01 f303 	mul.w	r3, r1, r3
 80153a2:	4413      	add	r3, r2
 80153a4:	f8d7 24d8 	ldr.w	r2, [r7, #1240]	; 0x4d8
 80153a8:	f8d7 14d0 	ldr.w	r1, [r7, #1232]	; 0x4d0
 80153ac:	fba2 8901 	umull	r8, r9, r2, r1
 80153b0:	444b      	add	r3, r9
 80153b2:	4699      	mov	r9, r3
 80153b4:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 80153b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153bc:	eb12 0108 	adds.w	r1, r2, r8
 80153c0:	f8c7 1310 	str.w	r1, [r7, #784]	; 0x310
 80153c4:	eb43 0309 	adc.w	r3, r3, r9
 80153c8:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 80153cc:	e9d7 34c4 	ldrd	r3, r4, [r7, #784]	; 0x310
 80153d0:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 80153d4:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80153d8:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 80153dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153e0:	2b00      	cmp	r3, #0
 80153e2:	da0a      	bge.n	80153fa <arm_softmax_s8+0x3da>
 80153e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80153e8:	1851      	adds	r1, r2, r1
 80153ea:	f8c7 1308 	str.w	r1, [r7, #776]	; 0x308
 80153ee:	f143 0300 	adc.w	r3, r3, #0
 80153f2:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
 80153f6:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	; 0x308
 80153fa:	f04f 0000 	mov.w	r0, #0
 80153fe:	f04f 0100 	mov.w	r1, #0
 8015402:	0fd0      	lsrs	r0, r2, #31
 8015404:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8015408:	17d9      	asrs	r1, r3, #31
 801540a:	4602      	mov	r2, r0
 801540c:	460b      	mov	r3, r1
 801540e:	4613      	mov	r3, r2
 8015410:	f8c7 3948 	str.w	r3, [r7, #2376]	; 0x948
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8015414:	f8d7 2950 	ldr.w	r2, [r7, #2384]	; 0x950
 8015418:	f8d7 394c 	ldr.w	r3, [r7, #2380]	; 0x94c
 801541c:	429a      	cmp	r2, r3
 801541e:	d108      	bne.n	8015432 <arm_softmax_s8+0x412>
 8015420:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 8015424:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015428:	d103      	bne.n	8015432 <arm_softmax_s8+0x412>
        result = Q31_MAX;
 801542a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801542e:	f8c7 3948 	str.w	r3, [r7, #2376]	; 0x948
    return result;
 8015432:	f8d7 3948 	ldr.w	r3, [r7, #2376]	; 0x948
    const int32_t x2 = MUL_SAT(x, x);
 8015436:	f8c7 393c 	str.w	r3, [r7, #2364]	; 0x93c
 801543a:	f8d7 393c 	ldr.w	r3, [r7, #2364]	; 0x93c
 801543e:	f8c7 3938 	str.w	r3, [r7, #2360]	; 0x938
 8015442:	f8d7 393c 	ldr.w	r3, [r7, #2364]	; 0x93c
 8015446:	f8c7 3934 	str.w	r3, [r7, #2356]	; 0x934
    q31_t result = 0;
 801544a:	2300      	movs	r3, #0
 801544c:	f8c7 3930 	str.w	r3, [r7, #2352]	; 0x930
    q63_t mult = 1 << 30;
 8015450:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8015454:	f04f 0300 	mov.w	r3, #0
 8015458:	f607 1128 	addw	r1, r7, #2344	; 0x928
 801545c:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8015460:	f8d7 3938 	ldr.w	r3, [r7, #2360]	; 0x938
 8015464:	0fdb      	lsrs	r3, r3, #31
 8015466:	b2da      	uxtb	r2, r3
 8015468:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 801546c:	0fdb      	lsrs	r3, r3, #31
 801546e:	b2db      	uxtb	r3, r3
 8015470:	4053      	eors	r3, r2
 8015472:	b2db      	uxtb	r3, r3
 8015474:	2b00      	cmp	r3, #0
 8015476:	d012      	beq.n	801549e <arm_softmax_s8+0x47e>
        mult = 1 - mult;
 8015478:	f607 1328 	addw	r3, r7, #2344	; 0x928
 801547c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015480:	2100      	movs	r1, #0
 8015482:	f1d2 0001 	rsbs	r0, r2, #1
 8015486:	f8c7 0300 	str.w	r0, [r7, #768]	; 0x300
 801548a:	eb61 0303 	sbc.w	r3, r1, r3
 801548e:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
 8015492:	e9d7 34c0 	ldrd	r3, r4, [r7, #768]	; 0x300
 8015496:	f607 1228 	addw	r2, r7, #2344	; 0x928
 801549a:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801549e:	f8d7 3938 	ldr.w	r3, [r7, #2360]	; 0x938
 80154a2:	17da      	asrs	r2, r3, #31
 80154a4:	f8c7 34c8 	str.w	r3, [r7, #1224]	; 0x4c8
 80154a8:	f8c7 24cc 	str.w	r2, [r7, #1228]	; 0x4cc
 80154ac:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 80154b0:	17da      	asrs	r2, r3, #31
 80154b2:	f8c7 34c0 	str.w	r3, [r7, #1216]	; 0x4c0
 80154b6:	f8c7 24c4 	str.w	r2, [r7, #1220]	; 0x4c4
 80154ba:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 80154be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80154c2:	460b      	mov	r3, r1
 80154c4:	f8d7 24c0 	ldr.w	r2, [r7, #1216]	; 0x4c0
 80154c8:	fb02 f203 	mul.w	r2, r2, r3
 80154cc:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	; 0x4c4
 80154d0:	f507 6499 	add.w	r4, r7, #1224	; 0x4c8
 80154d4:	e9c4 0100 	strd	r0, r1, [r4]
 80154d8:	4601      	mov	r1, r0
 80154da:	fb01 f303 	mul.w	r3, r1, r3
 80154de:	4413      	add	r3, r2
 80154e0:	f8d7 24c8 	ldr.w	r2, [r7, #1224]	; 0x4c8
 80154e4:	f8d7 14c0 	ldr.w	r1, [r7, #1216]	; 0x4c0
 80154e8:	fba2 ab01 	umull	sl, fp, r2, r1
 80154ec:	445b      	add	r3, fp
 80154ee:	469b      	mov	fp, r3
 80154f0:	f607 1328 	addw	r3, r7, #2344	; 0x928
 80154f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154f8:	eb12 010a 	adds.w	r1, r2, sl
 80154fc:	f8c7 12f8 	str.w	r1, [r7, #760]	; 0x2f8
 8015500:	eb43 030b 	adc.w	r3, r3, fp
 8015504:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
 8015508:	e9d7 34be 	ldrd	r3, r4, [r7, #760]	; 0x2f8
 801550c:	f607 1228 	addw	r2, r7, #2344	; 0x928
 8015510:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8015514:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8015518:	e9d3 2300 	ldrd	r2, r3, [r3]
 801551c:	2b00      	cmp	r3, #0
 801551e:	da0a      	bge.n	8015536 <arm_softmax_s8+0x516>
 8015520:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015524:	1851      	adds	r1, r2, r1
 8015526:	f8c7 12f0 	str.w	r1, [r7, #752]	; 0x2f0
 801552a:	f143 0300 	adc.w	r3, r3, #0
 801552e:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 8015532:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	; 0x2f0
 8015536:	f04f 0000 	mov.w	r0, #0
 801553a:	f04f 0100 	mov.w	r1, #0
 801553e:	0fd0      	lsrs	r0, r2, #31
 8015540:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8015544:	17d9      	asrs	r1, r3, #31
 8015546:	4602      	mov	r2, r0
 8015548:	460b      	mov	r3, r1
 801554a:	4613      	mov	r3, r2
 801554c:	f8c7 3930 	str.w	r3, [r7, #2352]	; 0x930
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8015550:	f8d7 2938 	ldr.w	r2, [r7, #2360]	; 0x938
 8015554:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 8015558:	429a      	cmp	r2, r3
 801555a:	d108      	bne.n	801556e <arm_softmax_s8+0x54e>
 801555c:	f8d7 3938 	ldr.w	r3, [r7, #2360]	; 0x938
 8015560:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015564:	d103      	bne.n	801556e <arm_softmax_s8+0x54e>
        result = Q31_MAX;
 8015566:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801556a:	f8c7 3930 	str.w	r3, [r7, #2352]	; 0x930
    return result;
 801556e:	f8d7 3930 	ldr.w	r3, [r7, #2352]	; 0x930
 8015572:	f8c7 3924 	str.w	r3, [r7, #2340]	; 0x924
    q31_t result = 0;
 8015576:	2300      	movs	r3, #0
 8015578:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
    const q31_t remainder_mask = (1 << exponent) - 1;
 801557c:	2304      	movs	r3, #4
 801557e:	3b01      	subs	r3, #1
 8015580:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
    int32_t remainder = remainder_mask & dividend;
 8015584:	f8d7 2924 	ldr.w	r2, [r7, #2340]	; 0x924
 8015588:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 801558c:	4013      	ands	r3, r2
 801558e:	f8c7 3918 	str.w	r3, [r7, #2328]	; 0x918
    result = dividend >> exponent;
 8015592:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 8015596:	109b      	asrs	r3, r3, #2
 8015598:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
    q31_t threshold = remainder_mask >> 1;
 801559c:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 80155a0:	105b      	asrs	r3, r3, #1
 80155a2:	f8c7 3914 	str.w	r3, [r7, #2324]	; 0x914
    if (result < 0)
 80155a6:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 80155aa:	2b00      	cmp	r3, #0
 80155ac:	da04      	bge.n	80155b8 <arm_softmax_s8+0x598>
        threshold++;
 80155ae:	f8d7 3914 	ldr.w	r3, [r7, #2324]	; 0x914
 80155b2:	3301      	adds	r3, #1
 80155b4:	f8c7 3914 	str.w	r3, [r7, #2324]	; 0x914
    if (remainder > threshold)
 80155b8:	f8d7 2918 	ldr.w	r2, [r7, #2328]	; 0x918
 80155bc:	f8d7 3914 	ldr.w	r3, [r7, #2324]	; 0x914
 80155c0:	429a      	cmp	r2, r3
 80155c2:	dd04      	ble.n	80155ce <arm_softmax_s8+0x5ae>
        result++;
 80155c4:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 80155c8:	3301      	adds	r3, #1
 80155ca:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
    return result;
 80155ce:	f8d7 4920 	ldr.w	r4, [r7, #2336]	; 0x920
 80155d2:	f8d7 393c 	ldr.w	r3, [r7, #2364]	; 0x93c
 80155d6:	f8c7 3910 	str.w	r3, [r7, #2320]	; 0x910
 80155da:	f8d7 3954 	ldr.w	r3, [r7, #2388]	; 0x954
 80155de:	f8c7 390c 	str.w	r3, [r7, #2316]	; 0x90c
    q31_t result = 0;
 80155e2:	2300      	movs	r3, #0
 80155e4:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
    q63_t mult = 1 << 30;
 80155e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80155ec:	f04f 0300 	mov.w	r3, #0
 80155f0:	f507 6110 	add.w	r1, r7, #2304	; 0x900
 80155f4:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80155f8:	f8d7 3910 	ldr.w	r3, [r7, #2320]	; 0x910
 80155fc:	0fdb      	lsrs	r3, r3, #31
 80155fe:	b2da      	uxtb	r2, r3
 8015600:	f8d7 390c 	ldr.w	r3, [r7, #2316]	; 0x90c
 8015604:	0fdb      	lsrs	r3, r3, #31
 8015606:	b2db      	uxtb	r3, r3
 8015608:	4053      	eors	r3, r2
 801560a:	b2db      	uxtb	r3, r3
 801560c:	2b00      	cmp	r3, #0
 801560e:	d012      	beq.n	8015636 <arm_softmax_s8+0x616>
        mult = 1 - mult;
 8015610:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 8015614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015618:	2100      	movs	r1, #0
 801561a:	f1d2 0001 	rsbs	r0, r2, #1
 801561e:	f8c7 02e8 	str.w	r0, [r7, #744]	; 0x2e8
 8015622:	eb61 0303 	sbc.w	r3, r1, r3
 8015626:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 801562a:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	; 0x2e8
 801562e:	f507 6110 	add.w	r1, r7, #2304	; 0x900
 8015632:	e9c1 2300 	strd	r2, r3, [r1]
    mult = mult + (q63_t)m1 * m2;
 8015636:	f8d7 3910 	ldr.w	r3, [r7, #2320]	; 0x910
 801563a:	17da      	asrs	r2, r3, #31
 801563c:	f8c7 34b8 	str.w	r3, [r7, #1208]	; 0x4b8
 8015640:	f8c7 24bc 	str.w	r2, [r7, #1212]	; 0x4bc
 8015644:	f8d7 390c 	ldr.w	r3, [r7, #2316]	; 0x90c
 8015648:	17da      	asrs	r2, r3, #31
 801564a:	f8c7 34b0 	str.w	r3, [r7, #1200]	; 0x4b0
 801564e:	f8c7 24b4 	str.w	r2, [r7, #1204]	; 0x4b4
 8015652:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8015656:	e9d3 0100 	ldrd	r0, r1, [r3]
 801565a:	460b      	mov	r3, r1
 801565c:	f8d7 24b0 	ldr.w	r2, [r7, #1200]	; 0x4b0
 8015660:	fb02 f203 	mul.w	r2, r2, r3
 8015664:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 8015668:	f507 6c97 	add.w	ip, r7, #1208	; 0x4b8
 801566c:	e9cc 0100 	strd	r0, r1, [ip]
 8015670:	4601      	mov	r1, r0
 8015672:	fb01 f303 	mul.w	r3, r1, r3
 8015676:	4413      	add	r3, r2
 8015678:	f8d7 24b8 	ldr.w	r2, [r7, #1208]	; 0x4b8
 801567c:	f8d7 14b0 	ldr.w	r1, [r7, #1200]	; 0x4b0
 8015680:	fba2 5601 	umull	r5, r6, r2, r1
 8015684:	4433      	add	r3, r6
 8015686:	461e      	mov	r6, r3
 8015688:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 801568c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015690:	1951      	adds	r1, r2, r5
 8015692:	f8c7 12e0 	str.w	r1, [r7, #736]	; 0x2e0
 8015696:	4173      	adcs	r3, r6
 8015698:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 801569c:	e9d7 23b8 	ldrd	r2, r3, [r7, #736]	; 0x2e0
 80156a0:	f507 6110 	add.w	r1, r7, #2304	; 0x900
 80156a4:	e9c1 2300 	strd	r2, r3, [r1]
    result = (int32_t)(mult / (1ll << 31));
 80156a8:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 80156ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156b0:	2b00      	cmp	r3, #0
 80156b2:	da0a      	bge.n	80156ca <arm_softmax_s8+0x6aa>
 80156b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80156b8:	1851      	adds	r1, r2, r1
 80156ba:	f8c7 12d8 	str.w	r1, [r7, #728]	; 0x2d8
 80156be:	f143 0300 	adc.w	r3, r3, #0
 80156c2:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
 80156c6:	e9d7 23b6 	ldrd	r2, r3, [r7, #728]	; 0x2d8
 80156ca:	f04f 0000 	mov.w	r0, #0
 80156ce:	f04f 0100 	mov.w	r1, #0
 80156d2:	0fd0      	lsrs	r0, r2, #31
 80156d4:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80156d8:	17d9      	asrs	r1, r3, #31
 80156da:	4602      	mov	r2, r0
 80156dc:	460b      	mov	r3, r1
 80156de:	4613      	mov	r3, r2
 80156e0:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80156e4:	f8d7 2910 	ldr.w	r2, [r7, #2320]	; 0x910
 80156e8:	f8d7 390c 	ldr.w	r3, [r7, #2316]	; 0x90c
 80156ec:	429a      	cmp	r2, r3
 80156ee:	d108      	bne.n	8015702 <arm_softmax_s8+0x6e2>
 80156f0:	f8d7 3910 	ldr.w	r3, [r7, #2320]	; 0x910
 80156f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80156f8:	d103      	bne.n	8015702 <arm_softmax_s8+0x6e2>
        result = Q31_MAX;
 80156fa:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80156fe:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
    return result;
 8015702:	f8d7 3908 	ldr.w	r3, [r7, #2312]	; 0x908

    int32_t result = 1895147668 +
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 8015706:	4423      	add	r3, r4
 8015708:	f8c7 38fc 	str.w	r3, [r7, #2300]	; 0x8fc
    q31_t result = 0;
 801570c:	2300      	movs	r3, #0
 801570e:	f8c7 38f8 	str.w	r3, [r7, #2296]	; 0x8f8
    q63_t mult = 1 << 30;
 8015712:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8015716:	f04f 0300 	mov.w	r3, #0
 801571a:	f507 610f 	add.w	r1, r7, #2288	; 0x8f0
 801571e:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8015722:	f8d7 38fc 	ldr.w	r3, [r7, #2300]	; 0x8fc
 8015726:	0fdb      	lsrs	r3, r3, #31
 8015728:	b2da      	uxtb	r2, r3
 801572a:	2300      	movs	r3, #0
 801572c:	4053      	eors	r3, r2
 801572e:	b2db      	uxtb	r3, r3
 8015730:	2b00      	cmp	r3, #0
 8015732:	d012      	beq.n	801575a <arm_softmax_s8+0x73a>
        mult = 1 - mult;
 8015734:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 8015738:	e9d3 2300 	ldrd	r2, r3, [r3]
 801573c:	2100      	movs	r1, #0
 801573e:	f1d2 0001 	rsbs	r0, r2, #1
 8015742:	f8c7 02d0 	str.w	r0, [r7, #720]	; 0x2d0
 8015746:	eb61 0303 	sbc.w	r3, r1, r3
 801574a:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
 801574e:	e9d7 34b4 	ldrd	r3, r4, [r7, #720]	; 0x2d0
 8015752:	f507 620f 	add.w	r2, r7, #2288	; 0x8f0
 8015756:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801575a:	f8d7 38fc 	ldr.w	r3, [r7, #2300]	; 0x8fc
 801575e:	17da      	asrs	r2, r3, #31
 8015760:	f8c7 34a8 	str.w	r3, [r7, #1192]	; 0x4a8
 8015764:	f8c7 24ac 	str.w	r2, [r7, #1196]	; 0x4ac
 8015768:	a3f0      	add	r3, pc, #960	; (adr r3, 8015b2c <arm_softmax_s8+0xb0c>)
 801576a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801576e:	f8d7 14ac 	ldr.w	r1, [r7, #1196]	; 0x4ac
 8015772:	fb02 f001 	mul.w	r0, r2, r1
 8015776:	f8d7 14a8 	ldr.w	r1, [r7, #1192]	; 0x4a8
 801577a:	fb01 f103 	mul.w	r1, r1, r3
 801577e:	4401      	add	r1, r0
 8015780:	f8d7 04a8 	ldr.w	r0, [r7, #1192]	; 0x4a8
 8015784:	fba0 2302 	umull	r2, r3, r0, r2
 8015788:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
 801578c:	4613      	mov	r3, r2
 801578e:	f8c7 35d0 	str.w	r3, [r7, #1488]	; 0x5d0
 8015792:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 8015796:	18cb      	adds	r3, r1, r3
 8015798:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
 801579c:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 80157a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157a4:	f8d7 15d0 	ldr.w	r1, [r7, #1488]	; 0x5d0
 80157a8:	1851      	adds	r1, r2, r1
 80157aa:	f8c7 12c8 	str.w	r1, [r7, #712]	; 0x2c8
 80157ae:	f8d7 15d4 	ldr.w	r1, [r7, #1492]	; 0x5d4
 80157b2:	414b      	adcs	r3, r1
 80157b4:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
 80157b8:	e9d7 34b2 	ldrd	r3, r4, [r7, #712]	; 0x2c8
 80157bc:	f507 620f 	add.w	r2, r7, #2288	; 0x8f0
 80157c0:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80157c4:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 80157c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157cc:	2b00      	cmp	r3, #0
 80157ce:	da0a      	bge.n	80157e6 <arm_softmax_s8+0x7c6>
 80157d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80157d4:	1851      	adds	r1, r2, r1
 80157d6:	f8c7 12c0 	str.w	r1, [r7, #704]	; 0x2c0
 80157da:	f143 0300 	adc.w	r3, r3, #0
 80157de:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
 80157e2:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 80157e6:	f04f 0000 	mov.w	r0, #0
 80157ea:	f04f 0100 	mov.w	r1, #0
 80157ee:	0fd0      	lsrs	r0, r2, #31
 80157f0:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80157f4:	17d9      	asrs	r1, r3, #31
 80157f6:	4602      	mov	r2, r0
 80157f8:	460b      	mov	r3, r1
 80157fa:	4613      	mov	r3, r2
 80157fc:	f8c7 38f8 	str.w	r3, [r7, #2296]	; 0x8f8
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8015800:	f8d7 28fc 	ldr.w	r2, [r7, #2300]	; 0x8fc
 8015804:	4bc6      	ldr	r3, [pc, #792]	; (8015b20 <arm_softmax_s8+0xb00>)
 8015806:	429a      	cmp	r2, r3
 8015808:	d108      	bne.n	801581c <arm_softmax_s8+0x7fc>
 801580a:	f8d7 38fc 	ldr.w	r3, [r7, #2300]	; 0x8fc
 801580e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015812:	d103      	bne.n	801581c <arm_softmax_s8+0x7fc>
        result = Q31_MAX;
 8015814:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015818:	f8c7 38f8 	str.w	r3, [r7, #2296]	; 0x8f8
    return result;
 801581c:	f8d7 28f8 	ldr.w	r2, [r7, #2296]	; 0x8f8
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 8015820:	f8d7 393c 	ldr.w	r3, [r7, #2364]	; 0x93c
 8015824:	4413      	add	r3, r2
 8015826:	f8c7 38ec 	str.w	r3, [r7, #2284]	; 0x8ec
    q31_t result = 0;
 801582a:	2300      	movs	r3, #0
 801582c:	f8c7 38e8 	str.w	r3, [r7, #2280]	; 0x8e8
    const q31_t remainder_mask = (1 << exponent) - 1;
 8015830:	2302      	movs	r3, #2
 8015832:	3b01      	subs	r3, #1
 8015834:	f8c7 38e4 	str.w	r3, [r7, #2276]	; 0x8e4
    int32_t remainder = remainder_mask & dividend;
 8015838:	f8d7 28ec 	ldr.w	r2, [r7, #2284]	; 0x8ec
 801583c:	f8d7 38e4 	ldr.w	r3, [r7, #2276]	; 0x8e4
 8015840:	4013      	ands	r3, r2
 8015842:	f8c7 38e0 	str.w	r3, [r7, #2272]	; 0x8e0
    result = dividend >> exponent;
 8015846:	f8d7 38ec 	ldr.w	r3, [r7, #2284]	; 0x8ec
 801584a:	105b      	asrs	r3, r3, #1
 801584c:	f8c7 38e8 	str.w	r3, [r7, #2280]	; 0x8e8
    q31_t threshold = remainder_mask >> 1;
 8015850:	f8d7 38e4 	ldr.w	r3, [r7, #2276]	; 0x8e4
 8015854:	105b      	asrs	r3, r3, #1
 8015856:	f8c7 38dc 	str.w	r3, [r7, #2268]	; 0x8dc
    if (result < 0)
 801585a:	f8d7 38e8 	ldr.w	r3, [r7, #2280]	; 0x8e8
 801585e:	2b00      	cmp	r3, #0
 8015860:	da04      	bge.n	801586c <arm_softmax_s8+0x84c>
        threshold++;
 8015862:	f8d7 38dc 	ldr.w	r3, [r7, #2268]	; 0x8dc
 8015866:	3301      	adds	r3, #1
 8015868:	f8c7 38dc 	str.w	r3, [r7, #2268]	; 0x8dc
    if (remainder > threshold)
 801586c:	f8d7 28e0 	ldr.w	r2, [r7, #2272]	; 0x8e0
 8015870:	f8d7 38dc 	ldr.w	r3, [r7, #2268]	; 0x8dc
 8015874:	429a      	cmp	r2, r3
 8015876:	dd04      	ble.n	8015882 <arm_softmax_s8+0x862>
        result++;
 8015878:	f8d7 38e8 	ldr.w	r3, [r7, #2280]	; 0x8e8
 801587c:	3301      	adds	r3, #1
 801587e:	f8c7 38e8 	str.w	r3, [r7, #2280]	; 0x8e8
    return result;
 8015882:	f8d7 28e8 	ldr.w	r2, [r7, #2280]	; 0x8e8
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 8015886:	f8d7 3954 	ldr.w	r3, [r7, #2388]	; 0x954
 801588a:	4413      	add	r3, r2
 801588c:	f8c7 38d8 	str.w	r3, [r7, #2264]	; 0x8d8
    q31_t result = 0;
 8015890:	2300      	movs	r3, #0
 8015892:	f8c7 38d4 	str.w	r3, [r7, #2260]	; 0x8d4
    q63_t mult = 1 << 30;
 8015896:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801589a:	f04f 0300 	mov.w	r3, #0
 801589e:	f607 01c8 	addw	r1, r7, #2248	; 0x8c8
 80158a2:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80158a6:	2200      	movs	r2, #0
 80158a8:	f8d7 38d8 	ldr.w	r3, [r7, #2264]	; 0x8d8
 80158ac:	0fdb      	lsrs	r3, r3, #31
 80158ae:	b2db      	uxtb	r3, r3
 80158b0:	4053      	eors	r3, r2
 80158b2:	b2db      	uxtb	r3, r3
 80158b4:	2b00      	cmp	r3, #0
 80158b6:	d012      	beq.n	80158de <arm_softmax_s8+0x8be>
        mult = 1 - mult;
 80158b8:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 80158bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158c0:	2100      	movs	r1, #0
 80158c2:	f1d2 0001 	rsbs	r0, r2, #1
 80158c6:	f8c7 02b8 	str.w	r0, [r7, #696]	; 0x2b8
 80158ca:	eb61 0303 	sbc.w	r3, r1, r3
 80158ce:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 80158d2:	e9d7 34ae 	ldrd	r3, r4, [r7, #696]	; 0x2b8
 80158d6:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 80158da:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80158de:	a18c      	add	r1, pc, #560	; (adr r1, 8015b10 <arm_softmax_s8+0xaf0>)
 80158e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80158e4:	f8d7 38d8 	ldr.w	r3, [r7, #2264]	; 0x8d8
 80158e8:	17da      	asrs	r2, r3, #31
 80158ea:	f8c7 34a0 	str.w	r3, [r7, #1184]	; 0x4a0
 80158ee:	f8c7 24a4 	str.w	r2, [r7, #1188]	; 0x4a4
 80158f2:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	; 0x4a0
 80158f6:	fb03 f201 	mul.w	r2, r3, r1
 80158fa:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	; 0x4a4
 80158fe:	fb00 f303 	mul.w	r3, r0, r3
 8015902:	4413      	add	r3, r2
 8015904:	f8d7 24a0 	ldr.w	r2, [r7, #1184]	; 0x4a0
 8015908:	fba0 1202 	umull	r1, r2, r0, r2
 801590c:	f8c7 25cc 	str.w	r2, [r7, #1484]	; 0x5cc
 8015910:	460a      	mov	r2, r1
 8015912:	f8c7 25c8 	str.w	r2, [r7, #1480]	; 0x5c8
 8015916:	f8d7 25cc 	ldr.w	r2, [r7, #1484]	; 0x5cc
 801591a:	4413      	add	r3, r2
 801591c:	f8c7 35cc 	str.w	r3, [r7, #1484]	; 0x5cc
 8015920:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8015924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015928:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 801592c:	1851      	adds	r1, r2, r1
 801592e:	f8c7 12b0 	str.w	r1, [r7, #688]	; 0x2b0
 8015932:	f8d7 15cc 	ldr.w	r1, [r7, #1484]	; 0x5cc
 8015936:	414b      	adcs	r3, r1
 8015938:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
 801593c:	e9d7 34ac 	ldrd	r3, r4, [r7, #688]	; 0x2b0
 8015940:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 8015944:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8015948:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 801594c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015950:	2b00      	cmp	r3, #0
 8015952:	da0a      	bge.n	801596a <arm_softmax_s8+0x94a>
 8015954:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015958:	1851      	adds	r1, r2, r1
 801595a:	f8c7 12a8 	str.w	r1, [r7, #680]	; 0x2a8
 801595e:	f143 0300 	adc.w	r3, r3, #0
 8015962:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 8015966:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 801596a:	f04f 0000 	mov.w	r0, #0
 801596e:	f04f 0100 	mov.w	r1, #0
 8015972:	0fd0      	lsrs	r0, r2, #31
 8015974:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8015978:	17d9      	asrs	r1, r3, #31
 801597a:	4602      	mov	r2, r0
 801597c:	460b      	mov	r3, r1
 801597e:	4613      	mov	r3, r2
 8015980:	f8c7 38d4 	str.w	r3, [r7, #2260]	; 0x8d4
    return result;
 8015984:	f8d7 28d4 	ldr.w	r2, [r7, #2260]	; 0x8d4
    int32_t result = 1895147668 +
 8015988:	4b66      	ldr	r3, [pc, #408]	; (8015b24 <arm_softmax_s8+0xb04>)
 801598a:	4413      	add	r3, r2
 801598c:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    {                                                                                                                  \
        mask = MASK_IF_NON_ZERO(remainder & (1 << shift++));                                                           \
        result = SELECT_USING_MASK(mask, MUL_SAT(result, x), result);                                                  \
    }

    SELECT_IF_NON_ZERO(1672461947)
 8015990:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 8015994:	1c53      	adds	r3, r2, #1
 8015996:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 801599a:	2301      	movs	r3, #1
 801599c:	fa03 f202 	lsl.w	r2, r3, r2
 80159a0:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 80159a4:	4013      	ands	r3, r2
 80159a6:	2b00      	cmp	r3, #0
 80159a8:	d002      	beq.n	80159b0 <arm_softmax_s8+0x990>
 80159aa:	f04f 33ff 	mov.w	r3, #4294967295
 80159ae:	e000      	b.n	80159b2 <arm_softmax_s8+0x992>
 80159b0:	2300      	movs	r3, #0
 80159b2:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 80159b6:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80159ba:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
    q31_t result = 0;
 80159be:	2300      	movs	r3, #0
 80159c0:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
    q63_t mult = 1 << 30;
 80159c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80159c8:	f04f 0300 	mov.w	r3, #0
 80159cc:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 80159d0:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80159d4:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 80159d8:	0fdb      	lsrs	r3, r3, #31
 80159da:	b2da      	uxtb	r2, r3
 80159dc:	2300      	movs	r3, #0
 80159de:	4053      	eors	r3, r2
 80159e0:	b2db      	uxtb	r3, r3
 80159e2:	2b00      	cmp	r3, #0
 80159e4:	d012      	beq.n	8015a0c <arm_softmax_s8+0x9ec>
        mult = 1 - mult;
 80159e6:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 80159ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159ee:	2100      	movs	r1, #0
 80159f0:	f1d2 0001 	rsbs	r0, r2, #1
 80159f4:	f8c7 02a0 	str.w	r0, [r7, #672]	; 0x2a0
 80159f8:	eb61 0303 	sbc.w	r3, r1, r3
 80159fc:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
 8015a00:	e9d7 34a8 	ldrd	r3, r4, [r7, #672]	; 0x2a0
 8015a04:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8015a08:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8015a0c:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8015a10:	17da      	asrs	r2, r3, #31
 8015a12:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
 8015a16:	f8c7 249c 	str.w	r2, [r7, #1180]	; 0x49c
 8015a1a:	a33f      	add	r3, pc, #252	; (adr r3, 8015b18 <arm_softmax_s8+0xaf8>)
 8015a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a20:	f8d7 149c 	ldr.w	r1, [r7, #1180]	; 0x49c
 8015a24:	fb02 f001 	mul.w	r0, r2, r1
 8015a28:	f8d7 1498 	ldr.w	r1, [r7, #1176]	; 0x498
 8015a2c:	fb01 f103 	mul.w	r1, r1, r3
 8015a30:	4401      	add	r1, r0
 8015a32:	f8d7 0498 	ldr.w	r0, [r7, #1176]	; 0x498
 8015a36:	fba0 2302 	umull	r2, r3, r0, r2
 8015a3a:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 8015a3e:	4613      	mov	r3, r2
 8015a40:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
 8015a44:	f8d7 35c4 	ldr.w	r3, [r7, #1476]	; 0x5c4
 8015a48:	18cb      	adds	r3, r1, r3
 8015a4a:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 8015a4e:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8015a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a56:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 8015a5a:	1851      	adds	r1, r2, r1
 8015a5c:	f8c7 1298 	str.w	r1, [r7, #664]	; 0x298
 8015a60:	f8d7 15c4 	ldr.w	r1, [r7, #1476]	; 0x5c4
 8015a64:	414b      	adcs	r3, r1
 8015a66:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8015a6a:	e9d7 34a6 	ldrd	r3, r4, [r7, #664]	; 0x298
 8015a6e:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8015a72:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8015a76:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8015a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a7e:	2b00      	cmp	r3, #0
 8015a80:	da0a      	bge.n	8015a98 <arm_softmax_s8+0xa78>
 8015a82:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015a86:	1851      	adds	r1, r2, r1
 8015a88:	f8c7 1290 	str.w	r1, [r7, #656]	; 0x290
 8015a8c:	f143 0300 	adc.w	r3, r3, #0
 8015a90:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 8015a94:	e9d7 23a4 	ldrd	r2, r3, [r7, #656]	; 0x290
 8015a98:	f04f 0000 	mov.w	r0, #0
 8015a9c:	f04f 0100 	mov.w	r1, #0
 8015aa0:	0fd0      	lsrs	r0, r2, #31
 8015aa2:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8015aa6:	17d9      	asrs	r1, r3, #31
 8015aa8:	4602      	mov	r2, r0
 8015aaa:	460b      	mov	r3, r1
 8015aac:	4613      	mov	r3, r2
 8015aae:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8015ab2:	f8d7 28c0 	ldr.w	r2, [r7, #2240]	; 0x8c0
 8015ab6:	4b1c      	ldr	r3, [pc, #112]	; (8015b28 <arm_softmax_s8+0xb08>)
 8015ab8:	429a      	cmp	r2, r3
 8015aba:	d108      	bne.n	8015ace <arm_softmax_s8+0xaae>
 8015abc:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8015ac0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015ac4:	d103      	bne.n	8015ace <arm_softmax_s8+0xaae>
        result = Q31_MAX;
 8015ac6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015aca:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
    return result;
 8015ace:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
    SELECT_IF_NON_ZERO(1672461947)
 8015ad2:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8015ad6:	ea02 0103 	and.w	r1, r2, r3
 8015ada:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8015ade:	43da      	mvns	r2, r3
 8015ae0:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8015ae4:	4013      	ands	r3, r2
 8015ae6:	404b      	eors	r3, r1
 8015ae8:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(1302514674)
 8015aec:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 8015af0:	1c53      	adds	r3, r2, #1
 8015af2:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 8015af6:	2301      	movs	r3, #1
 8015af8:	fa03 f202 	lsl.w	r2, r3, r2
 8015afc:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8015b00:	4013      	ands	r3, r2
 8015b02:	2b00      	cmp	r3, #0
 8015b04:	d016      	beq.n	8015b34 <arm_softmax_s8+0xb14>
 8015b06:	f04f 33ff 	mov.w	r3, #4294967295
 8015b0a:	e014      	b.n	8015b36 <arm_softmax_s8+0xb16>
 8015b0c:	f3af 8000 	nop.w
 8015b10:	70f5a894 	.word	0x70f5a894
 8015b14:	00000000 	.word	0x00000000
 8015b18:	63afbe7b 	.word	0x63afbe7b
 8015b1c:	00000000 	.word	0x00000000
 8015b20:	2aaaaaab 	.word	0x2aaaaaab
 8015b24:	70f5a894 	.word	0x70f5a894
 8015b28:	63afbe7b 	.word	0x63afbe7b
 8015b2c:	2aaaaaab 	.word	0x2aaaaaab
 8015b30:	00000000 	.word	0x00000000
 8015b34:	2300      	movs	r3, #0
 8015b36:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 8015b3a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8015b3e:	f8c7 38ac 	str.w	r3, [r7, #2220]	; 0x8ac
    q31_t result = 0;
 8015b42:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015b46:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 8015b4a:	2300      	movs	r3, #0
 8015b4c:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8015b4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8015b52:	f04f 0300 	mov.w	r3, #0
 8015b56:	f507 610a 	add.w	r1, r7, #2208	; 0x8a0
 8015b5a:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8015b5e:	f8d7 38ac 	ldr.w	r3, [r7, #2220]	; 0x8ac
 8015b62:	0fdb      	lsrs	r3, r3, #31
 8015b64:	b2da      	uxtb	r2, r3
 8015b66:	2300      	movs	r3, #0
 8015b68:	4053      	eors	r3, r2
 8015b6a:	b2db      	uxtb	r3, r3
 8015b6c:	2b00      	cmp	r3, #0
 8015b6e:	d012      	beq.n	8015b96 <arm_softmax_s8+0xb76>
        mult = 1 - mult;
 8015b70:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 8015b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b78:	2100      	movs	r1, #0
 8015b7a:	f1d2 0001 	rsbs	r0, r2, #1
 8015b7e:	f8c7 0288 	str.w	r0, [r7, #648]	; 0x288
 8015b82:	eb61 0303 	sbc.w	r3, r1, r3
 8015b86:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8015b8a:	e9d7 34a2 	ldrd	r3, r4, [r7, #648]	; 0x288
 8015b8e:	f507 620a 	add.w	r2, r7, #2208	; 0x8a0
 8015b92:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8015b96:	f8d7 38ac 	ldr.w	r3, [r7, #2220]	; 0x8ac
 8015b9a:	17da      	asrs	r2, r3, #31
 8015b9c:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
 8015ba0:	f8c7 2494 	str.w	r2, [r7, #1172]	; 0x494
 8015ba4:	a3a8      	add	r3, pc, #672	; (adr r3, 8015e48 <arm_softmax_s8+0xe28>)
 8015ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015baa:	f8d7 1494 	ldr.w	r1, [r7, #1172]	; 0x494
 8015bae:	fb02 f001 	mul.w	r0, r2, r1
 8015bb2:	f8d7 1490 	ldr.w	r1, [r7, #1168]	; 0x490
 8015bb6:	fb01 f103 	mul.w	r1, r1, r3
 8015bba:	4401      	add	r1, r0
 8015bbc:	f8d7 0490 	ldr.w	r0, [r7, #1168]	; 0x490
 8015bc0:	fba0 2302 	umull	r2, r3, r0, r2
 8015bc4:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
 8015bc8:	4613      	mov	r3, r2
 8015bca:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
 8015bce:	f8d7 35bc 	ldr.w	r3, [r7, #1468]	; 0x5bc
 8015bd2:	18cb      	adds	r3, r1, r3
 8015bd4:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
 8015bd8:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 8015bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015be0:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 8015be4:	1851      	adds	r1, r2, r1
 8015be6:	f8c7 1280 	str.w	r1, [r7, #640]	; 0x280
 8015bea:	f8d7 15bc 	ldr.w	r1, [r7, #1468]	; 0x5bc
 8015bee:	414b      	adcs	r3, r1
 8015bf0:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8015bf4:	e9d7 34a0 	ldrd	r3, r4, [r7, #640]	; 0x280
 8015bf8:	f507 620a 	add.w	r2, r7, #2208	; 0x8a0
 8015bfc:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8015c00:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 8015c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c08:	2b00      	cmp	r3, #0
 8015c0a:	da0a      	bge.n	8015c22 <arm_softmax_s8+0xc02>
 8015c0c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015c10:	1851      	adds	r1, r2, r1
 8015c12:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 8015c16:	f143 0300 	adc.w	r3, r3, #0
 8015c1a:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
 8015c1e:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8015c22:	f04f 0000 	mov.w	r0, #0
 8015c26:	f04f 0100 	mov.w	r1, #0
 8015c2a:	0fd0      	lsrs	r0, r2, #31
 8015c2c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8015c30:	17d9      	asrs	r1, r3, #31
 8015c32:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015c36:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 8015c3a:	4603      	mov	r3, r0
 8015c3c:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8015c3e:	f8d7 28ac 	ldr.w	r2, [r7, #2220]	; 0x8ac
 8015c42:	4b7f      	ldr	r3, [pc, #508]	; (8015e40 <arm_softmax_s8+0xe20>)
 8015c44:	429a      	cmp	r2, r3
 8015c46:	d10b      	bne.n	8015c60 <arm_softmax_s8+0xc40>
 8015c48:	f8d7 38ac 	ldr.w	r3, [r7, #2220]	; 0x8ac
 8015c4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015c50:	d106      	bne.n	8015c60 <arm_softmax_s8+0xc40>
        result = Q31_MAX;
 8015c52:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015c56:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 8015c5a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015c5e:	6013      	str	r3, [r2, #0]
    return result;
 8015c60:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015c64:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8015c68:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(1302514674)
 8015c6a:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8015c6e:	ea02 0103 	and.w	r1, r2, r3
 8015c72:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8015c76:	43da      	mvns	r2, r3
 8015c78:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8015c7c:	4013      	ands	r3, r2
 8015c7e:	404b      	eors	r3, r1
 8015c80:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(790015084)
 8015c84:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 8015c88:	1c53      	adds	r3, r2, #1
 8015c8a:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 8015c8e:	2301      	movs	r3, #1
 8015c90:	fa03 f202 	lsl.w	r2, r3, r2
 8015c94:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8015c98:	4013      	ands	r3, r2
 8015c9a:	2b00      	cmp	r3, #0
 8015c9c:	d002      	beq.n	8015ca4 <arm_softmax_s8+0xc84>
 8015c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8015ca2:	e000      	b.n	8015ca6 <arm_softmax_s8+0xc86>
 8015ca4:	2300      	movs	r3, #0
 8015ca6:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 8015caa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015cae:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 8015cb2:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8015cb6:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8015cb8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015cbc:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8015cc0:	2300      	movs	r3, #0
 8015cc2:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8015cc4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8015cc8:	f04f 0300 	mov.w	r3, #0
 8015ccc:	f507 6109 	add.w	r1, r7, #2192	; 0x890
 8015cd0:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8015cd4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015cd8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8015cdc:	681b      	ldr	r3, [r3, #0]
 8015cde:	0fdb      	lsrs	r3, r3, #31
 8015ce0:	b2da      	uxtb	r2, r3
 8015ce2:	2300      	movs	r3, #0
 8015ce4:	4053      	eors	r3, r2
 8015ce6:	b2db      	uxtb	r3, r3
 8015ce8:	2b00      	cmp	r3, #0
 8015cea:	d012      	beq.n	8015d12 <arm_softmax_s8+0xcf2>
        mult = 1 - mult;
 8015cec:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 8015cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cf4:	2100      	movs	r1, #0
 8015cf6:	f1d2 0001 	rsbs	r0, r2, #1
 8015cfa:	f8c7 0270 	str.w	r0, [r7, #624]	; 0x270
 8015cfe:	eb61 0303 	sbc.w	r3, r1, r3
 8015d02:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 8015d06:	e9d7 349c 	ldrd	r3, r4, [r7, #624]	; 0x270
 8015d0a:	f507 6209 	add.w	r2, r7, #2192	; 0x890
 8015d0e:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8015d12:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015d16:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8015d1a:	681b      	ldr	r3, [r3, #0]
 8015d1c:	17da      	asrs	r2, r3, #31
 8015d1e:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
 8015d22:	f8c7 248c 	str.w	r2, [r7, #1164]	; 0x48c
 8015d26:	a344      	add	r3, pc, #272	; (adr r3, 8015e38 <arm_softmax_s8+0xe18>)
 8015d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d2c:	f8d7 148c 	ldr.w	r1, [r7, #1164]	; 0x48c
 8015d30:	fb02 f001 	mul.w	r0, r2, r1
 8015d34:	f8d7 1488 	ldr.w	r1, [r7, #1160]	; 0x488
 8015d38:	fb01 f103 	mul.w	r1, r1, r3
 8015d3c:	4401      	add	r1, r0
 8015d3e:	f8d7 0488 	ldr.w	r0, [r7, #1160]	; 0x488
 8015d42:	fba0 2302 	umull	r2, r3, r0, r2
 8015d46:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 8015d4a:	4613      	mov	r3, r2
 8015d4c:	f8c7 35b0 	str.w	r3, [r7, #1456]	; 0x5b0
 8015d50:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 8015d54:	18cb      	adds	r3, r1, r3
 8015d56:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 8015d5a:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 8015d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d62:	f8d7 15b0 	ldr.w	r1, [r7, #1456]	; 0x5b0
 8015d66:	1851      	adds	r1, r2, r1
 8015d68:	f8c7 1268 	str.w	r1, [r7, #616]	; 0x268
 8015d6c:	f8d7 15b4 	ldr.w	r1, [r7, #1460]	; 0x5b4
 8015d70:	414b      	adcs	r3, r1
 8015d72:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 8015d76:	e9d7 349a 	ldrd	r3, r4, [r7, #616]	; 0x268
 8015d7a:	f507 6209 	add.w	r2, r7, #2192	; 0x890
 8015d7e:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8015d82:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 8015d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d8a:	2b00      	cmp	r3, #0
 8015d8c:	da0a      	bge.n	8015da4 <arm_softmax_s8+0xd84>
 8015d8e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015d92:	1851      	adds	r1, r2, r1
 8015d94:	f8c7 1260 	str.w	r1, [r7, #608]	; 0x260
 8015d98:	f143 0300 	adc.w	r3, r3, #0
 8015d9c:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8015da0:	e9d7 2398 	ldrd	r2, r3, [r7, #608]	; 0x260
 8015da4:	f04f 0000 	mov.w	r0, #0
 8015da8:	f04f 0100 	mov.w	r1, #0
 8015dac:	0fd0      	lsrs	r0, r2, #31
 8015dae:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8015db2:	17d9      	asrs	r1, r3, #31
 8015db4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015db8:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8015dbc:	4603      	mov	r3, r0
 8015dbe:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8015dc0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015dc4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8015dc8:	681a      	ldr	r2, [r3, #0]
 8015dca:	4b1e      	ldr	r3, [pc, #120]	; (8015e44 <arm_softmax_s8+0xe24>)
 8015dcc:	429a      	cmp	r2, r3
 8015dce:	d10e      	bne.n	8015dee <arm_softmax_s8+0xdce>
 8015dd0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015dd4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8015dd8:	681b      	ldr	r3, [r3, #0]
 8015dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015dde:	d106      	bne.n	8015dee <arm_softmax_s8+0xdce>
        result = Q31_MAX;
 8015de0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015de4:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8015de8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015dec:	6013      	str	r3, [r2, #0]
    return result;
 8015dee:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015df2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8015df6:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(790015084)
 8015df8:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8015dfc:	ea02 0103 	and.w	r1, r2, r3
 8015e00:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8015e04:	43da      	mvns	r2, r3
 8015e06:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8015e0a:	4013      	ands	r3, r2
 8015e0c:	404b      	eors	r3, r1
 8015e0e:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(290630308)
 8015e12:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 8015e16:	1c53      	adds	r3, r2, #1
 8015e18:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 8015e1c:	2301      	movs	r3, #1
 8015e1e:	fa03 f202 	lsl.w	r2, r3, r2
 8015e22:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8015e26:	4013      	ands	r3, r2
 8015e28:	2b00      	cmp	r3, #0
 8015e2a:	d011      	beq.n	8015e50 <arm_softmax_s8+0xe30>
 8015e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8015e30:	e00f      	b.n	8015e52 <arm_softmax_s8+0xe32>
 8015e32:	bf00      	nop
 8015e34:	f3af 8000 	nop.w
 8015e38:	2f16ac6c 	.word	0x2f16ac6c
 8015e3c:	00000000 	.word	0x00000000
 8015e40:	4da2cbf2 	.word	0x4da2cbf2
 8015e44:	2f16ac6c 	.word	0x2f16ac6c
 8015e48:	4da2cbf2 	.word	0x4da2cbf2
 8015e4c:	00000000 	.word	0x00000000
 8015e50:	2300      	movs	r3, #0
 8015e52:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 8015e56:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015e5a:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 8015e5e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8015e62:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8015e64:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015e68:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 8015e6c:	2300      	movs	r3, #0
 8015e6e:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8015e70:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8015e74:	f04f 0300 	mov.w	r3, #0
 8015e78:	f507 6108 	add.w	r1, r7, #2176	; 0x880
 8015e7c:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8015e80:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015e84:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8015e88:	681b      	ldr	r3, [r3, #0]
 8015e8a:	0fdb      	lsrs	r3, r3, #31
 8015e8c:	b2da      	uxtb	r2, r3
 8015e8e:	2300      	movs	r3, #0
 8015e90:	4053      	eors	r3, r2
 8015e92:	b2db      	uxtb	r3, r3
 8015e94:	2b00      	cmp	r3, #0
 8015e96:	d012      	beq.n	8015ebe <arm_softmax_s8+0xe9e>
        mult = 1 - mult;
 8015e98:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8015e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ea0:	2100      	movs	r1, #0
 8015ea2:	f1d2 0001 	rsbs	r0, r2, #1
 8015ea6:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
 8015eaa:	eb61 0303 	sbc.w	r3, r1, r3
 8015eae:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8015eb2:	e9d7 3496 	ldrd	r3, r4, [r7, #600]	; 0x258
 8015eb6:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8015eba:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8015ebe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015ec2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8015ec6:	681b      	ldr	r3, [r3, #0]
 8015ec8:	17da      	asrs	r2, r3, #31
 8015eca:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
 8015ece:	f8c7 2484 	str.w	r2, [r7, #1156]	; 0x484
 8015ed2:	a3ab      	add	r3, pc, #684	; (adr r3, 8016180 <arm_softmax_s8+0x1160>)
 8015ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ed8:	f8d7 1484 	ldr.w	r1, [r7, #1156]	; 0x484
 8015edc:	fb02 f001 	mul.w	r0, r2, r1
 8015ee0:	f8d7 1480 	ldr.w	r1, [r7, #1152]	; 0x480
 8015ee4:	fb01 f103 	mul.w	r1, r1, r3
 8015ee8:	4401      	add	r1, r0
 8015eea:	f8d7 0480 	ldr.w	r0, [r7, #1152]	; 0x480
 8015eee:	fba0 2302 	umull	r2, r3, r0, r2
 8015ef2:	f8c7 35ac 	str.w	r3, [r7, #1452]	; 0x5ac
 8015ef6:	4613      	mov	r3, r2
 8015ef8:	f8c7 35a8 	str.w	r3, [r7, #1448]	; 0x5a8
 8015efc:	f8d7 35ac 	ldr.w	r3, [r7, #1452]	; 0x5ac
 8015f00:	18cb      	adds	r3, r1, r3
 8015f02:	f8c7 35ac 	str.w	r3, [r7, #1452]	; 0x5ac
 8015f06:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8015f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f0e:	f8d7 15a8 	ldr.w	r1, [r7, #1448]	; 0x5a8
 8015f12:	1851      	adds	r1, r2, r1
 8015f14:	f8c7 1250 	str.w	r1, [r7, #592]	; 0x250
 8015f18:	f8d7 15ac 	ldr.w	r1, [r7, #1452]	; 0x5ac
 8015f1c:	414b      	adcs	r3, r1
 8015f1e:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8015f22:	e9d7 3494 	ldrd	r3, r4, [r7, #592]	; 0x250
 8015f26:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8015f2a:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8015f2e:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8015f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f36:	2b00      	cmp	r3, #0
 8015f38:	da0a      	bge.n	8015f50 <arm_softmax_s8+0xf30>
 8015f3a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015f3e:	1851      	adds	r1, r2, r1
 8015f40:	f8c7 1248 	str.w	r1, [r7, #584]	; 0x248
 8015f44:	f143 0300 	adc.w	r3, r3, #0
 8015f48:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8015f4c:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 8015f50:	f04f 0000 	mov.w	r0, #0
 8015f54:	f04f 0100 	mov.w	r1, #0
 8015f58:	0fd0      	lsrs	r0, r2, #31
 8015f5a:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8015f5e:	17d9      	asrs	r1, r3, #31
 8015f60:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015f64:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 8015f68:	4603      	mov	r3, r0
 8015f6a:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8015f6c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015f70:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8015f74:	681a      	ldr	r2, [r3, #0]
 8015f76:	4b80      	ldr	r3, [pc, #512]	; (8016178 <arm_softmax_s8+0x1158>)
 8015f78:	429a      	cmp	r2, r3
 8015f7a:	d10e      	bne.n	8015f9a <arm_softmax_s8+0xf7a>
 8015f7c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015f80:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8015f84:	681b      	ldr	r3, [r3, #0]
 8015f86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015f8a:	d106      	bne.n	8015f9a <arm_softmax_s8+0xf7a>
        result = Q31_MAX;
 8015f8c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015f90:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 8015f94:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015f98:	6013      	str	r3, [r2, #0]
    return result;
 8015f9a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015f9e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8015fa2:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(290630308)
 8015fa4:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8015fa8:	ea02 0103 	and.w	r1, r2, r3
 8015fac:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8015fb0:	43da      	mvns	r2, r3
 8015fb2:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8015fb6:	4013      	ands	r3, r2
 8015fb8:	404b      	eors	r3, r1
 8015fba:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(39332535)
 8015fbe:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 8015fc2:	1c53      	adds	r3, r2, #1
 8015fc4:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 8015fc8:	2301      	movs	r3, #1
 8015fca:	fa03 f202 	lsl.w	r2, r3, r2
 8015fce:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8015fd2:	4013      	ands	r3, r2
 8015fd4:	2b00      	cmp	r3, #0
 8015fd6:	d002      	beq.n	8015fde <arm_softmax_s8+0xfbe>
 8015fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8015fdc:	e000      	b.n	8015fe0 <arm_softmax_s8+0xfc0>
 8015fde:	2300      	movs	r3, #0
 8015fe0:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 8015fe4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015fe8:	f5a3 7296 	sub.w	r2, r3, #300	; 0x12c
 8015fec:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8015ff0:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8015ff2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015ff6:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 8015ffa:	2300      	movs	r3, #0
 8015ffc:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8015ffe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8016002:	f04f 0300 	mov.w	r3, #0
 8016006:	f507 6107 	add.w	r1, r7, #2160	; 0x870
 801600a:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 801600e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016012:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8016016:	681b      	ldr	r3, [r3, #0]
 8016018:	0fdb      	lsrs	r3, r3, #31
 801601a:	b2da      	uxtb	r2, r3
 801601c:	2300      	movs	r3, #0
 801601e:	4053      	eors	r3, r2
 8016020:	b2db      	uxtb	r3, r3
 8016022:	2b00      	cmp	r3, #0
 8016024:	d012      	beq.n	801604c <arm_softmax_s8+0x102c>
        mult = 1 - mult;
 8016026:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 801602a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801602e:	2100      	movs	r1, #0
 8016030:	f1d2 0001 	rsbs	r0, r2, #1
 8016034:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
 8016038:	eb61 0303 	sbc.w	r3, r1, r3
 801603c:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8016040:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 8016044:	f507 6207 	add.w	r2, r7, #2160	; 0x870
 8016048:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801604c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016050:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8016054:	681b      	ldr	r3, [r3, #0]
 8016056:	17da      	asrs	r2, r3, #31
 8016058:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 801605c:	f8c7 247c 	str.w	r2, [r7, #1148]	; 0x47c
 8016060:	a343      	add	r3, pc, #268	; (adr r3, 8016170 <arm_softmax_s8+0x1150>)
 8016062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016066:	f8d7 147c 	ldr.w	r1, [r7, #1148]	; 0x47c
 801606a:	fb02 f001 	mul.w	r0, r2, r1
 801606e:	f8d7 1478 	ldr.w	r1, [r7, #1144]	; 0x478
 8016072:	fb01 f103 	mul.w	r1, r1, r3
 8016076:	4401      	add	r1, r0
 8016078:	f8d7 0478 	ldr.w	r0, [r7, #1144]	; 0x478
 801607c:	fba0 2302 	umull	r2, r3, r0, r2
 8016080:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
 8016084:	4613      	mov	r3, r2
 8016086:	f8c7 35a0 	str.w	r3, [r7, #1440]	; 0x5a0
 801608a:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 801608e:	18cb      	adds	r3, r1, r3
 8016090:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
 8016094:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 8016098:	e9d3 2300 	ldrd	r2, r3, [r3]
 801609c:	f8d7 15a0 	ldr.w	r1, [r7, #1440]	; 0x5a0
 80160a0:	1851      	adds	r1, r2, r1
 80160a2:	f8c7 1238 	str.w	r1, [r7, #568]	; 0x238
 80160a6:	f8d7 15a4 	ldr.w	r1, [r7, #1444]	; 0x5a4
 80160aa:	414b      	adcs	r3, r1
 80160ac:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 80160b0:	e9d7 348e 	ldrd	r3, r4, [r7, #568]	; 0x238
 80160b4:	f507 6207 	add.w	r2, r7, #2160	; 0x870
 80160b8:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80160bc:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 80160c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160c4:	2b00      	cmp	r3, #0
 80160c6:	da0a      	bge.n	80160de <arm_softmax_s8+0x10be>
 80160c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80160cc:	1851      	adds	r1, r2, r1
 80160ce:	f8c7 1230 	str.w	r1, [r7, #560]	; 0x230
 80160d2:	f143 0300 	adc.w	r3, r3, #0
 80160d6:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 80160da:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	; 0x230
 80160de:	f04f 0000 	mov.w	r0, #0
 80160e2:	f04f 0100 	mov.w	r1, #0
 80160e6:	0fd0      	lsrs	r0, r2, #31
 80160e8:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80160ec:	17d9      	asrs	r1, r3, #31
 80160ee:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80160f2:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 80160f6:	4603      	mov	r3, r0
 80160f8:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80160fa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80160fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8016102:	681a      	ldr	r2, [r3, #0]
 8016104:	4b1d      	ldr	r3, [pc, #116]	; (801617c <arm_softmax_s8+0x115c>)
 8016106:	429a      	cmp	r2, r3
 8016108:	d10e      	bne.n	8016128 <arm_softmax_s8+0x1108>
 801610a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801610e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8016112:	681b      	ldr	r3, [r3, #0]
 8016114:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8016118:	d106      	bne.n	8016128 <arm_softmax_s8+0x1108>
        result = Q31_MAX;
 801611a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801611e:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 8016122:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8016126:	6013      	str	r3, [r2, #0]
    return result;
 8016128:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801612c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8016130:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(39332535)
 8016132:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8016136:	ea02 0103 	and.w	r1, r2, r3
 801613a:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 801613e:	43da      	mvns	r2, r3
 8016140:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8016144:	4013      	ands	r3, r2
 8016146:	404b      	eors	r3, r1
 8016148:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(720401)
 801614c:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 8016150:	1c53      	adds	r3, r2, #1
 8016152:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 8016156:	2301      	movs	r3, #1
 8016158:	fa03 f202 	lsl.w	r2, r3, r2
 801615c:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8016160:	4013      	ands	r3, r2
 8016162:	2b00      	cmp	r3, #0
 8016164:	d010      	beq.n	8016188 <arm_softmax_s8+0x1168>
 8016166:	f04f 33ff 	mov.w	r3, #4294967295
 801616a:	e00e      	b.n	801618a <arm_softmax_s8+0x116a>
 801616c:	f3af 8000 	nop.w
 8016170:	02582ab7 	.word	0x02582ab7
 8016174:	00000000 	.word	0x00000000
 8016178:	1152aaa4 	.word	0x1152aaa4
 801617c:	02582ab7 	.word	0x02582ab7
 8016180:	1152aaa4 	.word	0x1152aaa4
 8016184:	00000000 	.word	0x00000000
 8016188:	2300      	movs	r3, #0
 801618a:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 801618e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016192:	f5a3 729e 	sub.w	r2, r3, #316	; 0x13c
 8016196:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 801619a:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801619c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80161a0:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 80161a4:	2300      	movs	r3, #0
 80161a6:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80161a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80161ac:	f04f 0300 	mov.w	r3, #0
 80161b0:	f507 6106 	add.w	r1, r7, #2144	; 0x860
 80161b4:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80161b8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80161bc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80161c0:	681b      	ldr	r3, [r3, #0]
 80161c2:	0fdb      	lsrs	r3, r3, #31
 80161c4:	b2da      	uxtb	r2, r3
 80161c6:	2300      	movs	r3, #0
 80161c8:	4053      	eors	r3, r2
 80161ca:	b2db      	uxtb	r3, r3
 80161cc:	2b00      	cmp	r3, #0
 80161ce:	d012      	beq.n	80161f6 <arm_softmax_s8+0x11d6>
        mult = 1 - mult;
 80161d0:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 80161d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161d8:	2100      	movs	r1, #0
 80161da:	f1d2 0001 	rsbs	r0, r2, #1
 80161de:	f8c7 0228 	str.w	r0, [r7, #552]	; 0x228
 80161e2:	eb61 0303 	sbc.w	r3, r1, r3
 80161e6:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 80161ea:	e9d7 348a 	ldrd	r3, r4, [r7, #552]	; 0x228
 80161ee:	f507 6206 	add.w	r2, r7, #2144	; 0x860
 80161f2:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80161f6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80161fa:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80161fe:	681b      	ldr	r3, [r3, #0]
 8016200:	17da      	asrs	r2, r3, #31
 8016202:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470
 8016206:	f8c7 2474 	str.w	r2, [r7, #1140]	; 0x474
 801620a:	4ad3      	ldr	r2, [pc, #844]	; (8016558 <arm_softmax_s8+0x1538>)
 801620c:	f04f 0300 	mov.w	r3, #0
 8016210:	f8d7 1474 	ldr.w	r1, [r7, #1140]	; 0x474
 8016214:	fb02 f001 	mul.w	r0, r2, r1
 8016218:	f8d7 1470 	ldr.w	r1, [r7, #1136]	; 0x470
 801621c:	fb01 f103 	mul.w	r1, r1, r3
 8016220:	4401      	add	r1, r0
 8016222:	f8d7 0470 	ldr.w	r0, [r7, #1136]	; 0x470
 8016226:	fba0 2302 	umull	r2, r3, r0, r2
 801622a:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
 801622e:	4613      	mov	r3, r2
 8016230:	f8c7 3598 	str.w	r3, [r7, #1432]	; 0x598
 8016234:	f8d7 359c 	ldr.w	r3, [r7, #1436]	; 0x59c
 8016238:	18cb      	adds	r3, r1, r3
 801623a:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
 801623e:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 8016242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016246:	f8d7 1598 	ldr.w	r1, [r7, #1432]	; 0x598
 801624a:	1851      	adds	r1, r2, r1
 801624c:	f8c7 1220 	str.w	r1, [r7, #544]	; 0x220
 8016250:	f8d7 159c 	ldr.w	r1, [r7, #1436]	; 0x59c
 8016254:	414b      	adcs	r3, r1
 8016256:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 801625a:	e9d7 3488 	ldrd	r3, r4, [r7, #544]	; 0x220
 801625e:	f507 6206 	add.w	r2, r7, #2144	; 0x860
 8016262:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8016266:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 801626a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801626e:	2b00      	cmp	r3, #0
 8016270:	da0a      	bge.n	8016288 <arm_softmax_s8+0x1268>
 8016272:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016276:	1851      	adds	r1, r2, r1
 8016278:	f8c7 1218 	str.w	r1, [r7, #536]	; 0x218
 801627c:	f143 0300 	adc.w	r3, r3, #0
 8016280:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8016284:	e9d7 2386 	ldrd	r2, r3, [r7, #536]	; 0x218
 8016288:	f04f 0000 	mov.w	r0, #0
 801628c:	f04f 0100 	mov.w	r1, #0
 8016290:	0fd0      	lsrs	r0, r2, #31
 8016292:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8016296:	17d9      	asrs	r1, r3, #31
 8016298:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801629c:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 80162a0:	4603      	mov	r3, r0
 80162a2:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80162a4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80162a8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80162ac:	681a      	ldr	r2, [r3, #0]
 80162ae:	4baa      	ldr	r3, [pc, #680]	; (8016558 <arm_softmax_s8+0x1538>)
 80162b0:	429a      	cmp	r2, r3
 80162b2:	d10e      	bne.n	80162d2 <arm_softmax_s8+0x12b2>
 80162b4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80162b8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80162bc:	681b      	ldr	r3, [r3, #0]
 80162be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80162c2:	d106      	bne.n	80162d2 <arm_softmax_s8+0x12b2>
        result = Q31_MAX;
 80162c4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80162c8:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 80162cc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80162d0:	6013      	str	r3, [r2, #0]
    return result;
 80162d2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80162d6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80162da:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(720401)
 80162dc:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 80162e0:	ea02 0103 	and.w	r1, r2, r3
 80162e4:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 80162e8:	43da      	mvns	r2, r3
 80162ea:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80162ee:	4013      	ands	r3, r2
 80162f0:	404b      	eors	r3, r1
 80162f2:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(242)
 80162f6:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 80162fa:	1c53      	adds	r3, r2, #1
 80162fc:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 8016300:	2301      	movs	r3, #1
 8016302:	fa03 f202 	lsl.w	r2, r3, r2
 8016306:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 801630a:	4013      	ands	r3, r2
 801630c:	2b00      	cmp	r3, #0
 801630e:	d002      	beq.n	8016316 <arm_softmax_s8+0x12f6>
 8016310:	f04f 33ff 	mov.w	r3, #4294967295
 8016314:	e000      	b.n	8016318 <arm_softmax_s8+0x12f8>
 8016316:	2300      	movs	r3, #0
 8016318:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 801631c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016320:	f5a3 72a6 	sub.w	r2, r3, #332	; 0x14c
 8016324:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8016328:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801632a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801632e:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 8016332:	2300      	movs	r3, #0
 8016334:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8016336:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801633a:	f04f 0300 	mov.w	r3, #0
 801633e:	f507 6105 	add.w	r1, r7, #2128	; 0x850
 8016342:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8016346:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801634a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 801634e:	681b      	ldr	r3, [r3, #0]
 8016350:	0fdb      	lsrs	r3, r3, #31
 8016352:	b2da      	uxtb	r2, r3
 8016354:	2300      	movs	r3, #0
 8016356:	4053      	eors	r3, r2
 8016358:	b2db      	uxtb	r3, r3
 801635a:	2b00      	cmp	r3, #0
 801635c:	d012      	beq.n	8016384 <arm_softmax_s8+0x1364>
        mult = 1 - mult;
 801635e:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 8016362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016366:	2100      	movs	r1, #0
 8016368:	f1d2 0001 	rsbs	r0, r2, #1
 801636c:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
 8016370:	eb61 0303 	sbc.w	r3, r1, r3
 8016374:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8016378:	e9d7 3484 	ldrd	r3, r4, [r7, #528]	; 0x210
 801637c:	f507 6205 	add.w	r2, r7, #2128	; 0x850
 8016380:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8016384:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016388:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 801638c:	681b      	ldr	r3, [r3, #0]
 801638e:	17da      	asrs	r2, r3, #31
 8016390:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
 8016394:	f8c7 246c 	str.w	r2, [r7, #1132]	; 0x46c
 8016398:	f04f 02f2 	mov.w	r2, #242	; 0xf2
 801639c:	f04f 0300 	mov.w	r3, #0
 80163a0:	f8d7 146c 	ldr.w	r1, [r7, #1132]	; 0x46c
 80163a4:	fb02 f001 	mul.w	r0, r2, r1
 80163a8:	f8d7 1468 	ldr.w	r1, [r7, #1128]	; 0x468
 80163ac:	fb01 f103 	mul.w	r1, r1, r3
 80163b0:	4401      	add	r1, r0
 80163b2:	f8d7 0468 	ldr.w	r0, [r7, #1128]	; 0x468
 80163b6:	fba0 2302 	umull	r2, r3, r0, r2
 80163ba:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
 80163be:	4613      	mov	r3, r2
 80163c0:	f8c7 3590 	str.w	r3, [r7, #1424]	; 0x590
 80163c4:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 80163c8:	18cb      	adds	r3, r1, r3
 80163ca:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
 80163ce:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 80163d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163d6:	f8d7 1590 	ldr.w	r1, [r7, #1424]	; 0x590
 80163da:	1851      	adds	r1, r2, r1
 80163dc:	f8c7 1208 	str.w	r1, [r7, #520]	; 0x208
 80163e0:	f8d7 1594 	ldr.w	r1, [r7, #1428]	; 0x594
 80163e4:	414b      	adcs	r3, r1
 80163e6:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 80163ea:	e9d7 3482 	ldrd	r3, r4, [r7, #520]	; 0x208
 80163ee:	f507 6205 	add.w	r2, r7, #2128	; 0x850
 80163f2:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80163f6:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 80163fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163fe:	2b00      	cmp	r3, #0
 8016400:	da0a      	bge.n	8016418 <arm_softmax_s8+0x13f8>
 8016402:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016406:	1851      	adds	r1, r2, r1
 8016408:	f8c7 1200 	str.w	r1, [r7, #512]	; 0x200
 801640c:	f143 0300 	adc.w	r3, r3, #0
 8016410:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8016414:	e9d7 2380 	ldrd	r2, r3, [r7, #512]	; 0x200
 8016418:	f04f 0000 	mov.w	r0, #0
 801641c:	f04f 0100 	mov.w	r1, #0
 8016420:	0fd0      	lsrs	r0, r2, #31
 8016422:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8016426:	17d9      	asrs	r1, r3, #31
 8016428:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801642c:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 8016430:	4603      	mov	r3, r0
 8016432:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8016434:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016438:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 801643c:	681b      	ldr	r3, [r3, #0]
 801643e:	2bf2      	cmp	r3, #242	; 0xf2
 8016440:	d10e      	bne.n	8016460 <arm_softmax_s8+0x1440>
 8016442:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016446:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 801644a:	681b      	ldr	r3, [r3, #0]
 801644c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8016450:	d106      	bne.n	8016460 <arm_softmax_s8+0x1440>
        result = Q31_MAX;
 8016452:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016456:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 801645a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801645e:	6013      	str	r3, [r2, #0]
    return result;
 8016460:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016464:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8016468:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(242)
 801646a:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 801646e:	ea02 0103 	and.w	r1, r2, r3
 8016472:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8016476:	43da      	mvns	r2, r3
 8016478:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 801647c:	4013      	ands	r3, r2
 801647e:	404b      	eors	r3, r1
 8016480:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4

#undef SELECT_IF_NON_ZERO

    mask = MASK_IF_ZERO(val);
 8016484:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 8016488:	2b00      	cmp	r3, #0
 801648a:	d102      	bne.n	8016492 <arm_softmax_s8+0x1472>
 801648c:	f04f 33ff 	mov.w	r3, #4294967295
 8016490:	e000      	b.n	8016494 <arm_softmax_s8+0x1474>
 8016492:	2300      	movs	r3, #0
 8016494:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
    return SELECT_USING_MASK(mask, Q31_MAX, result);
 8016498:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 801649c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80164a0:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 80164a4:	43da      	mvns	r2, r3
 80164a6:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80164aa:	4013      	ands	r3, r2
 80164ac:	404b      	eors	r3, r1
 80164ae:	f8c7 397c 	str.w	r3, [r7, #2428]	; 0x97c
    q31_t result = 0;
 80164b2:	2300      	movs	r3, #0
 80164b4:	f8c7 3978 	str.w	r3, [r7, #2424]	; 0x978
    const q31_t remainder_mask = (1 << exponent) - 1;
 80164b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80164bc:	3b01      	subs	r3, #1
 80164be:	f8c7 3974 	str.w	r3, [r7, #2420]	; 0x974
    int32_t remainder = remainder_mask & dividend;
 80164c2:	f8d7 297c 	ldr.w	r2, [r7, #2428]	; 0x97c
 80164c6:	f8d7 3974 	ldr.w	r3, [r7, #2420]	; 0x974
 80164ca:	4013      	ands	r3, r2
 80164cc:	f8c7 3970 	str.w	r3, [r7, #2416]	; 0x970
    result = dividend >> exponent;
 80164d0:	f8d7 397c 	ldr.w	r3, [r7, #2428]	; 0x97c
 80164d4:	131b      	asrs	r3, r3, #12
 80164d6:	f8c7 3978 	str.w	r3, [r7, #2424]	; 0x978
    q31_t threshold = remainder_mask >> 1;
 80164da:	f8d7 3974 	ldr.w	r3, [r7, #2420]	; 0x974
 80164de:	105b      	asrs	r3, r3, #1
 80164e0:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
    if (result < 0)
 80164e4:	f8d7 3978 	ldr.w	r3, [r7, #2424]	; 0x978
 80164e8:	2b00      	cmp	r3, #0
 80164ea:	da04      	bge.n	80164f6 <arm_softmax_s8+0x14d6>
        threshold++;
 80164ec:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 80164f0:	3301      	adds	r3, #1
 80164f2:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
    if (remainder > threshold)
 80164f6:	f8d7 2970 	ldr.w	r2, [r7, #2416]	; 0x970
 80164fa:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 80164fe:	429a      	cmp	r2, r3
 8016500:	dd04      	ble.n	801650c <arm_softmax_s8+0x14ec>
        result++;
 8016502:	f8d7 3978 	ldr.w	r3, [r7, #2424]	; 0x978
 8016506:	3301      	adds	r3, #1
 8016508:	f8c7 3978 	str.w	r3, [r7, #2424]	; 0x978
    return result;
 801650c:	f8d7 2978 	ldr.w	r2, [r7, #2424]	; 0x978
 8016510:	f8d7 3998 	ldr.w	r3, [r7, #2456]	; 0x998
 8016514:	4413      	add	r3, r2
 8016516:	f8c7 3998 	str.w	r3, [r7, #2456]	; 0x998
        for (col = 0; col < row_size; ++col)
 801651a:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	; 0x9a4
 801651e:	3301      	adds	r3, #1
 8016520:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 8016524:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016528:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 801652c:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 8016530:	681b      	ldr	r3, [r3, #0]
 8016532:	429a      	cmp	r2, r3
 8016534:	f6fe add2 	blt.w	80150dc <arm_softmax_s8+0xbc>
            }
        }

        const int32_t headroom = __CLZ(sum);
 8016538:	f8d7 2998 	ldr.w	r2, [r7, #2456]	; 0x998
 801653c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016540:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016544:	601a      	str	r2, [r3, #0]
  if (value == 0U)
 8016546:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801654a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 801654e:	681b      	ldr	r3, [r3, #0]
 8016550:	2b00      	cmp	r3, #0
 8016552:	d103      	bne.n	801655c <arm_softmax_s8+0x153c>
    return 32U;
 8016554:	2320      	movs	r3, #32
 8016556:	e009      	b.n	801656c <arm_softmax_s8+0x154c>
 8016558:	000afe11 	.word	0x000afe11
  return __builtin_clz(value);
 801655c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016560:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016564:	681b      	ldr	r3, [r3, #0]
 8016566:	fab3 f383 	clz	r3, r3
 801656a:	b2db      	uxtb	r3, r3
 801656c:	f8c7 398c 	str.w	r3, [r7, #2444]	; 0x98c
        const int32_t bits_over_unit = ACCUM_BITS - headroom + 23;
 8016570:	f8d7 398c 	ldr.w	r3, [r7, #2444]	; 0x98c
 8016574:	f1c3 0323 	rsb	r3, r3, #35	; 0x23
 8016578:	f8c7 3988 	str.w	r3, [r7, #2440]	; 0x988
        const int32_t shifted_scale = ONE_OVER1((sum << headroom) - (1 << 31));
 801657c:	f8d7 2998 	ldr.w	r2, [r7, #2456]	; 0x998
 8016580:	f8d7 398c 	ldr.w	r3, [r7, #2444]	; 0x98c
 8016584:	fa02 f303 	lsl.w	r3, r2, r3
 8016588:	f103 4200 	add.w	r2, r3, #2147483648	; 0x80000000
 801658c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016590:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8016594:	601a      	str	r2, [r3, #0]
    return result;
}

__STATIC_FORCEINLINE int32_t arm_nn_one_over_one_plus_x_for_x_in_0_1(int32_t val)
{
    const int64_t sum = (int64_t)val + (int64_t)Q31_MAX;
 8016596:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801659a:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 801659e:	681b      	ldr	r3, [r3, #0]
 80165a0:	17da      	asrs	r2, r3, #31
 80165a2:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
 80165a6:	f8c7 2344 	str.w	r2, [r7, #836]	; 0x344
 80165aa:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80165ae:	e9d7 01d0 	ldrd	r0, r1, [r7, #832]	; 0x340
 80165b2:	4602      	mov	r2, r0
 80165b4:	18d3      	adds	r3, r2, r3
 80165b6:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 80165ba:	460b      	mov	r3, r1
 80165bc:	f143 0300 	adc.w	r3, r3, #0
 80165c0:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 80165c4:	e9d7 347e 	ldrd	r3, r4, [r7, #504]	; 0x1f8
 80165c8:	f607 0228 	addw	r2, r7, #2088	; 0x828
 80165cc:	e9c2 3400 	strd	r3, r4, [r2]
    const int32_t half_denominator = (int32_t)((sum + (sum >= 0 ? 1 : -1)) / 2L);
 80165d0:	f607 0328 	addw	r3, r7, #2088	; 0x828
 80165d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165d8:	2b00      	cmp	r3, #0
 80165da:	db04      	blt.n	80165e6 <arm_softmax_s8+0x15c6>
 80165dc:	f04f 0001 	mov.w	r0, #1
 80165e0:	f04f 0100 	mov.w	r1, #0
 80165e4:	e003      	b.n	80165ee <arm_softmax_s8+0x15ce>
 80165e6:	f04f 30ff 	mov.w	r0, #4294967295
 80165ea:	f04f 31ff 	mov.w	r1, #4294967295
 80165ee:	f607 0328 	addw	r3, r7, #2088	; 0x828
 80165f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165f6:	1884      	adds	r4, r0, r2
 80165f8:	f8c7 4338 	str.w	r4, [r7, #824]	; 0x338
 80165fc:	eb41 0303 	adc.w	r3, r1, r3
 8016600:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 8016604:	e9d7 01ce 	ldrd	r0, r1, [r7, #824]	; 0x338
 8016608:	460b      	mov	r3, r1
 801660a:	0fdb      	lsrs	r3, r3, #31
 801660c:	2200      	movs	r2, #0
 801660e:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348
 8016612:	f8c7 234c 	str.w	r2, [r7, #844]	; 0x34c
 8016616:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 801661a:	4602      	mov	r2, r0
 801661c:	189b      	adds	r3, r3, r2
 801661e:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8016622:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8016626:	460a      	mov	r2, r1
 8016628:	4153      	adcs	r3, r2
 801662a:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 801662e:	f04f 0200 	mov.w	r2, #0
 8016632:	f04f 0300 	mov.w	r3, #0
 8016636:	f8d7 1350 	ldr.w	r1, [r7, #848]	; 0x350
 801663a:	084a      	lsrs	r2, r1, #1
 801663c:	f8d7 1354 	ldr.w	r1, [r7, #852]	; 0x354
 8016640:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8016644:	f8d7 1354 	ldr.w	r1, [r7, #852]	; 0x354
 8016648:	104b      	asrs	r3, r1, #1
 801664a:	4610      	mov	r0, r2
 801664c:	4619      	mov	r1, r3
 801664e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016652:	f5a3 72c2 	sub.w	r2, r3, #388	; 0x184
 8016656:	4603      	mov	r3, r0
 8016658:	6013      	str	r3, [r2, #0]
 801665a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801665e:	f5a3 72c4 	sub.w	r2, r3, #392	; 0x188
 8016662:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016666:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 801666a:	681b      	ldr	r3, [r3, #0]
 801666c:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801666e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016672:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 8016676:	2300      	movs	r3, #0
 8016678:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 801667a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801667e:	f04f 0300 	mov.w	r3, #0
 8016682:	f507 6101 	add.w	r1, r7, #2064	; 0x810
 8016686:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 801668a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801668e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8016692:	681b      	ldr	r3, [r3, #0]
 8016694:	0fdb      	lsrs	r3, r3, #31
 8016696:	b2da      	uxtb	r2, r3
 8016698:	2301      	movs	r3, #1
 801669a:	4053      	eors	r3, r2
 801669c:	b2db      	uxtb	r3, r3
 801669e:	2b00      	cmp	r3, #0
 80166a0:	d012      	beq.n	80166c8 <arm_softmax_s8+0x16a8>
        mult = 1 - mult;
 80166a2:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80166a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166aa:	2100      	movs	r1, #0
 80166ac:	f1d2 0001 	rsbs	r0, r2, #1
 80166b0:	f8c7 01f0 	str.w	r0, [r7, #496]	; 0x1f0
 80166b4:	eb61 0303 	sbc.w	r3, r1, r3
 80166b8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 80166bc:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 80166c0:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 80166c4:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80166c8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80166cc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80166d0:	681b      	ldr	r3, [r3, #0]
 80166d2:	17da      	asrs	r2, r3, #31
 80166d4:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
 80166d8:	f8c7 2454 	str.w	r2, [r7, #1108]	; 0x454
 80166dc:	f60f 53a0 	addw	r3, pc, #3488	; 0xda0
 80166e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166e4:	f8d7 1454 	ldr.w	r1, [r7, #1108]	; 0x454
 80166e8:	fb02 f001 	mul.w	r0, r2, r1
 80166ec:	f8d7 1450 	ldr.w	r1, [r7, #1104]	; 0x450
 80166f0:	fb01 f103 	mul.w	r1, r1, r3
 80166f4:	4401      	add	r1, r0
 80166f6:	f8d7 0450 	ldr.w	r0, [r7, #1104]	; 0x450
 80166fa:	fba0 2302 	umull	r2, r3, r0, r2
 80166fe:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 8016702:	4613      	mov	r3, r2
 8016704:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
 8016708:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 801670c:	18cb      	adds	r3, r1, r3
 801670e:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 8016712:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8016716:	e9d3 2300 	ldrd	r2, r3, [r3]
 801671a:	f8d7 1580 	ldr.w	r1, [r7, #1408]	; 0x580
 801671e:	1851      	adds	r1, r2, r1
 8016720:	f8c7 11e8 	str.w	r1, [r7, #488]	; 0x1e8
 8016724:	f8d7 1584 	ldr.w	r1, [r7, #1412]	; 0x584
 8016728:	414b      	adcs	r3, r1
 801672a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 801672e:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8016732:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 8016736:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 801673a:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 801673e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016742:	2b00      	cmp	r3, #0
 8016744:	da0a      	bge.n	801675c <arm_softmax_s8+0x173c>
 8016746:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801674a:	1851      	adds	r1, r2, r1
 801674c:	f8c7 11e0 	str.w	r1, [r7, #480]	; 0x1e0
 8016750:	f143 0300 	adc.w	r3, r3, #0
 8016754:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8016758:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 801675c:	f04f 0000 	mov.w	r0, #0
 8016760:	f04f 0100 	mov.w	r1, #0
 8016764:	0fd0      	lsrs	r0, r2, #31
 8016766:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801676a:	17d9      	asrs	r1, r3, #31
 801676c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016770:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 8016774:	4603      	mov	r3, r0
 8016776:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8016778:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801677c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8016780:	681b      	ldr	r3, [r3, #0]
 8016782:	f113 3f3c 	cmn.w	r3, #1010580540	; 0x3c3c3c3c
 8016786:	d10e      	bne.n	80167a6 <arm_softmax_s8+0x1786>
 8016788:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801678c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8016790:	681b      	ldr	r3, [r3, #0]
 8016792:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8016796:	d106      	bne.n	80167a6 <arm_softmax_s8+0x1786>
        result = Q31_MAX;
 8016798:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801679c:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 80167a0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80167a4:	6013      	str	r3, [r2, #0]
    return result;
 80167a6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80167aa:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80167ae:	6819      	ldr	r1, [r3, #0]
    int32_t x = 1515870810 + MUL_SAT(half_denominator, -1010580540);
 80167b0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80167b4:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 80167b8:	f101 335a 	add.w	r3, r1, #1515870810	; 0x5a5a5a5a
 80167bc:	6013      	str	r3, [r2, #0]

    const int32_t shift = (1 << 29);
 80167be:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80167c2:	f5a3 72d0 	sub.w	r2, r3, #416	; 0x1a0
 80167c6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80167ca:	6013      	str	r3, [r2, #0]
 80167cc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80167d0:	f5a3 72d2 	sub.w	r2, r3, #420	; 0x1a4
 80167d4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80167d8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80167dc:	681b      	ldr	r3, [r3, #0]
 80167de:	6013      	str	r3, [r2, #0]
 80167e0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80167e4:	f5a3 72d4 	sub.w	r2, r3, #424	; 0x1a8
 80167e8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80167ec:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80167f0:	681b      	ldr	r3, [r3, #0]
 80167f2:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80167f4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80167f8:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 80167fc:	2300      	movs	r3, #0
 80167fe:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8016800:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8016804:	f04f 0300 	mov.w	r3, #0
 8016808:	f507 61fe 	add.w	r1, r7, #2032	; 0x7f0
 801680c:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8016810:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016814:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8016818:	681b      	ldr	r3, [r3, #0]
 801681a:	0fdb      	lsrs	r3, r3, #31
 801681c:	b2da      	uxtb	r2, r3
 801681e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016822:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8016826:	681b      	ldr	r3, [r3, #0]
 8016828:	0fdb      	lsrs	r3, r3, #31
 801682a:	b2db      	uxtb	r3, r3
 801682c:	4053      	eors	r3, r2
 801682e:	b2db      	uxtb	r3, r3
 8016830:	2b00      	cmp	r3, #0
 8016832:	d012      	beq.n	801685a <arm_softmax_s8+0x183a>
        mult = 1 - mult;
 8016834:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 8016838:	e9d3 2300 	ldrd	r2, r3, [r3]
 801683c:	2100      	movs	r1, #0
 801683e:	f1d2 0001 	rsbs	r0, r2, #1
 8016842:	f8c7 01d8 	str.w	r0, [r7, #472]	; 0x1d8
 8016846:	eb61 0303 	sbc.w	r3, r1, r3
 801684a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 801684e:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 8016852:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 8016856:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801685a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801685e:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8016862:	681b      	ldr	r3, [r3, #0]
 8016864:	17da      	asrs	r2, r3, #31
 8016866:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
 801686a:	f8c7 244c 	str.w	r2, [r7, #1100]	; 0x44c
 801686e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016872:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8016876:	681b      	ldr	r3, [r3, #0]
 8016878:	17da      	asrs	r2, r3, #31
 801687a:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
 801687e:	f8c7 2444 	str.w	r2, [r7, #1092]	; 0x444
 8016882:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8016886:	e9d3 0100 	ldrd	r0, r1, [r3]
 801688a:	460b      	mov	r3, r1
 801688c:	f8d7 2440 	ldr.w	r2, [r7, #1088]	; 0x440
 8016890:	fb02 f203 	mul.w	r2, r2, r3
 8016894:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8016898:	f507 6489 	add.w	r4, r7, #1096	; 0x448
 801689c:	e9c4 0100 	strd	r0, r1, [r4]
 80168a0:	4601      	mov	r1, r0
 80168a2:	fb01 f303 	mul.w	r3, r1, r3
 80168a6:	4413      	add	r3, r2
 80168a8:	f8d7 2448 	ldr.w	r2, [r7, #1096]	; 0x448
 80168ac:	f8d7 1440 	ldr.w	r1, [r7, #1088]	; 0x440
 80168b0:	fba2 1201 	umull	r1, r2, r2, r1
 80168b4:	f8c7 257c 	str.w	r2, [r7, #1404]	; 0x57c
 80168b8:	460a      	mov	r2, r1
 80168ba:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 80168be:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 80168c2:	4413      	add	r3, r2
 80168c4:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 80168c8:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 80168cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168d0:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 80168d4:	1851      	adds	r1, r2, r1
 80168d6:	f8c7 11d0 	str.w	r1, [r7, #464]	; 0x1d0
 80168da:	f8d7 157c 	ldr.w	r1, [r7, #1404]	; 0x57c
 80168de:	414b      	adcs	r3, r1
 80168e0:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 80168e4:	e9d7 3474 	ldrd	r3, r4, [r7, #464]	; 0x1d0
 80168e8:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 80168ec:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80168f0:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 80168f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168f8:	2b00      	cmp	r3, #0
 80168fa:	da0a      	bge.n	8016912 <arm_softmax_s8+0x18f2>
 80168fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016900:	1851      	adds	r1, r2, r1
 8016902:	f8c7 11c8 	str.w	r1, [r7, #456]	; 0x1c8
 8016906:	f143 0300 	adc.w	r3, r3, #0
 801690a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 801690e:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 8016912:	f04f 0000 	mov.w	r0, #0
 8016916:	f04f 0100 	mov.w	r1, #0
 801691a:	0fd0      	lsrs	r0, r2, #31
 801691c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8016920:	17d9      	asrs	r1, r3, #31
 8016922:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016926:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 801692a:	4603      	mov	r3, r0
 801692c:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 801692e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016932:	f5a3 72d2 	sub.w	r2, r3, #420	; 0x1a4
 8016936:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801693a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 801693e:	6812      	ldr	r2, [r2, #0]
 8016940:	681b      	ldr	r3, [r3, #0]
 8016942:	429a      	cmp	r2, r3
 8016944:	d10e      	bne.n	8016964 <arm_softmax_s8+0x1944>
 8016946:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801694a:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 801694e:	681b      	ldr	r3, [r3, #0]
 8016950:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8016954:	d106      	bne.n	8016964 <arm_softmax_s8+0x1944>
        result = Q31_MAX;
 8016956:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801695a:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 801695e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8016962:	6013      	str	r3, [r2, #0]
    return result;
 8016964:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016968:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 801696c:	681a      	ldr	r2, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 801696e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016972:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8016976:	681b      	ldr	r3, [r3, #0]
 8016978:	1a99      	subs	r1, r3, r2
 801697a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801697e:	f5a3 72de 	sub.w	r2, r3, #444	; 0x1bc
 8016982:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016986:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 801698a:	681b      	ldr	r3, [r3, #0]
 801698c:	6013      	str	r3, [r2, #0]
 801698e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016992:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8016996:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 8016998:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801699c:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 80169a0:	2300      	movs	r3, #0
 80169a2:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80169a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80169a8:	f04f 0300 	mov.w	r3, #0
 80169ac:	f507 61fb 	add.w	r1, r7, #2008	; 0x7d8
 80169b0:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80169b4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80169b8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80169bc:	681b      	ldr	r3, [r3, #0]
 80169be:	0fdb      	lsrs	r3, r3, #31
 80169c0:	b2da      	uxtb	r2, r3
 80169c2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80169c6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80169ca:	681b      	ldr	r3, [r3, #0]
 80169cc:	0fdb      	lsrs	r3, r3, #31
 80169ce:	b2db      	uxtb	r3, r3
 80169d0:	4053      	eors	r3, r2
 80169d2:	b2db      	uxtb	r3, r3
 80169d4:	2b00      	cmp	r3, #0
 80169d6:	d012      	beq.n	80169fe <arm_softmax_s8+0x19de>
        mult = 1 - mult;
 80169d8:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 80169dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169e0:	2100      	movs	r1, #0
 80169e2:	f1d2 0001 	rsbs	r0, r2, #1
 80169e6:	f8c7 01c0 	str.w	r0, [r7, #448]	; 0x1c0
 80169ea:	eb61 0303 	sbc.w	r3, r1, r3
 80169ee:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80169f2:	e9d7 3470 	ldrd	r3, r4, [r7, #448]	; 0x1c0
 80169f6:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 80169fa:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80169fe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016a02:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8016a06:	681b      	ldr	r3, [r3, #0]
 8016a08:	17da      	asrs	r2, r3, #31
 8016a0a:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
 8016a0e:	f8c7 243c 	str.w	r2, [r7, #1084]	; 0x43c
 8016a12:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016a16:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8016a1a:	681b      	ldr	r3, [r3, #0]
 8016a1c:	17da      	asrs	r2, r3, #31
 8016a1e:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
 8016a22:	f8c7 2434 	str.w	r2, [r7, #1076]	; 0x434
 8016a26:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8016a2a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016a2e:	460b      	mov	r3, r1
 8016a30:	f8d7 2430 	ldr.w	r2, [r7, #1072]	; 0x430
 8016a34:	fb02 f203 	mul.w	r2, r2, r3
 8016a38:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8016a3c:	f507 6487 	add.w	r4, r7, #1080	; 0x438
 8016a40:	e9c4 0100 	strd	r0, r1, [r4]
 8016a44:	4601      	mov	r1, r0
 8016a46:	fb01 f303 	mul.w	r3, r1, r3
 8016a4a:	4413      	add	r3, r2
 8016a4c:	f8d7 2438 	ldr.w	r2, [r7, #1080]	; 0x438
 8016a50:	f8d7 1430 	ldr.w	r1, [r7, #1072]	; 0x430
 8016a54:	fba2 1201 	umull	r1, r2, r2, r1
 8016a58:	f8c7 2574 	str.w	r2, [r7, #1396]	; 0x574
 8016a5c:	460a      	mov	r2, r1
 8016a5e:	f8c7 2570 	str.w	r2, [r7, #1392]	; 0x570
 8016a62:	f8d7 2574 	ldr.w	r2, [r7, #1396]	; 0x574
 8016a66:	4413      	add	r3, r2
 8016a68:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
 8016a6c:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 8016a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a74:	f8d7 1570 	ldr.w	r1, [r7, #1392]	; 0x570
 8016a78:	1851      	adds	r1, r2, r1
 8016a7a:	f8c7 11b8 	str.w	r1, [r7, #440]	; 0x1b8
 8016a7e:	f8d7 1574 	ldr.w	r1, [r7, #1396]	; 0x574
 8016a82:	414b      	adcs	r3, r1
 8016a84:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8016a88:	e9d7 346e 	ldrd	r3, r4, [r7, #440]	; 0x1b8
 8016a8c:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 8016a90:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8016a94:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 8016a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a9c:	2b00      	cmp	r3, #0
 8016a9e:	da0a      	bge.n	8016ab6 <arm_softmax_s8+0x1a96>
 8016aa0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016aa4:	1851      	adds	r1, r2, r1
 8016aa6:	f8c7 11b0 	str.w	r1, [r7, #432]	; 0x1b0
 8016aaa:	f143 0300 	adc.w	r3, r3, #0
 8016aae:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8016ab2:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	; 0x1b0
 8016ab6:	f04f 0000 	mov.w	r0, #0
 8016aba:	f04f 0100 	mov.w	r1, #0
 8016abe:	0fd0      	lsrs	r0, r2, #31
 8016ac0:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8016ac4:	17d9      	asrs	r1, r3, #31
 8016ac6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016aca:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 8016ace:	4603      	mov	r3, r0
 8016ad0:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8016ad2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016ad6:	f5a3 72de 	sub.w	r2, r3, #444	; 0x1bc
 8016ada:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016ade:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8016ae2:	6812      	ldr	r2, [r2, #0]
 8016ae4:	681b      	ldr	r3, [r3, #0]
 8016ae6:	429a      	cmp	r2, r3
 8016ae8:	d10e      	bne.n	8016b08 <arm_softmax_s8+0x1ae8>
 8016aea:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016aee:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8016af2:	681b      	ldr	r3, [r3, #0]
 8016af4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8016af8:	d106      	bne.n	8016b08 <arm_softmax_s8+0x1ae8>
        result = Q31_MAX;
 8016afa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016afe:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 8016b02:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8016b06:	6013      	str	r3, [r2, #0]
    return result;
 8016b08:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016b0c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8016b10:	681a      	ldr	r2, [r3, #0]
 8016b12:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016b16:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8016b1a:	601a      	str	r2, [r3, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 8016b1c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8016b20:	4619      	mov	r1, r3
 8016b22:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016b26:	f5a3 72ec 	sub.w	r2, r3, #472	; 0x1d8
 8016b2a:	1e4b      	subs	r3, r1, #1
 8016b2c:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 8016b2e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016b32:	f5a3 72ee 	sub.w	r2, r3, #476	; 0x1dc
 8016b36:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016b3a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8016b3e:	681b      	ldr	r3, [r3, #0]
 8016b40:	009b      	lsls	r3, r3, #2
 8016b42:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 8016b44:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016b48:	f5a3 72ea 	sub.w	r2, r3, #468	; 0x1d4
 8016b4c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016b50:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8016b54:	6812      	ldr	r2, [r2, #0]
 8016b56:	681b      	ldr	r3, [r3, #0]
 8016b58:	429a      	cmp	r2, r3
 8016b5a:	dd02      	ble.n	8016b62 <arm_softmax_s8+0x1b42>
 8016b5c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8016b60:	e000      	b.n	8016b64 <arm_softmax_s8+0x1b44>
 8016b62:	2000      	movs	r0, #0
 8016b64:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016b68:	f5a3 72ea 	sub.w	r2, r3, #468	; 0x1d4
 8016b6c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016b70:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8016b74:	6812      	ldr	r2, [r2, #0]
 8016b76:	681b      	ldr	r3, [r3, #0]
 8016b78:	429a      	cmp	r2, r3
 8016b7a:	dd01      	ble.n	8016b80 <arm_softmax_s8+0x1b60>
 8016b7c:	2200      	movs	r2, #0
 8016b7e:	e001      	b.n	8016b84 <arm_softmax_s8+0x1b64>
 8016b80:	f04f 32ff 	mov.w	r2, #4294967295
 8016b84:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016b88:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8016b8c:	681b      	ldr	r3, [r3, #0]
 8016b8e:	ea02 0103 	and.w	r1, r2, r3
 8016b92:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016b96:	f5a3 72ee 	sub.w	r2, r3, #476	; 0x1dc
 8016b9a:	ea81 0300 	eor.w	r3, r1, r0
 8016b9e:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 8016ba0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016ba4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8016ba8:	681b      	ldr	r3, [r3, #0]
 8016baa:	425a      	negs	r2, r3
 8016bac:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016bb0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8016bb4:	681b      	ldr	r3, [r3, #0]
 8016bb6:	4293      	cmp	r3, r2
 8016bb8:	da02      	bge.n	8016bc0 <arm_softmax_s8+0x1ba0>
 8016bba:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8016bbe:	e000      	b.n	8016bc2 <arm_softmax_s8+0x1ba2>
 8016bc0:	2000      	movs	r0, #0
 8016bc2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016bc6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8016bca:	681b      	ldr	r3, [r3, #0]
 8016bcc:	425a      	negs	r2, r3
 8016bce:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016bd2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8016bd6:	681b      	ldr	r3, [r3, #0]
 8016bd8:	4293      	cmp	r3, r2
 8016bda:	da01      	bge.n	8016be0 <arm_softmax_s8+0x1bc0>
 8016bdc:	2200      	movs	r2, #0
 8016bde:	e001      	b.n	8016be4 <arm_softmax_s8+0x1bc4>
 8016be0:	f04f 32ff 	mov.w	r2, #4294967295
 8016be4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016be8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8016bec:	681b      	ldr	r3, [r3, #0]
 8016bee:	ea02 0103 	and.w	r1, r2, r3
 8016bf2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016bf6:	f5a3 72ee 	sub.w	r2, r3, #476	; 0x1dc
 8016bfa:	ea81 0300 	eor.w	r3, r1, r0
 8016bfe:	6013      	str	r3, [r2, #0]
    return result;
 8016c00:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016c04:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8016c08:	6819      	ldr	r1, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 8016c0a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016c0e:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 8016c12:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016c16:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8016c1a:	681b      	ldr	r3, [r3, #0]
 8016c1c:	440b      	add	r3, r1
 8016c1e:	6013      	str	r3, [r2, #0]
 8016c20:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016c24:	f5a3 72f0 	sub.w	r2, r3, #480	; 0x1e0
 8016c28:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016c2c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8016c30:	681b      	ldr	r3, [r3, #0]
 8016c32:	6013      	str	r3, [r2, #0]
 8016c34:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016c38:	f5a3 72f2 	sub.w	r2, r3, #484	; 0x1e4
 8016c3c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016c40:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8016c44:	681b      	ldr	r3, [r3, #0]
 8016c46:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8016c48:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016c4c:	f5a3 72f4 	sub.w	r2, r3, #488	; 0x1e8
 8016c50:	2300      	movs	r3, #0
 8016c52:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8016c54:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8016c58:	f04f 0300 	mov.w	r3, #0
 8016c5c:	f507 61f7 	add.w	r1, r7, #1976	; 0x7b8
 8016c60:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8016c64:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016c68:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8016c6c:	681b      	ldr	r3, [r3, #0]
 8016c6e:	0fdb      	lsrs	r3, r3, #31
 8016c70:	b2da      	uxtb	r2, r3
 8016c72:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016c76:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8016c7a:	681b      	ldr	r3, [r3, #0]
 8016c7c:	0fdb      	lsrs	r3, r3, #31
 8016c7e:	b2db      	uxtb	r3, r3
 8016c80:	4053      	eors	r3, r2
 8016c82:	b2db      	uxtb	r3, r3
 8016c84:	2b00      	cmp	r3, #0
 8016c86:	d012      	beq.n	8016cae <arm_softmax_s8+0x1c8e>
        mult = 1 - mult;
 8016c88:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 8016c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c90:	2100      	movs	r1, #0
 8016c92:	f1d2 0001 	rsbs	r0, r2, #1
 8016c96:	f8c7 01a8 	str.w	r0, [r7, #424]	; 0x1a8
 8016c9a:	eb61 0303 	sbc.w	r3, r1, r3
 8016c9e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8016ca2:	e9d7 346a 	ldrd	r3, r4, [r7, #424]	; 0x1a8
 8016ca6:	f507 62f7 	add.w	r2, r7, #1976	; 0x7b8
 8016caa:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8016cae:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016cb2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8016cb6:	681b      	ldr	r3, [r3, #0]
 8016cb8:	17da      	asrs	r2, r3, #31
 8016cba:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
 8016cbe:	f8c7 242c 	str.w	r2, [r7, #1068]	; 0x42c
 8016cc2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016cc6:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8016cca:	681b      	ldr	r3, [r3, #0]
 8016ccc:	17da      	asrs	r2, r3, #31
 8016cce:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
 8016cd2:	f8c7 2424 	str.w	r2, [r7, #1060]	; 0x424
 8016cd6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8016cda:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016cde:	460b      	mov	r3, r1
 8016ce0:	f8d7 2420 	ldr.w	r2, [r7, #1056]	; 0x420
 8016ce4:	fb02 f203 	mul.w	r2, r2, r3
 8016ce8:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 8016cec:	f507 6485 	add.w	r4, r7, #1064	; 0x428
 8016cf0:	e9c4 0100 	strd	r0, r1, [r4]
 8016cf4:	4601      	mov	r1, r0
 8016cf6:	fb01 f303 	mul.w	r3, r1, r3
 8016cfa:	4413      	add	r3, r2
 8016cfc:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 8016d00:	f8d7 1420 	ldr.w	r1, [r7, #1056]	; 0x420
 8016d04:	fba2 1201 	umull	r1, r2, r2, r1
 8016d08:	f8c7 256c 	str.w	r2, [r7, #1388]	; 0x56c
 8016d0c:	460a      	mov	r2, r1
 8016d0e:	f8c7 2568 	str.w	r2, [r7, #1384]	; 0x568
 8016d12:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8016d16:	4413      	add	r3, r2
 8016d18:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8016d1c:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 8016d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d24:	f8d7 1568 	ldr.w	r1, [r7, #1384]	; 0x568
 8016d28:	1851      	adds	r1, r2, r1
 8016d2a:	f8c7 11a0 	str.w	r1, [r7, #416]	; 0x1a0
 8016d2e:	f8d7 156c 	ldr.w	r1, [r7, #1388]	; 0x56c
 8016d32:	414b      	adcs	r3, r1
 8016d34:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8016d38:	e9d7 3468 	ldrd	r3, r4, [r7, #416]	; 0x1a0
 8016d3c:	f507 62f7 	add.w	r2, r7, #1976	; 0x7b8
 8016d40:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8016d44:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 8016d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d4c:	2b00      	cmp	r3, #0
 8016d4e:	da0a      	bge.n	8016d66 <arm_softmax_s8+0x1d46>
 8016d50:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016d54:	1851      	adds	r1, r2, r1
 8016d56:	f8c7 1198 	str.w	r1, [r7, #408]	; 0x198
 8016d5a:	f143 0300 	adc.w	r3, r3, #0
 8016d5e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8016d62:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 8016d66:	f04f 0000 	mov.w	r0, #0
 8016d6a:	f04f 0100 	mov.w	r1, #0
 8016d6e:	0fd0      	lsrs	r0, r2, #31
 8016d70:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8016d74:	17d9      	asrs	r1, r3, #31
 8016d76:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016d7a:	f5a3 72f4 	sub.w	r2, r3, #488	; 0x1e8
 8016d7e:	4603      	mov	r3, r0
 8016d80:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8016d82:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016d86:	f5a3 72f0 	sub.w	r2, r3, #480	; 0x1e0
 8016d8a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016d8e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8016d92:	6812      	ldr	r2, [r2, #0]
 8016d94:	681b      	ldr	r3, [r3, #0]
 8016d96:	429a      	cmp	r2, r3
 8016d98:	d10e      	bne.n	8016db8 <arm_softmax_s8+0x1d98>
 8016d9a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016d9e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8016da2:	681b      	ldr	r3, [r3, #0]
 8016da4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8016da8:	d106      	bne.n	8016db8 <arm_softmax_s8+0x1d98>
        result = Q31_MAX;
 8016daa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016dae:	f5a3 72f4 	sub.w	r2, r3, #488	; 0x1e8
 8016db2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8016db6:	6013      	str	r3, [r2, #0]
    return result;
 8016db8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016dbc:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8016dc0:	681a      	ldr	r2, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 8016dc2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016dc6:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8016dca:	681b      	ldr	r3, [r3, #0]
 8016dcc:	1a99      	subs	r1, r3, r2
 8016dce:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016dd2:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 8016dd6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016dda:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8016dde:	681b      	ldr	r3, [r3, #0]
 8016de0:	6013      	str	r3, [r2, #0]
 8016de2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016de6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8016dea:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 8016dec:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016df0:	f5a3 72fe 	sub.w	r2, r3, #508	; 0x1fc
 8016df4:	2300      	movs	r3, #0
 8016df6:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8016df8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8016dfc:	f04f 0300 	mov.w	r3, #0
 8016e00:	f507 61f4 	add.w	r1, r7, #1952	; 0x7a0
 8016e04:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8016e08:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016e0c:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8016e10:	681b      	ldr	r3, [r3, #0]
 8016e12:	0fdb      	lsrs	r3, r3, #31
 8016e14:	b2da      	uxtb	r2, r3
 8016e16:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016e1a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8016e1e:	681b      	ldr	r3, [r3, #0]
 8016e20:	0fdb      	lsrs	r3, r3, #31
 8016e22:	b2db      	uxtb	r3, r3
 8016e24:	4053      	eors	r3, r2
 8016e26:	b2db      	uxtb	r3, r3
 8016e28:	2b00      	cmp	r3, #0
 8016e2a:	d012      	beq.n	8016e52 <arm_softmax_s8+0x1e32>
        mult = 1 - mult;
 8016e2c:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 8016e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e34:	2100      	movs	r1, #0
 8016e36:	f1d2 0001 	rsbs	r0, r2, #1
 8016e3a:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
 8016e3e:	eb61 0303 	sbc.w	r3, r1, r3
 8016e42:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8016e46:	e9d7 3464 	ldrd	r3, r4, [r7, #400]	; 0x190
 8016e4a:	f507 62f4 	add.w	r2, r7, #1952	; 0x7a0
 8016e4e:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8016e52:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016e56:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8016e5a:	681b      	ldr	r3, [r3, #0]
 8016e5c:	17da      	asrs	r2, r3, #31
 8016e5e:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
 8016e62:	f8c7 241c 	str.w	r2, [r7, #1052]	; 0x41c
 8016e66:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016e6a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8016e6e:	681b      	ldr	r3, [r3, #0]
 8016e70:	17da      	asrs	r2, r3, #31
 8016e72:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
 8016e76:	f8c7 2414 	str.w	r2, [r7, #1044]	; 0x414
 8016e7a:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8016e7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016e82:	460b      	mov	r3, r1
 8016e84:	f8d7 2410 	ldr.w	r2, [r7, #1040]	; 0x410
 8016e88:	fb02 f203 	mul.w	r2, r2, r3
 8016e8c:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8016e90:	f507 6483 	add.w	r4, r7, #1048	; 0x418
 8016e94:	e9c4 0100 	strd	r0, r1, [r4]
 8016e98:	4601      	mov	r1, r0
 8016e9a:	fb01 f303 	mul.w	r3, r1, r3
 8016e9e:	4413      	add	r3, r2
 8016ea0:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
 8016ea4:	f8d7 1410 	ldr.w	r1, [r7, #1040]	; 0x410
 8016ea8:	fba2 1201 	umull	r1, r2, r2, r1
 8016eac:	f8c7 2564 	str.w	r2, [r7, #1380]	; 0x564
 8016eb0:	460a      	mov	r2, r1
 8016eb2:	f8c7 2560 	str.w	r2, [r7, #1376]	; 0x560
 8016eb6:	f8d7 2564 	ldr.w	r2, [r7, #1380]	; 0x564
 8016eba:	4413      	add	r3, r2
 8016ebc:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
 8016ec0:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 8016ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ec8:	f8d7 1560 	ldr.w	r1, [r7, #1376]	; 0x560
 8016ecc:	1851      	adds	r1, r2, r1
 8016ece:	f8c7 1188 	str.w	r1, [r7, #392]	; 0x188
 8016ed2:	f8d7 1564 	ldr.w	r1, [r7, #1380]	; 0x564
 8016ed6:	414b      	adcs	r3, r1
 8016ed8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8016edc:	e9d7 3462 	ldrd	r3, r4, [r7, #392]	; 0x188
 8016ee0:	f507 62f4 	add.w	r2, r7, #1952	; 0x7a0
 8016ee4:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8016ee8:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 8016eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ef0:	2b00      	cmp	r3, #0
 8016ef2:	da0a      	bge.n	8016f0a <arm_softmax_s8+0x1eea>
 8016ef4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016ef8:	1851      	adds	r1, r2, r1
 8016efa:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
 8016efe:	f143 0300 	adc.w	r3, r3, #0
 8016f02:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8016f06:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 8016f0a:	f04f 0000 	mov.w	r0, #0
 8016f0e:	f04f 0100 	mov.w	r1, #0
 8016f12:	0fd0      	lsrs	r0, r2, #31
 8016f14:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8016f18:	17d9      	asrs	r1, r3, #31
 8016f1a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016f1e:	f5a3 72fe 	sub.w	r2, r3, #508	; 0x1fc
 8016f22:	4603      	mov	r3, r0
 8016f24:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8016f26:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016f2a:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 8016f2e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016f32:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8016f36:	6812      	ldr	r2, [r2, #0]
 8016f38:	681b      	ldr	r3, [r3, #0]
 8016f3a:	429a      	cmp	r2, r3
 8016f3c:	d10e      	bne.n	8016f5c <arm_softmax_s8+0x1f3c>
 8016f3e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016f42:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8016f46:	681b      	ldr	r3, [r3, #0]
 8016f48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8016f4c:	d106      	bne.n	8016f5c <arm_softmax_s8+0x1f3c>
        result = Q31_MAX;
 8016f4e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016f52:	f5a3 72fe 	sub.w	r2, r3, #508	; 0x1fc
 8016f56:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8016f5a:	6013      	str	r3, [r2, #0]
    return result;
 8016f5c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016f60:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8016f64:	681a      	ldr	r2, [r3, #0]
 8016f66:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016f6a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8016f6e:	601a      	str	r2, [r3, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 8016f70:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8016f74:	4619      	mov	r1, r3
 8016f76:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016f7a:	f5a3 7204 	sub.w	r2, r3, #528	; 0x210
 8016f7e:	1e4b      	subs	r3, r1, #1
 8016f80:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 8016f82:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016f86:	f5a3 7205 	sub.w	r2, r3, #532	; 0x214
 8016f8a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016f8e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8016f92:	681b      	ldr	r3, [r3, #0]
 8016f94:	009b      	lsls	r3, r3, #2
 8016f96:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 8016f98:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016f9c:	f5a3 7203 	sub.w	r2, r3, #524	; 0x20c
 8016fa0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016fa4:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8016fa8:	6812      	ldr	r2, [r2, #0]
 8016faa:	681b      	ldr	r3, [r3, #0]
 8016fac:	429a      	cmp	r2, r3
 8016fae:	dd02      	ble.n	8016fb6 <arm_softmax_s8+0x1f96>
 8016fb0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8016fb4:	e000      	b.n	8016fb8 <arm_softmax_s8+0x1f98>
 8016fb6:	2000      	movs	r0, #0
 8016fb8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016fbc:	f5a3 7203 	sub.w	r2, r3, #524	; 0x20c
 8016fc0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016fc4:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8016fc8:	6812      	ldr	r2, [r2, #0]
 8016fca:	681b      	ldr	r3, [r3, #0]
 8016fcc:	429a      	cmp	r2, r3
 8016fce:	dd01      	ble.n	8016fd4 <arm_softmax_s8+0x1fb4>
 8016fd0:	2200      	movs	r2, #0
 8016fd2:	e001      	b.n	8016fd8 <arm_softmax_s8+0x1fb8>
 8016fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8016fd8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016fdc:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8016fe0:	681b      	ldr	r3, [r3, #0]
 8016fe2:	ea02 0103 	and.w	r1, r2, r3
 8016fe6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016fea:	f5a3 7205 	sub.w	r2, r3, #532	; 0x214
 8016fee:	ea81 0300 	eor.w	r3, r1, r0
 8016ff2:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 8016ff4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016ff8:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8016ffc:	681b      	ldr	r3, [r3, #0]
 8016ffe:	425a      	negs	r2, r3
 8017000:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017004:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8017008:	681b      	ldr	r3, [r3, #0]
 801700a:	4293      	cmp	r3, r2
 801700c:	da02      	bge.n	8017014 <arm_softmax_s8+0x1ff4>
 801700e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8017012:	e000      	b.n	8017016 <arm_softmax_s8+0x1ff6>
 8017014:	2000      	movs	r0, #0
 8017016:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801701a:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 801701e:	681b      	ldr	r3, [r3, #0]
 8017020:	425a      	negs	r2, r3
 8017022:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017026:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801702a:	681b      	ldr	r3, [r3, #0]
 801702c:	4293      	cmp	r3, r2
 801702e:	da01      	bge.n	8017034 <arm_softmax_s8+0x2014>
 8017030:	2200      	movs	r2, #0
 8017032:	e001      	b.n	8017038 <arm_softmax_s8+0x2018>
 8017034:	f04f 32ff 	mov.w	r2, #4294967295
 8017038:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801703c:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8017040:	681b      	ldr	r3, [r3, #0]
 8017042:	ea02 0103 	and.w	r1, r2, r3
 8017046:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801704a:	f5a3 7205 	sub.w	r2, r3, #532	; 0x214
 801704e:	ea81 0300 	eor.w	r3, r1, r0
 8017052:	6013      	str	r3, [r2, #0]
    return result;
 8017054:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017058:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 801705c:	6819      	ldr	r1, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 801705e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017062:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 8017066:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801706a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 801706e:	681b      	ldr	r3, [r3, #0]
 8017070:	440b      	add	r3, r1
 8017072:	6013      	str	r3, [r2, #0]
 8017074:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017078:	f5a3 7206 	sub.w	r2, r3, #536	; 0x218
 801707c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017080:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8017084:	681b      	ldr	r3, [r3, #0]
 8017086:	6013      	str	r3, [r2, #0]
 8017088:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801708c:	f5a3 7207 	sub.w	r2, r3, #540	; 0x21c
 8017090:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017094:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8017098:	681b      	ldr	r3, [r3, #0]
 801709a:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801709c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80170a0:	f5a3 7208 	sub.w	r2, r3, #544	; 0x220
 80170a4:	2300      	movs	r3, #0
 80170a6:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80170a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80170ac:	f04f 0300 	mov.w	r3, #0
 80170b0:	f507 61f0 	add.w	r1, r7, #1920	; 0x780
 80170b4:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80170b8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80170bc:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 80170c0:	681b      	ldr	r3, [r3, #0]
 80170c2:	0fdb      	lsrs	r3, r3, #31
 80170c4:	b2da      	uxtb	r2, r3
 80170c6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80170ca:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80170ce:	681b      	ldr	r3, [r3, #0]
 80170d0:	0fdb      	lsrs	r3, r3, #31
 80170d2:	b2db      	uxtb	r3, r3
 80170d4:	4053      	eors	r3, r2
 80170d6:	b2db      	uxtb	r3, r3
 80170d8:	2b00      	cmp	r3, #0
 80170da:	d012      	beq.n	8017102 <arm_softmax_s8+0x20e2>
        mult = 1 - mult;
 80170dc:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 80170e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170e4:	2100      	movs	r1, #0
 80170e6:	f1d2 0001 	rsbs	r0, r2, #1
 80170ea:	f8c7 0178 	str.w	r0, [r7, #376]	; 0x178
 80170ee:	eb61 0303 	sbc.w	r3, r1, r3
 80170f2:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80170f6:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 80170fa:	f507 62f0 	add.w	r2, r7, #1920	; 0x780
 80170fe:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8017102:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017106:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 801710a:	681b      	ldr	r3, [r3, #0]
 801710c:	17da      	asrs	r2, r3, #31
 801710e:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
 8017112:	f8c7 240c 	str.w	r2, [r7, #1036]	; 0x40c
 8017116:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801711a:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 801711e:	681b      	ldr	r3, [r3, #0]
 8017120:	17da      	asrs	r2, r3, #31
 8017122:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
 8017126:	f8c7 2404 	str.w	r2, [r7, #1028]	; 0x404
 801712a:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 801712e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8017132:	460b      	mov	r3, r1
 8017134:	f8d7 2400 	ldr.w	r2, [r7, #1024]	; 0x400
 8017138:	fb02 f203 	mul.w	r2, r2, r3
 801713c:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8017140:	f507 6481 	add.w	r4, r7, #1032	; 0x408
 8017144:	e9c4 0100 	strd	r0, r1, [r4]
 8017148:	4601      	mov	r1, r0
 801714a:	fb01 f303 	mul.w	r3, r1, r3
 801714e:	4413      	add	r3, r2
 8017150:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
 8017154:	f8d7 1400 	ldr.w	r1, [r7, #1024]	; 0x400
 8017158:	fba2 1201 	umull	r1, r2, r2, r1
 801715c:	f8c7 255c 	str.w	r2, [r7, #1372]	; 0x55c
 8017160:	460a      	mov	r2, r1
 8017162:	f8c7 2558 	str.w	r2, [r7, #1368]	; 0x558
 8017166:	f8d7 255c 	ldr.w	r2, [r7, #1372]	; 0x55c
 801716a:	4413      	add	r3, r2
 801716c:	f8c7 355c 	str.w	r3, [r7, #1372]	; 0x55c
 8017170:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 8017174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017178:	f8d7 1558 	ldr.w	r1, [r7, #1368]	; 0x558
 801717c:	1851      	adds	r1, r2, r1
 801717e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
 8017182:	f8d7 155c 	ldr.w	r1, [r7, #1372]	; 0x55c
 8017186:	414b      	adcs	r3, r1
 8017188:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 801718c:	e9d7 345c 	ldrd	r3, r4, [r7, #368]	; 0x170
 8017190:	f507 62f0 	add.w	r2, r7, #1920	; 0x780
 8017194:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8017198:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 801719c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171a0:	2b00      	cmp	r3, #0
 80171a2:	da0a      	bge.n	80171ba <arm_softmax_s8+0x219a>
 80171a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80171a8:	1851      	adds	r1, r2, r1
 80171aa:	f8c7 1168 	str.w	r1, [r7, #360]	; 0x168
 80171ae:	f143 0300 	adc.w	r3, r3, #0
 80171b2:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80171b6:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 80171ba:	f04f 0000 	mov.w	r0, #0
 80171be:	f04f 0100 	mov.w	r1, #0
 80171c2:	0fd0      	lsrs	r0, r2, #31
 80171c4:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80171c8:	17d9      	asrs	r1, r3, #31
 80171ca:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80171ce:	f5a3 7208 	sub.w	r2, r3, #544	; 0x220
 80171d2:	4603      	mov	r3, r0
 80171d4:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80171d6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80171da:	f5a3 7206 	sub.w	r2, r3, #536	; 0x218
 80171de:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80171e2:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80171e6:	6812      	ldr	r2, [r2, #0]
 80171e8:	681b      	ldr	r3, [r3, #0]
 80171ea:	429a      	cmp	r2, r3
 80171ec:	d10e      	bne.n	801720c <arm_softmax_s8+0x21ec>
 80171ee:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80171f2:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 80171f6:	681b      	ldr	r3, [r3, #0]
 80171f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80171fc:	d106      	bne.n	801720c <arm_softmax_s8+0x21ec>
        result = Q31_MAX;
 80171fe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017202:	f5a3 7208 	sub.w	r2, r3, #544	; 0x220
 8017206:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801720a:	6013      	str	r3, [r2, #0]
    return result;
 801720c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017210:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8017214:	681a      	ldr	r2, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 8017216:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801721a:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 801721e:	681b      	ldr	r3, [r3, #0]
 8017220:	1a99      	subs	r1, r3, r2
 8017222:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017226:	f5a3 720b 	sub.w	r2, r3, #556	; 0x22c
 801722a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801722e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8017232:	681b      	ldr	r3, [r3, #0]
 8017234:	6013      	str	r3, [r2, #0]
 8017236:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801723a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 801723e:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 8017240:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017244:	f5a3 720d 	sub.w	r2, r3, #564	; 0x234
 8017248:	2300      	movs	r3, #0
 801724a:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 801724c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8017250:	f04f 0300 	mov.w	r3, #0
 8017254:	f507 61ed 	add.w	r1, r7, #1896	; 0x768
 8017258:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 801725c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017260:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8017264:	681b      	ldr	r3, [r3, #0]
 8017266:	0fdb      	lsrs	r3, r3, #31
 8017268:	b2da      	uxtb	r2, r3
 801726a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801726e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8017272:	681b      	ldr	r3, [r3, #0]
 8017274:	0fdb      	lsrs	r3, r3, #31
 8017276:	b2db      	uxtb	r3, r3
 8017278:	4053      	eors	r3, r2
 801727a:	b2db      	uxtb	r3, r3
 801727c:	2b00      	cmp	r3, #0
 801727e:	d012      	beq.n	80172a6 <arm_softmax_s8+0x2286>
        mult = 1 - mult;
 8017280:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 8017284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017288:	2100      	movs	r1, #0
 801728a:	f1d2 0001 	rsbs	r0, r2, #1
 801728e:	f8c7 0160 	str.w	r0, [r7, #352]	; 0x160
 8017292:	eb61 0303 	sbc.w	r3, r1, r3
 8017296:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 801729a:	e9d7 3458 	ldrd	r3, r4, [r7, #352]	; 0x160
 801729e:	f507 62ed 	add.w	r2, r7, #1896	; 0x768
 80172a2:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80172a6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80172aa:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80172ae:	681b      	ldr	r3, [r3, #0]
 80172b0:	17da      	asrs	r2, r3, #31
 80172b2:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
 80172b6:	f8c7 23fc 	str.w	r2, [r7, #1020]	; 0x3fc
 80172ba:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80172be:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80172c2:	681b      	ldr	r3, [r3, #0]
 80172c4:	17da      	asrs	r2, r3, #31
 80172c6:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
 80172ca:	f8c7 23f4 	str.w	r2, [r7, #1012]	; 0x3f4
 80172ce:	e9d7 01fe 	ldrd	r0, r1, [r7, #1016]	; 0x3f8
 80172d2:	460b      	mov	r3, r1
 80172d4:	f8d7 23f0 	ldr.w	r2, [r7, #1008]	; 0x3f0
 80172d8:	fb02 f203 	mul.w	r2, r2, r3
 80172dc:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 80172e0:	e9c7 01fe 	strd	r0, r1, [r7, #1016]	; 0x3f8
 80172e4:	4601      	mov	r1, r0
 80172e6:	fb01 f303 	mul.w	r3, r1, r3
 80172ea:	4413      	add	r3, r2
 80172ec:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	; 0x3f8
 80172f0:	f8d7 13f0 	ldr.w	r1, [r7, #1008]	; 0x3f0
 80172f4:	fba2 1201 	umull	r1, r2, r2, r1
 80172f8:	f8c7 2554 	str.w	r2, [r7, #1364]	; 0x554
 80172fc:	460a      	mov	r2, r1
 80172fe:	f8c7 2550 	str.w	r2, [r7, #1360]	; 0x550
 8017302:	f8d7 2554 	ldr.w	r2, [r7, #1364]	; 0x554
 8017306:	4413      	add	r3, r2
 8017308:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
 801730c:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 8017310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017314:	f8d7 1550 	ldr.w	r1, [r7, #1360]	; 0x550
 8017318:	1851      	adds	r1, r2, r1
 801731a:	f8c7 1158 	str.w	r1, [r7, #344]	; 0x158
 801731e:	f8d7 1554 	ldr.w	r1, [r7, #1364]	; 0x554
 8017322:	414b      	adcs	r3, r1
 8017324:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8017328:	e9d7 3456 	ldrd	r3, r4, [r7, #344]	; 0x158
 801732c:	f507 62ed 	add.w	r2, r7, #1896	; 0x768
 8017330:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8017334:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 8017338:	e9d3 2300 	ldrd	r2, r3, [r3]
 801733c:	2b00      	cmp	r3, #0
 801733e:	da0a      	bge.n	8017356 <arm_softmax_s8+0x2336>
 8017340:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017344:	1851      	adds	r1, r2, r1
 8017346:	f8c7 1150 	str.w	r1, [r7, #336]	; 0x150
 801734a:	f143 0300 	adc.w	r3, r3, #0
 801734e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8017352:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8017356:	f04f 0000 	mov.w	r0, #0
 801735a:	f04f 0100 	mov.w	r1, #0
 801735e:	0fd0      	lsrs	r0, r2, #31
 8017360:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8017364:	17d9      	asrs	r1, r3, #31
 8017366:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801736a:	f5a3 720d 	sub.w	r2, r3, #564	; 0x234
 801736e:	4603      	mov	r3, r0
 8017370:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8017372:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017376:	f5a3 720b 	sub.w	r2, r3, #556	; 0x22c
 801737a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801737e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8017382:	6812      	ldr	r2, [r2, #0]
 8017384:	681b      	ldr	r3, [r3, #0]
 8017386:	429a      	cmp	r2, r3
 8017388:	d10e      	bne.n	80173a8 <arm_softmax_s8+0x2388>
 801738a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801738e:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8017392:	681b      	ldr	r3, [r3, #0]
 8017394:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8017398:	d106      	bne.n	80173a8 <arm_softmax_s8+0x2388>
        result = Q31_MAX;
 801739a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801739e:	f5a3 720d 	sub.w	r2, r3, #564	; 0x234
 80173a2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80173a6:	6013      	str	r3, [r2, #0]
    return result;
 80173a8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80173ac:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 80173b0:	681a      	ldr	r2, [r3, #0]
 80173b2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80173b6:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80173ba:	601a      	str	r2, [r3, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 80173bc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80173c0:	4619      	mov	r1, r3
 80173c2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80173c6:	f5a3 7212 	sub.w	r2, r3, #584	; 0x248
 80173ca:	1e4b      	subs	r3, r1, #1
 80173cc:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 80173ce:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80173d2:	f5a3 7213 	sub.w	r2, r3, #588	; 0x24c
 80173d6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80173da:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80173de:	681b      	ldr	r3, [r3, #0]
 80173e0:	009b      	lsls	r3, r3, #2
 80173e2:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 80173e4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80173e8:	f5a3 7211 	sub.w	r2, r3, #580	; 0x244
 80173ec:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80173f0:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80173f4:	6812      	ldr	r2, [r2, #0]
 80173f6:	681b      	ldr	r3, [r3, #0]
 80173f8:	429a      	cmp	r2, r3
 80173fa:	dd02      	ble.n	8017402 <arm_softmax_s8+0x23e2>
 80173fc:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8017400:	e000      	b.n	8017404 <arm_softmax_s8+0x23e4>
 8017402:	2000      	movs	r0, #0
 8017404:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017408:	f5a3 7211 	sub.w	r2, r3, #580	; 0x244
 801740c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017410:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8017414:	6812      	ldr	r2, [r2, #0]
 8017416:	681b      	ldr	r3, [r3, #0]
 8017418:	429a      	cmp	r2, r3
 801741a:	dd01      	ble.n	8017420 <arm_softmax_s8+0x2400>
 801741c:	2200      	movs	r2, #0
 801741e:	e001      	b.n	8017424 <arm_softmax_s8+0x2404>
 8017420:	f04f 32ff 	mov.w	r2, #4294967295
 8017424:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017428:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 801742c:	681b      	ldr	r3, [r3, #0]
 801742e:	ea02 0103 	and.w	r1, r2, r3
 8017432:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017436:	f5a3 7213 	sub.w	r2, r3, #588	; 0x24c
 801743a:	ea81 0300 	eor.w	r3, r1, r0
 801743e:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 8017440:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017444:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8017448:	681b      	ldr	r3, [r3, #0]
 801744a:	425a      	negs	r2, r3
 801744c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017450:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8017454:	681b      	ldr	r3, [r3, #0]
 8017456:	4293      	cmp	r3, r2
 8017458:	da02      	bge.n	8017460 <arm_softmax_s8+0x2440>
 801745a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 801745e:	e000      	b.n	8017462 <arm_softmax_s8+0x2442>
 8017460:	2000      	movs	r0, #0
 8017462:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017466:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 801746a:	681b      	ldr	r3, [r3, #0]
 801746c:	425a      	negs	r2, r3
 801746e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017472:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8017476:	681b      	ldr	r3, [r3, #0]
 8017478:	4293      	cmp	r3, r2
 801747a:	da05      	bge.n	8017488 <arm_softmax_s8+0x2468>
 801747c:	2200      	movs	r2, #0
 801747e:	e005      	b.n	801748c <arm_softmax_s8+0x246c>
 8017480:	c3c3c3c4 	.word	0xc3c3c3c4
 8017484:	ffffffff 	.word	0xffffffff
 8017488:	f04f 32ff 	mov.w	r2, #4294967295
 801748c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017490:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8017494:	681b      	ldr	r3, [r3, #0]
 8017496:	ea02 0103 	and.w	r1, r2, r3
 801749a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801749e:	f5a3 7213 	sub.w	r2, r3, #588	; 0x24c
 80174a2:	ea81 0300 	eor.w	r3, r1, r0
 80174a6:	6013      	str	r3, [r2, #0]
    return result;
 80174a8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80174ac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80174b0:	6819      	ldr	r1, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 80174b2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80174b6:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 80174ba:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80174be:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80174c2:	681b      	ldr	r3, [r3, #0]
 80174c4:	440b      	add	r3, r1
 80174c6:	6013      	str	r3, [r2, #0]
 80174c8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80174cc:	f5a3 7214 	sub.w	r2, r3, #592	; 0x250
 80174d0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80174d4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80174d8:	681b      	ldr	r3, [r3, #0]
 80174da:	6013      	str	r3, [r2, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 80174dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80174e0:	4619      	mov	r1, r3
 80174e2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80174e6:	f5a3 7215 	sub.w	r2, r3, #596	; 0x254
 80174ea:	1e4b      	subs	r3, r1, #1
 80174ec:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 80174ee:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80174f2:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 80174f6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80174fa:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 80174fe:	681b      	ldr	r3, [r3, #0]
 8017500:	005b      	lsls	r3, r3, #1
 8017502:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 8017504:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017508:	f5a3 7214 	sub.w	r2, r3, #592	; 0x250
 801750c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017510:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8017514:	6812      	ldr	r2, [r2, #0]
 8017516:	681b      	ldr	r3, [r3, #0]
 8017518:	429a      	cmp	r2, r3
 801751a:	dd02      	ble.n	8017522 <arm_softmax_s8+0x2502>
 801751c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8017520:	e000      	b.n	8017524 <arm_softmax_s8+0x2504>
 8017522:	2000      	movs	r0, #0
 8017524:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017528:	f5a3 7214 	sub.w	r2, r3, #592	; 0x250
 801752c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017530:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8017534:	6812      	ldr	r2, [r2, #0]
 8017536:	681b      	ldr	r3, [r3, #0]
 8017538:	429a      	cmp	r2, r3
 801753a:	dd01      	ble.n	8017540 <arm_softmax_s8+0x2520>
 801753c:	2200      	movs	r2, #0
 801753e:	e001      	b.n	8017544 <arm_softmax_s8+0x2524>
 8017540:	f04f 32ff 	mov.w	r2, #4294967295
 8017544:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017548:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 801754c:	681b      	ldr	r3, [r3, #0]
 801754e:	ea02 0103 	and.w	r1, r2, r3
 8017552:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017556:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 801755a:	ea81 0300 	eor.w	r3, r1, r0
 801755e:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 8017560:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017564:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8017568:	681b      	ldr	r3, [r3, #0]
 801756a:	425a      	negs	r2, r3
 801756c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017570:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8017574:	681b      	ldr	r3, [r3, #0]
 8017576:	4293      	cmp	r3, r2
 8017578:	da02      	bge.n	8017580 <arm_softmax_s8+0x2560>
 801757a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 801757e:	e000      	b.n	8017582 <arm_softmax_s8+0x2562>
 8017580:	2000      	movs	r0, #0
 8017582:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017586:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 801758a:	681b      	ldr	r3, [r3, #0]
 801758c:	425a      	negs	r2, r3
 801758e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017592:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8017596:	681b      	ldr	r3, [r3, #0]
 8017598:	4293      	cmp	r3, r2
 801759a:	da01      	bge.n	80175a0 <arm_softmax_s8+0x2580>
 801759c:	2200      	movs	r2, #0
 801759e:	e001      	b.n	80175a4 <arm_softmax_s8+0x2584>
 80175a0:	f04f 32ff 	mov.w	r2, #4294967295
 80175a4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80175a8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80175ac:	681b      	ldr	r3, [r3, #0]
 80175ae:	ea02 0103 	and.w	r1, r2, r3
 80175b2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80175b6:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 80175ba:	ea81 0300 	eor.w	r3, r1, r0
 80175be:	6013      	str	r3, [r2, #0]
    return result;
 80175c0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80175c4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80175c8:	681b      	ldr	r3, [r3, #0]

    return MUL_POW2(x, 1);
 80175ca:	bf00      	nop
 80175cc:	f8c7 3984 	str.w	r3, [r7, #2436]	; 0x984

        for (col = 0; col < row_size; ++col)
 80175d0:	2300      	movs	r3, #0
 80175d2:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 80175d6:	f001 bd85 	b.w	80190e4 <arm_softmax_s8+0x40c4>
        {
            diff = input[col] - max;
 80175da:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 80175de:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80175e2:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 80175e6:	681b      	ldr	r3, [r3, #0]
 80175e8:	4413      	add	r3, r2
 80175ea:	f993 3000 	ldrsb.w	r3, [r3]
 80175ee:	461a      	mov	r2, r3
 80175f0:	f997 399f 	ldrsb.w	r3, [r7, #2463]	; 0x99f
 80175f4:	1ad3      	subs	r3, r2, r3
 80175f6:	f8c7 3990 	str.w	r3, [r7, #2448]	; 0x990
            if (diff >= diff_min)
 80175fa:	f8d7 2990 	ldr.w	r2, [r7, #2448]	; 0x990
 80175fe:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	; 0x9cc
 8017602:	429a      	cmp	r2, r3
 8017604:	f2c1 8562 	blt.w	80190cc <arm_softmax_s8+0x40ac>
            {
                const int32_t res =
                    DIV_POW2(MUL_SAT(shifted_scale, EXP_ON_NEG(MUL_SAT(diff * mask, mult))), bits_over_unit) - 128;
 8017608:	f8d7 2990 	ldr.w	r2, [r7, #2448]	; 0x990
 801760c:	f8d7 3994 	ldr.w	r3, [r7, #2452]	; 0x994
 8017610:	fb03 f202 	mul.w	r2, r3, r2
 8017614:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017618:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 801761c:	601a      	str	r2, [r3, #0]
 801761e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017622:	f5a3 726c 	sub.w	r2, r3, #944	; 0x3b0
 8017626:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801762a:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 801762e:	681b      	ldr	r3, [r3, #0]
 8017630:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8017632:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017636:	f5a3 726d 	sub.w	r2, r3, #948	; 0x3b4
 801763a:	2300      	movs	r3, #0
 801763c:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 801763e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8017642:	f04f 0300 	mov.w	r3, #0
 8017646:	f507 61bd 	add.w	r1, r7, #1512	; 0x5e8
 801764a:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 801764e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017652:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8017656:	681b      	ldr	r3, [r3, #0]
 8017658:	0fdb      	lsrs	r3, r3, #31
 801765a:	b2da      	uxtb	r2, r3
 801765c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017660:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8017664:	681b      	ldr	r3, [r3, #0]
 8017666:	0fdb      	lsrs	r3, r3, #31
 8017668:	b2db      	uxtb	r3, r3
 801766a:	4053      	eors	r3, r2
 801766c:	b2db      	uxtb	r3, r3
 801766e:	2b00      	cmp	r3, #0
 8017670:	d012      	beq.n	8017698 <arm_softmax_s8+0x2678>
        mult = 1 - mult;
 8017672:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 8017676:	e9d3 2300 	ldrd	r2, r3, [r3]
 801767a:	2100      	movs	r1, #0
 801767c:	f1d2 0001 	rsbs	r0, r2, #1
 8017680:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148
 8017684:	eb61 0303 	sbc.w	r3, r1, r3
 8017688:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 801768c:	e9d7 3452 	ldrd	r3, r4, [r7, #328]	; 0x148
 8017690:	f507 62bd 	add.w	r2, r7, #1512	; 0x5e8
 8017694:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8017698:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801769c:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 80176a0:	681b      	ldr	r3, [r3, #0]
 80176a2:	17da      	asrs	r2, r3, #31
 80176a4:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360
 80176a8:	f8c7 2364 	str.w	r2, [r7, #868]	; 0x364
 80176ac:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80176b0:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 80176b4:	681b      	ldr	r3, [r3, #0]
 80176b6:	17da      	asrs	r2, r3, #31
 80176b8:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
 80176bc:	f8c7 235c 	str.w	r2, [r7, #860]	; 0x35c
 80176c0:	e9d7 01d8 	ldrd	r0, r1, [r7, #864]	; 0x360
 80176c4:	460b      	mov	r3, r1
 80176c6:	f8d7 2358 	ldr.w	r2, [r7, #856]	; 0x358
 80176ca:	fb02 f203 	mul.w	r2, r2, r3
 80176ce:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 80176d2:	e9c7 01d8 	strd	r0, r1, [r7, #864]	; 0x360
 80176d6:	4601      	mov	r1, r0
 80176d8:	fb01 f303 	mul.w	r3, r1, r3
 80176dc:	4413      	add	r3, r2
 80176de:	f8d7 2360 	ldr.w	r2, [r7, #864]	; 0x360
 80176e2:	f8d7 1358 	ldr.w	r1, [r7, #856]	; 0x358
 80176e6:	fba2 1201 	umull	r1, r2, r2, r1
 80176ea:	f8c7 24e4 	str.w	r2, [r7, #1252]	; 0x4e4
 80176ee:	460a      	mov	r2, r1
 80176f0:	f8c7 24e0 	str.w	r2, [r7, #1248]	; 0x4e0
 80176f4:	f8d7 24e4 	ldr.w	r2, [r7, #1252]	; 0x4e4
 80176f8:	4413      	add	r3, r2
 80176fa:	f8c7 34e4 	str.w	r3, [r7, #1252]	; 0x4e4
 80176fe:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 8017702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017706:	f8d7 14e0 	ldr.w	r1, [r7, #1248]	; 0x4e0
 801770a:	1851      	adds	r1, r2, r1
 801770c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 8017710:	f8d7 14e4 	ldr.w	r1, [r7, #1252]	; 0x4e4
 8017714:	414b      	adcs	r3, r1
 8017716:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 801771a:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 801771e:	f507 62bd 	add.w	r2, r7, #1512	; 0x5e8
 8017722:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8017726:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 801772a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801772e:	2b00      	cmp	r3, #0
 8017730:	da0a      	bge.n	8017748 <arm_softmax_s8+0x2728>
 8017732:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017736:	1851      	adds	r1, r2, r1
 8017738:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
 801773c:	f143 0300 	adc.w	r3, r3, #0
 8017740:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8017744:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8017748:	f04f 0000 	mov.w	r0, #0
 801774c:	f04f 0100 	mov.w	r1, #0
 8017750:	0fd0      	lsrs	r0, r2, #31
 8017752:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8017756:	17d9      	asrs	r1, r3, #31
 8017758:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801775c:	f5a3 726d 	sub.w	r2, r3, #948	; 0x3b4
 8017760:	4603      	mov	r3, r0
 8017762:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8017764:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017768:	f5a3 726b 	sub.w	r2, r3, #940	; 0x3ac
 801776c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017770:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8017774:	6812      	ldr	r2, [r2, #0]
 8017776:	681b      	ldr	r3, [r3, #0]
 8017778:	429a      	cmp	r2, r3
 801777a:	d10e      	bne.n	801779a <arm_softmax_s8+0x277a>
 801777c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017780:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8017784:	681b      	ldr	r3, [r3, #0]
 8017786:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801778a:	d106      	bne.n	801779a <arm_softmax_s8+0x277a>
        result = Q31_MAX;
 801778c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017790:	f5a3 726d 	sub.w	r2, r3, #948	; 0x3b4
 8017794:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8017798:	6013      	str	r3, [r2, #0]
    return result;
 801779a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801779e:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 80177a2:	681a      	ldr	r2, [r3, #0]
 80177a4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80177a8:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 80177ac:	601a      	str	r2, [r3, #0]
    int32_t mask = 0;
 80177ae:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80177b2:	f5a3 7224 	sub.w	r2, r3, #656	; 0x290
 80177b6:	2300      	movs	r3, #0
 80177b8:	6013      	str	r3, [r2, #0]
    int32_t shift = 24;
 80177ba:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80177be:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 80177c2:	2318      	movs	r3, #24
 80177c4:	6013      	str	r3, [r2, #0]
    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
 80177c6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80177ca:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80177ce:	2201      	movs	r2, #1
 80177d0:	681b      	ldr	r3, [r3, #0]
 80177d2:	fa02 f303 	lsl.w	r3, r2, r3
 80177d6:	1e5a      	subs	r2, r3, #1
 80177d8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80177dc:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 80177e0:	681b      	ldr	r3, [r3, #0]
 80177e2:	ea02 0003 	and.w	r0, r2, r3
 80177e6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80177ea:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80177ee:	2201      	movs	r2, #1
 80177f0:	681b      	ldr	r3, [r3, #0]
 80177f2:	fa02 f103 	lsl.w	r1, r2, r3
 80177f6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80177fa:	f5a3 7226 	sub.w	r2, r3, #664	; 0x298
 80177fe:	1a43      	subs	r3, r0, r1
 8017800:	6013      	str	r3, [r2, #0]
    const int32_t remainder = val_mod_minus_quarter - val;
 8017802:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017806:	f5a3 7127 	sub.w	r1, r3, #668	; 0x29c
 801780a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801780e:	f5a3 7226 	sub.w	r2, r3, #664	; 0x298
 8017812:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017816:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 801781a:	6812      	ldr	r2, [r2, #0]
 801781c:	681b      	ldr	r3, [r3, #0]
 801781e:	1ad3      	subs	r3, r2, r3
 8017820:	600b      	str	r3, [r1, #0]
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
 8017822:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017826:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 801782a:	681b      	ldr	r3, [r3, #0]
 801782c:	0159      	lsls	r1, r3, #5
 801782e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017832:	f5a3 7228 	sub.w	r2, r3, #672	; 0x2a0
 8017836:	f101 5380 	add.w	r3, r1, #268435456	; 0x10000000
 801783a:	6013      	str	r3, [r2, #0]
 801783c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017840:	f5a3 7229 	sub.w	r2, r3, #676	; 0x2a4
 8017844:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017848:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 801784c:	681b      	ldr	r3, [r3, #0]
 801784e:	6013      	str	r3, [r2, #0]
 8017850:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017854:	f5a3 722a 	sub.w	r2, r3, #680	; 0x2a8
 8017858:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801785c:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8017860:	681b      	ldr	r3, [r3, #0]
 8017862:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8017864:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017868:	f5a3 722b 	sub.w	r2, r3, #684	; 0x2ac
 801786c:	2300      	movs	r3, #0
 801786e:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8017870:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8017874:	f04f 0300 	mov.w	r3, #0
 8017878:	f507 61de 	add.w	r1, r7, #1776	; 0x6f0
 801787c:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8017880:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017884:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8017888:	681b      	ldr	r3, [r3, #0]
 801788a:	0fdb      	lsrs	r3, r3, #31
 801788c:	b2da      	uxtb	r2, r3
 801788e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017892:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 8017896:	681b      	ldr	r3, [r3, #0]
 8017898:	0fdb      	lsrs	r3, r3, #31
 801789a:	b2db      	uxtb	r3, r3
 801789c:	4053      	eors	r3, r2
 801789e:	b2db      	uxtb	r3, r3
 80178a0:	2b00      	cmp	r3, #0
 80178a2:	d012      	beq.n	80178ca <arm_softmax_s8+0x28aa>
        mult = 1 - mult;
 80178a4:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 80178a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178ac:	2100      	movs	r1, #0
 80178ae:	f1d2 0001 	rsbs	r0, r2, #1
 80178b2:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
 80178b6:	eb61 0303 	sbc.w	r3, r1, r3
 80178ba:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80178be:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 80178c2:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 80178c6:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80178ca:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80178ce:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 80178d2:	681b      	ldr	r3, [r3, #0]
 80178d4:	17da      	asrs	r2, r3, #31
 80178d6:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
 80178da:	f8c7 23dc 	str.w	r2, [r7, #988]	; 0x3dc
 80178de:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80178e2:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 80178e6:	681b      	ldr	r3, [r3, #0]
 80178e8:	17da      	asrs	r2, r3, #31
 80178ea:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
 80178ee:	f8c7 23d4 	str.w	r2, [r7, #980]	; 0x3d4
 80178f2:	e9d7 01f6 	ldrd	r0, r1, [r7, #984]	; 0x3d8
 80178f6:	460b      	mov	r3, r1
 80178f8:	f8d7 23d0 	ldr.w	r2, [r7, #976]	; 0x3d0
 80178fc:	fb02 f203 	mul.w	r2, r2, r3
 8017900:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 8017904:	e9c7 01f6 	strd	r0, r1, [r7, #984]	; 0x3d8
 8017908:	4601      	mov	r1, r0
 801790a:	fb01 f303 	mul.w	r3, r1, r3
 801790e:	4413      	add	r3, r2
 8017910:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 8017914:	f8d7 13d0 	ldr.w	r1, [r7, #976]	; 0x3d0
 8017918:	fba2 1201 	umull	r1, r2, r2, r1
 801791c:	f8c7 2544 	str.w	r2, [r7, #1348]	; 0x544
 8017920:	460a      	mov	r2, r1
 8017922:	f8c7 2540 	str.w	r2, [r7, #1344]	; 0x540
 8017926:	f8d7 2544 	ldr.w	r2, [r7, #1348]	; 0x544
 801792a:	4413      	add	r3, r2
 801792c:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
 8017930:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8017934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017938:	f8d7 1540 	ldr.w	r1, [r7, #1344]	; 0x540
 801793c:	1851      	adds	r1, r2, r1
 801793e:	f8c7 1128 	str.w	r1, [r7, #296]	; 0x128
 8017942:	f8d7 1544 	ldr.w	r1, [r7, #1348]	; 0x544
 8017946:	414b      	adcs	r3, r1
 8017948:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801794c:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 8017950:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 8017954:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8017958:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 801795c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017960:	2b00      	cmp	r3, #0
 8017962:	da0a      	bge.n	801797a <arm_softmax_s8+0x295a>
 8017964:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017968:	1851      	adds	r1, r2, r1
 801796a:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 801796e:	f143 0300 	adc.w	r3, r3, #0
 8017972:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8017976:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 801797a:	f04f 0000 	mov.w	r0, #0
 801797e:	f04f 0100 	mov.w	r1, #0
 8017982:	0fd0      	lsrs	r0, r2, #31
 8017984:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8017988:	17d9      	asrs	r1, r3, #31
 801798a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801798e:	f5a3 722b 	sub.w	r2, r3, #684	; 0x2ac
 8017992:	4603      	mov	r3, r0
 8017994:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8017996:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801799a:	f5a3 7229 	sub.w	r2, r3, #676	; 0x2a4
 801799e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80179a2:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 80179a6:	6812      	ldr	r2, [r2, #0]
 80179a8:	681b      	ldr	r3, [r3, #0]
 80179aa:	429a      	cmp	r2, r3
 80179ac:	d10e      	bne.n	80179cc <arm_softmax_s8+0x29ac>
 80179ae:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80179b2:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 80179b6:	681b      	ldr	r3, [r3, #0]
 80179b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80179bc:	d106      	bne.n	80179cc <arm_softmax_s8+0x29ac>
        result = Q31_MAX;
 80179be:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80179c2:	f5a3 722b 	sub.w	r2, r3, #684	; 0x2ac
 80179c6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80179ca:	6013      	str	r3, [r2, #0]
    return result;
 80179cc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80179d0:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 80179d4:	681a      	ldr	r2, [r3, #0]
    const int32_t x2 = MUL_SAT(x, x);
 80179d6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80179da:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 80179de:	601a      	str	r2, [r3, #0]
 80179e0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80179e4:	f5a3 7230 	sub.w	r2, r3, #704	; 0x2c0
 80179e8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80179ec:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 80179f0:	681b      	ldr	r3, [r3, #0]
 80179f2:	6013      	str	r3, [r2, #0]
 80179f4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80179f8:	f5a3 7231 	sub.w	r2, r3, #708	; 0x2c4
 80179fc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017a00:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8017a04:	681b      	ldr	r3, [r3, #0]
 8017a06:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8017a08:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017a0c:	f5a3 7232 	sub.w	r2, r3, #712	; 0x2c8
 8017a10:	2300      	movs	r3, #0
 8017a12:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8017a14:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8017a18:	f04f 0300 	mov.w	r3, #0
 8017a1c:	f507 61db 	add.w	r1, r7, #1752	; 0x6d8
 8017a20:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8017a24:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017a28:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8017a2c:	681b      	ldr	r3, [r3, #0]
 8017a2e:	0fdb      	lsrs	r3, r3, #31
 8017a30:	b2da      	uxtb	r2, r3
 8017a32:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017a36:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8017a3a:	681b      	ldr	r3, [r3, #0]
 8017a3c:	0fdb      	lsrs	r3, r3, #31
 8017a3e:	b2db      	uxtb	r3, r3
 8017a40:	4053      	eors	r3, r2
 8017a42:	b2db      	uxtb	r3, r3
 8017a44:	2b00      	cmp	r3, #0
 8017a46:	d012      	beq.n	8017a6e <arm_softmax_s8+0x2a4e>
        mult = 1 - mult;
 8017a48:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 8017a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a50:	2100      	movs	r1, #0
 8017a52:	f1d2 0001 	rsbs	r0, r2, #1
 8017a56:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
 8017a5a:	eb61 0303 	sbc.w	r3, r1, r3
 8017a5e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8017a62:	e9d7 3446 	ldrd	r3, r4, [r7, #280]	; 0x118
 8017a66:	f507 62db 	add.w	r2, r7, #1752	; 0x6d8
 8017a6a:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8017a6e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017a72:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8017a76:	681b      	ldr	r3, [r3, #0]
 8017a78:	17da      	asrs	r2, r3, #31
 8017a7a:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 8017a7e:	f8c7 23cc 	str.w	r2, [r7, #972]	; 0x3cc
 8017a82:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017a86:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8017a8a:	681b      	ldr	r3, [r3, #0]
 8017a8c:	17da      	asrs	r2, r3, #31
 8017a8e:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
 8017a92:	f8c7 23c4 	str.w	r2, [r7, #964]	; 0x3c4
 8017a96:	e9d7 01f2 	ldrd	r0, r1, [r7, #968]	; 0x3c8
 8017a9a:	460b      	mov	r3, r1
 8017a9c:	f8d7 23c0 	ldr.w	r2, [r7, #960]	; 0x3c0
 8017aa0:	fb02 f203 	mul.w	r2, r2, r3
 8017aa4:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 8017aa8:	e9c7 01f2 	strd	r0, r1, [r7, #968]	; 0x3c8
 8017aac:	4601      	mov	r1, r0
 8017aae:	fb01 f303 	mul.w	r3, r1, r3
 8017ab2:	4413      	add	r3, r2
 8017ab4:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8017ab8:	f8d7 13c0 	ldr.w	r1, [r7, #960]	; 0x3c0
 8017abc:	fba2 1201 	umull	r1, r2, r2, r1
 8017ac0:	f8c7 253c 	str.w	r2, [r7, #1340]	; 0x53c
 8017ac4:	460a      	mov	r2, r1
 8017ac6:	f8c7 2538 	str.w	r2, [r7, #1336]	; 0x538
 8017aca:	f8d7 253c 	ldr.w	r2, [r7, #1340]	; 0x53c
 8017ace:	4413      	add	r3, r2
 8017ad0:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
 8017ad4:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 8017ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017adc:	f8d7 1538 	ldr.w	r1, [r7, #1336]	; 0x538
 8017ae0:	1851      	adds	r1, r2, r1
 8017ae2:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 8017ae6:	f8d7 153c 	ldr.w	r1, [r7, #1340]	; 0x53c
 8017aea:	414b      	adcs	r3, r1
 8017aec:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8017af0:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8017af4:	f507 62db 	add.w	r2, r7, #1752	; 0x6d8
 8017af8:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8017afc:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 8017b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017b04:	2b00      	cmp	r3, #0
 8017b06:	da0a      	bge.n	8017b1e <arm_softmax_s8+0x2afe>
 8017b08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017b0c:	1851      	adds	r1, r2, r1
 8017b0e:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 8017b12:	f143 0300 	adc.w	r3, r3, #0
 8017b16:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8017b1a:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 8017b1e:	f04f 0000 	mov.w	r0, #0
 8017b22:	f04f 0100 	mov.w	r1, #0
 8017b26:	0fd0      	lsrs	r0, r2, #31
 8017b28:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8017b2c:	17d9      	asrs	r1, r3, #31
 8017b2e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017b32:	f5a3 7232 	sub.w	r2, r3, #712	; 0x2c8
 8017b36:	4603      	mov	r3, r0
 8017b38:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8017b3a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017b3e:	f5a3 7230 	sub.w	r2, r3, #704	; 0x2c0
 8017b42:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017b46:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8017b4a:	6812      	ldr	r2, [r2, #0]
 8017b4c:	681b      	ldr	r3, [r3, #0]
 8017b4e:	429a      	cmp	r2, r3
 8017b50:	d10e      	bne.n	8017b70 <arm_softmax_s8+0x2b50>
 8017b52:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017b56:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8017b5a:	681b      	ldr	r3, [r3, #0]
 8017b5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8017b60:	d106      	bne.n	8017b70 <arm_softmax_s8+0x2b50>
        result = Q31_MAX;
 8017b62:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017b66:	f5a3 7232 	sub.w	r2, r3, #712	; 0x2c8
 8017b6a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8017b6e:	6013      	str	r3, [r2, #0]
    return result;
 8017b70:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017b74:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8017b78:	681a      	ldr	r2, [r3, #0]
 8017b7a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017b7e:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8017b82:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8017b84:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017b88:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 8017b8c:	2300      	movs	r3, #0
 8017b8e:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8017b90:	2104      	movs	r1, #4
 8017b92:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017b96:	f5a3 7237 	sub.w	r2, r3, #732	; 0x2dc
 8017b9a:	1e4b      	subs	r3, r1, #1
 8017b9c:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8017b9e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017ba2:	f5a3 7138 	sub.w	r1, r3, #736	; 0x2e0
 8017ba6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017baa:	f5a3 7235 	sub.w	r2, r3, #724	; 0x2d4
 8017bae:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017bb2:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8017bb6:	6812      	ldr	r2, [r2, #0]
 8017bb8:	681b      	ldr	r3, [r3, #0]
 8017bba:	4013      	ands	r3, r2
 8017bbc:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8017bbe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017bc2:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 8017bc6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017bca:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8017bce:	681b      	ldr	r3, [r3, #0]
 8017bd0:	109b      	asrs	r3, r3, #2
 8017bd2:	6013      	str	r3, [r2, #0]
    q31_t threshold = remainder_mask >> 1;
 8017bd4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017bd8:	f5a3 7239 	sub.w	r2, r3, #740	; 0x2e4
 8017bdc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017be0:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8017be4:	681b      	ldr	r3, [r3, #0]
 8017be6:	105b      	asrs	r3, r3, #1
 8017be8:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8017bea:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017bee:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8017bf2:	681b      	ldr	r3, [r3, #0]
 8017bf4:	2b00      	cmp	r3, #0
 8017bf6:	da0a      	bge.n	8017c0e <arm_softmax_s8+0x2bee>
        threshold++;
 8017bf8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017bfc:	f5a3 7239 	sub.w	r2, r3, #740	; 0x2e4
 8017c00:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017c04:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8017c08:	681b      	ldr	r3, [r3, #0]
 8017c0a:	3301      	adds	r3, #1
 8017c0c:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8017c0e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017c12:	f5a3 7238 	sub.w	r2, r3, #736	; 0x2e0
 8017c16:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017c1a:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8017c1e:	6812      	ldr	r2, [r2, #0]
 8017c20:	681b      	ldr	r3, [r3, #0]
 8017c22:	429a      	cmp	r2, r3
 8017c24:	dd0a      	ble.n	8017c3c <arm_softmax_s8+0x2c1c>
        result++;
 8017c26:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017c2a:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 8017c2e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017c32:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8017c36:	681b      	ldr	r3, [r3, #0]
 8017c38:	3301      	adds	r3, #1
 8017c3a:	6013      	str	r3, [r2, #0]
    return result;
 8017c3c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017c40:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8017c44:	681c      	ldr	r4, [r3, #0]
 8017c46:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017c4a:	f5a3 723a 	sub.w	r2, r3, #744	; 0x2e8
 8017c4e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017c52:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8017c56:	681b      	ldr	r3, [r3, #0]
 8017c58:	6013      	str	r3, [r2, #0]
 8017c5a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017c5e:	f5a3 723b 	sub.w	r2, r3, #748	; 0x2ec
 8017c62:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017c66:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8017c6a:	681b      	ldr	r3, [r3, #0]
 8017c6c:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8017c6e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017c72:	f5a3 723c 	sub.w	r2, r3, #752	; 0x2f0
 8017c76:	2300      	movs	r3, #0
 8017c78:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8017c7a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8017c7e:	f04f 0300 	mov.w	r3, #0
 8017c82:	f507 61d6 	add.w	r1, r7, #1712	; 0x6b0
 8017c86:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8017c8a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017c8e:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8017c92:	681b      	ldr	r3, [r3, #0]
 8017c94:	0fdb      	lsrs	r3, r3, #31
 8017c96:	b2da      	uxtb	r2, r3
 8017c98:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017c9c:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8017ca0:	681b      	ldr	r3, [r3, #0]
 8017ca2:	0fdb      	lsrs	r3, r3, #31
 8017ca4:	b2db      	uxtb	r3, r3
 8017ca6:	4053      	eors	r3, r2
 8017ca8:	b2db      	uxtb	r3, r3
 8017caa:	2b00      	cmp	r3, #0
 8017cac:	d012      	beq.n	8017cd4 <arm_softmax_s8+0x2cb4>
        mult = 1 - mult;
 8017cae:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 8017cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017cb6:	2100      	movs	r1, #0
 8017cb8:	f1d2 0001 	rsbs	r0, r2, #1
 8017cbc:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
 8017cc0:	eb61 0303 	sbc.w	r3, r1, r3
 8017cc4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8017cc8:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8017ccc:	f507 61d6 	add.w	r1, r7, #1712	; 0x6b0
 8017cd0:	e9c1 2300 	strd	r2, r3, [r1]
    mult = mult + (q63_t)m1 * m2;
 8017cd4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017cd8:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8017cdc:	681b      	ldr	r3, [r3, #0]
 8017cde:	17da      	asrs	r2, r3, #31
 8017ce0:	f8c7 33b8 	str.w	r3, [r7, #952]	; 0x3b8
 8017ce4:	f8c7 23bc 	str.w	r2, [r7, #956]	; 0x3bc
 8017ce8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017cec:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8017cf0:	681b      	ldr	r3, [r3, #0]
 8017cf2:	17da      	asrs	r2, r3, #31
 8017cf4:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
 8017cf8:	f8c7 23b4 	str.w	r2, [r7, #948]	; 0x3b4
 8017cfc:	e9d7 01ee 	ldrd	r0, r1, [r7, #952]	; 0x3b8
 8017d00:	460b      	mov	r3, r1
 8017d02:	f8d7 23b0 	ldr.w	r2, [r7, #944]	; 0x3b0
 8017d06:	fb02 f203 	mul.w	r2, r2, r3
 8017d0a:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 8017d0e:	e9c7 01ee 	strd	r0, r1, [r7, #952]	; 0x3b8
 8017d12:	4601      	mov	r1, r0
 8017d14:	fb01 f303 	mul.w	r3, r1, r3
 8017d18:	4413      	add	r3, r2
 8017d1a:	f8d7 23b8 	ldr.w	r2, [r7, #952]	; 0x3b8
 8017d1e:	f8d7 13b0 	ldr.w	r1, [r7, #944]	; 0x3b0
 8017d22:	fba2 1201 	umull	r1, r2, r2, r1
 8017d26:	f8c7 2534 	str.w	r2, [r7, #1332]	; 0x534
 8017d2a:	460a      	mov	r2, r1
 8017d2c:	f8c7 2530 	str.w	r2, [r7, #1328]	; 0x530
 8017d30:	f8d7 2534 	ldr.w	r2, [r7, #1332]	; 0x534
 8017d34:	4413      	add	r3, r2
 8017d36:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
 8017d3a:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 8017d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d42:	f8d7 1530 	ldr.w	r1, [r7, #1328]	; 0x530
 8017d46:	1851      	adds	r1, r2, r1
 8017d48:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8017d4c:	f8d7 1534 	ldr.w	r1, [r7, #1332]	; 0x534
 8017d50:	414b      	adcs	r3, r1
 8017d52:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8017d56:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 8017d5a:	f507 61d6 	add.w	r1, r7, #1712	; 0x6b0
 8017d5e:	e9c1 2300 	strd	r2, r3, [r1]
    result = (int32_t)(mult / (1ll << 31));
 8017d62:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 8017d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d6a:	2b00      	cmp	r3, #0
 8017d6c:	da0a      	bge.n	8017d84 <arm_softmax_s8+0x2d64>
 8017d6e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017d72:	1851      	adds	r1, r2, r1
 8017d74:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 8017d78:	f143 0300 	adc.w	r3, r3, #0
 8017d7c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8017d80:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8017d84:	f04f 0000 	mov.w	r0, #0
 8017d88:	f04f 0100 	mov.w	r1, #0
 8017d8c:	0fd0      	lsrs	r0, r2, #31
 8017d8e:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8017d92:	17d9      	asrs	r1, r3, #31
 8017d94:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017d98:	f5a3 723c 	sub.w	r2, r3, #752	; 0x2f0
 8017d9c:	4603      	mov	r3, r0
 8017d9e:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8017da0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017da4:	f5a3 723a 	sub.w	r2, r3, #744	; 0x2e8
 8017da8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017dac:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8017db0:	6812      	ldr	r2, [r2, #0]
 8017db2:	681b      	ldr	r3, [r3, #0]
 8017db4:	429a      	cmp	r2, r3
 8017db6:	d10e      	bne.n	8017dd6 <arm_softmax_s8+0x2db6>
 8017db8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017dbc:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8017dc0:	681b      	ldr	r3, [r3, #0]
 8017dc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8017dc6:	d106      	bne.n	8017dd6 <arm_softmax_s8+0x2db6>
        result = Q31_MAX;
 8017dc8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017dcc:	f5a3 723c 	sub.w	r2, r3, #752	; 0x2f0
 8017dd0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8017dd4:	6013      	str	r3, [r2, #0]
    return result;
 8017dd6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017dda:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8017dde:	681b      	ldr	r3, [r3, #0]
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 8017de0:	18e2      	adds	r2, r4, r3
 8017de2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017de6:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 8017dea:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8017dec:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017df0:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 8017df4:	2300      	movs	r3, #0
 8017df6:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8017df8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8017dfc:	f04f 0300 	mov.w	r3, #0
 8017e00:	f507 61d4 	add.w	r1, r7, #1696	; 0x6a0
 8017e04:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8017e08:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017e0c:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 8017e10:	681b      	ldr	r3, [r3, #0]
 8017e12:	0fdb      	lsrs	r3, r3, #31
 8017e14:	b2da      	uxtb	r2, r3
 8017e16:	2300      	movs	r3, #0
 8017e18:	4053      	eors	r3, r2
 8017e1a:	b2db      	uxtb	r3, r3
 8017e1c:	2b00      	cmp	r3, #0
 8017e1e:	d012      	beq.n	8017e46 <arm_softmax_s8+0x2e26>
        mult = 1 - mult;
 8017e20:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8017e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e28:	2100      	movs	r1, #0
 8017e2a:	f1d2 0001 	rsbs	r0, r2, #1
 8017e2e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
 8017e32:	eb61 0303 	sbc.w	r3, r1, r3
 8017e36:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8017e3a:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 8017e3e:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 8017e42:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8017e46:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017e4a:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 8017e4e:	681b      	ldr	r3, [r3, #0]
 8017e50:	17da      	asrs	r2, r3, #31
 8017e52:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8
 8017e56:	f8c7 23ac 	str.w	r2, [r7, #940]	; 0x3ac
 8017e5a:	a3c9      	add	r3, pc, #804	; (adr r3, 8018180 <arm_softmax_s8+0x3160>)
 8017e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e60:	f8d7 13ac 	ldr.w	r1, [r7, #940]	; 0x3ac
 8017e64:	fb02 f001 	mul.w	r0, r2, r1
 8017e68:	f8d7 13a8 	ldr.w	r1, [r7, #936]	; 0x3a8
 8017e6c:	fb01 f103 	mul.w	r1, r1, r3
 8017e70:	4401      	add	r1, r0
 8017e72:	f8d7 03a8 	ldr.w	r0, [r7, #936]	; 0x3a8
 8017e76:	fba0 2302 	umull	r2, r3, r0, r2
 8017e7a:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
 8017e7e:	4613      	mov	r3, r2
 8017e80:	f8c7 3528 	str.w	r3, [r7, #1320]	; 0x528
 8017e84:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 8017e88:	18cb      	adds	r3, r1, r3
 8017e8a:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
 8017e8e:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8017e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e96:	f8d7 1528 	ldr.w	r1, [r7, #1320]	; 0x528
 8017e9a:	1851      	adds	r1, r2, r1
 8017e9c:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 8017ea0:	f8d7 152c 	ldr.w	r1, [r7, #1324]	; 0x52c
 8017ea4:	414b      	adcs	r3, r1
 8017ea6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8017eaa:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8017eae:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 8017eb2:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8017eb6:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8017eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ebe:	2b00      	cmp	r3, #0
 8017ec0:	da0a      	bge.n	8017ed8 <arm_softmax_s8+0x2eb8>
 8017ec2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017ec6:	1851      	adds	r1, r2, r1
 8017ec8:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8017ecc:	f143 0300 	adc.w	r3, r3, #0
 8017ed0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8017ed4:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8017ed8:	f04f 0000 	mov.w	r0, #0
 8017edc:	f04f 0100 	mov.w	r1, #0
 8017ee0:	0fd0      	lsrs	r0, r2, #31
 8017ee2:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8017ee6:	17d9      	asrs	r1, r3, #31
 8017ee8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017eec:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 8017ef0:	4603      	mov	r3, r0
 8017ef2:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8017ef4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017ef8:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 8017efc:	681a      	ldr	r2, [r3, #0]
 8017efe:	4b9e      	ldr	r3, [pc, #632]	; (8018178 <arm_softmax_s8+0x3158>)
 8017f00:	429a      	cmp	r2, r3
 8017f02:	d10e      	bne.n	8017f22 <arm_softmax_s8+0x2f02>
 8017f04:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017f08:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 8017f0c:	681b      	ldr	r3, [r3, #0]
 8017f0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8017f12:	d106      	bne.n	8017f22 <arm_softmax_s8+0x2f02>
        result = Q31_MAX;
 8017f14:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017f18:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 8017f1c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8017f20:	6013      	str	r3, [r2, #0]
    return result;
 8017f22:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017f26:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 8017f2a:	681a      	ldr	r2, [r3, #0]
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 8017f2c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017f30:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8017f34:	681b      	ldr	r3, [r3, #0]
 8017f36:	441a      	add	r2, r3
 8017f38:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017f3c:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8017f40:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8017f42:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017f46:	f5a3 7244 	sub.w	r2, r3, #784	; 0x310
 8017f4a:	2300      	movs	r3, #0
 8017f4c:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8017f4e:	2102      	movs	r1, #2
 8017f50:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017f54:	f5a3 7245 	sub.w	r2, r3, #788	; 0x314
 8017f58:	1e4b      	subs	r3, r1, #1
 8017f5a:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8017f5c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017f60:	f5a3 7146 	sub.w	r1, r3, #792	; 0x318
 8017f64:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017f68:	f5a3 7243 	sub.w	r2, r3, #780	; 0x30c
 8017f6c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017f70:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8017f74:	6812      	ldr	r2, [r2, #0]
 8017f76:	681b      	ldr	r3, [r3, #0]
 8017f78:	4013      	ands	r3, r2
 8017f7a:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8017f7c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017f80:	f5a3 7244 	sub.w	r2, r3, #784	; 0x310
 8017f84:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017f88:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8017f8c:	681b      	ldr	r3, [r3, #0]
 8017f8e:	105b      	asrs	r3, r3, #1
 8017f90:	6013      	str	r3, [r2, #0]
    q31_t threshold = remainder_mask >> 1;
 8017f92:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017f96:	f5a3 7247 	sub.w	r2, r3, #796	; 0x31c
 8017f9a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017f9e:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8017fa2:	681b      	ldr	r3, [r3, #0]
 8017fa4:	105b      	asrs	r3, r3, #1
 8017fa6:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8017fa8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017fac:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8017fb0:	681b      	ldr	r3, [r3, #0]
 8017fb2:	2b00      	cmp	r3, #0
 8017fb4:	da0a      	bge.n	8017fcc <arm_softmax_s8+0x2fac>
        threshold++;
 8017fb6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017fba:	f5a3 7247 	sub.w	r2, r3, #796	; 0x31c
 8017fbe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017fc2:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8017fc6:	681b      	ldr	r3, [r3, #0]
 8017fc8:	3301      	adds	r3, #1
 8017fca:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8017fcc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017fd0:	f5a3 7246 	sub.w	r2, r3, #792	; 0x318
 8017fd4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017fd8:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8017fdc:	6812      	ldr	r2, [r2, #0]
 8017fde:	681b      	ldr	r3, [r3, #0]
 8017fe0:	429a      	cmp	r2, r3
 8017fe2:	dd0a      	ble.n	8017ffa <arm_softmax_s8+0x2fda>
        result++;
 8017fe4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017fe8:	f5a3 7244 	sub.w	r2, r3, #784	; 0x310
 8017fec:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017ff0:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8017ff4:	681b      	ldr	r3, [r3, #0]
 8017ff6:	3301      	adds	r3, #1
 8017ff8:	6013      	str	r3, [r2, #0]
    return result;
 8017ffa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017ffe:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8018002:	681a      	ldr	r2, [r3, #0]
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 8018004:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018008:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 801800c:	681b      	ldr	r3, [r3, #0]
 801800e:	441a      	add	r2, r3
 8018010:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018014:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8018018:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801801a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801801e:	f5a3 7249 	sub.w	r2, r3, #804	; 0x324
 8018022:	2300      	movs	r3, #0
 8018024:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8018026:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801802a:	f04f 0300 	mov.w	r3, #0
 801802e:	f507 61cf 	add.w	r1, r7, #1656	; 0x678
 8018032:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8018036:	2200      	movs	r2, #0
 8018038:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801803c:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8018040:	681b      	ldr	r3, [r3, #0]
 8018042:	0fdb      	lsrs	r3, r3, #31
 8018044:	b2db      	uxtb	r3, r3
 8018046:	4053      	eors	r3, r2
 8018048:	b2db      	uxtb	r3, r3
 801804a:	2b00      	cmp	r3, #0
 801804c:	d012      	beq.n	8018074 <arm_softmax_s8+0x3054>
        mult = 1 - mult;
 801804e:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8018052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018056:	2100      	movs	r1, #0
 8018058:	f1d2 0001 	rsbs	r0, r2, #1
 801805c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
 8018060:	eb61 0303 	sbc.w	r3, r1, r3
 8018064:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8018068:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 801806c:	f507 62cf 	add.w	r2, r7, #1656	; 0x678
 8018070:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8018074:	a13e      	add	r1, pc, #248	; (adr r1, 8018170 <arm_softmax_s8+0x3150>)
 8018076:	e9d1 0100 	ldrd	r0, r1, [r1]
 801807a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801807e:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8018082:	681b      	ldr	r3, [r3, #0]
 8018084:	17da      	asrs	r2, r3, #31
 8018086:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0
 801808a:	f8c7 23a4 	str.w	r2, [r7, #932]	; 0x3a4
 801808e:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8018092:	fb03 f201 	mul.w	r2, r3, r1
 8018096:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 801809a:	fb00 f303 	mul.w	r3, r0, r3
 801809e:	4413      	add	r3, r2
 80180a0:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 80180a4:	fba0 1202 	umull	r1, r2, r0, r2
 80180a8:	f8c7 2524 	str.w	r2, [r7, #1316]	; 0x524
 80180ac:	460a      	mov	r2, r1
 80180ae:	f8c7 2520 	str.w	r2, [r7, #1312]	; 0x520
 80180b2:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 80180b6:	4413      	add	r3, r2
 80180b8:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
 80180bc:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80180c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180c4:	f8d7 1520 	ldr.w	r1, [r7, #1312]	; 0x520
 80180c8:	1851      	adds	r1, r2, r1
 80180ca:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 80180ce:	f8d7 1524 	ldr.w	r1, [r7, #1316]	; 0x524
 80180d2:	414b      	adcs	r3, r1
 80180d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80180d8:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 80180dc:	f507 62cf 	add.w	r2, r7, #1656	; 0x678
 80180e0:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80180e4:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80180e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180ec:	2b00      	cmp	r3, #0
 80180ee:	da0a      	bge.n	8018106 <arm_softmax_s8+0x30e6>
 80180f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80180f4:	1851      	adds	r1, r2, r1
 80180f6:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80180fa:	f143 0300 	adc.w	r3, r3, #0
 80180fe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8018102:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8018106:	f04f 0000 	mov.w	r0, #0
 801810a:	f04f 0100 	mov.w	r1, #0
 801810e:	0fd0      	lsrs	r0, r2, #31
 8018110:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8018114:	17d9      	asrs	r1, r3, #31
 8018116:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801811a:	f5a3 7249 	sub.w	r2, r3, #804	; 0x324
 801811e:	4603      	mov	r3, r0
 8018120:	6013      	str	r3, [r2, #0]
    return result;
 8018122:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018126:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 801812a:	6819      	ldr	r1, [r3, #0]
    int32_t result = 1895147668 +
 801812c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018130:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8018134:	4b11      	ldr	r3, [pc, #68]	; (801817c <arm_softmax_s8+0x315c>)
 8018136:	440b      	add	r3, r1
 8018138:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(1672461947)
 801813a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801813e:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8018142:	6819      	ldr	r1, [r3, #0]
 8018144:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018148:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 801814c:	1c4b      	adds	r3, r1, #1
 801814e:	6013      	str	r3, [r2, #0]
 8018150:	2301      	movs	r3, #1
 8018152:	fa03 f201 	lsl.w	r2, r3, r1
 8018156:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801815a:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 801815e:	681b      	ldr	r3, [r3, #0]
 8018160:	4013      	ands	r3, r2
 8018162:	2b00      	cmp	r3, #0
 8018164:	d010      	beq.n	8018188 <arm_softmax_s8+0x3168>
 8018166:	f04f 32ff 	mov.w	r2, #4294967295
 801816a:	e00e      	b.n	801818a <arm_softmax_s8+0x316a>
 801816c:	f3af 8000 	nop.w
 8018170:	70f5a894 	.word	0x70f5a894
 8018174:	00000000 	.word	0x00000000
 8018178:	2aaaaaab 	.word	0x2aaaaaab
 801817c:	70f5a894 	.word	0x70f5a894
 8018180:	2aaaaaab 	.word	0x2aaaaaab
 8018184:	00000000 	.word	0x00000000
 8018188:	2200      	movs	r2, #0
 801818a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801818e:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8018192:	601a      	str	r2, [r3, #0]
 8018194:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018198:	f5a3 724e 	sub.w	r2, r3, #824	; 0x338
 801819c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80181a0:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80181a4:	681b      	ldr	r3, [r3, #0]
 80181a6:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80181a8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80181ac:	f5a3 724f 	sub.w	r2, r3, #828	; 0x33c
 80181b0:	2300      	movs	r3, #0
 80181b2:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80181b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80181b8:	f04f 0300 	mov.w	r3, #0
 80181bc:	f507 61cc 	add.w	r1, r7, #1632	; 0x660
 80181c0:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80181c4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80181c8:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 80181cc:	681b      	ldr	r3, [r3, #0]
 80181ce:	0fdb      	lsrs	r3, r3, #31
 80181d0:	b2da      	uxtb	r2, r3
 80181d2:	2300      	movs	r3, #0
 80181d4:	4053      	eors	r3, r2
 80181d6:	b2db      	uxtb	r3, r3
 80181d8:	2b00      	cmp	r3, #0
 80181da:	d012      	beq.n	8018202 <arm_softmax_s8+0x31e2>
        mult = 1 - mult;
 80181dc:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 80181e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80181e4:	2100      	movs	r1, #0
 80181e6:	f1d2 0001 	rsbs	r0, r2, #1
 80181ea:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
 80181ee:	eb61 0303 	sbc.w	r3, r1, r3
 80181f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80181f6:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 80181fa:	f507 62cc 	add.w	r2, r7, #1632	; 0x660
 80181fe:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8018202:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018206:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 801820a:	681b      	ldr	r3, [r3, #0]
 801820c:	17da      	asrs	r2, r3, #31
 801820e:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398
 8018212:	f8c7 239c 	str.w	r2, [r7, #924]	; 0x39c
 8018216:	a3c4      	add	r3, pc, #784	; (adr r3, 8018528 <arm_softmax_s8+0x3508>)
 8018218:	e9d3 2300 	ldrd	r2, r3, [r3]
 801821c:	f8d7 139c 	ldr.w	r1, [r7, #924]	; 0x39c
 8018220:	fb02 f001 	mul.w	r0, r2, r1
 8018224:	f8d7 1398 	ldr.w	r1, [r7, #920]	; 0x398
 8018228:	fb01 f103 	mul.w	r1, r1, r3
 801822c:	4401      	add	r1, r0
 801822e:	f8d7 0398 	ldr.w	r0, [r7, #920]	; 0x398
 8018232:	fba0 2302 	umull	r2, r3, r0, r2
 8018236:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
 801823a:	4613      	mov	r3, r2
 801823c:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
 8018240:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 8018244:	18cb      	adds	r3, r1, r3
 8018246:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
 801824a:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 801824e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018252:	f8d7 1518 	ldr.w	r1, [r7, #1304]	; 0x518
 8018256:	1851      	adds	r1, r2, r1
 8018258:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 801825c:	f8d7 151c 	ldr.w	r1, [r7, #1308]	; 0x51c
 8018260:	414b      	adcs	r3, r1
 8018262:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8018266:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 801826a:	f507 62cc 	add.w	r2, r7, #1632	; 0x660
 801826e:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8018272:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 8018276:	e9d3 2300 	ldrd	r2, r3, [r3]
 801827a:	2b00      	cmp	r3, #0
 801827c:	da0a      	bge.n	8018294 <arm_softmax_s8+0x3274>
 801827e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8018282:	1851      	adds	r1, r2, r1
 8018284:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 8018288:	f143 0300 	adc.w	r3, r3, #0
 801828c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8018290:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8018294:	f04f 0000 	mov.w	r0, #0
 8018298:	f04f 0100 	mov.w	r1, #0
 801829c:	0fd0      	lsrs	r0, r2, #31
 801829e:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80182a2:	17d9      	asrs	r1, r3, #31
 80182a4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80182a8:	f5a3 724f 	sub.w	r2, r3, #828	; 0x33c
 80182ac:	4603      	mov	r3, r0
 80182ae:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80182b0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80182b4:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 80182b8:	681a      	ldr	r2, [r3, #0]
 80182ba:	4b99      	ldr	r3, [pc, #612]	; (8018520 <arm_softmax_s8+0x3500>)
 80182bc:	429a      	cmp	r2, r3
 80182be:	d10e      	bne.n	80182de <arm_softmax_s8+0x32be>
 80182c0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80182c4:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 80182c8:	681b      	ldr	r3, [r3, #0]
 80182ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80182ce:	d106      	bne.n	80182de <arm_softmax_s8+0x32be>
        result = Q31_MAX;
 80182d0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80182d4:	f5a3 724f 	sub.w	r2, r3, #828	; 0x33c
 80182d8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80182dc:	6013      	str	r3, [r2, #0]
    return result;
 80182de:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80182e2:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 80182e6:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(1672461947)
 80182e8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80182ec:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80182f0:	681b      	ldr	r3, [r3, #0]
 80182f2:	ea02 0003 	and.w	r0, r2, r3
 80182f6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80182fa:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80182fe:	681b      	ldr	r3, [r3, #0]
 8018300:	43da      	mvns	r2, r3
 8018302:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018306:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 801830a:	681b      	ldr	r3, [r3, #0]
 801830c:	ea02 0103 	and.w	r1, r2, r3
 8018310:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018314:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8018318:	ea80 0301 	eor.w	r3, r0, r1
 801831c:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(1302514674)
 801831e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018322:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8018326:	6819      	ldr	r1, [r3, #0]
 8018328:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801832c:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8018330:	1c4b      	adds	r3, r1, #1
 8018332:	6013      	str	r3, [r2, #0]
 8018334:	2301      	movs	r3, #1
 8018336:	fa03 f201 	lsl.w	r2, r3, r1
 801833a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801833e:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8018342:	681b      	ldr	r3, [r3, #0]
 8018344:	4013      	ands	r3, r2
 8018346:	2b00      	cmp	r3, #0
 8018348:	d002      	beq.n	8018350 <arm_softmax_s8+0x3330>
 801834a:	f04f 32ff 	mov.w	r2, #4294967295
 801834e:	e000      	b.n	8018352 <arm_softmax_s8+0x3332>
 8018350:	2200      	movs	r2, #0
 8018352:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018356:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801835a:	601a      	str	r2, [r3, #0]
 801835c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018360:	f5a3 7253 	sub.w	r2, r3, #844	; 0x34c
 8018364:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018368:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 801836c:	681b      	ldr	r3, [r3, #0]
 801836e:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8018370:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018374:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 8018378:	2300      	movs	r3, #0
 801837a:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 801837c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8018380:	f04f 0300 	mov.w	r3, #0
 8018384:	f507 61ca 	add.w	r1, r7, #1616	; 0x650
 8018388:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 801838c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018390:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8018394:	681b      	ldr	r3, [r3, #0]
 8018396:	0fdb      	lsrs	r3, r3, #31
 8018398:	b2da      	uxtb	r2, r3
 801839a:	2300      	movs	r3, #0
 801839c:	4053      	eors	r3, r2
 801839e:	b2db      	uxtb	r3, r3
 80183a0:	2b00      	cmp	r3, #0
 80183a2:	d012      	beq.n	80183ca <arm_softmax_s8+0x33aa>
        mult = 1 - mult;
 80183a4:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 80183a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80183ac:	2100      	movs	r1, #0
 80183ae:	f1d2 0001 	rsbs	r0, r2, #1
 80183b2:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
 80183b6:	eb61 0303 	sbc.w	r3, r1, r3
 80183ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80183be:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 80183c2:	f507 62ca 	add.w	r2, r7, #1616	; 0x650
 80183c6:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80183ca:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80183ce:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 80183d2:	681b      	ldr	r3, [r3, #0]
 80183d4:	17da      	asrs	r2, r3, #31
 80183d6:	f8c7 3390 	str.w	r3, [r7, #912]	; 0x390
 80183da:	f8c7 2394 	str.w	r2, [r7, #916]	; 0x394
 80183de:	a34e      	add	r3, pc, #312	; (adr r3, 8018518 <arm_softmax_s8+0x34f8>)
 80183e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80183e4:	f8d7 1394 	ldr.w	r1, [r7, #916]	; 0x394
 80183e8:	fb02 f001 	mul.w	r0, r2, r1
 80183ec:	f8d7 1390 	ldr.w	r1, [r7, #912]	; 0x390
 80183f0:	fb01 f103 	mul.w	r1, r1, r3
 80183f4:	4401      	add	r1, r0
 80183f6:	f8d7 0390 	ldr.w	r0, [r7, #912]	; 0x390
 80183fa:	fba0 2302 	umull	r2, r3, r0, r2
 80183fe:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
 8018402:	4613      	mov	r3, r2
 8018404:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
 8018408:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 801840c:	18cb      	adds	r3, r1, r3
 801840e:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
 8018412:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8018416:	e9d3 2300 	ldrd	r2, r3, [r3]
 801841a:	f8d7 1510 	ldr.w	r1, [r7, #1296]	; 0x510
 801841e:	1851      	adds	r1, r2, r1
 8018420:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8018424:	f8d7 1514 	ldr.w	r1, [r7, #1300]	; 0x514
 8018428:	414b      	adcs	r3, r1
 801842a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801842e:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8018432:	f507 62ca 	add.w	r2, r7, #1616	; 0x650
 8018436:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 801843a:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 801843e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018442:	2b00      	cmp	r3, #0
 8018444:	da0a      	bge.n	801845c <arm_softmax_s8+0x343c>
 8018446:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801844a:	1851      	adds	r1, r2, r1
 801844c:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 8018450:	f143 0300 	adc.w	r3, r3, #0
 8018454:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8018458:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 801845c:	f04f 0000 	mov.w	r0, #0
 8018460:	f04f 0100 	mov.w	r1, #0
 8018464:	0fd0      	lsrs	r0, r2, #31
 8018466:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801846a:	17d9      	asrs	r1, r3, #31
 801846c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018470:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 8018474:	4603      	mov	r3, r0
 8018476:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8018478:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801847c:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8018480:	681a      	ldr	r2, [r3, #0]
 8018482:	4b28      	ldr	r3, [pc, #160]	; (8018524 <arm_softmax_s8+0x3504>)
 8018484:	429a      	cmp	r2, r3
 8018486:	d10e      	bne.n	80184a6 <arm_softmax_s8+0x3486>
 8018488:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801848c:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8018490:	681b      	ldr	r3, [r3, #0]
 8018492:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8018496:	d106      	bne.n	80184a6 <arm_softmax_s8+0x3486>
        result = Q31_MAX;
 8018498:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801849c:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 80184a0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80184a4:	6013      	str	r3, [r2, #0]
    return result;
 80184a6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80184aa:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 80184ae:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(1302514674)
 80184b0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80184b4:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80184b8:	681b      	ldr	r3, [r3, #0]
 80184ba:	ea02 0003 	and.w	r0, r2, r3
 80184be:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80184c2:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80184c6:	681b      	ldr	r3, [r3, #0]
 80184c8:	43da      	mvns	r2, r3
 80184ca:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80184ce:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80184d2:	681b      	ldr	r3, [r3, #0]
 80184d4:	ea02 0103 	and.w	r1, r2, r3
 80184d8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80184dc:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 80184e0:	ea80 0301 	eor.w	r3, r0, r1
 80184e4:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(790015084)
 80184e6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80184ea:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80184ee:	6819      	ldr	r1, [r3, #0]
 80184f0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80184f4:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 80184f8:	1c4b      	adds	r3, r1, #1
 80184fa:	6013      	str	r3, [r2, #0]
 80184fc:	2301      	movs	r3, #1
 80184fe:	fa03 f201 	lsl.w	r2, r3, r1
 8018502:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018506:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 801850a:	681b      	ldr	r3, [r3, #0]
 801850c:	4013      	ands	r3, r2
 801850e:	2b00      	cmp	r3, #0
 8018510:	d00e      	beq.n	8018530 <arm_softmax_s8+0x3510>
 8018512:	f04f 32ff 	mov.w	r2, #4294967295
 8018516:	e00c      	b.n	8018532 <arm_softmax_s8+0x3512>
 8018518:	4da2cbf2 	.word	0x4da2cbf2
 801851c:	00000000 	.word	0x00000000
 8018520:	63afbe7b 	.word	0x63afbe7b
 8018524:	4da2cbf2 	.word	0x4da2cbf2
 8018528:	63afbe7b 	.word	0x63afbe7b
 801852c:	00000000 	.word	0x00000000
 8018530:	2200      	movs	r2, #0
 8018532:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018536:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801853a:	601a      	str	r2, [r3, #0]
 801853c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018540:	f5a3 7257 	sub.w	r2, r3, #860	; 0x35c
 8018544:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018548:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 801854c:	681b      	ldr	r3, [r3, #0]
 801854e:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8018550:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018554:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 8018558:	2300      	movs	r3, #0
 801855a:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 801855c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8018560:	f04f 0300 	mov.w	r3, #0
 8018564:	f507 61c8 	add.w	r1, r7, #1600	; 0x640
 8018568:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 801856c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018570:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 8018574:	681b      	ldr	r3, [r3, #0]
 8018576:	0fdb      	lsrs	r3, r3, #31
 8018578:	b2da      	uxtb	r2, r3
 801857a:	2300      	movs	r3, #0
 801857c:	4053      	eors	r3, r2
 801857e:	b2db      	uxtb	r3, r3
 8018580:	2b00      	cmp	r3, #0
 8018582:	d012      	beq.n	80185aa <arm_softmax_s8+0x358a>
        mult = 1 - mult;
 8018584:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 8018588:	e9d3 2300 	ldrd	r2, r3, [r3]
 801858c:	2100      	movs	r1, #0
 801858e:	f1d2 0001 	rsbs	r0, r2, #1
 8018592:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
 8018596:	eb61 0303 	sbc.w	r3, r1, r3
 801859a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801859e:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 80185a2:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 80185a6:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80185aa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80185ae:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 80185b2:	681b      	ldr	r3, [r3, #0]
 80185b4:	17da      	asrs	r2, r3, #31
 80185b6:	f8c7 3388 	str.w	r3, [r7, #904]	; 0x388
 80185ba:	f8c7 238c 	str.w	r2, [r7, #908]	; 0x38c
 80185be:	a3c0      	add	r3, pc, #768	; (adr r3, 80188c0 <arm_softmax_s8+0x38a0>)
 80185c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80185c4:	f8d7 138c 	ldr.w	r1, [r7, #908]	; 0x38c
 80185c8:	fb02 f001 	mul.w	r0, r2, r1
 80185cc:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 80185d0:	fb01 f103 	mul.w	r1, r1, r3
 80185d4:	4401      	add	r1, r0
 80185d6:	f8d7 0388 	ldr.w	r0, [r7, #904]	; 0x388
 80185da:	fba0 2302 	umull	r2, r3, r0, r2
 80185de:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 80185e2:	4613      	mov	r3, r2
 80185e4:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
 80185e8:	f8d7 350c 	ldr.w	r3, [r7, #1292]	; 0x50c
 80185ec:	18cb      	adds	r3, r1, r3
 80185ee:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 80185f2:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 80185f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80185fa:	f8d7 1508 	ldr.w	r1, [r7, #1288]	; 0x508
 80185fe:	1851      	adds	r1, r2, r1
 8018600:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8018604:	f8d7 150c 	ldr.w	r1, [r7, #1292]	; 0x50c
 8018608:	414b      	adcs	r3, r1
 801860a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801860e:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8018612:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 8018616:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 801861a:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 801861e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018622:	2b00      	cmp	r3, #0
 8018624:	da08      	bge.n	8018638 <arm_softmax_s8+0x3618>
 8018626:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801862a:	1851      	adds	r1, r2, r1
 801862c:	67b9      	str	r1, [r7, #120]	; 0x78
 801862e:	f143 0300 	adc.w	r3, r3, #0
 8018632:	67fb      	str	r3, [r7, #124]	; 0x7c
 8018634:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8018638:	f04f 0000 	mov.w	r0, #0
 801863c:	f04f 0100 	mov.w	r1, #0
 8018640:	0fd0      	lsrs	r0, r2, #31
 8018642:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8018646:	17d9      	asrs	r1, r3, #31
 8018648:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801864c:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 8018650:	4603      	mov	r3, r0
 8018652:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8018654:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018658:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 801865c:	681a      	ldr	r2, [r3, #0]
 801865e:	4b96      	ldr	r3, [pc, #600]	; (80188b8 <arm_softmax_s8+0x3898>)
 8018660:	429a      	cmp	r2, r3
 8018662:	d10e      	bne.n	8018682 <arm_softmax_s8+0x3662>
 8018664:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018668:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 801866c:	681b      	ldr	r3, [r3, #0]
 801866e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8018672:	d106      	bne.n	8018682 <arm_softmax_s8+0x3662>
        result = Q31_MAX;
 8018674:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018678:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 801867c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8018680:	6013      	str	r3, [r2, #0]
    return result;
 8018682:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018686:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 801868a:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(790015084)
 801868c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018690:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8018694:	681b      	ldr	r3, [r3, #0]
 8018696:	ea02 0003 	and.w	r0, r2, r3
 801869a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801869e:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80186a2:	681b      	ldr	r3, [r3, #0]
 80186a4:	43da      	mvns	r2, r3
 80186a6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80186aa:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80186ae:	681b      	ldr	r3, [r3, #0]
 80186b0:	ea02 0103 	and.w	r1, r2, r3
 80186b4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80186b8:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 80186bc:	ea80 0301 	eor.w	r3, r0, r1
 80186c0:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(290630308)
 80186c2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80186c6:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80186ca:	6819      	ldr	r1, [r3, #0]
 80186cc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80186d0:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 80186d4:	1c4b      	adds	r3, r1, #1
 80186d6:	6013      	str	r3, [r2, #0]
 80186d8:	2301      	movs	r3, #1
 80186da:	fa03 f201 	lsl.w	r2, r3, r1
 80186de:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80186e2:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80186e6:	681b      	ldr	r3, [r3, #0]
 80186e8:	4013      	ands	r3, r2
 80186ea:	2b00      	cmp	r3, #0
 80186ec:	d002      	beq.n	80186f4 <arm_softmax_s8+0x36d4>
 80186ee:	f04f 32ff 	mov.w	r2, #4294967295
 80186f2:	e000      	b.n	80186f6 <arm_softmax_s8+0x36d6>
 80186f4:	2200      	movs	r2, #0
 80186f6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80186fa:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80186fe:	601a      	str	r2, [r3, #0]
 8018700:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018704:	f5a3 725b 	sub.w	r2, r3, #876	; 0x36c
 8018708:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801870c:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8018710:	681b      	ldr	r3, [r3, #0]
 8018712:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8018714:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018718:	f5a3 725c 	sub.w	r2, r3, #880	; 0x370
 801871c:	2300      	movs	r3, #0
 801871e:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8018720:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8018724:	f04f 0300 	mov.w	r3, #0
 8018728:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 801872c:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8018730:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018734:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8018738:	681b      	ldr	r3, [r3, #0]
 801873a:	0fdb      	lsrs	r3, r3, #31
 801873c:	b2da      	uxtb	r2, r3
 801873e:	2300      	movs	r3, #0
 8018740:	4053      	eors	r3, r2
 8018742:	b2db      	uxtb	r3, r3
 8018744:	2b00      	cmp	r3, #0
 8018746:	d010      	beq.n	801876a <arm_softmax_s8+0x374a>
        mult = 1 - mult;
 8018748:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801874c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018750:	2100      	movs	r1, #0
 8018752:	f1d2 0001 	rsbs	r0, r2, #1
 8018756:	6738      	str	r0, [r7, #112]	; 0x70
 8018758:	eb61 0303 	sbc.w	r3, r1, r3
 801875c:	677b      	str	r3, [r7, #116]	; 0x74
 801875e:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8018762:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8018766:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801876a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801876e:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8018772:	681b      	ldr	r3, [r3, #0]
 8018774:	17da      	asrs	r2, r3, #31
 8018776:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380
 801877a:	f8c7 2384 	str.w	r2, [r7, #900]	; 0x384
 801877e:	a34c      	add	r3, pc, #304	; (adr r3, 80188b0 <arm_softmax_s8+0x3890>)
 8018780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018784:	f8d7 1384 	ldr.w	r1, [r7, #900]	; 0x384
 8018788:	fb02 f001 	mul.w	r0, r2, r1
 801878c:	f8d7 1380 	ldr.w	r1, [r7, #896]	; 0x380
 8018790:	fb01 f103 	mul.w	r1, r1, r3
 8018794:	4401      	add	r1, r0
 8018796:	f8d7 0380 	ldr.w	r0, [r7, #896]	; 0x380
 801879a:	fba0 2302 	umull	r2, r3, r0, r2
 801879e:	f8c7 3504 	str.w	r3, [r7, #1284]	; 0x504
 80187a2:	4613      	mov	r3, r2
 80187a4:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
 80187a8:	f8d7 3504 	ldr.w	r3, [r7, #1284]	; 0x504
 80187ac:	18cb      	adds	r3, r1, r3
 80187ae:	f8c7 3504 	str.w	r3, [r7, #1284]	; 0x504
 80187b2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80187b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80187ba:	f8d7 1500 	ldr.w	r1, [r7, #1280]	; 0x500
 80187be:	1851      	adds	r1, r2, r1
 80187c0:	66b9      	str	r1, [r7, #104]	; 0x68
 80187c2:	f8d7 1504 	ldr.w	r1, [r7, #1284]	; 0x504
 80187c6:	414b      	adcs	r3, r1
 80187c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80187ca:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80187ce:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80187d2:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80187d6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80187da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80187de:	2b00      	cmp	r3, #0
 80187e0:	da08      	bge.n	80187f4 <arm_softmax_s8+0x37d4>
 80187e2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80187e6:	1851      	adds	r1, r2, r1
 80187e8:	6639      	str	r1, [r7, #96]	; 0x60
 80187ea:	f143 0300 	adc.w	r3, r3, #0
 80187ee:	667b      	str	r3, [r7, #100]	; 0x64
 80187f0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80187f4:	f04f 0000 	mov.w	r0, #0
 80187f8:	f04f 0100 	mov.w	r1, #0
 80187fc:	0fd0      	lsrs	r0, r2, #31
 80187fe:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8018802:	17d9      	asrs	r1, r3, #31
 8018804:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018808:	f5a3 725c 	sub.w	r2, r3, #880	; 0x370
 801880c:	4603      	mov	r3, r0
 801880e:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8018810:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018814:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8018818:	681a      	ldr	r2, [r3, #0]
 801881a:	4b28      	ldr	r3, [pc, #160]	; (80188bc <arm_softmax_s8+0x389c>)
 801881c:	429a      	cmp	r2, r3
 801881e:	d10e      	bne.n	801883e <arm_softmax_s8+0x381e>
 8018820:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018824:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8018828:	681b      	ldr	r3, [r3, #0]
 801882a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801882e:	d106      	bne.n	801883e <arm_softmax_s8+0x381e>
        result = Q31_MAX;
 8018830:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018834:	f5a3 725c 	sub.w	r2, r3, #880	; 0x370
 8018838:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801883c:	6013      	str	r3, [r2, #0]
    return result;
 801883e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018842:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 8018846:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(290630308)
 8018848:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801884c:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8018850:	681b      	ldr	r3, [r3, #0]
 8018852:	ea02 0003 	and.w	r0, r2, r3
 8018856:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801885a:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801885e:	681b      	ldr	r3, [r3, #0]
 8018860:	43da      	mvns	r2, r3
 8018862:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018866:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 801886a:	681b      	ldr	r3, [r3, #0]
 801886c:	ea02 0103 	and.w	r1, r2, r3
 8018870:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018874:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8018878:	ea80 0301 	eor.w	r3, r0, r1
 801887c:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(39332535)
 801887e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018882:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8018886:	6819      	ldr	r1, [r3, #0]
 8018888:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801888c:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8018890:	1c4b      	adds	r3, r1, #1
 8018892:	6013      	str	r3, [r2, #0]
 8018894:	2301      	movs	r3, #1
 8018896:	fa03 f201 	lsl.w	r2, r3, r1
 801889a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801889e:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80188a2:	681b      	ldr	r3, [r3, #0]
 80188a4:	4013      	ands	r3, r2
 80188a6:	2b00      	cmp	r3, #0
 80188a8:	d00e      	beq.n	80188c8 <arm_softmax_s8+0x38a8>
 80188aa:	f04f 32ff 	mov.w	r2, #4294967295
 80188ae:	e00c      	b.n	80188ca <arm_softmax_s8+0x38aa>
 80188b0:	1152aaa4 	.word	0x1152aaa4
 80188b4:	00000000 	.word	0x00000000
 80188b8:	2f16ac6c 	.word	0x2f16ac6c
 80188bc:	1152aaa4 	.word	0x1152aaa4
 80188c0:	2f16ac6c 	.word	0x2f16ac6c
 80188c4:	00000000 	.word	0x00000000
 80188c8:	2200      	movs	r2, #0
 80188ca:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80188ce:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80188d2:	601a      	str	r2, [r3, #0]
 80188d4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80188d8:	f5a3 725f 	sub.w	r2, r3, #892	; 0x37c
 80188dc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80188e0:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80188e4:	681b      	ldr	r3, [r3, #0]
 80188e6:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80188e8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80188ec:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 80188f0:	2300      	movs	r3, #0
 80188f2:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80188f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80188f8:	f04f 0300 	mov.w	r3, #0
 80188fc:	f507 61c4 	add.w	r1, r7, #1568	; 0x620
 8018900:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8018904:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018908:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 801890c:	681b      	ldr	r3, [r3, #0]
 801890e:	0fdb      	lsrs	r3, r3, #31
 8018910:	b2da      	uxtb	r2, r3
 8018912:	2300      	movs	r3, #0
 8018914:	4053      	eors	r3, r2
 8018916:	b2db      	uxtb	r3, r3
 8018918:	2b00      	cmp	r3, #0
 801891a:	d010      	beq.n	801893e <arm_softmax_s8+0x391e>
        mult = 1 - mult;
 801891c:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 8018920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018924:	2100      	movs	r1, #0
 8018926:	f1d2 0001 	rsbs	r0, r2, #1
 801892a:	65b8      	str	r0, [r7, #88]	; 0x58
 801892c:	eb61 0303 	sbc.w	r3, r1, r3
 8018930:	65fb      	str	r3, [r7, #92]	; 0x5c
 8018932:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8018936:	f507 62c4 	add.w	r2, r7, #1568	; 0x620
 801893a:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801893e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018942:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8018946:	681b      	ldr	r3, [r3, #0]
 8018948:	17da      	asrs	r2, r3, #31
 801894a:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
 801894e:	f8c7 237c 	str.w	r2, [r7, #892]	; 0x37c
 8018952:	a3bd      	add	r3, pc, #756	; (adr r3, 8018c48 <arm_softmax_s8+0x3c28>)
 8018954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018958:	f8d7 137c 	ldr.w	r1, [r7, #892]	; 0x37c
 801895c:	fb02 f001 	mul.w	r0, r2, r1
 8018960:	f8d7 1378 	ldr.w	r1, [r7, #888]	; 0x378
 8018964:	fb01 f103 	mul.w	r1, r1, r3
 8018968:	4401      	add	r1, r0
 801896a:	f8d7 0378 	ldr.w	r0, [r7, #888]	; 0x378
 801896e:	fba0 2302 	umull	r2, r3, r0, r2
 8018972:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc
 8018976:	4613      	mov	r3, r2
 8018978:	f8c7 34f8 	str.w	r3, [r7, #1272]	; 0x4f8
 801897c:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	; 0x4fc
 8018980:	18cb      	adds	r3, r1, r3
 8018982:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc
 8018986:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 801898a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801898e:	f8d7 14f8 	ldr.w	r1, [r7, #1272]	; 0x4f8
 8018992:	1851      	adds	r1, r2, r1
 8018994:	6539      	str	r1, [r7, #80]	; 0x50
 8018996:	f8d7 14fc 	ldr.w	r1, [r7, #1276]	; 0x4fc
 801899a:	414b      	adcs	r3, r1
 801899c:	657b      	str	r3, [r7, #84]	; 0x54
 801899e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 80189a2:	f507 62c4 	add.w	r2, r7, #1568	; 0x620
 80189a6:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80189aa:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 80189ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80189b2:	2b00      	cmp	r3, #0
 80189b4:	da08      	bge.n	80189c8 <arm_softmax_s8+0x39a8>
 80189b6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80189ba:	1851      	adds	r1, r2, r1
 80189bc:	64b9      	str	r1, [r7, #72]	; 0x48
 80189be:	f143 0300 	adc.w	r3, r3, #0
 80189c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80189c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80189c8:	f04f 0000 	mov.w	r0, #0
 80189cc:	f04f 0100 	mov.w	r1, #0
 80189d0:	0fd0      	lsrs	r0, r2, #31
 80189d2:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80189d6:	17d9      	asrs	r1, r3, #31
 80189d8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80189dc:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 80189e0:	4603      	mov	r3, r0
 80189e2:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80189e4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80189e8:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 80189ec:	681a      	ldr	r2, [r3, #0]
 80189ee:	4b94      	ldr	r3, [pc, #592]	; (8018c40 <arm_softmax_s8+0x3c20>)
 80189f0:	429a      	cmp	r2, r3
 80189f2:	d10e      	bne.n	8018a12 <arm_softmax_s8+0x39f2>
 80189f4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80189f8:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 80189fc:	681b      	ldr	r3, [r3, #0]
 80189fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8018a02:	d106      	bne.n	8018a12 <arm_softmax_s8+0x39f2>
        result = Q31_MAX;
 8018a04:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018a08:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 8018a0c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8018a10:	6013      	str	r3, [r2, #0]
    return result;
 8018a12:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018a16:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8018a1a:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(39332535)
 8018a1c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018a20:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8018a24:	681b      	ldr	r3, [r3, #0]
 8018a26:	ea02 0003 	and.w	r0, r2, r3
 8018a2a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018a2e:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8018a32:	681b      	ldr	r3, [r3, #0]
 8018a34:	43da      	mvns	r2, r3
 8018a36:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018a3a:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8018a3e:	681b      	ldr	r3, [r3, #0]
 8018a40:	ea02 0103 	and.w	r1, r2, r3
 8018a44:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018a48:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8018a4c:	ea80 0301 	eor.w	r3, r0, r1
 8018a50:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(720401)
 8018a52:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018a56:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8018a5a:	6819      	ldr	r1, [r3, #0]
 8018a5c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018a60:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8018a64:	1c4b      	adds	r3, r1, #1
 8018a66:	6013      	str	r3, [r2, #0]
 8018a68:	2301      	movs	r3, #1
 8018a6a:	fa03 f201 	lsl.w	r2, r3, r1
 8018a6e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018a72:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8018a76:	681b      	ldr	r3, [r3, #0]
 8018a78:	4013      	ands	r3, r2
 8018a7a:	2b00      	cmp	r3, #0
 8018a7c:	d002      	beq.n	8018a84 <arm_softmax_s8+0x3a64>
 8018a7e:	f04f 32ff 	mov.w	r2, #4294967295
 8018a82:	e000      	b.n	8018a86 <arm_softmax_s8+0x3a66>
 8018a84:	2200      	movs	r2, #0
 8018a86:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018a8a:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8018a8e:	601a      	str	r2, [r3, #0]
 8018a90:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018a94:	f5a3 7263 	sub.w	r2, r3, #908	; 0x38c
 8018a98:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018a9c:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8018aa0:	681b      	ldr	r3, [r3, #0]
 8018aa2:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8018aa4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018aa8:	f5a3 7264 	sub.w	r2, r3, #912	; 0x390
 8018aac:	2300      	movs	r3, #0
 8018aae:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8018ab0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8018ab4:	f04f 0300 	mov.w	r3, #0
 8018ab8:	f507 61c2 	add.w	r1, r7, #1552	; 0x610
 8018abc:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8018ac0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018ac4:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 8018ac8:	681b      	ldr	r3, [r3, #0]
 8018aca:	0fdb      	lsrs	r3, r3, #31
 8018acc:	b2da      	uxtb	r2, r3
 8018ace:	2300      	movs	r3, #0
 8018ad0:	4053      	eors	r3, r2
 8018ad2:	b2db      	uxtb	r3, r3
 8018ad4:	2b00      	cmp	r3, #0
 8018ad6:	d010      	beq.n	8018afa <arm_softmax_s8+0x3ada>
        mult = 1 - mult;
 8018ad8:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 8018adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ae0:	2100      	movs	r1, #0
 8018ae2:	f1d2 0001 	rsbs	r0, r2, #1
 8018ae6:	6438      	str	r0, [r7, #64]	; 0x40
 8018ae8:	eb61 0303 	sbc.w	r3, r1, r3
 8018aec:	647b      	str	r3, [r7, #68]	; 0x44
 8018aee:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8018af2:	f507 62c2 	add.w	r2, r7, #1552	; 0x610
 8018af6:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8018afa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018afe:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 8018b02:	681b      	ldr	r3, [r3, #0]
 8018b04:	17da      	asrs	r2, r3, #31
 8018b06:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
 8018b0a:	f8c7 2374 	str.w	r2, [r7, #884]	; 0x374
 8018b0e:	4a4d      	ldr	r2, [pc, #308]	; (8018c44 <arm_softmax_s8+0x3c24>)
 8018b10:	f04f 0300 	mov.w	r3, #0
 8018b14:	f8d7 1374 	ldr.w	r1, [r7, #884]	; 0x374
 8018b18:	fb02 f001 	mul.w	r0, r2, r1
 8018b1c:	f8d7 1370 	ldr.w	r1, [r7, #880]	; 0x370
 8018b20:	fb01 f103 	mul.w	r1, r1, r3
 8018b24:	4401      	add	r1, r0
 8018b26:	f8d7 0370 	ldr.w	r0, [r7, #880]	; 0x370
 8018b2a:	fba0 2302 	umull	r2, r3, r0, r2
 8018b2e:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4
 8018b32:	4613      	mov	r3, r2
 8018b34:	f8c7 34f0 	str.w	r3, [r7, #1264]	; 0x4f0
 8018b38:	f8d7 34f4 	ldr.w	r3, [r7, #1268]	; 0x4f4
 8018b3c:	18cb      	adds	r3, r1, r3
 8018b3e:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4
 8018b42:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 8018b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b4a:	f8d7 14f0 	ldr.w	r1, [r7, #1264]	; 0x4f0
 8018b4e:	1851      	adds	r1, r2, r1
 8018b50:	63b9      	str	r1, [r7, #56]	; 0x38
 8018b52:	f8d7 14f4 	ldr.w	r1, [r7, #1268]	; 0x4f4
 8018b56:	414b      	adcs	r3, r1
 8018b58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8018b5a:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8018b5e:	f507 62c2 	add.w	r2, r7, #1552	; 0x610
 8018b62:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8018b66:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 8018b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b6e:	2b00      	cmp	r3, #0
 8018b70:	da08      	bge.n	8018b84 <arm_softmax_s8+0x3b64>
 8018b72:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8018b76:	1851      	adds	r1, r2, r1
 8018b78:	6339      	str	r1, [r7, #48]	; 0x30
 8018b7a:	f143 0300 	adc.w	r3, r3, #0
 8018b7e:	637b      	str	r3, [r7, #52]	; 0x34
 8018b80:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8018b84:	f04f 0000 	mov.w	r0, #0
 8018b88:	f04f 0100 	mov.w	r1, #0
 8018b8c:	0fd0      	lsrs	r0, r2, #31
 8018b8e:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8018b92:	17d9      	asrs	r1, r3, #31
 8018b94:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018b98:	f5a3 7264 	sub.w	r2, r3, #912	; 0x390
 8018b9c:	4603      	mov	r3, r0
 8018b9e:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8018ba0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018ba4:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 8018ba8:	681a      	ldr	r2, [r3, #0]
 8018baa:	4b26      	ldr	r3, [pc, #152]	; (8018c44 <arm_softmax_s8+0x3c24>)
 8018bac:	429a      	cmp	r2, r3
 8018bae:	d10e      	bne.n	8018bce <arm_softmax_s8+0x3bae>
 8018bb0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018bb4:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 8018bb8:	681b      	ldr	r3, [r3, #0]
 8018bba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8018bbe:	d106      	bne.n	8018bce <arm_softmax_s8+0x3bae>
        result = Q31_MAX;
 8018bc0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018bc4:	f5a3 7264 	sub.w	r2, r3, #912	; 0x390
 8018bc8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8018bcc:	6013      	str	r3, [r2, #0]
    return result;
 8018bce:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018bd2:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 8018bd6:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(720401)
 8018bd8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018bdc:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8018be0:	681b      	ldr	r3, [r3, #0]
 8018be2:	ea02 0003 	and.w	r0, r2, r3
 8018be6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018bea:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8018bee:	681b      	ldr	r3, [r3, #0]
 8018bf0:	43da      	mvns	r2, r3
 8018bf2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018bf6:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8018bfa:	681b      	ldr	r3, [r3, #0]
 8018bfc:	ea02 0103 	and.w	r1, r2, r3
 8018c00:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018c04:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8018c08:	ea80 0301 	eor.w	r3, r0, r1
 8018c0c:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(242)
 8018c0e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018c12:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8018c16:	6819      	ldr	r1, [r3, #0]
 8018c18:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018c1c:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8018c20:	1c4b      	adds	r3, r1, #1
 8018c22:	6013      	str	r3, [r2, #0]
 8018c24:	2301      	movs	r3, #1
 8018c26:	fa03 f201 	lsl.w	r2, r3, r1
 8018c2a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018c2e:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8018c32:	681b      	ldr	r3, [r3, #0]
 8018c34:	4013      	ands	r3, r2
 8018c36:	2b00      	cmp	r3, #0
 8018c38:	d00a      	beq.n	8018c50 <arm_softmax_s8+0x3c30>
 8018c3a:	f04f 32ff 	mov.w	r2, #4294967295
 8018c3e:	e008      	b.n	8018c52 <arm_softmax_s8+0x3c32>
 8018c40:	02582ab7 	.word	0x02582ab7
 8018c44:	000afe11 	.word	0x000afe11
 8018c48:	02582ab7 	.word	0x02582ab7
 8018c4c:	00000000 	.word	0x00000000
 8018c50:	2200      	movs	r2, #0
 8018c52:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018c56:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8018c5a:	601a      	str	r2, [r3, #0]
 8018c5c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018c60:	f5a3 7267 	sub.w	r2, r3, #924	; 0x39c
 8018c64:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018c68:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8018c6c:	681b      	ldr	r3, [r3, #0]
 8018c6e:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8018c70:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018c74:	f5a3 7268 	sub.w	r2, r3, #928	; 0x3a0
 8018c78:	2300      	movs	r3, #0
 8018c7a:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8018c7c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8018c80:	f04f 0300 	mov.w	r3, #0
 8018c84:	f507 61c0 	add.w	r1, r7, #1536	; 0x600
 8018c88:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8018c8c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018c90:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 8018c94:	681b      	ldr	r3, [r3, #0]
 8018c96:	0fdb      	lsrs	r3, r3, #31
 8018c98:	b2da      	uxtb	r2, r3
 8018c9a:	2300      	movs	r3, #0
 8018c9c:	4053      	eors	r3, r2
 8018c9e:	b2db      	uxtb	r3, r3
 8018ca0:	2b00      	cmp	r3, #0
 8018ca2:	d010      	beq.n	8018cc6 <arm_softmax_s8+0x3ca6>
        mult = 1 - mult;
 8018ca4:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8018ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018cac:	2100      	movs	r1, #0
 8018cae:	f1d2 0001 	rsbs	r0, r2, #1
 8018cb2:	62b8      	str	r0, [r7, #40]	; 0x28
 8018cb4:	eb61 0303 	sbc.w	r3, r1, r3
 8018cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018cba:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8018cbe:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8018cc2:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8018cc6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018cca:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 8018cce:	681b      	ldr	r3, [r3, #0]
 8018cd0:	17da      	asrs	r2, r3, #31
 8018cd2:	f8c7 3368 	str.w	r3, [r7, #872]	; 0x368
 8018cd6:	f8c7 236c 	str.w	r2, [r7, #876]	; 0x36c
 8018cda:	f04f 02f2 	mov.w	r2, #242	; 0xf2
 8018cde:	f04f 0300 	mov.w	r3, #0
 8018ce2:	f8d7 136c 	ldr.w	r1, [r7, #876]	; 0x36c
 8018ce6:	fb02 f001 	mul.w	r0, r2, r1
 8018cea:	f8d7 1368 	ldr.w	r1, [r7, #872]	; 0x368
 8018cee:	fb01 f103 	mul.w	r1, r1, r3
 8018cf2:	4401      	add	r1, r0
 8018cf4:	f8d7 0368 	ldr.w	r0, [r7, #872]	; 0x368
 8018cf8:	fba0 2302 	umull	r2, r3, r0, r2
 8018cfc:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
 8018d00:	4613      	mov	r3, r2
 8018d02:	f8c7 34e8 	str.w	r3, [r7, #1256]	; 0x4e8
 8018d06:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 8018d0a:	18cb      	adds	r3, r1, r3
 8018d0c:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
 8018d10:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8018d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d18:	f8d7 14e8 	ldr.w	r1, [r7, #1256]	; 0x4e8
 8018d1c:	1851      	adds	r1, r2, r1
 8018d1e:	6239      	str	r1, [r7, #32]
 8018d20:	f8d7 14ec 	ldr.w	r1, [r7, #1260]	; 0x4ec
 8018d24:	414b      	adcs	r3, r1
 8018d26:	627b      	str	r3, [r7, #36]	; 0x24
 8018d28:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8018d2c:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8018d30:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8018d34:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8018d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d3c:	2b00      	cmp	r3, #0
 8018d3e:	da08      	bge.n	8018d52 <arm_softmax_s8+0x3d32>
 8018d40:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8018d44:	1851      	adds	r1, r2, r1
 8018d46:	61b9      	str	r1, [r7, #24]
 8018d48:	f143 0300 	adc.w	r3, r3, #0
 8018d4c:	61fb      	str	r3, [r7, #28]
 8018d4e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8018d52:	f04f 0000 	mov.w	r0, #0
 8018d56:	f04f 0100 	mov.w	r1, #0
 8018d5a:	0fd0      	lsrs	r0, r2, #31
 8018d5c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8018d60:	17d9      	asrs	r1, r3, #31
 8018d62:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018d66:	f5a3 7268 	sub.w	r2, r3, #928	; 0x3a0
 8018d6a:	4603      	mov	r3, r0
 8018d6c:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8018d6e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018d72:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 8018d76:	681b      	ldr	r3, [r3, #0]
 8018d78:	2bf2      	cmp	r3, #242	; 0xf2
 8018d7a:	d10e      	bne.n	8018d9a <arm_softmax_s8+0x3d7a>
 8018d7c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018d80:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 8018d84:	681b      	ldr	r3, [r3, #0]
 8018d86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8018d8a:	d106      	bne.n	8018d9a <arm_softmax_s8+0x3d7a>
        result = Q31_MAX;
 8018d8c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018d90:	f5a3 7268 	sub.w	r2, r3, #928	; 0x3a0
 8018d94:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8018d98:	6013      	str	r3, [r2, #0]
    return result;
 8018d9a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018d9e:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8018da2:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(242)
 8018da4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018da8:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8018dac:	681b      	ldr	r3, [r3, #0]
 8018dae:	ea02 0003 	and.w	r0, r2, r3
 8018db2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018db6:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8018dba:	681b      	ldr	r3, [r3, #0]
 8018dbc:	43da      	mvns	r2, r3
 8018dbe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018dc2:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8018dc6:	681b      	ldr	r3, [r3, #0]
 8018dc8:	ea02 0103 	and.w	r1, r2, r3
 8018dcc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018dd0:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8018dd4:	ea80 0301 	eor.w	r3, r0, r1
 8018dd8:	6013      	str	r3, [r2, #0]
    mask = MASK_IF_ZERO(val);
 8018dda:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018dde:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8018de2:	681b      	ldr	r3, [r3, #0]
 8018de4:	2b00      	cmp	r3, #0
 8018de6:	d102      	bne.n	8018dee <arm_softmax_s8+0x3dce>
 8018de8:	f04f 32ff 	mov.w	r2, #4294967295
 8018dec:	e000      	b.n	8018df0 <arm_softmax_s8+0x3dd0>
 8018dee:	2200      	movs	r2, #0
 8018df0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018df4:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8018df8:	601a      	str	r2, [r3, #0]
    return SELECT_USING_MASK(mask, Q31_MAX, result);
 8018dfa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018dfe:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8018e02:	681b      	ldr	r3, [r3, #0]
 8018e04:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8018e08:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018e0c:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8018e10:	681b      	ldr	r3, [r3, #0]
 8018e12:	43da      	mvns	r2, r3
 8018e14:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018e18:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8018e1c:	681b      	ldr	r3, [r3, #0]
 8018e1e:	4013      	ands	r3, r2
 8018e20:	4059      	eors	r1, r3
 8018e22:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018e26:	f5a3 721e 	sub.w	r2, r3, #632	; 0x278
 8018e2a:	f8d7 3984 	ldr.w	r3, [r7, #2436]	; 0x984
 8018e2e:	6013      	str	r3, [r2, #0]
 8018e30:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018e34:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8018e38:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 8018e3a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018e3e:	f5a3 7220 	sub.w	r2, r3, #640	; 0x280
 8018e42:	2300      	movs	r3, #0
 8018e44:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8018e46:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8018e4a:	f04f 0300 	mov.w	r3, #0
 8018e4e:	f507 61e4 	add.w	r1, r7, #1824	; 0x720
 8018e52:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8018e56:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018e5a:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8018e5e:	681b      	ldr	r3, [r3, #0]
 8018e60:	0fdb      	lsrs	r3, r3, #31
 8018e62:	b2da      	uxtb	r2, r3
 8018e64:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018e68:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8018e6c:	681b      	ldr	r3, [r3, #0]
 8018e6e:	0fdb      	lsrs	r3, r3, #31
 8018e70:	b2db      	uxtb	r3, r3
 8018e72:	4053      	eors	r3, r2
 8018e74:	b2db      	uxtb	r3, r3
 8018e76:	2b00      	cmp	r3, #0
 8018e78:	d010      	beq.n	8018e9c <arm_softmax_s8+0x3e7c>
        mult = 1 - mult;
 8018e7a:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8018e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e82:	2100      	movs	r1, #0
 8018e84:	f1d2 0001 	rsbs	r0, r2, #1
 8018e88:	6138      	str	r0, [r7, #16]
 8018e8a:	eb61 0303 	sbc.w	r3, r1, r3
 8018e8e:	617b      	str	r3, [r7, #20]
 8018e90:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8018e94:	f507 62e4 	add.w	r2, r7, #1824	; 0x720
 8018e98:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8018e9c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018ea0:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8018ea4:	681b      	ldr	r3, [r3, #0]
 8018ea6:	17da      	asrs	r2, r3, #31
 8018ea8:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
 8018eac:	f8c7 23ec 	str.w	r2, [r7, #1004]	; 0x3ec
 8018eb0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018eb4:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8018eb8:	681b      	ldr	r3, [r3, #0]
 8018eba:	17da      	asrs	r2, r3, #31
 8018ebc:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
 8018ec0:	f8c7 23e4 	str.w	r2, [r7, #996]	; 0x3e4
 8018ec4:	e9d7 01fa 	ldrd	r0, r1, [r7, #1000]	; 0x3e8
 8018ec8:	460b      	mov	r3, r1
 8018eca:	f8d7 23e0 	ldr.w	r2, [r7, #992]	; 0x3e0
 8018ece:	fb02 f203 	mul.w	r2, r2, r3
 8018ed2:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8018ed6:	e9c7 01fa 	strd	r0, r1, [r7, #1000]	; 0x3e8
 8018eda:	4601      	mov	r1, r0
 8018edc:	fb01 f303 	mul.w	r3, r1, r3
 8018ee0:	4413      	add	r3, r2
 8018ee2:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 8018ee6:	f8d7 13e0 	ldr.w	r1, [r7, #992]	; 0x3e0
 8018eea:	fba2 1201 	umull	r1, r2, r2, r1
 8018eee:	f8c7 254c 	str.w	r2, [r7, #1356]	; 0x54c
 8018ef2:	460a      	mov	r2, r1
 8018ef4:	f8c7 2548 	str.w	r2, [r7, #1352]	; 0x548
 8018ef8:	f8d7 254c 	ldr.w	r2, [r7, #1356]	; 0x54c
 8018efc:	4413      	add	r3, r2
 8018efe:	f8c7 354c 	str.w	r3, [r7, #1356]	; 0x54c
 8018f02:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8018f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f0a:	f8d7 1548 	ldr.w	r1, [r7, #1352]	; 0x548
 8018f0e:	1851      	adds	r1, r2, r1
 8018f10:	60b9      	str	r1, [r7, #8]
 8018f12:	f8d7 154c 	ldr.w	r1, [r7, #1356]	; 0x54c
 8018f16:	414b      	adcs	r3, r1
 8018f18:	60fb      	str	r3, [r7, #12]
 8018f1a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8018f1e:	f507 62e4 	add.w	r2, r7, #1824	; 0x720
 8018f22:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8018f26:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8018f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f2e:	2b00      	cmp	r3, #0
 8018f30:	da08      	bge.n	8018f44 <arm_softmax_s8+0x3f24>
 8018f32:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8018f36:	1851      	adds	r1, r2, r1
 8018f38:	6039      	str	r1, [r7, #0]
 8018f3a:	f143 0300 	adc.w	r3, r3, #0
 8018f3e:	607b      	str	r3, [r7, #4]
 8018f40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018f44:	f04f 0000 	mov.w	r0, #0
 8018f48:	f04f 0100 	mov.w	r1, #0
 8018f4c:	0fd0      	lsrs	r0, r2, #31
 8018f4e:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8018f52:	17d9      	asrs	r1, r3, #31
 8018f54:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018f58:	f5a3 7220 	sub.w	r2, r3, #640	; 0x280
 8018f5c:	4603      	mov	r3, r0
 8018f5e:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8018f60:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018f64:	f5a3 721e 	sub.w	r2, r3, #632	; 0x278
 8018f68:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018f6c:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8018f70:	6812      	ldr	r2, [r2, #0]
 8018f72:	681b      	ldr	r3, [r3, #0]
 8018f74:	429a      	cmp	r2, r3
 8018f76:	d10e      	bne.n	8018f96 <arm_softmax_s8+0x3f76>
 8018f78:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018f7c:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8018f80:	681b      	ldr	r3, [r3, #0]
 8018f82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8018f86:	d106      	bne.n	8018f96 <arm_softmax_s8+0x3f76>
        result = Q31_MAX;
 8018f88:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018f8c:	f5a3 7220 	sub.w	r2, r3, #640	; 0x280
 8018f90:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8018f94:	6013      	str	r3, [r2, #0]
    return result;
 8018f96:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018f9a:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8018f9e:	681a      	ldr	r2, [r3, #0]
 8018fa0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018fa4:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8018fa8:	601a      	str	r2, [r3, #0]
 8018faa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018fae:	f5a3 7219 	sub.w	r2, r3, #612	; 0x264
 8018fb2:	f8d7 3988 	ldr.w	r3, [r7, #2440]	; 0x988
 8018fb6:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8018fb8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018fbc:	f5a3 721a 	sub.w	r2, r3, #616	; 0x268
 8018fc0:	2300      	movs	r3, #0
 8018fc2:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8018fc4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018fc8:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8018fcc:	2201      	movs	r2, #1
 8018fce:	681b      	ldr	r3, [r3, #0]
 8018fd0:	fa02 f103 	lsl.w	r1, r2, r3
 8018fd4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018fd8:	f5a3 721b 	sub.w	r2, r3, #620	; 0x26c
 8018fdc:	1e4b      	subs	r3, r1, #1
 8018fde:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8018fe0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018fe4:	f5a3 711c 	sub.w	r1, r3, #624	; 0x270
 8018fe8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018fec:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8018ff0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018ff4:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8018ff8:	6812      	ldr	r2, [r2, #0]
 8018ffa:	681b      	ldr	r3, [r3, #0]
 8018ffc:	4013      	ands	r3, r2
 8018ffe:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8019000:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019004:	f5a3 711a 	sub.w	r1, r3, #616	; 0x268
 8019008:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801900c:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8019010:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019014:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8019018:	6812      	ldr	r2, [r2, #0]
 801901a:	681b      	ldr	r3, [r3, #0]
 801901c:	fa42 f303 	asr.w	r3, r2, r3
 8019020:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 8019022:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019026:	f5a3 721d 	sub.w	r2, r3, #628	; 0x274
 801902a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801902e:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8019032:	681b      	ldr	r3, [r3, #0]
 8019034:	105b      	asrs	r3, r3, #1
 8019036:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8019038:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801903c:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8019040:	681b      	ldr	r3, [r3, #0]
 8019042:	2b00      	cmp	r3, #0
 8019044:	da0a      	bge.n	801905c <arm_softmax_s8+0x403c>
        threshold++;
 8019046:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801904a:	f5a3 721d 	sub.w	r2, r3, #628	; 0x274
 801904e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019052:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8019056:	681b      	ldr	r3, [r3, #0]
 8019058:	3301      	adds	r3, #1
 801905a:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 801905c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019060:	f5a3 721c 	sub.w	r2, r3, #624	; 0x270
 8019064:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019068:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 801906c:	6812      	ldr	r2, [r2, #0]
 801906e:	681b      	ldr	r3, [r3, #0]
 8019070:	429a      	cmp	r2, r3
 8019072:	dd0a      	ble.n	801908a <arm_softmax_s8+0x406a>
        result++;
 8019074:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019078:	f5a3 721a 	sub.w	r2, r3, #616	; 0x268
 801907c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019080:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8019084:	681b      	ldr	r3, [r3, #0]
 8019086:	3301      	adds	r3, #1
 8019088:	6013      	str	r3, [r2, #0]
    return result;
 801908a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801908e:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8019092:	681b      	ldr	r3, [r3, #0]
                const int32_t res =
 8019094:	3b80      	subs	r3, #128	; 0x80
 8019096:	f8c7 3980 	str.w	r3, [r7, #2432]	; 0x980
                output[col] = (int8_t)CLAMP(res, (int32_t)127, (int32_t)-128);
 801909a:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 801909e:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
 80190a2:	db09      	blt.n	80190b8 <arm_softmax_s8+0x4098>
 80190a4:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 80190a8:	2b7e      	cmp	r3, #126	; 0x7e
 80190aa:	dc03      	bgt.n	80190b4 <arm_softmax_s8+0x4094>
 80190ac:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 80190b0:	b259      	sxtb	r1, r3
 80190b2:	e003      	b.n	80190bc <arm_softmax_s8+0x409c>
 80190b4:	217f      	movs	r1, #127	; 0x7f
 80190b6:	e001      	b.n	80190bc <arm_softmax_s8+0x409c>
 80190b8:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 80190bc:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 80190c0:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	; 0x9d0
 80190c4:	441a      	add	r2, r3
 80190c6:	460b      	mov	r3, r1
 80190c8:	7013      	strb	r3, [r2, #0]
 80190ca:	e006      	b.n	80190da <arm_softmax_s8+0x40ba>
            }
            else
            {
                output[col] = -128;
 80190cc:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 80190d0:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	; 0x9d0
 80190d4:	441a      	add	r2, r3
 80190d6:	2380      	movs	r3, #128	; 0x80
 80190d8:	7013      	strb	r3, [r2, #0]
        for (col = 0; col < row_size; ++col)
 80190da:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	; 0x9a4
 80190de:	3301      	adds	r3, #1
 80190e0:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 80190e4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80190e8:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80190ec:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 80190f0:	681b      	ldr	r3, [r3, #0]
 80190f2:	429a      	cmp	r2, r3
 80190f4:	f6fe aa71 	blt.w	80175da <arm_softmax_s8+0x25ba>
            }
        }
        input += row_size;
 80190f8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80190fc:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8019100:	6819      	ldr	r1, [r3, #0]
 8019102:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019106:	f5a3 7271 	sub.w	r2, r3, #964	; 0x3c4
 801910a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801910e:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 8019112:	681b      	ldr	r3, [r3, #0]
 8019114:	440b      	add	r3, r1
 8019116:	6013      	str	r3, [r2, #0]
        output += row_size;
 8019118:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801911c:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8019120:	681a      	ldr	r2, [r3, #0]
 8019122:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	; 0x9d0
 8019126:	4413      	add	r3, r2
 8019128:	f8c7 39d0 	str.w	r3, [r7, #2512]	; 0x9d0
    for (row_idx = 0; row_idx < num_rows; ++row_idx)
 801912c:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	; 0x9a0
 8019130:	3301      	adds	r3, #1
 8019132:	f8c7 39a0 	str.w	r3, [r7, #2464]	; 0x9a0
 8019136:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801913a:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 801913e:	f8d7 29a0 	ldr.w	r2, [r7, #2464]	; 0x9a0
 8019142:	681b      	ldr	r3, [r3, #0]
 8019144:	429a      	cmp	r2, r3
 8019146:	f6fb af93 	blt.w	8015070 <arm_softmax_s8+0x50>
    }

#endif
}
 801914a:	bf00      	nop
 801914c:	bf00      	nop
 801914e:	f607 17a8 	addw	r7, r7, #2472	; 0x9a8
 8019152:	46bd      	mov	sp, r7
 8019154:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8019158:	4770      	bx	lr
 801915a:	bf00      	nop

0801915c <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        int m
        )
{
 801915c:	b480      	push	{r7}
 801915e:	b089      	sub	sp, #36	; 0x24
 8019160:	af00      	add	r7, sp, #0
 8019162:	60f8      	str	r0, [r7, #12]
 8019164:	60b9      	str	r1, [r7, #8]
 8019166:	607a      	str	r2, [r7, #4]
 8019168:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx * Fout2;
    kiss_fft_cpx * tw1 = st->twiddles;
 801916a:	687b      	ldr	r3, [r7, #4]
 801916c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8019170:	61bb      	str	r3, [r7, #24]
    kiss_fft_cpx t;
    Fout2 = Fout + m;
 8019172:	683b      	ldr	r3, [r7, #0]
 8019174:	00db      	lsls	r3, r3, #3
 8019176:	68fa      	ldr	r2, [r7, #12]
 8019178:	4413      	add	r3, r2
 801917a:	61fb      	str	r3, [r7, #28]
    do{
        C_FIXDIV(*Fout,2); C_FIXDIV(*Fout2,2);

        C_MUL (t,  *Fout2 , *tw1);
 801917c:	69fb      	ldr	r3, [r7, #28]
 801917e:	ed93 7a00 	vldr	s14, [r3]
 8019182:	69bb      	ldr	r3, [r7, #24]
 8019184:	edd3 7a00 	vldr	s15, [r3]
 8019188:	ee27 7a27 	vmul.f32	s14, s14, s15
 801918c:	69fb      	ldr	r3, [r7, #28]
 801918e:	edd3 6a01 	vldr	s13, [r3, #4]
 8019192:	69bb      	ldr	r3, [r7, #24]
 8019194:	edd3 7a01 	vldr	s15, [r3, #4]
 8019198:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801919c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80191a0:	edc7 7a04 	vstr	s15, [r7, #16]
 80191a4:	69fb      	ldr	r3, [r7, #28]
 80191a6:	ed93 7a00 	vldr	s14, [r3]
 80191aa:	69bb      	ldr	r3, [r7, #24]
 80191ac:	edd3 7a01 	vldr	s15, [r3, #4]
 80191b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80191b4:	69fb      	ldr	r3, [r7, #28]
 80191b6:	edd3 6a01 	vldr	s13, [r3, #4]
 80191ba:	69bb      	ldr	r3, [r7, #24]
 80191bc:	edd3 7a00 	vldr	s15, [r3]
 80191c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80191c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80191c8:	edc7 7a05 	vstr	s15, [r7, #20]
        tw1 += fstride;
 80191cc:	68bb      	ldr	r3, [r7, #8]
 80191ce:	00db      	lsls	r3, r3, #3
 80191d0:	69ba      	ldr	r2, [r7, #24]
 80191d2:	4413      	add	r3, r2
 80191d4:	61bb      	str	r3, [r7, #24]
        C_SUB( *Fout2 ,  *Fout , t );
 80191d6:	68fb      	ldr	r3, [r7, #12]
 80191d8:	ed93 7a00 	vldr	s14, [r3]
 80191dc:	edd7 7a04 	vldr	s15, [r7, #16]
 80191e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80191e4:	69fb      	ldr	r3, [r7, #28]
 80191e6:	edc3 7a00 	vstr	s15, [r3]
 80191ea:	68fb      	ldr	r3, [r7, #12]
 80191ec:	ed93 7a01 	vldr	s14, [r3, #4]
 80191f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80191f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80191f8:	69fb      	ldr	r3, [r7, #28]
 80191fa:	edc3 7a01 	vstr	s15, [r3, #4]
        C_ADDTO( *Fout ,  t );
 80191fe:	68fb      	ldr	r3, [r7, #12]
 8019200:	ed93 7a00 	vldr	s14, [r3]
 8019204:	edd7 7a04 	vldr	s15, [r7, #16]
 8019208:	ee77 7a27 	vadd.f32	s15, s14, s15
 801920c:	68fb      	ldr	r3, [r7, #12]
 801920e:	edc3 7a00 	vstr	s15, [r3]
 8019212:	68fb      	ldr	r3, [r7, #12]
 8019214:	ed93 7a01 	vldr	s14, [r3, #4]
 8019218:	edd7 7a05 	vldr	s15, [r7, #20]
 801921c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019220:	68fb      	ldr	r3, [r7, #12]
 8019222:	edc3 7a01 	vstr	s15, [r3, #4]
        ++Fout2;
 8019226:	69fb      	ldr	r3, [r7, #28]
 8019228:	3308      	adds	r3, #8
 801922a:	61fb      	str	r3, [r7, #28]
        ++Fout;
 801922c:	68fb      	ldr	r3, [r7, #12]
 801922e:	3308      	adds	r3, #8
 8019230:	60fb      	str	r3, [r7, #12]
    }while (--m);
 8019232:	683b      	ldr	r3, [r7, #0]
 8019234:	3b01      	subs	r3, #1
 8019236:	603b      	str	r3, [r7, #0]
 8019238:	683b      	ldr	r3, [r7, #0]
 801923a:	2b00      	cmp	r3, #0
 801923c:	bf14      	ite	ne
 801923e:	2301      	movne	r3, #1
 8019240:	2300      	moveq	r3, #0
 8019242:	b2db      	uxtb	r3, r3
 8019244:	2b00      	cmp	r3, #0
 8019246:	d000      	beq.n	801924a <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei+0xee>
    do{
 8019248:	e798      	b.n	801917c <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei+0x20>
}
 801924a:	bf00      	nop
 801924c:	3724      	adds	r7, #36	; 0x24
 801924e:	46bd      	mov	sp, r7
 8019250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019254:	4770      	bx	lr

08019256 <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        const size_t m
        )
{
 8019256:	b480      	push	{r7}
 8019258:	b097      	sub	sp, #92	; 0x5c
 801925a:	af00      	add	r7, sp, #0
 801925c:	60f8      	str	r0, [r7, #12]
 801925e:	60b9      	str	r1, [r7, #8]
 8019260:	607a      	str	r2, [r7, #4]
 8019262:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx *tw1,*tw2,*tw3;
    kiss_fft_cpx scratch[6];
    size_t k=m;
 8019264:	683b      	ldr	r3, [r7, #0]
 8019266:	64bb      	str	r3, [r7, #72]	; 0x48
    const size_t m2=2*m;
 8019268:	683b      	ldr	r3, [r7, #0]
 801926a:	005b      	lsls	r3, r3, #1
 801926c:	647b      	str	r3, [r7, #68]	; 0x44
    const size_t m3=3*m;
 801926e:	683a      	ldr	r2, [r7, #0]
 8019270:	4613      	mov	r3, r2
 8019272:	005b      	lsls	r3, r3, #1
 8019274:	4413      	add	r3, r2
 8019276:	643b      	str	r3, [r7, #64]	; 0x40


    tw3 = tw2 = tw1 = st->twiddles;
 8019278:	687b      	ldr	r3, [r7, #4]
 801927a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 801927e:	657b      	str	r3, [r7, #84]	; 0x54
 8019280:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019282:	653b      	str	r3, [r7, #80]	; 0x50
 8019284:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019286:	64fb      	str	r3, [r7, #76]	; 0x4c

    do {
        C_FIXDIV(*Fout,4); C_FIXDIV(Fout[m],4); C_FIXDIV(Fout[m2],4); C_FIXDIV(Fout[m3],4);

        C_MUL(scratch[0],Fout[m] , *tw1 );
 8019288:	683b      	ldr	r3, [r7, #0]
 801928a:	00db      	lsls	r3, r3, #3
 801928c:	68fa      	ldr	r2, [r7, #12]
 801928e:	4413      	add	r3, r2
 8019290:	ed93 7a00 	vldr	s14, [r3]
 8019294:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019296:	edd3 7a00 	vldr	s15, [r3]
 801929a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801929e:	683b      	ldr	r3, [r7, #0]
 80192a0:	00db      	lsls	r3, r3, #3
 80192a2:	68fa      	ldr	r2, [r7, #12]
 80192a4:	4413      	add	r3, r2
 80192a6:	edd3 6a01 	vldr	s13, [r3, #4]
 80192aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80192ac:	edd3 7a01 	vldr	s15, [r3, #4]
 80192b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80192b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80192b8:	edc7 7a04 	vstr	s15, [r7, #16]
 80192bc:	683b      	ldr	r3, [r7, #0]
 80192be:	00db      	lsls	r3, r3, #3
 80192c0:	68fa      	ldr	r2, [r7, #12]
 80192c2:	4413      	add	r3, r2
 80192c4:	ed93 7a00 	vldr	s14, [r3]
 80192c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80192ca:	edd3 7a01 	vldr	s15, [r3, #4]
 80192ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80192d2:	683b      	ldr	r3, [r7, #0]
 80192d4:	00db      	lsls	r3, r3, #3
 80192d6:	68fa      	ldr	r2, [r7, #12]
 80192d8:	4413      	add	r3, r2
 80192da:	edd3 6a01 	vldr	s13, [r3, #4]
 80192de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80192e0:	edd3 7a00 	vldr	s15, [r3]
 80192e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80192e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80192ec:	edc7 7a05 	vstr	s15, [r7, #20]
        C_MUL(scratch[1],Fout[m2] , *tw2 );
 80192f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80192f2:	00db      	lsls	r3, r3, #3
 80192f4:	68fa      	ldr	r2, [r7, #12]
 80192f6:	4413      	add	r3, r2
 80192f8:	ed93 7a00 	vldr	s14, [r3]
 80192fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80192fe:	edd3 7a00 	vldr	s15, [r3]
 8019302:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019306:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019308:	00db      	lsls	r3, r3, #3
 801930a:	68fa      	ldr	r2, [r7, #12]
 801930c:	4413      	add	r3, r2
 801930e:	edd3 6a01 	vldr	s13, [r3, #4]
 8019312:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019314:	edd3 7a01 	vldr	s15, [r3, #4]
 8019318:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801931c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019320:	edc7 7a06 	vstr	s15, [r7, #24]
 8019324:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019326:	00db      	lsls	r3, r3, #3
 8019328:	68fa      	ldr	r2, [r7, #12]
 801932a:	4413      	add	r3, r2
 801932c:	ed93 7a00 	vldr	s14, [r3]
 8019330:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019332:	edd3 7a01 	vldr	s15, [r3, #4]
 8019336:	ee27 7a27 	vmul.f32	s14, s14, s15
 801933a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801933c:	00db      	lsls	r3, r3, #3
 801933e:	68fa      	ldr	r2, [r7, #12]
 8019340:	4413      	add	r3, r2
 8019342:	edd3 6a01 	vldr	s13, [r3, #4]
 8019346:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019348:	edd3 7a00 	vldr	s15, [r3]
 801934c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019350:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019354:	edc7 7a07 	vstr	s15, [r7, #28]
        C_MUL(scratch[2],Fout[m3] , *tw3 );
 8019358:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801935a:	00db      	lsls	r3, r3, #3
 801935c:	68fa      	ldr	r2, [r7, #12]
 801935e:	4413      	add	r3, r2
 8019360:	ed93 7a00 	vldr	s14, [r3]
 8019364:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019366:	edd3 7a00 	vldr	s15, [r3]
 801936a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801936e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019370:	00db      	lsls	r3, r3, #3
 8019372:	68fa      	ldr	r2, [r7, #12]
 8019374:	4413      	add	r3, r2
 8019376:	edd3 6a01 	vldr	s13, [r3, #4]
 801937a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801937c:	edd3 7a01 	vldr	s15, [r3, #4]
 8019380:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019384:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019388:	edc7 7a08 	vstr	s15, [r7, #32]
 801938c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801938e:	00db      	lsls	r3, r3, #3
 8019390:	68fa      	ldr	r2, [r7, #12]
 8019392:	4413      	add	r3, r2
 8019394:	ed93 7a00 	vldr	s14, [r3]
 8019398:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801939a:	edd3 7a01 	vldr	s15, [r3, #4]
 801939e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80193a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80193a4:	00db      	lsls	r3, r3, #3
 80193a6:	68fa      	ldr	r2, [r7, #12]
 80193a8:	4413      	add	r3, r2
 80193aa:	edd3 6a01 	vldr	s13, [r3, #4]
 80193ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80193b0:	edd3 7a00 	vldr	s15, [r3]
 80193b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80193b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80193bc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

        C_SUB( scratch[5] , *Fout, scratch[1] );
 80193c0:	68fb      	ldr	r3, [r7, #12]
 80193c2:	ed93 7a00 	vldr	s14, [r3]
 80193c6:	edd7 7a06 	vldr	s15, [r7, #24]
 80193ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80193ce:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 80193d2:	68fb      	ldr	r3, [r7, #12]
 80193d4:	ed93 7a01 	vldr	s14, [r3, #4]
 80193d8:	edd7 7a07 	vldr	s15, [r7, #28]
 80193dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80193e0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        C_ADDTO(*Fout, scratch[1]);
 80193e4:	68fb      	ldr	r3, [r7, #12]
 80193e6:	ed93 7a00 	vldr	s14, [r3]
 80193ea:	edd7 7a06 	vldr	s15, [r7, #24]
 80193ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80193f2:	68fb      	ldr	r3, [r7, #12]
 80193f4:	edc3 7a00 	vstr	s15, [r3]
 80193f8:	68fb      	ldr	r3, [r7, #12]
 80193fa:	ed93 7a01 	vldr	s14, [r3, #4]
 80193fe:	edd7 7a07 	vldr	s15, [r7, #28]
 8019402:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019406:	68fb      	ldr	r3, [r7, #12]
 8019408:	edc3 7a01 	vstr	s15, [r3, #4]
        C_ADD( scratch[3] , scratch[0] , scratch[2] );
 801940c:	ed97 7a04 	vldr	s14, [r7, #16]
 8019410:	edd7 7a08 	vldr	s15, [r7, #32]
 8019414:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019418:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 801941c:	ed97 7a05 	vldr	s14, [r7, #20]
 8019420:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8019424:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019428:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        C_SUB( scratch[4] , scratch[0] , scratch[2] );
 801942c:	ed97 7a04 	vldr	s14, [r7, #16]
 8019430:	edd7 7a08 	vldr	s15, [r7, #32]
 8019434:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019438:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 801943c:	ed97 7a05 	vldr	s14, [r7, #20]
 8019440:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8019444:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019448:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        C_SUB( Fout[m2], *Fout, scratch[3] );
 801944c:	68fb      	ldr	r3, [r7, #12]
 801944e:	ed93 7a00 	vldr	s14, [r3]
 8019452:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8019456:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019458:	00db      	lsls	r3, r3, #3
 801945a:	68fa      	ldr	r2, [r7, #12]
 801945c:	4413      	add	r3, r2
 801945e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019462:	edc3 7a00 	vstr	s15, [r3]
 8019466:	68fb      	ldr	r3, [r7, #12]
 8019468:	ed93 7a01 	vldr	s14, [r3, #4]
 801946c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8019470:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019472:	00db      	lsls	r3, r3, #3
 8019474:	68fa      	ldr	r2, [r7, #12]
 8019476:	4413      	add	r3, r2
 8019478:	ee77 7a67 	vsub.f32	s15, s14, s15
 801947c:	edc3 7a01 	vstr	s15, [r3, #4]
        tw1 += fstride;
 8019480:	68bb      	ldr	r3, [r7, #8]
 8019482:	00db      	lsls	r3, r3, #3
 8019484:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019486:	4413      	add	r3, r2
 8019488:	657b      	str	r3, [r7, #84]	; 0x54
        tw2 += fstride*2;
 801948a:	68bb      	ldr	r3, [r7, #8]
 801948c:	011b      	lsls	r3, r3, #4
 801948e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8019490:	4413      	add	r3, r2
 8019492:	653b      	str	r3, [r7, #80]	; 0x50
        tw3 += fstride*3;
 8019494:	68ba      	ldr	r2, [r7, #8]
 8019496:	4613      	mov	r3, r2
 8019498:	005b      	lsls	r3, r3, #1
 801949a:	4413      	add	r3, r2
 801949c:	00db      	lsls	r3, r3, #3
 801949e:	461a      	mov	r2, r3
 80194a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80194a2:	4413      	add	r3, r2
 80194a4:	64fb      	str	r3, [r7, #76]	; 0x4c
        C_ADDTO( *Fout , scratch[3] );
 80194a6:	68fb      	ldr	r3, [r7, #12]
 80194a8:	ed93 7a00 	vldr	s14, [r3]
 80194ac:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80194b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80194b4:	68fb      	ldr	r3, [r7, #12]
 80194b6:	edc3 7a00 	vstr	s15, [r3]
 80194ba:	68fb      	ldr	r3, [r7, #12]
 80194bc:	ed93 7a01 	vldr	s14, [r3, #4]
 80194c0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80194c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80194c8:	68fb      	ldr	r3, [r7, #12]
 80194ca:	edc3 7a01 	vstr	s15, [r3, #4]

        if(st->inverse) {
 80194ce:	687b      	ldr	r3, [r7, #4]
 80194d0:	685b      	ldr	r3, [r3, #4]
 80194d2:	2b00      	cmp	r3, #0
 80194d4:	d030      	beq.n	8019538 <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x2e2>
            Fout[m].r = scratch[5].r - scratch[4].i;
 80194d6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80194da:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80194de:	683b      	ldr	r3, [r7, #0]
 80194e0:	00db      	lsls	r3, r3, #3
 80194e2:	68fa      	ldr	r2, [r7, #12]
 80194e4:	4413      	add	r3, r2
 80194e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80194ea:	edc3 7a00 	vstr	s15, [r3]
            Fout[m].i = scratch[5].i + scratch[4].r;
 80194ee:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80194f2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80194f6:	683b      	ldr	r3, [r7, #0]
 80194f8:	00db      	lsls	r3, r3, #3
 80194fa:	68fa      	ldr	r2, [r7, #12]
 80194fc:	4413      	add	r3, r2
 80194fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019502:	edc3 7a01 	vstr	s15, [r3, #4]
            Fout[m3].r = scratch[5].r + scratch[4].i;
 8019506:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 801950a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801950e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019510:	00db      	lsls	r3, r3, #3
 8019512:	68fa      	ldr	r2, [r7, #12]
 8019514:	4413      	add	r3, r2
 8019516:	ee77 7a27 	vadd.f32	s15, s14, s15
 801951a:	edc3 7a00 	vstr	s15, [r3]
            Fout[m3].i = scratch[5].i - scratch[4].r;
 801951e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8019522:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8019526:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019528:	00db      	lsls	r3, r3, #3
 801952a:	68fa      	ldr	r2, [r7, #12]
 801952c:	4413      	add	r3, r2
 801952e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019532:	edc3 7a01 	vstr	s15, [r3, #4]
 8019536:	e02f      	b.n	8019598 <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x342>
        }else{
            Fout[m].r = scratch[5].r + scratch[4].i;
 8019538:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 801953c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8019540:	683b      	ldr	r3, [r7, #0]
 8019542:	00db      	lsls	r3, r3, #3
 8019544:	68fa      	ldr	r2, [r7, #12]
 8019546:	4413      	add	r3, r2
 8019548:	ee77 7a27 	vadd.f32	s15, s14, s15
 801954c:	edc3 7a00 	vstr	s15, [r3]
            Fout[m].i = scratch[5].i - scratch[4].r;
 8019550:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8019554:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8019558:	683b      	ldr	r3, [r7, #0]
 801955a:	00db      	lsls	r3, r3, #3
 801955c:	68fa      	ldr	r2, [r7, #12]
 801955e:	4413      	add	r3, r2
 8019560:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019564:	edc3 7a01 	vstr	s15, [r3, #4]
            Fout[m3].r = scratch[5].r - scratch[4].i;
 8019568:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 801956c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8019570:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019572:	00db      	lsls	r3, r3, #3
 8019574:	68fa      	ldr	r2, [r7, #12]
 8019576:	4413      	add	r3, r2
 8019578:	ee77 7a67 	vsub.f32	s15, s14, s15
 801957c:	edc3 7a00 	vstr	s15, [r3]
            Fout[m3].i = scratch[5].i + scratch[4].r;
 8019580:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8019584:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8019588:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801958a:	00db      	lsls	r3, r3, #3
 801958c:	68fa      	ldr	r2, [r7, #12]
 801958e:	4413      	add	r3, r2
 8019590:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019594:	edc3 7a01 	vstr	s15, [r3, #4]
        }
        ++Fout;
 8019598:	68fb      	ldr	r3, [r7, #12]
 801959a:	3308      	adds	r3, #8
 801959c:	60fb      	str	r3, [r7, #12]
    }while(--k);
 801959e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80195a0:	3b01      	subs	r3, #1
 80195a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80195a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80195a6:	2b00      	cmp	r3, #0
 80195a8:	bf14      	ite	ne
 80195aa:	2301      	movne	r3, #1
 80195ac:	2300      	moveq	r3, #0
 80195ae:	b2db      	uxtb	r3, r3
 80195b0:	2b00      	cmp	r3, #0
 80195b2:	d000      	beq.n	80195b6 <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x360>
    do {
 80195b4:	e668      	b.n	8019288 <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x32>
}
 80195b6:	bf00      	nop
 80195b8:	375c      	adds	r7, #92	; 0x5c
 80195ba:	46bd      	mov	sp, r7
 80195bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195c0:	4770      	bx	lr
	...

080195c4 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej>:
         kiss_fft_cpx * Fout,
         const size_t fstride,
         const kiss_fft_cfg st,
         size_t m
         )
{
 80195c4:	b5b0      	push	{r4, r5, r7, lr}
 80195c6:	b094      	sub	sp, #80	; 0x50
 80195c8:	af00      	add	r7, sp, #0
 80195ca:	60f8      	str	r0, [r7, #12]
 80195cc:	60b9      	str	r1, [r7, #8]
 80195ce:	607a      	str	r2, [r7, #4]
 80195d0:	603b      	str	r3, [r7, #0]
     size_t k=m;
 80195d2:	683b      	ldr	r3, [r7, #0]
 80195d4:	64fb      	str	r3, [r7, #76]	; 0x4c
     const size_t m2 = 2*m;
 80195d6:	683b      	ldr	r3, [r7, #0]
 80195d8:	005b      	lsls	r3, r3, #1
 80195da:	643b      	str	r3, [r7, #64]	; 0x40
     kiss_fft_cpx *tw1,*tw2;
     kiss_fft_cpx scratch[5];
     kiss_fft_cpx epi3;
     epi3 = st->twiddles[fstride*m];
 80195dc:	68bb      	ldr	r3, [r7, #8]
 80195de:	683a      	ldr	r2, [r7, #0]
 80195e0:	fb02 f303 	mul.w	r3, r2, r3
 80195e4:	6879      	ldr	r1, [r7, #4]
 80195e6:	3321      	adds	r3, #33	; 0x21
 80195e8:	f107 0210 	add.w	r2, r7, #16
 80195ec:	00db      	lsls	r3, r3, #3
 80195ee:	440b      	add	r3, r1
 80195f0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80195f4:	e882 0003 	stmia.w	r2, {r0, r1}

     tw1=tw2=st->twiddles;
 80195f8:	687b      	ldr	r3, [r7, #4]
 80195fa:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80195fe:	647b      	str	r3, [r7, #68]	; 0x44
 8019600:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019602:	64bb      	str	r3, [r7, #72]	; 0x48

     do{
         C_FIXDIV(*Fout,3); C_FIXDIV(Fout[m],3); C_FIXDIV(Fout[m2],3);

         C_MUL(scratch[1],Fout[m] , *tw1);
 8019604:	683b      	ldr	r3, [r7, #0]
 8019606:	00db      	lsls	r3, r3, #3
 8019608:	68fa      	ldr	r2, [r7, #12]
 801960a:	4413      	add	r3, r2
 801960c:	ed93 7a00 	vldr	s14, [r3]
 8019610:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019612:	edd3 7a00 	vldr	s15, [r3]
 8019616:	ee27 7a27 	vmul.f32	s14, s14, s15
 801961a:	683b      	ldr	r3, [r7, #0]
 801961c:	00db      	lsls	r3, r3, #3
 801961e:	68fa      	ldr	r2, [r7, #12]
 8019620:	4413      	add	r3, r2
 8019622:	edd3 6a01 	vldr	s13, [r3, #4]
 8019626:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019628:	edd3 7a01 	vldr	s15, [r3, #4]
 801962c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019630:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019634:	edc7 7a08 	vstr	s15, [r7, #32]
 8019638:	683b      	ldr	r3, [r7, #0]
 801963a:	00db      	lsls	r3, r3, #3
 801963c:	68fa      	ldr	r2, [r7, #12]
 801963e:	4413      	add	r3, r2
 8019640:	ed93 7a00 	vldr	s14, [r3]
 8019644:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019646:	edd3 7a01 	vldr	s15, [r3, #4]
 801964a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801964e:	683b      	ldr	r3, [r7, #0]
 8019650:	00db      	lsls	r3, r3, #3
 8019652:	68fa      	ldr	r2, [r7, #12]
 8019654:	4413      	add	r3, r2
 8019656:	edd3 6a01 	vldr	s13, [r3, #4]
 801965a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801965c:	edd3 7a00 	vldr	s15, [r3]
 8019660:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019664:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019668:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
         C_MUL(scratch[2],Fout[m2] , *tw2);
 801966c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801966e:	00db      	lsls	r3, r3, #3
 8019670:	68fa      	ldr	r2, [r7, #12]
 8019672:	4413      	add	r3, r2
 8019674:	ed93 7a00 	vldr	s14, [r3]
 8019678:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801967a:	edd3 7a00 	vldr	s15, [r3]
 801967e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019682:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019684:	00db      	lsls	r3, r3, #3
 8019686:	68fa      	ldr	r2, [r7, #12]
 8019688:	4413      	add	r3, r2
 801968a:	edd3 6a01 	vldr	s13, [r3, #4]
 801968e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019690:	edd3 7a01 	vldr	s15, [r3, #4]
 8019694:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019698:	ee77 7a67 	vsub.f32	s15, s14, s15
 801969c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 80196a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80196a2:	00db      	lsls	r3, r3, #3
 80196a4:	68fa      	ldr	r2, [r7, #12]
 80196a6:	4413      	add	r3, r2
 80196a8:	ed93 7a00 	vldr	s14, [r3]
 80196ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80196ae:	edd3 7a01 	vldr	s15, [r3, #4]
 80196b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80196b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80196b8:	00db      	lsls	r3, r3, #3
 80196ba:	68fa      	ldr	r2, [r7, #12]
 80196bc:	4413      	add	r3, r2
 80196be:	edd3 6a01 	vldr	s13, [r3, #4]
 80196c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80196c4:	edd3 7a00 	vldr	s15, [r3]
 80196c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80196cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80196d0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

         C_ADD(scratch[3],scratch[1],scratch[2]);
 80196d4:	ed97 7a08 	vldr	s14, [r7, #32]
 80196d8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80196dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80196e0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 80196e4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80196e8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80196ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80196f0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
         C_SUB(scratch[0],scratch[1],scratch[2]);
 80196f4:	ed97 7a08 	vldr	s14, [r7, #32]
 80196f8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80196fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019700:	edc7 7a06 	vstr	s15, [r7, #24]
 8019704:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8019708:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801970c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019710:	edc7 7a07 	vstr	s15, [r7, #28]
         tw1 += fstride;
 8019714:	68bb      	ldr	r3, [r7, #8]
 8019716:	00db      	lsls	r3, r3, #3
 8019718:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801971a:	4413      	add	r3, r2
 801971c:	64bb      	str	r3, [r7, #72]	; 0x48
         tw2 += fstride*2;
 801971e:	68bb      	ldr	r3, [r7, #8]
 8019720:	011b      	lsls	r3, r3, #4
 8019722:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019724:	4413      	add	r3, r2
 8019726:	647b      	str	r3, [r7, #68]	; 0x44

         Fout[m].r = Fout->r - HALF_OF(scratch[3].r);
 8019728:	68fb      	ldr	r3, [r7, #12]
 801972a:	681b      	ldr	r3, [r3, #0]
 801972c:	4618      	mov	r0, r3
 801972e:	f7e6 ff15 	bl	800055c <__aeabi_f2d>
 8019732:	4604      	mov	r4, r0
 8019734:	460d      	mov	r5, r1
 8019736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019738:	4618      	mov	r0, r3
 801973a:	f7e6 ff0f 	bl	800055c <__aeabi_f2d>
 801973e:	f04f 0200 	mov.w	r2, #0
 8019742:	4b57      	ldr	r3, [pc, #348]	; (80198a0 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x2dc>)
 8019744:	f7e6 ff62 	bl	800060c <__aeabi_dmul>
 8019748:	4602      	mov	r2, r0
 801974a:	460b      	mov	r3, r1
 801974c:	4620      	mov	r0, r4
 801974e:	4629      	mov	r1, r5
 8019750:	f7e6 fda4 	bl	800029c <__aeabi_dsub>
 8019754:	4602      	mov	r2, r0
 8019756:	460b      	mov	r3, r1
 8019758:	4610      	mov	r0, r2
 801975a:	4619      	mov	r1, r3
 801975c:	683b      	ldr	r3, [r7, #0]
 801975e:	00db      	lsls	r3, r3, #3
 8019760:	68fa      	ldr	r2, [r7, #12]
 8019762:	18d4      	adds	r4, r2, r3
 8019764:	f7e7 fa4a 	bl	8000bfc <__aeabi_d2f>
 8019768:	4603      	mov	r3, r0
 801976a:	6023      	str	r3, [r4, #0]
         Fout[m].i = Fout->i - HALF_OF(scratch[3].i);
 801976c:	68fb      	ldr	r3, [r7, #12]
 801976e:	685b      	ldr	r3, [r3, #4]
 8019770:	4618      	mov	r0, r3
 8019772:	f7e6 fef3 	bl	800055c <__aeabi_f2d>
 8019776:	4604      	mov	r4, r0
 8019778:	460d      	mov	r5, r1
 801977a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801977c:	4618      	mov	r0, r3
 801977e:	f7e6 feed 	bl	800055c <__aeabi_f2d>
 8019782:	f04f 0200 	mov.w	r2, #0
 8019786:	4b46      	ldr	r3, [pc, #280]	; (80198a0 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x2dc>)
 8019788:	f7e6 ff40 	bl	800060c <__aeabi_dmul>
 801978c:	4602      	mov	r2, r0
 801978e:	460b      	mov	r3, r1
 8019790:	4620      	mov	r0, r4
 8019792:	4629      	mov	r1, r5
 8019794:	f7e6 fd82 	bl	800029c <__aeabi_dsub>
 8019798:	4602      	mov	r2, r0
 801979a:	460b      	mov	r3, r1
 801979c:	4610      	mov	r0, r2
 801979e:	4619      	mov	r1, r3
 80197a0:	683b      	ldr	r3, [r7, #0]
 80197a2:	00db      	lsls	r3, r3, #3
 80197a4:	68fa      	ldr	r2, [r7, #12]
 80197a6:	18d4      	adds	r4, r2, r3
 80197a8:	f7e7 fa28 	bl	8000bfc <__aeabi_d2f>
 80197ac:	4603      	mov	r3, r0
 80197ae:	6063      	str	r3, [r4, #4]

         C_MULBYSCALAR( scratch[0] , epi3.i );
 80197b0:	ed97 7a06 	vldr	s14, [r7, #24]
 80197b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80197b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80197bc:	edc7 7a06 	vstr	s15, [r7, #24]
 80197c0:	ed97 7a07 	vldr	s14, [r7, #28]
 80197c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80197c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80197cc:	edc7 7a07 	vstr	s15, [r7, #28]

         C_ADDTO(*Fout,scratch[3]);
 80197d0:	68fb      	ldr	r3, [r7, #12]
 80197d2:	ed93 7a00 	vldr	s14, [r3]
 80197d6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80197da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80197de:	68fb      	ldr	r3, [r7, #12]
 80197e0:	edc3 7a00 	vstr	s15, [r3]
 80197e4:	68fb      	ldr	r3, [r7, #12]
 80197e6:	ed93 7a01 	vldr	s14, [r3, #4]
 80197ea:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80197ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80197f2:	68fb      	ldr	r3, [r7, #12]
 80197f4:	edc3 7a01 	vstr	s15, [r3, #4]

         Fout[m2].r = Fout[m].r + scratch[0].i;
 80197f8:	683b      	ldr	r3, [r7, #0]
 80197fa:	00db      	lsls	r3, r3, #3
 80197fc:	68fa      	ldr	r2, [r7, #12]
 80197fe:	4413      	add	r3, r2
 8019800:	ed93 7a00 	vldr	s14, [r3]
 8019804:	edd7 7a07 	vldr	s15, [r7, #28]
 8019808:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801980a:	00db      	lsls	r3, r3, #3
 801980c:	68fa      	ldr	r2, [r7, #12]
 801980e:	4413      	add	r3, r2
 8019810:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019814:	edc3 7a00 	vstr	s15, [r3]
         Fout[m2].i = Fout[m].i - scratch[0].r;
 8019818:	683b      	ldr	r3, [r7, #0]
 801981a:	00db      	lsls	r3, r3, #3
 801981c:	68fa      	ldr	r2, [r7, #12]
 801981e:	4413      	add	r3, r2
 8019820:	ed93 7a01 	vldr	s14, [r3, #4]
 8019824:	edd7 7a06 	vldr	s15, [r7, #24]
 8019828:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801982a:	00db      	lsls	r3, r3, #3
 801982c:	68fa      	ldr	r2, [r7, #12]
 801982e:	4413      	add	r3, r2
 8019830:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019834:	edc3 7a01 	vstr	s15, [r3, #4]

         Fout[m].r -= scratch[0].i;
 8019838:	683b      	ldr	r3, [r7, #0]
 801983a:	00db      	lsls	r3, r3, #3
 801983c:	68fa      	ldr	r2, [r7, #12]
 801983e:	4413      	add	r3, r2
 8019840:	ed93 7a00 	vldr	s14, [r3]
 8019844:	edd7 7a07 	vldr	s15, [r7, #28]
 8019848:	683b      	ldr	r3, [r7, #0]
 801984a:	00db      	lsls	r3, r3, #3
 801984c:	68fa      	ldr	r2, [r7, #12]
 801984e:	4413      	add	r3, r2
 8019850:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019854:	edc3 7a00 	vstr	s15, [r3]
         Fout[m].i += scratch[0].r;
 8019858:	683b      	ldr	r3, [r7, #0]
 801985a:	00db      	lsls	r3, r3, #3
 801985c:	68fa      	ldr	r2, [r7, #12]
 801985e:	4413      	add	r3, r2
 8019860:	ed93 7a01 	vldr	s14, [r3, #4]
 8019864:	edd7 7a06 	vldr	s15, [r7, #24]
 8019868:	683b      	ldr	r3, [r7, #0]
 801986a:	00db      	lsls	r3, r3, #3
 801986c:	68fa      	ldr	r2, [r7, #12]
 801986e:	4413      	add	r3, r2
 8019870:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019874:	edc3 7a01 	vstr	s15, [r3, #4]

         ++Fout;
 8019878:	68fb      	ldr	r3, [r7, #12]
 801987a:	3308      	adds	r3, #8
 801987c:	60fb      	str	r3, [r7, #12]
     }while(--k);
 801987e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019880:	3b01      	subs	r3, #1
 8019882:	64fb      	str	r3, [r7, #76]	; 0x4c
 8019884:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019886:	2b00      	cmp	r3, #0
 8019888:	bf14      	ite	ne
 801988a:	2301      	movne	r3, #1
 801988c:	2300      	moveq	r3, #0
 801988e:	b2db      	uxtb	r3, r3
 8019890:	2b00      	cmp	r3, #0
 8019892:	d000      	beq.n	8019896 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x2d2>
     do{
 8019894:	e6b6      	b.n	8019604 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x40>
}
 8019896:	bf00      	nop
 8019898:	3750      	adds	r7, #80	; 0x50
 801989a:	46bd      	mov	sp, r7
 801989c:	bdb0      	pop	{r4, r5, r7, pc}
 801989e:	bf00      	nop
 80198a0:	3fe00000 	.word	0x3fe00000

080198a4 <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        int m
        )
{
 80198a4:	b480      	push	{r7}
 80198a6:	b0ab      	sub	sp, #172	; 0xac
 80198a8:	af00      	add	r7, sp, #0
 80198aa:	60f8      	str	r0, [r7, #12]
 80198ac:	60b9      	str	r1, [r7, #8]
 80198ae:	607a      	str	r2, [r7, #4]
 80198b0:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx *Fout0,*Fout1,*Fout2,*Fout3,*Fout4;
    int u;
    kiss_fft_cpx scratch[13];
    kiss_fft_cpx * twiddles = st->twiddles;
 80198b2:	687b      	ldr	r3, [r7, #4]
 80198b4:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80198b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    kiss_fft_cpx *tw;
    kiss_fft_cpx ya,yb;
    ya = twiddles[fstride*m];
 80198bc:	683b      	ldr	r3, [r7, #0]
 80198be:	68ba      	ldr	r2, [r7, #8]
 80198c0:	fb02 f303 	mul.w	r3, r2, r3
 80198c4:	00db      	lsls	r3, r3, #3
 80198c6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80198ca:	441a      	add	r2, r3
 80198cc:	f107 0318 	add.w	r3, r7, #24
 80198d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80198d4:	e883 0003 	stmia.w	r3, {r0, r1}
    yb = twiddles[fstride*2*m];
 80198d8:	683b      	ldr	r3, [r7, #0]
 80198da:	68ba      	ldr	r2, [r7, #8]
 80198dc:	fb02 f303 	mul.w	r3, r2, r3
 80198e0:	011b      	lsls	r3, r3, #4
 80198e2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80198e6:	441a      	add	r2, r3
 80198e8:	f107 0310 	add.w	r3, r7, #16
 80198ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80198f0:	e883 0003 	stmia.w	r3, {r0, r1}

    Fout0=Fout;
 80198f4:	68fb      	ldr	r3, [r7, #12]
 80198f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    Fout1=Fout0+m;
 80198fa:	683b      	ldr	r3, [r7, #0]
 80198fc:	00db      	lsls	r3, r3, #3
 80198fe:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8019902:	4413      	add	r3, r2
 8019904:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    Fout2=Fout0+2*m;
 8019908:	683b      	ldr	r3, [r7, #0]
 801990a:	011b      	lsls	r3, r3, #4
 801990c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8019910:	4413      	add	r3, r2
 8019912:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    Fout3=Fout0+3*m;
 8019916:	683a      	ldr	r2, [r7, #0]
 8019918:	4613      	mov	r3, r2
 801991a:	005b      	lsls	r3, r3, #1
 801991c:	4413      	add	r3, r2
 801991e:	00db      	lsls	r3, r3, #3
 8019920:	461a      	mov	r2, r3
 8019922:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8019926:	4413      	add	r3, r2
 8019928:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    Fout4=Fout0+4*m;
 801992c:	683b      	ldr	r3, [r7, #0]
 801992e:	015b      	lsls	r3, r3, #5
 8019930:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8019934:	4413      	add	r3, r2
 8019936:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    tw=st->twiddles;
 801993a:	687b      	ldr	r3, [r7, #4]
 801993c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8019940:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    for ( u=0; u<m; ++u ) {
 8019944:	2300      	movs	r3, #0
 8019946:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801994a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801994e:	683b      	ldr	r3, [r7, #0]
 8019950:	429a      	cmp	r2, r3
 8019952:	f280 82a9 	bge.w	8019ea8 <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei+0x604>
        C_FIXDIV( *Fout0,5); C_FIXDIV( *Fout1,5); C_FIXDIV( *Fout2,5); C_FIXDIV( *Fout3,5); C_FIXDIV( *Fout4,5);
        scratch[0] = *Fout0;
 8019956:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 801995a:	f107 0320 	add.w	r3, r7, #32
 801995e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019962:	e883 0003 	stmia.w	r3, {r0, r1}

        C_MUL(scratch[1] ,*Fout1, tw[u*fstride]);
 8019966:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801996a:	ed93 7a00 	vldr	s14, [r3]
 801996e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019972:	68ba      	ldr	r2, [r7, #8]
 8019974:	fb02 f303 	mul.w	r3, r2, r3
 8019978:	00db      	lsls	r3, r3, #3
 801997a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801997e:	4413      	add	r3, r2
 8019980:	edd3 7a00 	vldr	s15, [r3]
 8019984:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019988:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801998c:	edd3 6a01 	vldr	s13, [r3, #4]
 8019990:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019994:	68ba      	ldr	r2, [r7, #8]
 8019996:	fb02 f303 	mul.w	r3, r2, r3
 801999a:	00db      	lsls	r3, r3, #3
 801999c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80199a0:	4413      	add	r3, r2
 80199a2:	edd3 7a01 	vldr	s15, [r3, #4]
 80199a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80199aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80199ae:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 80199b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80199b6:	ed93 7a00 	vldr	s14, [r3]
 80199ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80199be:	68ba      	ldr	r2, [r7, #8]
 80199c0:	fb02 f303 	mul.w	r3, r2, r3
 80199c4:	00db      	lsls	r3, r3, #3
 80199c6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80199ca:	4413      	add	r3, r2
 80199cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80199d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80199d4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80199d8:	edd3 6a01 	vldr	s13, [r3, #4]
 80199dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80199e0:	68ba      	ldr	r2, [r7, #8]
 80199e2:	fb02 f303 	mul.w	r3, r2, r3
 80199e6:	00db      	lsls	r3, r3, #3
 80199e8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80199ec:	4413      	add	r3, r2
 80199ee:	edd3 7a00 	vldr	s15, [r3]
 80199f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80199f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80199fa:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
 80199fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8019a02:	ed93 7a00 	vldr	s14, [r3]
 8019a06:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019a0a:	68ba      	ldr	r2, [r7, #8]
 8019a0c:	fb02 f303 	mul.w	r3, r2, r3
 8019a10:	011b      	lsls	r3, r3, #4
 8019a12:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8019a16:	4413      	add	r3, r2
 8019a18:	edd3 7a00 	vldr	s15, [r3]
 8019a1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019a20:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8019a24:	edd3 6a01 	vldr	s13, [r3, #4]
 8019a28:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019a2c:	68ba      	ldr	r2, [r7, #8]
 8019a2e:	fb02 f303 	mul.w	r3, r2, r3
 8019a32:	011b      	lsls	r3, r3, #4
 8019a34:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8019a38:	4413      	add	r3, r2
 8019a3a:	edd3 7a01 	vldr	s15, [r3, #4]
 8019a3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019a42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019a46:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 8019a4a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8019a4e:	ed93 7a00 	vldr	s14, [r3]
 8019a52:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019a56:	68ba      	ldr	r2, [r7, #8]
 8019a58:	fb02 f303 	mul.w	r3, r2, r3
 8019a5c:	011b      	lsls	r3, r3, #4
 8019a5e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8019a62:	4413      	add	r3, r2
 8019a64:	edd3 7a01 	vldr	s15, [r3, #4]
 8019a68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019a6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8019a70:	edd3 6a01 	vldr	s13, [r3, #4]
 8019a74:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019a78:	68ba      	ldr	r2, [r7, #8]
 8019a7a:	fb02 f303 	mul.w	r3, r2, r3
 8019a7e:	011b      	lsls	r3, r3, #4
 8019a80:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8019a84:	4413      	add	r3, r2
 8019a86:	edd3 7a00 	vldr	s15, [r3]
 8019a8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019a8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019a92:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
 8019a96:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8019a9a:	ed93 7a00 	vldr	s14, [r3]
 8019a9e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019aa2:	68ba      	ldr	r2, [r7, #8]
 8019aa4:	fb03 f202 	mul.w	r2, r3, r2
 8019aa8:	4613      	mov	r3, r2
 8019aaa:	005b      	lsls	r3, r3, #1
 8019aac:	4413      	add	r3, r2
 8019aae:	00db      	lsls	r3, r3, #3
 8019ab0:	461a      	mov	r2, r3
 8019ab2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8019ab6:	4413      	add	r3, r2
 8019ab8:	edd3 7a00 	vldr	s15, [r3]
 8019abc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019ac0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8019ac4:	edd3 6a01 	vldr	s13, [r3, #4]
 8019ac8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019acc:	68ba      	ldr	r2, [r7, #8]
 8019ace:	fb03 f202 	mul.w	r2, r3, r2
 8019ad2:	4613      	mov	r3, r2
 8019ad4:	005b      	lsls	r3, r3, #1
 8019ad6:	4413      	add	r3, r2
 8019ad8:	00db      	lsls	r3, r3, #3
 8019ada:	461a      	mov	r2, r3
 8019adc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8019ae0:	4413      	add	r3, r2
 8019ae2:	edd3 7a01 	vldr	s15, [r3, #4]
 8019ae6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019aea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019aee:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 8019af2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8019af6:	ed93 7a00 	vldr	s14, [r3]
 8019afa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019afe:	68ba      	ldr	r2, [r7, #8]
 8019b00:	fb03 f202 	mul.w	r2, r3, r2
 8019b04:	4613      	mov	r3, r2
 8019b06:	005b      	lsls	r3, r3, #1
 8019b08:	4413      	add	r3, r2
 8019b0a:	00db      	lsls	r3, r3, #3
 8019b0c:	461a      	mov	r2, r3
 8019b0e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8019b12:	4413      	add	r3, r2
 8019b14:	edd3 7a01 	vldr	s15, [r3, #4]
 8019b18:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019b1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8019b20:	edd3 6a01 	vldr	s13, [r3, #4]
 8019b24:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019b28:	68ba      	ldr	r2, [r7, #8]
 8019b2a:	fb03 f202 	mul.w	r2, r3, r2
 8019b2e:	4613      	mov	r3, r2
 8019b30:	005b      	lsls	r3, r3, #1
 8019b32:	4413      	add	r3, r2
 8019b34:	00db      	lsls	r3, r3, #3
 8019b36:	461a      	mov	r2, r3
 8019b38:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8019b3c:	4413      	add	r3, r2
 8019b3e:	edd3 7a00 	vldr	s15, [r3]
 8019b42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019b46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019b4a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
 8019b4e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8019b52:	ed93 7a00 	vldr	s14, [r3]
 8019b56:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019b5a:	68ba      	ldr	r2, [r7, #8]
 8019b5c:	fb02 f303 	mul.w	r3, r2, r3
 8019b60:	015b      	lsls	r3, r3, #5
 8019b62:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8019b66:	4413      	add	r3, r2
 8019b68:	edd3 7a00 	vldr	s15, [r3]
 8019b6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019b70:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8019b74:	edd3 6a01 	vldr	s13, [r3, #4]
 8019b78:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019b7c:	68ba      	ldr	r2, [r7, #8]
 8019b7e:	fb02 f303 	mul.w	r3, r2, r3
 8019b82:	015b      	lsls	r3, r3, #5
 8019b84:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8019b88:	4413      	add	r3, r2
 8019b8a:	edd3 7a01 	vldr	s15, [r3, #4]
 8019b8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019b92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019b96:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 8019b9a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8019b9e:	ed93 7a00 	vldr	s14, [r3]
 8019ba2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019ba6:	68ba      	ldr	r2, [r7, #8]
 8019ba8:	fb02 f303 	mul.w	r3, r2, r3
 8019bac:	015b      	lsls	r3, r3, #5
 8019bae:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8019bb2:	4413      	add	r3, r2
 8019bb4:	edd3 7a01 	vldr	s15, [r3, #4]
 8019bb8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019bbc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8019bc0:	edd3 6a01 	vldr	s13, [r3, #4]
 8019bc4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019bc8:	68ba      	ldr	r2, [r7, #8]
 8019bca:	fb02 f303 	mul.w	r3, r2, r3
 8019bce:	015b      	lsls	r3, r3, #5
 8019bd0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8019bd4:	4413      	add	r3, r2
 8019bd6:	edd3 7a00 	vldr	s15, [r3]
 8019bda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019bde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019be2:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

        C_ADD( scratch[7],scratch[1],scratch[4]);
 8019be6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8019bea:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8019bee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019bf2:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
 8019bf6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8019bfa:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8019bfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019c02:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        C_SUB( scratch[10],scratch[1],scratch[4]);
 8019c06:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8019c0a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8019c0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019c12:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
 8019c16:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8019c1a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8019c1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019c22:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
        C_ADD( scratch[8],scratch[2],scratch[3]);
 8019c26:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8019c2a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8019c2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019c32:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
 8019c36:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8019c3a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8019c3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019c42:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
        C_SUB( scratch[9],scratch[2],scratch[3]);
 8019c46:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8019c4a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8019c4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019c52:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
 8019c56:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8019c5a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8019c5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019c62:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c

        Fout0->r += scratch[7].r + scratch[8].r;
 8019c66:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8019c6a:	ed93 7a00 	vldr	s14, [r3]
 8019c6e:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8019c72:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8019c76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8019c7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019c7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8019c82:	edc3 7a00 	vstr	s15, [r3]
        Fout0->i += scratch[7].i + scratch[8].i;
 8019c86:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8019c8a:	ed93 7a01 	vldr	s14, [r3, #4]
 8019c8e:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8019c92:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8019c96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8019c9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019c9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8019ca2:	edc3 7a01 	vstr	s15, [r3, #4]

        scratch[5].r = scratch[0].r + S_MUL(scratch[7].r,ya.r) + S_MUL(scratch[8].r,yb.r);
 8019ca6:	ed97 7a08 	vldr	s14, [r7, #32]
 8019caa:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8019cae:	edd7 7a06 	vldr	s15, [r7, #24]
 8019cb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019cb6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019cba:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 8019cbe:	edd7 7a04 	vldr	s15, [r7, #16]
 8019cc2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019cc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019cca:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        scratch[5].i = scratch[0].i + S_MUL(scratch[7].i,ya.r) + S_MUL(scratch[8].i,yb.r);
 8019cce:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8019cd2:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8019cd6:	edd7 7a06 	vldr	s15, [r7, #24]
 8019cda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019cde:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019ce2:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8019ce6:	edd7 7a04 	vldr	s15, [r7, #16]
 8019cea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019cee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019cf2:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

        scratch[6].r =  S_MUL(scratch[10].i,ya.i) + S_MUL(scratch[9].i,yb.i);
 8019cf6:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8019cfa:	edd7 7a07 	vldr	s15, [r7, #28]
 8019cfe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019d02:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8019d06:	edd7 7a05 	vldr	s15, [r7, #20]
 8019d0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019d0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019d12:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        scratch[6].i = -S_MUL(scratch[10].r,ya.i) - S_MUL(scratch[9].r,yb.i);
 8019d16:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8019d1a:	edd7 7a07 	vldr	s15, [r7, #28]
 8019d1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019d22:	eeb1 7a67 	vneg.f32	s14, s15
 8019d26:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8019d2a:	edd7 7a05 	vldr	s15, [r7, #20]
 8019d2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019d32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019d36:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

        C_SUB(*Fout1,scratch[5],scratch[6]);
 8019d3a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8019d3e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8019d42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019d46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8019d4a:	edc3 7a00 	vstr	s15, [r3]
 8019d4e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8019d52:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8019d56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019d5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8019d5e:	edc3 7a01 	vstr	s15, [r3, #4]
        C_ADD(*Fout4,scratch[5],scratch[6]);
 8019d62:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8019d66:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8019d6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019d6e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8019d72:	edc3 7a00 	vstr	s15, [r3]
 8019d76:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8019d7a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8019d7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019d82:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8019d86:	edc3 7a01 	vstr	s15, [r3, #4]

        scratch[11].r = scratch[0].r + S_MUL(scratch[7].r,yb.r) + S_MUL(scratch[8].r,ya.r);
 8019d8a:	ed97 7a08 	vldr	s14, [r7, #32]
 8019d8e:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8019d92:	edd7 7a04 	vldr	s15, [r7, #16]
 8019d96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019d9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019d9e:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 8019da2:	edd7 7a06 	vldr	s15, [r7, #24]
 8019da6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019daa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019dae:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
        scratch[11].i = scratch[0].i + S_MUL(scratch[7].i,yb.r) + S_MUL(scratch[8].i,ya.r);
 8019db2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8019db6:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8019dba:	edd7 7a04 	vldr	s15, [r7, #16]
 8019dbe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019dc2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019dc6:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8019dca:	edd7 7a06 	vldr	s15, [r7, #24]
 8019dce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019dd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019dd6:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
        scratch[12].r = - S_MUL(scratch[10].i,yb.i) + S_MUL(scratch[9].i,ya.i);
 8019dda:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8019dde:	edd7 7a07 	vldr	s15, [r7, #28]
 8019de2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019de6:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 8019dea:	edd7 7a05 	vldr	s15, [r7, #20]
 8019dee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019df2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019df6:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
        scratch[12].i = S_MUL(scratch[10].r,yb.i) - S_MUL(scratch[9].r,ya.i);
 8019dfa:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8019dfe:	edd7 7a05 	vldr	s15, [r7, #20]
 8019e02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019e06:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8019e0a:	edd7 7a07 	vldr	s15, [r7, #28]
 8019e0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019e12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019e16:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84

        C_ADD(*Fout2,scratch[11],scratch[12]);
 8019e1a:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8019e1e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8019e22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019e26:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8019e2a:	edc3 7a00 	vstr	s15, [r3]
 8019e2e:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8019e32:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8019e36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019e3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8019e3e:	edc3 7a01 	vstr	s15, [r3, #4]
        C_SUB(*Fout3,scratch[11],scratch[12]);
 8019e42:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8019e46:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8019e4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019e4e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8019e52:	edc3 7a00 	vstr	s15, [r3]
 8019e56:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8019e5a:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8019e5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019e62:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8019e66:	edc3 7a01 	vstr	s15, [r3, #4]

        ++Fout0;++Fout1;++Fout2;++Fout3;++Fout4;
 8019e6a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8019e6e:	3308      	adds	r3, #8
 8019e70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8019e74:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8019e78:	3308      	adds	r3, #8
 8019e7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8019e7e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8019e82:	3308      	adds	r3, #8
 8019e84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8019e88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8019e8c:	3308      	adds	r3, #8
 8019e8e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8019e92:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8019e96:	3308      	adds	r3, #8
 8019e98:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    for ( u=0; u<m; ++u ) {
 8019e9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019ea0:	3301      	adds	r3, #1
 8019ea2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8019ea6:	e550      	b.n	801994a <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei+0xa6>
    }
}
 8019ea8:	bf00      	nop
 8019eaa:	37ac      	adds	r7, #172	; 0xac
 8019eac:	46bd      	mov	sp, r7
 8019eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019eb2:	4770      	bx	lr

08019eb4 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii>:
        const size_t fstride,
        const kiss_fft_cfg st,
        int m,
        int p
        )
{
 8019eb4:	b580      	push	{r7, lr}
 8019eb6:	b08e      	sub	sp, #56	; 0x38
 8019eb8:	af00      	add	r7, sp, #0
 8019eba:	60f8      	str	r0, [r7, #12]
 8019ebc:	60b9      	str	r1, [r7, #8]
 8019ebe:	607a      	str	r2, [r7, #4]
 8019ec0:	603b      	str	r3, [r7, #0]
    int u,k,q1,q;
    kiss_fft_cpx * twiddles = st->twiddles;
 8019ec2:	687b      	ldr	r3, [r7, #4]
 8019ec4:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8019ec8:	623b      	str	r3, [r7, #32]
    kiss_fft_cpx t;
    int Norig = st->nfft;
 8019eca:	687b      	ldr	r3, [r7, #4]
 8019ecc:	681b      	ldr	r3, [r3, #0]
 8019ece:	61fb      	str	r3, [r7, #28]

    kiss_fft_cpx * scratch = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC(sizeof(kiss_fft_cpx)*p);
 8019ed0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019ed2:	00db      	lsls	r3, r3, #3
 8019ed4:	4618      	mov	r0, r3
 8019ed6:	f000 fe97 	bl	801ac08 <_Z9ei_mallocj>
 8019eda:	61b8      	str	r0, [r7, #24]

    for ( u=0; u<m; ++u ) {
 8019edc:	2300      	movs	r3, #0
 8019ede:	637b      	str	r3, [r7, #52]	; 0x34
 8019ee0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019ee2:	683b      	ldr	r3, [r7, #0]
 8019ee4:	429a      	cmp	r2, r3
 8019ee6:	f280 80b6 	bge.w	801a056 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x1a2>
        k=u;
 8019eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019eec:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 8019eee:	2300      	movs	r3, #0
 8019ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019ef2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019ef4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019ef6:	429a      	cmp	r2, r3
 8019ef8:	da14      	bge.n	8019f24 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x70>
            scratch[q1] = Fout[ k  ];
 8019efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019efc:	00db      	lsls	r3, r3, #3
 8019efe:	68fa      	ldr	r2, [r7, #12]
 8019f00:	18d1      	adds	r1, r2, r3
 8019f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f04:	00db      	lsls	r3, r3, #3
 8019f06:	69ba      	ldr	r2, [r7, #24]
 8019f08:	4413      	add	r3, r2
 8019f0a:	460a      	mov	r2, r1
 8019f0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019f10:	e883 0003 	stmia.w	r3, {r0, r1}
            C_FIXDIV(scratch[q1],p);
            k += m;
 8019f14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019f16:	683b      	ldr	r3, [r7, #0]
 8019f18:	4413      	add	r3, r2
 8019f1a:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 8019f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f1e:	3301      	adds	r3, #1
 8019f20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019f22:	e7e6      	b.n	8019ef2 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x3e>
        }

        k=u;
 8019f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019f26:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 8019f28:	2300      	movs	r3, #0
 8019f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019f2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019f2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019f30:	429a      	cmp	r2, r3
 8019f32:	f280 808c 	bge.w	801a04e <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x19a>
            int twidx=0;
 8019f36:	2300      	movs	r3, #0
 8019f38:	627b      	str	r3, [r7, #36]	; 0x24
            Fout[ k ] = scratch[0];
 8019f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f3c:	00db      	lsls	r3, r3, #3
 8019f3e:	68fa      	ldr	r2, [r7, #12]
 8019f40:	4413      	add	r3, r2
 8019f42:	69ba      	ldr	r2, [r7, #24]
 8019f44:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019f48:	e883 0003 	stmia.w	r3, {r0, r1}
            for (q=1;q<p;++q ) {
 8019f4c:	2301      	movs	r3, #1
 8019f4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8019f50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019f52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019f54:	429a      	cmp	r2, r3
 8019f56:	da72      	bge.n	801a03e <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x18a>
                twidx += fstride * k;
 8019f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f5a:	68ba      	ldr	r2, [r7, #8]
 8019f5c:	fb03 f202 	mul.w	r2, r3, r2
 8019f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f62:	4413      	add	r3, r2
 8019f64:	627b      	str	r3, [r7, #36]	; 0x24
                if (twidx>=Norig) twidx-=Norig;
 8019f66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019f68:	69fb      	ldr	r3, [r7, #28]
 8019f6a:	429a      	cmp	r2, r3
 8019f6c:	db03      	blt.n	8019f76 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0xc2>
 8019f6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019f70:	69fb      	ldr	r3, [r7, #28]
 8019f72:	1ad3      	subs	r3, r2, r3
 8019f74:	627b      	str	r3, [r7, #36]	; 0x24
                C_MUL(t,scratch[q] , twiddles[twidx] );
 8019f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f78:	00db      	lsls	r3, r3, #3
 8019f7a:	69ba      	ldr	r2, [r7, #24]
 8019f7c:	4413      	add	r3, r2
 8019f7e:	ed93 7a00 	vldr	s14, [r3]
 8019f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f84:	00db      	lsls	r3, r3, #3
 8019f86:	6a3a      	ldr	r2, [r7, #32]
 8019f88:	4413      	add	r3, r2
 8019f8a:	edd3 7a00 	vldr	s15, [r3]
 8019f8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f94:	00db      	lsls	r3, r3, #3
 8019f96:	69ba      	ldr	r2, [r7, #24]
 8019f98:	4413      	add	r3, r2
 8019f9a:	edd3 6a01 	vldr	s13, [r3, #4]
 8019f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fa0:	00db      	lsls	r3, r3, #3
 8019fa2:	6a3a      	ldr	r2, [r7, #32]
 8019fa4:	4413      	add	r3, r2
 8019fa6:	edd3 7a01 	vldr	s15, [r3, #4]
 8019faa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019fae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019fb2:	edc7 7a04 	vstr	s15, [r7, #16]
 8019fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019fb8:	00db      	lsls	r3, r3, #3
 8019fba:	69ba      	ldr	r2, [r7, #24]
 8019fbc:	4413      	add	r3, r2
 8019fbe:	ed93 7a00 	vldr	s14, [r3]
 8019fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fc4:	00db      	lsls	r3, r3, #3
 8019fc6:	6a3a      	ldr	r2, [r7, #32]
 8019fc8:	4413      	add	r3, r2
 8019fca:	edd3 7a01 	vldr	s15, [r3, #4]
 8019fce:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019fd4:	00db      	lsls	r3, r3, #3
 8019fd6:	69ba      	ldr	r2, [r7, #24]
 8019fd8:	4413      	add	r3, r2
 8019fda:	edd3 6a01 	vldr	s13, [r3, #4]
 8019fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fe0:	00db      	lsls	r3, r3, #3
 8019fe2:	6a3a      	ldr	r2, [r7, #32]
 8019fe4:	4413      	add	r3, r2
 8019fe6:	edd3 7a00 	vldr	s15, [r3]
 8019fea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019fee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019ff2:	edc7 7a05 	vstr	s15, [r7, #20]
                C_ADDTO( Fout[ k ] ,t);
 8019ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019ff8:	00db      	lsls	r3, r3, #3
 8019ffa:	68fa      	ldr	r2, [r7, #12]
 8019ffc:	4413      	add	r3, r2
 8019ffe:	ed93 7a00 	vldr	s14, [r3]
 801a002:	edd7 7a04 	vldr	s15, [r7, #16]
 801a006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a008:	00db      	lsls	r3, r3, #3
 801a00a:	68fa      	ldr	r2, [r7, #12]
 801a00c:	4413      	add	r3, r2
 801a00e:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a012:	edc3 7a00 	vstr	s15, [r3]
 801a016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a018:	00db      	lsls	r3, r3, #3
 801a01a:	68fa      	ldr	r2, [r7, #12]
 801a01c:	4413      	add	r3, r2
 801a01e:	ed93 7a01 	vldr	s14, [r3, #4]
 801a022:	edd7 7a05 	vldr	s15, [r7, #20]
 801a026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a028:	00db      	lsls	r3, r3, #3
 801a02a:	68fa      	ldr	r2, [r7, #12]
 801a02c:	4413      	add	r3, r2
 801a02e:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a032:	edc3 7a01 	vstr	s15, [r3, #4]
            for (q=1;q<p;++q ) {
 801a036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a038:	3301      	adds	r3, #1
 801a03a:	62bb      	str	r3, [r7, #40]	; 0x28
 801a03c:	e788      	b.n	8019f50 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x9c>
            }
            k += m;
 801a03e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a040:	683b      	ldr	r3, [r7, #0]
 801a042:	4413      	add	r3, r2
 801a044:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 801a046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a048:	3301      	adds	r3, #1
 801a04a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a04c:	e76e      	b.n	8019f2c <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x78>
    for ( u=0; u<m; ++u ) {
 801a04e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a050:	3301      	adds	r3, #1
 801a052:	637b      	str	r3, [r7, #52]	; 0x34
 801a054:	e744      	b.n	8019ee0 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x2c>
        }
    }
    KISS_FFT_TMP_FREE(scratch);
 801a056:	69b8      	ldr	r0, [r7, #24]
 801a058:	f000 fdf0 	bl	801ac3c <_Z7ei_freePv>
}
 801a05c:	bf00      	nop
 801a05e:	3738      	adds	r7, #56	; 0x38
 801a060:	46bd      	mov	sp, r7
 801a062:	bd80      	pop	{r7, pc}

0801a064 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>:
        const size_t fstride,
        int in_stride,
        int * factors,
        const kiss_fft_cfg st
        )
{
 801a064:	b580      	push	{r7, lr}
 801a066:	b08a      	sub	sp, #40	; 0x28
 801a068:	af02      	add	r7, sp, #8
 801a06a:	60f8      	str	r0, [r7, #12]
 801a06c:	60b9      	str	r1, [r7, #8]
 801a06e:	607a      	str	r2, [r7, #4]
 801a070:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx * Fout_beg=Fout;
 801a072:	68fb      	ldr	r3, [r7, #12]
 801a074:	61fb      	str	r3, [r7, #28]
    const int p=*factors++; /* the radix  */
 801a076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a078:	1d1a      	adds	r2, r3, #4
 801a07a:	62ba      	str	r2, [r7, #40]	; 0x28
 801a07c:	681b      	ldr	r3, [r3, #0]
 801a07e:	61bb      	str	r3, [r7, #24]
    const int m=*factors++; /* stage's fft length/p */
 801a080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a082:	1d1a      	adds	r2, r3, #4
 801a084:	62ba      	str	r2, [r7, #40]	; 0x28
 801a086:	681b      	ldr	r3, [r3, #0]
 801a088:	617b      	str	r3, [r7, #20]
    const kiss_fft_cpx * Fout_end = Fout + p*m;
 801a08a:	69bb      	ldr	r3, [r7, #24]
 801a08c:	697a      	ldr	r2, [r7, #20]
 801a08e:	fb02 f303 	mul.w	r3, r2, r3
 801a092:	00db      	lsls	r3, r3, #3
 801a094:	68fa      	ldr	r2, [r7, #12]
 801a096:	4413      	add	r3, r2
 801a098:	613b      	str	r3, [r7, #16]
        }
        return;
    }
#endif

    if (m==1) {
 801a09a:	697b      	ldr	r3, [r7, #20]
 801a09c:	2b01      	cmp	r3, #1
 801a09e:	d11a      	bne.n	801a0d6 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x72>
        do{
            *Fout = *f;
 801a0a0:	68fb      	ldr	r3, [r7, #12]
 801a0a2:	68ba      	ldr	r2, [r7, #8]
 801a0a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a0a8:	e883 0003 	stmia.w	r3, {r0, r1}
            f += fstride*in_stride;
 801a0ac:	683b      	ldr	r3, [r7, #0]
 801a0ae:	687a      	ldr	r2, [r7, #4]
 801a0b0:	fb02 f303 	mul.w	r3, r2, r3
 801a0b4:	00db      	lsls	r3, r3, #3
 801a0b6:	68ba      	ldr	r2, [r7, #8]
 801a0b8:	4413      	add	r3, r2
 801a0ba:	60bb      	str	r3, [r7, #8]
        }while(++Fout != Fout_end );
 801a0bc:	68fb      	ldr	r3, [r7, #12]
 801a0be:	3308      	adds	r3, #8
 801a0c0:	60fb      	str	r3, [r7, #12]
 801a0c2:	68fa      	ldr	r2, [r7, #12]
 801a0c4:	693b      	ldr	r3, [r7, #16]
 801a0c6:	429a      	cmp	r2, r3
 801a0c8:	bf14      	ite	ne
 801a0ca:	2301      	movne	r3, #1
 801a0cc:	2300      	moveq	r3, #0
 801a0ce:	b2db      	uxtb	r3, r3
 801a0d0:	2b00      	cmp	r3, #0
 801a0d2:	d024      	beq.n	801a11e <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xba>
        do{
 801a0d4:	e7e4      	b.n	801a0a0 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x3c>
        do{
            // recursive call:
            // DFT of size m*p performed by doing
            // p instances of smaller DFTs of size m,
            // each one takes a decimated version of the input
            kf_work( Fout , f, fstride*p, in_stride, factors,st);
 801a0d6:	69bb      	ldr	r3, [r7, #24]
 801a0d8:	687a      	ldr	r2, [r7, #4]
 801a0da:	fb03 f202 	mul.w	r2, r3, r2
 801a0de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0e0:	9301      	str	r3, [sp, #4]
 801a0e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a0e4:	9300      	str	r3, [sp, #0]
 801a0e6:	683b      	ldr	r3, [r7, #0]
 801a0e8:	68b9      	ldr	r1, [r7, #8]
 801a0ea:	68f8      	ldr	r0, [r7, #12]
 801a0ec:	f7ff ffba 	bl	801a064 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
            f += fstride*in_stride;
 801a0f0:	683b      	ldr	r3, [r7, #0]
 801a0f2:	687a      	ldr	r2, [r7, #4]
 801a0f4:	fb02 f303 	mul.w	r3, r2, r3
 801a0f8:	00db      	lsls	r3, r3, #3
 801a0fa:	68ba      	ldr	r2, [r7, #8]
 801a0fc:	4413      	add	r3, r2
 801a0fe:	60bb      	str	r3, [r7, #8]
        }while( (Fout += m) != Fout_end );
 801a100:	697b      	ldr	r3, [r7, #20]
 801a102:	00db      	lsls	r3, r3, #3
 801a104:	68fa      	ldr	r2, [r7, #12]
 801a106:	4413      	add	r3, r2
 801a108:	60fb      	str	r3, [r7, #12]
 801a10a:	68fa      	ldr	r2, [r7, #12]
 801a10c:	693b      	ldr	r3, [r7, #16]
 801a10e:	429a      	cmp	r2, r3
 801a110:	bf14      	ite	ne
 801a112:	2301      	movne	r3, #1
 801a114:	2300      	moveq	r3, #0
 801a116:	b2db      	uxtb	r3, r3
 801a118:	2b00      	cmp	r3, #0
 801a11a:	d000      	beq.n	801a11e <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xba>
        do{
 801a11c:	e7db      	b.n	801a0d6 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x72>
    }

    Fout=Fout_beg;
 801a11e:	69fb      	ldr	r3, [r7, #28]
 801a120:	60fb      	str	r3, [r7, #12]

    // recombine the p smaller DFTs
    switch (p) {
 801a122:	69bb      	ldr	r3, [r7, #24]
 801a124:	3b02      	subs	r3, #2
 801a126:	2b03      	cmp	r3, #3
 801a128:	d826      	bhi.n	801a178 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x114>
 801a12a:	a201      	add	r2, pc, #4	; (adr r2, 801a130 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xcc>)
 801a12c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a130:	0801a141 	.word	0x0801a141
 801a134:	0801a14f 	.word	0x0801a14f
 801a138:	0801a15d 	.word	0x0801a15d
 801a13c:	0801a16b 	.word	0x0801a16b
        case 2: kf_bfly2(Fout,fstride,st,m); break;
 801a140:	697b      	ldr	r3, [r7, #20]
 801a142:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a144:	6879      	ldr	r1, [r7, #4]
 801a146:	68f8      	ldr	r0, [r7, #12]
 801a148:	f7ff f808 	bl	801915c <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei>
 801a14c:	e01d      	b.n	801a18a <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        case 3: kf_bfly3(Fout,fstride,st,m); break;
 801a14e:	697b      	ldr	r3, [r7, #20]
 801a150:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a152:	6879      	ldr	r1, [r7, #4]
 801a154:	68f8      	ldr	r0, [r7, #12]
 801a156:	f7ff fa35 	bl	80195c4 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej>
 801a15a:	e016      	b.n	801a18a <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        case 4: kf_bfly4(Fout,fstride,st,m); break;
 801a15c:	697b      	ldr	r3, [r7, #20]
 801a15e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a160:	6879      	ldr	r1, [r7, #4]
 801a162:	68f8      	ldr	r0, [r7, #12]
 801a164:	f7ff f877 	bl	8019256 <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej>
 801a168:	e00f      	b.n	801a18a <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        case 5: kf_bfly5(Fout,fstride,st,m); break;
 801a16a:	697b      	ldr	r3, [r7, #20]
 801a16c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a16e:	6879      	ldr	r1, [r7, #4]
 801a170:	68f8      	ldr	r0, [r7, #12]
 801a172:	f7ff fb97 	bl	80198a4 <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei>
 801a176:	e008      	b.n	801a18a <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        default: kf_bfly_generic(Fout,fstride,st,m,p); break;
 801a178:	69bb      	ldr	r3, [r7, #24]
 801a17a:	9300      	str	r3, [sp, #0]
 801a17c:	697b      	ldr	r3, [r7, #20]
 801a17e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a180:	6879      	ldr	r1, [r7, #4]
 801a182:	68f8      	ldr	r0, [r7, #12]
 801a184:	f7ff fe96 	bl	8019eb4 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii>
 801a188:	bf00      	nop
    }
}
 801a18a:	bf00      	nop
 801a18c:	3720      	adds	r7, #32
 801a18e:	46bd      	mov	sp, r7
 801a190:	bd80      	pop	{r7, pc}
 801a192:	bf00      	nop

0801a194 <_ZL9kf_factoriPi>:
    where
    p[i] * m[i] = m[i-1]
    m0 = n                  */
static
void kf_factor(int n,int * facbuf)
{
 801a194:	b580      	push	{r7, lr}
 801a196:	b086      	sub	sp, #24
 801a198:	af00      	add	r7, sp, #0
 801a19a:	6078      	str	r0, [r7, #4]
 801a19c:	6039      	str	r1, [r7, #0]
    int p=4;
 801a19e:	2304      	movs	r3, #4
 801a1a0:	617b      	str	r3, [r7, #20]
    double floor_sqrt;
    floor_sqrt = floor( sqrt((double)n) );
 801a1a2:	6878      	ldr	r0, [r7, #4]
 801a1a4:	f7e6 f9c8 	bl	8000538 <__aeabi_i2d>
 801a1a8:	4602      	mov	r2, r0
 801a1aa:	460b      	mov	r3, r1
 801a1ac:	ec43 2b10 	vmov	d0, r2, r3
 801a1b0:	f006 fea4 	bl	8020efc <sqrt>
 801a1b4:	eeb0 7a40 	vmov.f32	s14, s0
 801a1b8:	eef0 7a60 	vmov.f32	s15, s1
 801a1bc:	eeb0 0a47 	vmov.f32	s0, s14
 801a1c0:	eef0 0a67 	vmov.f32	s1, s15
 801a1c4:	f006 fc54 	bl	8020a70 <floor>
 801a1c8:	ed87 0b02 	vstr	d0, [r7, #8]

    /*factor out powers of 4, powers of 2, then any remaining primes */
    do {
        while (n % p) {
 801a1cc:	687b      	ldr	r3, [r7, #4]
 801a1ce:	697a      	ldr	r2, [r7, #20]
 801a1d0:	fb93 f2f2 	sdiv	r2, r3, r2
 801a1d4:	6979      	ldr	r1, [r7, #20]
 801a1d6:	fb01 f202 	mul.w	r2, r1, r2
 801a1da:	1a9b      	subs	r3, r3, r2
 801a1dc:	2b00      	cmp	r3, #0
 801a1de:	d01e      	beq.n	801a21e <_ZL9kf_factoriPi+0x8a>
            switch (p) {
 801a1e0:	697b      	ldr	r3, [r7, #20]
 801a1e2:	2b02      	cmp	r3, #2
 801a1e4:	d005      	beq.n	801a1f2 <_ZL9kf_factoriPi+0x5e>
 801a1e6:	697b      	ldr	r3, [r7, #20]
 801a1e8:	2b04      	cmp	r3, #4
 801a1ea:	d105      	bne.n	801a1f8 <_ZL9kf_factoriPi+0x64>
                case 4: p = 2; break;
 801a1ec:	2302      	movs	r3, #2
 801a1ee:	617b      	str	r3, [r7, #20]
 801a1f0:	e006      	b.n	801a200 <_ZL9kf_factoriPi+0x6c>
                case 2: p = 3; break;
 801a1f2:	2303      	movs	r3, #3
 801a1f4:	617b      	str	r3, [r7, #20]
 801a1f6:	e003      	b.n	801a200 <_ZL9kf_factoriPi+0x6c>
                default: p += 2; break;
 801a1f8:	697b      	ldr	r3, [r7, #20]
 801a1fa:	3302      	adds	r3, #2
 801a1fc:	617b      	str	r3, [r7, #20]
 801a1fe:	bf00      	nop
            }
            if (p > floor_sqrt)
 801a200:	6978      	ldr	r0, [r7, #20]
 801a202:	f7e6 f999 	bl	8000538 <__aeabi_i2d>
 801a206:	4602      	mov	r2, r0
 801a208:	460b      	mov	r3, r1
 801a20a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801a20e:	f7e6 fc6f 	bl	8000af0 <__aeabi_dcmplt>
 801a212:	4603      	mov	r3, r0
 801a214:	2b00      	cmp	r3, #0
 801a216:	d001      	beq.n	801a21c <_ZL9kf_factoriPi+0x88>
                p = n;          /* no more factors, skip to end */
 801a218:	687b      	ldr	r3, [r7, #4]
 801a21a:	617b      	str	r3, [r7, #20]
        while (n % p) {
 801a21c:	e7d6      	b.n	801a1cc <_ZL9kf_factoriPi+0x38>
        }
        n /= p;
 801a21e:	687a      	ldr	r2, [r7, #4]
 801a220:	697b      	ldr	r3, [r7, #20]
 801a222:	fb92 f3f3 	sdiv	r3, r2, r3
 801a226:	607b      	str	r3, [r7, #4]
        *facbuf++ = p;
 801a228:	683b      	ldr	r3, [r7, #0]
 801a22a:	1d1a      	adds	r2, r3, #4
 801a22c:	603a      	str	r2, [r7, #0]
 801a22e:	697a      	ldr	r2, [r7, #20]
 801a230:	601a      	str	r2, [r3, #0]
        *facbuf++ = n;
 801a232:	683b      	ldr	r3, [r7, #0]
 801a234:	1d1a      	adds	r2, r3, #4
 801a236:	603a      	str	r2, [r7, #0]
 801a238:	687a      	ldr	r2, [r7, #4]
 801a23a:	601a      	str	r2, [r3, #0]
    } while (n > 1);
 801a23c:	687b      	ldr	r3, [r7, #4]
 801a23e:	2b01      	cmp	r3, #1
 801a240:	dd00      	ble.n	801a244 <_ZL9kf_factoriPi+0xb0>
    do {
 801a242:	e7c3      	b.n	801a1cc <_ZL9kf_factoriPi+0x38>
}
 801a244:	bf00      	nop
 801a246:	3718      	adds	r7, #24
 801a248:	46bd      	mov	sp, r7
 801a24a:	bd80      	pop	{r7, pc}
 801a24c:	0000      	movs	r0, r0
	...

0801a250 <kiss_fft_alloc>:
 *
 * The return value is a contiguous block of memory, allocated with malloc.  As such,
 * It can be freed with free(), rather than a kiss_fft-specific function.
 * */
kiss_fft_cfg kiss_fft_alloc(int nfft,int inverse_fft,void * mem,size_t * lenmem,size_t * memallocated )
{
 801a250:	b5b0      	push	{r4, r5, r7, lr}
 801a252:	b090      	sub	sp, #64	; 0x40
 801a254:	af00      	add	r7, sp, #0
 801a256:	60f8      	str	r0, [r7, #12]
 801a258:	60b9      	str	r1, [r7, #8]
 801a25a:	607a      	str	r2, [r7, #4]
 801a25c:	603b      	str	r3, [r7, #0]
    kiss_fft_cfg st=NULL;
 801a25e:	2300      	movs	r3, #0
 801a260:	63fb      	str	r3, [r7, #60]	; 0x3c
    size_t memneeded = sizeof(struct kiss_fft_state)
        + sizeof(kiss_fft_cpx)*(nfft-1); /* twiddle factors*/
 801a262:	68fb      	ldr	r3, [r7, #12]
 801a264:	3321      	adds	r3, #33	; 0x21
    size_t memneeded = sizeof(struct kiss_fft_state)
 801a266:	00db      	lsls	r3, r3, #3
 801a268:	637b      	str	r3, [r7, #52]	; 0x34

    if ( lenmem==NULL ) {
 801a26a:	683b      	ldr	r3, [r7, #0]
 801a26c:	2b00      	cmp	r3, #0
 801a26e:	d104      	bne.n	801a27a <kiss_fft_alloc+0x2a>
        st = ( kiss_fft_cfg)KISS_FFT_MALLOC( memneeded );
 801a270:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801a272:	f000 fcc9 	bl	801ac08 <_Z9ei_mallocj>
 801a276:	63f8      	str	r0, [r7, #60]	; 0x3c
 801a278:	e00c      	b.n	801a294 <kiss_fft_alloc+0x44>
    }else{
        if (mem != NULL && *lenmem >= memneeded)
 801a27a:	687b      	ldr	r3, [r7, #4]
 801a27c:	2b00      	cmp	r3, #0
 801a27e:	d006      	beq.n	801a28e <kiss_fft_alloc+0x3e>
 801a280:	683b      	ldr	r3, [r7, #0]
 801a282:	681b      	ldr	r3, [r3, #0]
 801a284:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a286:	429a      	cmp	r2, r3
 801a288:	d801      	bhi.n	801a28e <kiss_fft_alloc+0x3e>
            st = (kiss_fft_cfg)mem;
 801a28a:	687b      	ldr	r3, [r7, #4]
 801a28c:	63fb      	str	r3, [r7, #60]	; 0x3c
        *lenmem = memneeded;
 801a28e:	683b      	ldr	r3, [r7, #0]
 801a290:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a292:	601a      	str	r2, [r3, #0]
    }
    if (st) {
 801a294:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a296:	2b00      	cmp	r3, #0
 801a298:	f000 80a0 	beq.w	801a3dc <kiss_fft_alloc+0x18c>
        int i;
        st->nfft=nfft;
 801a29c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a29e:	68fa      	ldr	r2, [r7, #12]
 801a2a0:	601a      	str	r2, [r3, #0]
        st->inverse = inverse_fft;
 801a2a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a2a4:	68ba      	ldr	r2, [r7, #8]
 801a2a6:	605a      	str	r2, [r3, #4]
        if (inverse_fft)
 801a2a8:	68bb      	ldr	r3, [r7, #8]
 801a2aa:	2b00      	cmp	r3, #0
 801a2ac:	d048      	beq.n	801a340 <kiss_fft_alloc+0xf0>
        {
            for (i=0;i<nfft;++i) {
 801a2ae:	2300      	movs	r3, #0
 801a2b0:	63bb      	str	r3, [r7, #56]	; 0x38
 801a2b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801a2b4:	68fb      	ldr	r3, [r7, #12]
 801a2b6:	429a      	cmp	r2, r3
 801a2b8:	f280 808a 	bge.w	801a3d0 <kiss_fft_alloc+0x180>
                const double pi=3.141592653589793238462643383279502884197169399375105820974944;
 801a2bc:	a34e      	add	r3, pc, #312	; (adr r3, 801a3f8 <kiss_fft_alloc+0x1a8>)
 801a2be:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2c2:	e9c7 2306 	strd	r2, r3, [r7, #24]
                double phase = 2*pi*i / nfft;
 801a2c6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801a2c8:	f7e6 f936 	bl	8000538 <__aeabi_i2d>
 801a2cc:	a34c      	add	r3, pc, #304	; (adr r3, 801a400 <kiss_fft_alloc+0x1b0>)
 801a2ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2d2:	f7e6 f99b 	bl	800060c <__aeabi_dmul>
 801a2d6:	4602      	mov	r2, r0
 801a2d8:	460b      	mov	r3, r1
 801a2da:	4614      	mov	r4, r2
 801a2dc:	461d      	mov	r5, r3
 801a2de:	68f8      	ldr	r0, [r7, #12]
 801a2e0:	f7e6 f92a 	bl	8000538 <__aeabi_i2d>
 801a2e4:	4602      	mov	r2, r0
 801a2e6:	460b      	mov	r3, r1
 801a2e8:	4620      	mov	r0, r4
 801a2ea:	4629      	mov	r1, r5
 801a2ec:	f7e6 fab8 	bl	8000860 <__aeabi_ddiv>
 801a2f0:	4602      	mov	r2, r0
 801a2f2:	460b      	mov	r3, r1
 801a2f4:	e9c7 2304 	strd	r2, r3, [r7, #16]
                kf_cexp(st->twiddles+i, phase );
 801a2f8:	ed97 0b04 	vldr	d0, [r7, #16]
 801a2fc:	f006 fb64 	bl	80209c8 <cos>
 801a300:	ec51 0b10 	vmov	r0, r1, d0
 801a304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a306:	f503 7284 	add.w	r2, r3, #264	; 0x108
 801a30a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a30c:	00db      	lsls	r3, r3, #3
 801a30e:	18d4      	adds	r4, r2, r3
 801a310:	f7e6 fc74 	bl	8000bfc <__aeabi_d2f>
 801a314:	4603      	mov	r3, r0
 801a316:	6023      	str	r3, [r4, #0]
 801a318:	ed97 0b04 	vldr	d0, [r7, #16]
 801a31c:	f006 fca8 	bl	8020c70 <sin>
 801a320:	ec51 0b10 	vmov	r0, r1, d0
 801a324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a326:	f503 7284 	add.w	r2, r3, #264	; 0x108
 801a32a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a32c:	00db      	lsls	r3, r3, #3
 801a32e:	18d4      	adds	r4, r2, r3
 801a330:	f7e6 fc64 	bl	8000bfc <__aeabi_d2f>
 801a334:	4603      	mov	r3, r0
 801a336:	6063      	str	r3, [r4, #4]
            for (i=0;i<nfft;++i) {
 801a338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a33a:	3301      	adds	r3, #1
 801a33c:	63bb      	str	r3, [r7, #56]	; 0x38
 801a33e:	e7b8      	b.n	801a2b2 <kiss_fft_alloc+0x62>
            }
        } else {
            for (i=0;i<nfft;++i) {
 801a340:	2300      	movs	r3, #0
 801a342:	63bb      	str	r3, [r7, #56]	; 0x38
 801a344:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801a346:	68fb      	ldr	r3, [r7, #12]
 801a348:	429a      	cmp	r2, r3
 801a34a:	da41      	bge.n	801a3d0 <kiss_fft_alloc+0x180>
                const double pi=3.141592653589793238462643383279502884197169399375105820974944;
 801a34c:	a32a      	add	r3, pc, #168	; (adr r3, 801a3f8 <kiss_fft_alloc+0x1a8>)
 801a34e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a352:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
                double phase = -2*pi*i / nfft;
 801a356:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801a358:	f7e6 f8ee 	bl	8000538 <__aeabi_i2d>
 801a35c:	a32a      	add	r3, pc, #168	; (adr r3, 801a408 <kiss_fft_alloc+0x1b8>)
 801a35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a362:	f7e6 f953 	bl	800060c <__aeabi_dmul>
 801a366:	4602      	mov	r2, r0
 801a368:	460b      	mov	r3, r1
 801a36a:	4614      	mov	r4, r2
 801a36c:	461d      	mov	r5, r3
 801a36e:	68f8      	ldr	r0, [r7, #12]
 801a370:	f7e6 f8e2 	bl	8000538 <__aeabi_i2d>
 801a374:	4602      	mov	r2, r0
 801a376:	460b      	mov	r3, r1
 801a378:	4620      	mov	r0, r4
 801a37a:	4629      	mov	r1, r5
 801a37c:	f7e6 fa70 	bl	8000860 <__aeabi_ddiv>
 801a380:	4602      	mov	r2, r0
 801a382:	460b      	mov	r3, r1
 801a384:	e9c7 2308 	strd	r2, r3, [r7, #32]
                kf_cexp(st->twiddles+i, phase );
 801a388:	ed97 0b08 	vldr	d0, [r7, #32]
 801a38c:	f006 fb1c 	bl	80209c8 <cos>
 801a390:	ec51 0b10 	vmov	r0, r1, d0
 801a394:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a396:	f503 7284 	add.w	r2, r3, #264	; 0x108
 801a39a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a39c:	00db      	lsls	r3, r3, #3
 801a39e:	18d4      	adds	r4, r2, r3
 801a3a0:	f7e6 fc2c 	bl	8000bfc <__aeabi_d2f>
 801a3a4:	4603      	mov	r3, r0
 801a3a6:	6023      	str	r3, [r4, #0]
 801a3a8:	ed97 0b08 	vldr	d0, [r7, #32]
 801a3ac:	f006 fc60 	bl	8020c70 <sin>
 801a3b0:	ec51 0b10 	vmov	r0, r1, d0
 801a3b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a3b6:	f503 7284 	add.w	r2, r3, #264	; 0x108
 801a3ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a3bc:	00db      	lsls	r3, r3, #3
 801a3be:	18d4      	adds	r4, r2, r3
 801a3c0:	f7e6 fc1c 	bl	8000bfc <__aeabi_d2f>
 801a3c4:	4603      	mov	r3, r0
 801a3c6:	6063      	str	r3, [r4, #4]
            for (i=0;i<nfft;++i) {
 801a3c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a3ca:	3301      	adds	r3, #1
 801a3cc:	63bb      	str	r3, [r7, #56]	; 0x38
 801a3ce:	e7b9      	b.n	801a344 <kiss_fft_alloc+0xf4>
            }
        }

        kf_factor(nfft,st->factors);
 801a3d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a3d2:	3308      	adds	r3, #8
 801a3d4:	4619      	mov	r1, r3
 801a3d6:	68f8      	ldr	r0, [r7, #12]
 801a3d8:	f7ff fedc 	bl	801a194 <_ZL9kf_factoriPi>
    }

    if (memallocated != NULL) {
 801a3dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a3de:	2b00      	cmp	r3, #0
 801a3e0:	d002      	beq.n	801a3e8 <kiss_fft_alloc+0x198>
        *memallocated = memneeded;
 801a3e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a3e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a3e6:	601a      	str	r2, [r3, #0]
    }

    return st;
 801a3e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801a3ea:	4618      	mov	r0, r3
 801a3ec:	3740      	adds	r7, #64	; 0x40
 801a3ee:	46bd      	mov	sp, r7
 801a3f0:	bdb0      	pop	{r4, r5, r7, pc}
 801a3f2:	bf00      	nop
 801a3f4:	f3af 8000 	nop.w
 801a3f8:	54442d18 	.word	0x54442d18
 801a3fc:	400921fb 	.word	0x400921fb
 801a400:	54442d18 	.word	0x54442d18
 801a404:	401921fb 	.word	0x401921fb
 801a408:	54442d18 	.word	0x54442d18
 801a40c:	c01921fb 	.word	0xc01921fb

0801a410 <kiss_fft_stride>:


void kiss_fft_stride(kiss_fft_cfg st,const kiss_fft_cpx *fin,kiss_fft_cpx *fout,int in_stride)
{
 801a410:	b580      	push	{r7, lr}
 801a412:	b088      	sub	sp, #32
 801a414:	af02      	add	r7, sp, #8
 801a416:	60f8      	str	r0, [r7, #12]
 801a418:	60b9      	str	r1, [r7, #8]
 801a41a:	607a      	str	r2, [r7, #4]
 801a41c:	603b      	str	r3, [r7, #0]
    if (fin == fout) {
 801a41e:	68ba      	ldr	r2, [r7, #8]
 801a420:	687b      	ldr	r3, [r7, #4]
 801a422:	429a      	cmp	r2, r3
 801a424:	d11d      	bne.n	801a462 <kiss_fft_stride+0x52>
        //NOTE: this is not really an in-place FFT algorithm.
        //It just performs an out-of-place FFT into a temp buffer
        kiss_fft_cpx * tmpbuf = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC( sizeof(kiss_fft_cpx)*st->nfft);
 801a426:	68fb      	ldr	r3, [r7, #12]
 801a428:	681b      	ldr	r3, [r3, #0]
 801a42a:	00db      	lsls	r3, r3, #3
 801a42c:	4618      	mov	r0, r3
 801a42e:	f000 fbeb 	bl	801ac08 <_Z9ei_mallocj>
 801a432:	6178      	str	r0, [r7, #20]
        kf_work(tmpbuf,fin,1,in_stride, st->factors,st);
 801a434:	68fb      	ldr	r3, [r7, #12]
 801a436:	3308      	adds	r3, #8
 801a438:	68fa      	ldr	r2, [r7, #12]
 801a43a:	9201      	str	r2, [sp, #4]
 801a43c:	9300      	str	r3, [sp, #0]
 801a43e:	683b      	ldr	r3, [r7, #0]
 801a440:	2201      	movs	r2, #1
 801a442:	68b9      	ldr	r1, [r7, #8]
 801a444:	6978      	ldr	r0, [r7, #20]
 801a446:	f7ff fe0d 	bl	801a064 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
        memcpy(fout,tmpbuf,sizeof(kiss_fft_cpx)*st->nfft);
 801a44a:	68fb      	ldr	r3, [r7, #12]
 801a44c:	681b      	ldr	r3, [r3, #0]
 801a44e:	00db      	lsls	r3, r3, #3
 801a450:	461a      	mov	r2, r3
 801a452:	6979      	ldr	r1, [r7, #20]
 801a454:	6878      	ldr	r0, [r7, #4]
 801a456:	f009 f873 	bl	8023540 <memcpy>
        KISS_FFT_TMP_FREE(tmpbuf);
 801a45a:	6978      	ldr	r0, [r7, #20]
 801a45c:	f000 fbee 	bl	801ac3c <_Z7ei_freePv>
    }else{
        kf_work( fout, fin, 1,in_stride, st->factors,st );
    }
}
 801a460:	e00a      	b.n	801a478 <kiss_fft_stride+0x68>
        kf_work( fout, fin, 1,in_stride, st->factors,st );
 801a462:	68fb      	ldr	r3, [r7, #12]
 801a464:	3308      	adds	r3, #8
 801a466:	68fa      	ldr	r2, [r7, #12]
 801a468:	9201      	str	r2, [sp, #4]
 801a46a:	9300      	str	r3, [sp, #0]
 801a46c:	683b      	ldr	r3, [r7, #0]
 801a46e:	2201      	movs	r2, #1
 801a470:	68b9      	ldr	r1, [r7, #8]
 801a472:	6878      	ldr	r0, [r7, #4]
 801a474:	f7ff fdf6 	bl	801a064 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
}
 801a478:	bf00      	nop
 801a47a:	3718      	adds	r7, #24
 801a47c:	46bd      	mov	sp, r7
 801a47e:	bd80      	pop	{r7, pc}

0801a480 <kiss_fft>:

void kiss_fft(kiss_fft_cfg cfg,const kiss_fft_cpx *fin,kiss_fft_cpx *fout)
{
 801a480:	b580      	push	{r7, lr}
 801a482:	b084      	sub	sp, #16
 801a484:	af00      	add	r7, sp, #0
 801a486:	60f8      	str	r0, [r7, #12]
 801a488:	60b9      	str	r1, [r7, #8]
 801a48a:	607a      	str	r2, [r7, #4]
    kiss_fft_stride(cfg,fin,fout,1);
 801a48c:	2301      	movs	r3, #1
 801a48e:	687a      	ldr	r2, [r7, #4]
 801a490:	68b9      	ldr	r1, [r7, #8]
 801a492:	68f8      	ldr	r0, [r7, #12]
 801a494:	f7ff ffbc 	bl	801a410 <kiss_fft_stride>
}
 801a498:	bf00      	nop
 801a49a:	3710      	adds	r7, #16
 801a49c:	46bd      	mov	sp, r7
 801a49e:	bd80      	pop	{r7, pc}

0801a4a0 <kiss_fftr_alloc>:
    void * pad;
#endif
};

kiss_fftr_cfg kiss_fftr_alloc(int nfft,int inverse_fft,void * mem,size_t * lenmem,size_t * memallocated)
{
 801a4a0:	b5b0      	push	{r4, r5, r7, lr}
 801a4a2:	b090      	sub	sp, #64	; 0x40
 801a4a4:	af02      	add	r7, sp, #8
 801a4a6:	60f8      	str	r0, [r7, #12]
 801a4a8:	60b9      	str	r1, [r7, #8]
 801a4aa:	607a      	str	r2, [r7, #4]
 801a4ac:	603b      	str	r3, [r7, #0]
    int i;
    kiss_fftr_cfg st = NULL;
 801a4ae:	2300      	movs	r3, #0
 801a4b0:	633b      	str	r3, [r7, #48]	; 0x30
    size_t subsize = 0, memneeded;
 801a4b2:	2300      	movs	r3, #0
 801a4b4:	617b      	str	r3, [r7, #20]

    if (nfft & 1) {
 801a4b6:	68fb      	ldr	r3, [r7, #12]
 801a4b8:	f003 0301 	and.w	r3, r3, #1
 801a4bc:	2b00      	cmp	r3, #0
 801a4be:	d004      	beq.n	801a4ca <kiss_fftr_alloc+0x2a>
        ei_printf("FFT length must be even\n");
 801a4c0:	4885      	ldr	r0, [pc, #532]	; (801a6d8 <kiss_fftr_alloc+0x238>)
 801a4c2:	f7eb fddb 	bl	800607c <_Z9ei_printfPKcz>
        return NULL;
 801a4c6:	2300      	movs	r3, #0
 801a4c8:	e0f9      	b.n	801a6be <kiss_fftr_alloc+0x21e>
    }
    nfft >>= 1;
 801a4ca:	68fb      	ldr	r3, [r7, #12]
 801a4cc:	105b      	asrs	r3, r3, #1
 801a4ce:	60fb      	str	r3, [r7, #12]

    kiss_fft_alloc (nfft, inverse_fft, NULL, &subsize);
 801a4d0:	f107 0314 	add.w	r3, r7, #20
 801a4d4:	2200      	movs	r2, #0
 801a4d6:	9200      	str	r2, [sp, #0]
 801a4d8:	2200      	movs	r2, #0
 801a4da:	68b9      	ldr	r1, [r7, #8]
 801a4dc:	68f8      	ldr	r0, [r7, #12]
 801a4de:	f7ff feb7 	bl	801a250 <kiss_fft_alloc>
    memneeded = sizeof(struct kiss_fftr_state) + subsize + sizeof(kiss_fft_cpx) * ( nfft * 3 / 2);
 801a4e2:	68fa      	ldr	r2, [r7, #12]
 801a4e4:	4613      	mov	r3, r2
 801a4e6:	005b      	lsls	r3, r3, #1
 801a4e8:	4413      	add	r3, r2
 801a4ea:	0fda      	lsrs	r2, r3, #31
 801a4ec:	4413      	add	r3, r2
 801a4ee:	105b      	asrs	r3, r3, #1
 801a4f0:	00da      	lsls	r2, r3, #3
 801a4f2:	697b      	ldr	r3, [r7, #20]
 801a4f4:	4413      	add	r3, r2
 801a4f6:	330c      	adds	r3, #12
 801a4f8:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (lenmem == NULL) {
 801a4fa:	683b      	ldr	r3, [r7, #0]
 801a4fc:	2b00      	cmp	r3, #0
 801a4fe:	d104      	bne.n	801a50a <kiss_fftr_alloc+0x6a>
        st = (kiss_fftr_cfg) KISS_FFT_MALLOC (memneeded);
 801a500:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a502:	f000 fb81 	bl	801ac08 <_Z9ei_mallocj>
 801a506:	6338      	str	r0, [r7, #48]	; 0x30
 801a508:	e009      	b.n	801a51e <kiss_fftr_alloc+0x7e>
    } else {
        if (*lenmem >= memneeded)
 801a50a:	683b      	ldr	r3, [r7, #0]
 801a50c:	681b      	ldr	r3, [r3, #0]
 801a50e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a510:	429a      	cmp	r2, r3
 801a512:	d801      	bhi.n	801a518 <kiss_fftr_alloc+0x78>
            st = (kiss_fftr_cfg) mem;
 801a514:	687b      	ldr	r3, [r7, #4]
 801a516:	633b      	str	r3, [r7, #48]	; 0x30
        *lenmem = memneeded;
 801a518:	683b      	ldr	r3, [r7, #0]
 801a51a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a51c:	601a      	str	r2, [r3, #0]
    }
    if (!st)
 801a51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a520:	2b00      	cmp	r3, #0
 801a522:	d101      	bne.n	801a528 <kiss_fftr_alloc+0x88>
        return NULL;
 801a524:	2300      	movs	r3, #0
 801a526:	e0ca      	b.n	801a6be <kiss_fftr_alloc+0x21e>

    st->substate = (kiss_fft_cfg) (st + 1); /*just beyond kiss_fftr_state struct */
 801a528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a52a:	f103 020c 	add.w	r2, r3, #12
 801a52e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a530:	601a      	str	r2, [r3, #0]
    st->tmpbuf = (kiss_fft_cpx *) (((char *) st->substate) + subsize);
 801a532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a534:	681a      	ldr	r2, [r3, #0]
 801a536:	697b      	ldr	r3, [r7, #20]
 801a538:	441a      	add	r2, r3
 801a53a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a53c:	605a      	str	r2, [r3, #4]
    st->super_twiddles = st->tmpbuf + nfft;
 801a53e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a540:	685a      	ldr	r2, [r3, #4]
 801a542:	68fb      	ldr	r3, [r7, #12]
 801a544:	00db      	lsls	r3, r3, #3
 801a546:	441a      	add	r2, r3
 801a548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a54a:	609a      	str	r2, [r3, #8]
    kiss_fft_alloc(nfft, inverse_fft, st->substate, &subsize);
 801a54c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a54e:	681a      	ldr	r2, [r3, #0]
 801a550:	f107 0314 	add.w	r3, r7, #20
 801a554:	2100      	movs	r1, #0
 801a556:	9100      	str	r1, [sp, #0]
 801a558:	68b9      	ldr	r1, [r7, #8]
 801a55a:	68f8      	ldr	r0, [r7, #12]
 801a55c:	f7ff fe78 	bl	801a250 <kiss_fft_alloc>

    if (inverse_fft) {
 801a560:	68bb      	ldr	r3, [r7, #8]
 801a562:	2b00      	cmp	r3, #0
 801a564:	d052      	beq.n	801a60c <kiss_fftr_alloc+0x16c>
        for (i = 0; i < nfft/2; ++i) {
 801a566:	2300      	movs	r3, #0
 801a568:	637b      	str	r3, [r7, #52]	; 0x34
 801a56a:	68fb      	ldr	r3, [r7, #12]
 801a56c:	0fda      	lsrs	r2, r3, #31
 801a56e:	4413      	add	r3, r2
 801a570:	105b      	asrs	r3, r3, #1
 801a572:	461a      	mov	r2, r3
 801a574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a576:	4293      	cmp	r3, r2
 801a578:	f280 809a 	bge.w	801a6b0 <kiss_fftr_alloc+0x210>
            double phase =
                3.14159265358979323846264338327 * ((double) (i+1) / nfft + .5);
 801a57c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a57e:	3301      	adds	r3, #1
 801a580:	4618      	mov	r0, r3
 801a582:	f7e5 ffd9 	bl	8000538 <__aeabi_i2d>
 801a586:	4604      	mov	r4, r0
 801a588:	460d      	mov	r5, r1
 801a58a:	68f8      	ldr	r0, [r7, #12]
 801a58c:	f7e5 ffd4 	bl	8000538 <__aeabi_i2d>
 801a590:	4602      	mov	r2, r0
 801a592:	460b      	mov	r3, r1
 801a594:	4620      	mov	r0, r4
 801a596:	4629      	mov	r1, r5
 801a598:	f7e6 f962 	bl	8000860 <__aeabi_ddiv>
 801a59c:	4602      	mov	r2, r0
 801a59e:	460b      	mov	r3, r1
 801a5a0:	4610      	mov	r0, r2
 801a5a2:	4619      	mov	r1, r3
 801a5a4:	f04f 0200 	mov.w	r2, #0
 801a5a8:	4b4c      	ldr	r3, [pc, #304]	; (801a6dc <kiss_fftr_alloc+0x23c>)
 801a5aa:	f7e5 fe79 	bl	80002a0 <__adddf3>
 801a5ae:	4602      	mov	r2, r0
 801a5b0:	460b      	mov	r3, r1
 801a5b2:	4610      	mov	r0, r2
 801a5b4:	4619      	mov	r1, r3
            double phase =
 801a5b6:	a344      	add	r3, pc, #272	; (adr r3, 801a6c8 <kiss_fftr_alloc+0x228>)
 801a5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5bc:	f7e6 f826 	bl	800060c <__aeabi_dmul>
 801a5c0:	4602      	mov	r2, r0
 801a5c2:	460b      	mov	r3, r1
 801a5c4:	e9c7 2306 	strd	r2, r3, [r7, #24]
            kf_cexp (st->super_twiddles+i,phase);
 801a5c8:	ed97 0b06 	vldr	d0, [r7, #24]
 801a5cc:	f006 f9fc 	bl	80209c8 <cos>
 801a5d0:	ec51 0b10 	vmov	r0, r1, d0
 801a5d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a5d6:	689a      	ldr	r2, [r3, #8]
 801a5d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a5da:	00db      	lsls	r3, r3, #3
 801a5dc:	18d4      	adds	r4, r2, r3
 801a5de:	f7e6 fb0d 	bl	8000bfc <__aeabi_d2f>
 801a5e2:	4603      	mov	r3, r0
 801a5e4:	6023      	str	r3, [r4, #0]
 801a5e6:	ed97 0b06 	vldr	d0, [r7, #24]
 801a5ea:	f006 fb41 	bl	8020c70 <sin>
 801a5ee:	ec51 0b10 	vmov	r0, r1, d0
 801a5f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a5f4:	689a      	ldr	r2, [r3, #8]
 801a5f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a5f8:	00db      	lsls	r3, r3, #3
 801a5fa:	18d4      	adds	r4, r2, r3
 801a5fc:	f7e6 fafe 	bl	8000bfc <__aeabi_d2f>
 801a600:	4603      	mov	r3, r0
 801a602:	6063      	str	r3, [r4, #4]
        for (i = 0; i < nfft/2; ++i) {
 801a604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a606:	3301      	adds	r3, #1
 801a608:	637b      	str	r3, [r7, #52]	; 0x34
 801a60a:	e7ae      	b.n	801a56a <kiss_fftr_alloc+0xca>
        }
    } else  {
        for (i = 0; i < nfft/2; ++i) {
 801a60c:	2300      	movs	r3, #0
 801a60e:	637b      	str	r3, [r7, #52]	; 0x34
 801a610:	68fb      	ldr	r3, [r7, #12]
 801a612:	0fda      	lsrs	r2, r3, #31
 801a614:	4413      	add	r3, r2
 801a616:	105b      	asrs	r3, r3, #1
 801a618:	461a      	mov	r2, r3
 801a61a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a61c:	4293      	cmp	r3, r2
 801a61e:	da47      	bge.n	801a6b0 <kiss_fftr_alloc+0x210>
            double phase =
                -3.14159265358979323846264338327 * ((double) (i+1) / nfft + .5);
 801a620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a622:	3301      	adds	r3, #1
 801a624:	4618      	mov	r0, r3
 801a626:	f7e5 ff87 	bl	8000538 <__aeabi_i2d>
 801a62a:	4604      	mov	r4, r0
 801a62c:	460d      	mov	r5, r1
 801a62e:	68f8      	ldr	r0, [r7, #12]
 801a630:	f7e5 ff82 	bl	8000538 <__aeabi_i2d>
 801a634:	4602      	mov	r2, r0
 801a636:	460b      	mov	r3, r1
 801a638:	4620      	mov	r0, r4
 801a63a:	4629      	mov	r1, r5
 801a63c:	f7e6 f910 	bl	8000860 <__aeabi_ddiv>
 801a640:	4602      	mov	r2, r0
 801a642:	460b      	mov	r3, r1
 801a644:	4610      	mov	r0, r2
 801a646:	4619      	mov	r1, r3
 801a648:	f04f 0200 	mov.w	r2, #0
 801a64c:	4b23      	ldr	r3, [pc, #140]	; (801a6dc <kiss_fftr_alloc+0x23c>)
 801a64e:	f7e5 fe27 	bl	80002a0 <__adddf3>
 801a652:	4602      	mov	r2, r0
 801a654:	460b      	mov	r3, r1
 801a656:	4610      	mov	r0, r2
 801a658:	4619      	mov	r1, r3
            double phase =
 801a65a:	a31d      	add	r3, pc, #116	; (adr r3, 801a6d0 <kiss_fftr_alloc+0x230>)
 801a65c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a660:	f7e5 ffd4 	bl	800060c <__aeabi_dmul>
 801a664:	4602      	mov	r2, r0
 801a666:	460b      	mov	r3, r1
 801a668:	e9c7 2308 	strd	r2, r3, [r7, #32]
            kf_cexp (st->super_twiddles+i,phase);
 801a66c:	ed97 0b08 	vldr	d0, [r7, #32]
 801a670:	f006 f9aa 	bl	80209c8 <cos>
 801a674:	ec51 0b10 	vmov	r0, r1, d0
 801a678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a67a:	689a      	ldr	r2, [r3, #8]
 801a67c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a67e:	00db      	lsls	r3, r3, #3
 801a680:	18d4      	adds	r4, r2, r3
 801a682:	f7e6 fabb 	bl	8000bfc <__aeabi_d2f>
 801a686:	4603      	mov	r3, r0
 801a688:	6023      	str	r3, [r4, #0]
 801a68a:	ed97 0b08 	vldr	d0, [r7, #32]
 801a68e:	f006 faef 	bl	8020c70 <sin>
 801a692:	ec51 0b10 	vmov	r0, r1, d0
 801a696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a698:	689a      	ldr	r2, [r3, #8]
 801a69a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a69c:	00db      	lsls	r3, r3, #3
 801a69e:	18d4      	adds	r4, r2, r3
 801a6a0:	f7e6 faac 	bl	8000bfc <__aeabi_d2f>
 801a6a4:	4603      	mov	r3, r0
 801a6a6:	6063      	str	r3, [r4, #4]
        for (i = 0; i < nfft/2; ++i) {
 801a6a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a6aa:	3301      	adds	r3, #1
 801a6ac:	637b      	str	r3, [r7, #52]	; 0x34
 801a6ae:	e7af      	b.n	801a610 <kiss_fftr_alloc+0x170>
        }
    }

    if (memallocated != NULL) {
 801a6b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a6b2:	2b00      	cmp	r3, #0
 801a6b4:	d002      	beq.n	801a6bc <kiss_fftr_alloc+0x21c>
        *memallocated = memneeded;
 801a6b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a6b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a6ba:	601a      	str	r2, [r3, #0]
    }

    return st;
 801a6bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 801a6be:	4618      	mov	r0, r3
 801a6c0:	3738      	adds	r7, #56	; 0x38
 801a6c2:	46bd      	mov	sp, r7
 801a6c4:	bdb0      	pop	{r4, r5, r7, pc}
 801a6c6:	bf00      	nop
 801a6c8:	54442d18 	.word	0x54442d18
 801a6cc:	400921fb 	.word	0x400921fb
 801a6d0:	54442d18 	.word	0x54442d18
 801a6d4:	c00921fb 	.word	0xc00921fb
 801a6d8:	080283fc 	.word	0x080283fc
 801a6dc:	3fe00000 	.word	0x3fe00000

0801a6e0 <kiss_fftr>:

void kiss_fftr(kiss_fftr_cfg st,const kiss_fft_scalar *timedata,kiss_fft_cpx *freqdata)
{
 801a6e0:	b580      	push	{r7, lr}
 801a6e2:	b092      	sub	sp, #72	; 0x48
 801a6e4:	af00      	add	r7, sp, #0
 801a6e6:	60f8      	str	r0, [r7, #12]
 801a6e8:	60b9      	str	r1, [r7, #8]
 801a6ea:	607a      	str	r2, [r7, #4]
    /* input buffer timedata is stored row-wise */
    int k,ncfft;
    kiss_fft_cpx fpnk,fpk,f1k,f2k,tw,tdc;

    if ( st->substate->inverse) {
 801a6ec:	68fb      	ldr	r3, [r7, #12]
 801a6ee:	681b      	ldr	r3, [r3, #0]
 801a6f0:	685b      	ldr	r3, [r3, #4]
 801a6f2:	2b00      	cmp	r3, #0
 801a6f4:	d002      	beq.n	801a6fc <kiss_fftr+0x1c>
        ei_printf("kiss fft usage error: improper alloc\n");
 801a6f6:	4887      	ldr	r0, [pc, #540]	; (801a914 <kiss_fftr+0x234>)
 801a6f8:	f7eb fcc0 	bl	800607c <_Z9ei_printfPKcz>
    }

    ncfft = st->substate->nfft;
 801a6fc:	68fb      	ldr	r3, [r7, #12]
 801a6fe:	681b      	ldr	r3, [r3, #0]
 801a700:	681b      	ldr	r3, [r3, #0]
 801a702:	643b      	str	r3, [r7, #64]	; 0x40

    /*perform the parallel fft of two real signals packed in real,imag*/
    kiss_fft( st->substate , (const kiss_fft_cpx*)timedata, st->tmpbuf );
 801a704:	68fb      	ldr	r3, [r7, #12]
 801a706:	6818      	ldr	r0, [r3, #0]
 801a708:	68fb      	ldr	r3, [r7, #12]
 801a70a:	685b      	ldr	r3, [r3, #4]
 801a70c:	461a      	mov	r2, r3
 801a70e:	68b9      	ldr	r1, [r7, #8]
 801a710:	f7ff feb6 	bl	801a480 <kiss_fft>
     *      yielding DC of input time sequence
     * The difference of tdc.r - tdc.i is the sum of the input (dot product) [1,-1,1,-1...
     *      yielding Nyquist bin of input time sequence
     */

    tdc.r = st->tmpbuf[0].r;
 801a714:	68fb      	ldr	r3, [r7, #12]
 801a716:	685b      	ldr	r3, [r3, #4]
 801a718:	681b      	ldr	r3, [r3, #0]
 801a71a:	613b      	str	r3, [r7, #16]
    tdc.i = st->tmpbuf[0].i;
 801a71c:	68fb      	ldr	r3, [r7, #12]
 801a71e:	685b      	ldr	r3, [r3, #4]
 801a720:	685b      	ldr	r3, [r3, #4]
 801a722:	617b      	str	r3, [r7, #20]
    C_FIXDIV(tdc,2);
    CHECK_OVERFLOW_OP(tdc.r ,+, tdc.i);
    CHECK_OVERFLOW_OP(tdc.r ,-, tdc.i);
    freqdata[0].r = tdc.r + tdc.i;
 801a724:	ed97 7a04 	vldr	s14, [r7, #16]
 801a728:	edd7 7a05 	vldr	s15, [r7, #20]
 801a72c:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a730:	687b      	ldr	r3, [r7, #4]
 801a732:	edc3 7a00 	vstr	s15, [r3]
    freqdata[ncfft].r = tdc.r - tdc.i;
 801a736:	ed97 7a04 	vldr	s14, [r7, #16]
 801a73a:	edd7 7a05 	vldr	s15, [r7, #20]
 801a73e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a740:	00db      	lsls	r3, r3, #3
 801a742:	687a      	ldr	r2, [r7, #4]
 801a744:	4413      	add	r3, r2
 801a746:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a74a:	edc3 7a00 	vstr	s15, [r3]
#ifdef USE_SIMD
    freqdata[ncfft].i = freqdata[0].i = _mm_set1_ps(0);
#else
    freqdata[ncfft].i = freqdata[0].i = 0;
 801a74e:	687b      	ldr	r3, [r7, #4]
 801a750:	f04f 0200 	mov.w	r2, #0
 801a754:	605a      	str	r2, [r3, #4]
 801a756:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a758:	00db      	lsls	r3, r3, #3
 801a75a:	687a      	ldr	r2, [r7, #4]
 801a75c:	4413      	add	r3, r2
 801a75e:	687a      	ldr	r2, [r7, #4]
 801a760:	6852      	ldr	r2, [r2, #4]
 801a762:	605a      	str	r2, [r3, #4]
#endif

    for ( k=1;k <= ncfft/2 ; ++k ) {
 801a764:	2301      	movs	r3, #1
 801a766:	647b      	str	r3, [r7, #68]	; 0x44
 801a768:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a76a:	0fda      	lsrs	r2, r3, #31
 801a76c:	4413      	add	r3, r2
 801a76e:	105b      	asrs	r3, r3, #1
 801a770:	461a      	mov	r2, r3
 801a772:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a774:	4293      	cmp	r3, r2
 801a776:	f300 80c9 	bgt.w	801a90c <kiss_fftr+0x22c>
        fpk    = st->tmpbuf[k];
 801a77a:	68fb      	ldr	r3, [r7, #12]
 801a77c:	685a      	ldr	r2, [r3, #4]
 801a77e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a780:	00db      	lsls	r3, r3, #3
 801a782:	441a      	add	r2, r3
 801a784:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a788:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a78c:	e883 0003 	stmia.w	r3, {r0, r1}
        fpnk.r =   st->tmpbuf[ncfft-k].r;
 801a790:	68fb      	ldr	r3, [r7, #12]
 801a792:	685a      	ldr	r2, [r3, #4]
 801a794:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801a796:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a798:	1acb      	subs	r3, r1, r3
 801a79a:	00db      	lsls	r3, r3, #3
 801a79c:	4413      	add	r3, r2
 801a79e:	681b      	ldr	r3, [r3, #0]
 801a7a0:	63bb      	str	r3, [r7, #56]	; 0x38
        fpnk.i = - st->tmpbuf[ncfft-k].i;
 801a7a2:	68fb      	ldr	r3, [r7, #12]
 801a7a4:	685a      	ldr	r2, [r3, #4]
 801a7a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801a7a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a7aa:	1acb      	subs	r3, r1, r3
 801a7ac:	00db      	lsls	r3, r3, #3
 801a7ae:	4413      	add	r3, r2
 801a7b0:	edd3 7a01 	vldr	s15, [r3, #4]
 801a7b4:	eef1 7a67 	vneg.f32	s15, s15
 801a7b8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        C_FIXDIV(fpk,2);
        C_FIXDIV(fpnk,2);

        C_ADD( f1k, fpk , fpnk );
 801a7bc:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 801a7c0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801a7c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a7c8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 801a7cc:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 801a7d0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 801a7d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a7d8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        C_SUB( f2k, fpk , fpnk );
 801a7dc:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 801a7e0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801a7e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a7e8:	edc7 7a08 	vstr	s15, [r7, #32]
 801a7ec:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 801a7f0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 801a7f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a7f8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        C_MUL( tw , f2k , st->super_twiddles[k-1]);
 801a7fc:	ed97 7a08 	vldr	s14, [r7, #32]
 801a800:	68fb      	ldr	r3, [r7, #12]
 801a802:	689a      	ldr	r2, [r3, #8]
 801a804:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a806:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 801a80a:	3b01      	subs	r3, #1
 801a80c:	00db      	lsls	r3, r3, #3
 801a80e:	4413      	add	r3, r2
 801a810:	edd3 7a00 	vldr	s15, [r3]
 801a814:	ee27 7a27 	vmul.f32	s14, s14, s15
 801a818:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 801a81c:	68fb      	ldr	r3, [r7, #12]
 801a81e:	689a      	ldr	r2, [r3, #8]
 801a820:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a822:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 801a826:	3b01      	subs	r3, #1
 801a828:	00db      	lsls	r3, r3, #3
 801a82a:	4413      	add	r3, r2
 801a82c:	edd3 7a01 	vldr	s15, [r3, #4]
 801a830:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801a834:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a838:	edc7 7a06 	vstr	s15, [r7, #24]
 801a83c:	ed97 7a08 	vldr	s14, [r7, #32]
 801a840:	68fb      	ldr	r3, [r7, #12]
 801a842:	689a      	ldr	r2, [r3, #8]
 801a844:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a846:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 801a84a:	3b01      	subs	r3, #1
 801a84c:	00db      	lsls	r3, r3, #3
 801a84e:	4413      	add	r3, r2
 801a850:	edd3 7a01 	vldr	s15, [r3, #4]
 801a854:	ee27 7a27 	vmul.f32	s14, s14, s15
 801a858:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 801a85c:	68fb      	ldr	r3, [r7, #12]
 801a85e:	689a      	ldr	r2, [r3, #8]
 801a860:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a862:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 801a866:	3b01      	subs	r3, #1
 801a868:	00db      	lsls	r3, r3, #3
 801a86a:	4413      	add	r3, r2
 801a86c:	edd3 7a00 	vldr	s15, [r3]
 801a870:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801a874:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a878:	edc7 7a07 	vstr	s15, [r7, #28]

        freqdata[k].r = HALF_OF(f1k.r + tw.r);
 801a87c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 801a880:	edd7 7a06 	vldr	s15, [r7, #24]
 801a884:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a888:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a88a:	00db      	lsls	r3, r3, #3
 801a88c:	687a      	ldr	r2, [r7, #4]
 801a88e:	4413      	add	r3, r2
 801a890:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801a894:	ee67 7a87 	vmul.f32	s15, s15, s14
 801a898:	edc3 7a00 	vstr	s15, [r3]
        freqdata[k].i = HALF_OF(f1k.i + tw.i);
 801a89c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 801a8a0:	edd7 7a07 	vldr	s15, [r7, #28]
 801a8a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a8a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a8aa:	00db      	lsls	r3, r3, #3
 801a8ac:	687a      	ldr	r2, [r7, #4]
 801a8ae:	4413      	add	r3, r2
 801a8b0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801a8b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 801a8b8:	edc3 7a01 	vstr	s15, [r3, #4]
        freqdata[ncfft-k].r = HALF_OF(f1k.r - tw.r);
 801a8bc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 801a8c0:	edd7 7a06 	vldr	s15, [r7, #24]
 801a8c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a8c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801a8ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a8cc:	1ad3      	subs	r3, r2, r3
 801a8ce:	00db      	lsls	r3, r3, #3
 801a8d0:	687a      	ldr	r2, [r7, #4]
 801a8d2:	4413      	add	r3, r2
 801a8d4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801a8d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 801a8dc:	edc3 7a00 	vstr	s15, [r3]
        freqdata[ncfft-k].i = HALF_OF(tw.i - f1k.i);
 801a8e0:	ed97 7a07 	vldr	s14, [r7, #28]
 801a8e4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801a8e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a8ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801a8ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a8f0:	1ad3      	subs	r3, r2, r3
 801a8f2:	00db      	lsls	r3, r3, #3
 801a8f4:	687a      	ldr	r2, [r7, #4]
 801a8f6:	4413      	add	r3, r2
 801a8f8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801a8fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 801a900:	edc3 7a01 	vstr	s15, [r3, #4]
    for ( k=1;k <= ncfft/2 ; ++k ) {
 801a904:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a906:	3301      	adds	r3, #1
 801a908:	647b      	str	r3, [r7, #68]	; 0x44
 801a90a:	e72d      	b.n	801a768 <kiss_fftr+0x88>
    }
}
 801a90c:	bf00      	nop
 801a90e:	3748      	adds	r7, #72	; 0x48
 801a910:	46bd      	mov	sp, r7
 801a912:	bd80      	pop	{r7, pc}
 801a914:	08028418 	.word	0x08028418

0801a918 <_ZSt5log10f>:
  { return __builtin_log10f(__x); }
 801a918:	b580      	push	{r7, lr}
 801a91a:	b082      	sub	sp, #8
 801a91c:	af00      	add	r7, sp, #0
 801a91e:	ed87 0a01 	vstr	s0, [r7, #4]
 801a922:	ed97 0a01 	vldr	s0, [r7, #4]
 801a926:	f006 fb4b 	bl	8020fc0 <log10f>
 801a92a:	eef0 7a40 	vmov.f32	s15, s0
 801a92e:	eeb0 0a67 	vmov.f32	s0, s15
 801a932:	3708      	adds	r7, #8
 801a934:	46bd      	mov	sp, r7
 801a936:	bd80      	pop	{r7, pc}

0801a938 <_ZSt5isinfd>:
  { return __builtin_isinf(__x); }
 801a938:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a93a:	b083      	sub	sp, #12
 801a93c:	af00      	add	r7, sp, #0
 801a93e:	ed87 0b00 	vstr	d0, [r7]
 801a942:	683c      	ldr	r4, [r7, #0]
 801a944:	687b      	ldr	r3, [r7, #4]
 801a946:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 801a94a:	2301      	movs	r3, #1
 801a94c:	461e      	mov	r6, r3
 801a94e:	f04f 32ff 	mov.w	r2, #4294967295
 801a952:	4b10      	ldr	r3, [pc, #64]	; (801a994 <_ZSt5isinfd+0x5c>)
 801a954:	4620      	mov	r0, r4
 801a956:	4629      	mov	r1, r5
 801a958:	f7e6 f8f2 	bl	8000b40 <__aeabi_dcmpun>
 801a95c:	4603      	mov	r3, r0
 801a95e:	2b00      	cmp	r3, #0
 801a960:	d10b      	bne.n	801a97a <_ZSt5isinfd+0x42>
 801a962:	f04f 32ff 	mov.w	r2, #4294967295
 801a966:	4b0b      	ldr	r3, [pc, #44]	; (801a994 <_ZSt5isinfd+0x5c>)
 801a968:	4620      	mov	r0, r4
 801a96a:	4629      	mov	r1, r5
 801a96c:	f7e6 f8ca 	bl	8000b04 <__aeabi_dcmple>
 801a970:	4603      	mov	r3, r0
 801a972:	2b00      	cmp	r3, #0
 801a974:	d101      	bne.n	801a97a <_ZSt5isinfd+0x42>
 801a976:	2300      	movs	r3, #0
 801a978:	461e      	mov	r6, r3
 801a97a:	b2f3      	uxtb	r3, r6
 801a97c:	f083 0301 	eor.w	r3, r3, #1
 801a980:	b2db      	uxtb	r3, r3
 801a982:	2b00      	cmp	r3, #0
 801a984:	bf14      	ite	ne
 801a986:	2301      	movne	r3, #1
 801a988:	2300      	moveq	r3, #0
 801a98a:	b2db      	uxtb	r3, r3
 801a98c:	4618      	mov	r0, r3
 801a98e:	370c      	adds	r7, #12
 801a990:	46bd      	mov	sp, r7
 801a992:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a994:	7fefffff 	.word	0x7fefffff

0801a998 <_Z29ei_run_impulse_check_canceledv>:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

__attribute__((weak)) EI_IMPULSE_ERROR ei_run_impulse_check_canceled() {
 801a998:	b480      	push	{r7}
 801a99a:	af00      	add	r7, sp, #0
    return EI_IMPULSE_OK;
 801a99c:	2300      	movs	r3, #0
}
 801a99e:	4618      	mov	r0, r3
 801a9a0:	46bd      	mov	sp, r7
 801a9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9a6:	4770      	bx	lr

0801a9a8 <_Z16ei_read_timer_msv>:
__attribute__((weak)) EI_IMPULSE_ERROR ei_sleep(int32_t time_ms) {
    HAL_Delay(time_ms);
    return EI_IMPULSE_OK;
}

uint64_t ei_read_timer_ms() {
 801a9a8:	b5b0      	push	{r4, r5, r7, lr}
 801a9aa:	af00      	add	r7, sp, #0
    return HAL_GetTick();
 801a9ac:	f7ee fd0c 	bl	80093c8 <HAL_GetTick>
 801a9b0:	4603      	mov	r3, r0
 801a9b2:	2200      	movs	r2, #0
 801a9b4:	461c      	mov	r4, r3
 801a9b6:	4615      	mov	r5, r2
 801a9b8:	4622      	mov	r2, r4
 801a9ba:	462b      	mov	r3, r5
}
 801a9bc:	4610      	mov	r0, r2
 801a9be:	4619      	mov	r1, r3
 801a9c0:	bdb0      	pop	{r4, r5, r7, pc}

0801a9c2 <_Z16ei_read_timer_usv>:

uint64_t ei_read_timer_us() {
 801a9c2:	b5b0      	push	{r4, r5, r7, lr}
 801a9c4:	af00      	add	r7, sp, #0
    return HAL_GetTick() * 1000;
 801a9c6:	f7ee fcff 	bl	80093c8 <HAL_GetTick>
 801a9ca:	4603      	mov	r3, r0
 801a9cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801a9d0:	fb02 f303 	mul.w	r3, r2, r3
 801a9d4:	2200      	movs	r2, #0
 801a9d6:	461c      	mov	r4, r3
 801a9d8:	4615      	mov	r5, r2
 801a9da:	4622      	mov	r2, r4
 801a9dc:	462b      	mov	r3, r5
}
 801a9de:	4610      	mov	r0, r2
 801a9e0:	4619      	mov	r1, r3
 801a9e2:	bdb0      	pop	{r4, r5, r7, pc}
 801a9e4:	0000      	movs	r0, r0
	...

0801a9e8 <_Z15ei_printf_floatf>:
    va_start(myargs, format);
    vprintf(format, myargs);
    va_end(myargs);
}

__attribute__((weak)) void ei_printf_float(float f) {
 801a9e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a9ec:	b08c      	sub	sp, #48	; 0x30
 801a9ee:	af00      	add	r7, sp, #0
 801a9f0:	ed87 0a01 	vstr	s0, [r7, #4]
        }
        *(c) = '\0';
    }


    ei_printf("%s", s);
 801a9f4:	466b      	mov	r3, sp
 801a9f6:	4698      	mov	r8, r3
    float n = f;
 801a9f8:	687b      	ldr	r3, [r7, #4]
 801a9fa:	627b      	str	r3, [r7, #36]	; 0x24
    char s[MAX_NUMBER_STRING_SIZE];
 801a9fc:	4b7e      	ldr	r3, [pc, #504]	; (801abf8 <_Z15ei_printf_floatf+0x210>)
 801a9fe:	681b      	ldr	r3, [r3, #0]
 801aa00:	1e5e      	subs	r6, r3, #1
 801aa02:	623e      	str	r6, [r7, #32]
 801aa04:	4633      	mov	r3, r6
 801aa06:	3301      	adds	r3, #1
 801aa08:	2200      	movs	r2, #0
 801aa0a:	461c      	mov	r4, r3
 801aa0c:	4615      	mov	r5, r2
 801aa0e:	f04f 0200 	mov.w	r2, #0
 801aa12:	f04f 0300 	mov.w	r3, #0
 801aa16:	00eb      	lsls	r3, r5, #3
 801aa18:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801aa1c:	00e2      	lsls	r2, r4, #3
 801aa1e:	4633      	mov	r3, r6
 801aa20:	3301      	adds	r3, #1
 801aa22:	2200      	movs	r2, #0
 801aa24:	4618      	mov	r0, r3
 801aa26:	4611      	mov	r1, r2
 801aa28:	f04f 0200 	mov.w	r2, #0
 801aa2c:	f04f 0300 	mov.w	r3, #0
 801aa30:	00cb      	lsls	r3, r1, #3
 801aa32:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 801aa36:	00c2      	lsls	r2, r0, #3
 801aa38:	4633      	mov	r3, r6
 801aa3a:	3301      	adds	r3, #1
 801aa3c:	3307      	adds	r3, #7
 801aa3e:	08db      	lsrs	r3, r3, #3
 801aa40:	00db      	lsls	r3, r3, #3
 801aa42:	ebad 0d03 	sub.w	sp, sp, r3
 801aa46:	466b      	mov	r3, sp
 801aa48:	3300      	adds	r3, #0
 801aa4a:	61fb      	str	r3, [r7, #28]
    if (n == 0.0) {
 801aa4c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801aa50:	eef5 7a40 	vcmp.f32	s15, #0.0
 801aa54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa58:	d106      	bne.n	801aa68 <_Z15ei_printf_floatf+0x80>
        strcpy(s, "0");
 801aa5a:	69fb      	ldr	r3, [r7, #28]
 801aa5c:	4967      	ldr	r1, [pc, #412]	; (801abfc <_Z15ei_printf_floatf+0x214>)
 801aa5e:	461a      	mov	r2, r3
 801aa60:	460b      	mov	r3, r1
 801aa62:	881b      	ldrh	r3, [r3, #0]
 801aa64:	8013      	strh	r3, [r2, #0]
 801aa66:	e0b6      	b.n	801abd6 <_Z15ei_printf_floatf+0x1ee>
        char *c = s;
 801aa68:	69fb      	ldr	r3, [r7, #28]
 801aa6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        int neg = (n < 0);
 801aa6c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801aa70:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801aa74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa78:	bf4c      	ite	mi
 801aa7a:	2301      	movmi	r3, #1
 801aa7c:	2300      	movpl	r3, #0
 801aa7e:	b2db      	uxtb	r3, r3
 801aa80:	61bb      	str	r3, [r7, #24]
        if (neg) {
 801aa82:	69bb      	ldr	r3, [r7, #24]
 801aa84:	2b00      	cmp	r3, #0
 801aa86:	d005      	beq.n	801aa94 <_Z15ei_printf_floatf+0xac>
            n = -n;
 801aa88:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801aa8c:	eef1 7a67 	vneg.f32	s15, s15
 801aa90:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        m = log10(n);
 801aa94:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 801aa98:	f7ff ff3e 	bl	801a918 <_ZSt5log10f>
 801aa9c:	eef0 7a40 	vmov.f32	s15, s0
 801aaa0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801aaa4:	ee17 3a90 	vmov	r3, s15
 801aaa8:	62bb      	str	r3, [r7, #40]	; 0x28
        if (neg) {
 801aaaa:	69bb      	ldr	r3, [r7, #24]
 801aaac:	2b00      	cmp	r3, #0
 801aaae:	d004      	beq.n	801aaba <_Z15ei_printf_floatf+0xd2>
            *(c++) = '-';
 801aab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aab2:	1c5a      	adds	r2, r3, #1
 801aab4:	62fa      	str	r2, [r7, #44]	; 0x2c
 801aab6:	222d      	movs	r2, #45	; 0x2d
 801aab8:	701a      	strb	r2, [r3, #0]
        if (m < 1.0) {
 801aaba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aabc:	2b00      	cmp	r3, #0
 801aabe:	dc01      	bgt.n	801aac4 <_Z15ei_printf_floatf+0xdc>
            m = 0;
 801aac0:	2300      	movs	r3, #0
 801aac2:	62bb      	str	r3, [r7, #40]	; 0x28
        while (n > PRECISION || m >= 0) {
 801aac4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801aac6:	f7e5 fd49 	bl	800055c <__aeabi_f2d>
 801aaca:	4b4d      	ldr	r3, [pc, #308]	; (801ac00 <_Z15ei_printf_floatf+0x218>)
 801aacc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aad0:	2401      	movs	r4, #1
 801aad2:	f7e6 f82b 	bl	8000b2c <__aeabi_dcmpgt>
 801aad6:	4603      	mov	r3, r0
 801aad8:	2b00      	cmp	r3, #0
 801aada:	d101      	bne.n	801aae0 <_Z15ei_printf_floatf+0xf8>
 801aadc:	2300      	movs	r3, #0
 801aade:	461c      	mov	r4, r3
 801aae0:	b2e3      	uxtb	r3, r4
 801aae2:	f083 0301 	eor.w	r3, r3, #1
 801aae6:	b2db      	uxtb	r3, r3
 801aae8:	2b00      	cmp	r3, #0
 801aaea:	d002      	beq.n	801aaf2 <_Z15ei_printf_floatf+0x10a>
 801aaec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aaee:	2b00      	cmp	r3, #0
 801aaf0:	db6e      	blt.n	801abd0 <_Z15ei_printf_floatf+0x1e8>
            double weight = pow(10.0, m);
 801aaf2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801aaf4:	ed9f 0b3e 	vldr	d0, [pc, #248]	; 801abf0 <_Z15ei_printf_floatf+0x208>
 801aaf8:	f000 f8ab 	bl	801ac52 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 801aafc:	ed87 0b04 	vstr	d0, [r7, #16]
            if (weight > 0 && !isinf(weight)) {
 801ab00:	f04f 0200 	mov.w	r2, #0
 801ab04:	f04f 0300 	mov.w	r3, #0
 801ab08:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801ab0c:	f7e6 f80e 	bl	8000b2c <__aeabi_dcmpgt>
 801ab10:	4603      	mov	r3, r0
 801ab12:	2b00      	cmp	r3, #0
 801ab14:	d00b      	beq.n	801ab2e <_Z15ei_printf_floatf+0x146>
 801ab16:	ed97 0b04 	vldr	d0, [r7, #16]
 801ab1a:	f7ff ff0d 	bl	801a938 <_ZSt5isinfd>
 801ab1e:	4603      	mov	r3, r0
 801ab20:	f083 0301 	eor.w	r3, r3, #1
 801ab24:	b2db      	uxtb	r3, r3
 801ab26:	2b00      	cmp	r3, #0
 801ab28:	d001      	beq.n	801ab2e <_Z15ei_printf_floatf+0x146>
 801ab2a:	2301      	movs	r3, #1
 801ab2c:	e000      	b.n	801ab30 <_Z15ei_printf_floatf+0x148>
 801ab2e:	2300      	movs	r3, #0
 801ab30:	2b00      	cmp	r3, #0
 801ab32:	d03a      	beq.n	801abaa <_Z15ei_printf_floatf+0x1c2>
                digit = floor(n / weight);
 801ab34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ab36:	f7e5 fd11 	bl	800055c <__aeabi_f2d>
 801ab3a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801ab3e:	f7e5 fe8f 	bl	8000860 <__aeabi_ddiv>
 801ab42:	4602      	mov	r2, r0
 801ab44:	460b      	mov	r3, r1
 801ab46:	ec43 2b17 	vmov	d7, r2, r3
 801ab4a:	eeb0 0a47 	vmov.f32	s0, s14
 801ab4e:	eef0 0a67 	vmov.f32	s1, s15
 801ab52:	f005 ff8d 	bl	8020a70 <floor>
 801ab56:	ec53 2b10 	vmov	r2, r3, d0
 801ab5a:	4610      	mov	r0, r2
 801ab5c:	4619      	mov	r1, r3
 801ab5e:	f7e6 f805 	bl	8000b6c <__aeabi_d2iz>
 801ab62:	4603      	mov	r3, r0
 801ab64:	60fb      	str	r3, [r7, #12]
                n -= (digit * weight);
 801ab66:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ab68:	f7e5 fcf8 	bl	800055c <__aeabi_f2d>
 801ab6c:	4604      	mov	r4, r0
 801ab6e:	460d      	mov	r5, r1
 801ab70:	68f8      	ldr	r0, [r7, #12]
 801ab72:	f7e5 fce1 	bl	8000538 <__aeabi_i2d>
 801ab76:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801ab7a:	f7e5 fd47 	bl	800060c <__aeabi_dmul>
 801ab7e:	4602      	mov	r2, r0
 801ab80:	460b      	mov	r3, r1
 801ab82:	4620      	mov	r0, r4
 801ab84:	4629      	mov	r1, r5
 801ab86:	f7e5 fb89 	bl	800029c <__aeabi_dsub>
 801ab8a:	4602      	mov	r2, r0
 801ab8c:	460b      	mov	r3, r1
 801ab8e:	4610      	mov	r0, r2
 801ab90:	4619      	mov	r1, r3
 801ab92:	f7e6 f833 	bl	8000bfc <__aeabi_d2f>
 801ab96:	4603      	mov	r3, r0
 801ab98:	627b      	str	r3, [r7, #36]	; 0x24
                *(c++) = '0' + digit;
 801ab9a:	68fb      	ldr	r3, [r7, #12]
 801ab9c:	b2da      	uxtb	r2, r3
 801ab9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aba0:	1c59      	adds	r1, r3, #1
 801aba2:	62f9      	str	r1, [r7, #44]	; 0x2c
 801aba4:	3230      	adds	r2, #48	; 0x30
 801aba6:	b2d2      	uxtb	r2, r2
 801aba8:	701a      	strb	r2, [r3, #0]
            if (m == 0 && n > 0) {
 801abaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801abac:	2b00      	cmp	r3, #0
 801abae:	d10b      	bne.n	801abc8 <_Z15ei_printf_floatf+0x1e0>
 801abb0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801abb4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801abb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801abbc:	dd04      	ble.n	801abc8 <_Z15ei_printf_floatf+0x1e0>
                *(c++) = '.';
 801abbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801abc0:	1c5a      	adds	r2, r3, #1
 801abc2:	62fa      	str	r2, [r7, #44]	; 0x2c
 801abc4:	222e      	movs	r2, #46	; 0x2e
 801abc6:	701a      	strb	r2, [r3, #0]
            m--;
 801abc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801abca:	3b01      	subs	r3, #1
 801abcc:	62bb      	str	r3, [r7, #40]	; 0x28
        while (n > PRECISION || m >= 0) {
 801abce:	e779      	b.n	801aac4 <_Z15ei_printf_floatf+0xdc>
        *(c) = '\0';
 801abd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801abd2:	2200      	movs	r2, #0
 801abd4:	701a      	strb	r2, [r3, #0]
    ei_printf("%s", s);
 801abd6:	69f9      	ldr	r1, [r7, #28]
 801abd8:	480a      	ldr	r0, [pc, #40]	; (801ac04 <_Z15ei_printf_floatf+0x21c>)
 801abda:	f7eb fa4f 	bl	800607c <_Z9ei_printfPKcz>
 801abde:	46c5      	mov	sp, r8
}
 801abe0:	bf00      	nop
 801abe2:	3730      	adds	r7, #48	; 0x30
 801abe4:	46bd      	mov	sp, r7
 801abe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801abea:	bf00      	nop
 801abec:	f3af 8000 	nop.w
 801abf0:	00000000 	.word	0x00000000
 801abf4:	40240000 	.word	0x40240000
 801abf8:	20000110 	.word	0x20000110
 801abfc:	08028440 	.word	0x08028440
 801ac00:	20000108 	.word	0x20000108
 801ac04:	08028444 	.word	0x08028444

0801ac08 <_Z9ei_mallocj>:

__attribute__((weak)) void *ei_malloc(size_t size) {
 801ac08:	b580      	push	{r7, lr}
 801ac0a:	b082      	sub	sp, #8
 801ac0c:	af00      	add	r7, sp, #0
 801ac0e:	6078      	str	r0, [r7, #4]
    return malloc(size);
 801ac10:	6878      	ldr	r0, [r7, #4]
 801ac12:	f008 fc85 	bl	8023520 <malloc>
 801ac16:	4603      	mov	r3, r0
}
 801ac18:	4618      	mov	r0, r3
 801ac1a:	3708      	adds	r7, #8
 801ac1c:	46bd      	mov	sp, r7
 801ac1e:	bd80      	pop	{r7, pc}

0801ac20 <_Z9ei_callocjj>:

__attribute__((weak)) void *ei_calloc(size_t nitems, size_t size) {
 801ac20:	b580      	push	{r7, lr}
 801ac22:	b082      	sub	sp, #8
 801ac24:	af00      	add	r7, sp, #0
 801ac26:	6078      	str	r0, [r7, #4]
 801ac28:	6039      	str	r1, [r7, #0]
    return calloc(nitems, size);
 801ac2a:	6839      	ldr	r1, [r7, #0]
 801ac2c:	6878      	ldr	r0, [r7, #4]
 801ac2e:	f008 fc2f 	bl	8023490 <calloc>
 801ac32:	4603      	mov	r3, r0
}
 801ac34:	4618      	mov	r0, r3
 801ac36:	3708      	adds	r7, #8
 801ac38:	46bd      	mov	sp, r7
 801ac3a:	bd80      	pop	{r7, pc}

0801ac3c <_Z7ei_freePv>:

__attribute__((weak)) void ei_free(void *ptr) {
 801ac3c:	b580      	push	{r7, lr}
 801ac3e:	b082      	sub	sp, #8
 801ac40:	af00      	add	r7, sp, #0
 801ac42:	6078      	str	r0, [r7, #4]
    free(ptr);
 801ac44:	6878      	ldr	r0, [r7, #4]
 801ac46:	f008 fc73 	bl	8023530 <free>
}
 801ac4a:	bf00      	nop
 801ac4c:	3708      	adds	r7, #8
 801ac4e:	46bd      	mov	sp, r7
 801ac50:	bd80      	pop	{r7, pc}

0801ac52 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 801ac52:	b580      	push	{r7, lr}
 801ac54:	b084      	sub	sp, #16
 801ac56:	af00      	add	r7, sp, #0
 801ac58:	ed87 0b02 	vstr	d0, [r7, #8]
 801ac5c:	6078      	str	r0, [r7, #4]
      return pow(__type(__x), __type(__y));
 801ac5e:	6878      	ldr	r0, [r7, #4]
 801ac60:	f7e5 fc6a 	bl	8000538 <__aeabi_i2d>
 801ac64:	4602      	mov	r2, r0
 801ac66:	460b      	mov	r3, r1
 801ac68:	ec43 2b11 	vmov	d1, r2, r3
 801ac6c:	ed97 0b02 	vldr	d0, [r7, #8]
 801ac70:	f006 f8d4 	bl	8020e1c <pow>
 801ac74:	eeb0 7a40 	vmov.f32	s14, s0
 801ac78:	eef0 7a60 	vmov.f32	s15, s1
    }
 801ac7c:	eeb0 0a47 	vmov.f32	s0, s14
 801ac80:	eef0 0a67 	vmov.f32	s1, s15
 801ac84:	3710      	adds	r7, #16
 801ac86:	46bd      	mov	sp, r7
 801ac88:	bd80      	pop	{r7, pc}
	...

0801ac8c <TfLiteTypeGetName>:
  }
  tensor->bytes = num_bytes;
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
 801ac8c:	b480      	push	{r7}
 801ac8e:	b083      	sub	sp, #12
 801ac90:	af00      	add	r7, sp, #0
 801ac92:	4603      	mov	r3, r0
 801ac94:	71fb      	strb	r3, [r7, #7]
  switch (type) {
 801ac96:	79fb      	ldrb	r3, [r7, #7]
 801ac98:	2b10      	cmp	r3, #16
 801ac9a:	d847      	bhi.n	801ad2c <TfLiteTypeGetName+0xa0>
 801ac9c:	a201      	add	r2, pc, #4	; (adr r2, 801aca4 <TfLiteTypeGetName+0x18>)
 801ac9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801aca2:	bf00      	nop
 801aca4:	0801ace9 	.word	0x0801ace9
 801aca8:	0801aced 	.word	0x0801aced
 801acac:	0801acf5 	.word	0x0801acf5
 801acb0:	0801acfd 	.word	0x0801acfd
 801acb4:	0801ad05 	.word	0x0801ad05
 801acb8:	0801ad19 	.word	0x0801ad19
 801acbc:	0801ad0d 	.word	0x0801ad0d
 801acc0:	0801acf1 	.word	0x0801acf1
 801acc4:	0801ad11 	.word	0x0801ad11
 801acc8:	0801ad01 	.word	0x0801ad01
 801accc:	0801ad1d 	.word	0x0801ad1d
 801acd0:	0801ad21 	.word	0x0801ad21
 801acd4:	0801ad15 	.word	0x0801ad15
 801acd8:	0801ad09 	.word	0x0801ad09
 801acdc:	0801ad25 	.word	0x0801ad25
 801ace0:	0801ad29 	.word	0x0801ad29
 801ace4:	0801acf9 	.word	0x0801acf9
    case kTfLiteNoType:
      return "NOTYPE";
 801ace8:	4b14      	ldr	r3, [pc, #80]	; (801ad3c <TfLiteTypeGetName+0xb0>)
 801acea:	e020      	b.n	801ad2e <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat32:
      return "FLOAT32";
 801acec:	4b14      	ldr	r3, [pc, #80]	; (801ad40 <TfLiteTypeGetName+0xb4>)
 801acee:	e01e      	b.n	801ad2e <TfLiteTypeGetName+0xa2>
    case kTfLiteInt16:
      return "INT16";
 801acf0:	4b14      	ldr	r3, [pc, #80]	; (801ad44 <TfLiteTypeGetName+0xb8>)
 801acf2:	e01c      	b.n	801ad2e <TfLiteTypeGetName+0xa2>
    case kTfLiteInt32:
      return "INT32";
 801acf4:	4b14      	ldr	r3, [pc, #80]	; (801ad48 <TfLiteTypeGetName+0xbc>)
 801acf6:	e01a      	b.n	801ad2e <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt32:
      return "UINT32";
 801acf8:	4b14      	ldr	r3, [pc, #80]	; (801ad4c <TfLiteTypeGetName+0xc0>)
 801acfa:	e018      	b.n	801ad2e <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt8:
      return "UINT8";
 801acfc:	4b14      	ldr	r3, [pc, #80]	; (801ad50 <TfLiteTypeGetName+0xc4>)
 801acfe:	e016      	b.n	801ad2e <TfLiteTypeGetName+0xa2>
    case kTfLiteInt8:
      return "INT8";
 801ad00:	4b14      	ldr	r3, [pc, #80]	; (801ad54 <TfLiteTypeGetName+0xc8>)
 801ad02:	e014      	b.n	801ad2e <TfLiteTypeGetName+0xa2>
    case kTfLiteInt64:
      return "INT64";
 801ad04:	4b14      	ldr	r3, [pc, #80]	; (801ad58 <TfLiteTypeGetName+0xcc>)
 801ad06:	e012      	b.n	801ad2e <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt64:
      return "UINT64";
 801ad08:	4b14      	ldr	r3, [pc, #80]	; (801ad5c <TfLiteTypeGetName+0xd0>)
 801ad0a:	e010      	b.n	801ad2e <TfLiteTypeGetName+0xa2>
    case kTfLiteBool:
      return "BOOL";
 801ad0c:	4b14      	ldr	r3, [pc, #80]	; (801ad60 <TfLiteTypeGetName+0xd4>)
 801ad0e:	e00e      	b.n	801ad2e <TfLiteTypeGetName+0xa2>
    case kTfLiteComplex64:
      return "COMPLEX64";
 801ad10:	4b14      	ldr	r3, [pc, #80]	; (801ad64 <TfLiteTypeGetName+0xd8>)
 801ad12:	e00c      	b.n	801ad2e <TfLiteTypeGetName+0xa2>
    case kTfLiteComplex128:
      return "COMPLEX128";
 801ad14:	4b14      	ldr	r3, [pc, #80]	; (801ad68 <TfLiteTypeGetName+0xdc>)
 801ad16:	e00a      	b.n	801ad2e <TfLiteTypeGetName+0xa2>
    case kTfLiteString:
      return "STRING";
 801ad18:	4b14      	ldr	r3, [pc, #80]	; (801ad6c <TfLiteTypeGetName+0xe0>)
 801ad1a:	e008      	b.n	801ad2e <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat16:
      return "FLOAT16";
 801ad1c:	4b14      	ldr	r3, [pc, #80]	; (801ad70 <TfLiteTypeGetName+0xe4>)
 801ad1e:	e006      	b.n	801ad2e <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat64:
      return "FLOAT64";
 801ad20:	4b14      	ldr	r3, [pc, #80]	; (801ad74 <TfLiteTypeGetName+0xe8>)
 801ad22:	e004      	b.n	801ad2e <TfLiteTypeGetName+0xa2>
    case kTfLiteResource:
      return "RESOURCE";
 801ad24:	4b14      	ldr	r3, [pc, #80]	; (801ad78 <TfLiteTypeGetName+0xec>)
 801ad26:	e002      	b.n	801ad2e <TfLiteTypeGetName+0xa2>
    case kTfLiteVariant:
      return "VARIANT";
 801ad28:	4b14      	ldr	r3, [pc, #80]	; (801ad7c <TfLiteTypeGetName+0xf0>)
 801ad2a:	e000      	b.n	801ad2e <TfLiteTypeGetName+0xa2>
  }
  return "Unknown type";
 801ad2c:	4b14      	ldr	r3, [pc, #80]	; (801ad80 <TfLiteTypeGetName+0xf4>)
}
 801ad2e:	4618      	mov	r0, r3
 801ad30:	370c      	adds	r7, #12
 801ad32:	46bd      	mov	sp, r7
 801ad34:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad38:	4770      	bx	lr
 801ad3a:	bf00      	nop
 801ad3c:	08028448 	.word	0x08028448
 801ad40:	08028450 	.word	0x08028450
 801ad44:	08028458 	.word	0x08028458
 801ad48:	08028460 	.word	0x08028460
 801ad4c:	08028468 	.word	0x08028468
 801ad50:	08028470 	.word	0x08028470
 801ad54:	08028478 	.word	0x08028478
 801ad58:	08028480 	.word	0x08028480
 801ad5c:	08028488 	.word	0x08028488
 801ad60:	08028490 	.word	0x08028490
 801ad64:	08028498 	.word	0x08028498
 801ad68:	080284a4 	.word	0x080284a4
 801ad6c:	080284b0 	.word	0x080284b0
 801ad70:	080284b8 	.word	0x080284b8
 801ad74:	080284c0 	.word	0x080284c0
 801ad78:	080284c8 	.word	0x080284c8
 801ad7c:	080284d4 	.word	0x080284d4
 801ad80:	080284dc 	.word	0x080284dc

0801ad84 <_ZNSt14numeric_limitsIlE3maxEv>:

      static _GLIBCXX_CONSTEXPR long
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }

      static _GLIBCXX_CONSTEXPR long
      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_MAX__; }
 801ad84:	b480      	push	{r7}
 801ad86:	af00      	add	r7, sp, #0
 801ad88:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801ad8c:	4618      	mov	r0, r3
 801ad8e:	46bd      	mov	sp, r7
 801ad90:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad94:	4770      	bx	lr
	...

0801ad98 <_ZN6tflite18QuantizeMultiplierEdPlPi>:
constexpr uint32_t kFractionRoundingMask = 0x003fffff;
constexpr uint32_t kFractionRoundingThreshold = 0x00200000;
}  // namespace

void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
                        int* shift) {
 801ad98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801ad9c:	b088      	sub	sp, #32
 801ad9e:	af00      	add	r7, sp, #0
 801ada0:	ed87 0b02 	vstr	d0, [r7, #8]
 801ada4:	6078      	str	r0, [r7, #4]
 801ada6:	6039      	str	r1, [r7, #0]
  if (double_multiplier == 0.) {
 801ada8:	f04f 0200 	mov.w	r2, #0
 801adac:	f04f 0300 	mov.w	r3, #0
 801adb0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801adb4:	f7e5 fe92 	bl	8000adc <__aeabi_dcmpeq>
 801adb8:	4603      	mov	r3, r0
 801adba:	2b00      	cmp	r3, #0
 801adbc:	d006      	beq.n	801adcc <_ZN6tflite18QuantizeMultiplierEdPlPi+0x34>
    *quantized_multiplier = 0;
 801adbe:	687b      	ldr	r3, [r7, #4]
 801adc0:	2200      	movs	r2, #0
 801adc2:	601a      	str	r2, [r3, #0]
    *shift = 0;
 801adc4:	683b      	ldr	r3, [r7, #0]
 801adc6:	2200      	movs	r2, #0
 801adc8:	601a      	str	r2, [r3, #0]
    return;
 801adca:	e068      	b.n	801ae9e <_ZN6tflite18QuantizeMultiplierEdPlPi+0x106>
  // example on microcontrollers) then use an alternative implementation
  // that only requires integer and bitwise operations. To enable this, you
  // need to set the define during the build process for your platform.
  int64_t q_fixed = IntegerFrExp(double_multiplier, shift);
#else   // TFLITE_EMULATE_FLOAT
  const double q = std::frexp(double_multiplier, shift);
 801adcc:	6838      	ldr	r0, [r7, #0]
 801adce:	ed97 0b02 	vldr	d0, [r7, #8]
 801add2:	f005 fecd 	bl	8020b70 <frexp>
 801add6:	ed87 0b04 	vstr	d0, [r7, #16]
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
 801adda:	f04f 0200 	mov.w	r2, #0
 801adde:	4b32      	ldr	r3, [pc, #200]	; (801aea8 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x110>)
 801ade0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801ade4:	f7e5 fc12 	bl	800060c <__aeabi_dmul>
 801ade8:	4602      	mov	r2, r0
 801adea:	460b      	mov	r3, r1
 801adec:	ec43 2b17 	vmov	d7, r2, r3
 801adf0:	eeb0 0a47 	vmov.f32	s0, s14
 801adf4:	eef0 0a67 	vmov.f32	s1, s15
 801adf8:	f000 f962 	bl	801b0c0 <_ZN6tflite11TfLiteRoundIdEET_S1_>
 801adfc:	ec53 2b10 	vmov	r2, r3, d0
 801ae00:	4610      	mov	r0, r2
 801ae02:	4619      	mov	r1, r3
 801ae04:	f7e5 ffb2 	bl	8000d6c <__aeabi_d2lz>
 801ae08:	4602      	mov	r2, r0
 801ae0a:	460b      	mov	r3, r1
 801ae0c:	e9c7 2306 	strd	r2, r3, [r7, #24]
#endif  // TFLITE_EMULATE_FLOAT
  TFLITE_CHECK(q_fixed <= (1ll << 31));
 801ae10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801ae14:	4925      	ldr	r1, [pc, #148]	; (801aeac <_ZN6tflite18QuantizeMultiplierEdPlPi+0x114>)
 801ae16:	428a      	cmp	r2, r1
 801ae18:	f173 0300 	sbcs.w	r3, r3, #0
 801ae1c:	db01      	blt.n	801ae22 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x8a>
 801ae1e:	f008 fb0d 	bl	802343c <abort>
  if (q_fixed == (1ll << 31)) {
 801ae22:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801ae26:	f102 4100 	add.w	r1, r2, #2147483648	; 0x80000000
 801ae2a:	430b      	orrs	r3, r1
 801ae2c:	d118      	bne.n	801ae60 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xc8>
    q_fixed /= 2;
 801ae2e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801ae32:	0fd9      	lsrs	r1, r3, #31
 801ae34:	2000      	movs	r0, #0
 801ae36:	468a      	mov	sl, r1
 801ae38:	4683      	mov	fp, r0
 801ae3a:	eb1a 0402 	adds.w	r4, sl, r2
 801ae3e:	eb4b 0503 	adc.w	r5, fp, r3
 801ae42:	f04f 0200 	mov.w	r2, #0
 801ae46:	f04f 0300 	mov.w	r3, #0
 801ae4a:	0862      	lsrs	r2, r4, #1
 801ae4c:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 801ae50:	106b      	asrs	r3, r5, #1
 801ae52:	e9c7 2306 	strd	r2, r3, [r7, #24]
    ++*shift;
 801ae56:	683b      	ldr	r3, [r7, #0]
 801ae58:	681b      	ldr	r3, [r3, #0]
 801ae5a:	1c5a      	adds	r2, r3, #1
 801ae5c:	683b      	ldr	r3, [r7, #0]
 801ae5e:	601a      	str	r2, [r3, #0]
  }
  TFLITE_CHECK_LE(q_fixed, std::numeric_limits<int32_t>::max());
 801ae60:	f7ff ff90 	bl	801ad84 <_ZNSt14numeric_limitsIlE3maxEv>
 801ae64:	4603      	mov	r3, r0
 801ae66:	17da      	asrs	r2, r3, #31
 801ae68:	4698      	mov	r8, r3
 801ae6a:	4691      	mov	r9, r2
 801ae6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801ae70:	4590      	cmp	r8, r2
 801ae72:	eb79 0303 	sbcs.w	r3, r9, r3
 801ae76:	da01      	bge.n	801ae7c <_ZN6tflite18QuantizeMultiplierEdPlPi+0xe4>
 801ae78:	f008 fae0 	bl	802343c <abort>
  // that we're effectively flushing tiny double_multiplier's to zero.
  // We could conceivably handle values in the range (roughly) [32, 63]
  // as 'denormals' i.e. (shift==0, q_fixed < 2^30). In that point of view
  // the present handling is just doing 'flush denormals to zero'. We could
  // reconsider and actually generate nonzero denormals if a need arises.
  if (*shift < -31) {
 801ae7c:	683b      	ldr	r3, [r7, #0]
 801ae7e:	681b      	ldr	r3, [r3, #0]
 801ae80:	f113 0f1f 	cmn.w	r3, #31
 801ae84:	da08      	bge.n	801ae98 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x100>
    *shift = 0;
 801ae86:	683b      	ldr	r3, [r7, #0]
 801ae88:	2200      	movs	r2, #0
 801ae8a:	601a      	str	r2, [r3, #0]
    q_fixed = 0;
 801ae8c:	f04f 0200 	mov.w	r2, #0
 801ae90:	f04f 0300 	mov.w	r3, #0
 801ae94:	e9c7 2306 	strd	r2, r3, [r7, #24]
  }
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
 801ae98:	69ba      	ldr	r2, [r7, #24]
 801ae9a:	687b      	ldr	r3, [r7, #4]
 801ae9c:	601a      	str	r2, [r3, #0]
}
 801ae9e:	3720      	adds	r7, #32
 801aea0:	46bd      	mov	sp, r7
 801aea2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801aea6:	bf00      	nop
 801aea8:	41e00000 	.word	0x41e00000
 801aeac:	80000001 	.word	0x80000001

0801aeb0 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>:

void QuantizeMultiplierGreaterThanOne(double double_multiplier,
                                      int32_t* quantized_multiplier,
                                      int* left_shift) {
 801aeb0:	b580      	push	{r7, lr}
 801aeb2:	b084      	sub	sp, #16
 801aeb4:	af00      	add	r7, sp, #0
 801aeb6:	ed87 0b02 	vstr	d0, [r7, #8]
 801aeba:	6078      	str	r0, [r7, #4]
 801aebc:	6039      	str	r1, [r7, #0]
  TFLITE_CHECK_GT(double_multiplier, 1.);
 801aebe:	f04f 0200 	mov.w	r2, #0
 801aec2:	4b0d      	ldr	r3, [pc, #52]	; (801aef8 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x48>)
 801aec4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801aec8:	f7e5 fe30 	bl	8000b2c <__aeabi_dcmpgt>
 801aecc:	4603      	mov	r3, r0
 801aece:	2b00      	cmp	r3, #0
 801aed0:	d101      	bne.n	801aed6 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x26>
 801aed2:	f008 fab3 	bl	802343c <abort>
  QuantizeMultiplier(double_multiplier, quantized_multiplier, left_shift);
 801aed6:	6839      	ldr	r1, [r7, #0]
 801aed8:	6878      	ldr	r0, [r7, #4]
 801aeda:	ed97 0b02 	vldr	d0, [r7, #8]
 801aede:	f7ff ff5b 	bl	801ad98 <_ZN6tflite18QuantizeMultiplierEdPlPi>
  TFLITE_CHECK_GE(*left_shift, 0);
 801aee2:	683b      	ldr	r3, [r7, #0]
 801aee4:	681b      	ldr	r3, [r3, #0]
 801aee6:	2b00      	cmp	r3, #0
 801aee8:	da01      	bge.n	801aeee <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x3e>
 801aeea:	f008 faa7 	bl	802343c <abort>
}
 801aeee:	bf00      	nop
 801aef0:	3710      	adds	r7, #16
 801aef2:	46bd      	mov	sp, r7
 801aef4:	bd80      	pop	{r7, pc}
 801aef6:	bf00      	nop
 801aef8:	3ff00000 	.word	0x3ff00000

0801aefc <_ZSt3minIdERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 801aefc:	b580      	push	{r7, lr}
 801aefe:	b082      	sub	sp, #8
 801af00:	af00      	add	r7, sp, #0
 801af02:	6078      	str	r0, [r7, #4]
 801af04:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 801af06:	683b      	ldr	r3, [r7, #0]
 801af08:	e9d3 0100 	ldrd	r0, r1, [r3]
 801af0c:	687b      	ldr	r3, [r7, #4]
 801af0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af12:	f7e5 fded 	bl	8000af0 <__aeabi_dcmplt>
 801af16:	4603      	mov	r3, r0
 801af18:	2b00      	cmp	r3, #0
 801af1a:	d001      	beq.n	801af20 <_ZSt3minIdERKT_S2_S2_+0x24>
	return __b;
 801af1c:	683b      	ldr	r3, [r7, #0]
 801af1e:	e000      	b.n	801af22 <_ZSt3minIdERKT_S2_S2_+0x26>
      return __a;
 801af20:	687b      	ldr	r3, [r7, #4]
    }
 801af22:	4618      	mov	r0, r3
 801af24:	3708      	adds	r7, #8
 801af26:	46bd      	mov	sp, r7
 801af28:	bd80      	pop	{r7, pc}
 801af2a:	0000      	movs	r0, r0
 801af2c:	0000      	movs	r0, r0
	...

0801af30 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>:
  }
}

void PreprocessSoftmaxScaling(double beta, double input_scale,
                              int input_integer_bits,
                              int32_t* quantized_multiplier, int* left_shift) {
 801af30:	b5b0      	push	{r4, r5, r7, lr}
 801af32:	b08e      	sub	sp, #56	; 0x38
 801af34:	af00      	add	r7, sp, #0
 801af36:	ed87 0b06 	vstr	d0, [r7, #24]
 801af3a:	ed87 1b04 	vstr	d1, [r7, #16]
 801af3e:	60f8      	str	r0, [r7, #12]
 801af40:	60b9      	str	r1, [r7, #8]
 801af42:	607a      	str	r2, [r7, #4]
  if (IntegerDoubleCompare(input_beta_real_multiplier, (1ll << 31) - 1.0) > 0) {
    input_beta_real_multiplier = (1ll << 31) - 1.0;
  }
#else   // TFLITE_EMULATE_FLOAT
  const double input_beta_real_multiplier = std::min<double>(
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
 801af44:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801af48:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801af4c:	f7e5 fb5e 	bl	800060c <__aeabi_dmul>
 801af50:	4602      	mov	r2, r0
 801af52:	460b      	mov	r3, r1
 801af54:	4614      	mov	r4, r2
 801af56:	461d      	mov	r5, r3
 801af58:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801af5c:	68fb      	ldr	r3, [r7, #12]
 801af5e:	fa22 f303 	lsr.w	r3, r2, r3
 801af62:	4618      	mov	r0, r3
 801af64:	f7e5 fae8 	bl	8000538 <__aeabi_i2d>
 801af68:	4602      	mov	r2, r0
 801af6a:	460b      	mov	r3, r1
 801af6c:	4620      	mov	r0, r4
 801af6e:	4629      	mov	r1, r5
 801af70:	f7e5 fb4c 	bl	800060c <__aeabi_dmul>
 801af74:	4602      	mov	r2, r0
 801af76:	460b      	mov	r3, r1
 801af78:	e9c7 2308 	strd	r2, r3, [r7, #32]
 801af7c:	a30e      	add	r3, pc, #56	; (adr r3, 801afb8 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x88>)
 801af7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af82:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 801af86:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801af8a:	f107 0320 	add.w	r3, r7, #32
 801af8e:	4611      	mov	r1, r2
 801af90:	4618      	mov	r0, r3
 801af92:	f7ff ffb3 	bl	801aefc <_ZSt3minIdERKT_S2_S2_>
 801af96:	4603      	mov	r3, r0
 801af98:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af9c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
#endif  // TFLITE_EMULATE_FLOAT

  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
 801afa0:	6879      	ldr	r1, [r7, #4]
 801afa2:	68b8      	ldr	r0, [r7, #8]
 801afa4:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 801afa8:	f7ff ff82 	bl	801aeb0 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>
                                   quantized_multiplier, left_shift);
}
 801afac:	bf00      	nop
 801afae:	3738      	adds	r7, #56	; 0x38
 801afb0:	46bd      	mov	sp, r7
 801afb2:	bdb0      	pop	{r4, r5, r7, pc}
 801afb4:	f3af 8000 	nop.w
 801afb8:	ffc00000 	.word	0xffc00000
 801afbc:	41dfffff 	.word	0x41dfffff

0801afc0 <_ZN6tflite20CalculateInputRadiusEiii>:
                                              reverse_scaling_divisor,
                                              reverse_scaling_left_shift);
}

int CalculateInputRadius(int input_integer_bits, int input_left_shift,
                         int total_signed_bits) {
 801afc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801afc4:	b087      	sub	sp, #28
 801afc6:	af00      	add	r7, sp, #0
 801afc8:	60f8      	str	r0, [r7, #12]
 801afca:	60b9      	str	r1, [r7, #8]
 801afcc:	607a      	str	r2, [r7, #4]
  result <<= (total_signed_bits - input_integer_bits);
  result >>= input_left_shift;
  return result;
#else   // TFLITE_EMULATE_FLOAT
  const double max_input_rescaled =
      1.0 * ((1 << input_integer_bits) - 1) *
 801afce:	2201      	movs	r2, #1
 801afd0:	68fb      	ldr	r3, [r7, #12]
 801afd2:	fa02 f303 	lsl.w	r3, r2, r3
 801afd6:	3b01      	subs	r3, #1
 801afd8:	4618      	mov	r0, r3
 801afda:	f7e5 faad 	bl	8000538 <__aeabi_i2d>
 801afde:	4682      	mov	sl, r0
 801afe0:	468b      	mov	fp, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
 801afe2:	687a      	ldr	r2, [r7, #4]
 801afe4:	68fb      	ldr	r3, [r7, #12]
 801afe6:	1ad1      	subs	r1, r2, r3
 801afe8:	f04f 0201 	mov.w	r2, #1
 801afec:	f04f 0300 	mov.w	r3, #0
 801aff0:	f1a1 0620 	sub.w	r6, r1, #32
 801aff4:	f1c1 0020 	rsb	r0, r1, #32
 801aff8:	fa03 f901 	lsl.w	r9, r3, r1
 801affc:	fa02 f606 	lsl.w	r6, r2, r6
 801b000:	ea49 0906 	orr.w	r9, r9, r6
 801b004:	fa22 f000 	lsr.w	r0, r2, r0
 801b008:	ea49 0900 	orr.w	r9, r9, r0
 801b00c:	fa02 f801 	lsl.w	r8, r2, r1
      1.0 * ((1 << input_integer_bits) - 1) *
 801b010:	4640      	mov	r0, r8
 801b012:	4649      	mov	r1, r9
 801b014:	f7e5 facc 	bl	80005b0 <__aeabi_l2d>
 801b018:	4602      	mov	r2, r0
 801b01a:	460b      	mov	r3, r1
 801b01c:	4650      	mov	r0, sl
 801b01e:	4659      	mov	r1, fp
 801b020:	f7e5 faf4 	bl	800060c <__aeabi_dmul>
 801b024:	4602      	mov	r2, r0
 801b026:	460b      	mov	r3, r1
 801b028:	4690      	mov	r8, r2
 801b02a:	4699      	mov	r9, r3
      (1ll << input_left_shift);
 801b02c:	f04f 0201 	mov.w	r2, #1
 801b030:	f04f 0300 	mov.w	r3, #0
 801b034:	68b9      	ldr	r1, [r7, #8]
 801b036:	f1a1 0620 	sub.w	r6, r1, #32
 801b03a:	f1c1 0020 	rsb	r0, r1, #32
 801b03e:	fa03 f501 	lsl.w	r5, r3, r1
 801b042:	fa02 f606 	lsl.w	r6, r2, r6
 801b046:	4335      	orrs	r5, r6
 801b048:	fa22 f000 	lsr.w	r0, r2, r0
 801b04c:	4305      	orrs	r5, r0
 801b04e:	fa02 f401 	lsl.w	r4, r2, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
 801b052:	4620      	mov	r0, r4
 801b054:	4629      	mov	r1, r5
 801b056:	f7e5 faab 	bl	80005b0 <__aeabi_l2d>
 801b05a:	4602      	mov	r2, r0
 801b05c:	460b      	mov	r3, r1
  const double max_input_rescaled =
 801b05e:	4640      	mov	r0, r8
 801b060:	4649      	mov	r1, r9
 801b062:	f7e5 fbfd 	bl	8000860 <__aeabi_ddiv>
 801b066:	4602      	mov	r2, r0
 801b068:	460b      	mov	r3, r1
 801b06a:	e9c7 2304 	strd	r2, r3, [r7, #16]
  // Tighten bound using floor.  Suppose that we could use the exact value.
  // After scaling the difference, the result would be at the maximum.  Thus we
  // must ensure that our value has lower magnitude.
  return static_cast<int>(std::floor(max_input_rescaled));
 801b06e:	ed97 0b04 	vldr	d0, [r7, #16]
 801b072:	f005 fcfd 	bl	8020a70 <floor>
 801b076:	ec53 2b10 	vmov	r2, r3, d0
 801b07a:	4610      	mov	r0, r2
 801b07c:	4619      	mov	r1, r3
 801b07e:	f7e5 fd75 	bl	8000b6c <__aeabi_d2iz>
 801b082:	4603      	mov	r3, r0
#endif  // TFLITE_EMULATE_FLOAT
}
 801b084:	4618      	mov	r0, r3
 801b086:	371c      	adds	r7, #28
 801b088:	46bd      	mov	sp, r7
 801b08a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b08e <_ZSt3minIfERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 801b08e:	b480      	push	{r7}
 801b090:	b083      	sub	sp, #12
 801b092:	af00      	add	r7, sp, #0
 801b094:	6078      	str	r0, [r7, #4]
 801b096:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 801b098:	683b      	ldr	r3, [r7, #0]
 801b09a:	ed93 7a00 	vldr	s14, [r3]
 801b09e:	687b      	ldr	r3, [r7, #4]
 801b0a0:	edd3 7a00 	vldr	s15, [r3]
 801b0a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b0a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b0ac:	d501      	bpl.n	801b0b2 <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 801b0ae:	683b      	ldr	r3, [r7, #0]
 801b0b0:	e000      	b.n	801b0b4 <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 801b0b2:	687b      	ldr	r3, [r7, #4]
    }
 801b0b4:	4618      	mov	r0, r3
 801b0b6:	370c      	adds	r7, #12
 801b0b8:	46bd      	mov	sp, r7
 801b0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0be:	4770      	bx	lr

0801b0c0 <_ZN6tflite11TfLiteRoundIdEET_S1_>:
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
 801b0c0:	b580      	push	{r7, lr}
 801b0c2:	b082      	sub	sp, #8
 801b0c4:	af00      	add	r7, sp, #0
 801b0c6:	ed87 0b00 	vstr	d0, [r7]
 801b0ca:	ed97 0b00 	vldr	d0, [r7]
 801b0ce:	f005 fd87 	bl	8020be0 <round>
 801b0d2:	eeb0 7a40 	vmov.f32	s14, s0
 801b0d6:	eef0 7a60 	vmov.f32	s15, s1
 801b0da:	eeb0 0a47 	vmov.f32	s0, s14
 801b0de:	eef0 0a67 	vmov.f32	s1, s15
 801b0e2:	3708      	adds	r7, #8
 801b0e4:	46bd      	mov	sp, r7
 801b0e6:	bd80      	pop	{r7, pc}

0801b0e8 <_ZN6tflite11TfLiteRoundIfEET_S1_>:
 801b0e8:	b580      	push	{r7, lr}
 801b0ea:	b082      	sub	sp, #8
 801b0ec:	af00      	add	r7, sp, #0
 801b0ee:	ed87 0a01 	vstr	s0, [r7, #4]
 801b0f2:	ed97 0a01 	vldr	s0, [r7, #4]
 801b0f6:	f7e6 fc48 	bl	800198a <_ZSt5roundf>
 801b0fa:	eef0 7a40 	vmov.f32	s15, s0
 801b0fe:	eeb0 0a67 	vmov.f32	s0, s15
 801b102:	3708      	adds	r7, #8
 801b104:	46bd      	mov	sp, r7
 801b106:	bd80      	pop	{r7, pc}

0801b108 <_ZNSt14numeric_limitsIaE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SCHAR_MAX__ - 1; }
 801b108:	b480      	push	{r7}
 801b10a:	af00      	add	r7, sp, #0
 801b10c:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 801b110:	4618      	mov	r0, r3
 801b112:	46bd      	mov	sp, r7
 801b114:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b118:	4770      	bx	lr

0801b11a <_ZNSt14numeric_limitsIaE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__; }
 801b11a:	b480      	push	{r7}
 801b11c:	af00      	add	r7, sp, #0
 801b11e:	237f      	movs	r3, #127	; 0x7f
 801b120:	4618      	mov	r0, r3
 801b122:	46bd      	mov	sp, r7
 801b124:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b128:	4770      	bx	lr

0801b12a <_ZNSt14numeric_limitsIhE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return 0; }
 801b12a:	b480      	push	{r7}
 801b12c:	af00      	add	r7, sp, #0
 801b12e:	2300      	movs	r3, #0
 801b130:	4618      	mov	r0, r3
 801b132:	46bd      	mov	sp, r7
 801b134:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b138:	4770      	bx	lr

0801b13a <_ZNSt14numeric_limitsIhE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__ * 2U + 1; }
 801b13a:	b480      	push	{r7}
 801b13c:	af00      	add	r7, sp, #0
 801b13e:	23ff      	movs	r3, #255	; 0xff
 801b140:	4618      	mov	r0, r3
 801b142:	46bd      	mov	sp, r7
 801b144:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b148:	4770      	bx	lr
	...

0801b14c <_ZNSt14numeric_limitsIsE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SHRT_MAX__ - 1; }
 801b14c:	b480      	push	{r7}
 801b14e:	af00      	add	r7, sp, #0
 801b150:	4b02      	ldr	r3, [pc, #8]	; (801b15c <_ZNSt14numeric_limitsIsE3minEv+0x10>)
 801b152:	4618      	mov	r0, r3
 801b154:	46bd      	mov	sp, r7
 801b156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b15a:	4770      	bx	lr
 801b15c:	ffff8000 	.word	0xffff8000

0801b160 <_ZNSt14numeric_limitsIsE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SHRT_MAX__; }
 801b160:	b480      	push	{r7}
 801b162:	af00      	add	r7, sp, #0
 801b164:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801b168:	4618      	mov	r0, r3
 801b16a:	46bd      	mov	sp, r7
 801b16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b170:	4770      	bx	lr

0801b172 <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>:
TfLiteStatus GetIntermediatesSafe(const TfLiteContext* context,
                                  const TfLiteNode* node, int index,
                                  TfLiteTensor** tensor);
#endif  // TF_LITE_STATIC_MEMORY

inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
 801b172:	b480      	push	{r7}
 801b174:	b083      	sub	sp, #12
 801b176:	af00      	add	r7, sp, #0
 801b178:	6078      	str	r0, [r7, #4]
 801b17a:	687b      	ldr	r3, [r7, #4]
 801b17c:	689b      	ldr	r3, [r3, #8]
 801b17e:	681b      	ldr	r3, [r3, #0]
 801b180:	4618      	mov	r0, r3
 801b182:	370c      	adds	r7, #12
 801b184:	46bd      	mov	sp, r7
 801b186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b18a:	4770      	bx	lr

0801b18c <_ZSt3absd>:
  { return __builtin_fabs(__x); }
 801b18c:	b480      	push	{r7}
 801b18e:	b083      	sub	sp, #12
 801b190:	af00      	add	r7, sp, #0
 801b192:	ed87 0b00 	vstr	d0, [r7]
 801b196:	683a      	ldr	r2, [r7, #0]
 801b198:	6879      	ldr	r1, [r7, #4]
 801b19a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801b19e:	ec43 2b17 	vmov	d7, r2, r3
 801b1a2:	eeb0 0a47 	vmov.f32	s0, s14
 801b1a6:	eef0 0a67 	vmov.f32	s1, s15
 801b1aa:	370c      	adds	r7, #12
 801b1ac:	46bd      	mov	sp, r7
 801b1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1b2:	4770      	bx	lr

0801b1b4 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>:

namespace {

// Assumes tensor_index is a valid index (in bounds)
inline TfLiteTensor* GetTensorAtIndex(const TfLiteContext* context,
                                      int tensor_index) {
 801b1b4:	b580      	push	{r7, lr}
 801b1b6:	b082      	sub	sp, #8
 801b1b8:	af00      	add	r7, sp, #0
 801b1ba:	6078      	str	r0, [r7, #4]
 801b1bc:	6039      	str	r1, [r7, #0]
  if (context->tensors != nullptr) {
 801b1be:	687b      	ldr	r3, [r7, #4]
 801b1c0:	689b      	ldr	r3, [r3, #8]
 801b1c2:	2b00      	cmp	r3, #0
 801b1c4:	d005      	beq.n	801b1d2 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti+0x1e>
    return &context->tensors[tensor_index];
 801b1c6:	687b      	ldr	r3, [r7, #4]
 801b1c8:	689a      	ldr	r2, [r3, #8]
 801b1ca:	683b      	ldr	r3, [r7, #0]
 801b1cc:	019b      	lsls	r3, r3, #6
 801b1ce:	4413      	add	r3, r2
 801b1d0:	e006      	b.n	801b1e0 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti+0x2c>
  } else {
    return context->GetTensor(context, tensor_index);
 801b1d2:	687b      	ldr	r3, [r7, #4]
 801b1d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b1d6:	6839      	ldr	r1, [r7, #0]
 801b1d8:	6878      	ldr	r0, [r7, #4]
 801b1da:	4798      	blx	r3
 801b1dc:	4603      	mov	r3, r0
 801b1de:	bf00      	nop
  }
}
 801b1e0:	4618      	mov	r0, r3
 801b1e2:	3708      	adds	r7, #8
 801b1e4:	46bd      	mov	sp, r7
 801b1e6:	bd80      	pop	{r7, pc}

0801b1e8 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>:
}

// Same as above but returns -1 for invalid inputs instead of status + logging
// error.
inline int ValidateTensorIndexing(const TfLiteContext* context, int index,
                                  int max_size, const int* tensor_indices) {
 801b1e8:	b480      	push	{r7}
 801b1ea:	b087      	sub	sp, #28
 801b1ec:	af00      	add	r7, sp, #0
 801b1ee:	60f8      	str	r0, [r7, #12]
 801b1f0:	60b9      	str	r1, [r7, #8]
 801b1f2:	607a      	str	r2, [r7, #4]
 801b1f4:	603b      	str	r3, [r7, #0]
  if (index >= 0 && index < max_size) {
 801b1f6:	68bb      	ldr	r3, [r7, #8]
 801b1f8:	2b00      	cmp	r3, #0
 801b1fa:	db0f      	blt.n	801b21c <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
 801b1fc:	68ba      	ldr	r2, [r7, #8]
 801b1fe:	687b      	ldr	r3, [r7, #4]
 801b200:	429a      	cmp	r2, r3
 801b202:	da0b      	bge.n	801b21c <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
    const int tensor_index = tensor_indices[index];
 801b204:	68bb      	ldr	r3, [r7, #8]
 801b206:	009b      	lsls	r3, r3, #2
 801b208:	683a      	ldr	r2, [r7, #0]
 801b20a:	4413      	add	r3, r2
 801b20c:	681b      	ldr	r3, [r3, #0]
 801b20e:	617b      	str	r3, [r7, #20]
    if (tensor_index != kTfLiteOptionalTensor) {
 801b210:	697b      	ldr	r3, [r7, #20]
 801b212:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b216:	d001      	beq.n	801b21c <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
      return tensor_index;
 801b218:	697b      	ldr	r3, [r7, #20]
 801b21a:	e001      	b.n	801b220 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x38>
    }
  }
  return -1;
 801b21c:	f04f 33ff 	mov.w	r3, #4294967295
}
 801b220:	4618      	mov	r0, r3
 801b222:	371c      	adds	r7, #28
 801b224:	46bd      	mov	sp, r7
 801b226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b22a:	4770      	bx	lr

0801b22c <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei>:

inline TfLiteTensor* GetMutableInput(const TfLiteContext* context,
                                     const TfLiteNode* node, int index) {
 801b22c:	b580      	push	{r7, lr}
 801b22e:	b086      	sub	sp, #24
 801b230:	af00      	add	r7, sp, #0
 801b232:	60f8      	str	r0, [r7, #12]
 801b234:	60b9      	str	r1, [r7, #8]
 801b236:	607a      	str	r2, [r7, #4]
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->inputs->size, node->inputs->data);
 801b238:	68bb      	ldr	r3, [r7, #8]
 801b23a:	681b      	ldr	r3, [r3, #0]
  const int tensor_index = ValidateTensorIndexing(
 801b23c:	681a      	ldr	r2, [r3, #0]
      context, index, node->inputs->size, node->inputs->data);
 801b23e:	68bb      	ldr	r3, [r7, #8]
 801b240:	681b      	ldr	r3, [r3, #0]
 801b242:	3304      	adds	r3, #4
  const int tensor_index = ValidateTensorIndexing(
 801b244:	6879      	ldr	r1, [r7, #4]
 801b246:	68f8      	ldr	r0, [r7, #12]
 801b248:	f7ff ffce 	bl	801b1e8 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>
 801b24c:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 801b24e:	697b      	ldr	r3, [r7, #20]
 801b250:	2b00      	cmp	r3, #0
 801b252:	da01      	bge.n	801b258 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei+0x2c>
    return nullptr;
 801b254:	2300      	movs	r3, #0
 801b256:	e005      	b.n	801b264 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei+0x38>
  }
  return GetTensorAtIndex(context, tensor_index);
 801b258:	6979      	ldr	r1, [r7, #20]
 801b25a:	68f8      	ldr	r0, [r7, #12]
 801b25c:	f7ff ffaa 	bl	801b1b4 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
 801b260:	4603      	mov	r3, r0
 801b262:	bf00      	nop
}
 801b264:	4618      	mov	r0, r3
 801b266:	3718      	adds	r7, #24
 801b268:	46bd      	mov	sp, r7
 801b26a:	bd80      	pop	{r7, pc}

0801b26c <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>:
}

}  // anonymous namespace.

const TfLiteTensor* GetInput(const TfLiteContext* context,
                             const TfLiteNode* node, int index) {
 801b26c:	b580      	push	{r7, lr}
 801b26e:	b084      	sub	sp, #16
 801b270:	af00      	add	r7, sp, #0
 801b272:	60f8      	str	r0, [r7, #12]
 801b274:	60b9      	str	r1, [r7, #8]
 801b276:	607a      	str	r2, [r7, #4]
  return GetMutableInput(context, node, index);
 801b278:	687a      	ldr	r2, [r7, #4]
 801b27a:	68b9      	ldr	r1, [r7, #8]
 801b27c:	68f8      	ldr	r0, [r7, #12]
 801b27e:	f7ff ffd5 	bl	801b22c <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei>
 801b282:	4603      	mov	r3, r0
}
 801b284:	4618      	mov	r0, r3
 801b286:	3710      	adds	r7, #16
 801b288:	46bd      	mov	sp, r7
 801b28a:	bd80      	pop	{r7, pc}

0801b28c <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>:
  TfLiteTensor* tensor = GetMutableInput(context, node, index);
  return tensor->is_variable ? tensor : nullptr;
}

TfLiteTensor* GetOutput(TfLiteContext* context, const TfLiteNode* node,
                        int index) {
 801b28c:	b580      	push	{r7, lr}
 801b28e:	b086      	sub	sp, #24
 801b290:	af00      	add	r7, sp, #0
 801b292:	60f8      	str	r0, [r7, #12]
 801b294:	60b9      	str	r1, [r7, #8]
 801b296:	607a      	str	r2, [r7, #4]
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->outputs->size, node->outputs->data);
 801b298:	68bb      	ldr	r3, [r7, #8]
 801b29a:	685b      	ldr	r3, [r3, #4]
  const int tensor_index = ValidateTensorIndexing(
 801b29c:	681a      	ldr	r2, [r3, #0]
      context, index, node->outputs->size, node->outputs->data);
 801b29e:	68bb      	ldr	r3, [r7, #8]
 801b2a0:	685b      	ldr	r3, [r3, #4]
 801b2a2:	3304      	adds	r3, #4
  const int tensor_index = ValidateTensorIndexing(
 801b2a4:	6879      	ldr	r1, [r7, #4]
 801b2a6:	68f8      	ldr	r0, [r7, #12]
 801b2a8:	f7ff ff9e 	bl	801b1e8 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>
 801b2ac:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 801b2ae:	697b      	ldr	r3, [r7, #20]
 801b2b0:	2b00      	cmp	r3, #0
 801b2b2:	da01      	bge.n	801b2b8 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x2c>
    return nullptr;
 801b2b4:	2300      	movs	r3, #0
 801b2b6:	e005      	b.n	801b2c4 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x38>
  }
  return GetTensorAtIndex(context, tensor_index);
 801b2b8:	6979      	ldr	r1, [r7, #20]
 801b2ba:	68f8      	ldr	r0, [r7, #12]
 801b2bc:	f7ff ff7a 	bl	801b1b4 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
 801b2c0:	4603      	mov	r3, r0
 801b2c2:	bf00      	nop
}
 801b2c4:	4618      	mov	r0, r3
 801b2c6:	3718      	adds	r7, #24
 801b2c8:	46bd      	mov	sp, r7
 801b2ca:	bd80      	pop	{r7, pc}

0801b2cc <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>:
  *tensor = GetTensorAtIndex(context, tensor_index);
  return kTfLiteOk;
}

const TfLiteTensor* GetOptionalInputTensor(const TfLiteContext* context,
                                           const TfLiteNode* node, int index) {
 801b2cc:	b580      	push	{r7, lr}
 801b2ce:	b084      	sub	sp, #16
 801b2d0:	af00      	add	r7, sp, #0
 801b2d2:	60f8      	str	r0, [r7, #12]
 801b2d4:	60b9      	str	r1, [r7, #8]
 801b2d6:	607a      	str	r2, [r7, #4]
  return GetInput(context, node, index);
 801b2d8:	687a      	ldr	r2, [r7, #4]
 801b2da:	68b9      	ldr	r1, [r7, #8]
 801b2dc:	68f8      	ldr	r0, [r7, #12]
 801b2de:	f7ff ffc5 	bl	801b26c <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801b2e2:	4603      	mov	r3, r0
}
 801b2e4:	4618      	mov	r0, r3
 801b2e6:	3710      	adds	r7, #16
 801b2e8:	46bd      	mov	sp, r7
 801b2ea:	bd80      	pop	{r7, pc}
 801b2ec:	0000      	movs	r0, r0
	...

0801b2f0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              const TfLiteTensor* bias,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 801b2f0:	b5b0      	push	{r4, r5, r7, lr}
 801b2f2:	b08e      	sub	sp, #56	; 0x38
 801b2f4:	af02      	add	r7, sp, #8
 801b2f6:	60f8      	str	r0, [r7, #12]
 801b2f8:	60b9      	str	r1, [r7, #8]
 801b2fa:	607a      	str	r2, [r7, #4]
 801b2fc:	603b      	str	r3, [r7, #0]
  const double input_product_scale = static_cast<double>(input->params.scale) *
 801b2fe:	68bb      	ldr	r3, [r7, #8]
 801b300:	68db      	ldr	r3, [r3, #12]
 801b302:	4618      	mov	r0, r3
 801b304:	f7e5 f92a 	bl	800055c <__aeabi_f2d>
 801b308:	4604      	mov	r4, r0
 801b30a:	460d      	mov	r5, r1
                                     static_cast<double>(filter->params.scale);
 801b30c:	687b      	ldr	r3, [r7, #4]
 801b30e:	68db      	ldr	r3, [r3, #12]
 801b310:	4618      	mov	r0, r3
 801b312:	f7e5 f923 	bl	800055c <__aeabi_f2d>
 801b316:	4602      	mov	r2, r0
 801b318:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
 801b31a:	4620      	mov	r0, r4
 801b31c:	4629      	mov	r1, r5
 801b31e:	f7e5 f975 	bl	800060c <__aeabi_dmul>
 801b322:	4602      	mov	r2, r0
 801b324:	460b      	mov	r3, r1
 801b326:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // The following conditions must be guaranteed by the training pipeline.
  if (bias) {
 801b32a:	683b      	ldr	r3, [r7, #0]
 801b32c:	2b00      	cmp	r3, #0
 801b32e:	d04b      	beq.n	801b3c8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
    const double bias_scale = static_cast<double>(bias->params.scale);
 801b330:	683b      	ldr	r3, [r7, #0]
 801b332:	68db      	ldr	r3, [r3, #12]
 801b334:	4618      	mov	r0, r3
 801b336:	f7e5 f911 	bl	800055c <__aeabi_f2d>
 801b33a:	4602      	mov	r2, r0
 801b33c:	460b      	mov	r3, r1
 801b33e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    // bias * (bias_scale - input_product_scale) / output_scale should be
    // a small number for an integer.
    // Since normally bias should be within a small range.
    // We should expect (bias_scale - input_product_scale) / output_scale to
    // be a small number like 0.02.
    const double scale_diff = std::abs(input_product_scale - bias_scale);
 801b342:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801b346:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801b34a:	f7e4 ffa7 	bl	800029c <__aeabi_dsub>
 801b34e:	4602      	mov	r2, r0
 801b350:	460b      	mov	r3, r1
 801b352:	ec43 2b17 	vmov	d7, r2, r3
 801b356:	eeb0 0a47 	vmov.f32	s0, s14
 801b35a:	eef0 0a67 	vmov.f32	s1, s15
 801b35e:	f7ff ff15 	bl	801b18c <_ZSt3absd>
 801b362:	ed87 0b06 	vstr	d0, [r7, #24]
    const double output_scale = static_cast<double>(output->params.scale);
 801b366:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b368:	68db      	ldr	r3, [r3, #12]
 801b36a:	4618      	mov	r0, r3
 801b36c:	f7e5 f8f6 	bl	800055c <__aeabi_f2d>
 801b370:	4602      	mov	r2, r0
 801b372:	460b      	mov	r3, r1
 801b374:	e9c7 2304 	strd	r2, r3, [r7, #16]

    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 801b378:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801b37c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801b380:	f7e5 fa6e 	bl	8000860 <__aeabi_ddiv>
 801b384:	4602      	mov	r2, r0
 801b386:	460b      	mov	r3, r1
 801b388:	4610      	mov	r0, r2
 801b38a:	4619      	mov	r1, r3
 801b38c:	2301      	movs	r3, #1
 801b38e:	461c      	mov	r4, r3
 801b390:	a318      	add	r3, pc, #96	; (adr r3, 801b3f4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x104>)
 801b392:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b396:	f7e5 fbb5 	bl	8000b04 <__aeabi_dcmple>
 801b39a:	4603      	mov	r3, r0
 801b39c:	2b00      	cmp	r3, #0
 801b39e:	d101      	bne.n	801b3a4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xb4>
 801b3a0:	2300      	movs	r3, #0
 801b3a2:	461c      	mov	r4, r3
 801b3a4:	b2e3      	uxtb	r3, r4
 801b3a6:	f083 0301 	eor.w	r3, r3, #1
 801b3aa:	b2db      	uxtb	r3, r3
 801b3ac:	2b00      	cmp	r3, #0
 801b3ae:	d00b      	beq.n	801b3c8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
 801b3b0:	68fb      	ldr	r3, [r7, #12]
 801b3b2:	695c      	ldr	r4, [r3, #20]
 801b3b4:	4b0c      	ldr	r3, [pc, #48]	; (801b3e8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xf8>)
 801b3b6:	9300      	str	r3, [sp, #0]
 801b3b8:	f44f 73a2 	mov.w	r3, #324	; 0x144
 801b3bc:	4a0b      	ldr	r2, [pc, #44]	; (801b3ec <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xfc>)
 801b3be:	490c      	ldr	r1, [pc, #48]	; (801b3f0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x100>)
 801b3c0:	68f8      	ldr	r0, [r7, #12]
 801b3c2:	47a0      	blx	r4
 801b3c4:	2301      	movs	r3, #1
 801b3c6:	e009      	b.n	801b3dc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xec>
  }
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
 801b3c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b3ca:	9300      	str	r3, [sp, #0]
 801b3cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b3ce:	687a      	ldr	r2, [r7, #4]
 801b3d0:	68b9      	ldr	r1, [r7, #8]
 801b3d2:	68f8      	ldr	r0, [r7, #12]
 801b3d4:	f000 f812 	bl	801b3fc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
 801b3d8:	4603      	mov	r3, r0
                                          multiplier);
 801b3da:	bf00      	nop
}
 801b3dc:	4618      	mov	r0, r3
 801b3de:	3730      	adds	r7, #48	; 0x30
 801b3e0:	46bd      	mov	sp, r7
 801b3e2:	bdb0      	pop	{r4, r5, r7, pc}
 801b3e4:	f3af 8000 	nop.w
 801b3e8:	08028758 	.word	0x08028758
 801b3ec:	0802854c 	.word	0x0802854c
 801b3f0:	08028644 	.word	0x08028644
 801b3f4:	47ae147b 	.word	0x47ae147b
 801b3f8:	3f947ae1 	.word	0x3f947ae1

0801b3fc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:

TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 801b3fc:	b590      	push	{r4, r7, lr}
 801b3fe:	b089      	sub	sp, #36	; 0x24
 801b400:	af02      	add	r7, sp, #8
 801b402:	60f8      	str	r0, [r7, #12]
 801b404:	60b9      	str	r1, [r7, #8]
 801b406:	607a      	str	r2, [r7, #4]
 801b408:	603b      	str	r3, [r7, #0]
  const double input_product_scale =
      static_cast<double>(input->params.scale * filter->params.scale);
 801b40a:	68bb      	ldr	r3, [r7, #8]
 801b40c:	ed93 7a03 	vldr	s14, [r3, #12]
 801b410:	687b      	ldr	r3, [r7, #4]
 801b412:	edd3 7a03 	vldr	s15, [r3, #12]
 801b416:	ee67 7a27 	vmul.f32	s15, s14, s15
  const double input_product_scale =
 801b41a:	ee17 0a90 	vmov	r0, s15
 801b41e:	f7e5 f89d 	bl	800055c <__aeabi_f2d>
 801b422:	4602      	mov	r2, r0
 801b424:	460b      	mov	r3, r1
 801b426:	e9c7 2304 	strd	r2, r3, [r7, #16]
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 801b42a:	2301      	movs	r3, #1
 801b42c:	461c      	mov	r4, r3
 801b42e:	f04f 0200 	mov.w	r2, #0
 801b432:	f04f 0300 	mov.w	r3, #0
 801b436:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801b43a:	f7e5 fb6d 	bl	8000b18 <__aeabi_dcmpge>
 801b43e:	4603      	mov	r3, r0
 801b440:	2b00      	cmp	r3, #0
 801b442:	d101      	bne.n	801b448 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x4c>
 801b444:	2300      	movs	r3, #0
 801b446:	461c      	mov	r4, r3
 801b448:	b2e3      	uxtb	r3, r4
 801b44a:	f083 0301 	eor.w	r3, r3, #1
 801b44e:	b2db      	uxtb	r3, r3
 801b450:	2b00      	cmp	r3, #0
 801b452:	d00b      	beq.n	801b46c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x70>
 801b454:	68fb      	ldr	r3, [r7, #12]
 801b456:	695c      	ldr	r4, [r3, #20]
 801b458:	4b0f      	ldr	r3, [pc, #60]	; (801b498 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x9c>)
 801b45a:	9300      	str	r3, [sp, #0]
 801b45c:	f240 1351 	movw	r3, #337	; 0x151
 801b460:	4a0e      	ldr	r2, [pc, #56]	; (801b49c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa0>)
 801b462:	490f      	ldr	r1, [pc, #60]	; (801b4a0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa4>)
 801b464:	68f8      	ldr	r0, [r7, #12]
 801b466:	47a0      	blx	r4
 801b468:	2301      	movs	r3, #1
 801b46a:	e010      	b.n	801b48e <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x92>
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 801b46c:	683b      	ldr	r3, [r7, #0]
 801b46e:	68db      	ldr	r3, [r3, #12]
 801b470:	4618      	mov	r0, r3
 801b472:	f7e5 f873 	bl	800055c <__aeabi_f2d>
 801b476:	4602      	mov	r2, r0
 801b478:	460b      	mov	r3, r1
 801b47a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801b47e:	f7e5 f9ef 	bl	8000860 <__aeabi_ddiv>
 801b482:	4602      	mov	r2, r0
 801b484:	460b      	mov	r3, r1
 801b486:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801b488:	e9c1 2300 	strd	r2, r3, [r1]

  return kTfLiteOk;
 801b48c:	2300      	movs	r3, #0
}
 801b48e:	4618      	mov	r0, r3
 801b490:	371c      	adds	r7, #28
 801b492:	46bd      	mov	sp, r7
 801b494:	bd90      	pop	{r4, r7, pc}
 801b496:	bf00      	nop
 801b498:	0802877c 	.word	0x0802877c
 801b49c:	0802854c 	.word	0x0802854c
 801b4a0:	08028644 	.word	0x08028644

0801b4a4 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>:
                                           TfLiteTensor* output,
                                           int32_t* act_min, int32_t* act_max) {
  const auto scale = output->params.scale;
  const auto zero_point = output->params.zero_point;

  auto quantize = [scale, zero_point](float f) {
 801b4a4:	b580      	push	{r7, lr}
 801b4a6:	b082      	sub	sp, #8
 801b4a8:	af00      	add	r7, sp, #0
 801b4aa:	6078      	str	r0, [r7, #4]
 801b4ac:	ed87 0a00 	vstr	s0, [r7]
 801b4b0:	687b      	ldr	r3, [r7, #4]
 801b4b2:	edd3 7a00 	vldr	s15, [r3]
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
 801b4b6:	ed97 7a00 	vldr	s14, [r7]
 801b4ba:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801b4be:	eeb0 0a66 	vmov.f32	s0, s13
 801b4c2:	f7ff fe11 	bl	801b0e8 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 801b4c6:	eef0 7a40 	vmov.f32	s15, s0
 801b4ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b4ce:	ee17 2a90 	vmov	r2, s15
  auto quantize = [scale, zero_point](float f) {
 801b4d2:	687b      	ldr	r3, [r7, #4]
 801b4d4:	685b      	ldr	r3, [r3, #4]
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
 801b4d6:	4413      	add	r3, r2
  };
 801b4d8:	4618      	mov	r0, r3
 801b4da:	3708      	adds	r7, #8
 801b4dc:	46bd      	mov	sp, r7
 801b4de:	bd80      	pop	{r7, pc}

0801b4e0 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_>:
                                           int32_t* act_min, int32_t* act_max) {
 801b4e0:	b580      	push	{r7, lr}
 801b4e2:	b08e      	sub	sp, #56	; 0x38
 801b4e4:	af00      	add	r7, sp, #0
 801b4e6:	60b9      	str	r1, [r7, #8]
 801b4e8:	607a      	str	r2, [r7, #4]
 801b4ea:	603b      	str	r3, [r7, #0]
 801b4ec:	4603      	mov	r3, r0
 801b4ee:	73fb      	strb	r3, [r7, #15]
  const auto scale = output->params.scale;
 801b4f0:	683b      	ldr	r3, [r7, #0]
 801b4f2:	68db      	ldr	r3, [r3, #12]
 801b4f4:	637b      	str	r3, [r7, #52]	; 0x34
  const auto zero_point = output->params.zero_point;
 801b4f6:	683b      	ldr	r3, [r7, #0]
 801b4f8:	691b      	ldr	r3, [r3, #16]
 801b4fa:	633b      	str	r3, [r7, #48]	; 0x30
  };
 801b4fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b4fe:	617b      	str	r3, [r7, #20]
 801b500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b502:	61bb      	str	r3, [r7, #24]

  if (activation == kTfLiteActRelu) {
 801b504:	7bfb      	ldrb	r3, [r7, #15]
 801b506:	2b01      	cmp	r3, #1
 801b508:	d118      	bne.n	801b53c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x5c>
    *act_min = std::max(qmin, quantize(0.0));
 801b50a:	f107 0314 	add.w	r3, r7, #20
 801b50e:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 801b604 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x124>
 801b512:	4618      	mov	r0, r3
 801b514:	f7ff ffc6 	bl	801b4a4 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 801b518:	4603      	mov	r3, r0
 801b51a:	61fb      	str	r3, [r7, #28]
 801b51c:	f107 021c 	add.w	r2, r7, #28
 801b520:	f107 0308 	add.w	r3, r7, #8
 801b524:	4611      	mov	r1, r2
 801b526:	4618      	mov	r0, r3
 801b528:	f000 f8d6 	bl	801b6d8 <_ZSt3maxIlERKT_S2_S2_>
 801b52c:	4603      	mov	r3, r0
 801b52e:	681a      	ldr	r2, [r3, #0]
 801b530:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b532:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 801b534:	687a      	ldr	r2, [r7, #4]
 801b536:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b538:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(1.0));
  } else {
    *act_min = qmin;
    *act_max = qmax;
  }
}
 801b53a:	e05f      	b.n	801b5fc <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
  } else if (activation == kTfLiteActRelu6) {
 801b53c:	7bfb      	ldrb	r3, [r7, #15]
 801b53e:	2b03      	cmp	r3, #3
 801b540:	d129      	bne.n	801b596 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0xb6>
    *act_min = std::max(qmin, quantize(0.0));
 801b542:	f107 0314 	add.w	r3, r7, #20
 801b546:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 801b604 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x124>
 801b54a:	4618      	mov	r0, r3
 801b54c:	f7ff ffaa 	bl	801b4a4 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 801b550:	4603      	mov	r3, r0
 801b552:	623b      	str	r3, [r7, #32]
 801b554:	f107 0220 	add.w	r2, r7, #32
 801b558:	f107 0308 	add.w	r3, r7, #8
 801b55c:	4611      	mov	r1, r2
 801b55e:	4618      	mov	r0, r3
 801b560:	f000 f8ba 	bl	801b6d8 <_ZSt3maxIlERKT_S2_S2_>
 801b564:	4603      	mov	r3, r0
 801b566:	681a      	ldr	r2, [r3, #0]
 801b568:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b56a:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(6.0));
 801b56c:	f107 0314 	add.w	r3, r7, #20
 801b570:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 801b574:	4618      	mov	r0, r3
 801b576:	f7ff ff95 	bl	801b4a4 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 801b57a:	4603      	mov	r3, r0
 801b57c:	627b      	str	r3, [r7, #36]	; 0x24
 801b57e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801b582:	1d3b      	adds	r3, r7, #4
 801b584:	4611      	mov	r1, r2
 801b586:	4618      	mov	r0, r3
 801b588:	f000 f892 	bl	801b6b0 <_ZSt3minIlERKT_S2_S2_>
 801b58c:	4603      	mov	r3, r0
 801b58e:	681a      	ldr	r2, [r3, #0]
 801b590:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b592:	601a      	str	r2, [r3, #0]
}
 801b594:	e032      	b.n	801b5fc <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
  } else if (activation == kTfLiteActReluN1To1) {
 801b596:	7bfb      	ldrb	r3, [r7, #15]
 801b598:	2b02      	cmp	r3, #2
 801b59a:	d129      	bne.n	801b5f0 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x110>
    *act_min = std::max(qmin, quantize(-1.0));
 801b59c:	f107 0314 	add.w	r3, r7, #20
 801b5a0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801b5a4:	4618      	mov	r0, r3
 801b5a6:	f7ff ff7d 	bl	801b4a4 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 801b5aa:	4603      	mov	r3, r0
 801b5ac:	62bb      	str	r3, [r7, #40]	; 0x28
 801b5ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801b5b2:	f107 0308 	add.w	r3, r7, #8
 801b5b6:	4611      	mov	r1, r2
 801b5b8:	4618      	mov	r0, r3
 801b5ba:	f000 f88d 	bl	801b6d8 <_ZSt3maxIlERKT_S2_S2_>
 801b5be:	4603      	mov	r3, r0
 801b5c0:	681a      	ldr	r2, [r3, #0]
 801b5c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b5c4:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(1.0));
 801b5c6:	f107 0314 	add.w	r3, r7, #20
 801b5ca:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801b5ce:	4618      	mov	r0, r3
 801b5d0:	f7ff ff68 	bl	801b4a4 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 801b5d4:	4603      	mov	r3, r0
 801b5d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b5d8:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801b5dc:	1d3b      	adds	r3, r7, #4
 801b5de:	4611      	mov	r1, r2
 801b5e0:	4618      	mov	r0, r3
 801b5e2:	f000 f865 	bl	801b6b0 <_ZSt3minIlERKT_S2_S2_>
 801b5e6:	4603      	mov	r3, r0
 801b5e8:	681a      	ldr	r2, [r3, #0]
 801b5ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b5ec:	601a      	str	r2, [r3, #0]
}
 801b5ee:	e005      	b.n	801b5fc <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
    *act_min = qmin;
 801b5f0:	68ba      	ldr	r2, [r7, #8]
 801b5f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b5f4:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 801b5f6:	687a      	ldr	r2, [r7, #4]
 801b5f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b5fa:	601a      	str	r2, [r3, #0]
}
 801b5fc:	bf00      	nop
 801b5fe:	3738      	adds	r7, #56	; 0x38
 801b600:	46bd      	mov	sp, r7
 801b602:	bd80      	pop	{r7, pc}
 801b604:	00000000 	.word	0x00000000

0801b608 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
 801b608:	b590      	push	{r4, r7, lr}
 801b60a:	b089      	sub	sp, #36	; 0x24
 801b60c:	af02      	add	r7, sp, #8
 801b60e:	60f8      	str	r0, [r7, #12]
 801b610:	607a      	str	r2, [r7, #4]
 801b612:	603b      	str	r3, [r7, #0]
 801b614:	460b      	mov	r3, r1
 801b616:	72fb      	strb	r3, [r7, #11]
  int32_t qmin = 0;
 801b618:	2300      	movs	r3, #0
 801b61a:	617b      	str	r3, [r7, #20]
  int32_t qmax = 0;
 801b61c:	2300      	movs	r3, #0
 801b61e:	613b      	str	r3, [r7, #16]
  if (output->type == kTfLiteUInt8) {
 801b620:	687b      	ldr	r3, [r7, #4]
 801b622:	781b      	ldrb	r3, [r3, #0]
 801b624:	2b03      	cmp	r3, #3
 801b626:	d108      	bne.n	801b63a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x32>
    qmin = std::numeric_limits<uint8_t>::min();
 801b628:	f7ff fd7f 	bl	801b12a <_ZNSt14numeric_limitsIhE3minEv>
 801b62c:	4603      	mov	r3, r0
 801b62e:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<uint8_t>::max();
 801b630:	f7ff fd83 	bl	801b13a <_ZNSt14numeric_limitsIhE3maxEv>
 801b634:	4603      	mov	r3, r0
 801b636:	613b      	str	r3, [r7, #16]
 801b638:	e025      	b.n	801b686 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt8) {
 801b63a:	687b      	ldr	r3, [r7, #4]
 801b63c:	781b      	ldrb	r3, [r3, #0]
 801b63e:	2b09      	cmp	r3, #9
 801b640:	d108      	bne.n	801b654 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x4c>
    qmin = std::numeric_limits<int8_t>::min();
 801b642:	f7ff fd61 	bl	801b108 <_ZNSt14numeric_limitsIaE3minEv>
 801b646:	4603      	mov	r3, r0
 801b648:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int8_t>::max();
 801b64a:	f7ff fd66 	bl	801b11a <_ZNSt14numeric_limitsIaE3maxEv>
 801b64e:	4603      	mov	r3, r0
 801b650:	613b      	str	r3, [r7, #16]
 801b652:	e018      	b.n	801b686 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt16) {
 801b654:	687b      	ldr	r3, [r7, #4]
 801b656:	781b      	ldrb	r3, [r3, #0]
 801b658:	2b07      	cmp	r3, #7
 801b65a:	d108      	bne.n	801b66e <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x66>
    qmin = std::numeric_limits<int16_t>::min();
 801b65c:	f7ff fd76 	bl	801b14c <_ZNSt14numeric_limitsIsE3minEv>
 801b660:	4603      	mov	r3, r0
 801b662:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int16_t>::max();
 801b664:	f7ff fd7c 	bl	801b160 <_ZNSt14numeric_limitsIsE3maxEv>
 801b668:	4603      	mov	r3, r0
 801b66a:	613b      	str	r3, [r7, #16]
 801b66c:	e00b      	b.n	801b686 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else {
    TF_LITE_ENSURE(context, false);
 801b66e:	68fb      	ldr	r3, [r7, #12]
 801b670:	695c      	ldr	r4, [r3, #20]
 801b672:	4b0c      	ldr	r3, [pc, #48]	; (801b6a4 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x9c>)
 801b674:	9300      	str	r3, [sp, #0]
 801b676:	f44f 73c2 	mov.w	r3, #388	; 0x184
 801b67a:	4a0b      	ldr	r2, [pc, #44]	; (801b6a8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa0>)
 801b67c:	490b      	ldr	r1, [pc, #44]	; (801b6ac <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa4>)
 801b67e:	68f8      	ldr	r0, [r7, #12]
 801b680:	47a0      	blx	r4
 801b682:	2301      	movs	r3, #1
 801b684:	e00a      	b.n	801b69c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x94>
  }

  CalculateActivationRangeQuantizedImpl(activation, qmin, qmax, output, act_min,
 801b686:	7af8      	ldrb	r0, [r7, #11]
 801b688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b68a:	9301      	str	r3, [sp, #4]
 801b68c:	683b      	ldr	r3, [r7, #0]
 801b68e:	9300      	str	r3, [sp, #0]
 801b690:	687b      	ldr	r3, [r7, #4]
 801b692:	693a      	ldr	r2, [r7, #16]
 801b694:	6979      	ldr	r1, [r7, #20]
 801b696:	f7ff ff23 	bl	801b4e0 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_>
                                        act_max);
  return kTfLiteOk;
 801b69a:	2300      	movs	r3, #0
}
 801b69c:	4618      	mov	r0, r3
 801b69e:	371c      	adds	r7, #28
 801b6a0:	46bd      	mov	sp, r7
 801b6a2:	bd90      	pop	{r4, r7, pc}
 801b6a4:	08028798 	.word	0x08028798
 801b6a8:	0802854c 	.word	0x0802854c
 801b6ac:	08028644 	.word	0x08028644

0801b6b0 <_ZSt3minIlERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 801b6b0:	b480      	push	{r7}
 801b6b2:	b083      	sub	sp, #12
 801b6b4:	af00      	add	r7, sp, #0
 801b6b6:	6078      	str	r0, [r7, #4]
 801b6b8:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 801b6ba:	683b      	ldr	r3, [r7, #0]
 801b6bc:	681a      	ldr	r2, [r3, #0]
 801b6be:	687b      	ldr	r3, [r7, #4]
 801b6c0:	681b      	ldr	r3, [r3, #0]
 801b6c2:	429a      	cmp	r2, r3
 801b6c4:	da01      	bge.n	801b6ca <_ZSt3minIlERKT_S2_S2_+0x1a>
	return __b;
 801b6c6:	683b      	ldr	r3, [r7, #0]
 801b6c8:	e000      	b.n	801b6cc <_ZSt3minIlERKT_S2_S2_+0x1c>
      return __a;
 801b6ca:	687b      	ldr	r3, [r7, #4]
    }
 801b6cc:	4618      	mov	r0, r3
 801b6ce:	370c      	adds	r7, #12
 801b6d0:	46bd      	mov	sp, r7
 801b6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6d6:	4770      	bx	lr

0801b6d8 <_ZSt3maxIlERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 801b6d8:	b480      	push	{r7}
 801b6da:	b083      	sub	sp, #12
 801b6dc:	af00      	add	r7, sp, #0
 801b6de:	6078      	str	r0, [r7, #4]
 801b6e0:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 801b6e2:	687b      	ldr	r3, [r7, #4]
 801b6e4:	681a      	ldr	r2, [r3, #0]
 801b6e6:	683b      	ldr	r3, [r7, #0]
 801b6e8:	681b      	ldr	r3, [r3, #0]
 801b6ea:	429a      	cmp	r2, r3
 801b6ec:	da01      	bge.n	801b6f2 <_ZSt3maxIlERKT_S2_S2_+0x1a>
	return __b;
 801b6ee:	683b      	ldr	r3, [r7, #0]
 801b6f0:	e000      	b.n	801b6f4 <_ZSt3maxIlERKT_S2_S2_+0x1c>
      return __a;
 801b6f2:	687b      	ldr	r3, [r7, #4]
    }
 801b6f4:	4618      	mov	r0, r3
 801b6f6:	370c      	adds	r7, #12
 801b6f8:	46bd      	mov	sp, r7
 801b6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6fe:	4770      	bx	lr

0801b700 <_ZN6tflite12RuntimeShapeC1Ev>:
  // larger shapes are separately allocated.
  static constexpr int kMaxSmallSize = 5;

  RuntimeShape& operator=(RuntimeShape const&) = delete;

  RuntimeShape() : size_(0) {}
 801b700:	b480      	push	{r7}
 801b702:	b083      	sub	sp, #12
 801b704:	af00      	add	r7, sp, #0
 801b706:	6078      	str	r0, [r7, #4]
 801b708:	687b      	ldr	r3, [r7, #4]
 801b70a:	2200      	movs	r2, #0
 801b70c:	601a      	str	r2, [r3, #0]
 801b70e:	687b      	ldr	r3, [r7, #4]
 801b710:	4618      	mov	r0, r3
 801b712:	370c      	adds	r7, #12
 801b714:	46bd      	mov	sp, r7
 801b716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b71a:	4770      	bx	lr

0801b71c <_ZN6tflite12RuntimeShapeC1EiPKl>:
    for (int i = 0; i < shape_size; ++i) {
      SetDim(i, value);
    }
  }

  RuntimeShape(int dimensions_count, const int32_t* dims_data) : size_(0) {
 801b71c:	b580      	push	{r7, lr}
 801b71e:	b084      	sub	sp, #16
 801b720:	af00      	add	r7, sp, #0
 801b722:	60f8      	str	r0, [r7, #12]
 801b724:	60b9      	str	r1, [r7, #8]
 801b726:	607a      	str	r2, [r7, #4]
 801b728:	68fb      	ldr	r3, [r7, #12]
 801b72a:	2200      	movs	r2, #0
 801b72c:	601a      	str	r2, [r3, #0]
    ReplaceWith(dimensions_count, dims_data);
 801b72e:	687a      	ldr	r2, [r7, #4]
 801b730:	68b9      	ldr	r1, [r7, #8]
 801b732:	68f8      	ldr	r0, [r7, #12]
 801b734:	f000 f866 	bl	801b804 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>
  }
 801b738:	68fb      	ldr	r3, [r7, #12]
 801b73a:	4618      	mov	r0, r3
 801b73c:	3710      	adds	r7, #16
 801b73e:	46bd      	mov	sp, r7
 801b740:	bd80      	pop	{r7, pc}

0801b742 <_ZN6tflite12RuntimeShapeD1Ev>:
    return this->size_ == comp.size_ &&
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32_t)) ==
               0;
  }

  ~RuntimeShape() {
 801b742:	b580      	push	{r7, lr}
 801b744:	b082      	sub	sp, #8
 801b746:	af00      	add	r7, sp, #0
 801b748:	6078      	str	r0, [r7, #4]
    if (size_ > kMaxSmallSize) {
 801b74a:	687b      	ldr	r3, [r7, #4]
 801b74c:	681b      	ldr	r3, [r3, #0]
 801b74e:	2b05      	cmp	r3, #5
 801b750:	dd08      	ble.n	801b764 <_ZN6tflite12RuntimeShapeD1Ev+0x22>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 801b752:	687b      	ldr	r3, [r7, #4]
 801b754:	685b      	ldr	r3, [r3, #4]
 801b756:	2b00      	cmp	r3, #0
 801b758:	d004      	beq.n	801b764 <_ZN6tflite12RuntimeShapeD1Ev+0x22>
 801b75a:	687b      	ldr	r3, [r7, #4]
 801b75c:	685b      	ldr	r3, [r3, #4]
 801b75e:	4618      	mov	r0, r3
 801b760:	f005 f910 	bl	8020984 <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 801b764:	687b      	ldr	r3, [r7, #4]
 801b766:	4618      	mov	r0, r3
 801b768:	3708      	adds	r7, #8
 801b76a:	46bd      	mov	sp, r7
 801b76c:	bd80      	pop	{r7, pc}

0801b76e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>:

  inline int32_t DimensionsCount() const { return size_; }
 801b76e:	b480      	push	{r7}
 801b770:	b083      	sub	sp, #12
 801b772:	af00      	add	r7, sp, #0
 801b774:	6078      	str	r0, [r7, #4]
 801b776:	687b      	ldr	r3, [r7, #4]
 801b778:	681b      	ldr	r3, [r3, #0]
 801b77a:	4618      	mov	r0, r3
 801b77c:	370c      	adds	r7, #12
 801b77e:	46bd      	mov	sp, r7
 801b780:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b784:	4770      	bx	lr

0801b786 <_ZN6tflite12RuntimeShape8DimsDataEv>:
    } else {
      dims_[i] = val;
    }
  }

  inline int32_t* DimsData() {
 801b786:	b480      	push	{r7}
 801b788:	b083      	sub	sp, #12
 801b78a:	af00      	add	r7, sp, #0
 801b78c:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 801b78e:	687b      	ldr	r3, [r7, #4]
 801b790:	681b      	ldr	r3, [r3, #0]
 801b792:	2b05      	cmp	r3, #5
 801b794:	dd02      	ble.n	801b79c <_ZN6tflite12RuntimeShape8DimsDataEv+0x16>
 801b796:	687b      	ldr	r3, [r7, #4]
 801b798:	685b      	ldr	r3, [r3, #4]
 801b79a:	e001      	b.n	801b7a0 <_ZN6tflite12RuntimeShape8DimsDataEv+0x1a>
 801b79c:	687b      	ldr	r3, [r7, #4]
 801b79e:	3304      	adds	r3, #4
  }
 801b7a0:	4618      	mov	r0, r3
 801b7a2:	370c      	adds	r7, #12
 801b7a4:	46bd      	mov	sp, r7
 801b7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7aa:	4770      	bx	lr

0801b7ac <_ZN6tflite12RuntimeShape6ResizeEi>:
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
  }
  // The caller must ensure that the shape is no bigger than 5-D.
  inline const int32_t* DimsDataUpTo5D() const { return dims_; }

  inline void Resize(int dimensions_count) {
 801b7ac:	b580      	push	{r7, lr}
 801b7ae:	b082      	sub	sp, #8
 801b7b0:	af00      	add	r7, sp, #0
 801b7b2:	6078      	str	r0, [r7, #4]
 801b7b4:	6039      	str	r1, [r7, #0]
    if (size_ > kMaxSmallSize) {
 801b7b6:	687b      	ldr	r3, [r7, #4]
 801b7b8:	681b      	ldr	r3, [r3, #0]
 801b7ba:	2b05      	cmp	r3, #5
 801b7bc:	dd08      	ble.n	801b7d0 <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 801b7be:	687b      	ldr	r3, [r7, #4]
 801b7c0:	685b      	ldr	r3, [r3, #4]
 801b7c2:	2b00      	cmp	r3, #0
 801b7c4:	d004      	beq.n	801b7d0 <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
 801b7c6:	687b      	ldr	r3, [r7, #4]
 801b7c8:	685b      	ldr	r3, [r3, #4]
 801b7ca:	4618      	mov	r0, r3
 801b7cc:	f005 f8da 	bl	8020984 <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
    size_ = dimensions_count;
 801b7d0:	687b      	ldr	r3, [r7, #4]
 801b7d2:	683a      	ldr	r2, [r7, #0]
 801b7d4:	601a      	str	r2, [r3, #0]
    if (dimensions_count > kMaxSmallSize) {
 801b7d6:	683b      	ldr	r3, [r7, #0]
 801b7d8:	2b05      	cmp	r3, #5
 801b7da:	dd0f      	ble.n	801b7fc <_ZN6tflite12RuntimeShape6ResizeEi+0x50>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      dims_pointer_ = new int32_t[dimensions_count];
 801b7dc:	683b      	ldr	r3, [r7, #0]
 801b7de:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 801b7e2:	4293      	cmp	r3, r2
 801b7e4:	d201      	bcs.n	801b7ea <_ZN6tflite12RuntimeShape6ResizeEi+0x3e>
 801b7e6:	009b      	lsls	r3, r3, #2
 801b7e8:	e001      	b.n	801b7ee <_ZN6tflite12RuntimeShape6ResizeEi+0x42>
 801b7ea:	f04f 33ff 	mov.w	r3, #4294967295
 801b7ee:	4618      	mov	r0, r3
 801b7f0:	f005 f8db 	bl	80209aa <_Znaj>
 801b7f4:	4603      	mov	r3, r0
 801b7f6:	461a      	mov	r2, r3
 801b7f8:	687b      	ldr	r3, [r7, #4]
 801b7fa:	605a      	str	r2, [r3, #4]
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 801b7fc:	bf00      	nop
 801b7fe:	3708      	adds	r7, #8
 801b800:	46bd      	mov	sp, r7
 801b802:	bd80      	pop	{r7, pc}

0801b804 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>:

  inline void ReplaceWith(int dimensions_count, const int32_t* dims_data) {
 801b804:	b580      	push	{r7, lr}
 801b806:	b086      	sub	sp, #24
 801b808:	af00      	add	r7, sp, #0
 801b80a:	60f8      	str	r0, [r7, #12]
 801b80c:	60b9      	str	r1, [r7, #8]
 801b80e:	607a      	str	r2, [r7, #4]
    Resize(dimensions_count);
 801b810:	68b9      	ldr	r1, [r7, #8]
 801b812:	68f8      	ldr	r0, [r7, #12]
 801b814:	f7ff ffca 	bl	801b7ac <_ZN6tflite12RuntimeShape6ResizeEi>
    int32_t* dst_dims = DimsData();
 801b818:	68f8      	ldr	r0, [r7, #12]
 801b81a:	f7ff ffb4 	bl	801b786 <_ZN6tflite12RuntimeShape8DimsDataEv>
 801b81e:	6178      	str	r0, [r7, #20]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 801b820:	68bb      	ldr	r3, [r7, #8]
 801b822:	009b      	lsls	r3, r3, #2
 801b824:	461a      	mov	r2, r3
 801b826:	6879      	ldr	r1, [r7, #4]
 801b828:	6978      	ldr	r0, [r7, #20]
 801b82a:	f007 fe89 	bl	8023540 <memcpy>
  }
 801b82e:	bf00      	nop
 801b830:	3718      	adds	r7, #24
 801b832:	46bd      	mov	sp, r7
 801b834:	bd80      	pop	{r7, pc}

0801b836 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
                           : nullptr;
}

inline RuntimeShape GetTensorShape(const TfLiteTensor* tensor) {
 801b836:	b580      	push	{r7, lr}
 801b838:	b086      	sub	sp, #24
 801b83a:	af00      	add	r7, sp, #0
 801b83c:	6078      	str	r0, [r7, #4]
 801b83e:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr) {
 801b840:	683b      	ldr	r3, [r7, #0]
 801b842:	2b00      	cmp	r3, #0
 801b844:	d103      	bne.n	801b84e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x18>
    return RuntimeShape();
 801b846:	6878      	ldr	r0, [r7, #4]
 801b848:	f7ff ff5a 	bl	801b700 <_ZN6tflite12RuntimeShapeC1Ev>
 801b84c:	e00d      	b.n	801b86a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x34>
  }

  TfLiteIntArray* dims = tensor->dims;
 801b84e:	683b      	ldr	r3, [r7, #0]
 801b850:	689b      	ldr	r3, [r3, #8]
 801b852:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 801b854:	697b      	ldr	r3, [r7, #20]
 801b856:	681b      	ldr	r3, [r3, #0]
 801b858:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 801b85a:	697b      	ldr	r3, [r7, #20]
 801b85c:	3304      	adds	r3, #4
 801b85e:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 801b860:	68fa      	ldr	r2, [r7, #12]
 801b862:	6939      	ldr	r1, [r7, #16]
 801b864:	6878      	ldr	r0, [r7, #4]
 801b866:	f7ff ff59 	bl	801b71c <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 801b86a:	6878      	ldr	r0, [r7, #4]
 801b86c:	3718      	adds	r7, #24
 801b86e:	46bd      	mov	sp, r7
 801b870:	bd80      	pop	{r7, pc}

0801b872 <_ZNSt14numeric_limitsIlE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }
 801b872:	b480      	push	{r7}
 801b874:	af00      	add	r7, sp, #0
 801b876:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801b87a:	4618      	mov	r0, r3
 801b87c:	46bd      	mov	sp, r7
 801b87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b882:	4770      	bx	lr

0801b884 <_ZNSt14numeric_limitsIfE8infinityEv>:
	= bool(__FLT_HAS_DENORM__) ? denorm_present : denorm_absent;
      static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss
       = __glibcxx_float_has_denorm_loss;

      static _GLIBCXX_CONSTEXPR float
      infinity() _GLIBCXX_USE_NOEXCEPT { return __builtin_huge_valf(); }
 801b884:	b480      	push	{r7}
 801b886:	af00      	add	r7, sp, #0
 801b888:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 801b88c:	ee07 3a90 	vmov	s15, r3
 801b890:	eeb0 0a67 	vmov.f32	s0, s15
 801b894:	46bd      	mov	sp, r7
 801b896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b89a:	4770      	bx	lr

0801b89c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>:

// This function implements the same computation as the ARMv7 NEON VQRDMULH
// instruction.
template <>
inline std::int32_t SaturatingRoundingDoublingHighMul(std::int32_t a,
                                                      std::int32_t b) {
 801b89c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801b8a0:	b092      	sub	sp, #72	; 0x48
 801b8a2:	af00      	add	r7, sp, #0
 801b8a4:	61f8      	str	r0, [r7, #28]
 801b8a6:	61b9      	str	r1, [r7, #24]
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 801b8a8:	69fa      	ldr	r2, [r7, #28]
 801b8aa:	69bb      	ldr	r3, [r7, #24]
 801b8ac:	429a      	cmp	r2, r3
 801b8ae:	d107      	bne.n	801b8c0 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x24>
 801b8b0:	f7ff ffdf 	bl	801b872 <_ZNSt14numeric_limitsIlE3minEv>
 801b8b4:	4602      	mov	r2, r0
 801b8b6:	69fb      	ldr	r3, [r7, #28]
 801b8b8:	4293      	cmp	r3, r2
 801b8ba:	d101      	bne.n	801b8c0 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x24>
 801b8bc:	2301      	movs	r3, #1
 801b8be:	e000      	b.n	801b8c2 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x26>
 801b8c0:	2300      	movs	r3, #0
 801b8c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  std::int64_t a_64(a);
 801b8c6:	69fb      	ldr	r3, [r7, #28]
 801b8c8:	17da      	asrs	r2, r3, #31
 801b8ca:	60bb      	str	r3, [r7, #8]
 801b8cc:	60fa      	str	r2, [r7, #12]
 801b8ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801b8d2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  std::int64_t b_64(b);
 801b8d6:	69bb      	ldr	r3, [r7, #24]
 801b8d8:	17da      	asrs	r2, r3, #31
 801b8da:	603b      	str	r3, [r7, #0]
 801b8dc:	607a      	str	r2, [r7, #4]
 801b8de:	e9d7 2300 	ldrd	r2, r3, [r7]
 801b8e2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  std::int64_t ab_64 = a_64 * b_64;
 801b8e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b8e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b8ea:	fb03 f202 	mul.w	r2, r3, r2
 801b8ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b8f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801b8f2:	fb01 f303 	mul.w	r3, r1, r3
 801b8f6:	4413      	add	r3, r2
 801b8f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801b8fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b8fc:	fba1 4502 	umull	r4, r5, r1, r2
 801b900:	442b      	add	r3, r5
 801b902:	461d      	mov	r5, r3
 801b904:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
 801b908:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 801b90c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801b910:	2b00      	cmp	r3, #0
 801b912:	db02      	blt.n	801b91a <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x7e>
 801b914:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801b918:	e000      	b.n	801b91c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x80>
 801b91a:	4b1a      	ldr	r3, [pc, #104]	; (801b984 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xe8>)
 801b91c:	627b      	str	r3, [r7, #36]	; 0x24
  std::int32_t ab_x2_high32 =
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 801b91e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b920:	17da      	asrs	r2, r3, #31
 801b922:	4698      	mov	r8, r3
 801b924:	4691      	mov	r9, r2
 801b926:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801b92a:	eb18 0102 	adds.w	r1, r8, r2
 801b92e:	6139      	str	r1, [r7, #16]
 801b930:	eb49 0303 	adc.w	r3, r9, r3
 801b934:	617b      	str	r3, [r7, #20]
 801b936:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801b93a:	2b00      	cmp	r3, #0
 801b93c:	da07      	bge.n	801b94e <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xb2>
 801b93e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801b942:	eb12 0a01 	adds.w	sl, r2, r1
 801b946:	f143 0b00 	adc.w	fp, r3, #0
 801b94a:	4652      	mov	r2, sl
 801b94c:	465b      	mov	r3, fp
 801b94e:	f04f 0000 	mov.w	r0, #0
 801b952:	f04f 0100 	mov.w	r1, #0
 801b956:	0fd0      	lsrs	r0, r2, #31
 801b958:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801b95c:	17d9      	asrs	r1, r3, #31
 801b95e:	4602      	mov	r2, r0
 801b960:	460b      	mov	r3, r1
  std::int32_t ab_x2_high32 =
 801b962:	4613      	mov	r3, r2
 801b964:	623b      	str	r3, [r7, #32]
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 801b966:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801b96a:	2b00      	cmp	r3, #0
 801b96c:	d003      	beq.n	801b976 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xda>
 801b96e:	f7ff fa09 	bl	801ad84 <_ZNSt14numeric_limitsIlE3maxEv>
 801b972:	4603      	mov	r3, r0
 801b974:	e000      	b.n	801b978 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xdc>
 801b976:	6a3b      	ldr	r3, [r7, #32]
}
 801b978:	4618      	mov	r0, r3
 801b97a:	3748      	adds	r7, #72	; 0x48
 801b97c:	46bd      	mov	sp, r7
 801b97e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801b982:	bf00      	nop
 801b984:	c0000001 	.word	0xc0000001

0801b988 <_ZNK6tflite12RuntimeShape4DimsEi>:
  inline int32_t Dims(int i) const {
 801b988:	b580      	push	{r7, lr}
 801b98a:	b082      	sub	sp, #8
 801b98c:	af00      	add	r7, sp, #0
 801b98e:	6078      	str	r0, [r7, #4]
 801b990:	6039      	str	r1, [r7, #0]
    TFLITE_DCHECK_GE(i, 0);
 801b992:	683b      	ldr	r3, [r7, #0]
 801b994:	2b00      	cmp	r3, #0
 801b996:	da01      	bge.n	801b99c <_ZNK6tflite12RuntimeShape4DimsEi+0x14>
 801b998:	f007 fd50 	bl	802343c <abort>
    TFLITE_DCHECK_LT(i, size_);
 801b99c:	687b      	ldr	r3, [r7, #4]
 801b99e:	681b      	ldr	r3, [r3, #0]
 801b9a0:	683a      	ldr	r2, [r7, #0]
 801b9a2:	429a      	cmp	r2, r3
 801b9a4:	db01      	blt.n	801b9aa <_ZNK6tflite12RuntimeShape4DimsEi+0x22>
 801b9a6:	f007 fd49 	bl	802343c <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 801b9aa:	687b      	ldr	r3, [r7, #4]
 801b9ac:	681b      	ldr	r3, [r3, #0]
 801b9ae:	2b05      	cmp	r3, #5
 801b9b0:	dd06      	ble.n	801b9c0 <_ZNK6tflite12RuntimeShape4DimsEi+0x38>
 801b9b2:	687b      	ldr	r3, [r7, #4]
 801b9b4:	685a      	ldr	r2, [r3, #4]
 801b9b6:	683b      	ldr	r3, [r7, #0]
 801b9b8:	009b      	lsls	r3, r3, #2
 801b9ba:	4413      	add	r3, r2
 801b9bc:	681b      	ldr	r3, [r3, #0]
 801b9be:	e004      	b.n	801b9ca <_ZNK6tflite12RuntimeShape4DimsEi+0x42>
 801b9c0:	687a      	ldr	r2, [r7, #4]
 801b9c2:	683b      	ldr	r3, [r7, #0]
 801b9c4:	009b      	lsls	r3, r3, #2
 801b9c6:	4413      	add	r3, r2
 801b9c8:	685b      	ldr	r3, [r3, #4]
  }
 801b9ca:	4618      	mov	r0, r3
 801b9cc:	3708      	adds	r7, #8
 801b9ce:	46bd      	mov	sp, r7
 801b9d0:	bd80      	pop	{r7, pc}

0801b9d2 <_ZNK6tflite12RuntimeShape8DimsDataEv>:
  inline const int32_t* DimsData() const {
 801b9d2:	b480      	push	{r7}
 801b9d4:	b083      	sub	sp, #12
 801b9d6:	af00      	add	r7, sp, #0
 801b9d8:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 801b9da:	687b      	ldr	r3, [r7, #4]
 801b9dc:	681b      	ldr	r3, [r3, #0]
 801b9de:	2b05      	cmp	r3, #5
 801b9e0:	dd02      	ble.n	801b9e8 <_ZNK6tflite12RuntimeShape8DimsDataEv+0x16>
 801b9e2:	687b      	ldr	r3, [r7, #4]
 801b9e4:	685b      	ldr	r3, [r3, #4]
 801b9e6:	e001      	b.n	801b9ec <_ZNK6tflite12RuntimeShape8DimsDataEv+0x1a>
 801b9e8:	687b      	ldr	r3, [r7, #4]
 801b9ea:	3304      	adds	r3, #4
  }
 801b9ec:	4618      	mov	r0, r3
 801b9ee:	370c      	adds	r7, #12
 801b9f0:	46bd      	mov	sp, r7
 801b9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9f6:	4770      	bx	lr

0801b9f8 <_ZNK6tflite12RuntimeShape8FlatSizeEv>:
    BuildFrom<const std::initializer_list<int>>(init_list);
  }

  // Returns the total count of elements, that is the size when flattened into a
  // vector.
  inline int FlatSize() const {
 801b9f8:	b580      	push	{r7, lr}
 801b9fa:	b086      	sub	sp, #24
 801b9fc:	af00      	add	r7, sp, #0
 801b9fe:	6078      	str	r0, [r7, #4]
    int buffer_size = 1;
 801ba00:	2301      	movs	r3, #1
 801ba02:	617b      	str	r3, [r7, #20]
    const int* dims_data = reinterpret_cast<const int*>(DimsData());
 801ba04:	6878      	ldr	r0, [r7, #4]
 801ba06:	f7ff ffe4 	bl	801b9d2 <_ZNK6tflite12RuntimeShape8DimsDataEv>
 801ba0a:	60f8      	str	r0, [r7, #12]
    for (int i = 0; i < size_; i++) {
 801ba0c:	2300      	movs	r3, #0
 801ba0e:	613b      	str	r3, [r7, #16]
 801ba10:	687b      	ldr	r3, [r7, #4]
 801ba12:	681b      	ldr	r3, [r3, #0]
 801ba14:	693a      	ldr	r2, [r7, #16]
 801ba16:	429a      	cmp	r2, r3
 801ba18:	da0c      	bge.n	801ba34 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x3c>
      buffer_size *= dims_data[i];
 801ba1a:	693b      	ldr	r3, [r7, #16]
 801ba1c:	009b      	lsls	r3, r3, #2
 801ba1e:	68fa      	ldr	r2, [r7, #12]
 801ba20:	4413      	add	r3, r2
 801ba22:	681a      	ldr	r2, [r3, #0]
 801ba24:	697b      	ldr	r3, [r7, #20]
 801ba26:	fb02 f303 	mul.w	r3, r2, r3
 801ba2a:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < size_; i++) {
 801ba2c:	693b      	ldr	r3, [r7, #16]
 801ba2e:	3301      	adds	r3, #1
 801ba30:	613b      	str	r3, [r7, #16]
 801ba32:	e7ed      	b.n	801ba10 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x18>
    }
    return buffer_size;
 801ba34:	697b      	ldr	r3, [r7, #20]
  }
 801ba36:	4618      	mov	r0, r3
 801ba38:	3718      	adds	r7, #24
 801ba3a:	46bd      	mov	sp, r7
 801ba3c:	bd80      	pop	{r7, pc}

0801ba3e <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>:
}

// Flat size calculation, checking that dimensions match with one or more other
// arrays.
inline int MatchingFlatSize(const RuntimeShape& shape,
                            const RuntimeShape& check_shape_0) {
 801ba3e:	b590      	push	{r4, r7, lr}
 801ba40:	b085      	sub	sp, #20
 801ba42:	af00      	add	r7, sp, #0
 801ba44:	6078      	str	r0, [r7, #4]
 801ba46:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
 801ba48:	6878      	ldr	r0, [r7, #4]
 801ba4a:	f7ff fe90 	bl	801b76e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801ba4e:	4604      	mov	r4, r0
 801ba50:	6838      	ldr	r0, [r7, #0]
 801ba52:	f7ff fe8c 	bl	801b76e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801ba56:	4603      	mov	r3, r0
 801ba58:	429c      	cmp	r4, r3
 801ba5a:	d001      	beq.n	801ba60 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x22>
 801ba5c:	f007 fcee 	bl	802343c <abort>
  const int dims_count = shape.DimensionsCount();
 801ba60:	6878      	ldr	r0, [r7, #4]
 801ba62:	f7ff fe84 	bl	801b76e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801ba66:	60b8      	str	r0, [r7, #8]
  for (int i = 0; i < dims_count; ++i) {
 801ba68:	2300      	movs	r3, #0
 801ba6a:	60fb      	str	r3, [r7, #12]
 801ba6c:	68fa      	ldr	r2, [r7, #12]
 801ba6e:	68bb      	ldr	r3, [r7, #8]
 801ba70:	429a      	cmp	r2, r3
 801ba72:	da11      	bge.n	801ba98 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x5a>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 801ba74:	68f9      	ldr	r1, [r7, #12]
 801ba76:	6878      	ldr	r0, [r7, #4]
 801ba78:	f7ff ff86 	bl	801b988 <_ZNK6tflite12RuntimeShape4DimsEi>
 801ba7c:	4604      	mov	r4, r0
 801ba7e:	68f9      	ldr	r1, [r7, #12]
 801ba80:	6838      	ldr	r0, [r7, #0]
 801ba82:	f7ff ff81 	bl	801b988 <_ZNK6tflite12RuntimeShape4DimsEi>
 801ba86:	4603      	mov	r3, r0
 801ba88:	429c      	cmp	r4, r3
 801ba8a:	d001      	beq.n	801ba90 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x52>
 801ba8c:	f007 fcd6 	bl	802343c <abort>
  for (int i = 0; i < dims_count; ++i) {
 801ba90:	68fb      	ldr	r3, [r7, #12]
 801ba92:	3301      	adds	r3, #1
 801ba94:	60fb      	str	r3, [r7, #12]
 801ba96:	e7e9      	b.n	801ba6c <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x2e>
  }
  return shape.FlatSize();
 801ba98:	6878      	ldr	r0, [r7, #4]
 801ba9a:	f7ff ffad 	bl	801b9f8 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 801ba9e:	4603      	mov	r3, r0
}
 801baa0:	4618      	mov	r0, r3
 801baa2:	3714      	adds	r7, #20
 801baa4:	46bd      	mov	sp, r7
 801baa6:	bd90      	pop	{r4, r7, pc}

0801baa8 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>:
                                           quantized_multiplier);
}

inline int32_t MultiplyByQuantizedMultiplier(int32_t x,
                                             int32_t quantized_multiplier,
                                             int shift) {
 801baa8:	b580      	push	{r7, lr}
 801baaa:	b086      	sub	sp, #24
 801baac:	af00      	add	r7, sp, #0
 801baae:	60f8      	str	r0, [r7, #12]
 801bab0:	60b9      	str	r1, [r7, #8]
 801bab2:	607a      	str	r2, [r7, #4]
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  int left_shift = shift > 0 ? shift : 0;
 801bab4:	687b      	ldr	r3, [r7, #4]
 801bab6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801baba:	617b      	str	r3, [r7, #20]
  int right_shift = shift > 0 ? 0 : -shift;
 801babc:	687b      	ldr	r3, [r7, #4]
 801babe:	2b00      	cmp	r3, #0
 801bac0:	dc02      	bgt.n	801bac8 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x20>
 801bac2:	687b      	ldr	r3, [r7, #4]
 801bac4:	425b      	negs	r3, r3
 801bac6:	e000      	b.n	801baca <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x22>
 801bac8:	2300      	movs	r3, #0
 801baca:	613b      	str	r3, [r7, #16]
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
 801bacc:	68fa      	ldr	r2, [r7, #12]
 801bace:	697b      	ldr	r3, [r7, #20]
 801bad0:	fa02 f303 	lsl.w	r3, r2, r3
 801bad4:	68b9      	ldr	r1, [r7, #8]
 801bad6:	4618      	mov	r0, r3
 801bad8:	f7ff fee0 	bl	801b89c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 801badc:	4603      	mov	r3, r0
 801bade:	6939      	ldr	r1, [r7, #16]
 801bae0:	4618      	mov	r0, r3
 801bae2:	f000 fb4b 	bl	801c17c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 801bae6:	4603      	mov	r3, r0
                                 x * (1 << left_shift), quantized_multiplier),
                             right_shift);
}
 801bae8:	4618      	mov	r0, r3
 801baea:	3718      	adds	r7, #24
 801baec:	46bd      	mov	sp, r7
 801baee:	bd80      	pop	{r7, pc}

0801baf0 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns a mutable tensor for a given input index. is_variable must be checked
// during prepare when the full TfLiteTensor is available.
inline TfLiteEvalTensor* GetMutableEvalInput(const TfLiteContext* context,
                                             const TfLiteNode* node,
                                             int index) {
 801baf0:	b580      	push	{r7, lr}
 801baf2:	b084      	sub	sp, #16
 801baf4:	af00      	add	r7, sp, #0
 801baf6:	60f8      	str	r0, [r7, #12]
 801baf8:	60b9      	str	r1, [r7, #8]
 801bafa:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 801bafc:	68fb      	ldr	r3, [r7, #12]
 801bafe:	2b00      	cmp	r3, #0
 801bb00:	d101      	bne.n	801bb06 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 801bb02:	f007 fc9b 	bl	802343c <abort>
  TFLITE_DCHECK(node != nullptr);
 801bb06:	68bb      	ldr	r3, [r7, #8]
 801bb08:	2b00      	cmp	r3, #0
 801bb0a:	d101      	bne.n	801bb10 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 801bb0c:	f007 fc96 	bl	802343c <abort>
  return context->GetEvalTensor(context, node->inputs->data[index]);
 801bb10:	68fb      	ldr	r3, [r7, #12]
 801bb12:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801bb14:	68bb      	ldr	r3, [r7, #8]
 801bb16:	6819      	ldr	r1, [r3, #0]
 801bb18:	687b      	ldr	r3, [r7, #4]
 801bb1a:	009b      	lsls	r3, r3, #2
 801bb1c:	440b      	add	r3, r1
 801bb1e:	685b      	ldr	r3, [r3, #4]
 801bb20:	4619      	mov	r1, r3
 801bb22:	68f8      	ldr	r0, [r7, #12]
 801bb24:	4790      	blx	r2
 801bb26:	4603      	mov	r3, r0
}
 801bb28:	4618      	mov	r0, r3
 801bb2a:	3710      	adds	r7, #16
 801bb2c:	46bd      	mov	sp, r7
 801bb2e:	bd80      	pop	{r7, pc}

0801bb30 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given input index in a node.
inline const TfLiteEvalTensor* GetEvalInput(const TfLiteContext* context,
                                            const TfLiteNode* node, int index) {
 801bb30:	b580      	push	{r7, lr}
 801bb32:	b084      	sub	sp, #16
 801bb34:	af00      	add	r7, sp, #0
 801bb36:	60f8      	str	r0, [r7, #12]
 801bb38:	60b9      	str	r1, [r7, #8]
 801bb3a:	607a      	str	r2, [r7, #4]
  return GetMutableEvalInput(context, node, index);
 801bb3c:	687a      	ldr	r2, [r7, #4]
 801bb3e:	68b9      	ldr	r1, [r7, #8]
 801bb40:	68f8      	ldr	r0, [r7, #12]
 801bb42:	f7ff ffd5 	bl	801baf0 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 801bb46:	4603      	mov	r3, r0
}
 801bb48:	4618      	mov	r0, r3
 801bb4a:	3710      	adds	r7, #16
 801bb4c:	46bd      	mov	sp, r7
 801bb4e:	bd80      	pop	{r7, pc}

0801bb50 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given output index in a node.
inline TfLiteEvalTensor* GetEvalOutput(const TfLiteContext* context,
                                       const TfLiteNode* node, int index) {
 801bb50:	b580      	push	{r7, lr}
 801bb52:	b084      	sub	sp, #16
 801bb54:	af00      	add	r7, sp, #0
 801bb56:	60f8      	str	r0, [r7, #12]
 801bb58:	60b9      	str	r1, [r7, #8]
 801bb5a:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 801bb5c:	68fb      	ldr	r3, [r7, #12]
 801bb5e:	2b00      	cmp	r3, #0
 801bb60:	d101      	bne.n	801bb66 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 801bb62:	f007 fc6b 	bl	802343c <abort>
  TFLITE_DCHECK(node != nullptr);
 801bb66:	68bb      	ldr	r3, [r7, #8]
 801bb68:	2b00      	cmp	r3, #0
 801bb6a:	d101      	bne.n	801bb70 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 801bb6c:	f007 fc66 	bl	802343c <abort>
  return context->GetEvalTensor(context, node->outputs->data[index]);
 801bb70:	68fb      	ldr	r3, [r7, #12]
 801bb72:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801bb74:	68bb      	ldr	r3, [r7, #8]
 801bb76:	6859      	ldr	r1, [r3, #4]
 801bb78:	687b      	ldr	r3, [r7, #4]
 801bb7a:	009b      	lsls	r3, r3, #2
 801bb7c:	440b      	add	r3, r1
 801bb7e:	685b      	ldr	r3, [r3, #4]
 801bb80:	4619      	mov	r1, r3
 801bb82:	68f8      	ldr	r0, [r7, #12]
 801bb84:	4790      	blx	r2
 801bb86:	4603      	mov	r3, r0
}
 801bb88:	4618      	mov	r0, r3
 801bb8a:	3710      	adds	r7, #16
 801bb8c:	46bd      	mov	sp, r7
 801bb8e:	bd80      	pop	{r7, pc}

0801bb90 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf>:
  data->params.input_offset = input->params.zero_point;
  data->params.output_offset = output->params.zero_point;
}

inline void ReluFloat(const RuntimeShape& input_shape, const float* input_data,
                      const RuntimeShape& output_shape, float* output_data) {
 801bb90:	b580      	push	{r7, lr}
 801bb92:	b08a      	sub	sp, #40	; 0x28
 801bb94:	af00      	add	r7, sp, #0
 801bb96:	60f8      	str	r0, [r7, #12]
 801bb98:	60b9      	str	r1, [r7, #8]
 801bb9a:	607a      	str	r2, [r7, #4]
 801bb9c:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 801bb9e:	6879      	ldr	r1, [r7, #4]
 801bba0:	68f8      	ldr	r0, [r7, #12]
 801bba2:	f7ff ff4c 	bl	801ba3e <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 801bba6:	6238      	str	r0, [r7, #32]
  for (int i = 0; i < flat_size; ++i) {
 801bba8:	2300      	movs	r3, #0
 801bbaa:	627b      	str	r3, [r7, #36]	; 0x24
 801bbac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801bbae:	6a3b      	ldr	r3, [r7, #32]
 801bbb0:	429a      	cmp	r2, r3
 801bbb2:	da1d      	bge.n	801bbf0 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x60>
    const float val = input_data[i];
 801bbb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bbb6:	009b      	lsls	r3, r3, #2
 801bbb8:	68ba      	ldr	r2, [r7, #8]
 801bbba:	4413      	add	r3, r2
 801bbbc:	681b      	ldr	r3, [r3, #0]
 801bbbe:	61fb      	str	r3, [r7, #28]
    const float lower = 0.0f;
 801bbc0:	f04f 0300 	mov.w	r3, #0
 801bbc4:	61bb      	str	r3, [r7, #24]
    const float clamped = val < lower ? lower : val;
 801bbc6:	edd7 7a07 	vldr	s15, [r7, #28]
 801bbca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801bbce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bbd2:	d501      	bpl.n	801bbd8 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x48>
 801bbd4:	69bb      	ldr	r3, [r7, #24]
 801bbd6:	e000      	b.n	801bbda <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x4a>
 801bbd8:	69fb      	ldr	r3, [r7, #28]
 801bbda:	617b      	str	r3, [r7, #20]
    output_data[i] = clamped;
 801bbdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bbde:	009b      	lsls	r3, r3, #2
 801bbe0:	683a      	ldr	r2, [r7, #0]
 801bbe2:	4413      	add	r3, r2
 801bbe4:	697a      	ldr	r2, [r7, #20]
 801bbe6:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 801bbe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bbea:	3301      	adds	r3, #1
 801bbec:	627b      	str	r3, [r7, #36]	; 0x24
 801bbee:	e7dd      	b.n	801bbac <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x1c>
  }
}
 801bbf0:	bf00      	nop
 801bbf2:	3728      	adds	r7, #40	; 0x28
 801bbf4:	46bd      	mov	sp, r7
 801bbf6:	bd80      	pop	{r7, pc}

0801bbf8 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf>:

inline void Relu6Float(const RuntimeShape& input_shape, const float* input_data,
                       const RuntimeShape& output_shape, float* output_data) {
 801bbf8:	b580      	push	{r7, lr}
 801bbfa:	b08a      	sub	sp, #40	; 0x28
 801bbfc:	af00      	add	r7, sp, #0
 801bbfe:	60f8      	str	r0, [r7, #12]
 801bc00:	60b9      	str	r1, [r7, #8]
 801bc02:	607a      	str	r2, [r7, #4]
 801bc04:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 801bc06:	6879      	ldr	r1, [r7, #4]
 801bc08:	68f8      	ldr	r0, [r7, #12]
 801bc0a:	f7ff ff18 	bl	801ba3e <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 801bc0e:	6238      	str	r0, [r7, #32]
  for (int i = 0; i < flat_size; ++i) {
 801bc10:	2300      	movs	r3, #0
 801bc12:	627b      	str	r3, [r7, #36]	; 0x24
 801bc14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801bc16:	6a3b      	ldr	r3, [r7, #32]
 801bc18:	429a      	cmp	r2, r3
 801bc1a:	da2a      	bge.n	801bc72 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x7a>
    const float val = input_data[i];
 801bc1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bc1e:	009b      	lsls	r3, r3, #2
 801bc20:	68ba      	ldr	r2, [r7, #8]
 801bc22:	4413      	add	r3, r2
 801bc24:	681b      	ldr	r3, [r3, #0]
 801bc26:	61fb      	str	r3, [r7, #28]
    const float upper = 6.0f;
 801bc28:	4b14      	ldr	r3, [pc, #80]	; (801bc7c <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x84>)
 801bc2a:	61bb      	str	r3, [r7, #24]
    const float lower = 0.0f;
 801bc2c:	f04f 0300 	mov.w	r3, #0
 801bc30:	617b      	str	r3, [r7, #20]
    const float clamped = val > upper ? upper : val < lower ? lower : val;
 801bc32:	edd7 7a07 	vldr	s15, [r7, #28]
 801bc36:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 801bc3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801bc3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bc42:	dd01      	ble.n	801bc48 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x50>
 801bc44:	69bb      	ldr	r3, [r7, #24]
 801bc46:	e009      	b.n	801bc5c <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x64>
 801bc48:	edd7 7a07 	vldr	s15, [r7, #28]
 801bc4c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801bc50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bc54:	d501      	bpl.n	801bc5a <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x62>
 801bc56:	697b      	ldr	r3, [r7, #20]
 801bc58:	e000      	b.n	801bc5c <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x64>
 801bc5a:	69fb      	ldr	r3, [r7, #28]
 801bc5c:	613b      	str	r3, [r7, #16]
    output_data[i] = clamped;
 801bc5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bc60:	009b      	lsls	r3, r3, #2
 801bc62:	683a      	ldr	r2, [r7, #0]
 801bc64:	4413      	add	r3, r2
 801bc66:	693a      	ldr	r2, [r7, #16]
 801bc68:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 801bc6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bc6c:	3301      	adds	r3, #1
 801bc6e:	627b      	str	r3, [r7, #36]	; 0x24
 801bc70:	e7d0      	b.n	801bc14 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x1c>
  }
}
 801bc72:	bf00      	nop
 801bc74:	3728      	adds	r7, #40	; 0x28
 801bc76:	46bd      	mov	sp, r7
 801bc78:	bd80      	pop	{r7, pc}
 801bc7a:	bf00      	nop
 801bc7c:	40c00000 	.word	0x40c00000

0801bc80 <_ZN6tflite3ops5micro11activations8ReluInitEP13TfLiteContextPKcj>:
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
    output_data[i] = clamped;
  }
}

void* ReluInit(TfLiteContext* context, const char* buffer, size_t length) {
 801bc80:	b580      	push	{r7, lr}
 801bc82:	b084      	sub	sp, #16
 801bc84:	af00      	add	r7, sp, #0
 801bc86:	60f8      	str	r0, [r7, #12]
 801bc88:	60b9      	str	r1, [r7, #8]
 801bc8a:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 801bc8c:	68fb      	ldr	r3, [r7, #12]
 801bc8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bc90:	2b00      	cmp	r3, #0
 801bc92:	d101      	bne.n	801bc98 <_ZN6tflite3ops5micro11activations8ReluInitEP13TfLiteContextPKcj+0x18>
 801bc94:	f007 fbd2 	bl	802343c <abort>
  return context->AllocatePersistentBuffer(context, sizeof(ReluOpData));
 801bc98:	68fb      	ldr	r3, [r7, #12]
 801bc9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bc9c:	211c      	movs	r1, #28
 801bc9e:	68f8      	ldr	r0, [r7, #12]
 801bca0:	4798      	blx	r3
 801bca2:	4603      	mov	r3, r0
}
 801bca4:	4618      	mov	r0, r3
 801bca6:	3710      	adds	r7, #16
 801bca8:	46bd      	mov	sp, r7
 801bcaa:	bd80      	pop	{r7, pc}

0801bcac <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus ReluPrepare(TfLiteContext* context, TfLiteNode* node) {
 801bcac:	b590      	push	{r4, r7, lr}
 801bcae:	b089      	sub	sp, #36	; 0x24
 801bcb0:	af02      	add	r7, sp, #8
 801bcb2:	6078      	str	r0, [r7, #4]
 801bcb4:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 801bcb6:	683b      	ldr	r3, [r7, #0]
 801bcb8:	691b      	ldr	r3, [r3, #16]
 801bcba:	2b00      	cmp	r3, #0
 801bcbc:	d101      	bne.n	801bcc2 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x16>
 801bcbe:	f007 fbbd 	bl	802343c <abort>
  ReluOpData* data = static_cast<ReluOpData*>(node->user_data);
 801bcc2:	683b      	ldr	r3, [r7, #0]
 801bcc4:	691b      	ldr	r3, [r3, #16]
 801bcc6:	617b      	str	r3, [r7, #20]

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 801bcc8:	2200      	movs	r2, #0
 801bcca:	6839      	ldr	r1, [r7, #0]
 801bccc:	6878      	ldr	r0, [r7, #4]
 801bcce:	f7ff facd 	bl	801b26c <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801bcd2:	6138      	str	r0, [r7, #16]
  TF_LITE_ENSURE(context, input != nullptr);
 801bcd4:	693b      	ldr	r3, [r7, #16]
 801bcd6:	2b00      	cmp	r3, #0
 801bcd8:	d10a      	bne.n	801bcf0 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x44>
 801bcda:	687b      	ldr	r3, [r7, #4]
 801bcdc:	695c      	ldr	r4, [r3, #20]
 801bcde:	4b1a      	ldr	r3, [pc, #104]	; (801bd48 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x9c>)
 801bce0:	9300      	str	r3, [sp, #0]
 801bce2:	238e      	movs	r3, #142	; 0x8e
 801bce4:	4a19      	ldr	r2, [pc, #100]	; (801bd4c <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa0>)
 801bce6:	491a      	ldr	r1, [pc, #104]	; (801bd50 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa4>)
 801bce8:	6878      	ldr	r0, [r7, #4]
 801bcea:	47a0      	blx	r4
 801bcec:	2301      	movs	r3, #1
 801bcee:	e027      	b.n	801bd40 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x94>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 801bcf0:	2200      	movs	r2, #0
 801bcf2:	6839      	ldr	r1, [r7, #0]
 801bcf4:	6878      	ldr	r0, [r7, #4]
 801bcf6:	f7ff fac9 	bl	801b28c <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 801bcfa:	60f8      	str	r0, [r7, #12]
  TF_LITE_ENSURE(context, output != nullptr);
 801bcfc:	68fb      	ldr	r3, [r7, #12]
 801bcfe:	2b00      	cmp	r3, #0
 801bd00:	d10a      	bne.n	801bd18 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x6c>
 801bd02:	687b      	ldr	r3, [r7, #4]
 801bd04:	695c      	ldr	r4, [r3, #20]
 801bd06:	4b13      	ldr	r3, [pc, #76]	; (801bd54 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa8>)
 801bd08:	9300      	str	r3, [sp, #0]
 801bd0a:	2390      	movs	r3, #144	; 0x90
 801bd0c:	4a0f      	ldr	r2, [pc, #60]	; (801bd4c <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa0>)
 801bd0e:	4910      	ldr	r1, [pc, #64]	; (801bd50 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa4>)
 801bd10:	6878      	ldr	r0, [r7, #4]
 801bd12:	47a0      	blx	r4
 801bd14:	2301      	movs	r3, #1
 801bd16:	e013      	b.n	801bd40 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x94>

  if (input->type == kTfLiteInt8) {
 801bd18:	693b      	ldr	r3, [r7, #16]
 801bd1a:	781b      	ldrb	r3, [r3, #0]
 801bd1c:	2b09      	cmp	r3, #9
 801bd1e:	d105      	bne.n	801bd2c <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x80>
    CalculateReluOpData<int8_t>(input, output, data);
 801bd20:	697a      	ldr	r2, [r7, #20]
 801bd22:	68f9      	ldr	r1, [r7, #12]
 801bd24:	6938      	ldr	r0, [r7, #16]
 801bd26:	f000 fa9d 	bl	801c264 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>
 801bd2a:	e008      	b.n	801bd3e <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x92>
  } else if (input->type == kTfLiteUInt8) {
 801bd2c:	693b      	ldr	r3, [r7, #16]
 801bd2e:	781b      	ldrb	r3, [r3, #0]
 801bd30:	2b03      	cmp	r3, #3
 801bd32:	d104      	bne.n	801bd3e <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x92>
    CalculateReluOpData<uint8_t>(input, output, data);
 801bd34:	697a      	ldr	r2, [r7, #20]
 801bd36:	68f9      	ldr	r1, [r7, #12]
 801bd38:	6938      	ldr	r0, [r7, #16]
 801bd3a:	f000 fb35 	bl	801c3a8 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>
  }

  return kTfLiteOk;
 801bd3e:	2300      	movs	r3, #0
}
 801bd40:	4618      	mov	r0, r3
 801bd42:	371c      	adds	r7, #28
 801bd44:	46bd      	mov	sp, r7
 801bd46:	bd90      	pop	{r4, r7, pc}
 801bd48:	080288b8 	.word	0x080288b8
 801bd4c:	08028818 	.word	0x08028818
 801bd50:	080288a0 	.word	0x080288a0
 801bd54:	080288cc 	.word	0x080288cc

0801bd58 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus ReluEval(TfLiteContext* context, TfLiteNode* node) {
 801bd58:	b590      	push	{r4, r7, lr}
 801bd5a:	b0ad      	sub	sp, #180	; 0xb4
 801bd5c:	af02      	add	r7, sp, #8
 801bd5e:	6078      	str	r0, [r7, #4]
 801bd60:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 801bd62:	683b      	ldr	r3, [r7, #0]
 801bd64:	691b      	ldr	r3, [r3, #16]
 801bd66:	2b00      	cmp	r3, #0
 801bd68:	d101      	bne.n	801bd6e <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x16>
 801bd6a:	f007 fb67 	bl	802343c <abort>
  const ReluOpData& data = *(static_cast<const ReluOpData*>(node->user_data));
 801bd6e:	683b      	ldr	r3, [r7, #0]
 801bd70:	691b      	ldr	r3, [r3, #16]
 801bd72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 801bd76:	2200      	movs	r2, #0
 801bd78:	6839      	ldr	r1, [r7, #0]
 801bd7a:	6878      	ldr	r0, [r7, #4]
 801bd7c:	f7ff fed8 	bl	801bb30 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 801bd80:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 801bd84:	2200      	movs	r2, #0
 801bd86:	6839      	ldr	r1, [r7, #0]
 801bd88:	6878      	ldr	r0, [r7, #4]
 801bd8a:	f7ff fee1 	bl	801bb50 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 801bd8e:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

  switch (input->type) {
 801bd92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801bd96:	7a1b      	ldrb	r3, [r3, #8]
 801bd98:	2b09      	cmp	r3, #9
 801bd9a:	d032      	beq.n	801be02 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0xaa>
 801bd9c:	2b09      	cmp	r3, #9
 801bd9e:	f300 808c 	bgt.w	801beba <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x162>
 801bda2:	2b01      	cmp	r3, #1
 801bda4:	d002      	beq.n	801bdac <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x54>
 801bda6:	2b03      	cmp	r3, #3
 801bda8:	d059      	beq.n	801be5e <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x106>
 801bdaa:	e086      	b.n	801beba <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x162>
    case kTfLiteFloat32: {
      ReluFloat(tflite::micro::GetTensorShape(input),
 801bdac:	f107 030c 	add.w	r3, r7, #12
 801bdb0:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 801bdb4:	4618      	mov	r0, r3
 801bdb6:	f001 fe2f 	bl	801da18 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 801bdba:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 801bdbe:	f000 fb95 	bl	801c4ec <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 801bdc2:	4604      	mov	r4, r0
                tflite::micro::GetTensorData<float>(input),
                tflite::micro::GetTensorShape(output),
 801bdc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801bdc8:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 801bdcc:	4618      	mov	r0, r3
 801bdce:	f001 fe23 	bl	801da18 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      ReluFloat(tflite::micro::GetTensorShape(input),
 801bdd2:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 801bdd6:	f000 fb98 	bl	801c50a <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 801bdda:	4603      	mov	r3, r0
 801bddc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801bde0:	f107 000c 	add.w	r0, r7, #12
 801bde4:	4621      	mov	r1, r4
 801bde6:	f7ff fed3 	bl	801bb90 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf>
                tflite::micro::GetTensorShape(output),
 801bdea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801bdee:	4618      	mov	r0, r3
 801bdf0:	f7ff fca7 	bl	801b742 <_ZN6tflite12RuntimeShapeD1Ev>
      ReluFloat(tflite::micro::GetTensorShape(input),
 801bdf4:	f107 030c 	add.w	r3, r7, #12
 801bdf8:	4618      	mov	r0, r3
 801bdfa:	f7ff fca2 	bl	801b742 <_ZN6tflite12RuntimeShapeD1Ev>
                tflite::micro::GetTensorData<float>(output));

      return kTfLiteOk;
 801bdfe:	2300      	movs	r3, #0
 801be00:	e069      	b.n	801bed6 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    }
    case kTfLiteInt8: {
      ReluQuantized<int8_t>(data, tflite::micro::GetTensorShape(input),
 801be02:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801be06:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 801be0a:	4618      	mov	r0, r3
 801be0c:	f001 fe04 	bl	801da18 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                            tflite::micro::GetTensorShape(output),
 801be10:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801be14:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 801be18:	4618      	mov	r0, r3
 801be1a:	f001 fdfd 	bl	801da18 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      ReluQuantized<int8_t>(data, tflite::micro::GetTensorShape(input),
 801be1e:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 801be22:	f000 fb83 	bl	801c52c <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 801be26:	4604      	mov	r4, r0
 801be28:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 801be2c:	f000 fb8d 	bl	801c54a <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 801be30:	4603      	mov	r3, r0
 801be32:	f107 0254 	add.w	r2, r7, #84	; 0x54
 801be36:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 801be3a:	9300      	str	r3, [sp, #0]
 801be3c:	4623      	mov	r3, r4
 801be3e:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 801be42:	f000 fb93 	bl	801c56c <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>
                            tflite::micro::GetTensorShape(output),
 801be46:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801be4a:	4618      	mov	r0, r3
 801be4c:	f7ff fc79 	bl	801b742 <_ZN6tflite12RuntimeShapeD1Ev>
      ReluQuantized<int8_t>(data, tflite::micro::GetTensorShape(input),
 801be50:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801be54:	4618      	mov	r0, r3
 801be56:	f7ff fc74 	bl	801b742 <_ZN6tflite12RuntimeShapeD1Ev>
                            tflite::micro::GetTensorData<int8_t>(input),
                            tflite::micro::GetTensorData<int8_t>(output));
      return kTfLiteOk;
 801be5a:	2300      	movs	r3, #0
 801be5c:	e03b      	b.n	801bed6 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    }
    case kTfLiteUInt8: {
      ReluQuantized<uint8_t>(data, tflite::micro::GetTensorShape(input),
 801be5e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801be62:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 801be66:	4618      	mov	r0, r3
 801be68:	f001 fdd6 	bl	801da18 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                             tflite::micro::GetTensorShape(output),
 801be6c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801be70:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 801be74:	4618      	mov	r0, r3
 801be76:	f001 fdcf 	bl	801da18 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      ReluQuantized<uint8_t>(data, tflite::micro::GetTensorShape(input),
 801be7a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 801be7e:	f000 fbc1 	bl	801c604 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 801be82:	4604      	mov	r4, r0
 801be84:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 801be88:	f000 fbcb 	bl	801c622 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 801be8c:	4603      	mov	r3, r0
 801be8e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 801be92:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 801be96:	9300      	str	r3, [sp, #0]
 801be98:	4623      	mov	r3, r4
 801be9a:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 801be9e:	f000 fbd1 	bl	801c644 <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>
                             tflite::micro::GetTensorShape(output),
 801bea2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801bea6:	4618      	mov	r0, r3
 801bea8:	f7ff fc4b 	bl	801b742 <_ZN6tflite12RuntimeShapeD1Ev>
      ReluQuantized<uint8_t>(data, tflite::micro::GetTensorShape(input),
 801beac:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801beb0:	4618      	mov	r0, r3
 801beb2:	f7ff fc46 	bl	801b742 <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorData<uint8_t>(input),
                             tflite::micro::GetTensorData<uint8_t>(output));
      return kTfLiteOk;
 801beb6:	2300      	movs	r3, #0
 801beb8:	e00d      	b.n	801bed6 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    }
    default: {
      TF_LITE_KERNEL_LOG(context, "Only float32 is supported currently, got %s",
 801beba:	687b      	ldr	r3, [r7, #4]
 801bebc:	695c      	ldr	r4, [r3, #20]
 801bebe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801bec2:	7a1b      	ldrb	r3, [r3, #8]
 801bec4:	4618      	mov	r0, r3
 801bec6:	f7fe fee1 	bl	801ac8c <TfLiteTypeGetName>
 801beca:	4603      	mov	r3, r0
 801becc:	461a      	mov	r2, r3
 801bece:	4904      	ldr	r1, [pc, #16]	; (801bee0 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x188>)
 801bed0:	6878      	ldr	r0, [r7, #4]
 801bed2:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
 801bed4:	2301      	movs	r3, #1
    }
  }
}
 801bed6:	4618      	mov	r0, r3
 801bed8:	37ac      	adds	r7, #172	; 0xac
 801beda:	46bd      	mov	sp, r7
 801bedc:	bd90      	pop	{r4, r7, pc}
 801bede:	bf00      	nop
 801bee0:	080288e0 	.word	0x080288e0

0801bee4 <_ZN6tflite3ops5micro11activations9Relu6InitEP13TfLiteContextPKcj>:

void* Relu6Init(TfLiteContext* context, const char* buffer, size_t length) {
 801bee4:	b580      	push	{r7, lr}
 801bee6:	b084      	sub	sp, #16
 801bee8:	af00      	add	r7, sp, #0
 801beea:	60f8      	str	r0, [r7, #12]
 801beec:	60b9      	str	r1, [r7, #8]
 801beee:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 801bef0:	68fb      	ldr	r3, [r7, #12]
 801bef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bef4:	2b00      	cmp	r3, #0
 801bef6:	d101      	bne.n	801befc <_ZN6tflite3ops5micro11activations9Relu6InitEP13TfLiteContextPKcj+0x18>
 801bef8:	f007 faa0 	bl	802343c <abort>
  return context->AllocatePersistentBuffer(context, sizeof(Relu6OpData));
 801befc:	68fb      	ldr	r3, [r7, #12]
 801befe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bf00:	2104      	movs	r1, #4
 801bf02:	68f8      	ldr	r0, [r7, #12]
 801bf04:	4798      	blx	r3
 801bf06:	4603      	mov	r3, r0
}
 801bf08:	4618      	mov	r0, r3
 801bf0a:	3710      	adds	r7, #16
 801bf0c:	46bd      	mov	sp, r7
 801bf0e:	bd80      	pop	{r7, pc}

0801bf10 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Relu6Prepare(TfLiteContext* context, TfLiteNode* node) {
 801bf10:	b590      	push	{r4, r7, lr}
 801bf12:	b087      	sub	sp, #28
 801bf14:	af02      	add	r7, sp, #8
 801bf16:	6078      	str	r0, [r7, #4]
 801bf18:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 801bf1a:	683b      	ldr	r3, [r7, #0]
 801bf1c:	691b      	ldr	r3, [r3, #16]
 801bf1e:	2b00      	cmp	r3, #0
 801bf20:	d101      	bne.n	801bf26 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0x16>
 801bf22:	f007 fa8b 	bl	802343c <abort>
  Relu6OpData* data = static_cast<Relu6OpData*>(node->user_data);
 801bf26:	683b      	ldr	r3, [r7, #0]
 801bf28:	691b      	ldr	r3, [r3, #16]
 801bf2a:	60fb      	str	r3, [r7, #12]

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 801bf2c:	2200      	movs	r2, #0
 801bf2e:	6839      	ldr	r1, [r7, #0]
 801bf30:	6878      	ldr	r0, [r7, #4]
 801bf32:	f7ff f99b 	bl	801b26c <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801bf36:	60b8      	str	r0, [r7, #8]
  TF_LITE_ENSURE(context, input != nullptr);
 801bf38:	68bb      	ldr	r3, [r7, #8]
 801bf3a:	2b00      	cmp	r3, #0
 801bf3c:	d10a      	bne.n	801bf54 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0x44>
 801bf3e:	687b      	ldr	r3, [r7, #4]
 801bf40:	695c      	ldr	r4, [r3, #20]
 801bf42:	4b20      	ldr	r3, [pc, #128]	; (801bfc4 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xb4>)
 801bf44:	9300      	str	r3, [sp, #0]
 801bf46:	23cd      	movs	r3, #205	; 0xcd
 801bf48:	4a1f      	ldr	r2, [pc, #124]	; (801bfc8 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xb8>)
 801bf4a:	4920      	ldr	r1, [pc, #128]	; (801bfcc <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xbc>)
 801bf4c:	6878      	ldr	r0, [r7, #4]
 801bf4e:	47a0      	blx	r4
 801bf50:	2301      	movs	r3, #1
 801bf52:	e033      	b.n	801bfbc <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xac>

  if (input->type == kTfLiteInt8) {
 801bf54:	68bb      	ldr	r3, [r7, #8]
 801bf56:	781b      	ldrb	r3, [r3, #0]
 801bf58:	2b09      	cmp	r3, #9
 801bf5a:	d115      	bne.n	801bf88 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0x78>
    data->six_int8 = FloatToQuantizedType<int8_t>(6.0f, input->params.scale,
 801bf5c:	68bb      	ldr	r3, [r7, #8]
 801bf5e:	edd3 7a03 	vldr	s15, [r3, #12]
                                                  input->params.zero_point);
 801bf62:	68bb      	ldr	r3, [r7, #8]
 801bf64:	691b      	ldr	r3, [r3, #16]
    data->six_int8 = FloatToQuantizedType<int8_t>(6.0f, input->params.scale,
 801bf66:	4618      	mov	r0, r3
 801bf68:	eef0 0a67 	vmov.f32	s1, s15
 801bf6c:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 801bf70:	f000 fbb3 	bl	801c6da <_ZN6tflite20FloatToQuantizedTypeIaEET_ffi>
 801bf74:	4603      	mov	r3, r0
 801bf76:	461a      	mov	r2, r3
 801bf78:	68fb      	ldr	r3, [r7, #12]
 801bf7a:	701a      	strb	r2, [r3, #0]
    data->zero_int8 = input->params.zero_point;
 801bf7c:	68bb      	ldr	r3, [r7, #8]
 801bf7e:	691b      	ldr	r3, [r3, #16]
 801bf80:	b25a      	sxtb	r2, r3
 801bf82:	68fb      	ldr	r3, [r7, #12]
 801bf84:	705a      	strb	r2, [r3, #1]
 801bf86:	e018      	b.n	801bfba <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xaa>
  } else if (input->type == kTfLiteUInt8) {
 801bf88:	68bb      	ldr	r3, [r7, #8]
 801bf8a:	781b      	ldrb	r3, [r3, #0]
 801bf8c:	2b03      	cmp	r3, #3
 801bf8e:	d114      	bne.n	801bfba <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xaa>
    data->six_uint8 = FloatToQuantizedType<uint8_t>(6.0f, input->params.scale,
 801bf90:	68bb      	ldr	r3, [r7, #8]
 801bf92:	edd3 7a03 	vldr	s15, [r3, #12]
                                                    input->params.zero_point);
 801bf96:	68bb      	ldr	r3, [r7, #8]
 801bf98:	691b      	ldr	r3, [r3, #16]
    data->six_uint8 = FloatToQuantizedType<uint8_t>(6.0f, input->params.scale,
 801bf9a:	4618      	mov	r0, r3
 801bf9c:	eef0 0a67 	vmov.f32	s1, s15
 801bfa0:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 801bfa4:	f000 fbe8 	bl	801c778 <_ZN6tflite20FloatToQuantizedTypeIhEET_ffi>
 801bfa8:	4603      	mov	r3, r0
 801bfaa:	461a      	mov	r2, r3
 801bfac:	68fb      	ldr	r3, [r7, #12]
 801bfae:	709a      	strb	r2, [r3, #2]
    data->zero_uint8 = input->params.zero_point;
 801bfb0:	68bb      	ldr	r3, [r7, #8]
 801bfb2:	691b      	ldr	r3, [r3, #16]
 801bfb4:	b2da      	uxtb	r2, r3
 801bfb6:	68fb      	ldr	r3, [r7, #12]
 801bfb8:	70da      	strb	r2, [r3, #3]
  }

  return kTfLiteOk;
 801bfba:	2300      	movs	r3, #0
}
 801bfbc:	4618      	mov	r0, r3
 801bfbe:	3714      	adds	r7, #20
 801bfc0:	46bd      	mov	sp, r7
 801bfc2:	bd90      	pop	{r4, r7, pc}
 801bfc4:	080288b8 	.word	0x080288b8
 801bfc8:	08028818 	.word	0x08028818
 801bfcc:	080288a0 	.word	0x080288a0

0801bfd0 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Relu6Eval(TfLiteContext* context, TfLiteNode* node) {
 801bfd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bfd2:	b0ad      	sub	sp, #180	; 0xb4
 801bfd4:	af02      	add	r7, sp, #8
 801bfd6:	6078      	str	r0, [r7, #4]
 801bfd8:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 801bfda:	683b      	ldr	r3, [r7, #0]
 801bfdc:	691b      	ldr	r3, [r3, #16]
 801bfde:	2b00      	cmp	r3, #0
 801bfe0:	d101      	bne.n	801bfe6 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x16>
 801bfe2:	f007 fa2b 	bl	802343c <abort>
  const Relu6OpData& data = *(static_cast<const Relu6OpData*>(node->user_data));
 801bfe6:	683b      	ldr	r3, [r7, #0]
 801bfe8:	691b      	ldr	r3, [r3, #16]
 801bfea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 801bfee:	2200      	movs	r2, #0
 801bff0:	6839      	ldr	r1, [r7, #0]
 801bff2:	6878      	ldr	r0, [r7, #4]
 801bff4:	f7ff fd9c 	bl	801bb30 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 801bff8:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 801bffc:	2200      	movs	r2, #0
 801bffe:	6839      	ldr	r1, [r7, #0]
 801c000:	6878      	ldr	r0, [r7, #4]
 801c002:	f7ff fda5 	bl	801bb50 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 801c006:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

  switch (input->type) {
 801c00a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801c00e:	7a1b      	ldrb	r3, [r3, #8]
 801c010:	2b09      	cmp	r3, #9
 801c012:	d032      	beq.n	801c07a <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0xaa>
 801c014:	2b09      	cmp	r3, #9
 801c016:	f300 809c 	bgt.w	801c152 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x182>
 801c01a:	2b01      	cmp	r3, #1
 801c01c:	d002      	beq.n	801c024 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x54>
 801c01e:	2b03      	cmp	r3, #3
 801c020:	d062      	beq.n	801c0e8 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x118>
 801c022:	e096      	b.n	801c152 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x182>
    case kTfLiteFloat32: {
      Relu6Float(tflite::micro::GetTensorShape(input),
 801c024:	f107 030c 	add.w	r3, r7, #12
 801c028:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 801c02c:	4618      	mov	r0, r3
 801c02e:	f001 fcf3 	bl	801da18 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 801c032:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 801c036:	f000 fa59 	bl	801c4ec <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 801c03a:	4604      	mov	r4, r0
                 tflite::micro::GetTensorData<float>(input),
                 tflite::micro::GetTensorShape(output),
 801c03c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c040:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 801c044:	4618      	mov	r0, r3
 801c046:	f001 fce7 	bl	801da18 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Float(tflite::micro::GetTensorShape(input),
 801c04a:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 801c04e:	f000 fa5c 	bl	801c50a <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 801c052:	4603      	mov	r3, r0
 801c054:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801c058:	f107 000c 	add.w	r0, r7, #12
 801c05c:	4621      	mov	r1, r4
 801c05e:	f7ff fdcb 	bl	801bbf8 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf>
                 tflite::micro::GetTensorShape(output),
 801c062:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c066:	4618      	mov	r0, r3
 801c068:	f7ff fb6b 	bl	801b742 <_ZN6tflite12RuntimeShapeD1Ev>
      Relu6Float(tflite::micro::GetTensorShape(input),
 801c06c:	f107 030c 	add.w	r3, r7, #12
 801c070:	4618      	mov	r0, r3
 801c072:	f7ff fb66 	bl	801b742 <_ZN6tflite12RuntimeShapeD1Ev>
                 tflite::micro::GetTensorData<float>(output));

      return kTfLiteOk;
 801c076:	2300      	movs	r3, #0
 801c078:	e079      	b.n	801c16e <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x19e>
    }
    case kTfLiteInt8: {
      Relu6Quantized<int8_t>(data.zero_int8, data.six_int8,
 801c07a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801c07e:	f993 4001 	ldrsb.w	r4, [r3, #1]
 801c082:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801c086:	f993 5000 	ldrsb.w	r5, [r3]
                             tflite::micro::GetTensorShape(input),
 801c08a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801c08e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 801c092:	4618      	mov	r0, r3
 801c094:	f001 fcc0 	bl	801da18 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<int8_t>(data.zero_int8, data.six_int8,
 801c098:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 801c09c:	f000 fa46 	bl	801c52c <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 801c0a0:	4606      	mov	r6, r0
                             tflite::micro::GetTensorData<int8_t>(input),
                             tflite::micro::GetTensorShape(output),
 801c0a2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801c0a6:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 801c0aa:	4618      	mov	r0, r3
 801c0ac:	f001 fcb4 	bl	801da18 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<int8_t>(data.zero_int8, data.six_int8,
 801c0b0:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 801c0b4:	f000 fa49 	bl	801c54a <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 801c0b8:	4603      	mov	r3, r0
 801c0ba:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 801c0be:	9301      	str	r3, [sp, #4]
 801c0c0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801c0c4:	9300      	str	r3, [sp, #0]
 801c0c6:	4633      	mov	r3, r6
 801c0c8:	4629      	mov	r1, r5
 801c0ca:	4620      	mov	r0, r4
 801c0cc:	f000 fba3 	bl	801c816 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>
                             tflite::micro::GetTensorShape(output),
 801c0d0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801c0d4:	4618      	mov	r0, r3
 801c0d6:	f7ff fb34 	bl	801b742 <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorShape(input),
 801c0da:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801c0de:	4618      	mov	r0, r3
 801c0e0:	f7ff fb2f 	bl	801b742 <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorData<int8_t>(output));
      return kTfLiteOk;
 801c0e4:	2300      	movs	r3, #0
 801c0e6:	e042      	b.n	801c16e <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x19e>
    }
    case kTfLiteUInt8: {
      Relu6Quantized<uint8_t>(data.zero_uint8, data.six_uint8,
 801c0e8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801c0ec:	78dc      	ldrb	r4, [r3, #3]
 801c0ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801c0f2:	789d      	ldrb	r5, [r3, #2]
                              tflite::micro::GetTensorShape(input),
 801c0f4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801c0f8:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 801c0fc:	4618      	mov	r0, r3
 801c0fe:	f001 fc8b 	bl	801da18 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<uint8_t>(data.zero_uint8, data.six_uint8,
 801c102:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 801c106:	f000 fa7d 	bl	801c604 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 801c10a:	4606      	mov	r6, r0
                              tflite::micro::GetTensorData<uint8_t>(input),
                              tflite::micro::GetTensorShape(output),
 801c10c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801c110:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 801c114:	4618      	mov	r0, r3
 801c116:	f001 fc7f 	bl	801da18 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<uint8_t>(data.zero_uint8, data.six_uint8,
 801c11a:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 801c11e:	f000 fa80 	bl	801c622 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 801c122:	4603      	mov	r3, r0
 801c124:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 801c128:	9301      	str	r3, [sp, #4]
 801c12a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801c12e:	9300      	str	r3, [sp, #0]
 801c130:	4633      	mov	r3, r6
 801c132:	4629      	mov	r1, r5
 801c134:	4620      	mov	r0, r4
 801c136:	f000 fbad 	bl	801c894 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>
                              tflite::micro::GetTensorShape(output),
 801c13a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801c13e:	4618      	mov	r0, r3
 801c140:	f7ff faff 	bl	801b742 <_ZN6tflite12RuntimeShapeD1Ev>
                              tflite::micro::GetTensorShape(input),
 801c144:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801c148:	4618      	mov	r0, r3
 801c14a:	f7ff fafa 	bl	801b742 <_ZN6tflite12RuntimeShapeD1Ev>
                              tflite::micro::GetTensorData<uint8_t>(output));
      return kTfLiteOk;
 801c14e:	2300      	movs	r3, #0
 801c150:	e00d      	b.n	801c16e <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x19e>
    }
    default: {
      TF_LITE_KERNEL_LOG(context, "Only float32 is supported currently, got %s",
 801c152:	687b      	ldr	r3, [r7, #4]
 801c154:	695c      	ldr	r4, [r3, #20]
 801c156:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801c15a:	7a1b      	ldrb	r3, [r3, #8]
 801c15c:	4618      	mov	r0, r3
 801c15e:	f7fe fd95 	bl	801ac8c <TfLiteTypeGetName>
 801c162:	4603      	mov	r3, r0
 801c164:	461a      	mov	r2, r3
 801c166:	4904      	ldr	r1, [pc, #16]	; (801c178 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x1a8>)
 801c168:	6878      	ldr	r0, [r7, #4]
 801c16a:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
 801c16c:	2301      	movs	r3, #1
    }
  }
}
 801c16e:	4618      	mov	r0, r3
 801c170:	37ac      	adds	r7, #172	; 0xac
 801c172:	46bd      	mov	sp, r7
 801c174:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c176:	bf00      	nop
 801c178:	080288e0 	.word	0x080288e0

0801c17c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>:
}

// Correctly-rounded-to-nearest division by a power-of-two.
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
 801c17c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c17e:	b089      	sub	sp, #36	; 0x24
 801c180:	af00      	add	r7, sp, #0
 801c182:	6078      	str	r0, [r7, #4]
 801c184:	6039      	str	r1, [r7, #0]
  assert(exponent >= 0);
 801c186:	6839      	ldr	r1, [r7, #0]
 801c188:	2900      	cmp	r1, #0
 801c18a:	da06      	bge.n	801c19a <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x1e>
 801c18c:	4b31      	ldr	r3, [pc, #196]	; (801c254 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xd8>)
 801c18e:	4a32      	ldr	r2, [pc, #200]	; (801c258 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 801c190:	f44f 71b3 	mov.w	r1, #358	; 0x166
 801c194:	4831      	ldr	r0, [pc, #196]	; (801c25c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 801c196:	f007 f959 	bl	802344c <__assert_func>
  assert(exponent <= 31);
 801c19a:	6839      	ldr	r1, [r7, #0]
 801c19c:	291f      	cmp	r1, #31
 801c19e:	dd06      	ble.n	801c1ae <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x32>
 801c1a0:	4b2f      	ldr	r3, [pc, #188]	; (801c260 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe4>)
 801c1a2:	4a2d      	ldr	r2, [pc, #180]	; (801c258 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 801c1a4:	f240 1167 	movw	r1, #359	; 0x167
 801c1a8:	482c      	ldr	r0, [pc, #176]	; (801c25c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 801c1aa:	f007 f94f 	bl	802344c <__assert_func>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 801c1ae:	f04f 0001 	mov.w	r0, #1
 801c1b2:	f04f 0100 	mov.w	r1, #0
 801c1b6:	683c      	ldr	r4, [r7, #0]
 801c1b8:	f1a4 0620 	sub.w	r6, r4, #32
 801c1bc:	f1c4 0520 	rsb	r5, r4, #32
 801c1c0:	fa01 f304 	lsl.w	r3, r1, r4
 801c1c4:	fa00 f606 	lsl.w	r6, r0, r6
 801c1c8:	4333      	orrs	r3, r6
 801c1ca:	fa20 f505 	lsr.w	r5, r0, r5
 801c1ce:	432b      	orrs	r3, r5
 801c1d0:	fa00 f204 	lsl.w	r2, r0, r4
 801c1d4:	4613      	mov	r3, r2
 801c1d6:	3b01      	subs	r3, #1
 801c1d8:	4618      	mov	r0, r3
 801c1da:	f000 fb93 	bl	801c904 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801c1de:	61f8      	str	r0, [r7, #28]
  const IntegerType zero = Dup<IntegerType>(0);
 801c1e0:	2000      	movs	r0, #0
 801c1e2:	f000 fb8f 	bl	801c904 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801c1e6:	61b8      	str	r0, [r7, #24]
  const IntegerType one = Dup<IntegerType>(1);
 801c1e8:	2001      	movs	r0, #1
 801c1ea:	f000 fb8b 	bl	801c904 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801c1ee:	6178      	str	r0, [r7, #20]
  const IntegerType remainder = BitAnd(x, mask);
 801c1f0:	69f9      	ldr	r1, [r7, #28]
 801c1f2:	6878      	ldr	r0, [r7, #4]
 801c1f4:	f000 fb91 	bl	801c91a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801c1f8:	6138      	str	r0, [r7, #16]
  const IntegerType threshold =
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
 801c1fa:	2101      	movs	r1, #1
 801c1fc:	69f8      	ldr	r0, [r7, #28]
 801c1fe:	f000 fb9a 	bl	801c936 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 801c202:	4604      	mov	r4, r0
 801c204:	69b9      	ldr	r1, [r7, #24]
 801c206:	6878      	ldr	r0, [r7, #4]
 801c208:	f000 fba4 	bl	801c954 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 801c20c:	4603      	mov	r3, r0
 801c20e:	6979      	ldr	r1, [r7, #20]
 801c210:	4618      	mov	r0, r3
 801c212:	f000 fb82 	bl	801c91a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801c216:	4603      	mov	r3, r0
 801c218:	4619      	mov	r1, r3
 801c21a:	4620      	mov	r0, r4
 801c21c:	f000 fbae 	bl	801c97c <_ZN8gemmlowp3AddIlEET_S1_S1_>
 801c220:	60f8      	str	r0, [r7, #12]
  return Add(ShiftRight(x, exponent),
 801c222:	6839      	ldr	r1, [r7, #0]
 801c224:	6878      	ldr	r0, [r7, #4]
 801c226:	f000 fb86 	bl	801c936 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 801c22a:	4604      	mov	r4, r0
 801c22c:	68f9      	ldr	r1, [r7, #12]
 801c22e:	6938      	ldr	r0, [r7, #16]
 801c230:	f000 fbb2 	bl	801c998 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 801c234:	4603      	mov	r3, r0
 801c236:	6979      	ldr	r1, [r7, #20]
 801c238:	4618      	mov	r0, r3
 801c23a:	f000 fb6e 	bl	801c91a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801c23e:	4603      	mov	r3, r0
 801c240:	4619      	mov	r1, r3
 801c242:	4620      	mov	r0, r4
 801c244:	f000 fb9a 	bl	801c97c <_ZN8gemmlowp3AddIlEET_S1_S1_>
 801c248:	4603      	mov	r3, r0
             BitAnd(MaskIfGreaterThan(remainder, threshold), one));
}
 801c24a:	4618      	mov	r0, r3
 801c24c:	3724      	adds	r7, #36	; 0x24
 801c24e:	46bd      	mov	sp, r7
 801c250:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c252:	bf00      	nop
 801c254:	0802894c 	.word	0x0802894c
 801c258:	0802895c 	.word	0x0802895c
 801c25c:	080289b8 	.word	0x080289b8
 801c260:	08028a40 	.word	0x08028a40

0801c264 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>:
inline void CalculateReluOpData(const TfLiteTensor* input, TfLiteTensor* output,
 801c264:	b590      	push	{r4, r7, lr}
 801c266:	b099      	sub	sp, #100	; 0x64
 801c268:	af00      	add	r7, sp, #0
 801c26a:	60f8      	str	r0, [r7, #12]
 801c26c:	60b9      	str	r1, [r7, #8]
 801c26e:	607a      	str	r2, [r7, #4]
  float act_min = 0.0;
 801c270:	f04f 0300 	mov.w	r3, #0
 801c274:	65fb      	str	r3, [r7, #92]	; 0x5c
  float act_max = std::numeric_limits<float>::infinity();
 801c276:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 801c27a:	65bb      	str	r3, [r7, #88]	; 0x58
      static_cast<double>(input->params.scale / output->params.scale);
 801c27c:	68fb      	ldr	r3, [r7, #12]
 801c27e:	ed93 7a03 	vldr	s14, [r3, #12]
 801c282:	68bb      	ldr	r3, [r7, #8]
 801c284:	edd3 7a03 	vldr	s15, [r3, #12]
 801c288:	eec7 6a27 	vdiv.f32	s13, s14, s15
  double real_multiplier =
 801c28c:	ee16 0a90 	vmov	r0, s13
 801c290:	f7e4 f964 	bl	800055c <__aeabi_f2d>
 801c294:	4602      	mov	r2, r0
 801c296:	460b      	mov	r3, r1
 801c298:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  const RuntimeShape input_shape = GetTensorShape(input);
 801c29c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801c2a0:	68f9      	ldr	r1, [r7, #12]
 801c2a2:	4618      	mov	r0, r3
 801c2a4:	f7ff fac7 	bl	801b836 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const RuntimeShape output_shape = GetTensorShape(output);
 801c2a8:	f107 0310 	add.w	r3, r7, #16
 801c2ac:	68b9      	ldr	r1, [r7, #8]
 801c2ae:	4618      	mov	r0, r3
 801c2b0:	f7ff fac1 	bl	801b836 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  QuantizeMultiplier(real_multiplier, &data->params.output_multiplier,
 801c2b4:	687b      	ldr	r3, [r7, #4]
 801c2b6:	f103 0214 	add.w	r2, r3, #20
 801c2ba:	687b      	ldr	r3, [r7, #4]
 801c2bc:	3318      	adds	r3, #24
 801c2be:	4619      	mov	r1, r3
 801c2c0:	4610      	mov	r0, r2
 801c2c2:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 801c2c6:	f7fe fd67 	bl	801ad98 <_ZN6tflite18QuantizeMultiplierEdPlPi>
      static_cast<int32_t>(std::numeric_limits<T>::min()),
 801c2ca:	f7fe ff1d 	bl	801b108 <_ZNSt14numeric_limitsIaE3minEv>
 801c2ce:	4603      	mov	r3, r0
 801c2d0:	643b      	str	r3, [r7, #64]	; 0x40
      output->params.zero_point +
 801c2d2:	68bb      	ldr	r3, [r7, #8]
 801c2d4:	691c      	ldr	r4, [r3, #16]
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 801c2d6:	68bb      	ldr	r3, [r7, #8]
 801c2d8:	edd3 7a03 	vldr	s15, [r3, #12]
 801c2dc:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 801c2e0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801c2e4:	eeb0 0a66 	vmov.f32	s0, s13
 801c2e8:	f004 fd74 	bl	8020dd4 <roundf>
 801c2ec:	eef0 7a40 	vmov.f32	s15, s0
 801c2f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c2f4:	ee17 3a90 	vmov	r3, s15
      output->params.zero_point +
 801c2f8:	4423      	add	r3, r4
 801c2fa:	647b      	str	r3, [r7, #68]	; 0x44
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 801c2fc:	f107 0244 	add.w	r2, r7, #68	; 0x44
 801c300:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801c304:	4611      	mov	r1, r2
 801c306:	4618      	mov	r0, r3
 801c308:	f7ff f9e6 	bl	801b6d8 <_ZSt3maxIlERKT_S2_S2_>
 801c30c:	4603      	mov	r3, r0
  data->params.quantized_activation_min = std::max(
 801c30e:	681a      	ldr	r2, [r3, #0]
 801c310:	687b      	ldr	r3, [r7, #4]
 801c312:	605a      	str	r2, [r3, #4]
      act_max == std::numeric_limits<float>::infinity()
 801c314:	f7ff fab6 	bl	801b884 <_ZNSt14numeric_limitsIfE8infinityEv>
 801c318:	eeb0 7a40 	vmov.f32	s14, s0
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 801c31c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 801c320:	eef4 7a47 	vcmp.f32	s15, s14
 801c324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c328:	d103      	bne.n	801c332 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0xce>
 801c32a:	f7fe fef6 	bl	801b11a <_ZNSt14numeric_limitsIaE3maxEv>
 801c32e:	4603      	mov	r3, r0
 801c330:	e022      	b.n	801c378 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0x114>
          : std::min(static_cast<int32_t>(std::numeric_limits<T>::max()),
 801c332:	f7fe fef2 	bl	801b11a <_ZNSt14numeric_limitsIaE3maxEv>
 801c336:	4603      	mov	r3, r0
 801c338:	64bb      	str	r3, [r7, #72]	; 0x48
                     output->params.zero_point +
 801c33a:	68bb      	ldr	r3, [r7, #8]
 801c33c:	691c      	ldr	r4, [r3, #16]
                             roundf(act_max / output->params.scale)));
 801c33e:	68bb      	ldr	r3, [r7, #8]
 801c340:	edd3 7a03 	vldr	s15, [r3, #12]
 801c344:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 801c348:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801c34c:	eeb0 0a66 	vmov.f32	s0, s13
 801c350:	f004 fd40 	bl	8020dd4 <roundf>
 801c354:	eef0 7a40 	vmov.f32	s15, s0
                         static_cast<int32_t>(
 801c358:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c35c:	ee17 3a90 	vmov	r3, s15
                     output->params.zero_point +
 801c360:	4423      	add	r3, r4
 801c362:	64fb      	str	r3, [r7, #76]	; 0x4c
                             roundf(act_max / output->params.scale)));
 801c364:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 801c368:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801c36c:	4611      	mov	r1, r2
 801c36e:	4618      	mov	r0, r3
 801c370:	f7ff f99e 	bl	801b6b0 <_ZSt3minIlERKT_S2_S2_>
 801c374:	4603      	mov	r3, r0
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 801c376:	681b      	ldr	r3, [r3, #0]
  data->params.quantized_activation_max =
 801c378:	687a      	ldr	r2, [r7, #4]
 801c37a:	6093      	str	r3, [r2, #8]
  data->params.input_offset = input->params.zero_point;
 801c37c:	68fb      	ldr	r3, [r7, #12]
 801c37e:	691a      	ldr	r2, [r3, #16]
 801c380:	687b      	ldr	r3, [r7, #4]
 801c382:	60da      	str	r2, [r3, #12]
  data->params.output_offset = output->params.zero_point;
 801c384:	68bb      	ldr	r3, [r7, #8]
 801c386:	691a      	ldr	r2, [r3, #16]
 801c388:	687b      	ldr	r3, [r7, #4]
 801c38a:	611a      	str	r2, [r3, #16]
  const RuntimeShape output_shape = GetTensorShape(output);
 801c38c:	f107 0310 	add.w	r3, r7, #16
 801c390:	4618      	mov	r0, r3
 801c392:	f7ff f9d6 	bl	801b742 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape = GetTensorShape(input);
 801c396:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801c39a:	4618      	mov	r0, r3
 801c39c:	f7ff f9d1 	bl	801b742 <_ZN6tflite12RuntimeShapeD1Ev>
}
 801c3a0:	bf00      	nop
 801c3a2:	3764      	adds	r7, #100	; 0x64
 801c3a4:	46bd      	mov	sp, r7
 801c3a6:	bd90      	pop	{r4, r7, pc}

0801c3a8 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>:
inline void CalculateReluOpData(const TfLiteTensor* input, TfLiteTensor* output,
 801c3a8:	b590      	push	{r4, r7, lr}
 801c3aa:	b099      	sub	sp, #100	; 0x64
 801c3ac:	af00      	add	r7, sp, #0
 801c3ae:	60f8      	str	r0, [r7, #12]
 801c3b0:	60b9      	str	r1, [r7, #8]
 801c3b2:	607a      	str	r2, [r7, #4]
  float act_min = 0.0;
 801c3b4:	f04f 0300 	mov.w	r3, #0
 801c3b8:	65fb      	str	r3, [r7, #92]	; 0x5c
  float act_max = std::numeric_limits<float>::infinity();
 801c3ba:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 801c3be:	65bb      	str	r3, [r7, #88]	; 0x58
      static_cast<double>(input->params.scale / output->params.scale);
 801c3c0:	68fb      	ldr	r3, [r7, #12]
 801c3c2:	ed93 7a03 	vldr	s14, [r3, #12]
 801c3c6:	68bb      	ldr	r3, [r7, #8]
 801c3c8:	edd3 7a03 	vldr	s15, [r3, #12]
 801c3cc:	eec7 6a27 	vdiv.f32	s13, s14, s15
  double real_multiplier =
 801c3d0:	ee16 0a90 	vmov	r0, s13
 801c3d4:	f7e4 f8c2 	bl	800055c <__aeabi_f2d>
 801c3d8:	4602      	mov	r2, r0
 801c3da:	460b      	mov	r3, r1
 801c3dc:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  const RuntimeShape input_shape = GetTensorShape(input);
 801c3e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801c3e4:	68f9      	ldr	r1, [r7, #12]
 801c3e6:	4618      	mov	r0, r3
 801c3e8:	f7ff fa25 	bl	801b836 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const RuntimeShape output_shape = GetTensorShape(output);
 801c3ec:	f107 0310 	add.w	r3, r7, #16
 801c3f0:	68b9      	ldr	r1, [r7, #8]
 801c3f2:	4618      	mov	r0, r3
 801c3f4:	f7ff fa1f 	bl	801b836 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  QuantizeMultiplier(real_multiplier, &data->params.output_multiplier,
 801c3f8:	687b      	ldr	r3, [r7, #4]
 801c3fa:	f103 0214 	add.w	r2, r3, #20
 801c3fe:	687b      	ldr	r3, [r7, #4]
 801c400:	3318      	adds	r3, #24
 801c402:	4619      	mov	r1, r3
 801c404:	4610      	mov	r0, r2
 801c406:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 801c40a:	f7fe fcc5 	bl	801ad98 <_ZN6tflite18QuantizeMultiplierEdPlPi>
      static_cast<int32_t>(std::numeric_limits<T>::min()),
 801c40e:	f7fe fe8c 	bl	801b12a <_ZNSt14numeric_limitsIhE3minEv>
 801c412:	4603      	mov	r3, r0
 801c414:	643b      	str	r3, [r7, #64]	; 0x40
      output->params.zero_point +
 801c416:	68bb      	ldr	r3, [r7, #8]
 801c418:	691c      	ldr	r4, [r3, #16]
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 801c41a:	68bb      	ldr	r3, [r7, #8]
 801c41c:	edd3 7a03 	vldr	s15, [r3, #12]
 801c420:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 801c424:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801c428:	eeb0 0a66 	vmov.f32	s0, s13
 801c42c:	f004 fcd2 	bl	8020dd4 <roundf>
 801c430:	eef0 7a40 	vmov.f32	s15, s0
 801c434:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c438:	ee17 3a90 	vmov	r3, s15
      output->params.zero_point +
 801c43c:	4423      	add	r3, r4
 801c43e:	647b      	str	r3, [r7, #68]	; 0x44
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 801c440:	f107 0244 	add.w	r2, r7, #68	; 0x44
 801c444:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801c448:	4611      	mov	r1, r2
 801c44a:	4618      	mov	r0, r3
 801c44c:	f7ff f944 	bl	801b6d8 <_ZSt3maxIlERKT_S2_S2_>
 801c450:	4603      	mov	r3, r0
  data->params.quantized_activation_min = std::max(
 801c452:	681a      	ldr	r2, [r3, #0]
 801c454:	687b      	ldr	r3, [r7, #4]
 801c456:	605a      	str	r2, [r3, #4]
      act_max == std::numeric_limits<float>::infinity()
 801c458:	f7ff fa14 	bl	801b884 <_ZNSt14numeric_limitsIfE8infinityEv>
 801c45c:	eeb0 7a40 	vmov.f32	s14, s0
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 801c460:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 801c464:	eef4 7a47 	vcmp.f32	s15, s14
 801c468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c46c:	d103      	bne.n	801c476 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0xce>
 801c46e:	f7fe fe64 	bl	801b13a <_ZNSt14numeric_limitsIhE3maxEv>
 801c472:	4603      	mov	r3, r0
 801c474:	e022      	b.n	801c4bc <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0x114>
          : std::min(static_cast<int32_t>(std::numeric_limits<T>::max()),
 801c476:	f7fe fe60 	bl	801b13a <_ZNSt14numeric_limitsIhE3maxEv>
 801c47a:	4603      	mov	r3, r0
 801c47c:	64bb      	str	r3, [r7, #72]	; 0x48
                     output->params.zero_point +
 801c47e:	68bb      	ldr	r3, [r7, #8]
 801c480:	691c      	ldr	r4, [r3, #16]
                             roundf(act_max / output->params.scale)));
 801c482:	68bb      	ldr	r3, [r7, #8]
 801c484:	edd3 7a03 	vldr	s15, [r3, #12]
 801c488:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 801c48c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801c490:	eeb0 0a66 	vmov.f32	s0, s13
 801c494:	f004 fc9e 	bl	8020dd4 <roundf>
 801c498:	eef0 7a40 	vmov.f32	s15, s0
                         static_cast<int32_t>(
 801c49c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c4a0:	ee17 3a90 	vmov	r3, s15
                     output->params.zero_point +
 801c4a4:	4423      	add	r3, r4
 801c4a6:	64fb      	str	r3, [r7, #76]	; 0x4c
                             roundf(act_max / output->params.scale)));
 801c4a8:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 801c4ac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801c4b0:	4611      	mov	r1, r2
 801c4b2:	4618      	mov	r0, r3
 801c4b4:	f7ff f8fc 	bl	801b6b0 <_ZSt3minIlERKT_S2_S2_>
 801c4b8:	4603      	mov	r3, r0
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 801c4ba:	681b      	ldr	r3, [r3, #0]
  data->params.quantized_activation_max =
 801c4bc:	687a      	ldr	r2, [r7, #4]
 801c4be:	6093      	str	r3, [r2, #8]
  data->params.input_offset = input->params.zero_point;
 801c4c0:	68fb      	ldr	r3, [r7, #12]
 801c4c2:	691a      	ldr	r2, [r3, #16]
 801c4c4:	687b      	ldr	r3, [r7, #4]
 801c4c6:	60da      	str	r2, [r3, #12]
  data->params.output_offset = output->params.zero_point;
 801c4c8:	68bb      	ldr	r3, [r7, #8]
 801c4ca:	691a      	ldr	r2, [r3, #16]
 801c4cc:	687b      	ldr	r3, [r7, #4]
 801c4ce:	611a      	str	r2, [r3, #16]
  const RuntimeShape output_shape = GetTensorShape(output);
 801c4d0:	f107 0310 	add.w	r3, r7, #16
 801c4d4:	4618      	mov	r0, r3
 801c4d6:	f7ff f934 	bl	801b742 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape = GetTensorShape(input);
 801c4da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801c4de:	4618      	mov	r0, r3
 801c4e0:	f7ff f92f 	bl	801b742 <_ZN6tflite12RuntimeShapeD1Ev>
}
 801c4e4:	bf00      	nop
 801c4e6:	3764      	adds	r7, #100	; 0x64
 801c4e8:	46bd      	mov	sp, r7
 801c4ea:	bd90      	pop	{r4, r7, pc}

0801c4ec <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>:
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
}

// Returns const data for a TfLiteEvalTensor struct.
template <typename T>
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 801c4ec:	b580      	push	{r7, lr}
 801c4ee:	b082      	sub	sp, #8
 801c4f0:	af00      	add	r7, sp, #0
 801c4f2:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 801c4f4:	687b      	ldr	r3, [r7, #4]
 801c4f6:	2b00      	cmp	r3, #0
 801c4f8:	d101      	bne.n	801c4fe <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor+0x12>
 801c4fa:	f006 ff9f 	bl	802343c <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 801c4fe:	687b      	ldr	r3, [r7, #4]
 801c500:	681b      	ldr	r3, [r3, #0]
}
 801c502:	4618      	mov	r0, r3
 801c504:	3708      	adds	r7, #8
 801c506:	46bd      	mov	sp, r7
 801c508:	bd80      	pop	{r7, pc}

0801c50a <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 801c50a:	b480      	push	{r7}
 801c50c:	b083      	sub	sp, #12
 801c50e:	af00      	add	r7, sp, #0
 801c510:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 801c512:	687b      	ldr	r3, [r7, #4]
 801c514:	2b00      	cmp	r3, #0
 801c516:	d002      	beq.n	801c51e <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x14>
 801c518:	687b      	ldr	r3, [r7, #4]
 801c51a:	681b      	ldr	r3, [r3, #0]
 801c51c:	e000      	b.n	801c520 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x16>
 801c51e:	2300      	movs	r3, #0
}
 801c520:	4618      	mov	r0, r3
 801c522:	370c      	adds	r7, #12
 801c524:	46bd      	mov	sp, r7
 801c526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c52a:	4770      	bx	lr

0801c52c <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 801c52c:	b580      	push	{r7, lr}
 801c52e:	b082      	sub	sp, #8
 801c530:	af00      	add	r7, sp, #0
 801c532:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 801c534:	687b      	ldr	r3, [r7, #4]
 801c536:	2b00      	cmp	r3, #0
 801c538:	d101      	bne.n	801c53e <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor+0x12>
 801c53a:	f006 ff7f 	bl	802343c <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 801c53e:	687b      	ldr	r3, [r7, #4]
 801c540:	681b      	ldr	r3, [r3, #0]
}
 801c542:	4618      	mov	r0, r3
 801c544:	3708      	adds	r7, #8
 801c546:	46bd      	mov	sp, r7
 801c548:	bd80      	pop	{r7, pc}

0801c54a <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 801c54a:	b480      	push	{r7}
 801c54c:	b083      	sub	sp, #12
 801c54e:	af00      	add	r7, sp, #0
 801c550:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 801c552:	687b      	ldr	r3, [r7, #4]
 801c554:	2b00      	cmp	r3, #0
 801c556:	d002      	beq.n	801c55e <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x14>
 801c558:	687b      	ldr	r3, [r7, #4]
 801c55a:	681b      	ldr	r3, [r3, #0]
 801c55c:	e000      	b.n	801c560 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x16>
 801c55e:	2300      	movs	r3, #0
}
 801c560:	4618      	mov	r0, r3
 801c562:	370c      	adds	r7, #12
 801c564:	46bd      	mov	sp, r7
 801c566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c56a:	4770      	bx	lr

0801c56c <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>:
inline void ReluQuantized(const ReluOpData& data,
 801c56c:	b590      	push	{r4, r7, lr}
 801c56e:	b089      	sub	sp, #36	; 0x24
 801c570:	af00      	add	r7, sp, #0
 801c572:	60f8      	str	r0, [r7, #12]
 801c574:	60b9      	str	r1, [r7, #8]
 801c576:	607a      	str	r2, [r7, #4]
 801c578:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 801c57a:	6879      	ldr	r1, [r7, #4]
 801c57c:	68b8      	ldr	r0, [r7, #8]
 801c57e:	f7ff fa5e 	bl	801ba3e <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 801c582:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 801c584:	2300      	movs	r3, #0
 801c586:	61fb      	str	r3, [r7, #28]
 801c588:	69fa      	ldr	r2, [r7, #28]
 801c58a:	69bb      	ldr	r3, [r7, #24]
 801c58c:	429a      	cmp	r2, r3
 801c58e:	da35      	bge.n	801c5fc <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x90>
    const int32_t val = static_cast<int32_t>(input_data[i]);
 801c590:	69fb      	ldr	r3, [r7, #28]
 801c592:	683a      	ldr	r2, [r7, #0]
 801c594:	4413      	add	r3, r2
 801c596:	f993 3000 	ldrsb.w	r3, [r3]
 801c59a:	617b      	str	r3, [r7, #20]
        data.params.output_offset +
 801c59c:	68fb      	ldr	r3, [r7, #12]
 801c59e:	691c      	ldr	r4, [r3, #16]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 801c5a0:	68fb      	ldr	r3, [r7, #12]
 801c5a2:	68db      	ldr	r3, [r3, #12]
 801c5a4:	697a      	ldr	r2, [r7, #20]
 801c5a6:	1ad0      	subs	r0, r2, r3
                                      data.params.output_multiplier,
 801c5a8:	68fb      	ldr	r3, [r7, #12]
 801c5aa:	6959      	ldr	r1, [r3, #20]
                                      data.params.output_shift);
 801c5ac:	68fb      	ldr	r3, [r7, #12]
 801c5ae:	699b      	ldr	r3, [r3, #24]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 801c5b0:	461a      	mov	r2, r3
 801c5b2:	f7ff fa79 	bl	801baa8 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 801c5b6:	4603      	mov	r3, r0
        data.params.output_offset +
 801c5b8:	4423      	add	r3, r4
    int32_t clamped =
 801c5ba:	613b      	str	r3, [r7, #16]
    clamped = std::max(data.params.quantized_activation_min, clamped);
 801c5bc:	68fb      	ldr	r3, [r7, #12]
 801c5be:	3304      	adds	r3, #4
 801c5c0:	f107 0210 	add.w	r2, r7, #16
 801c5c4:	4611      	mov	r1, r2
 801c5c6:	4618      	mov	r0, r3
 801c5c8:	f7ff f886 	bl	801b6d8 <_ZSt3maxIlERKT_S2_S2_>
 801c5cc:	4603      	mov	r3, r0
 801c5ce:	681b      	ldr	r3, [r3, #0]
 801c5d0:	613b      	str	r3, [r7, #16]
    clamped = std::min(data.params.quantized_activation_max, clamped);
 801c5d2:	68fb      	ldr	r3, [r7, #12]
 801c5d4:	3308      	adds	r3, #8
 801c5d6:	f107 0210 	add.w	r2, r7, #16
 801c5da:	4611      	mov	r1, r2
 801c5dc:	4618      	mov	r0, r3
 801c5de:	f7ff f867 	bl	801b6b0 <_ZSt3minIlERKT_S2_S2_>
 801c5e2:	4603      	mov	r3, r0
 801c5e4:	681b      	ldr	r3, [r3, #0]
 801c5e6:	613b      	str	r3, [r7, #16]
    output_data[i] = static_cast<T>(clamped);
 801c5e8:	6939      	ldr	r1, [r7, #16]
 801c5ea:	69fb      	ldr	r3, [r7, #28]
 801c5ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c5ee:	4413      	add	r3, r2
 801c5f0:	b24a      	sxtb	r2, r1
 801c5f2:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 801c5f4:	69fb      	ldr	r3, [r7, #28]
 801c5f6:	3301      	adds	r3, #1
 801c5f8:	61fb      	str	r3, [r7, #28]
 801c5fa:	e7c5      	b.n	801c588 <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x1c>
}
 801c5fc:	bf00      	nop
 801c5fe:	3724      	adds	r7, #36	; 0x24
 801c600:	46bd      	mov	sp, r7
 801c602:	bd90      	pop	{r4, r7, pc}

0801c604 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 801c604:	b580      	push	{r7, lr}
 801c606:	b082      	sub	sp, #8
 801c608:	af00      	add	r7, sp, #0
 801c60a:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 801c60c:	687b      	ldr	r3, [r7, #4]
 801c60e:	2b00      	cmp	r3, #0
 801c610:	d101      	bne.n	801c616 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor+0x12>
 801c612:	f006 ff13 	bl	802343c <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 801c616:	687b      	ldr	r3, [r7, #4]
 801c618:	681b      	ldr	r3, [r3, #0]
}
 801c61a:	4618      	mov	r0, r3
 801c61c:	3708      	adds	r7, #8
 801c61e:	46bd      	mov	sp, r7
 801c620:	bd80      	pop	{r7, pc}

0801c622 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 801c622:	b480      	push	{r7}
 801c624:	b083      	sub	sp, #12
 801c626:	af00      	add	r7, sp, #0
 801c628:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 801c62a:	687b      	ldr	r3, [r7, #4]
 801c62c:	2b00      	cmp	r3, #0
 801c62e:	d002      	beq.n	801c636 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor+0x14>
 801c630:	687b      	ldr	r3, [r7, #4]
 801c632:	681b      	ldr	r3, [r3, #0]
 801c634:	e000      	b.n	801c638 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor+0x16>
 801c636:	2300      	movs	r3, #0
}
 801c638:	4618      	mov	r0, r3
 801c63a:	370c      	adds	r7, #12
 801c63c:	46bd      	mov	sp, r7
 801c63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c642:	4770      	bx	lr

0801c644 <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>:
inline void ReluQuantized(const ReluOpData& data,
 801c644:	b590      	push	{r4, r7, lr}
 801c646:	b089      	sub	sp, #36	; 0x24
 801c648:	af00      	add	r7, sp, #0
 801c64a:	60f8      	str	r0, [r7, #12]
 801c64c:	60b9      	str	r1, [r7, #8]
 801c64e:	607a      	str	r2, [r7, #4]
 801c650:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 801c652:	6879      	ldr	r1, [r7, #4]
 801c654:	68b8      	ldr	r0, [r7, #8]
 801c656:	f7ff f9f2 	bl	801ba3e <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 801c65a:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 801c65c:	2300      	movs	r3, #0
 801c65e:	61fb      	str	r3, [r7, #28]
 801c660:	69fa      	ldr	r2, [r7, #28]
 801c662:	69bb      	ldr	r3, [r7, #24]
 801c664:	429a      	cmp	r2, r3
 801c666:	da34      	bge.n	801c6d2 <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x8e>
    const int32_t val = static_cast<int32_t>(input_data[i]);
 801c668:	69fb      	ldr	r3, [r7, #28]
 801c66a:	683a      	ldr	r2, [r7, #0]
 801c66c:	4413      	add	r3, r2
 801c66e:	781b      	ldrb	r3, [r3, #0]
 801c670:	617b      	str	r3, [r7, #20]
        data.params.output_offset +
 801c672:	68fb      	ldr	r3, [r7, #12]
 801c674:	691c      	ldr	r4, [r3, #16]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 801c676:	68fb      	ldr	r3, [r7, #12]
 801c678:	68db      	ldr	r3, [r3, #12]
 801c67a:	697a      	ldr	r2, [r7, #20]
 801c67c:	1ad0      	subs	r0, r2, r3
                                      data.params.output_multiplier,
 801c67e:	68fb      	ldr	r3, [r7, #12]
 801c680:	6959      	ldr	r1, [r3, #20]
                                      data.params.output_shift);
 801c682:	68fb      	ldr	r3, [r7, #12]
 801c684:	699b      	ldr	r3, [r3, #24]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 801c686:	461a      	mov	r2, r3
 801c688:	f7ff fa0e 	bl	801baa8 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 801c68c:	4603      	mov	r3, r0
        data.params.output_offset +
 801c68e:	4423      	add	r3, r4
    int32_t clamped =
 801c690:	613b      	str	r3, [r7, #16]
    clamped = std::max(data.params.quantized_activation_min, clamped);
 801c692:	68fb      	ldr	r3, [r7, #12]
 801c694:	3304      	adds	r3, #4
 801c696:	f107 0210 	add.w	r2, r7, #16
 801c69a:	4611      	mov	r1, r2
 801c69c:	4618      	mov	r0, r3
 801c69e:	f7ff f81b 	bl	801b6d8 <_ZSt3maxIlERKT_S2_S2_>
 801c6a2:	4603      	mov	r3, r0
 801c6a4:	681b      	ldr	r3, [r3, #0]
 801c6a6:	613b      	str	r3, [r7, #16]
    clamped = std::min(data.params.quantized_activation_max, clamped);
 801c6a8:	68fb      	ldr	r3, [r7, #12]
 801c6aa:	3308      	adds	r3, #8
 801c6ac:	f107 0210 	add.w	r2, r7, #16
 801c6b0:	4611      	mov	r1, r2
 801c6b2:	4618      	mov	r0, r3
 801c6b4:	f7fe fffc 	bl	801b6b0 <_ZSt3minIlERKT_S2_S2_>
 801c6b8:	4603      	mov	r3, r0
 801c6ba:	681b      	ldr	r3, [r3, #0]
 801c6bc:	613b      	str	r3, [r7, #16]
    output_data[i] = static_cast<T>(clamped);
 801c6be:	6939      	ldr	r1, [r7, #16]
 801c6c0:	69fb      	ldr	r3, [r7, #28]
 801c6c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c6c4:	4413      	add	r3, r2
 801c6c6:	b2ca      	uxtb	r2, r1
 801c6c8:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 801c6ca:	69fb      	ldr	r3, [r7, #28]
 801c6cc:	3301      	adds	r3, #1
 801c6ce:	61fb      	str	r3, [r7, #28]
 801c6d0:	e7c6      	b.n	801c660 <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x1c>
}
 801c6d2:	bf00      	nop
 801c6d4:	3724      	adds	r7, #36	; 0x24
 801c6d6:	46bd      	mov	sp, r7
 801c6d8:	bd90      	pop	{r4, r7, pc}

0801c6da <_ZN6tflite20FloatToQuantizedTypeIaEET_ffi>:

// Converts a float value into a quantized value.  Note that large values (close
// to max int and min int) may see significant error due to a lack of floating
// point granularity for large values.
template <typename T>
T FloatToQuantizedType(const float value, const float scale, int zero_point) {
 801c6da:	b5b0      	push	{r4, r5, r7, lr}
 801c6dc:	b088      	sub	sp, #32
 801c6de:	af00      	add	r7, sp, #0
 801c6e0:	ed87 0a03 	vstr	s0, [r7, #12]
 801c6e4:	edc7 0a02 	vstr	s1, [r7, #8]
 801c6e8:	6078      	str	r0, [r7, #4]
  int32_t result = round(value / scale) + zero_point;
 801c6ea:	ed97 7a03 	vldr	s14, [r7, #12]
 801c6ee:	edd7 7a02 	vldr	s15, [r7, #8]
 801c6f2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801c6f6:	ee16 0a90 	vmov	r0, s13
 801c6fa:	f7e3 ff2f 	bl	800055c <__aeabi_f2d>
 801c6fe:	4602      	mov	r2, r0
 801c700:	460b      	mov	r3, r1
 801c702:	ec43 2b10 	vmov	d0, r2, r3
 801c706:	f004 fa6b 	bl	8020be0 <round>
 801c70a:	ec55 4b10 	vmov	r4, r5, d0
 801c70e:	6878      	ldr	r0, [r7, #4]
 801c710:	f7e3 ff12 	bl	8000538 <__aeabi_i2d>
 801c714:	4602      	mov	r2, r0
 801c716:	460b      	mov	r3, r1
 801c718:	4620      	mov	r0, r4
 801c71a:	4629      	mov	r1, r5
 801c71c:	f7e3 fdc0 	bl	80002a0 <__adddf3>
 801c720:	4602      	mov	r2, r0
 801c722:	460b      	mov	r3, r1
 801c724:	4610      	mov	r0, r2
 801c726:	4619      	mov	r1, r3
 801c728:	f7e4 fa20 	bl	8000b6c <__aeabi_d2iz>
 801c72c:	4603      	mov	r3, r0
 801c72e:	617b      	str	r3, [r7, #20]
  result =
      std::max(static_cast<int32_t>(std::numeric_limits<T>::min()), result);
 801c730:	f7fe fcea 	bl	801b108 <_ZNSt14numeric_limitsIaE3minEv>
 801c734:	4603      	mov	r3, r0
 801c736:	61bb      	str	r3, [r7, #24]
 801c738:	f107 0214 	add.w	r2, r7, #20
 801c73c:	f107 0318 	add.w	r3, r7, #24
 801c740:	4611      	mov	r1, r2
 801c742:	4618      	mov	r0, r3
 801c744:	f7fe ffc8 	bl	801b6d8 <_ZSt3maxIlERKT_S2_S2_>
 801c748:	4603      	mov	r3, r0
  result =
 801c74a:	681b      	ldr	r3, [r3, #0]
 801c74c:	617b      	str	r3, [r7, #20]
  result =
      std::min(static_cast<int32_t>(std::numeric_limits<T>::max()), result);
 801c74e:	f7fe fce4 	bl	801b11a <_ZNSt14numeric_limitsIaE3maxEv>
 801c752:	4603      	mov	r3, r0
 801c754:	61fb      	str	r3, [r7, #28]
 801c756:	f107 0214 	add.w	r2, r7, #20
 801c75a:	f107 031c 	add.w	r3, r7, #28
 801c75e:	4611      	mov	r1, r2
 801c760:	4618      	mov	r0, r3
 801c762:	f7fe ffa5 	bl	801b6b0 <_ZSt3minIlERKT_S2_S2_>
 801c766:	4603      	mov	r3, r0
  result =
 801c768:	681b      	ldr	r3, [r3, #0]
 801c76a:	617b      	str	r3, [r7, #20]
  return result;
 801c76c:	697b      	ldr	r3, [r7, #20]
 801c76e:	b25b      	sxtb	r3, r3
}
 801c770:	4618      	mov	r0, r3
 801c772:	3720      	adds	r7, #32
 801c774:	46bd      	mov	sp, r7
 801c776:	bdb0      	pop	{r4, r5, r7, pc}

0801c778 <_ZN6tflite20FloatToQuantizedTypeIhEET_ffi>:
T FloatToQuantizedType(const float value, const float scale, int zero_point) {
 801c778:	b5b0      	push	{r4, r5, r7, lr}
 801c77a:	b088      	sub	sp, #32
 801c77c:	af00      	add	r7, sp, #0
 801c77e:	ed87 0a03 	vstr	s0, [r7, #12]
 801c782:	edc7 0a02 	vstr	s1, [r7, #8]
 801c786:	6078      	str	r0, [r7, #4]
  int32_t result = round(value / scale) + zero_point;
 801c788:	ed97 7a03 	vldr	s14, [r7, #12]
 801c78c:	edd7 7a02 	vldr	s15, [r7, #8]
 801c790:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801c794:	ee16 0a90 	vmov	r0, s13
 801c798:	f7e3 fee0 	bl	800055c <__aeabi_f2d>
 801c79c:	4602      	mov	r2, r0
 801c79e:	460b      	mov	r3, r1
 801c7a0:	ec43 2b10 	vmov	d0, r2, r3
 801c7a4:	f004 fa1c 	bl	8020be0 <round>
 801c7a8:	ec55 4b10 	vmov	r4, r5, d0
 801c7ac:	6878      	ldr	r0, [r7, #4]
 801c7ae:	f7e3 fec3 	bl	8000538 <__aeabi_i2d>
 801c7b2:	4602      	mov	r2, r0
 801c7b4:	460b      	mov	r3, r1
 801c7b6:	4620      	mov	r0, r4
 801c7b8:	4629      	mov	r1, r5
 801c7ba:	f7e3 fd71 	bl	80002a0 <__adddf3>
 801c7be:	4602      	mov	r2, r0
 801c7c0:	460b      	mov	r3, r1
 801c7c2:	4610      	mov	r0, r2
 801c7c4:	4619      	mov	r1, r3
 801c7c6:	f7e4 f9d1 	bl	8000b6c <__aeabi_d2iz>
 801c7ca:	4603      	mov	r3, r0
 801c7cc:	617b      	str	r3, [r7, #20]
      std::max(static_cast<int32_t>(std::numeric_limits<T>::min()), result);
 801c7ce:	f7fe fcac 	bl	801b12a <_ZNSt14numeric_limitsIhE3minEv>
 801c7d2:	4603      	mov	r3, r0
 801c7d4:	61bb      	str	r3, [r7, #24]
 801c7d6:	f107 0214 	add.w	r2, r7, #20
 801c7da:	f107 0318 	add.w	r3, r7, #24
 801c7de:	4611      	mov	r1, r2
 801c7e0:	4618      	mov	r0, r3
 801c7e2:	f7fe ff79 	bl	801b6d8 <_ZSt3maxIlERKT_S2_S2_>
 801c7e6:	4603      	mov	r3, r0
  result =
 801c7e8:	681b      	ldr	r3, [r3, #0]
 801c7ea:	617b      	str	r3, [r7, #20]
      std::min(static_cast<int32_t>(std::numeric_limits<T>::max()), result);
 801c7ec:	f7fe fca5 	bl	801b13a <_ZNSt14numeric_limitsIhE3maxEv>
 801c7f0:	4603      	mov	r3, r0
 801c7f2:	61fb      	str	r3, [r7, #28]
 801c7f4:	f107 0214 	add.w	r2, r7, #20
 801c7f8:	f107 031c 	add.w	r3, r7, #28
 801c7fc:	4611      	mov	r1, r2
 801c7fe:	4618      	mov	r0, r3
 801c800:	f7fe ff56 	bl	801b6b0 <_ZSt3minIlERKT_S2_S2_>
 801c804:	4603      	mov	r3, r0
  result =
 801c806:	681b      	ldr	r3, [r3, #0]
 801c808:	617b      	str	r3, [r7, #20]
  return result;
 801c80a:	697b      	ldr	r3, [r7, #20]
 801c80c:	b2db      	uxtb	r3, r3
}
 801c80e:	4618      	mov	r0, r3
 801c810:	3720      	adds	r7, #32
 801c812:	46bd      	mov	sp, r7
 801c814:	bdb0      	pop	{r4, r5, r7, pc}

0801c816 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>:
inline void Relu6Quantized(Q lower, Q upper, const RuntimeShape& input_shape,
 801c816:	b580      	push	{r7, lr}
 801c818:	b088      	sub	sp, #32
 801c81a:	af00      	add	r7, sp, #0
 801c81c:	60ba      	str	r2, [r7, #8]
 801c81e:	607b      	str	r3, [r7, #4]
 801c820:	4603      	mov	r3, r0
 801c822:	73fb      	strb	r3, [r7, #15]
 801c824:	460b      	mov	r3, r1
 801c826:	73bb      	strb	r3, [r7, #14]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 801c828:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801c82a:	68b8      	ldr	r0, [r7, #8]
 801c82c:	f7ff f907 	bl	801ba3e <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 801c830:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 801c832:	2300      	movs	r3, #0
 801c834:	61fb      	str	r3, [r7, #28]
 801c836:	69fa      	ldr	r2, [r7, #28]
 801c838:	69bb      	ldr	r3, [r7, #24]
 801c83a:	429a      	cmp	r2, r3
 801c83c:	da26      	bge.n	801c88c <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x76>
    const Q val = input_data[i];
 801c83e:	69fb      	ldr	r3, [r7, #28]
 801c840:	687a      	ldr	r2, [r7, #4]
 801c842:	4413      	add	r3, r2
 801c844:	781b      	ldrb	r3, [r3, #0]
 801c846:	75fb      	strb	r3, [r7, #23]
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
 801c848:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801c84c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801c850:	429a      	cmp	r2, r3
 801c852:	dd04      	ble.n	801c85e <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x48>
 801c854:	f107 030e 	add.w	r3, r7, #14
 801c858:	f993 3000 	ldrsb.w	r3, [r3]
 801c85c:	e00c      	b.n	801c878 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x62>
 801c85e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c862:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801c866:	429a      	cmp	r2, r3
 801c868:	da04      	bge.n	801c874 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x5e>
 801c86a:	f107 030f 	add.w	r3, r7, #15
 801c86e:	f993 3000 	ldrsb.w	r3, [r3]
 801c872:	e001      	b.n	801c878 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x62>
 801c874:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801c878:	75bb      	strb	r3, [r7, #22]
    output_data[i] = clamped;
 801c87a:	69fb      	ldr	r3, [r7, #28]
 801c87c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c87e:	4413      	add	r3, r2
 801c880:	7dba      	ldrb	r2, [r7, #22]
 801c882:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 801c884:	69fb      	ldr	r3, [r7, #28]
 801c886:	3301      	adds	r3, #1
 801c888:	61fb      	str	r3, [r7, #28]
 801c88a:	e7d4      	b.n	801c836 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x20>
}
 801c88c:	bf00      	nop
 801c88e:	3720      	adds	r7, #32
 801c890:	46bd      	mov	sp, r7
 801c892:	bd80      	pop	{r7, pc}

0801c894 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>:
inline void Relu6Quantized(Q lower, Q upper, const RuntimeShape& input_shape,
 801c894:	b580      	push	{r7, lr}
 801c896:	b088      	sub	sp, #32
 801c898:	af00      	add	r7, sp, #0
 801c89a:	60ba      	str	r2, [r7, #8]
 801c89c:	607b      	str	r3, [r7, #4]
 801c89e:	4603      	mov	r3, r0
 801c8a0:	73fb      	strb	r3, [r7, #15]
 801c8a2:	460b      	mov	r3, r1
 801c8a4:	73bb      	strb	r3, [r7, #14]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 801c8a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801c8a8:	68b8      	ldr	r0, [r7, #8]
 801c8aa:	f7ff f8c8 	bl	801ba3e <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 801c8ae:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 801c8b0:	2300      	movs	r3, #0
 801c8b2:	61fb      	str	r3, [r7, #28]
 801c8b4:	69fa      	ldr	r2, [r7, #28]
 801c8b6:	69bb      	ldr	r3, [r7, #24]
 801c8b8:	429a      	cmp	r2, r3
 801c8ba:	da1f      	bge.n	801c8fc <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x68>
    const Q val = input_data[i];
 801c8bc:	69fb      	ldr	r3, [r7, #28]
 801c8be:	687a      	ldr	r2, [r7, #4]
 801c8c0:	4413      	add	r3, r2
 801c8c2:	781b      	ldrb	r3, [r3, #0]
 801c8c4:	75fb      	strb	r3, [r7, #23]
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
 801c8c6:	7bbb      	ldrb	r3, [r7, #14]
 801c8c8:	7dfa      	ldrb	r2, [r7, #23]
 801c8ca:	429a      	cmp	r2, r3
 801c8cc:	d903      	bls.n	801c8d6 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x42>
 801c8ce:	f107 030e 	add.w	r3, r7, #14
 801c8d2:	781b      	ldrb	r3, [r3, #0]
 801c8d4:	e008      	b.n	801c8e8 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x54>
 801c8d6:	7bfb      	ldrb	r3, [r7, #15]
 801c8d8:	7dfa      	ldrb	r2, [r7, #23]
 801c8da:	429a      	cmp	r2, r3
 801c8dc:	d203      	bcs.n	801c8e6 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x52>
 801c8de:	f107 030f 	add.w	r3, r7, #15
 801c8e2:	781b      	ldrb	r3, [r3, #0]
 801c8e4:	e000      	b.n	801c8e8 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x54>
 801c8e6:	7dfb      	ldrb	r3, [r7, #23]
 801c8e8:	75bb      	strb	r3, [r7, #22]
    output_data[i] = clamped;
 801c8ea:	69fb      	ldr	r3, [r7, #28]
 801c8ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c8ee:	4413      	add	r3, r2
 801c8f0:	7dba      	ldrb	r2, [r7, #22]
 801c8f2:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 801c8f4:	69fb      	ldr	r3, [r7, #28]
 801c8f6:	3301      	adds	r3, #1
 801c8f8:	61fb      	str	r3, [r7, #28]
 801c8fa:	e7db      	b.n	801c8b4 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x20>
}
 801c8fc:	bf00      	nop
 801c8fe:	3720      	adds	r7, #32
 801c900:	46bd      	mov	sp, r7
 801c902:	bd80      	pop	{r7, pc}

0801c904 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>:
tRawType Dup(typename FixedPointRawTypeTraits<tRawType>::ScalarRawType x) {
 801c904:	b480      	push	{r7}
 801c906:	b083      	sub	sp, #12
 801c908:	af00      	add	r7, sp, #0
 801c90a:	6078      	str	r0, [r7, #4]
  return x;
 801c90c:	687b      	ldr	r3, [r7, #4]
}
 801c90e:	4618      	mov	r0, r3
 801c910:	370c      	adds	r7, #12
 801c912:	46bd      	mov	sp, r7
 801c914:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c918:	4770      	bx	lr

0801c91a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>:
tIntegerType BitAnd(tIntegerType a, tIntegerType b) {
 801c91a:	b480      	push	{r7}
 801c91c:	b083      	sub	sp, #12
 801c91e:	af00      	add	r7, sp, #0
 801c920:	6078      	str	r0, [r7, #4]
 801c922:	6039      	str	r1, [r7, #0]
  return a & b;
 801c924:	687a      	ldr	r2, [r7, #4]
 801c926:	683b      	ldr	r3, [r7, #0]
 801c928:	4013      	ands	r3, r2
}
 801c92a:	4618      	mov	r0, r3
 801c92c:	370c      	adds	r7, #12
 801c92e:	46bd      	mov	sp, r7
 801c930:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c934:	4770      	bx	lr

0801c936 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>:
tIntegerType ShiftRight(tIntegerType a, int offset) {
 801c936:	b480      	push	{r7}
 801c938:	b083      	sub	sp, #12
 801c93a:	af00      	add	r7, sp, #0
 801c93c:	6078      	str	r0, [r7, #4]
 801c93e:	6039      	str	r1, [r7, #0]
  return a >> offset;
 801c940:	687a      	ldr	r2, [r7, #4]
 801c942:	683b      	ldr	r3, [r7, #0]
 801c944:	fa42 f303 	asr.w	r3, r2, r3
}
 801c948:	4618      	mov	r0, r3
 801c94a:	370c      	adds	r7, #12
 801c94c:	46bd      	mov	sp, r7
 801c94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c952:	4770      	bx	lr

0801c954 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>:
tIntegerType MaskIfLessThan(tIntegerType a, tIntegerType b) {
 801c954:	b580      	push	{r7, lr}
 801c956:	b082      	sub	sp, #8
 801c958:	af00      	add	r7, sp, #0
 801c95a:	6078      	str	r0, [r7, #4]
 801c95c:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a < b);
 801c95e:	687a      	ldr	r2, [r7, #4]
 801c960:	683b      	ldr	r3, [r7, #0]
 801c962:	429a      	cmp	r2, r3
 801c964:	bfb4      	ite	lt
 801c966:	2301      	movlt	r3, #1
 801c968:	2300      	movge	r3, #0
 801c96a:	b2db      	uxtb	r3, r3
 801c96c:	4618      	mov	r0, r3
 801c96e:	f000 f827 	bl	801c9c0 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801c972:	4603      	mov	r3, r0
}
 801c974:	4618      	mov	r0, r3
 801c976:	3708      	adds	r7, #8
 801c978:	46bd      	mov	sp, r7
 801c97a:	bd80      	pop	{r7, pc}

0801c97c <_ZN8gemmlowp3AddIlEET_S1_S1_>:
tIntegerType Add(tIntegerType a, tIntegerType b) {
 801c97c:	b480      	push	{r7}
 801c97e:	b083      	sub	sp, #12
 801c980:	af00      	add	r7, sp, #0
 801c982:	6078      	str	r0, [r7, #4]
 801c984:	6039      	str	r1, [r7, #0]
  return a + b;
 801c986:	687a      	ldr	r2, [r7, #4]
 801c988:	683b      	ldr	r3, [r7, #0]
 801c98a:	4413      	add	r3, r2
}
 801c98c:	4618      	mov	r0, r3
 801c98e:	370c      	adds	r7, #12
 801c990:	46bd      	mov	sp, r7
 801c992:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c996:	4770      	bx	lr

0801c998 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>:
tIntegerType MaskIfGreaterThan(tIntegerType a, tIntegerType b) {
 801c998:	b580      	push	{r7, lr}
 801c99a:	b082      	sub	sp, #8
 801c99c:	af00      	add	r7, sp, #0
 801c99e:	6078      	str	r0, [r7, #4]
 801c9a0:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a > b);
 801c9a2:	687a      	ldr	r2, [r7, #4]
 801c9a4:	683b      	ldr	r3, [r7, #0]
 801c9a6:	429a      	cmp	r2, r3
 801c9a8:	bfcc      	ite	gt
 801c9aa:	2301      	movgt	r3, #1
 801c9ac:	2300      	movle	r3, #0
 801c9ae:	b2db      	uxtb	r3, r3
 801c9b0:	4618      	mov	r0, r3
 801c9b2:	f000 f805 	bl	801c9c0 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801c9b6:	4603      	mov	r3, r0
}
 801c9b8:	4618      	mov	r0, r3
 801c9ba:	3708      	adds	r7, #8
 801c9bc:	46bd      	mov	sp, r7
 801c9be:	bd80      	pop	{r7, pc}

0801c9c0 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>:
tIntegerType MaskIfNonZero(tIntegerType a) {
 801c9c0:	b580      	push	{r7, lr}
 801c9c2:	b082      	sub	sp, #8
 801c9c4:	af00      	add	r7, sp, #0
 801c9c6:	6078      	str	r0, [r7, #4]
  return a ? BitNot(zero) : zero;
 801c9c8:	687b      	ldr	r3, [r7, #4]
 801c9ca:	2b00      	cmp	r3, #0
 801c9cc:	d004      	beq.n	801c9d8 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x18>
 801c9ce:	2000      	movs	r0, #0
 801c9d0:	f000 f807 	bl	801c9e2 <_ZN8gemmlowp6BitNotIlEET_S1_>
 801c9d4:	4603      	mov	r3, r0
 801c9d6:	e000      	b.n	801c9da <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x1a>
 801c9d8:	2300      	movs	r3, #0
}
 801c9da:	4618      	mov	r0, r3
 801c9dc:	3708      	adds	r7, #8
 801c9de:	46bd      	mov	sp, r7
 801c9e0:	bd80      	pop	{r7, pc}

0801c9e2 <_ZN8gemmlowp6BitNotIlEET_S1_>:
tIntegerType BitNot(tIntegerType a) {
 801c9e2:	b480      	push	{r7}
 801c9e4:	b083      	sub	sp, #12
 801c9e6:	af00      	add	r7, sp, #0
 801c9e8:	6078      	str	r0, [r7, #4]
  return ~a;
 801c9ea:	687b      	ldr	r3, [r7, #4]
 801c9ec:	43db      	mvns	r3, r3
}
 801c9ee:	4618      	mov	r0, r3
 801c9f0:	370c      	adds	r7, #12
 801c9f2:	46bd      	mov	sp, r7
 801c9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c9f8:	4770      	bx	lr

0801c9fa <_ZN6tflite9NumInputsEPK10TfLiteNode>:
inline int NumDimensions(const TfLiteEvalTensor* t) { return t->dims->size; }
inline int SizeOfDimension(const TfLiteEvalTensor* t, int dim) {
  return t->dims->data[dim];
}

inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
 801c9fa:	b480      	push	{r7}
 801c9fc:	b083      	sub	sp, #12
 801c9fe:	af00      	add	r7, sp, #0
 801ca00:	6078      	str	r0, [r7, #4]
 801ca02:	687b      	ldr	r3, [r7, #4]
 801ca04:	681b      	ldr	r3, [r3, #0]
 801ca06:	681b      	ldr	r3, [r3, #0]
 801ca08:	4618      	mov	r0, r3
 801ca0a:	370c      	adds	r7, #12
 801ca0c:	46bd      	mov	sp, r7
 801ca0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca12:	4770      	bx	lr

0801ca14 <_ZN6tflite10NumOutputsEPK10TfLiteNode>:
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
 801ca14:	b480      	push	{r7}
 801ca16:	b083      	sub	sp, #12
 801ca18:	af00      	add	r7, sp, #0
 801ca1a:	6078      	str	r0, [r7, #4]
 801ca1c:	687b      	ldr	r3, [r7, #4]
 801ca1e:	685b      	ldr	r3, [r3, #4]
 801ca20:	681b      	ldr	r3, [r3, #0]
 801ca22:	4618      	mov	r0, r3
 801ca24:	370c      	adds	r7, #12
 801ca26:	46bd      	mov	sp, r7
 801ca28:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca2c:	4770      	bx	lr

0801ca2e <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 801ca2e:	b580      	push	{r7, lr}
 801ca30:	b082      	sub	sp, #8
 801ca32:	af00      	add	r7, sp, #0
 801ca34:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 801ca36:	687b      	ldr	r3, [r7, #4]
 801ca38:	2b00      	cmp	r3, #0
 801ca3a:	d101      	bne.n	801ca40 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor+0x12>
 801ca3c:	f006 fcfe 	bl	802343c <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 801ca40:	687b      	ldr	r3, [r7, #4]
 801ca42:	681b      	ldr	r3, [r3, #0]
}
 801ca44:	4618      	mov	r0, r3
 801ca46:	3708      	adds	r7, #8
 801ca48:	46bd      	mov	sp, r7
 801ca4a:	bd80      	pop	{r7, pc}

0801ca4c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>:
                       const RuntimeShape& shape2, int index2) {
 801ca4c:	b590      	push	{r4, r7, lr}
 801ca4e:	b087      	sub	sp, #28
 801ca50:	af00      	add	r7, sp, #0
 801ca52:	60f8      	str	r0, [r7, #12]
 801ca54:	60b9      	str	r1, [r7, #8]
 801ca56:	607a      	str	r2, [r7, #4]
 801ca58:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 801ca5a:	68b9      	ldr	r1, [r7, #8]
 801ca5c:	68f8      	ldr	r0, [r7, #12]
 801ca5e:	f7fe ff93 	bl	801b988 <_ZNK6tflite12RuntimeShape4DimsEi>
 801ca62:	4604      	mov	r4, r0
 801ca64:	6839      	ldr	r1, [r7, #0]
 801ca66:	6878      	ldr	r0, [r7, #4]
 801ca68:	f7fe ff8e 	bl	801b988 <_ZNK6tflite12RuntimeShape4DimsEi>
 801ca6c:	4603      	mov	r3, r0
 801ca6e:	429c      	cmp	r4, r3
 801ca70:	d001      	beq.n	801ca76 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i+0x2a>
 801ca72:	f006 fce3 	bl	802343c <abort>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
 801ca76:	68b9      	ldr	r1, [r7, #8]
 801ca78:	68f8      	ldr	r0, [r7, #12]
 801ca7a:	f7fe ff85 	bl	801b988 <_ZNK6tflite12RuntimeShape4DimsEi>
 801ca7e:	4603      	mov	r3, r0
 801ca80:	613b      	str	r3, [r7, #16]
 801ca82:	6839      	ldr	r1, [r7, #0]
 801ca84:	6878      	ldr	r0, [r7, #4]
 801ca86:	f7fe ff7f 	bl	801b988 <_ZNK6tflite12RuntimeShape4DimsEi>
 801ca8a:	4603      	mov	r3, r0
 801ca8c:	617b      	str	r3, [r7, #20]
 801ca8e:	f107 0214 	add.w	r2, r7, #20
 801ca92:	f107 0310 	add.w	r3, r7, #16
 801ca96:	4611      	mov	r1, r2
 801ca98:	4618      	mov	r0, r3
 801ca9a:	f7fe fe09 	bl	801b6b0 <_ZSt3minIlERKT_S2_S2_>
 801ca9e:	4603      	mov	r3, r0
 801caa0:	681b      	ldr	r3, [r3, #0]
}
 801caa2:	4618      	mov	r0, r3
 801caa4:	371c      	adds	r7, #28
 801caa6:	46bd      	mov	sp, r7
 801caa8:	bd90      	pop	{r4, r7, pc}

0801caaa <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 801caaa:	b580      	push	{r7, lr}
 801caac:	b082      	sub	sp, #8
 801caae:	af00      	add	r7, sp, #0
 801cab0:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 801cab2:	687b      	ldr	r3, [r7, #4]
 801cab4:	2b00      	cmp	r3, #0
 801cab6:	d101      	bne.n	801cabc <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor+0x12>
 801cab8:	f006 fcc0 	bl	802343c <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 801cabc:	687b      	ldr	r3, [r7, #4]
 801cabe:	681b      	ldr	r3, [r3, #0]
}
 801cac0:	4618      	mov	r0, r3
 801cac2:	3708      	adds	r7, #8
 801cac4:	46bd      	mov	sp, r7
 801cac6:	bd80      	pop	{r7, pc}

0801cac8 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_>:
inline std::int32_t RoundingHalfSum(std::int32_t a, std::int32_t b) {
 801cac8:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801cacc:	b090      	sub	sp, #64	; 0x40
 801cace:	af00      	add	r7, sp, #0
 801cad0:	61f8      	str	r0, [r7, #28]
 801cad2:	61b9      	str	r1, [r7, #24]
  std::int64_t a64 = a;
 801cad4:	69fb      	ldr	r3, [r7, #28]
 801cad6:	17da      	asrs	r2, r3, #31
 801cad8:	613b      	str	r3, [r7, #16]
 801cada:	617a      	str	r2, [r7, #20]
 801cadc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801cae0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  std::int64_t b64 = b;
 801cae4:	69bb      	ldr	r3, [r7, #24]
 801cae6:	17da      	asrs	r2, r3, #31
 801cae8:	60bb      	str	r3, [r7, #8]
 801caea:	60fa      	str	r2, [r7, #12]
 801caec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801caf0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  std::int64_t sum = a64 + b64;
 801caf4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 801caf8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 801cafc:	1886      	adds	r6, r0, r2
 801cafe:	603e      	str	r6, [r7, #0]
 801cb00:	eb41 0303 	adc.w	r3, r1, r3
 801cb04:	607b      	str	r3, [r7, #4]
 801cb06:	e9d7 2300 	ldrd	r2, r3, [r7]
 801cb0a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  std::int64_t sign = sum >= 0 ? 1 : -1;
 801cb0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801cb12:	2b00      	cmp	r3, #0
 801cb14:	db04      	blt.n	801cb20 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x58>
 801cb16:	f04f 0201 	mov.w	r2, #1
 801cb1a:	f04f 0300 	mov.w	r3, #0
 801cb1e:	e003      	b.n	801cb28 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x60>
 801cb20:	f04f 32ff 	mov.w	r2, #4294967295
 801cb24:	f04f 33ff 	mov.w	r3, #4294967295
 801cb28:	e9c7 2308 	strd	r2, r3, [r7, #32]
  return static_cast<std::int32_t>((sum + sign) / 2);
 801cb2c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801cb30:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801cb34:	eb10 0802 	adds.w	r8, r0, r2
 801cb38:	eb41 0903 	adc.w	r9, r1, r3
 801cb3c:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 801cb40:	2200      	movs	r2, #0
 801cb42:	469a      	mov	sl, r3
 801cb44:	4693      	mov	fp, r2
 801cb46:	eb1a 0408 	adds.w	r4, sl, r8
 801cb4a:	eb4b 0509 	adc.w	r5, fp, r9
 801cb4e:	f04f 0200 	mov.w	r2, #0
 801cb52:	f04f 0300 	mov.w	r3, #0
 801cb56:	0862      	lsrs	r2, r4, #1
 801cb58:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 801cb5c:	106b      	asrs	r3, r5, #1
 801cb5e:	4613      	mov	r3, r2
}
 801cb60:	4618      	mov	r0, r3
 801cb62:	3740      	adds	r7, #64	; 0x40
 801cb64:	46bd      	mov	sp, r7
 801cb66:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801cb6a:	4770      	bx	lr

0801cb6c <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>:
    int32_t x, int32_t quantized_multiplier, int left_shift) {
 801cb6c:	b580      	push	{r7, lr}
 801cb6e:	b084      	sub	sp, #16
 801cb70:	af00      	add	r7, sp, #0
 801cb72:	60f8      	str	r0, [r7, #12]
 801cb74:	60b9      	str	r1, [r7, #8]
 801cb76:	607a      	str	r2, [r7, #4]
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
 801cb78:	68fa      	ldr	r2, [r7, #12]
 801cb7a:	687b      	ldr	r3, [r7, #4]
 801cb7c:	fa02 f303 	lsl.w	r3, r2, r3
 801cb80:	68b9      	ldr	r1, [r7, #8]
 801cb82:	4618      	mov	r0, r3
 801cb84:	f7fe fe8a 	bl	801b89c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 801cb88:	4603      	mov	r3, r0
}
 801cb8a:	4618      	mov	r0, r3
 801cb8c:	3710      	adds	r7, #16
 801cb8e:	46bd      	mov	sp, r7
 801cb90:	bd80      	pop	{r7, pc}

0801cb92 <_ZN6tflite13GetReciprocalEliPi>:
                                                     InputIntegerBits>(
      input_val);
}

inline int32_t GetReciprocal(int32_t x, int x_integer_digits,
                             int* num_bits_over_unit) {
 801cb92:	b580      	push	{r7, lr}
 801cb94:	b088      	sub	sp, #32
 801cb96:	af00      	add	r7, sp, #0
 801cb98:	60f8      	str	r0, [r7, #12]
 801cb9a:	60b9      	str	r1, [r7, #8]
 801cb9c:	607a      	str	r2, [r7, #4]
  int headroom_plus_one = CountLeadingZeros(static_cast<uint32_t>(x));
 801cb9e:	68fb      	ldr	r3, [r7, #12]
 801cba0:	4618      	mov	r0, r3
 801cba2:	f000 f821 	bl	801cbe8 <_ZN6tflite17CountLeadingZerosImEEiT_>
 801cba6:	61f8      	str	r0, [r7, #28]
  // This is the number of bits to the left of the binary point above 1.0.
  // Consider x=1.25.  In that case shifted_scale=0.8 and
  // no later adjustment will be needed.
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
 801cba8:	68ba      	ldr	r2, [r7, #8]
 801cbaa:	69fb      	ldr	r3, [r7, #28]
 801cbac:	1ad2      	subs	r2, r2, r3
 801cbae:	687b      	ldr	r3, [r7, #4]
 801cbb0:	601a      	str	r2, [r3, #0]
  const int32_t shifted_sum_minus_one =
      static_cast<int32_t>((static_cast<uint32_t>(x) << headroom_plus_one) -
 801cbb2:	68fa      	ldr	r2, [r7, #12]
 801cbb4:	69fb      	ldr	r3, [r7, #28]
 801cbb6:	fa02 f303 	lsl.w	r3, r2, r3
 801cbba:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  const int32_t shifted_sum_minus_one =
 801cbbe:	61bb      	str	r3, [r7, #24]
                           (static_cast<uint32_t>(1) << 31));

  gemmlowp::FixedPoint<int32_t, 0> shifted_scale =
      gemmlowp::one_over_one_plus_x_for_x_in_0_1(
          gemmlowp::FixedPoint<int32_t, 0>::FromRaw(shifted_sum_minus_one));
 801cbc0:	69b8      	ldr	r0, [r7, #24]
 801cbc2:	f000 f823 	bl	801cc0c <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801cbc6:	4603      	mov	r3, r0
 801cbc8:	4618      	mov	r0, r3
 801cbca:	f000 f831 	bl	801cc30 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>
 801cbce:	4603      	mov	r3, r0
 801cbd0:	617b      	str	r3, [r7, #20]
  return shifted_scale.raw();
 801cbd2:	f107 0314 	add.w	r3, r7, #20
 801cbd6:	4618      	mov	r0, r3
 801cbd8:	f000 f88a 	bl	801ccf0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801cbdc:	4603      	mov	r3, r0
 801cbde:	681b      	ldr	r3, [r3, #0]
}
 801cbe0:	4618      	mov	r0, r3
 801cbe2:	3720      	adds	r7, #32
 801cbe4:	46bd      	mov	sp, r7
 801cbe6:	bd80      	pop	{r7, pc}

0801cbe8 <_ZN6tflite17CountLeadingZerosImEEiT_>:
int CountLeadingZeros(T integer_input) {
 801cbe8:	b480      	push	{r7}
 801cbea:	b083      	sub	sp, #12
 801cbec:	af00      	add	r7, sp, #0
 801cbee:	6078      	str	r0, [r7, #4]
  return integer_input ? __builtin_clz(integer_input)
 801cbf0:	687b      	ldr	r3, [r7, #4]
 801cbf2:	2b00      	cmp	r3, #0
 801cbf4:	d003      	beq.n	801cbfe <_ZN6tflite17CountLeadingZerosImEEiT_+0x16>
 801cbf6:	687b      	ldr	r3, [r7, #4]
 801cbf8:	fab3 f383 	clz	r3, r3
                       : std::numeric_limits<T>::digits;
 801cbfc:	e000      	b.n	801cc00 <_ZN6tflite17CountLeadingZerosImEEiT_+0x18>
  return integer_input ? __builtin_clz(integer_input)
 801cbfe:	2320      	movs	r3, #32
}
 801cc00:	4618      	mov	r0, r3
 801cc02:	370c      	adds	r7, #12
 801cc04:	46bd      	mov	sp, r7
 801cc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc0a:	4770      	bx	lr

0801cc0c <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>:

  static const ScalarRawType RawMax() {
    return VectorFromScalar(ScalarRawMax());
  }

  static FixedPoint FromRaw(RawType x) {
 801cc0c:	b580      	push	{r7, lr}
 801cc0e:	b084      	sub	sp, #16
 801cc10:	af00      	add	r7, sp, #0
 801cc12:	6078      	str	r0, [r7, #4]
    FixedPoint retval;
    retval.raw() = x;
 801cc14:	f107 030c 	add.w	r3, r7, #12
 801cc18:	4618      	mov	r0, r3
 801cc1a:	f000 f869 	bl	801ccf0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801cc1e:	4602      	mov	r2, r0
 801cc20:	687b      	ldr	r3, [r7, #4]
 801cc22:	6013      	str	r3, [r2, #0]
    return retval;
 801cc24:	68fb      	ldr	r3, [r7, #12]
  }
 801cc26:	4618      	mov	r0, r3
 801cc28:	3710      	adds	r7, #16
 801cc2a:	46bd      	mov	sp, r7
 801cc2c:	bd80      	pop	{r7, pc}
	...

0801cc30 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>:

// Implementation of logistic function.

// Returns 1 / (1 + x) for x in (0, 1).
template <typename tRawType>
FixedPoint<tRawType, 0> one_over_one_plus_x_for_x_in_0_1(
 801cc30:	b580      	push	{r7, lr}
 801cc32:	b08a      	sub	sp, #40	; 0x28
 801cc34:	af00      	add	r7, sp, #0
 801cc36:	6078      	str	r0, [r7, #4]
    FixedPoint<tRawType, 0> a) {
  typedef FixedPoint<tRawType, 0> F0;
  typedef FixedPoint<tRawType, 2> F2;
  F0 half_denominator = RoundingHalfSum(a, F0::One());
 801cc38:	f000 f879 	bl	801cd2e <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>
 801cc3c:	4603      	mov	r3, r0
 801cc3e:	4619      	mov	r1, r3
 801cc40:	6878      	ldr	r0, [r7, #4]
 801cc42:	f000 f87f 	bl	801cd44 <_ZN8gemmlowp15RoundingHalfSumIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801cc46:	4603      	mov	r3, r0
 801cc48:	623b      	str	r3, [r7, #32]
  // Newton-Raphson division
  // https://en.wikipedia.org/wiki/Division_algorithm#Newton.E2.80.93Raphson_division
  // Refer to that page for the logic behind the 48/17 and 32/17 constants.
  const F2 constant_48_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, 1515870810, 48.0 / 17.0);
 801cc4a:	f04f 305a 	mov.w	r0, #1515870810	; 0x5a5a5a5a
 801cc4e:	f000 f8ab 	bl	801cda8 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>
 801cc52:	4603      	mov	r3, r0
 801cc54:	4618      	mov	r0, r3
 801cc56:	f000 f893 	bl	801cd80 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 801cc5a:	4603      	mov	r3, r0
 801cc5c:	61fb      	str	r3, [r7, #28]
  const F2 constant_neg_32_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, -1010580540, -32.0 / 17.0);
 801cc5e:	4823      	ldr	r0, [pc, #140]	; (801ccec <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xbc>)
 801cc60:	f000 f8a2 	bl	801cda8 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>
 801cc64:	4603      	mov	r3, r0
 801cc66:	4618      	mov	r0, r3
 801cc68:	f000 f88a 	bl	801cd80 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 801cc6c:	4603      	mov	r3, r0
 801cc6e:	61bb      	str	r3, [r7, #24]
  F2 x = constant_48_over_17 + half_denominator * constant_neg_32_over_17;
 801cc70:	69b9      	ldr	r1, [r7, #24]
 801cc72:	6a38      	ldr	r0, [r7, #32]
 801cc74:	f000 f8a5 	bl	801cdc2 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801cc78:	4603      	mov	r3, r0
 801cc7a:	4619      	mov	r1, r3
 801cc7c:	69f8      	ldr	r0, [r7, #28]
 801cc7e:	f000 f8c2 	bl	801ce06 <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801cc82:	4603      	mov	r3, r0
 801cc84:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 801cc86:	2300      	movs	r3, #0
 801cc88:	627b      	str	r3, [r7, #36]	; 0x24
 801cc8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cc8c:	2b02      	cmp	r3, #2
 801cc8e:	dc21      	bgt.n	801ccd4 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xa4>
    F2 half_denominator_times_x = half_denominator * x;
 801cc90:	6979      	ldr	r1, [r7, #20]
 801cc92:	6a38      	ldr	r0, [r7, #32]
 801cc94:	f000 f895 	bl	801cdc2 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801cc98:	4603      	mov	r3, r0
 801cc9a:	613b      	str	r3, [r7, #16]
    F2 one_minus_half_denominator_times_x =
        F2::One() - half_denominator_times_x;
 801cc9c:	f000 f8d1 	bl	801ce42 <_ZN8gemmlowp10FixedPointIlLi2EE3OneEv>
 801cca0:	4603      	mov	r3, r0
 801cca2:	6939      	ldr	r1, [r7, #16]
 801cca4:	4618      	mov	r0, r3
 801cca6:	f000 f8d5 	bl	801ce54 <_ZN8gemmlowpmiIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801ccaa:	4603      	mov	r3, r0
 801ccac:	60fb      	str	r3, [r7, #12]
    x = x + Rescale<2>(x * one_minus_half_denominator_times_x);
 801ccae:	68f9      	ldr	r1, [r7, #12]
 801ccb0:	6978      	ldr	r0, [r7, #20]
 801ccb2:	f000 f8ed 	bl	801ce90 <_ZN8gemmlowpmlIlLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801ccb6:	4603      	mov	r3, r0
 801ccb8:	4618      	mov	r0, r3
 801ccba:	f000 f90b 	bl	801ced4 <_ZN8gemmlowp7RescaleILi2ElLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 801ccbe:	4603      	mov	r3, r0
 801ccc0:	4619      	mov	r1, r3
 801ccc2:	6978      	ldr	r0, [r7, #20]
 801ccc4:	f000 f89f 	bl	801ce06 <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801ccc8:	4603      	mov	r3, r0
 801ccca:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 801cccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ccce:	3301      	adds	r3, #1
 801ccd0:	627b      	str	r3, [r7, #36]	; 0x24
 801ccd2:	e7da      	b.n	801cc8a <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x5a>
  }
  return Rescale<0>(ExactMulByPot<-1>(x));
 801ccd4:	6978      	ldr	r0, [r7, #20]
 801ccd6:	f000 f917 	bl	801cf08 <_ZN8gemmlowp13ExactMulByPotILin1ElLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>
 801ccda:	4603      	mov	r3, r0
 801ccdc:	4618      	mov	r0, r3
 801ccde:	f000 f929 	bl	801cf34 <_ZN8gemmlowp7RescaleILi0ElLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 801cce2:	4603      	mov	r3, r0
}
 801cce4:	4618      	mov	r0, r3
 801cce6:	3728      	adds	r7, #40	; 0x28
 801cce8:	46bd      	mov	sp, r7
 801ccea:	bd80      	pop	{r7, pc}
 801ccec:	c3c3c3c4 	.word	0xc3c3c3c4

0801ccf0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>:
  RawType& raw() { return i_; }
 801ccf0:	b480      	push	{r7}
 801ccf2:	b083      	sub	sp, #12
 801ccf4:	af00      	add	r7, sp, #0
 801ccf6:	6078      	str	r0, [r7, #4]
 801ccf8:	687b      	ldr	r3, [r7, #4]
 801ccfa:	4618      	mov	r0, r3
 801ccfc:	370c      	adds	r7, #12
 801ccfe:	46bd      	mov	sp, r7
 801cd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cd04:	4770      	bx	lr

0801cd06 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 801cd06:	b590      	push	{r4, r7, lr}
 801cd08:	b085      	sub	sp, #20
 801cd0a:	af00      	add	r7, sp, #0
 801cd0c:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 801cd0e:	f107 030c 	add.w	r3, r7, #12
 801cd12:	4618      	mov	r0, r3
 801cd14:	f7ff ffec 	bl	801ccf0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801cd18:	4604      	mov	r4, r0
 801cd1a:	6878      	ldr	r0, [r7, #4]
 801cd1c:	f7ff fdf2 	bl	801c904 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801cd20:	4603      	mov	r3, r0
 801cd22:	6023      	str	r3, [r4, #0]
    return retval;
 801cd24:	68fb      	ldr	r3, [r7, #12]
  }
 801cd26:	4618      	mov	r0, r3
 801cd28:	3714      	adds	r7, #20
 801cd2a:	46bd      	mov	sp, r7
 801cd2c:	bd90      	pop	{r4, r7, pc}

0801cd2e <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>:
  static FixedPoint One() {
 801cd2e:	b580      	push	{r7, lr}
 801cd30:	af00      	add	r7, sp, #0
    return FromScalarRaw(
 801cd32:	f000 f927 	bl	801cf84 <_ZN8gemmlowp10FixedPointIlLi0EE12ScalarRawMaxEv>
 801cd36:	4603      	mov	r3, r0
 801cd38:	4618      	mov	r0, r3
 801cd3a:	f7ff ffe4 	bl	801cd06 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801cd3e:	4603      	mov	r3, r0
  }
 801cd40:	4618      	mov	r0, r3
 801cd42:	bd80      	pop	{r7, pc}

0801cd44 <_ZN8gemmlowp15RoundingHalfSumIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(RoundingHalfSum, RoundingHalfSum)
 801cd44:	b590      	push	{r4, r7, lr}
 801cd46:	b083      	sub	sp, #12
 801cd48:	af00      	add	r7, sp, #0
 801cd4a:	6078      	str	r0, [r7, #4]
 801cd4c:	6039      	str	r1, [r7, #0]
 801cd4e:	1d3b      	adds	r3, r7, #4
 801cd50:	4618      	mov	r0, r3
 801cd52:	f7ff ffcd 	bl	801ccf0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801cd56:	4603      	mov	r3, r0
 801cd58:	681c      	ldr	r4, [r3, #0]
 801cd5a:	463b      	mov	r3, r7
 801cd5c:	4618      	mov	r0, r3
 801cd5e:	f7ff ffc7 	bl	801ccf0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801cd62:	4603      	mov	r3, r0
 801cd64:	681b      	ldr	r3, [r3, #0]
 801cd66:	4619      	mov	r1, r3
 801cd68:	4620      	mov	r0, r4
 801cd6a:	f7ff fead 	bl	801cac8 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_>
 801cd6e:	4603      	mov	r3, r0
 801cd70:	4618      	mov	r0, r3
 801cd72:	f7ff ff4b 	bl	801cc0c <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801cd76:	4603      	mov	r3, r0
 801cd78:	4618      	mov	r0, r3
 801cd7a:	370c      	adds	r7, #12
 801cd7c:	46bd      	mov	sp, r7
 801cd7e:	bd90      	pop	{r4, r7, pc}

0801cd80 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 801cd80:	b590      	push	{r4, r7, lr}
 801cd82:	b085      	sub	sp, #20
 801cd84:	af00      	add	r7, sp, #0
 801cd86:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 801cd88:	f107 030c 	add.w	r3, r7, #12
 801cd8c:	4618      	mov	r0, r3
 801cd8e:	f000 f900 	bl	801cf92 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801cd92:	4604      	mov	r4, r0
 801cd94:	6878      	ldr	r0, [r7, #4]
 801cd96:	f7ff fdb5 	bl	801c904 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801cd9a:	4603      	mov	r3, r0
 801cd9c:	6023      	str	r3, [r4, #0]
    return retval;
 801cd9e:	68fb      	ldr	r3, [r7, #12]
  }
 801cda0:	4618      	mov	r0, r3
 801cda2:	3714      	adds	r7, #20
 801cda4:	46bd      	mov	sp, r7
 801cda6:	bd90      	pop	{r4, r7, pc}

0801cda8 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>:
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 801cda8:	b580      	push	{r7, lr}
 801cdaa:	b082      	sub	sp, #8
 801cdac:	af00      	add	r7, sp, #0
 801cdae:	6078      	str	r0, [r7, #4]
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 801cdb0:	2100      	movs	r1, #0
 801cdb2:	6878      	ldr	r0, [r7, #4]
 801cdb4:	f7ff f9e2 	bl	801c17c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 801cdb8:	4603      	mov	r3, r0
}
 801cdba:	4618      	mov	r0, r3
 801cdbc:	3708      	adds	r7, #8
 801cdbe:	46bd      	mov	sp, r7
 801cdc0:	bd80      	pop	{r7, pc}

0801cdc2 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 801cdc2:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cdc4:	b085      	sub	sp, #20
 801cdc6:	af00      	add	r7, sp, #0
 801cdc8:	6078      	str	r0, [r7, #4]
 801cdca:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 801cdcc:	1d3b      	adds	r3, r7, #4
 801cdce:	4618      	mov	r0, r3
 801cdd0:	f7ff ff8e 	bl	801ccf0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801cdd4:	4603      	mov	r3, r0
 801cdd6:	681d      	ldr	r5, [r3, #0]
 801cdd8:	463b      	mov	r3, r7
 801cdda:	4618      	mov	r0, r3
 801cddc:	f000 f8d9 	bl	801cf92 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801cde0:	4603      	mov	r3, r0
 801cde2:	681e      	ldr	r6, [r3, #0]
 801cde4:	f107 030c 	add.w	r3, r7, #12
 801cde8:	4618      	mov	r0, r3
 801cdea:	f000 f8d2 	bl	801cf92 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801cdee:	4604      	mov	r4, r0
 801cdf0:	4631      	mov	r1, r6
 801cdf2:	4628      	mov	r0, r5
 801cdf4:	f7fe fd52 	bl	801b89c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 801cdf8:	4603      	mov	r3, r0
 801cdfa:	6023      	str	r3, [r4, #0]
  return c;
 801cdfc:	68fb      	ldr	r3, [r7, #12]
}
 801cdfe:	4618      	mov	r0, r3
 801ce00:	3714      	adds	r7, #20
 801ce02:	46bd      	mov	sp, r7
 801ce04:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801ce06 <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 801ce06:	b590      	push	{r4, r7, lr}
 801ce08:	b083      	sub	sp, #12
 801ce0a:	af00      	add	r7, sp, #0
 801ce0c:	6078      	str	r0, [r7, #4]
 801ce0e:	6039      	str	r1, [r7, #0]
 801ce10:	1d3b      	adds	r3, r7, #4
 801ce12:	4618      	mov	r0, r3
 801ce14:	f000 f8bd 	bl	801cf92 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801ce18:	4603      	mov	r3, r0
 801ce1a:	681c      	ldr	r4, [r3, #0]
 801ce1c:	463b      	mov	r3, r7
 801ce1e:	4618      	mov	r0, r3
 801ce20:	f000 f8b7 	bl	801cf92 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801ce24:	4603      	mov	r3, r0
 801ce26:	681b      	ldr	r3, [r3, #0]
 801ce28:	4619      	mov	r1, r3
 801ce2a:	4620      	mov	r0, r4
 801ce2c:	f7ff fda6 	bl	801c97c <_ZN8gemmlowp3AddIlEET_S1_S1_>
 801ce30:	4603      	mov	r3, r0
 801ce32:	4618      	mov	r0, r3
 801ce34:	f000 f8b8 	bl	801cfa8 <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>
 801ce38:	4603      	mov	r3, r0
 801ce3a:	4618      	mov	r0, r3
 801ce3c:	370c      	adds	r7, #12
 801ce3e:	46bd      	mov	sp, r7
 801ce40:	bd90      	pop	{r4, r7, pc}

0801ce42 <_ZN8gemmlowp10FixedPointIlLi2EE3OneEv>:
  static FixedPoint One() {
 801ce42:	b580      	push	{r7, lr}
 801ce44:	af00      	add	r7, sp, #0
    return FromScalarRaw(
 801ce46:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 801ce4a:	f7ff ff99 	bl	801cd80 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 801ce4e:	4603      	mov	r3, r0
  }
 801ce50:	4618      	mov	r0, r3
 801ce52:	bd80      	pop	{r7, pc}

0801ce54 <_ZN8gemmlowpmiIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 801ce54:	b590      	push	{r4, r7, lr}
 801ce56:	b083      	sub	sp, #12
 801ce58:	af00      	add	r7, sp, #0
 801ce5a:	6078      	str	r0, [r7, #4]
 801ce5c:	6039      	str	r1, [r7, #0]
 801ce5e:	1d3b      	adds	r3, r7, #4
 801ce60:	4618      	mov	r0, r3
 801ce62:	f000 f896 	bl	801cf92 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801ce66:	4603      	mov	r3, r0
 801ce68:	681c      	ldr	r4, [r3, #0]
 801ce6a:	463b      	mov	r3, r7
 801ce6c:	4618      	mov	r0, r3
 801ce6e:	f000 f890 	bl	801cf92 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801ce72:	4603      	mov	r3, r0
 801ce74:	681b      	ldr	r3, [r3, #0]
 801ce76:	4619      	mov	r1, r3
 801ce78:	4620      	mov	r0, r4
 801ce7a:	f000 f875 	bl	801cf68 <_ZN8gemmlowp3SubIlEET_S1_S1_>
 801ce7e:	4603      	mov	r3, r0
 801ce80:	4618      	mov	r0, r3
 801ce82:	f000 f891 	bl	801cfa8 <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>
 801ce86:	4603      	mov	r3, r0
 801ce88:	4618      	mov	r0, r3
 801ce8a:	370c      	adds	r7, #12
 801ce8c:	46bd      	mov	sp, r7
 801ce8e:	bd90      	pop	{r4, r7, pc}

0801ce90 <_ZN8gemmlowpmlIlLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 801ce90:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ce92:	b085      	sub	sp, #20
 801ce94:	af00      	add	r7, sp, #0
 801ce96:	6078      	str	r0, [r7, #4]
 801ce98:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 801ce9a:	1d3b      	adds	r3, r7, #4
 801ce9c:	4618      	mov	r0, r3
 801ce9e:	f000 f878 	bl	801cf92 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801cea2:	4603      	mov	r3, r0
 801cea4:	681d      	ldr	r5, [r3, #0]
 801cea6:	463b      	mov	r3, r7
 801cea8:	4618      	mov	r0, r3
 801ceaa:	f000 f872 	bl	801cf92 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801ceae:	4603      	mov	r3, r0
 801ceb0:	681e      	ldr	r6, [r3, #0]
 801ceb2:	f107 030c 	add.w	r3, r7, #12
 801ceb6:	4618      	mov	r0, r3
 801ceb8:	f000 f887 	bl	801cfca <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>
 801cebc:	4604      	mov	r4, r0
 801cebe:	4631      	mov	r1, r6
 801cec0:	4628      	mov	r0, r5
 801cec2:	f7fe fceb 	bl	801b89c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 801cec6:	4603      	mov	r3, r0
 801cec8:	6023      	str	r3, [r4, #0]
  return c;
 801ceca:	68fb      	ldr	r3, [r7, #12]
}
 801cecc:	4618      	mov	r0, r3
 801cece:	3714      	adds	r7, #20
 801ced0:	46bd      	mov	sp, r7
 801ced2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801ced4 <_ZN8gemmlowp7RescaleILi2ElLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 801ced4:	b5b0      	push	{r4, r5, r7, lr}
 801ced6:	b084      	sub	sp, #16
 801ced8:	af00      	add	r7, sp, #0
 801ceda:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 801cedc:	1d3b      	adds	r3, r7, #4
 801cede:	4618      	mov	r0, r3
 801cee0:	f000 f873 	bl	801cfca <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>
 801cee4:	4603      	mov	r3, r0
 801cee6:	681d      	ldr	r5, [r3, #0]
 801cee8:	f107 030c 	add.w	r3, r7, #12
 801ceec:	4618      	mov	r0, r3
 801ceee:	f000 f850 	bl	801cf92 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801cef2:	4604      	mov	r4, r0
 801cef4:	4628      	mov	r0, r5
 801cef6:	f000 f873 	bl	801cfe0 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2ElEET0_S1_>
 801cefa:	4603      	mov	r3, r0
 801cefc:	6023      	str	r3, [r4, #0]
  return result;
 801cefe:	68fb      	ldr	r3, [r7, #12]
}
 801cf00:	4618      	mov	r0, r3
 801cf02:	3710      	adds	r7, #16
 801cf04:	46bd      	mov	sp, r7
 801cf06:	bdb0      	pop	{r4, r5, r7, pc}

0801cf08 <_ZN8gemmlowp13ExactMulByPotILin1ElLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tExponent + tIntegerBits> ExactMulByPot(
 801cf08:	b590      	push	{r4, r7, lr}
 801cf0a:	b085      	sub	sp, #20
 801cf0c:	af00      	add	r7, sp, #0
 801cf0e:	6078      	str	r0, [r7, #4]
  c.raw() = a.raw();
 801cf10:	1d3b      	adds	r3, r7, #4
 801cf12:	4618      	mov	r0, r3
 801cf14:	f000 f83d 	bl	801cf92 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801cf18:	4604      	mov	r4, r0
 801cf1a:	f107 030c 	add.w	r3, r7, #12
 801cf1e:	4618      	mov	r0, r3
 801cf20:	f000 f86a 	bl	801cff8 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>
 801cf24:	4602      	mov	r2, r0
 801cf26:	6823      	ldr	r3, [r4, #0]
 801cf28:	6013      	str	r3, [r2, #0]
  return c;
 801cf2a:	68fb      	ldr	r3, [r7, #12]
}
 801cf2c:	4618      	mov	r0, r3
 801cf2e:	3714      	adds	r7, #20
 801cf30:	46bd      	mov	sp, r7
 801cf32:	bd90      	pop	{r4, r7, pc}

0801cf34 <_ZN8gemmlowp7RescaleILi0ElLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 801cf34:	b5b0      	push	{r4, r5, r7, lr}
 801cf36:	b084      	sub	sp, #16
 801cf38:	af00      	add	r7, sp, #0
 801cf3a:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 801cf3c:	1d3b      	adds	r3, r7, #4
 801cf3e:	4618      	mov	r0, r3
 801cf40:	f000 f85a 	bl	801cff8 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>
 801cf44:	4603      	mov	r3, r0
 801cf46:	681d      	ldr	r5, [r3, #0]
 801cf48:	f107 030c 	add.w	r3, r7, #12
 801cf4c:	4618      	mov	r0, r3
 801cf4e:	f7ff fecf 	bl	801ccf0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801cf52:	4604      	mov	r4, r0
 801cf54:	4628      	mov	r0, r5
 801cf56:	f000 f85a 	bl	801d00e <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1ElEET0_S1_>
 801cf5a:	4603      	mov	r3, r0
 801cf5c:	6023      	str	r3, [r4, #0]
  return result;
 801cf5e:	68fb      	ldr	r3, [r7, #12]
}
 801cf60:	4618      	mov	r0, r3
 801cf62:	3710      	adds	r7, #16
 801cf64:	46bd      	mov	sp, r7
 801cf66:	bdb0      	pop	{r4, r5, r7, pc}

0801cf68 <_ZN8gemmlowp3SubIlEET_S1_S1_>:
tIntegerType Sub(tIntegerType a, tIntegerType b) {
 801cf68:	b480      	push	{r7}
 801cf6a:	b083      	sub	sp, #12
 801cf6c:	af00      	add	r7, sp, #0
 801cf6e:	6078      	str	r0, [r7, #4]
 801cf70:	6039      	str	r1, [r7, #0]
  return a - b;
 801cf72:	687a      	ldr	r2, [r7, #4]
 801cf74:	683b      	ldr	r3, [r7, #0]
 801cf76:	1ad3      	subs	r3, r2, r3
}
 801cf78:	4618      	mov	r0, r3
 801cf7a:	370c      	adds	r7, #12
 801cf7c:	46bd      	mov	sp, r7
 801cf7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf82:	4770      	bx	lr

0801cf84 <_ZN8gemmlowp10FixedPointIlLi0EE12ScalarRawMaxEv>:
  static const ScalarRawType ScalarRawMax() {
 801cf84:	b580      	push	{r7, lr}
 801cf86:	af00      	add	r7, sp, #0
    return std::numeric_limits<ScalarRawType>::max();
 801cf88:	f7fd fefc 	bl	801ad84 <_ZNSt14numeric_limitsIlE3maxEv>
 801cf8c:	4603      	mov	r3, r0
  }
 801cf8e:	4618      	mov	r0, r3
 801cf90:	bd80      	pop	{r7, pc}

0801cf92 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>:
  RawType& raw() { return i_; }
 801cf92:	b480      	push	{r7}
 801cf94:	b083      	sub	sp, #12
 801cf96:	af00      	add	r7, sp, #0
 801cf98:	6078      	str	r0, [r7, #4]
 801cf9a:	687b      	ldr	r3, [r7, #4]
 801cf9c:	4618      	mov	r0, r3
 801cf9e:	370c      	adds	r7, #12
 801cfa0:	46bd      	mov	sp, r7
 801cfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cfa6:	4770      	bx	lr

0801cfa8 <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 801cfa8:	b580      	push	{r7, lr}
 801cfaa:	b084      	sub	sp, #16
 801cfac:	af00      	add	r7, sp, #0
 801cfae:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 801cfb0:	f107 030c 	add.w	r3, r7, #12
 801cfb4:	4618      	mov	r0, r3
 801cfb6:	f7ff ffec 	bl	801cf92 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801cfba:	4602      	mov	r2, r0
 801cfbc:	687b      	ldr	r3, [r7, #4]
 801cfbe:	6013      	str	r3, [r2, #0]
    return retval;
 801cfc0:	68fb      	ldr	r3, [r7, #12]
  }
 801cfc2:	4618      	mov	r0, r3
 801cfc4:	3710      	adds	r7, #16
 801cfc6:	46bd      	mov	sp, r7
 801cfc8:	bd80      	pop	{r7, pc}

0801cfca <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>:
  RawType& raw() { return i_; }
 801cfca:	b480      	push	{r7}
 801cfcc:	b083      	sub	sp, #12
 801cfce:	af00      	add	r7, sp, #0
 801cfd0:	6078      	str	r0, [r7, #4]
 801cfd2:	687b      	ldr	r3, [r7, #4]
 801cfd4:	4618      	mov	r0, r3
 801cfd6:	370c      	adds	r7, #12
 801cfd8:	46bd      	mov	sp, r7
 801cfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cfde:	4770      	bx	lr

0801cfe0 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 801cfe0:	b580      	push	{r7, lr}
 801cfe2:	b082      	sub	sp, #8
 801cfe4:	af00      	add	r7, sp, #0
 801cfe6:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 801cfe8:	6878      	ldr	r0, [r7, #4]
 801cfea:	f000 f81d 	bl	801d028 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl>
 801cfee:	4603      	mov	r3, r0
}
 801cff0:	4618      	mov	r0, r3
 801cff2:	3708      	adds	r7, #8
 801cff4:	46bd      	mov	sp, r7
 801cff6:	bd80      	pop	{r7, pc}

0801cff8 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>:
  RawType& raw() { return i_; }
 801cff8:	b480      	push	{r7}
 801cffa:	b083      	sub	sp, #12
 801cffc:	af00      	add	r7, sp, #0
 801cffe:	6078      	str	r0, [r7, #4]
 801d000:	687b      	ldr	r3, [r7, #4]
 801d002:	4618      	mov	r0, r3
 801d004:	370c      	adds	r7, #12
 801d006:	46bd      	mov	sp, r7
 801d008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d00c:	4770      	bx	lr

0801d00e <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 801d00e:	b580      	push	{r7, lr}
 801d010:	b082      	sub	sp, #8
 801d012:	af00      	add	r7, sp, #0
 801d014:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 801d016:	6878      	ldr	r0, [r7, #4]
 801d018:	f000 f848 	bl	801d0ac <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl>
 801d01c:	4603      	mov	r3, r0
}
 801d01e:	4618      	mov	r0, r3
 801d020:	3708      	adds	r7, #8
 801d022:	46bd      	mov	sp, r7
 801d024:	bd80      	pop	{r7, pc}
	...

0801d028 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 801d028:	b580      	push	{r7, lr}
 801d02a:	b08a      	sub	sp, #40	; 0x28
 801d02c:	af00      	add	r7, sp, #0
 801d02e:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 801d030:	f7fe fc1f 	bl	801b872 <_ZNSt14numeric_limitsIlE3minEv>
 801d034:	4603      	mov	r3, r0
 801d036:	4618      	mov	r0, r3
 801d038:	f7ff fc64 	bl	801c904 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801d03c:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 801d03e:	f7fd fea1 	bl	801ad84 <_ZNSt14numeric_limitsIlE3maxEv>
 801d042:	4603      	mov	r3, r0
 801d044:	4618      	mov	r0, r3
 801d046:	f7ff fc5d 	bl	801c904 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801d04a:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 801d04c:	2320      	movs	r3, #32
 801d04e:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 801d050:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 801d054:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 801d056:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
 801d05a:	f7ff fc53 	bl	801c904 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801d05e:	4603      	mov	r3, r0
 801d060:	4619      	mov	r1, r3
 801d062:	6878      	ldr	r0, [r7, #4]
 801d064:	f7ff fc98 	bl	801c998 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 801d068:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 801d06a:	480f      	ldr	r0, [pc, #60]	; (801d0a8 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl+0x80>)
 801d06c:	f7ff fc4a 	bl	801c904 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801d070:	4603      	mov	r3, r0
 801d072:	4619      	mov	r1, r3
 801d074:	6878      	ldr	r0, [r7, #4]
 801d076:	f7ff fc6d 	bl	801c954 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 801d07a:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 801d07c:	2102      	movs	r1, #2
 801d07e:	6878      	ldr	r0, [r7, #4]
 801d080:	f000 f856 	bl	801d130 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 801d084:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 801d086:	68fa      	ldr	r2, [r7, #12]
 801d088:	6a39      	ldr	r1, [r7, #32]
 801d08a:	6978      	ldr	r0, [r7, #20]
 801d08c:	f000 f894 	bl	801d1b8 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 801d090:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 801d092:	68fa      	ldr	r2, [r7, #12]
 801d094:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801d096:	6938      	ldr	r0, [r7, #16]
 801d098:	f000 f88e 	bl	801d1b8 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 801d09c:	60f8      	str	r0, [r7, #12]
    return result;
 801d09e:	68fb      	ldr	r3, [r7, #12]
  }
 801d0a0:	4618      	mov	r0, r3
 801d0a2:	3728      	adds	r7, #40	; 0x28
 801d0a4:	46bd      	mov	sp, r7
 801d0a6:	bd80      	pop	{r7, pc}
 801d0a8:	e0000001 	.word	0xe0000001

0801d0ac <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 801d0ac:	b580      	push	{r7, lr}
 801d0ae:	b08a      	sub	sp, #40	; 0x28
 801d0b0:	af00      	add	r7, sp, #0
 801d0b2:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 801d0b4:	f7fe fbdd 	bl	801b872 <_ZNSt14numeric_limitsIlE3minEv>
 801d0b8:	4603      	mov	r3, r0
 801d0ba:	4618      	mov	r0, r3
 801d0bc:	f7ff fc22 	bl	801c904 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801d0c0:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 801d0c2:	f7fd fe5f 	bl	801ad84 <_ZNSt14numeric_limitsIlE3maxEv>
 801d0c6:	4603      	mov	r3, r0
 801d0c8:	4618      	mov	r0, r3
 801d0ca:	f7ff fc1b 	bl	801c904 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801d0ce:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 801d0d0:	2320      	movs	r3, #32
 801d0d2:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 801d0d4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 801d0d8:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 801d0da:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 801d0de:	f7ff fc11 	bl	801c904 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801d0e2:	4603      	mov	r3, r0
 801d0e4:	4619      	mov	r1, r3
 801d0e6:	6878      	ldr	r0, [r7, #4]
 801d0e8:	f7ff fc56 	bl	801c998 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 801d0ec:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 801d0ee:	480f      	ldr	r0, [pc, #60]	; (801d12c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl+0x80>)
 801d0f0:	f7ff fc08 	bl	801c904 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801d0f4:	4603      	mov	r3, r0
 801d0f6:	4619      	mov	r1, r3
 801d0f8:	6878      	ldr	r0, [r7, #4]
 801d0fa:	f7ff fc2b 	bl	801c954 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 801d0fe:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 801d100:	2101      	movs	r1, #1
 801d102:	6878      	ldr	r0, [r7, #4]
 801d104:	f000 f814 	bl	801d130 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 801d108:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 801d10a:	68fa      	ldr	r2, [r7, #12]
 801d10c:	6a39      	ldr	r1, [r7, #32]
 801d10e:	6978      	ldr	r0, [r7, #20]
 801d110:	f000 f852 	bl	801d1b8 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 801d114:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 801d116:	68fa      	ldr	r2, [r7, #12]
 801d118:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801d11a:	6938      	ldr	r0, [r7, #16]
 801d11c:	f000 f84c 	bl	801d1b8 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 801d120:	60f8      	str	r0, [r7, #12]
    return result;
 801d122:	68fb      	ldr	r3, [r7, #12]
  }
 801d124:	4618      	mov	r0, r3
 801d126:	3728      	adds	r7, #40	; 0x28
 801d128:	46bd      	mov	sp, r7
 801d12a:	bd80      	pop	{r7, pc}
 801d12c:	c0000001 	.word	0xc0000001

0801d130 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>:
tIntegerType ShiftLeft(tIntegerType a, int offset) {
 801d130:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 801d134:	b089      	sub	sp, #36	; 0x24
 801d136:	af00      	add	r7, sp, #0
 801d138:	6078      	str	r0, [r7, #4]
 801d13a:	6039      	str	r1, [r7, #0]
  const std::int64_t wide_a = static_cast<std::int64_t>(a);
 801d13c:	6879      	ldr	r1, [r7, #4]
 801d13e:	17c8      	asrs	r0, r1, #31
 801d140:	4688      	mov	r8, r1
 801d142:	4681      	mov	r9, r0
 801d144:	e9c7 8906 	strd	r8, r9, [r7, #24]
  const std::int64_t wide_shifted = wide_a * (1 << offset);
 801d148:	2001      	movs	r0, #1
 801d14a:	6839      	ldr	r1, [r7, #0]
 801d14c:	fa00 f101 	lsl.w	r1, r0, r1
 801d150:	17c8      	asrs	r0, r1, #31
 801d152:	460c      	mov	r4, r1
 801d154:	4605      	mov	r5, r0
 801d156:	69f9      	ldr	r1, [r7, #28]
 801d158:	fb04 f001 	mul.w	r0, r4, r1
 801d15c:	69b9      	ldr	r1, [r7, #24]
 801d15e:	fb05 f101 	mul.w	r1, r5, r1
 801d162:	4401      	add	r1, r0
 801d164:	69b8      	ldr	r0, [r7, #24]
 801d166:	fba0 2304 	umull	r2, r3, r0, r4
 801d16a:	4419      	add	r1, r3
 801d16c:	460b      	mov	r3, r1
 801d16e:	e9c7 2304 	strd	r2, r3, [r7, #16]
 801d172:	e9c7 2304 	strd	r2, r3, [r7, #16]
  const auto min = std::numeric_limits<tIntegerType>::min();
 801d176:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801d17a:	60fb      	str	r3, [r7, #12]
  const auto max = std::numeric_limits<tIntegerType>::max();
 801d17c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801d180:	60bb      	str	r3, [r7, #8]
             ? min
 801d182:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801d186:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 801d18a:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 801d18e:	db0b      	blt.n	801d1a8 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x78>
             : wide_shifted > max ? max
 801d190:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801d194:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 801d198:	f173 0300 	sbcs.w	r3, r3, #0
 801d19c:	da01      	bge.n	801d1a2 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x72>
 801d19e:	693b      	ldr	r3, [r7, #16]
                                  : static_cast<tIntegerType>(wide_shifted);
 801d1a0:	e004      	b.n	801d1ac <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x7c>
             : wide_shifted > max ? max
 801d1a2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
                                  : static_cast<tIntegerType>(wide_shifted);
 801d1a6:	e001      	b.n	801d1ac <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x7c>
             ? min
 801d1a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 801d1ac:	4618      	mov	r0, r3
 801d1ae:	3724      	adds	r7, #36	; 0x24
 801d1b0:	46bd      	mov	sp, r7
 801d1b2:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 801d1b6:	4770      	bx	lr

0801d1b8 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>:
tIntegerType SelectUsingMask(tIntegerType if_mask, tIntegerType then_val,
 801d1b8:	b590      	push	{r4, r7, lr}
 801d1ba:	b085      	sub	sp, #20
 801d1bc:	af00      	add	r7, sp, #0
 801d1be:	60f8      	str	r0, [r7, #12]
 801d1c0:	60b9      	str	r1, [r7, #8]
 801d1c2:	607a      	str	r2, [r7, #4]
  return BitXor(BitAnd(if_mask, then_val), BitAnd(BitNot(if_mask), else_val));
 801d1c4:	68b9      	ldr	r1, [r7, #8]
 801d1c6:	68f8      	ldr	r0, [r7, #12]
 801d1c8:	f7ff fba7 	bl	801c91a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801d1cc:	4604      	mov	r4, r0
 801d1ce:	68f8      	ldr	r0, [r7, #12]
 801d1d0:	f7ff fc07 	bl	801c9e2 <_ZN8gemmlowp6BitNotIlEET_S1_>
 801d1d4:	4603      	mov	r3, r0
 801d1d6:	6879      	ldr	r1, [r7, #4]
 801d1d8:	4618      	mov	r0, r3
 801d1da:	f7ff fb9e 	bl	801c91a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801d1de:	4603      	mov	r3, r0
 801d1e0:	4619      	mov	r1, r3
 801d1e2:	4620      	mov	r0, r4
 801d1e4:	f000 f805 	bl	801d1f2 <_ZN8gemmlowp6BitXorIlEET_S1_S1_>
 801d1e8:	4603      	mov	r3, r0
}
 801d1ea:	4618      	mov	r0, r3
 801d1ec:	3714      	adds	r7, #20
 801d1ee:	46bd      	mov	sp, r7
 801d1f0:	bd90      	pop	{r4, r7, pc}

0801d1f2 <_ZN8gemmlowp6BitXorIlEET_S1_S1_>:
tIntegerType BitXor(tIntegerType a, tIntegerType b) {
 801d1f2:	b480      	push	{r7}
 801d1f4:	b083      	sub	sp, #12
 801d1f6:	af00      	add	r7, sp, #0
 801d1f8:	6078      	str	r0, [r7, #4]
 801d1fa:	6039      	str	r1, [r7, #0]
  return a ^ b;
 801d1fc:	687a      	ldr	r2, [r7, #4]
 801d1fe:	683b      	ldr	r3, [r7, #0]
 801d200:	4053      	eors	r3, r2
}
 801d202:	4618      	mov	r0, r3
 801d204:	370c      	adds	r7, #12
 801d206:	46bd      	mov	sp, r7
 801d208:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d20c:	4770      	bx	lr

0801d20e <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
// TODO(b/169801227): This global struct is needed for the linker to drop unused
// code (for example, by using Register_FULLY_CONNECTED_INT8 instead of
// Register_FULLY_CONNECTED).
TfLiteRegistration fully_connected_registration;

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 801d20e:	b580      	push	{r7, lr}
 801d210:	b084      	sub	sp, #16
 801d212:	af00      	add	r7, sp, #0
 801d214:	60f8      	str	r0, [r7, #12]
 801d216:	60b9      	str	r1, [r7, #8]
 801d218:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 801d21a:	68fb      	ldr	r3, [r7, #12]
 801d21c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d21e:	2b00      	cmp	r3, #0
 801d220:	d101      	bne.n	801d226 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x18>
 801d222:	f006 f90b 	bl	802343c <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 801d226:	68fb      	ldr	r3, [r7, #12]
 801d228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d22a:	2124      	movs	r1, #36	; 0x24
 801d22c:	68f8      	ldr	r0, [r7, #12]
 801d22e:	4798      	blx	r3
 801d230:	4603      	mov	r3, r0
}
 801d232:	4618      	mov	r0, r3
 801d234:	3710      	adds	r7, #16
 801d236:	46bd      	mov	sp, r7
 801d238:	bd80      	pop	{r7, pc}
	...

0801d23c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 801d23c:	b5b0      	push	{r4, r5, r7, lr}
 801d23e:	b0a0      	sub	sp, #128	; 0x80
 801d240:	af04      	add	r7, sp, #16
 801d242:	6078      	str	r0, [r7, #4]
 801d244:	6039      	str	r1, [r7, #0]
 801d246:	2400      	movs	r4, #0
  TFLITE_DCHECK(node->user_data != nullptr);
 801d248:	683b      	ldr	r3, [r7, #0]
 801d24a:	691b      	ldr	r3, [r3, #16]
 801d24c:	2b00      	cmp	r3, #0
 801d24e:	d101      	bne.n	801d254 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x18>
 801d250:	f006 f8f4 	bl	802343c <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 801d254:	683b      	ldr	r3, [r7, #0]
 801d256:	695b      	ldr	r3, [r3, #20]
 801d258:	2b00      	cmp	r3, #0
 801d25a:	d101      	bne.n	801d260 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x24>
 801d25c:	f006 f8ee 	bl	802343c <abort>

  OpData* data = static_cast<OpData*>(node->user_data);
 801d260:	683b      	ldr	r3, [r7, #0]
 801d262:	691b      	ldr	r3, [r3, #16]
 801d264:	66fb      	str	r3, [r7, #108]	; 0x6c
  const auto params =
 801d266:	683b      	ldr	r3, [r7, #0]
 801d268:	695b      	ldr	r3, [r3, #20]
 801d26a:	66bb      	str	r3, [r7, #104]	; 0x68
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteTensor* input =
      GetInput(context, node, kFullyConnectedInputTensor);
 801d26c:	4b81      	ldr	r3, [pc, #516]	; (801d474 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x238>)
 801d26e:	681b      	ldr	r3, [r3, #0]
 801d270:	461a      	mov	r2, r3
 801d272:	6839      	ldr	r1, [r7, #0]
 801d274:	6878      	ldr	r0, [r7, #4]
 801d276:	f7fd fff9 	bl	801b26c <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801d27a:	6678      	str	r0, [r7, #100]	; 0x64
  TF_LITE_ENSURE(context, input != nullptr);
 801d27c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801d27e:	2b00      	cmp	r3, #0
 801d280:	d10a      	bne.n	801d298 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x5c>
 801d282:	687b      	ldr	r3, [r7, #4]
 801d284:	695c      	ldr	r4, [r3, #20]
 801d286:	4b7c      	ldr	r3, [pc, #496]	; (801d478 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 801d288:	9300      	str	r3, [sp, #0]
 801d28a:	2340      	movs	r3, #64	; 0x40
 801d28c:	4a7b      	ldr	r2, [pc, #492]	; (801d47c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 801d28e:	497c      	ldr	r1, [pc, #496]	; (801d480 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 801d290:	6878      	ldr	r0, [r7, #4]
 801d292:	47a0      	blx	r4
 801d294:	2401      	movs	r4, #1
 801d296:	e0e7      	b.n	801d468 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
  const TfLiteTensor* filter =
      GetInput(context, node, kFullyConnectedWeightsTensor);
 801d298:	4b7a      	ldr	r3, [pc, #488]	; (801d484 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x248>)
 801d29a:	681b      	ldr	r3, [r3, #0]
 801d29c:	461a      	mov	r2, r3
 801d29e:	6839      	ldr	r1, [r7, #0]
 801d2a0:	6878      	ldr	r0, [r7, #4]
 801d2a2:	f7fd ffe3 	bl	801b26c <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801d2a6:	6638      	str	r0, [r7, #96]	; 0x60
  TF_LITE_ENSURE(context, filter != nullptr);
 801d2a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801d2aa:	2b00      	cmp	r3, #0
 801d2ac:	d10a      	bne.n	801d2c4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x88>
 801d2ae:	687b      	ldr	r3, [r7, #4]
 801d2b0:	695c      	ldr	r4, [r3, #20]
 801d2b2:	4b75      	ldr	r3, [pc, #468]	; (801d488 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x24c>)
 801d2b4:	9300      	str	r3, [sp, #0]
 801d2b6:	2343      	movs	r3, #67	; 0x43
 801d2b8:	4a70      	ldr	r2, [pc, #448]	; (801d47c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 801d2ba:	4971      	ldr	r1, [pc, #452]	; (801d480 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 801d2bc:	6878      	ldr	r0, [r7, #4]
 801d2be:	47a0      	blx	r4
 801d2c0:	2401      	movs	r4, #1
 801d2c2:	e0d1      	b.n	801d468 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
  const TfLiteTensor* bias =
      GetOptionalInputTensor(context, node, kFullyConnectedBiasTensor);
 801d2c4:	4b71      	ldr	r3, [pc, #452]	; (801d48c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x250>)
 801d2c6:	681b      	ldr	r3, [r3, #0]
 801d2c8:	461a      	mov	r2, r3
 801d2ca:	6839      	ldr	r1, [r7, #0]
 801d2cc:	6878      	ldr	r0, [r7, #4]
 801d2ce:	f7fd fffd 	bl	801b2cc <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
 801d2d2:	65f8      	str	r0, [r7, #92]	; 0x5c
  TfLiteTensor* output = GetOutput(context, node, kFullyConnectedOutputTensor);
 801d2d4:	4b6e      	ldr	r3, [pc, #440]	; (801d490 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x254>)
 801d2d6:	681b      	ldr	r3, [r3, #0]
 801d2d8:	461a      	mov	r2, r3
 801d2da:	6839      	ldr	r1, [r7, #0]
 801d2dc:	6878      	ldr	r0, [r7, #4]
 801d2de:	f7fd ffd5 	bl	801b28c <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 801d2e2:	65b8      	str	r0, [r7, #88]	; 0x58
  TF_LITE_ENSURE(context, output != nullptr);
 801d2e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801d2e6:	2b00      	cmp	r3, #0
 801d2e8:	d10a      	bne.n	801d300 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xc4>
 801d2ea:	687b      	ldr	r3, [r7, #4]
 801d2ec:	695c      	ldr	r4, [r3, #20]
 801d2ee:	4b69      	ldr	r3, [pc, #420]	; (801d494 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x258>)
 801d2f0:	9300      	str	r3, [sp, #0]
 801d2f2:	2347      	movs	r3, #71	; 0x47
 801d2f4:	4a61      	ldr	r2, [pc, #388]	; (801d47c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 801d2f6:	4962      	ldr	r1, [pc, #392]	; (801d480 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 801d2f8:	6878      	ldr	r0, [r7, #4]
 801d2fa:	47a0      	blx	r4
 801d2fc:	2401      	movs	r4, #1
 801d2fe:	e0b3      	b.n	801d468 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 801d300:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801d302:	781a      	ldrb	r2, [r3, #0]
 801d304:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801d306:	781b      	ldrb	r3, [r3, #0]
 801d308:	429a      	cmp	r2, r3
 801d30a:	d01a      	beq.n	801d342 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x106>
 801d30c:	687b      	ldr	r3, [r7, #4]
 801d30e:	695c      	ldr	r4, [r3, #20]
 801d310:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801d312:	781b      	ldrb	r3, [r3, #0]
 801d314:	4618      	mov	r0, r3
 801d316:	f7fd fcb9 	bl	801ac8c <TfLiteTypeGetName>
 801d31a:	4605      	mov	r5, r0
 801d31c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801d31e:	781b      	ldrb	r3, [r3, #0]
 801d320:	4618      	mov	r0, r3
 801d322:	f7fd fcb3 	bl	801ac8c <TfLiteTypeGetName>
 801d326:	4603      	mov	r3, r0
 801d328:	9303      	str	r3, [sp, #12]
 801d32a:	9502      	str	r5, [sp, #8]
 801d32c:	4b5a      	ldr	r3, [pc, #360]	; (801d498 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x25c>)
 801d32e:	9301      	str	r3, [sp, #4]
 801d330:	4b5a      	ldr	r3, [pc, #360]	; (801d49c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x260>)
 801d332:	9300      	str	r3, [sp, #0]
 801d334:	2349      	movs	r3, #73	; 0x49
 801d336:	4a51      	ldr	r2, [pc, #324]	; (801d47c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 801d338:	4959      	ldr	r1, [pc, #356]	; (801d4a0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 801d33a:	6878      	ldr	r0, [r7, #4]
 801d33c:	47a0      	blx	r4
 801d33e:	2401      	movs	r4, #1
 801d340:	e092      	b.n	801d468 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
 801d342:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801d344:	781a      	ldrb	r2, [r3, #0]
 801d346:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801d348:	781b      	ldrb	r3, [r3, #0]
 801d34a:	429a      	cmp	r2, r3
 801d34c:	d006      	beq.n	801d35c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x120>
 801d34e:	687b      	ldr	r3, [r7, #4]
 801d350:	695b      	ldr	r3, [r3, #20]
 801d352:	4954      	ldr	r1, [pc, #336]	; (801d4a4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x268>)
 801d354:	6878      	ldr	r0, [r7, #4]
 801d356:	4798      	blx	r3
 801d358:	2401      	movs	r4, #1
 801d35a:	e085      	b.n	801d468 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
                     "Hybrid models are not supported on TFLite Micro.");

  // Set buffer index to a reset value
  data->buffer_idx = -1;
 801d35c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d35e:	f04f 32ff 	mov.w	r2, #4294967295
 801d362:	621a      	str	r2, [r3, #32]
  TF_LITE_ENSURE_STATUS(CalculateOpDataFullyConnected(
 801d364:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d366:	7819      	ldrb	r1, [r3, #0]
 801d368:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801d36a:	781a      	ldrb	r2, [r3, #0]
 801d36c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d36e:	9303      	str	r3, [sp, #12]
 801d370:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801d372:	9302      	str	r3, [sp, #8]
 801d374:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801d376:	9301      	str	r3, [sp, #4]
 801d378:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801d37a:	9300      	str	r3, [sp, #0]
 801d37c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801d37e:	6878      	ldr	r0, [r7, #4]
 801d380:	f000 fae4 	bl	801d94c <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>
 801d384:	4603      	mov	r3, r0
 801d386:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 801d38a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801d38e:	2b00      	cmp	r3, #0
 801d390:	d002      	beq.n	801d398 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x15c>
 801d392:	f897 4057 	ldrb.w	r4, [r7, #87]	; 0x57
 801d396:	e067      	b.n	801d468 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
      context, params->activation, input->type, input, filter, bias, output,
      &(data->reference_op_data)));

  if (input->type == kTfLiteInt8) {
 801d398:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801d39a:	781b      	ldrb	r3, [r3, #0]
 801d39c:	2b09      	cmp	r3, #9
 801d39e:	d162      	bne.n	801d466 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22a>
    RuntimeShape filter_shape = GetTensorShape(filter);
 801d3a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d3a4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801d3a6:	4618      	mov	r0, r3
 801d3a8:	f7fe fa45 	bl	801b836 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    RuntimeShape output_shape = GetTensorShape(output);
 801d3ac:	f107 0318 	add.w	r3, r7, #24
 801d3b0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801d3b2:	4618      	mov	r0, r3
 801d3b4:	f7fe fa3f 	bl	801b836 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>

    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
 801d3b8:	f107 0318 	add.w	r3, r7, #24
 801d3bc:	4618      	mov	r0, r3
 801d3be:	f7fe f9d6 	bl	801b76e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801d3c2:	4603      	mov	r3, r0
 801d3c4:	2b02      	cmp	r3, #2
 801d3c6:	d001      	beq.n	801d3cc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x190>
 801d3c8:	f006 f838 	bl	802343c <abort>
    const int filter_dim_count = filter_shape.DimensionsCount();
 801d3cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d3d0:	4618      	mov	r0, r3
 801d3d2:	f7fe f9cc 	bl	801b76e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801d3d6:	6538      	str	r0, [r7, #80]	; 0x50
    cmsis_nn_dims filter_dims;
    filter_dims.n = filter_shape.Dims(filter_dim_count - 1);
 801d3d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d3da:	1e5a      	subs	r2, r3, #1
 801d3dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d3e0:	4611      	mov	r1, r2
 801d3e2:	4618      	mov	r0, r3
 801d3e4:	f7fe fad0 	bl	801b988 <_ZNK6tflite12RuntimeShape4DimsEi>
 801d3e8:	4603      	mov	r3, r0
 801d3ea:	60bb      	str	r3, [r7, #8]
    filter_dims.h = 1;
 801d3ec:	2301      	movs	r3, #1
 801d3ee:	60fb      	str	r3, [r7, #12]
    filter_dims.w = 1;
 801d3f0:	2301      	movs	r3, #1
 801d3f2:	613b      	str	r3, [r7, #16]
    filter_dims.c = output_shape.Dims(1);
 801d3f4:	f107 0318 	add.w	r3, r7, #24
 801d3f8:	2101      	movs	r1, #1
 801d3fa:	4618      	mov	r0, r3
 801d3fc:	f7fe fac4 	bl	801b988 <_ZNK6tflite12RuntimeShape4DimsEi>
 801d400:	4603      	mov	r3, r0
 801d402:	617b      	str	r3, [r7, #20]

    const int32_t buf_size =
        arm_fully_connected_s8_get_buffer_size(&filter_dims);
 801d404:	f107 0308 	add.w	r3, r7, #8
 801d408:	4618      	mov	r0, r3
 801d40a:	f7f5 f811 	bl	8012430 <arm_fully_connected_s8_get_buffer_size>
 801d40e:	64f8      	str	r0, [r7, #76]	; 0x4c

    if (buf_size > 0) {
 801d410:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d412:	2b00      	cmp	r3, #0
 801d414:	dd11      	ble.n	801d43a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1fe>
      TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
 801d416:	687b      	ldr	r3, [r7, #4]
 801d418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d41a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801d41c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801d41e:	3220      	adds	r2, #32
 801d420:	6878      	ldr	r0, [r7, #4]
 801d422:	4798      	blx	r3
 801d424:	4603      	mov	r3, r0
 801d426:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 801d42a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 801d42e:	2b00      	cmp	r3, #0
 801d430:	d007      	beq.n	801d442 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x206>
 801d432:	f897 404b 	ldrb.w	r4, [r7, #75]	; 0x4b
 801d436:	2500      	movs	r5, #0
 801d438:	e004      	b.n	801d444 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x208>
          context, buf_size, &data->buffer_idx));
    } else {
      data->buffer_idx = -1;
 801d43a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d43c:	f04f 32ff 	mov.w	r2, #4294967295
 801d440:	621a      	str	r2, [r3, #32]
 801d442:	2501      	movs	r5, #1
 801d444:	f107 0318 	add.w	r3, r7, #24
 801d448:	4618      	mov	r0, r3
 801d44a:	f7fe f97a 	bl	801b742 <_ZN6tflite12RuntimeShapeD1Ev>
 801d44e:	2d01      	cmp	r5, #1
 801d450:	d001      	beq.n	801d456 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x21a>
 801d452:	2500      	movs	r5, #0
 801d454:	e000      	b.n	801d458 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x21c>
 801d456:	2501      	movs	r5, #1
 801d458:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d45c:	4618      	mov	r0, r3
 801d45e:	f7fe f970 	bl	801b742 <_ZN6tflite12RuntimeShapeD1Ev>
 801d462:	2d01      	cmp	r5, #1
 801d464:	d100      	bne.n	801d468 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
    }
  }
  return kTfLiteOk;
 801d466:	2400      	movs	r4, #0
}
 801d468:	4623      	mov	r3, r4
 801d46a:	4618      	mov	r0, r3
 801d46c:	3770      	adds	r7, #112	; 0x70
 801d46e:	46bd      	mov	sp, r7
 801d470:	bdb0      	pop	{r4, r5, r7, pc}
 801d472:	bf00      	nop
 801d474:	080296d0 	.word	0x080296d0
 801d478:	08028af4 	.word	0x08028af4
 801d47c:	08028a50 	.word	0x08028a50
 801d480:	08028adc 	.word	0x08028adc
 801d484:	080296d4 	.word	0x080296d4
 801d488:	08028b08 	.word	0x08028b08
 801d48c:	080296d8 	.word	0x080296d8
 801d490:	080296dc 	.word	0x080296dc
 801d494:	08028b1c 	.word	0x08028b1c
 801d498:	08028b4c 	.word	0x08028b4c
 801d49c:	08028b5c 	.word	0x08028b5c
 801d4a0:	08028b30 	.word	0x08028b30
 801d4a4:	08028b68 	.word	0x08028b68

0801d4a8 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_>:
TfLiteStatus EvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,
                               const OpData& data,
                               const TfLiteEvalTensor* input,
                               const TfLiteEvalTensor* filter,
                               const TfLiteEvalTensor* bias,
                               TfLiteEvalTensor* output) {
 801d4a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d4aa:	b0bf      	sub	sp, #252	; 0xfc
 801d4ac:	af08      	add	r7, sp, #32
 801d4ae:	6178      	str	r0, [r7, #20]
 801d4b0:	6139      	str	r1, [r7, #16]
 801d4b2:	60fa      	str	r2, [r7, #12]
 801d4b4:	60bb      	str	r3, [r7, #8]
  const RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 801d4b6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801d4ba:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 801d4be:	4618      	mov	r0, r3
 801d4c0:	f000 faaa 	bl	801da18 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
 801d4c4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801d4c8:	4618      	mov	r0, r3
 801d4ca:	f7fe f950 	bl	801b76e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801d4ce:	4603      	mov	r3, r0
 801d4d0:	2b02      	cmp	r3, #2
 801d4d2:	d001      	beq.n	801d4d8 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x30>
 801d4d4:	f005 ffb2 	bl	802343c <abort>
  const int batches = output_shape.Dims(0);
 801d4d8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801d4dc:	2100      	movs	r1, #0
 801d4de:	4618      	mov	r0, r3
 801d4e0:	f7fe fa52 	bl	801b988 <_ZNK6tflite12RuntimeShape4DimsEi>
 801d4e4:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  const int output_depth = output_shape.Dims(1);
 801d4e8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801d4ec:	2101      	movs	r1, #1
 801d4ee:	4618      	mov	r0, r3
 801d4f0:	f7fe fa4a 	bl	801b988 <_ZNK6tflite12RuntimeShape4DimsEi>
 801d4f4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
  const RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 801d4f8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801d4fc:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 801d500:	4618      	mov	r0, r3
 801d502:	f000 fa89 	bl	801da18 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  const int filter_dim_count = filter_shape.DimensionsCount();
 801d506:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801d50a:	4618      	mov	r0, r3
 801d50c:	f7fe f92f 	bl	801b76e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801d510:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 801d514:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801d518:	1e5a      	subs	r2, r3, #1
 801d51a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801d51e:	4611      	mov	r1, r2
 801d520:	4618      	mov	r0, r3
 801d522:	f7fe fa31 	bl	801b988 <_ZNK6tflite12RuntimeShape4DimsEi>
 801d526:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
  const RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 801d52a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801d52e:	68b9      	ldr	r1, [r7, #8]
 801d530:	4618      	mov	r0, r3
 801d532:	f000 fa71 	bl	801da18 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>

  cmsis_nn_fc_params fc_params;
  fc_params.input_offset = -data.reference_op_data.input_zero_point;
 801d536:	68fb      	ldr	r3, [r7, #12]
 801d538:	695b      	ldr	r3, [r3, #20]
 801d53a:	425b      	negs	r3, r3
 801d53c:	66fb      	str	r3, [r7, #108]	; 0x6c
  fc_params.output_offset = data.reference_op_data.output_zero_point;
 801d53e:	68fb      	ldr	r3, [r7, #12]
 801d540:	69db      	ldr	r3, [r3, #28]
 801d542:	677b      	str	r3, [r7, #116]	; 0x74
  fc_params.filter_offset = -data.reference_op_data.filter_zero_point;
 801d544:	68fb      	ldr	r3, [r7, #12]
 801d546:	699b      	ldr	r3, [r3, #24]
 801d548:	425b      	negs	r3, r3
 801d54a:	673b      	str	r3, [r7, #112]	; 0x70
  fc_params.activation.min = data.reference_op_data.output_activation_min;
 801d54c:	68fb      	ldr	r3, [r7, #12]
 801d54e:	689b      	ldr	r3, [r3, #8]
 801d550:	67bb      	str	r3, [r7, #120]	; 0x78
  fc_params.activation.max = data.reference_op_data.output_activation_max;
 801d552:	68fb      	ldr	r3, [r7, #12]
 801d554:	68db      	ldr	r3, [r3, #12]
 801d556:	67fb      	str	r3, [r7, #124]	; 0x7c

  cmsis_nn_per_tensor_quant_params quant_params;
  quant_params.multiplier = data.reference_op_data.output_multiplier;
 801d558:	68fb      	ldr	r3, [r7, #12]
 801d55a:	681b      	ldr	r3, [r3, #0]
 801d55c:	667b      	str	r3, [r7, #100]	; 0x64
  quant_params.shift = data.reference_op_data.output_shift;
 801d55e:	68fb      	ldr	r3, [r7, #12]
 801d560:	685b      	ldr	r3, [r3, #4]
 801d562:	66bb      	str	r3, [r7, #104]	; 0x68

  cmsis_nn_dims input_dims;
  input_dims.n = batches;
 801d564:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801d568:	657b      	str	r3, [r7, #84]	; 0x54
  input_dims.h = 1;
 801d56a:	2301      	movs	r3, #1
 801d56c:	65bb      	str	r3, [r7, #88]	; 0x58
  input_dims.w = 1;
 801d56e:	2301      	movs	r3, #1
 801d570:	65fb      	str	r3, [r7, #92]	; 0x5c
  input_dims.c = accum_depth;
 801d572:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801d576:	663b      	str	r3, [r7, #96]	; 0x60

  cmsis_nn_dims filter_dims;
  filter_dims.n = accum_depth;
 801d578:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801d57c:	647b      	str	r3, [r7, #68]	; 0x44
  filter_dims.h = 1;
 801d57e:	2301      	movs	r3, #1
 801d580:	64bb      	str	r3, [r7, #72]	; 0x48
  filter_dims.w = 1;
 801d582:	2301      	movs	r3, #1
 801d584:	64fb      	str	r3, [r7, #76]	; 0x4c
  filter_dims.c = output_depth;
 801d586:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801d58a:	653b      	str	r3, [r7, #80]	; 0x50

  cmsis_nn_dims bias_dims;
  bias_dims.n = 1;
 801d58c:	2301      	movs	r3, #1
 801d58e:	637b      	str	r3, [r7, #52]	; 0x34
  bias_dims.h = 1;
 801d590:	2301      	movs	r3, #1
 801d592:	63bb      	str	r3, [r7, #56]	; 0x38
  bias_dims.w = 1;
 801d594:	2301      	movs	r3, #1
 801d596:	63fb      	str	r3, [r7, #60]	; 0x3c
  bias_dims.c = output_depth;
 801d598:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801d59c:	643b      	str	r3, [r7, #64]	; 0x40

  cmsis_nn_dims output_dims;
  output_dims.n = batches;
 801d59e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801d5a2:	627b      	str	r3, [r7, #36]	; 0x24
  output_dims.h = 1;
 801d5a4:	2301      	movs	r3, #1
 801d5a6:	62bb      	str	r3, [r7, #40]	; 0x28
  output_dims.w = 1;
 801d5a8:	2301      	movs	r3, #1
 801d5aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  output_dims.c = output_depth;
 801d5ac:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801d5b0:	633b      	str	r3, [r7, #48]	; 0x30

  cmsis_nn_context ctx;
  ctx.buf = nullptr;
 801d5b2:	2300      	movs	r3, #0
 801d5b4:	61fb      	str	r3, [r7, #28]
  ctx.size = 0;
 801d5b6:	2300      	movs	r3, #0
 801d5b8:	623b      	str	r3, [r7, #32]

  if (data.buffer_idx > -1) {
 801d5ba:	68fb      	ldr	r3, [r7, #12]
 801d5bc:	6a1b      	ldr	r3, [r3, #32]
 801d5be:	2b00      	cmp	r3, #0
 801d5c0:	db08      	blt.n	801d5d4 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x12c>
    ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
 801d5c2:	697b      	ldr	r3, [r7, #20]
 801d5c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d5c6:	68fa      	ldr	r2, [r7, #12]
 801d5c8:	6a12      	ldr	r2, [r2, #32]
 801d5ca:	4611      	mov	r1, r2
 801d5cc:	6978      	ldr	r0, [r7, #20]
 801d5ce:	4798      	blx	r3
 801d5d0:	4603      	mov	r3, r0
 801d5d2:	61fb      	str	r3, [r7, #28]
  }

  TF_LITE_ENSURE_EQ(
 801d5d4:	68b8      	ldr	r0, [r7, #8]
 801d5d6:	f7fe ffa9 	bl	801c52c <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 801d5da:	4605      	mov	r5, r0
 801d5dc:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 801d5e0:	f7fe ffa4 	bl	801c52c <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 801d5e4:	4606      	mov	r6, r0
 801d5e6:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 801d5ea:	f7ff fa20 	bl	801ca2e <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 801d5ee:	6078      	str	r0, [r7, #4]
 801d5f0:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 801d5f4:	f7fe ffa9 	bl	801c54a <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 801d5f8:	4603      	mov	r3, r0
 801d5fa:	f107 0454 	add.w	r4, r7, #84	; 0x54
 801d5fe:	f107 0264 	add.w	r2, r7, #100	; 0x64
 801d602:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 801d606:	f107 001c 	add.w	r0, r7, #28
 801d60a:	9306      	str	r3, [sp, #24]
 801d60c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d610:	9305      	str	r3, [sp, #20]
 801d612:	687b      	ldr	r3, [r7, #4]
 801d614:	9304      	str	r3, [sp, #16]
 801d616:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801d61a:	9303      	str	r3, [sp, #12]
 801d61c:	9602      	str	r6, [sp, #8]
 801d61e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801d622:	9301      	str	r3, [sp, #4]
 801d624:	9500      	str	r5, [sp, #0]
 801d626:	4623      	mov	r3, r4
 801d628:	f7f4 febb 	bl	80123a2 <arm_fully_connected_s8>
 801d62c:	4603      	mov	r3, r0
 801d62e:	2b00      	cmp	r3, #0
 801d630:	bf14      	ite	ne
 801d632:	2301      	movne	r3, #1
 801d634:	2300      	moveq	r3, #0
 801d636:	b2db      	uxtb	r3, r3
 801d638:	2b00      	cmp	r3, #0
 801d63a:	d03e      	beq.n	801d6ba <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x212>
 801d63c:	697b      	ldr	r3, [r7, #20]
 801d63e:	695c      	ldr	r4, [r3, #20]
 801d640:	68b8      	ldr	r0, [r7, #8]
 801d642:	f7fe ff73 	bl	801c52c <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 801d646:	4606      	mov	r6, r0
 801d648:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 801d64c:	f7fe ff6e 	bl	801c52c <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 801d650:	6078      	str	r0, [r7, #4]
 801d652:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 801d656:	f7ff f9ea 	bl	801ca2e <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 801d65a:	6038      	str	r0, [r7, #0]
 801d65c:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 801d660:	f7fe ff73 	bl	801c54a <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 801d664:	4603      	mov	r3, r0
 801d666:	f107 0554 	add.w	r5, r7, #84	; 0x54
 801d66a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 801d66e:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 801d672:	f107 001c 	add.w	r0, r7, #28
 801d676:	9306      	str	r3, [sp, #24]
 801d678:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d67c:	9305      	str	r3, [sp, #20]
 801d67e:	683b      	ldr	r3, [r7, #0]
 801d680:	9304      	str	r3, [sp, #16]
 801d682:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801d686:	9303      	str	r3, [sp, #12]
 801d688:	687b      	ldr	r3, [r7, #4]
 801d68a:	9302      	str	r3, [sp, #8]
 801d68c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801d690:	9301      	str	r3, [sp, #4]
 801d692:	9600      	str	r6, [sp, #0]
 801d694:	462b      	mov	r3, r5
 801d696:	f7f4 fe84 	bl	80123a2 <arm_fully_connected_s8>
 801d69a:	4603      	mov	r3, r0
 801d69c:	461a      	mov	r2, r3
 801d69e:	2300      	movs	r3, #0
 801d6a0:	9303      	str	r3, [sp, #12]
 801d6a2:	9202      	str	r2, [sp, #8]
 801d6a4:	4b0f      	ldr	r3, [pc, #60]	; (801d6e4 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x23c>)
 801d6a6:	9301      	str	r3, [sp, #4]
 801d6a8:	4b0f      	ldr	r3, [pc, #60]	; (801d6e8 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x240>)
 801d6aa:	9300      	str	r3, [sp, #0]
 801d6ac:	23a6      	movs	r3, #166	; 0xa6
 801d6ae:	4a0f      	ldr	r2, [pc, #60]	; (801d6ec <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x244>)
 801d6b0:	490f      	ldr	r1, [pc, #60]	; (801d6f0 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x248>)
 801d6b2:	6978      	ldr	r0, [r7, #20]
 801d6b4:	47a0      	blx	r4
 801d6b6:	2401      	movs	r4, #1
 801d6b8:	e000      	b.n	801d6bc <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x214>
          tflite::micro::GetTensorData<int8_t>(filter), &bias_dims,
          tflite::micro::GetTensorData<int32_t>(bias), &output_dims,
          tflite::micro::GetTensorData<int8_t>(output)),
      ARM_MATH_SUCCESS);

  return kTfLiteOk;
 801d6ba:	2400      	movs	r4, #0
  const RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 801d6bc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801d6c0:	4618      	mov	r0, r3
 801d6c2:	f7fe f83e 	bl	801b742 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 801d6c6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801d6ca:	4618      	mov	r0, r3
 801d6cc:	f7fe f839 	bl	801b742 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 801d6d0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801d6d4:	4618      	mov	r0, r3
 801d6d6:	f7fe f834 	bl	801b742 <_ZN6tflite12RuntimeShapeD1Ev>
}
 801d6da:	4623      	mov	r3, r4
 801d6dc:	4618      	mov	r0, r3
 801d6de:	37dc      	adds	r7, #220	; 0xdc
 801d6e0:	46bd      	mov	sp, r7
 801d6e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d6e4:	08028c44 	.word	0x08028c44
 801d6e8:	08028c58 	.word	0x08028c58
 801d6ec:	08028a50 	.word	0x08028a50
 801d6f0:	08028c28 	.word	0x08028c28

0801d6f4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 801d6f4:	b590      	push	{r4, r7, lr}
 801d6f6:	b0d1      	sub	sp, #324	; 0x144
 801d6f8:	af04      	add	r7, sp, #16
 801d6fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801d6fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801d702:	6018      	str	r0, [r3, #0]
 801d704:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801d708:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801d70c:	6019      	str	r1, [r3, #0]
  TFLITE_DCHECK(node->builtin_data != nullptr);
 801d70e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801d712:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801d716:	681b      	ldr	r3, [r3, #0]
 801d718:	695b      	ldr	r3, [r3, #20]
 801d71a:	2b00      	cmp	r3, #0
 801d71c:	d101      	bne.n	801d722 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2e>
 801d71e:	f005 fe8d 	bl	802343c <abort>
  const auto* params =
 801d722:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801d726:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801d72a:	681b      	ldr	r3, [r3, #0]
 801d72c:	695b      	ldr	r3, [r3, #20]
 801d72e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedInputTensor);
 801d732:	4b67      	ldr	r3, [pc, #412]	; (801d8d0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1dc>)
 801d734:	681a      	ldr	r2, [r3, #0]
 801d736:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801d73a:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 801d73e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801d742:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801d746:	6809      	ldr	r1, [r1, #0]
 801d748:	6818      	ldr	r0, [r3, #0]
 801d74a:	f7fe f9f1 	bl	801bb30 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 801d74e:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedWeightsTensor);
 801d752:	4b60      	ldr	r3, [pc, #384]	; (801d8d4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1e0>)
 801d754:	681a      	ldr	r2, [r3, #0]
 801d756:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801d75a:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 801d75e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801d762:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801d766:	6809      	ldr	r1, [r1, #0]
 801d768:	6818      	ldr	r0, [r3, #0]
 801d76a:	f7fe f9e1 	bl	801bb30 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 801d76e:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
  const TfLiteEvalTensor* bias =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedBiasTensor);
 801d772:	4b59      	ldr	r3, [pc, #356]	; (801d8d8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1e4>)
 801d774:	681a      	ldr	r2, [r3, #0]
 801d776:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801d77a:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 801d77e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801d782:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801d786:	6809      	ldr	r1, [r1, #0]
 801d788:	6818      	ldr	r0, [r3, #0]
 801d78a:	f7fe f9d1 	bl	801bb30 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 801d78e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kFullyConnectedOutputTensor);
 801d792:	4b52      	ldr	r3, [pc, #328]	; (801d8dc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1e8>)
 801d794:	681a      	ldr	r2, [r3, #0]
 801d796:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801d79a:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 801d79e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801d7a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801d7a6:	6809      	ldr	r1, [r1, #0]
 801d7a8:	6818      	ldr	r0, [r3, #0]
 801d7aa:	f7fe f9d1 	bl	801bb50 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 801d7ae:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c

  TFLITE_DCHECK(node->user_data != nullptr);
 801d7b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801d7b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801d7ba:	681b      	ldr	r3, [r3, #0]
 801d7bc:	691b      	ldr	r3, [r3, #16]
 801d7be:	2b00      	cmp	r3, #0
 801d7c0:	d101      	bne.n	801d7c6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd2>
 801d7c2:	f005 fe3b 	bl	802343c <abort>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 801d7c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801d7ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801d7ce:	681b      	ldr	r3, [r3, #0]
 801d7d0:	691b      	ldr	r3, [r3, #16]
 801d7d2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

  // Checks in Prepare ensure input, output and filter types are all the same.
  switch (input->type) {
 801d7d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801d7da:	7a1b      	ldrb	r3, [r3, #8]
 801d7dc:	2b09      	cmp	r3, #9
 801d7de:	d021      	beq.n	801d824 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x130>
 801d7e0:	2b09      	cmp	r3, #9
 801d7e2:	dc55      	bgt.n	801d890 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x19c>
 801d7e4:	2b01      	cmp	r3, #1
 801d7e6:	d002      	beq.n	801d7ee <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xfa>
 801d7e8:	2b03      	cmp	r3, #3
 801d7ea:	d036      	beq.n	801d85a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x166>
 801d7ec:	e050      	b.n	801d890 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x19c>
    case kTfLiteFloat32: {
      #if EI_TFLITE_DISABLE_FULLY_CONNECTED_IN_F32
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 801d7ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801d7f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801d7f6:	681b      	ldr	r3, [r3, #0]
 801d7f8:	695c      	ldr	r4, [r3, #20]
 801d7fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801d7fe:	7a1b      	ldrb	r3, [r3, #8]
 801d800:	4618      	mov	r0, r3
 801d802:	f7fd fa43 	bl	801ac8c <TfLiteTypeGetName>
 801d806:	4602      	mov	r2, r0
 801d808:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801d80c:	7a1b      	ldrb	r3, [r3, #8]
 801d80e:	4619      	mov	r1, r3
 801d810:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801d814:	f5a3 7096 	sub.w	r0, r3, #300	; 0x12c
 801d818:	460b      	mov	r3, r1
 801d81a:	4931      	ldr	r1, [pc, #196]	; (801d8e0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ec>)
 801d81c:	6800      	ldr	r0, [r0, #0]
 801d81e:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 801d820:	2301      	movs	r3, #1
 801d822:	e04f      	b.n	801d8c4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1d0>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
      #endif

      return EvalQuantizedInt8(context, node, data, input, filter, bias,
 801d824:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801d828:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 801d82c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801d830:	f5a3 7096 	sub.w	r0, r3, #300	; 0x12c
 801d834:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801d838:	9302      	str	r3, [sp, #8]
 801d83a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801d83e:	9301      	str	r3, [sp, #4]
 801d840:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801d844:	9300      	str	r3, [sp, #0]
 801d846:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801d84a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 801d84e:	6809      	ldr	r1, [r1, #0]
 801d850:	6800      	ldr	r0, [r0, #0]
 801d852:	f7ff fe29 	bl	801d4a8 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_>
 801d856:	4603      	mov	r3, r0
                               output);
 801d858:	e034      	b.n	801d8c4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1d0>
    }
    case kTfLiteUInt8: {
      #if EI_TFLITE_DISABLE_FULLY_CONNECTED_IN_U8
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 801d85a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801d85e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801d862:	681b      	ldr	r3, [r3, #0]
 801d864:	695c      	ldr	r4, [r3, #20]
 801d866:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801d86a:	7a1b      	ldrb	r3, [r3, #8]
 801d86c:	4618      	mov	r0, r3
 801d86e:	f7fd fa0d 	bl	801ac8c <TfLiteTypeGetName>
 801d872:	4602      	mov	r2, r0
 801d874:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801d878:	7a1b      	ldrb	r3, [r3, #8]
 801d87a:	4619      	mov	r1, r3
 801d87c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801d880:	f5a3 7096 	sub.w	r0, r3, #300	; 0x12c
 801d884:	460b      	mov	r3, r1
 801d886:	4916      	ldr	r1, [pc, #88]	; (801d8e0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ec>)
 801d888:	6800      	ldr	r0, [r0, #0]
 801d88a:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 801d88c:	2301      	movs	r3, #1
 801d88e:	e019      	b.n	801d8c4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1d0>
          tflite::micro::GetTensorShape(output),
          tflite::micro::GetTensorData<uint8_t>(output));
      break;
    }
    default: {
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 801d890:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801d894:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801d898:	681b      	ldr	r3, [r3, #0]
 801d89a:	695c      	ldr	r4, [r3, #20]
 801d89c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801d8a0:	7a1b      	ldrb	r3, [r3, #8]
 801d8a2:	4618      	mov	r0, r3
 801d8a4:	f7fd f9f2 	bl	801ac8c <TfLiteTypeGetName>
 801d8a8:	4602      	mov	r2, r0
 801d8aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801d8ae:	7a1b      	ldrb	r3, [r3, #8]
 801d8b0:	4619      	mov	r1, r3
 801d8b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801d8b6:	f5a3 7096 	sub.w	r0, r3, #300	; 0x12c
 801d8ba:	460b      	mov	r3, r1
 801d8bc:	4908      	ldr	r1, [pc, #32]	; (801d8e0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ec>)
 801d8be:	6800      	ldr	r0, [r0, #0]
 801d8c0:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 801d8c2:	2301      	movs	r3, #1
    }
  }
  return kTfLiteOk;
}
 801d8c4:	4618      	mov	r0, r3
 801d8c6:	f507 779a 	add.w	r7, r7, #308	; 0x134
 801d8ca:	46bd      	mov	sp, r7
 801d8cc:	bd90      	pop	{r4, r7, pc}
 801d8ce:	bf00      	nop
 801d8d0:	080296d0 	.word	0x080296d0
 801d8d4:	080296d4 	.word	0x080296d4
 801d8d8:	080296d8 	.word	0x080296d8
 801d8dc:	080296dc 	.word	0x080296dc
 801d8e0:	08028d7c 	.word	0x08028d7c

0801d8e4 <_ZN6tflite24Register_FULLY_CONNECTEDEv>:
  return EvalQuantizedInt8(context, node, data, input, filter, bias, output);
}

}  // namespace

TfLiteRegistration Register_FULLY_CONNECTED() {
 801d8e4:	b4b0      	push	{r4, r5, r7}
 801d8e6:	b083      	sub	sp, #12
 801d8e8:	af00      	add	r7, sp, #0
 801d8ea:	6078      	str	r0, [r7, #4]
  fully_connected_registration.init = Init;
 801d8ec:	4b13      	ldr	r3, [pc, #76]	; (801d93c <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 801d8ee:	4a14      	ldr	r2, [pc, #80]	; (801d940 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x5c>)
 801d8f0:	601a      	str	r2, [r3, #0]
  fully_connected_registration.free = nullptr;
 801d8f2:	4b12      	ldr	r3, [pc, #72]	; (801d93c <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 801d8f4:	2200      	movs	r2, #0
 801d8f6:	605a      	str	r2, [r3, #4]
  fully_connected_registration.prepare = Prepare;
 801d8f8:	4b10      	ldr	r3, [pc, #64]	; (801d93c <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 801d8fa:	4a12      	ldr	r2, [pc, #72]	; (801d944 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x60>)
 801d8fc:	609a      	str	r2, [r3, #8]
  fully_connected_registration.invoke = Eval;
 801d8fe:	4b0f      	ldr	r3, [pc, #60]	; (801d93c <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 801d900:	4a11      	ldr	r2, [pc, #68]	; (801d948 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x64>)
 801d902:	60da      	str	r2, [r3, #12]
  fully_connected_registration.profiling_string = nullptr;
 801d904:	4b0d      	ldr	r3, [pc, #52]	; (801d93c <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 801d906:	2200      	movs	r2, #0
 801d908:	611a      	str	r2, [r3, #16]
  fully_connected_registration.builtin_code = 0;
 801d90a:	4b0c      	ldr	r3, [pc, #48]	; (801d93c <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 801d90c:	2200      	movs	r2, #0
 801d90e:	615a      	str	r2, [r3, #20]
  fully_connected_registration.custom_name = nullptr;
 801d910:	4b0a      	ldr	r3, [pc, #40]	; (801d93c <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 801d912:	2200      	movs	r2, #0
 801d914:	619a      	str	r2, [r3, #24]
  fully_connected_registration.version = 0;
 801d916:	4b09      	ldr	r3, [pc, #36]	; (801d93c <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 801d918:	2200      	movs	r2, #0
 801d91a:	61da      	str	r2, [r3, #28]
  return fully_connected_registration;
 801d91c:	687b      	ldr	r3, [r7, #4]
 801d91e:	4a07      	ldr	r2, [pc, #28]	; (801d93c <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 801d920:	461c      	mov	r4, r3
 801d922:	4615      	mov	r5, r2
 801d924:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801d926:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801d928:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801d92c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 801d930:	6878      	ldr	r0, [r7, #4]
 801d932:	370c      	adds	r7, #12
 801d934:	46bd      	mov	sp, r7
 801d936:	bcb0      	pop	{r4, r5, r7}
 801d938:	4770      	bx	lr
 801d93a:	bf00      	nop
 801d93c:	20001ef8 	.word	0x20001ef8
 801d940:	0801d20f 	.word	0x0801d20f
 801d944:	0801d23d 	.word	0x0801d23d
 801d948:	0801d6f5 	.word	0x0801d6f5

0801d94c <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>:

TfLiteStatus CalculateOpDataFullyConnected(
    TfLiteContext* context, TfLiteFusedActivation activation,
    TfLiteType data_type, const TfLiteTensor* input, const TfLiteTensor* filter,
    const TfLiteTensor* bias, TfLiteTensor* output,
    OpDataFullyConnected* data) {
 801d94c:	b580      	push	{r7, lr}
 801d94e:	b08a      	sub	sp, #40	; 0x28
 801d950:	af02      	add	r7, sp, #8
 801d952:	60f8      	str	r0, [r7, #12]
 801d954:	607b      	str	r3, [r7, #4]
 801d956:	460b      	mov	r3, r1
 801d958:	72fb      	strb	r3, [r7, #11]
 801d95a:	4613      	mov	r3, r2
 801d95c:	72bb      	strb	r3, [r7, #10]
  if (data_type != kTfLiteFloat32) {
 801d95e:	7abb      	ldrb	r3, [r7, #10]
 801d960:	2b01      	cmp	r3, #1
 801d962:	d03e      	beq.n	801d9e2 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x96>
    double real_multiplier = 0.0;
 801d964:	f04f 0200 	mov.w	r2, #0
 801d968:	f04f 0300 	mov.w	r3, #0
 801d96c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 801d970:	f107 0310 	add.w	r3, r7, #16
 801d974:	9301      	str	r3, [sp, #4]
 801d976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d978:	9300      	str	r3, [sp, #0]
 801d97a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d97c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d97e:	6879      	ldr	r1, [r7, #4]
 801d980:	68f8      	ldr	r0, [r7, #12]
 801d982:	f7fd fcb5 	bl	801b2f0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 801d986:	4603      	mov	r3, r0
 801d988:	77fb      	strb	r3, [r7, #31]
 801d98a:	7ffb      	ldrb	r3, [r7, #31]
 801d98c:	2b00      	cmp	r3, #0
 801d98e:	d001      	beq.n	801d994 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x48>
 801d990:	7ffb      	ldrb	r3, [r7, #31]
 801d992:	e027      	b.n	801d9e4 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x98>
        context, input, filter, bias, output, &real_multiplier));
    QuantizeMultiplier(real_multiplier, &data->output_multiplier,
 801d994:	ed97 7b04 	vldr	d7, [r7, #16]
 801d998:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801d99a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d99c:	3304      	adds	r3, #4
 801d99e:	4619      	mov	r1, r3
 801d9a0:	4610      	mov	r0, r2
 801d9a2:	eeb0 0a47 	vmov.f32	s0, s14
 801d9a6:	eef0 0a67 	vmov.f32	s1, s15
 801d9aa:	f7fd f9f5 	bl	801ad98 <_ZN6tflite18QuantizeMultiplierEdPlPi>
                       &data->output_shift);

    data->input_zero_point = input->params.zero_point;
 801d9ae:	687b      	ldr	r3, [r7, #4]
 801d9b0:	691a      	ldr	r2, [r3, #16]
 801d9b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d9b4:	615a      	str	r2, [r3, #20]
    data->filter_zero_point = filter->params.zero_point;
 801d9b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d9b8:	691a      	ldr	r2, [r3, #16]
 801d9ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d9bc:	619a      	str	r2, [r3, #24]
    data->output_zero_point = output->params.zero_point;
 801d9be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d9c0:	691a      	ldr	r2, [r3, #16]
 801d9c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d9c4:	61da      	str	r2, [r3, #28]

    return CalculateActivationRangeQuantized(context, activation, output,
 801d9c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d9c8:	f103 0208 	add.w	r2, r3, #8
 801d9cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d9ce:	330c      	adds	r3, #12
 801d9d0:	7af9      	ldrb	r1, [r7, #11]
 801d9d2:	9300      	str	r3, [sp, #0]
 801d9d4:	4613      	mov	r3, r2
 801d9d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d9d8:	68f8      	ldr	r0, [r7, #12]
 801d9da:	f7fd fe15 	bl	801b608 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 801d9de:	4603      	mov	r3, r0
                                             &data->output_activation_min,
                                             &data->output_activation_max);
 801d9e0:	e000      	b.n	801d9e4 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x98>
  }
  return kTfLiteOk;
 801d9e2:	2300      	movs	r3, #0
}
 801d9e4:	4618      	mov	r0, r3
 801d9e6:	3720      	adds	r7, #32
 801d9e8:	46bd      	mov	sp, r7
 801d9ea:	bd80      	pop	{r7, pc}

0801d9ec <_ZSt3maxIsERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 801d9ec:	b480      	push	{r7}
 801d9ee:	b083      	sub	sp, #12
 801d9f0:	af00      	add	r7, sp, #0
 801d9f2:	6078      	str	r0, [r7, #4]
 801d9f4:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 801d9f6:	687b      	ldr	r3, [r7, #4]
 801d9f8:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d9fc:	683b      	ldr	r3, [r7, #0]
 801d9fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 801da02:	429a      	cmp	r2, r3
 801da04:	da01      	bge.n	801da0a <_ZSt3maxIsERKT_S2_S2_+0x1e>
	return __b;
 801da06:	683b      	ldr	r3, [r7, #0]
 801da08:	e000      	b.n	801da0c <_ZSt3maxIsERKT_S2_S2_+0x20>
      return __a;
 801da0a:	687b      	ldr	r3, [r7, #4]
    }
 801da0c:	4618      	mov	r0, r3
 801da0e:	370c      	adds	r7, #12
 801da10:	46bd      	mov	sp, r7
 801da12:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da16:	4770      	bx	lr

0801da18 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>:
  TFLITE_DCHECK(input1 != nullptr);
  TFLITE_DCHECK(input2 != nullptr);
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
}

const RuntimeShape GetTensorShape(const TfLiteEvalTensor* tensor) {
 801da18:	b580      	push	{r7, lr}
 801da1a:	b086      	sub	sp, #24
 801da1c:	af00      	add	r7, sp, #0
 801da1e:	6078      	str	r0, [r7, #4]
 801da20:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr || tensor->dims == nullptr) {
 801da22:	683b      	ldr	r3, [r7, #0]
 801da24:	2b00      	cmp	r3, #0
 801da26:	d003      	beq.n	801da30 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x18>
 801da28:	683b      	ldr	r3, [r7, #0]
 801da2a:	685b      	ldr	r3, [r3, #4]
 801da2c:	2b00      	cmp	r3, #0
 801da2e:	d103      	bne.n	801da38 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x20>
    return RuntimeShape();
 801da30:	6878      	ldr	r0, [r7, #4]
 801da32:	f7fd fe65 	bl	801b700 <_ZN6tflite12RuntimeShapeC1Ev>
 801da36:	e00d      	b.n	801da54 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x3c>
  }
  TfLiteIntArray* dims = tensor->dims;
 801da38:	683b      	ldr	r3, [r7, #0]
 801da3a:	685b      	ldr	r3, [r3, #4]
 801da3c:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 801da3e:	697b      	ldr	r3, [r7, #20]
 801da40:	681b      	ldr	r3, [r3, #0]
 801da42:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 801da44:	697b      	ldr	r3, [r7, #20]
 801da46:	3304      	adds	r3, #4
 801da48:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 801da4a:	68fa      	ldr	r2, [r7, #12]
 801da4c:	6939      	ldr	r1, [r7, #16]
 801da4e:	6878      	ldr	r0, [r7, #4]
 801da50:	f7fd fe64 	bl	801b71c <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 801da54:	6878      	ldr	r0, [r7, #4]
 801da56:	3718      	adds	r7, #24
 801da58:	46bd      	mov	sp, r7
 801da5a:	bd80      	pop	{r7, pc}

0801da5c <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>:
}

// Data is required to be contiguous, and so many operators can use either the
// full array flat size or the flat size with one dimension skipped (commonly
// the depth).
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
 801da5c:	b580      	push	{r7, lr}
 801da5e:	b086      	sub	sp, #24
 801da60:	af00      	add	r7, sp, #0
 801da62:	6078      	str	r0, [r7, #4]
 801da64:	6039      	str	r1, [r7, #0]
  const int dims_count = shape.DimensionsCount();
 801da66:	6878      	ldr	r0, [r7, #4]
 801da68:	f7fd fe81 	bl	801b76e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801da6c:	60f8      	str	r0, [r7, #12]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 801da6e:	683b      	ldr	r3, [r7, #0]
 801da70:	2b00      	cmp	r3, #0
 801da72:	db03      	blt.n	801da7c <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x20>
 801da74:	683a      	ldr	r2, [r7, #0]
 801da76:	68fb      	ldr	r3, [r7, #12]
 801da78:	429a      	cmp	r2, r3
 801da7a:	db01      	blt.n	801da80 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x24>
 801da7c:	f005 fcde 	bl	802343c <abort>
  const auto* dims_data = shape.DimsData();
 801da80:	6878      	ldr	r0, [r7, #4]
 801da82:	f7fd ffa6 	bl	801b9d2 <_ZNK6tflite12RuntimeShape8DimsDataEv>
 801da86:	60b8      	str	r0, [r7, #8]
  int flat_size = 1;
 801da88:	2301      	movs	r3, #1
 801da8a:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 801da8c:	2300      	movs	r3, #0
 801da8e:	613b      	str	r3, [r7, #16]
 801da90:	693a      	ldr	r2, [r7, #16]
 801da92:	68fb      	ldr	r3, [r7, #12]
 801da94:	429a      	cmp	r2, r3
 801da96:	da12      	bge.n	801dabe <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x62>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 801da98:	693a      	ldr	r2, [r7, #16]
 801da9a:	683b      	ldr	r3, [r7, #0]
 801da9c:	429a      	cmp	r2, r3
 801da9e:	d005      	beq.n	801daac <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x50>
 801daa0:	693b      	ldr	r3, [r7, #16]
 801daa2:	009b      	lsls	r3, r3, #2
 801daa4:	68ba      	ldr	r2, [r7, #8]
 801daa6:	4413      	add	r3, r2
 801daa8:	681b      	ldr	r3, [r3, #0]
 801daaa:	e000      	b.n	801daae <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x52>
 801daac:	2301      	movs	r3, #1
 801daae:	697a      	ldr	r2, [r7, #20]
 801dab0:	fb02 f303 	mul.w	r3, r2, r3
 801dab4:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 801dab6:	693b      	ldr	r3, [r7, #16]
 801dab8:	3301      	adds	r3, #1
 801daba:	613b      	str	r3, [r7, #16]
 801dabc:	e7e8      	b.n	801da90 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x34>
  }
  return flat_size;
 801dabe:	697b      	ldr	r3, [r7, #20]
}
 801dac0:	4618      	mov	r0, r3
 801dac2:	3718      	adds	r7, #24
 801dac4:	46bd      	mov	sp, r7
 801dac6:	bd80      	pop	{r7, pc}

0801dac8 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>:

// A combination of MatchingFlatSize() and FlatSizeSkipDim().
inline int MatchingFlatSizeSkipDim(const RuntimeShape& shape, int skip_dim,
                                   const RuntimeShape& check_shape_0) {
 801dac8:	b590      	push	{r4, r7, lr}
 801daca:	b087      	sub	sp, #28
 801dacc:	af00      	add	r7, sp, #0
 801dace:	60f8      	str	r0, [r7, #12]
 801dad0:	60b9      	str	r1, [r7, #8]
 801dad2:	607a      	str	r2, [r7, #4]
  const int dims_count = shape.DimensionsCount();
 801dad4:	68f8      	ldr	r0, [r7, #12]
 801dad6:	f7fd fe4a 	bl	801b76e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801dada:	6138      	str	r0, [r7, #16]
  for (int i = 0; i < dims_count; ++i) {
 801dadc:	2300      	movs	r3, #0
 801dade:	617b      	str	r3, [r7, #20]
 801dae0:	697a      	ldr	r2, [r7, #20]
 801dae2:	693b      	ldr	r3, [r7, #16]
 801dae4:	429a      	cmp	r2, r3
 801dae6:	da15      	bge.n	801db14 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x4c>
    if (i != skip_dim) {
 801dae8:	697a      	ldr	r2, [r7, #20]
 801daea:	68bb      	ldr	r3, [r7, #8]
 801daec:	429a      	cmp	r2, r3
 801daee:	d00d      	beq.n	801db0c <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 801daf0:	6979      	ldr	r1, [r7, #20]
 801daf2:	68f8      	ldr	r0, [r7, #12]
 801daf4:	f7fd ff48 	bl	801b988 <_ZNK6tflite12RuntimeShape4DimsEi>
 801daf8:	4604      	mov	r4, r0
 801dafa:	6979      	ldr	r1, [r7, #20]
 801dafc:	6878      	ldr	r0, [r7, #4]
 801dafe:	f7fd ff43 	bl	801b988 <_ZNK6tflite12RuntimeShape4DimsEi>
 801db02:	4603      	mov	r3, r0
 801db04:	429c      	cmp	r4, r3
 801db06:	d001      	beq.n	801db0c <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
 801db08:	f005 fc98 	bl	802343c <abort>
  for (int i = 0; i < dims_count; ++i) {
 801db0c:	697b      	ldr	r3, [r7, #20]
 801db0e:	3301      	adds	r3, #1
 801db10:	617b      	str	r3, [r7, #20]
 801db12:	e7e5      	b.n	801dae0 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x18>
    }
  }
  return FlatSizeSkipDim(shape, skip_dim);
 801db14:	68b9      	ldr	r1, [r7, #8]
 801db16:	68f8      	ldr	r0, [r7, #12]
 801db18:	f7ff ffa0 	bl	801da5c <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 801db1c:	4603      	mov	r3, r0
}
 801db1e:	4618      	mov	r0, r3
 801db20:	371c      	adds	r7, #28
 801db22:	46bd      	mov	sp, r7
 801db24:	bd90      	pop	{r4, r7, pc}

0801db26 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>:
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 801db26:	b580      	push	{r7, lr}
 801db28:	b082      	sub	sp, #8
 801db2a:	af00      	add	r7, sp, #0
 801db2c:	6078      	str	r0, [r7, #4]
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 801db2e:	2100      	movs	r1, #0
 801db30:	6878      	ldr	r0, [r7, #4]
 801db32:	f7fe fb23 	bl	801c17c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 801db36:	4603      	mov	r3, r0
}
 801db38:	4618      	mov	r0, r3
 801db3a:	3708      	adds	r7, #8
 801db3c:	46bd      	mov	sp, r7
 801db3e:	bd80      	pop	{r7, pc}

0801db40 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 801db40:	b580      	push	{r7, lr}
 801db42:	b082      	sub	sp, #8
 801db44:	af00      	add	r7, sp, #0
 801db46:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 801db48:	6878      	ldr	r0, [r7, #4]
 801db4a:	f000 f805 	bl	801db58 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin1ElLin1EE4evalEl>
 801db4e:	4603      	mov	r3, r0
}
 801db50:	4618      	mov	r0, r3
 801db52:	3708      	adds	r7, #8
 801db54:	46bd      	mov	sp, r7
 801db56:	bd80      	pop	{r7, pc}

0801db58 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin1ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 801db58:	b580      	push	{r7, lr}
 801db5a:	b082      	sub	sp, #8
 801db5c:	af00      	add	r7, sp, #0
 801db5e:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 801db60:	2101      	movs	r1, #1
 801db62:	6878      	ldr	r0, [r7, #4]
 801db64:	f7fe fb0a 	bl	801c17c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 801db68:	4603      	mov	r3, r0
  }
 801db6a:	4618      	mov	r0, r3
 801db6c:	3708      	adds	r7, #8
 801db6e:	46bd      	mov	sp, r7
 801db70:	bd80      	pop	{r7, pc}

0801db72 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>:
FixedPoint<tRawType, tIntegerBits> SelectUsingMask(
 801db72:	b590      	push	{r4, r7, lr}
 801db74:	b085      	sub	sp, #20
 801db76:	af00      	add	r7, sp, #0
 801db78:	60f8      	str	r0, [r7, #12]
 801db7a:	60b9      	str	r1, [r7, #8]
 801db7c:	607a      	str	r2, [r7, #4]
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 801db7e:	f107 0308 	add.w	r3, r7, #8
 801db82:	4618      	mov	r0, r3
 801db84:	f7ff f8b4 	bl	801ccf0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801db88:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 801db8a:	681c      	ldr	r4, [r3, #0]
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 801db8c:	1d3b      	adds	r3, r7, #4
 801db8e:	4618      	mov	r0, r3
 801db90:	f7ff f8ae 	bl	801ccf0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801db94:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 801db96:	681b      	ldr	r3, [r3, #0]
 801db98:	461a      	mov	r2, r3
 801db9a:	4621      	mov	r1, r4
 801db9c:	68f8      	ldr	r0, [r7, #12]
 801db9e:	f7ff fb0b 	bl	801d1b8 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 801dba2:	4603      	mov	r3, r0
 801dba4:	4618      	mov	r0, r3
 801dba6:	f7ff f831 	bl	801cc0c <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801dbaa:	4603      	mov	r3, r0
}
 801dbac:	4618      	mov	r0, r3
 801dbae:	3714      	adds	r7, #20
 801dbb0:	46bd      	mov	sp, r7
 801dbb2:	bd90      	pop	{r4, r7, pc}

0801dbb4 <_ZN8gemmlowp10MaskIfZeroIlEET_S1_>:
tIntegerType MaskIfZero(tIntegerType a) {
 801dbb4:	b580      	push	{r7, lr}
 801dbb6:	b082      	sub	sp, #8
 801dbb8:	af00      	add	r7, sp, #0
 801dbba:	6078      	str	r0, [r7, #4]
  return MaskIfNonZero<tIntegerType>(!a);
 801dbbc:	687b      	ldr	r3, [r7, #4]
 801dbbe:	2b00      	cmp	r3, #0
 801dbc0:	bf0c      	ite	eq
 801dbc2:	2301      	moveq	r3, #1
 801dbc4:	2300      	movne	r3, #0
 801dbc6:	b2db      	uxtb	r3, r3
 801dbc8:	4618      	mov	r0, r3
 801dbca:	f7fe fef9 	bl	801c9c0 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801dbce:	4603      	mov	r3, r0
}
 801dbd0:	4618      	mov	r0, r3
 801dbd2:	3708      	adds	r7, #8
 801dbd4:	46bd      	mov	sp, r7
 801dbd6:	bd80      	pop	{r7, pc}

0801dbd8 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>:
FixedPoint<tRawType, 0> exp_on_interval_between_negative_one_quarter_and_0_excl(
 801dbd8:	b580      	push	{r7, lr}
 801dbda:	b08a      	sub	sp, #40	; 0x28
 801dbdc:	af00      	add	r7, sp, #0
 801dbde:	6078      	str	r0, [r7, #4]
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 1895147668, std::exp(-1.0 / 8.0));
 801dbe0:	482c      	ldr	r0, [pc, #176]	; (801dc94 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xbc>)
 801dbe2:	f7ff ffa0 	bl	801db26 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801dbe6:	4603      	mov	r3, r0
 801dbe8:	4618      	mov	r0, r3
 801dbea:	f7ff f88c 	bl	801cd06 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801dbee:	4603      	mov	r3, r0
 801dbf0:	627b      	str	r3, [r7, #36]	; 0x24
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 715827883, 1.0 / 3.0);
 801dbf2:	4829      	ldr	r0, [pc, #164]	; (801dc98 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xc0>)
 801dbf4:	f7ff ff97 	bl	801db26 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801dbf8:	4603      	mov	r3, r0
 801dbfa:	4618      	mov	r0, r3
 801dbfc:	f7ff f883 	bl	801cd06 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801dc00:	4603      	mov	r3, r0
 801dc02:	623b      	str	r3, [r7, #32]
  F x = a + F::template ConstantPOT<-3>();
 801dc04:	f000 f86c 	bl	801dce0 <_ZN8gemmlowp10FixedPointIlLi0EE11ConstantPOTILin3EEES1_v>
 801dc08:	4603      	mov	r3, r0
 801dc0a:	4619      	mov	r1, r3
 801dc0c:	6878      	ldr	r0, [r7, #4]
 801dc0e:	f000 f870 	bl	801dcf2 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801dc12:	4603      	mov	r3, r0
 801dc14:	61fb      	str	r3, [r7, #28]
  F x2 = x * x;
 801dc16:	69f9      	ldr	r1, [r7, #28]
 801dc18:	69f8      	ldr	r0, [r7, #28]
 801dc1a:	f000 f83f 	bl	801dc9c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801dc1e:	4603      	mov	r3, r0
 801dc20:	61bb      	str	r3, [r7, #24]
  F x3 = x2 * x;
 801dc22:	69f9      	ldr	r1, [r7, #28]
 801dc24:	69b8      	ldr	r0, [r7, #24]
 801dc26:	f000 f839 	bl	801dc9c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801dc2a:	4603      	mov	r3, r0
 801dc2c:	617b      	str	r3, [r7, #20]
  F x4 = x2 * x2;
 801dc2e:	69b9      	ldr	r1, [r7, #24]
 801dc30:	69b8      	ldr	r0, [r7, #24]
 801dc32:	f000 f833 	bl	801dc9c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801dc36:	4603      	mov	r3, r0
 801dc38:	613b      	str	r3, [r7, #16]
  F x4_over_4 = SaturatingRoundingMultiplyByPOT<-2>(x4);
 801dc3a:	6938      	ldr	r0, [r7, #16]
 801dc3c:	f000 f877 	bl	801dd2e <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>
 801dc40:	4603      	mov	r3, r0
 801dc42:	60fb      	str	r3, [r7, #12]
      SaturatingRoundingMultiplyByPOT<-1>(
 801dc44:	6979      	ldr	r1, [r7, #20]
 801dc46:	68f8      	ldr	r0, [r7, #12]
 801dc48:	f000 f853 	bl	801dcf2 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801dc4c:	4603      	mov	r3, r0
 801dc4e:	6a39      	ldr	r1, [r7, #32]
 801dc50:	4618      	mov	r0, r3
 801dc52:	f000 f823 	bl	801dc9c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801dc56:	4603      	mov	r3, r0
 801dc58:	69b9      	ldr	r1, [r7, #24]
 801dc5a:	4618      	mov	r0, r3
 801dc5c:	f000 f849 	bl	801dcf2 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801dc60:	4603      	mov	r3, r0
 801dc62:	4618      	mov	r0, r3
 801dc64:	f000 f879 	bl	801dd5a <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>
 801dc68:	4603      	mov	r3, r0
 801dc6a:	60bb      	str	r3, [r7, #8]
  return AddSaturatingIf16Bit(
 801dc6c:	68b9      	ldr	r1, [r7, #8]
 801dc6e:	69f8      	ldr	r0, [r7, #28]
 801dc70:	f000 f83f 	bl	801dcf2 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801dc74:	4603      	mov	r3, r0
 801dc76:	4619      	mov	r1, r3
 801dc78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801dc7a:	f000 f80f 	bl	801dc9c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801dc7e:	4603      	mov	r3, r0
 801dc80:	4619      	mov	r1, r3
 801dc82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801dc84:	f000 f87f 	bl	801dd86 <_ZN8gemmlowp20AddSaturatingIf16BitIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801dc88:	4603      	mov	r3, r0
}
 801dc8a:	4618      	mov	r0, r3
 801dc8c:	3728      	adds	r7, #40	; 0x28
 801dc8e:	46bd      	mov	sp, r7
 801dc90:	bd80      	pop	{r7, pc}
 801dc92:	bf00      	nop
 801dc94:	70f5a894 	.word	0x70f5a894
 801dc98:	2aaaaaab 	.word	0x2aaaaaab

0801dc9c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 801dc9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dc9e:	b085      	sub	sp, #20
 801dca0:	af00      	add	r7, sp, #0
 801dca2:	6078      	str	r0, [r7, #4]
 801dca4:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 801dca6:	1d3b      	adds	r3, r7, #4
 801dca8:	4618      	mov	r0, r3
 801dcaa:	f7ff f821 	bl	801ccf0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801dcae:	4603      	mov	r3, r0
 801dcb0:	681d      	ldr	r5, [r3, #0]
 801dcb2:	463b      	mov	r3, r7
 801dcb4:	4618      	mov	r0, r3
 801dcb6:	f7ff f81b 	bl	801ccf0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801dcba:	4603      	mov	r3, r0
 801dcbc:	681e      	ldr	r6, [r3, #0]
 801dcbe:	f107 030c 	add.w	r3, r7, #12
 801dcc2:	4618      	mov	r0, r3
 801dcc4:	f7ff f814 	bl	801ccf0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801dcc8:	4604      	mov	r4, r0
 801dcca:	4631      	mov	r1, r6
 801dccc:	4628      	mov	r0, r5
 801dcce:	f7fd fde5 	bl	801b89c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 801dcd2:	4603      	mov	r3, r0
 801dcd4:	6023      	str	r3, [r4, #0]
  return c;
 801dcd6:	68fb      	ldr	r3, [r7, #12]
}
 801dcd8:	4618      	mov	r0, r3
 801dcda:	3714      	adds	r7, #20
 801dcdc:	46bd      	mov	sp, r7
 801dcde:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801dce0 <_ZN8gemmlowp10FixedPointIlLi0EE11ConstantPOTILin3EEES1_v>:
  static FixedPoint ConstantPOT() {
 801dce0:	b580      	push	{r7, lr}
 801dce2:	af00      	add	r7, sp, #0
    return FromScalarRaw(ScalarRawType(1) << kOffset);
 801dce4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 801dce8:	f7ff f80d 	bl	801cd06 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801dcec:	4603      	mov	r3, r0
  }
 801dcee:	4618      	mov	r0, r3
 801dcf0:	bd80      	pop	{r7, pc}

0801dcf2 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 801dcf2:	b590      	push	{r4, r7, lr}
 801dcf4:	b083      	sub	sp, #12
 801dcf6:	af00      	add	r7, sp, #0
 801dcf8:	6078      	str	r0, [r7, #4]
 801dcfa:	6039      	str	r1, [r7, #0]
 801dcfc:	1d3b      	adds	r3, r7, #4
 801dcfe:	4618      	mov	r0, r3
 801dd00:	f7fe fff6 	bl	801ccf0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801dd04:	4603      	mov	r3, r0
 801dd06:	681c      	ldr	r4, [r3, #0]
 801dd08:	463b      	mov	r3, r7
 801dd0a:	4618      	mov	r0, r3
 801dd0c:	f7fe fff0 	bl	801ccf0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801dd10:	4603      	mov	r3, r0
 801dd12:	681b      	ldr	r3, [r3, #0]
 801dd14:	4619      	mov	r1, r3
 801dd16:	4620      	mov	r0, r4
 801dd18:	f7fe fe30 	bl	801c97c <_ZN8gemmlowp3AddIlEET_S1_S1_>
 801dd1c:	4603      	mov	r3, r0
 801dd1e:	4618      	mov	r0, r3
 801dd20:	f7fe ff74 	bl	801cc0c <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801dd24:	4603      	mov	r3, r0
 801dd26:	4618      	mov	r0, r3
 801dd28:	370c      	adds	r7, #12
 801dd2a:	46bd      	mov	sp, r7
 801dd2c:	bd90      	pop	{r4, r7, pc}

0801dd2e <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 801dd2e:	b580      	push	{r7, lr}
 801dd30:	b082      	sub	sp, #8
 801dd32:	af00      	add	r7, sp, #0
 801dd34:	6078      	str	r0, [r7, #4]
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 801dd36:	1d3b      	adds	r3, r7, #4
 801dd38:	4618      	mov	r0, r3
 801dd3a:	f7fe ffd9 	bl	801ccf0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801dd3e:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 801dd40:	681b      	ldr	r3, [r3, #0]
 801dd42:	4618      	mov	r0, r3
 801dd44:	f000 f83d 	bl	801ddc2 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElEET0_S1_>
 801dd48:	4603      	mov	r3, r0
 801dd4a:	4618      	mov	r0, r3
 801dd4c:	f7fe ff5e 	bl	801cc0c <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801dd50:	4603      	mov	r3, r0
}
 801dd52:	4618      	mov	r0, r3
 801dd54:	3708      	adds	r7, #8
 801dd56:	46bd      	mov	sp, r7
 801dd58:	bd80      	pop	{r7, pc}

0801dd5a <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 801dd5a:	b580      	push	{r7, lr}
 801dd5c:	b082      	sub	sp, #8
 801dd5e:	af00      	add	r7, sp, #0
 801dd60:	6078      	str	r0, [r7, #4]
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 801dd62:	1d3b      	adds	r3, r7, #4
 801dd64:	4618      	mov	r0, r3
 801dd66:	f7fe ffc3 	bl	801ccf0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801dd6a:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 801dd6c:	681b      	ldr	r3, [r3, #0]
 801dd6e:	4618      	mov	r0, r3
 801dd70:	f7ff fee6 	bl	801db40 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElEET0_S1_>
 801dd74:	4603      	mov	r3, r0
 801dd76:	4618      	mov	r0, r3
 801dd78:	f7fe ff48 	bl	801cc0c <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801dd7c:	4603      	mov	r3, r0
}
 801dd7e:	4618      	mov	r0, r3
 801dd80:	3708      	adds	r7, #8
 801dd82:	46bd      	mov	sp, r7
 801dd84:	bd80      	pop	{r7, pc}

0801dd86 <_ZN8gemmlowp20AddSaturatingIf16BitIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
FixedPoint<tRawType, tIntegerBits> AddSaturatingIf16Bit(
 801dd86:	b590      	push	{r4, r7, lr}
 801dd88:	b083      	sub	sp, #12
 801dd8a:	af00      	add	r7, sp, #0
 801dd8c:	6078      	str	r0, [r7, #4]
 801dd8e:	6039      	str	r1, [r7, #0]
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 801dd90:	1d3b      	adds	r3, r7, #4
 801dd92:	4618      	mov	r0, r3
 801dd94:	f7fe ffac 	bl	801ccf0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801dd98:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 801dd9a:	681c      	ldr	r4, [r3, #0]
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 801dd9c:	463b      	mov	r3, r7
 801dd9e:	4618      	mov	r0, r3
 801dda0:	f7fe ffa6 	bl	801ccf0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801dda4:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 801dda6:	681b      	ldr	r3, [r3, #0]
 801dda8:	4619      	mov	r1, r3
 801ddaa:	4620      	mov	r0, r4
 801ddac:	f000 f815 	bl	801ddda <_ZN8gemmlowp20AddSaturatingIf16BitIlEET_S1_S1_>
 801ddb0:	4603      	mov	r3, r0
 801ddb2:	4618      	mov	r0, r3
 801ddb4:	f7fe ff2a 	bl	801cc0c <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801ddb8:	4603      	mov	r3, r0
}
 801ddba:	4618      	mov	r0, r3
 801ddbc:	370c      	adds	r7, #12
 801ddbe:	46bd      	mov	sp, r7
 801ddc0:	bd90      	pop	{r4, r7, pc}

0801ddc2 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 801ddc2:	b580      	push	{r7, lr}
 801ddc4:	b082      	sub	sp, #8
 801ddc6:	af00      	add	r7, sp, #0
 801ddc8:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 801ddca:	6878      	ldr	r0, [r7, #4]
 801ddcc:	f000 f813 	bl	801ddf6 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin2ElLin1EE4evalEl>
 801ddd0:	4603      	mov	r3, r0
}
 801ddd2:	4618      	mov	r0, r3
 801ddd4:	3708      	adds	r7, #8
 801ddd6:	46bd      	mov	sp, r7
 801ddd8:	bd80      	pop	{r7, pc}

0801ddda <_ZN8gemmlowp20AddSaturatingIf16BitIlEET_S1_S1_>:
IntegerType AddSaturatingIf16Bit(IntegerType a, IntegerType b) {
 801ddda:	b580      	push	{r7, lr}
 801dddc:	b082      	sub	sp, #8
 801ddde:	af00      	add	r7, sp, #0
 801dde0:	6078      	str	r0, [r7, #4]
 801dde2:	6039      	str	r1, [r7, #0]
  return AddSaturatingIf16BitImpl<IntegerType, sizeof(ScalarType) == 2>::Run(a,
 801dde4:	6839      	ldr	r1, [r7, #0]
 801dde6:	6878      	ldr	r0, [r7, #4]
 801dde8:	f000 f812 	bl	801de10 <_ZN8gemmlowp24AddSaturatingIf16BitImplIlLb0EE3RunEll>
 801ddec:	4603      	mov	r3, r0
}
 801ddee:	4618      	mov	r0, r3
 801ddf0:	3708      	adds	r7, #8
 801ddf2:	46bd      	mov	sp, r7
 801ddf4:	bd80      	pop	{r7, pc}

0801ddf6 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin2ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 801ddf6:	b580      	push	{r7, lr}
 801ddf8:	b082      	sub	sp, #8
 801ddfa:	af00      	add	r7, sp, #0
 801ddfc:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 801ddfe:	2102      	movs	r1, #2
 801de00:	6878      	ldr	r0, [r7, #4]
 801de02:	f7fe f9bb 	bl	801c17c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 801de06:	4603      	mov	r3, r0
  }
 801de08:	4618      	mov	r0, r3
 801de0a:	3708      	adds	r7, #8
 801de0c:	46bd      	mov	sp, r7
 801de0e:	bd80      	pop	{r7, pc}

0801de10 <_ZN8gemmlowp24AddSaturatingIf16BitImplIlLb0EE3RunEll>:
  static IntegerType Run(IntegerType a, IntegerType b) { return Add(a, b); }
 801de10:	b580      	push	{r7, lr}
 801de12:	b082      	sub	sp, #8
 801de14:	af00      	add	r7, sp, #0
 801de16:	6078      	str	r0, [r7, #4]
 801de18:	6039      	str	r1, [r7, #0]
 801de1a:	6839      	ldr	r1, [r7, #0]
 801de1c:	6878      	ldr	r0, [r7, #4]
 801de1e:	f7fe fdad 	bl	801c97c <_ZN8gemmlowp3AddIlEET_S1_S1_>
 801de22:	4603      	mov	r3, r0
 801de24:	4618      	mov	r0, r3
 801de26:	3708      	adds	r7, #8
 801de28:	46bd      	mov	sp, r7
 801de2a:	bd80      	pop	{r7, pc}

0801de2c <_ZSt3maxIhERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 801de2c:	b480      	push	{r7}
 801de2e:	b083      	sub	sp, #12
 801de30:	af00      	add	r7, sp, #0
 801de32:	6078      	str	r0, [r7, #4]
 801de34:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 801de36:	687b      	ldr	r3, [r7, #4]
 801de38:	781a      	ldrb	r2, [r3, #0]
 801de3a:	683b      	ldr	r3, [r7, #0]
 801de3c:	781b      	ldrb	r3, [r3, #0]
 801de3e:	429a      	cmp	r2, r3
 801de40:	d201      	bcs.n	801de46 <_ZSt3maxIhERKT_S2_S2_+0x1a>
	return __b;
 801de42:	683b      	ldr	r3, [r7, #0]
 801de44:	e000      	b.n	801de48 <_ZSt3maxIhERKT_S2_S2_+0x1c>
      return __a;
 801de46:	687b      	ldr	r3, [r7, #4]
    }
 801de48:	4618      	mov	r0, r3
 801de4a:	370c      	adds	r7, #12
 801de4c:	46bd      	mov	sp, r7
 801de4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de52:	4770      	bx	lr

0801de54 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 801de54:	b480      	push	{r7}
 801de56:	b083      	sub	sp, #12
 801de58:	af00      	add	r7, sp, #0
 801de5a:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 801de5c:	687b      	ldr	r3, [r7, #4]
 801de5e:	2b00      	cmp	r3, #0
 801de60:	d002      	beq.n	801de68 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor+0x14>
 801de62:	687b      	ldr	r3, [r7, #4]
 801de64:	681b      	ldr	r3, [r3, #0]
 801de66:	e000      	b.n	801de6a <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor+0x16>
 801de68:	2300      	movs	r3, #0
}
 801de6a:	4618      	mov	r0, r3
 801de6c:	370c      	adds	r7, #12
 801de6e:	46bd      	mov	sp, r7
 801de70:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de74:	4770      	bx	lr
	...

0801de78 <_ZN6tflite26generic_int16_table_lookupEsPKs>:
inline int16_t generic_int16_table_lookup(int16_t value, const int16_t* lut) {
 801de78:	b580      	push	{r7, lr}
 801de7a:	b086      	sub	sp, #24
 801de7c:	af00      	add	r7, sp, #0
 801de7e:	4603      	mov	r3, r0
 801de80:	6039      	str	r1, [r7, #0]
 801de82:	80fb      	strh	r3, [r7, #6]
  uint16_t index = static_cast<uint16_t>(256 + (value >> 7));
 801de84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801de88:	11db      	asrs	r3, r3, #7
 801de8a:	b21b      	sxth	r3, r3
 801de8c:	b29b      	uxth	r3, r3
 801de8e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801de92:	82fb      	strh	r3, [r7, #22]
  assert(index < 512 && "LUT index out of range.");
 801de94:	8afb      	ldrh	r3, [r7, #22]
 801de96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801de9a:	d306      	bcc.n	801deaa <_ZN6tflite26generic_int16_table_lookupEsPKs+0x32>
 801de9c:	4b1a      	ldr	r3, [pc, #104]	; (801df08 <_ZN6tflite26generic_int16_table_lookupEsPKs+0x90>)
 801de9e:	4a1b      	ldr	r2, [pc, #108]	; (801df0c <_ZN6tflite26generic_int16_table_lookupEsPKs+0x94>)
 801dea0:	f44f 71ac 	mov.w	r1, #344	; 0x158
 801dea4:	481a      	ldr	r0, [pc, #104]	; (801df10 <_ZN6tflite26generic_int16_table_lookupEsPKs+0x98>)
 801dea6:	f005 fad1 	bl	802344c <__assert_func>
  int16_t offset = value & 0x7f;
 801deaa:	88fb      	ldrh	r3, [r7, #6]
 801deac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801deb0:	82bb      	strh	r3, [r7, #20]
  int16_t base = lut[index];
 801deb2:	8afb      	ldrh	r3, [r7, #22]
 801deb4:	005b      	lsls	r3, r3, #1
 801deb6:	683a      	ldr	r2, [r7, #0]
 801deb8:	4413      	add	r3, r2
 801deba:	881b      	ldrh	r3, [r3, #0]
 801debc:	827b      	strh	r3, [r7, #18]
  int16_t slope = lut[index + 1] - lut[index];
 801debe:	8afb      	ldrh	r3, [r7, #22]
 801dec0:	3301      	adds	r3, #1
 801dec2:	005b      	lsls	r3, r3, #1
 801dec4:	683a      	ldr	r2, [r7, #0]
 801dec6:	4413      	add	r3, r2
 801dec8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801decc:	b29a      	uxth	r2, r3
 801dece:	8afb      	ldrh	r3, [r7, #22]
 801ded0:	005b      	lsls	r3, r3, #1
 801ded2:	6839      	ldr	r1, [r7, #0]
 801ded4:	440b      	add	r3, r1
 801ded6:	f9b3 3000 	ldrsh.w	r3, [r3]
 801deda:	b29b      	uxth	r3, r3
 801dedc:	1ad3      	subs	r3, r2, r3
 801dede:	b29b      	uxth	r3, r3
 801dee0:	823b      	strh	r3, [r7, #16]
  int32_t delta = (static_cast<int32_t>(slope) * offset + 64) >> 7;
 801dee2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801dee6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801deea:	fb02 f303 	mul.w	r3, r2, r3
 801deee:	3340      	adds	r3, #64	; 0x40
 801def0:	11db      	asrs	r3, r3, #7
 801def2:	60fb      	str	r3, [r7, #12]
  return base + delta;
 801def4:	68fb      	ldr	r3, [r7, #12]
 801def6:	b29a      	uxth	r2, r3
 801def8:	8a7b      	ldrh	r3, [r7, #18]
 801defa:	4413      	add	r3, r2
 801defc:	b29b      	uxth	r3, r3
 801defe:	b21b      	sxth	r3, r3
}
 801df00:	4618      	mov	r0, r3
 801df02:	3718      	adds	r7, #24
 801df04:	46bd      	mov	sp, r7
 801df06:	bd80      	pop	{r7, pc}
 801df08:	08028d98 	.word	0x08028d98
 801df0c:	08028dc4 	.word	0x08028dc4
 801df10:	08028e08 	.word	0x08028e08

0801df14 <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii>:
}

// Computes exp(input - max_input)
inline int16_t SoftMaxCalculateExp(const SoftmaxParams& params,
                                   const int16_t* input_data, const int depth,
                                   int16_t max_in_row, int i, int c) {
 801df14:	b580      	push	{r7, lr}
 801df16:	b08a      	sub	sp, #40	; 0x28
 801df18:	af00      	add	r7, sp, #0
 801df1a:	60f8      	str	r0, [r7, #12]
 801df1c:	60b9      	str	r1, [r7, #8]
 801df1e:	607a      	str	r2, [r7, #4]
 801df20:	807b      	strh	r3, [r7, #2]
  int32_t input_diff = input_data[i * depth + c] - max_in_row;
 801df22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801df24:	687a      	ldr	r2, [r7, #4]
 801df26:	fb03 f202 	mul.w	r2, r3, r2
 801df2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801df2c:	4413      	add	r3, r2
 801df2e:	005b      	lsls	r3, r3, #1
 801df30:	68ba      	ldr	r2, [r7, #8]
 801df32:	4413      	add	r3, r2
 801df34:	f9b3 3000 	ldrsh.w	r3, [r3]
 801df38:	461a      	mov	r2, r3
 801df3a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801df3e:	1ad3      	subs	r3, r2, r3
 801df40:	627b      	str	r3, [r7, #36]	; 0x24
  // scale the input_diff such that [-65535, 0] correspond to [-10.0, 0.0]
  // exp lut generated with range [-10, 0], as exp(-10) is negligible.
  int32_t scaled_diff = MultiplyByQuantizedMultiplier(
      input_diff, params.input_multiplier, params.input_left_shift);
 801df42:	68fb      	ldr	r3, [r7, #12]
 801df44:	6899      	ldr	r1, [r3, #8]
 801df46:	68fb      	ldr	r3, [r7, #12]
 801df48:	68db      	ldr	r3, [r3, #12]
  int32_t scaled_diff = MultiplyByQuantizedMultiplier(
 801df4a:	461a      	mov	r2, r3
 801df4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801df4e:	f7fd fdab 	bl	801baa8 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 801df52:	6238      	str	r0, [r7, #32]
  // recenter to [-32768, 32767]
  int32_t sym_scaled_diff = scaled_diff + 32767;
 801df54:	6a3b      	ldr	r3, [r7, #32]
 801df56:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 801df5a:	337f      	adds	r3, #127	; 0x7f
 801df5c:	613b      	str	r3, [r7, #16]
  int16_t sat_sym_scaled_diff =
      std::min(std::max(sym_scaled_diff, static_cast<int32_t>(-32768)),
 801df5e:	4b12      	ldr	r3, [pc, #72]	; (801dfa8 <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii+0x94>)
 801df60:	617b      	str	r3, [r7, #20]
               static_cast<int32_t>(32767));
 801df62:	f107 0214 	add.w	r2, r7, #20
 801df66:	f107 0310 	add.w	r3, r7, #16
 801df6a:	4611      	mov	r1, r2
 801df6c:	4618      	mov	r0, r3
 801df6e:	f7fd fbb3 	bl	801b6d8 <_ZSt3maxIlERKT_S2_S2_>
 801df72:	4602      	mov	r2, r0
 801df74:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801df78:	61bb      	str	r3, [r7, #24]
 801df7a:	f107 0318 	add.w	r3, r7, #24
 801df7e:	4619      	mov	r1, r3
 801df80:	4610      	mov	r0, r2
 801df82:	f7fd fb95 	bl	801b6b0 <_ZSt3minIlERKT_S2_S2_>
 801df86:	4603      	mov	r3, r0
      std::min(std::max(sym_scaled_diff, static_cast<int32_t>(-32768)),
 801df88:	681b      	ldr	r3, [r3, #0]
               static_cast<int32_t>(32767));
 801df8a:	83fb      	strh	r3, [r7, #30]
  // apply the exp() LUT activation function
  return generic_int16_table_lookup(sat_sym_scaled_diff, params.exp_lut);
 801df8c:	68fb      	ldr	r3, [r7, #12]
 801df8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801df90:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801df94:	4611      	mov	r1, r2
 801df96:	4618      	mov	r0, r3
 801df98:	f7ff ff6e 	bl	801de78 <_ZN6tflite26generic_int16_table_lookupEsPKs>
 801df9c:	4603      	mov	r3, r0
}
 801df9e:	4618      	mov	r0, r3
 801dfa0:	3728      	adds	r7, #40	; 0x28
 801dfa2:	46bd      	mov	sp, r7
 801dfa4:	bd80      	pop	{r7, pc}
 801dfa6:	bf00      	nop
 801dfa8:	ffff8000 	.word	0xffff8000

0801dfac <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps>:
// Quantized softmax with int16_t input and int16_t output.
inline void SoftmaxInt16(const SoftmaxParams& params,
                         const RuntimeShape& input_shape,
                         const int16_t* input_data,
                         const RuntimeShape& output_shape,
                         int16_t* output_data) {
 801dfac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dfb0:	b0ab      	sub	sp, #172	; 0xac
 801dfb2:	af02      	add	r7, sp, #8
 801dfb4:	63f8      	str	r0, [r7, #60]	; 0x3c
 801dfb6:	63b9      	str	r1, [r7, #56]	; 0x38
 801dfb8:	637a      	str	r2, [r7, #52]	; 0x34
 801dfba:	633b      	str	r3, [r7, #48]	; 0x30
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 801dfbc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801dfbe:	f7fd fbd6 	bl	801b76e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801dfc2:	4603      	mov	r3, r0
 801dfc4:	3b01      	subs	r3, #1
 801dfc6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 801dfca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801dfcc:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 801dfd0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801dfd2:	f7ff fd79 	bl	801dac8 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 801dfd6:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 801dfda:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801dfde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801dfe0:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 801dfe4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801dfe6:	f7fe fd31 	bl	801ca4c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801dfea:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80

  for (int i = 0; i < outer_size; ++i) {
 801dfee:	2300      	movs	r3, #0
 801dff0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801dff4:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801dff8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801dffc:	429a      	cmp	r2, r3
 801dffe:	f280 8157 	bge.w	801e2b0 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x304>
    // Find the largest element
    int16_t max_in_row = std::numeric_limits<int16_t>::min();
 801e002:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801e006:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    for (int c = 0; c < depth; ++c) {
 801e00a:	2300      	movs	r3, #0
 801e00c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801e010:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801e014:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801e018:	429a      	cmp	r2, r3
 801e01a:	da1c      	bge.n	801e056 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0xaa>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 801e01c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801e020:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801e024:	fb03 f202 	mul.w	r2, r3, r2
 801e028:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801e02c:	4413      	add	r3, r2
 801e02e:	005a      	lsls	r2, r3, #1
 801e030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e032:	441a      	add	r2, r3
 801e034:	f107 034e 	add.w	r3, r7, #78	; 0x4e
 801e038:	4611      	mov	r1, r2
 801e03a:	4618      	mov	r0, r3
 801e03c:	f7ff fcd6 	bl	801d9ec <_ZSt3maxIsERKT_S2_S2_>
 801e040:	4603      	mov	r3, r0
 801e042:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e046:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    for (int c = 0; c < depth; ++c) {
 801e04a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801e04e:	3301      	adds	r3, #1
 801e050:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801e054:	e7dc      	b.n	801e010 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x64>

    // This loops computes the exp values and their sum. We will need the exp
    // values later on in the function so we cache them in the output_data
    // buffer. This is an optimization done to avoid calculating the exp values
    // twice making use of the output_data buffer as scratch memory.
    int32_t sum_of_exps = 0;  // Q16.15 fixed point format.
 801e056:	2300      	movs	r3, #0
 801e058:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    int16_t* exp_results_Q015 = output_data + i * depth;
 801e05c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801e060:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801e064:	fb02 f303 	mul.w	r3, r2, r3
 801e068:	005a      	lsls	r2, r3, #1
 801e06a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e06e:	4413      	add	r3, r2
 801e070:	67fb      	str	r3, [r7, #124]	; 0x7c
    for (int c = 0; c < depth; ++c) {
 801e072:	2300      	movs	r3, #0
 801e074:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801e078:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801e07c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801e080:	429a      	cmp	r2, r3
 801e082:	da28      	bge.n	801e0d6 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x12a>
      exp_results_Q015[c] =
          SoftMaxCalculateExp(params, input_data, depth, max_in_row, i, c);
 801e084:	f9b7 104e 	ldrsh.w	r1, [r7, #78]	; 0x4e
      exp_results_Q015[c] =
 801e088:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e08c:	005a      	lsls	r2, r3, #1
 801e08e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801e090:	189c      	adds	r4, r3, r2
          SoftMaxCalculateExp(params, input_data, depth, max_in_row, i, c);
 801e092:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e096:	9301      	str	r3, [sp, #4]
 801e098:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801e09c:	9300      	str	r3, [sp, #0]
 801e09e:	460b      	mov	r3, r1
 801e0a0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801e0a4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801e0a6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801e0a8:	f7ff ff34 	bl	801df14 <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii>
 801e0ac:	4603      	mov	r3, r0
      exp_results_Q015[c] =
 801e0ae:	8023      	strh	r3, [r4, #0]
      sum_of_exps += exp_results_Q015[c];
 801e0b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e0b4:	005a      	lsls	r2, r3, #1
 801e0b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801e0b8:	4413      	add	r3, r2
 801e0ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e0be:	461a      	mov	r2, r3
 801e0c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801e0c4:	4413      	add	r3, r2
 801e0c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    for (int c = 0; c < depth; ++c) {
 801e0ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e0ce:	3301      	adds	r3, #1
 801e0d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801e0d4:	e7d0      	b.n	801e078 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0xcc>
    }

    // Compute the reciprocal 1/sum_of_exps
    uint8_t headroom_plus_one =
        CountLeadingZeros(static_cast<uint32_t>(sum_of_exps));
 801e0d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801e0da:	4618      	mov	r0, r3
 801e0dc:	f7fe fd84 	bl	801cbe8 <_ZN6tflite17CountLeadingZerosImEEiT_>
 801e0e0:	4603      	mov	r3, r0
 801e0e2:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
    int32_t shifted_sum =
        ((static_cast<int64_t>(sum_of_exps) << (headroom_plus_one - 1)) +
 801e0e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801e0ea:	17da      	asrs	r2, r3, #31
 801e0ec:	623b      	str	r3, [r7, #32]
 801e0ee:	627a      	str	r2, [r7, #36]	; 0x24
 801e0f0:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 801e0f4:	1e59      	subs	r1, r3, #1
 801e0f6:	f1a1 0320 	sub.w	r3, r1, #32
 801e0fa:	f1c1 0220 	rsb	r2, r1, #32
 801e0fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e100:	fa00 f901 	lsl.w	r9, r0, r1
 801e104:	6a38      	ldr	r0, [r7, #32]
 801e106:	fa00 f303 	lsl.w	r3, r0, r3
 801e10a:	ea49 0903 	orr.w	r9, r9, r3
 801e10e:	6a3b      	ldr	r3, [r7, #32]
 801e110:	fa23 f202 	lsr.w	r2, r3, r2
 801e114:	ea49 0902 	orr.w	r9, r9, r2
 801e118:	6a3b      	ldr	r3, [r7, #32]
 801e11a:	fa03 f801 	lsl.w	r8, r3, r1
 801e11e:	f518 5300 	adds.w	r3, r8, #8192	; 0x2000
 801e122:	61bb      	str	r3, [r7, #24]
 801e124:	f149 0300 	adc.w	r3, r9, #0
 801e128:	61fb      	str	r3, [r7, #28]
         (1 << 13)) >>
 801e12a:	f04f 0200 	mov.w	r2, #0
 801e12e:	f04f 0300 	mov.w	r3, #0
 801e132:	69b9      	ldr	r1, [r7, #24]
 801e134:	0b8a      	lsrs	r2, r1, #14
 801e136:	69f9      	ldr	r1, [r7, #28]
 801e138:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 801e13c:	69f9      	ldr	r1, [r7, #28]
 801e13e:	138b      	asrs	r3, r1, #14
    int32_t shifted_sum =
 801e140:	4613      	mov	r3, r2
 801e142:	677b      	str	r3, [r7, #116]	; 0x74
        14;
    // since the LUT computes 1/(1 + x) we need to first compute x = (sum - 1).
    // also, the LUT expects a symmetrical input, so we must also recenter x
    // from [0, 65535] to [-32768, 32767].
    int32_t sym_shifted_sum = shifted_sum + (-((1 << 15) + (1 << 16)));
 801e144:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e146:	f5a3 33c0 	sub.w	r3, r3, #98304	; 0x18000
 801e14a:	64bb      	str	r3, [r7, #72]	; 0x48
    int16_t sat_sym_shifted_sum = static_cast<int16_t>(
        std::min(std::max(sym_shifted_sum, static_cast<int32_t>(-32768)),
 801e14c:	4b5b      	ldr	r3, [pc, #364]	; (801e2bc <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x310>)
 801e14e:	653b      	str	r3, [r7, #80]	; 0x50
                 static_cast<int32_t>(32767)));
 801e150:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801e154:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801e158:	4611      	mov	r1, r2
 801e15a:	4618      	mov	r0, r3
 801e15c:	f7fd fabc 	bl	801b6d8 <_ZSt3maxIlERKT_S2_S2_>
 801e160:	4602      	mov	r2, r0
 801e162:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801e166:	657b      	str	r3, [r7, #84]	; 0x54
 801e168:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801e16c:	4619      	mov	r1, r3
 801e16e:	4610      	mov	r0, r2
 801e170:	f7fd fa9e 	bl	801b6b0 <_ZSt3minIlERKT_S2_S2_>
 801e174:	4603      	mov	r3, r0
        std::min(std::max(sym_shifted_sum, static_cast<int32_t>(-32768)),
 801e176:	681b      	ldr	r3, [r3, #0]
                 static_cast<int32_t>(32767)));
 801e178:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
    // apply 1/(1 + x) LUT activation function
    int16_t reciprocal_scale_Q015 = generic_int16_table_lookup(
        sat_sym_shifted_sum, params.one_over_one_plus_x_lut);
 801e17c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e17e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    int16_t reciprocal_scale_Q015 = generic_int16_table_lookup(
 801e180:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 801e184:	4611      	mov	r1, r2
 801e186:	4618      	mov	r0, r3
 801e188:	f7ff fe76 	bl	801de78 <_ZN6tflite26generic_int16_table_lookupEsPKs>
 801e18c:	4603      	mov	r3, r0
 801e18e:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70

    // Rescale the exp_result with reciprocal
    // range of output is [0, 32767] correspond to [0.0, 1.0]
    for (int c = 0; c < depth; ++c) {
 801e192:	2300      	movs	r3, #0
 801e194:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801e198:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801e19c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801e1a0:	429a      	cmp	r2, r3
 801e1a2:	da7f      	bge.n	801e2a4 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x2f8>
      uint8_t right_shift = 31 - headroom_plus_one;
 801e1a4:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 801e1a8:	f1c3 031f 	rsb	r3, r3, #31
 801e1ac:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      int64_t round = 1 << (right_shift - 1);
 801e1b0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801e1b4:	1e5a      	subs	r2, r3, #1
 801e1b6:	2301      	movs	r3, #1
 801e1b8:	4093      	lsls	r3, r2
 801e1ba:	17da      	asrs	r2, r3, #31
 801e1bc:	603b      	str	r3, [r7, #0]
 801e1be:	607a      	str	r2, [r7, #4]
 801e1c0:	e9d7 3400 	ldrd	r3, r4, [r7]
 801e1c4:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 801e1c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801e1cc:	005a      	lsls	r2, r3, #1
 801e1ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801e1d0:	4413      	add	r3, r2
 801e1d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e1d6:	b21b      	sxth	r3, r3
 801e1d8:	17da      	asrs	r2, r3, #31
 801e1da:	613b      	str	r3, [r7, #16]
 801e1dc:	617a      	str	r2, [r7, #20]
                            static_cast<int64_t>(reciprocal_scale_Q015) +
 801e1de:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 801e1e2:	17da      	asrs	r2, r3, #31
 801e1e4:	60bb      	str	r3, [r7, #8]
 801e1e6:	60fa      	str	r2, [r7, #12]
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 801e1e8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801e1ec:	460b      	mov	r3, r1
 801e1ee:	68ba      	ldr	r2, [r7, #8]
 801e1f0:	fb02 f203 	mul.w	r2, r2, r3
 801e1f4:	68fb      	ldr	r3, [r7, #12]
 801e1f6:	e9c7 0104 	strd	r0, r1, [r7, #16]
 801e1fa:	4601      	mov	r1, r0
 801e1fc:	fb01 f303 	mul.w	r3, r1, r3
 801e200:	4413      	add	r3, r2
 801e202:	693a      	ldr	r2, [r7, #16]
 801e204:	68b9      	ldr	r1, [r7, #8]
 801e206:	fba2 ab01 	umull	sl, fp, r2, r1
 801e20a:	445b      	add	r3, fp
 801e20c:	469b      	mov	fp, r3
                            static_cast<int64_t>(reciprocal_scale_Q015) +
 801e20e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 801e212:	eb1a 0502 	adds.w	r5, sl, r2
 801e216:	eb4b 0603 	adc.w	r6, fp, r3
                        round) >>
                       right_shift;
 801e21a:	f897 106f 	ldrb.w	r1, [r7, #111]	; 0x6f
                        round) >>
 801e21e:	f1c1 0320 	rsb	r3, r1, #32
 801e222:	f1b1 0220 	subs.w	r2, r1, #32
 801e226:	fa25 f001 	lsr.w	r0, r5, r1
 801e22a:	62b8      	str	r0, [r7, #40]	; 0x28
 801e22c:	fa06 f303 	lsl.w	r3, r6, r3
 801e230:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801e232:	ea40 0003 	orr.w	r0, r0, r3
 801e236:	62b8      	str	r0, [r7, #40]	; 0x28
 801e238:	d404      	bmi.n	801e244 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x298>
 801e23a:	fa46 f202 	asr.w	r2, r6, r2
 801e23e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e240:	4313      	orrs	r3, r2
 801e242:	62bb      	str	r3, [r7, #40]	; 0x28
 801e244:	fa46 f301 	asr.w	r3, r6, r1
 801e248:	62fb      	str	r3, [r7, #44]	; 0x2c
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 801e24a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e24c:	647b      	str	r3, [r7, #68]	; 0x44
      output_data[i * depth + c] = static_cast<int16_t>(
          std::min(std::max(result, static_cast<int32_t>(0)),
 801e24e:	2300      	movs	r3, #0
 801e250:	65bb      	str	r3, [r7, #88]	; 0x58
                   static_cast<int32_t>(32767)));
 801e252:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801e256:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801e25a:	4611      	mov	r1, r2
 801e25c:	4618      	mov	r0, r3
 801e25e:	f7fd fa3b 	bl	801b6d8 <_ZSt3maxIlERKT_S2_S2_>
 801e262:	4602      	mov	r2, r0
 801e264:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801e268:	65fb      	str	r3, [r7, #92]	; 0x5c
 801e26a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801e26e:	4619      	mov	r1, r3
 801e270:	4610      	mov	r0, r2
 801e272:	f7fd fa1d 	bl	801b6b0 <_ZSt3minIlERKT_S2_S2_>
 801e276:	4603      	mov	r3, r0
          std::min(std::max(result, static_cast<int32_t>(0)),
 801e278:	6819      	ldr	r1, [r3, #0]
      output_data[i * depth + c] = static_cast<int16_t>(
 801e27a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801e27e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801e282:	fb03 f202 	mul.w	r2, r3, r2
 801e286:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801e28a:	4413      	add	r3, r2
 801e28c:	005a      	lsls	r2, r3, #1
 801e28e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e292:	441a      	add	r2, r3
 801e294:	b20b      	sxth	r3, r1
 801e296:	8013      	strh	r3, [r2, #0]
    for (int c = 0; c < depth; ++c) {
 801e298:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801e29c:	3301      	adds	r3, #1
 801e29e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801e2a2:	e779      	b.n	801e198 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x1ec>
  for (int i = 0; i < outer_size; ++i) {
 801e2a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801e2a8:	3301      	adds	r3, #1
 801e2aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801e2ae:	e6a1      	b.n	801dff4 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x48>
    }
  }
}
 801e2b0:	bf00      	nop
 801e2b2:	37a4      	adds	r7, #164	; 0xa4
 801e2b4:	46bd      	mov	sp, r7
 801e2b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e2ba:	bf00      	nop
 801e2bc:	ffff8000 	.word	0xffff8000

0801e2c0 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE>:

namespace tflite {
namespace {

void SoftmaxQuantized(const TfLiteEvalTensor* input, TfLiteEvalTensor* output,
                      const SoftmaxParams& op_data) {
 801e2c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e2c4:	b0bc      	sub	sp, #240	; 0xf0
 801e2c6:	af04      	add	r7, sp, #16
 801e2c8:	60f8      	str	r0, [r7, #12]
 801e2ca:	60b9      	str	r1, [r7, #8]
 801e2cc:	607a      	str	r2, [r7, #4]
  if (input->type == kTfLiteUInt8) {
 801e2ce:	68fb      	ldr	r3, [r7, #12]
 801e2d0:	7a1b      	ldrb	r3, [r3, #8]
 801e2d2:	2b03      	cmp	r3, #3
 801e2d4:	d127      	bne.n	801e326 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x66>
    tflite::reference_ops::Softmax(
        op_data, tflite::micro::GetTensorShape(input),
 801e2d6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801e2da:	68f9      	ldr	r1, [r7, #12]
 801e2dc:	4618      	mov	r0, r3
 801e2de:	f7ff fb9b 	bl	801da18 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::Softmax(
 801e2e2:	68f8      	ldr	r0, [r7, #12]
 801e2e4:	f7fe f98e 	bl	801c604 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 801e2e8:	4604      	mov	r4, r0
        tflite::micro::GetTensorData<uint8_t>(input),
        tflite::micro::GetTensorShape(output),
 801e2ea:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801e2ee:	68b9      	ldr	r1, [r7, #8]
 801e2f0:	4618      	mov	r0, r3
 801e2f2:	f7ff fb91 	bl	801da18 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::Softmax(
 801e2f6:	68b8      	ldr	r0, [r7, #8]
 801e2f8:	f7fe f993 	bl	801c622 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 801e2fc:	4602      	mov	r2, r0
 801e2fe:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801e302:	f107 0144 	add.w	r1, r7, #68	; 0x44
 801e306:	9200      	str	r2, [sp, #0]
 801e308:	4622      	mov	r2, r4
 801e30a:	6878      	ldr	r0, [r7, #4]
 801e30c:	f000 f930 	bl	801e570 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
        tflite::micro::GetTensorShape(output),
 801e310:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801e314:	4618      	mov	r0, r3
 801e316:	f7fd fa14 	bl	801b742 <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, tflite::micro::GetTensorShape(input),
 801e31a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801e31e:	4618      	mov	r0, r3
 801e320:	f7fd fa0f 	bl	801b742 <_ZN6tflite12RuntimeShapeD1Ev>
 801e324:	e080      	b.n	801e428 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x168>
        tflite::micro::GetTensorData<uint8_t>(output));
  } else if (input->type == kTfLiteInt8) {
 801e326:	68fb      	ldr	r3, [r7, #12]
 801e328:	7a1b      	ldrb	r3, [r3, #8]
 801e32a:	2b09      	cmp	r3, #9
 801e32c:	d153      	bne.n	801e3d6 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x116>
    if (output->type == kTfLiteInt16) {
 801e32e:	68bb      	ldr	r3, [r7, #8]
 801e330:	7a1b      	ldrb	r3, [r3, #8]
 801e332:	2b07      	cmp	r3, #7
 801e334:	d077      	beq.n	801e426 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x166>
          op_data, tflite::micro::GetTensorShape(input),
          tflite::micro::GetTensorData<int8_t>(input),
          tflite::micro::GetTensorShape(output),
          tflite::micro::GetTensorData<int16_t>(output));
    } else {
      const auto input_shape = tflite::micro::GetTensorShape(input);
 801e336:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801e33a:	68f9      	ldr	r1, [r7, #12]
 801e33c:	4618      	mov	r0, r3
 801e33e:	f7ff fb6b 	bl	801da18 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      const auto output_shape = tflite::micro::GetTensorShape(output);
 801e342:	f107 0314 	add.w	r3, r7, #20
 801e346:	68b9      	ldr	r1, [r7, #8]
 801e348:	4618      	mov	r0, r3
 801e34a:	f7ff fb65 	bl	801da18 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      const int trailing_dim = input_shape.DimensionsCount() - 1;
 801e34e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801e352:	4618      	mov	r0, r3
 801e354:	f7fd fa0b 	bl	801b76e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801e358:	4603      	mov	r3, r0
 801e35a:	3b01      	subs	r3, #1
 801e35c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
      const int outer_size =
          MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 801e360:	f107 0214 	add.w	r2, r7, #20
 801e364:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801e368:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 801e36c:	4618      	mov	r0, r3
 801e36e:	f7ff fbab 	bl	801dac8 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 801e372:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
      const int depth =
          MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 801e376:	f107 0214 	add.w	r2, r7, #20
 801e37a:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 801e37e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801e382:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 801e386:	f7fe fb61 	bl	801ca4c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801e38a:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4

      arm_softmax_s8(tflite::micro::GetTensorData<int8_t>(input), outer_size,
 801e38e:	68f8      	ldr	r0, [r7, #12]
 801e390:	f7fe f8cc 	bl	801c52c <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 801e394:	4680      	mov	r8, r0
                     depth, op_data.input_multiplier, op_data.input_left_shift,
 801e396:	687b      	ldr	r3, [r7, #4]
 801e398:	689e      	ldr	r6, [r3, #8]
 801e39a:	687b      	ldr	r3, [r7, #4]
 801e39c:	68dc      	ldr	r4, [r3, #12]
                     op_data.diff_min,
 801e39e:	687b      	ldr	r3, [r7, #4]
 801e3a0:	699d      	ldr	r5, [r3, #24]
      arm_softmax_s8(tflite::micro::GetTensorData<int8_t>(input), outer_size,
 801e3a2:	68b8      	ldr	r0, [r7, #8]
 801e3a4:	f7fe f8d1 	bl	801c54a <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 801e3a8:	4603      	mov	r3, r0
 801e3aa:	9302      	str	r3, [sp, #8]
 801e3ac:	9501      	str	r5, [sp, #4]
 801e3ae:	9400      	str	r4, [sp, #0]
 801e3b0:	4633      	mov	r3, r6
 801e3b2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 801e3b6:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 801e3ba:	4640      	mov	r0, r8
 801e3bc:	f7f6 fe30 	bl	8015020 <arm_softmax_s8>
      const auto output_shape = tflite::micro::GetTensorShape(output);
 801e3c0:	f107 0314 	add.w	r3, r7, #20
 801e3c4:	4618      	mov	r0, r3
 801e3c6:	f7fd f9bc 	bl	801b742 <_ZN6tflite12RuntimeShapeD1Ev>
      const auto input_shape = tflite::micro::GetTensorShape(input);
 801e3ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801e3ce:	4618      	mov	r0, r3
 801e3d0:	f7fd f9b7 	bl	801b742 <_ZN6tflite12RuntimeShapeD1Ev>
 801e3d4:	e028      	b.n	801e428 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x168>
                     tflite::micro::GetTensorData<int8_t>(output));
    }
  } else {
    tflite::reference_ops::SoftmaxInt16(
        op_data, tflite::micro::GetTensorShape(input),
 801e3d6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801e3da:	68f9      	ldr	r1, [r7, #12]
 801e3dc:	4618      	mov	r0, r3
 801e3de:	f7ff fb1b 	bl	801da18 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::SoftmaxInt16(
 801e3e2:	68f8      	ldr	r0, [r7, #12]
 801e3e4:	f7fe fb61 	bl	801caaa <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>
 801e3e8:	4604      	mov	r4, r0
        tflite::micro::GetTensorData<int16_t>(input),
        tflite::micro::GetTensorShape(output),
 801e3ea:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801e3ee:	68b9      	ldr	r1, [r7, #8]
 801e3f0:	4618      	mov	r0, r3
 801e3f2:	f7ff fb11 	bl	801da18 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::SoftmaxInt16(
 801e3f6:	68b8      	ldr	r0, [r7, #8]
 801e3f8:	f7ff fd2c 	bl	801de54 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
 801e3fc:	4602      	mov	r2, r0
 801e3fe:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801e402:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 801e406:	9200      	str	r2, [sp, #0]
 801e408:	4622      	mov	r2, r4
 801e40a:	6878      	ldr	r0, [r7, #4]
 801e40c:	f7ff fdce 	bl	801dfac <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps>
        tflite::micro::GetTensorShape(output),
 801e410:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801e414:	4618      	mov	r0, r3
 801e416:	f7fd f994 	bl	801b742 <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, tflite::micro::GetTensorShape(input),
 801e41a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801e41e:	4618      	mov	r0, r3
 801e420:	f7fd f98f 	bl	801b742 <_ZN6tflite12RuntimeShapeD1Ev>
 801e424:	e000      	b.n	801e428 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x168>
      return;
 801e426:	bf00      	nop
        tflite::micro::GetTensorData<int16_t>(output));
  }
}
 801e428:	37e0      	adds	r7, #224	; 0xe0
 801e42a:	46bd      	mov	sp, r7
 801e42c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801e430 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
 801e430:	b5b0      	push	{r4, r5, r7, lr}
 801e432:	b09e      	sub	sp, #120	; 0x78
 801e434:	af00      	add	r7, sp, #0
 801e436:	6078      	str	r0, [r7, #4]
 801e438:	6039      	str	r1, [r7, #0]
  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);
 801e43a:	2200      	movs	r2, #0
 801e43c:	6839      	ldr	r1, [r7, #0]
 801e43e:	6878      	ldr	r0, [r7, #4]
 801e440:	f7fd fb76 	bl	801bb30 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 801e444:	6778      	str	r0, [r7, #116]	; 0x74
  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);
 801e446:	2200      	movs	r2, #0
 801e448:	6839      	ldr	r1, [r7, #0]
 801e44a:	6878      	ldr	r0, [r7, #4]
 801e44c:	f7fd fb80 	bl	801bb50 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 801e450:	6738      	str	r0, [r7, #112]	; 0x70

  TFLITE_DCHECK(node->user_data != nullptr);
 801e452:	683b      	ldr	r3, [r7, #0]
 801e454:	691b      	ldr	r3, [r3, #16]
 801e456:	2b00      	cmp	r3, #0
 801e458:	d101      	bne.n	801e45e <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x2e>
 801e45a:	f004 ffef 	bl	802343c <abort>
  const SoftmaxParams data =
      *static_cast<const SoftmaxParams*>(node->user_data);
 801e45e:	683b      	ldr	r3, [r7, #0]
 801e460:	691b      	ldr	r3, [r3, #16]
  const SoftmaxParams data =
 801e462:	f107 0408 	add.w	r4, r7, #8
 801e466:	461d      	mov	r5, r3
 801e468:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801e46a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801e46c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801e46e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801e470:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801e472:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801e474:	e895 0003 	ldmia.w	r5, {r0, r1}
 801e478:	e884 0003 	stmia.w	r4, {r0, r1}

  switch (input->type) {
 801e47c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e47e:	7a1b      	ldrb	r3, [r3, #8]
 801e480:	3b01      	subs	r3, #1
 801e482:	2b08      	cmp	r3, #8
 801e484:	d84a      	bhi.n	801e51c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xec>
 801e486:	a201      	add	r2, pc, #4	; (adr r2, 801e48c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x5c>)
 801e488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e48c:	0801e4b1 	.word	0x0801e4b1
 801e490:	0801e51d 	.word	0x0801e51d
 801e494:	0801e4e1 	.word	0x0801e4e1
 801e498:	0801e51d 	.word	0x0801e51d
 801e49c:	0801e51d 	.word	0x0801e51d
 801e4a0:	0801e51d 	.word	0x0801e51d
 801e4a4:	0801e4ff 	.word	0x0801e4ff
 801e4a8:	0801e51d 	.word	0x0801e51d
 801e4ac:	0801e4cf 	.word	0x0801e4cf
    case kTfLiteFloat32: {
      #if EI_TFLITE_DISABLE_SOFTMAX_IN_F32
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 801e4b0:	687b      	ldr	r3, [r7, #4]
 801e4b2:	695c      	ldr	r4, [r3, #20]
 801e4b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e4b6:	7a1b      	ldrb	r3, [r3, #8]
 801e4b8:	4618      	mov	r0, r3
 801e4ba:	f7fc fbe7 	bl	801ac8c <TfLiteTypeGetName>
 801e4be:	4602      	mov	r2, r0
 801e4c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e4c2:	7a1b      	ldrb	r3, [r3, #8]
 801e4c4:	491e      	ldr	r1, [pc, #120]	; (801e540 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x110>)
 801e4c6:	6878      	ldr	r0, [r7, #4]
 801e4c8:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 801e4ca:	2301      	movs	r3, #1
 801e4cc:	e034      	b.n	801e538 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x108>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
      #endif

      SoftmaxQuantized(input, output, data);
 801e4ce:	f107 0308 	add.w	r3, r7, #8
 801e4d2:	461a      	mov	r2, r3
 801e4d4:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801e4d6:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801e4d8:	f7ff fef2 	bl	801e2c0 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE>
      return kTfLiteOk;
 801e4dc:	2300      	movs	r3, #0
 801e4de:	e02b      	b.n	801e538 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x108>
    }
    case kTfLiteUInt8: {
      #if EI_TFLITE_DISABLE_SOFTMAX_IN_U8
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 801e4e0:	687b      	ldr	r3, [r7, #4]
 801e4e2:	695c      	ldr	r4, [r3, #20]
 801e4e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e4e6:	7a1b      	ldrb	r3, [r3, #8]
 801e4e8:	4618      	mov	r0, r3
 801e4ea:	f7fc fbcf 	bl	801ac8c <TfLiteTypeGetName>
 801e4ee:	4602      	mov	r2, r0
 801e4f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e4f2:	7a1b      	ldrb	r3, [r3, #8]
 801e4f4:	4912      	ldr	r1, [pc, #72]	; (801e540 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x110>)
 801e4f6:	6878      	ldr	r0, [r7, #4]
 801e4f8:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 801e4fa:	2301      	movs	r3, #1
 801e4fc:	e01c      	b.n	801e538 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x108>
      SoftmaxQuantized(input, output, data);
      return kTfLiteOk;
    }
    case kTfLiteInt16: {
      #if EI_TFLITE_DISABLE_SOFTMAX_IN_I16
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 801e4fe:	687b      	ldr	r3, [r7, #4]
 801e500:	695c      	ldr	r4, [r3, #20]
 801e502:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e504:	7a1b      	ldrb	r3, [r3, #8]
 801e506:	4618      	mov	r0, r3
 801e508:	f7fc fbc0 	bl	801ac8c <TfLiteTypeGetName>
 801e50c:	4602      	mov	r2, r0
 801e50e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e510:	7a1b      	ldrb	r3, [r3, #8]
 801e512:	490b      	ldr	r1, [pc, #44]	; (801e540 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x110>)
 801e514:	6878      	ldr	r0, [r7, #4]
 801e516:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 801e518:	2301      	movs	r3, #1
 801e51a:	e00d      	b.n	801e538 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x108>

      SoftmaxQuantized(input, output, data);
      return kTfLiteOk;
    }
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 801e51c:	687b      	ldr	r3, [r7, #4]
 801e51e:	695c      	ldr	r4, [r3, #20]
 801e520:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e522:	7a1b      	ldrb	r3, [r3, #8]
 801e524:	4618      	mov	r0, r3
 801e526:	f7fc fbb1 	bl	801ac8c <TfLiteTypeGetName>
 801e52a:	4602      	mov	r2, r0
 801e52c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e52e:	7a1b      	ldrb	r3, [r3, #8]
 801e530:	4903      	ldr	r1, [pc, #12]	; (801e540 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x110>)
 801e532:	6878      	ldr	r0, [r7, #4]
 801e534:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 801e536:	2301      	movs	r3, #1
  }
}
 801e538:	4618      	mov	r0, r3
 801e53a:	3778      	adds	r7, #120	; 0x78
 801e53c:	46bd      	mov	sp, r7
 801e53e:	bdb0      	pop	{r4, r5, r7, pc}
 801e540:	08028e8c 	.word	0x08028e8c

0801e544 <_ZN6tflite16Register_SOFTMAXEv>:

}  // namespace

TfLiteRegistration Register_SOFTMAX() {
 801e544:	b4b0      	push	{r4, r5, r7}
 801e546:	b083      	sub	sp, #12
 801e548:	af00      	add	r7, sp, #0
 801e54a:	6078      	str	r0, [r7, #4]
          /*prepare=*/SoftmaxPrepare,
          /*invoke=*/SoftmaxEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 801e54c:	687b      	ldr	r3, [r7, #4]
 801e54e:	4a07      	ldr	r2, [pc, #28]	; (801e56c <_ZN6tflite16Register_SOFTMAXEv+0x28>)
 801e550:	461c      	mov	r4, r3
 801e552:	4615      	mov	r5, r2
 801e554:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801e556:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801e558:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801e55c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 801e560:	6878      	ldr	r0, [r7, #4]
 801e562:	370c      	adds	r7, #12
 801e564:	46bd      	mov	sp, r7
 801e566:	bcb0      	pop	{r4, r5, r7}
 801e568:	4770      	bx	lr
 801e56a:	bf00      	nop
 801e56c:	08028ea8 	.word	0x08028ea8

0801e570 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
 801e570:	b590      	push	{r4, r7, lr}
 801e572:	b09f      	sub	sp, #124	; 0x7c
 801e574:	af00      	add	r7, sp, #0
 801e576:	60f8      	str	r0, [r7, #12]
 801e578:	60b9      	str	r1, [r7, #8]
 801e57a:	607a      	str	r2, [r7, #4]
 801e57c:	603b      	str	r3, [r7, #0]
  const int32_t input_beta_multiplier = params.input_multiplier;
 801e57e:	68fb      	ldr	r3, [r7, #12]
 801e580:	689b      	ldr	r3, [r3, #8]
 801e582:	667b      	str	r3, [r7, #100]	; 0x64
  const int32_t input_beta_left_shift = params.input_left_shift;
 801e584:	68fb      	ldr	r3, [r7, #12]
 801e586:	68db      	ldr	r3, [r3, #12]
 801e588:	663b      	str	r3, [r7, #96]	; 0x60
  const int diff_min = params.diff_min;
 801e58a:	68fb      	ldr	r3, [r7, #12]
 801e58c:	699b      	ldr	r3, [r3, #24]
 801e58e:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 801e590:	68b8      	ldr	r0, [r7, #8]
 801e592:	f7fd f8ec 	bl	801b76e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801e596:	4603      	mov	r3, r0
 801e598:	3b01      	subs	r3, #1
 801e59a:	65bb      	str	r3, [r7, #88]	; 0x58
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 801e59c:	683a      	ldr	r2, [r7, #0]
 801e59e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801e5a0:	68b8      	ldr	r0, [r7, #8]
 801e5a2:	f7ff fa91 	bl	801dac8 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 801e5a6:	6578      	str	r0, [r7, #84]	; 0x54
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 801e5a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801e5aa:	683a      	ldr	r2, [r7, #0]
 801e5ac:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801e5ae:	68b8      	ldr	r0, [r7, #8]
 801e5b0:	f7fe fa4c 	bl	801ca4c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801e5b4:	6538      	str	r0, [r7, #80]	; 0x50
  for (int i = 0; i < outer_size; ++i) {
 801e5b6:	2300      	movs	r3, #0
 801e5b8:	677b      	str	r3, [r7, #116]	; 0x74
 801e5ba:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801e5bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e5be:	429a      	cmp	r2, r3
 801e5c0:	f280 80ed 	bge.w	801e79e <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22e>
    InputT max_in_row = std::numeric_limits<InputT>::min();
 801e5c4:	2300      	movs	r3, #0
 801e5c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 801e5ca:	2300      	movs	r3, #0
 801e5cc:	673b      	str	r3, [r7, #112]	; 0x70
 801e5ce:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801e5d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e5d2:	429a      	cmp	r2, r3
 801e5d4:	da16      	bge.n	801e604 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x94>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 801e5d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e5d8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801e5da:	fb03 f202 	mul.w	r2, r3, r2
 801e5de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801e5e0:	4413      	add	r3, r2
 801e5e2:	461a      	mov	r2, r3
 801e5e4:	687b      	ldr	r3, [r7, #4]
 801e5e6:	441a      	add	r2, r3
 801e5e8:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 801e5ec:	4611      	mov	r1, r2
 801e5ee:	4618      	mov	r0, r3
 801e5f0:	f7ff fc1c 	bl	801de2c <_ZSt3maxIhERKT_S2_S2_>
 801e5f4:	4603      	mov	r3, r0
 801e5f6:	781b      	ldrb	r3, [r3, #0]
 801e5f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 801e5fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801e5fe:	3301      	adds	r3, #1
 801e600:	673b      	str	r3, [r7, #112]	; 0x70
 801e602:	e7e4      	b.n	801e5ce <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5e>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
 801e604:	f000 f8cf 	bl	801e7a6 <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>
 801e608:	4603      	mov	r3, r0
 801e60a:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 801e60c:	2300      	movs	r3, #0
 801e60e:	66fb      	str	r3, [r7, #108]	; 0x6c
 801e610:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801e612:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e614:	429a      	cmp	r2, r3
 801e616:	da2f      	bge.n	801e678 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x108>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 801e618:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e61a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801e61c:	fb03 f202 	mul.w	r2, r3, r2
 801e620:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801e622:	4413      	add	r3, r2
 801e624:	461a      	mov	r2, r3
 801e626:	687b      	ldr	r3, [r7, #4]
 801e628:	4413      	add	r3, r2
 801e62a:	781b      	ldrb	r3, [r3, #0]
 801e62c:	461a      	mov	r2, r3
 801e62e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 801e632:	1ad3      	subs	r3, r2, r3
 801e634:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (input_diff >= diff_min) {
 801e636:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801e638:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801e63a:	429a      	cmp	r2, r3
 801e63c:	db18      	blt.n	801e670 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x100>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 801e63e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801e640:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801e642:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801e644:	f7fe fa92 	bl	801cb6c <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 801e648:	64b8      	str	r0, [r7, #72]	; 0x48
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 801e64a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801e64c:	f000 f8b3 	bl	801e7b6 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 801e650:	4603      	mov	r3, r0
 801e652:	61fb      	str	r3, [r7, #28]
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
 801e654:	69f8      	ldr	r0, [r7, #28]
 801e656:	f000 f8dd 	bl	801e814 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 801e65a:	4603      	mov	r3, r0
 801e65c:	4618      	mov	r0, r3
 801e65e:	f000 fa21 	bl	801eaa4 <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 801e662:	4603      	mov	r3, r0
 801e664:	4619      	mov	r1, r3
 801e666:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801e668:	f000 f8b6 	bl	801e7d8 <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801e66c:	4603      	mov	r3, r0
 801e66e:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 801e670:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801e672:	3301      	adds	r3, #1
 801e674:	66fb      	str	r3, [r7, #108]	; 0x6c
 801e676:	e7cb      	b.n	801e610 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa0>
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
 801e678:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801e67c:	4618      	mov	r0, r3
 801e67e:	f000 fa2b 	bl	801ead8 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 801e682:	4603      	mov	r3, r0
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
 801e684:	681b      	ldr	r3, [r3, #0]
 801e686:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801e68a:	210c      	movs	r1, #12
 801e68c:	4618      	mov	r0, r3
 801e68e:	f7fe fa80 	bl	801cb92 <_ZN6tflite13GetReciprocalEliPi>
 801e692:	4603      	mov	r3, r0
 801e694:	4618      	mov	r0, r3
 801e696:	f7fe fab9 	bl	801cc0c <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801e69a:	4603      	mov	r3, r0
 801e69c:	623b      	str	r3, [r7, #32]
    for (int c = 0; c < depth; ++c) {
 801e69e:	2300      	movs	r3, #0
 801e6a0:	66bb      	str	r3, [r7, #104]	; 0x68
 801e6a2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801e6a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e6a6:	429a      	cmp	r2, r3
 801e6a8:	da75      	bge.n	801e796 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x226>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 801e6aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e6ac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801e6ae:	fb03 f202 	mul.w	r2, r3, r2
 801e6b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801e6b4:	4413      	add	r3, r2
 801e6b6:	461a      	mov	r2, r3
 801e6b8:	687b      	ldr	r3, [r7, #4]
 801e6ba:	4413      	add	r3, r2
 801e6bc:	781b      	ldrb	r3, [r3, #0]
 801e6be:	461a      	mov	r2, r3
 801e6c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 801e6c4:	1ad3      	subs	r3, r2, r3
 801e6c6:	647b      	str	r3, [r7, #68]	; 0x44
      if (input_diff >= diff_min) {
 801e6c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801e6ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801e6cc:	429a      	cmp	r2, r3
 801e6ce:	db50      	blt.n	801e772 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x202>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 801e6d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801e6d2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801e6d4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801e6d6:	f7fe fa49 	bl	801cb6c <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 801e6da:	6438      	str	r0, [r7, #64]	; 0x40
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 801e6dc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801e6de:	f000 f86a 	bl	801e7b6 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 801e6e2:	4603      	mov	r3, r0
 801e6e4:	61bb      	str	r3, [r7, #24]
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 801e6e6:	69b8      	ldr	r0, [r7, #24]
 801e6e8:	f000 f894 	bl	801e814 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 801e6ec:	4603      	mov	r3, r0
 801e6ee:	617b      	str	r3, [r7, #20]
            (shifted_scale * exp_in_0).raw(),
 801e6f0:	6979      	ldr	r1, [r7, #20]
 801e6f2:	6a38      	ldr	r0, [r7, #32]
 801e6f4:	f7ff fad2 	bl	801dc9c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801e6f8:	4603      	mov	r3, r0
 801e6fa:	633b      	str	r3, [r7, #48]	; 0x30
 801e6fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801e700:	4618      	mov	r0, r3
 801e702:	f7fe faf5 	bl	801ccf0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801e706:	4603      	mov	r3, r0
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 801e708:	681b      	ldr	r3, [r3, #0]
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
 801e70a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e70c:	3217      	adds	r2, #23
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 801e70e:	4611      	mov	r1, r2
 801e710:	4618      	mov	r0, r3
 801e712:	f7fd fd33 	bl	801c17c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 801e716:	63f8      	str	r0, [r7, #60]	; 0x3c
            static_cast<int32_t>(std::numeric_limits<OutputT>::min());
 801e718:	f7fc fd07 	bl	801b12a <_ZNSt14numeric_limitsIhE3minEv>
 801e71c:	4603      	mov	r3, r0
 801e71e:	461a      	mov	r2, r3
            unsat_output +
 801e720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e722:	4413      	add	r3, r2
        const int32_t shifted_output =
 801e724:	613b      	str	r3, [r7, #16]
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
 801e726:	f7fc fd08 	bl	801b13a <_ZNSt14numeric_limitsIhE3maxEv>
 801e72a:	4603      	mov	r3, r0
 801e72c:	637b      	str	r3, [r7, #52]	; 0x34
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
 801e72e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 801e732:	f107 0310 	add.w	r3, r7, #16
 801e736:	4611      	mov	r1, r2
 801e738:	4618      	mov	r0, r3
 801e73a:	f7fc ffb9 	bl	801b6b0 <_ZSt3minIlERKT_S2_S2_>
 801e73e:	4604      	mov	r4, r0
 801e740:	f7fc fcf3 	bl	801b12a <_ZNSt14numeric_limitsIhE3minEv>
 801e744:	4603      	mov	r3, r0
 801e746:	63bb      	str	r3, [r7, #56]	; 0x38
 801e748:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801e74c:	4619      	mov	r1, r3
 801e74e:	4620      	mov	r0, r4
 801e750:	f7fc ffc2 	bl	801b6d8 <_ZSt3maxIlERKT_S2_S2_>
 801e754:	4603      	mov	r3, r0
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 801e756:	6819      	ldr	r1, [r3, #0]
 801e758:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e75a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801e75c:	fb03 f202 	mul.w	r2, r3, r2
 801e760:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801e762:	4413      	add	r3, r2
 801e764:	461a      	mov	r2, r3
 801e766:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801e76a:	4413      	add	r3, r2
 801e76c:	b2ca      	uxtb	r2, r1
 801e76e:	701a      	strb	r2, [r3, #0]
 801e770:	e00d      	b.n	801e78e <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x21e>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 801e772:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e774:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801e776:	fb03 f202 	mul.w	r2, r3, r2
 801e77a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801e77c:	4413      	add	r3, r2
 801e77e:	461a      	mov	r2, r3
 801e780:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801e784:	189c      	adds	r4, r3, r2
 801e786:	f7fc fcd0 	bl	801b12a <_ZNSt14numeric_limitsIhE3minEv>
 801e78a:	4603      	mov	r3, r0
 801e78c:	7023      	strb	r3, [r4, #0]
    for (int c = 0; c < depth; ++c) {
 801e78e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801e790:	3301      	adds	r3, #1
 801e792:	66bb      	str	r3, [r7, #104]	; 0x68
 801e794:	e785      	b.n	801e6a2 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x132>
  for (int i = 0; i < outer_size; ++i) {
 801e796:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e798:	3301      	adds	r3, #1
 801e79a:	677b      	str	r3, [r7, #116]	; 0x74
 801e79c:	e70d      	b.n	801e5ba <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4a>
}
 801e79e:	bf00      	nop
 801e7a0:	377c      	adds	r7, #124	; 0x7c
 801e7a2:	46bd      	mov	sp, r7
 801e7a4:	bd90      	pop	{r4, r7, pc}

0801e7a6 <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>:
  static FixedPoint Zero() { return FromScalarRaw(0); }
 801e7a6:	b580      	push	{r7, lr}
 801e7a8:	af00      	add	r7, sp, #0
 801e7aa:	2000      	movs	r0, #0
 801e7ac:	f000 f99f 	bl	801eaee <_ZN8gemmlowp10FixedPointIlLi12EE13FromScalarRawEl>
 801e7b0:	4603      	mov	r3, r0
 801e7b2:	4618      	mov	r0, r3
 801e7b4:	bd80      	pop	{r7, pc}

0801e7b6 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 801e7b6:	b580      	push	{r7, lr}
 801e7b8:	b084      	sub	sp, #16
 801e7ba:	af00      	add	r7, sp, #0
 801e7bc:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 801e7be:	f107 030c 	add.w	r3, r7, #12
 801e7c2:	4618      	mov	r0, r3
 801e7c4:	f000 f9a7 	bl	801eb16 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801e7c8:	4602      	mov	r2, r0
 801e7ca:	687b      	ldr	r3, [r7, #4]
 801e7cc:	6013      	str	r3, [r2, #0]
    return retval;
 801e7ce:	68fb      	ldr	r3, [r7, #12]
  }
 801e7d0:	4618      	mov	r0, r3
 801e7d2:	3710      	adds	r7, #16
 801e7d4:	46bd      	mov	sp, r7
 801e7d6:	bd80      	pop	{r7, pc}

0801e7d8 <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 801e7d8:	b590      	push	{r4, r7, lr}
 801e7da:	b083      	sub	sp, #12
 801e7dc:	af00      	add	r7, sp, #0
 801e7de:	6078      	str	r0, [r7, #4]
 801e7e0:	6039      	str	r1, [r7, #0]
 801e7e2:	1d3b      	adds	r3, r7, #4
 801e7e4:	4618      	mov	r0, r3
 801e7e6:	f000 f977 	bl	801ead8 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 801e7ea:	4603      	mov	r3, r0
 801e7ec:	681c      	ldr	r4, [r3, #0]
 801e7ee:	463b      	mov	r3, r7
 801e7f0:	4618      	mov	r0, r3
 801e7f2:	f000 f971 	bl	801ead8 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 801e7f6:	4603      	mov	r3, r0
 801e7f8:	681b      	ldr	r3, [r3, #0]
 801e7fa:	4619      	mov	r1, r3
 801e7fc:	4620      	mov	r0, r4
 801e7fe:	f7fe f8bd 	bl	801c97c <_ZN8gemmlowp3AddIlEET_S1_S1_>
 801e802:	4603      	mov	r3, r0
 801e804:	4618      	mov	r0, r3
 801e806:	f000 f991 	bl	801eb2c <_ZN8gemmlowp10FixedPointIlLi12EE7FromRawEl>
 801e80a:	4603      	mov	r3, r0
 801e80c:	4618      	mov	r0, r3
 801e80e:	370c      	adds	r7, #12
 801e810:	46bd      	mov	sp, r7
 801e812:	bd90      	pop	{r4, r7, pc}

0801e814 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>:
FixedPoint<tRawType, 0> exp_on_negative_values(
 801e814:	b590      	push	{r4, r7, lr}
 801e816:	b091      	sub	sp, #68	; 0x44
 801e818:	af00      	add	r7, sp, #0
 801e81a:	6078      	str	r0, [r7, #4]
  const InputF kOneQuarter = InputF::template ConstantPOT<-2>();
 801e81c:	f000 f997 	bl	801eb4e <_ZN8gemmlowp10FixedPointIlLi5EE11ConstantPOTILin2EEES1_v>
 801e820:	4603      	mov	r3, r0
 801e822:	637b      	str	r3, [r7, #52]	; 0x34
  InputF mask = kOneQuarter - InputF::FromScalarRaw(1);
 801e824:	2001      	movs	r0, #1
 801e826:	f000 f99b 	bl	801eb60 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>
 801e82a:	4603      	mov	r3, r0
 801e82c:	4619      	mov	r1, r3
 801e82e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801e830:	f000 f9aa 	bl	801eb88 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801e834:	4603      	mov	r3, r0
 801e836:	633b      	str	r3, [r7, #48]	; 0x30
  InputF a_mod_quarter_minus_one_quarter = (a & mask) - kOneQuarter;
 801e838:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801e83a:	6878      	ldr	r0, [r7, #4]
 801e83c:	f000 f9c2 	bl	801ebc4 <_ZN8gemmlowpanIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801e840:	4603      	mov	r3, r0
 801e842:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801e844:	4618      	mov	r0, r3
 801e846:	f000 f99f 	bl	801eb88 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801e84a:	4603      	mov	r3, r0
 801e84c:	62fb      	str	r3, [r7, #44]	; 0x2c
  ResultF result = exp_on_interval_between_negative_one_quarter_and_0_excl(
 801e84e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801e850:	f000 f9d6 	bl	801ec00 <_ZN8gemmlowp7RescaleILi0ElLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 801e854:	4603      	mov	r3, r0
 801e856:	4618      	mov	r0, r3
 801e858:	f7ff f9be 	bl	801dbd8 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>
 801e85c:	4603      	mov	r3, r0
 801e85e:	62bb      	str	r3, [r7, #40]	; 0x28
  tRawType remainder = (a_mod_quarter_minus_one_quarter - a).raw();
 801e860:	6879      	ldr	r1, [r7, #4]
 801e862:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801e864:	f000 f990 	bl	801eb88 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801e868:	4603      	mov	r3, r0
 801e86a:	63bb      	str	r3, [r7, #56]	; 0x38
 801e86c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801e870:	4618      	mov	r0, r3
 801e872:	f000 f950 	bl	801eb16 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801e876:	4603      	mov	r3, r0
 801e878:	681b      	ldr	r3, [r3, #0]
 801e87a:	63fb      	str	r3, [r7, #60]	; 0x3c
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);
 801e87c:	4883      	ldr	r0, [pc, #524]	; (801ea8c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x278>)
 801e87e:	f7ff f952 	bl	801db26 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801e882:	4603      	mov	r3, r0
 801e884:	4618      	mov	r0, r3
 801e886:	f7fe fa3e 	bl	801cd06 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801e88a:	4603      	mov	r3, r0
 801e88c:	627b      	str	r3, [r7, #36]	; 0x24
 801e88e:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 801e892:	f7fe f837 	bl	801c904 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801e896:	4603      	mov	r3, r0
 801e898:	4619      	mov	r1, r3
 801e89a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801e89c:	f7fe f83d 	bl	801c91a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801e8a0:	4603      	mov	r3, r0
 801e8a2:	4618      	mov	r0, r3
 801e8a4:	f7fe f88c 	bl	801c9c0 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801e8a8:	4604      	mov	r4, r0
 801e8aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801e8ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801e8ae:	f7ff f9f5 	bl	801dc9c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801e8b2:	4603      	mov	r3, r0
 801e8b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801e8b6:	4619      	mov	r1, r3
 801e8b8:	4620      	mov	r0, r4
 801e8ba:	f7ff f95a 	bl	801db72 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 801e8be:	4603      	mov	r3, r0
 801e8c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(-1, 1302514674);
 801e8c2:	4873      	ldr	r0, [pc, #460]	; (801ea90 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x27c>)
 801e8c4:	f7ff f92f 	bl	801db26 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801e8c8:	4603      	mov	r3, r0
 801e8ca:	4618      	mov	r0, r3
 801e8cc:	f7fe fa1b 	bl	801cd06 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801e8d0:	4603      	mov	r3, r0
 801e8d2:	623b      	str	r3, [r7, #32]
 801e8d4:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 801e8d8:	f7fe f814 	bl	801c904 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801e8dc:	4603      	mov	r3, r0
 801e8de:	4619      	mov	r1, r3
 801e8e0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801e8e2:	f7fe f81a 	bl	801c91a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801e8e6:	4603      	mov	r3, r0
 801e8e8:	4618      	mov	r0, r3
 801e8ea:	f7fe f869 	bl	801c9c0 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801e8ee:	4604      	mov	r4, r0
 801e8f0:	6a39      	ldr	r1, [r7, #32]
 801e8f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801e8f4:	f7ff f9d2 	bl	801dc9c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801e8f8:	4603      	mov	r3, r0
 801e8fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801e8fc:	4619      	mov	r1, r3
 801e8fe:	4620      	mov	r0, r4
 801e900:	f7ff f937 	bl	801db72 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 801e904:	4603      	mov	r3, r0
 801e906:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+0, 790015084);
 801e908:	4862      	ldr	r0, [pc, #392]	; (801ea94 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x280>)
 801e90a:	f7ff f90c 	bl	801db26 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801e90e:	4603      	mov	r3, r0
 801e910:	4618      	mov	r0, r3
 801e912:	f7fe f9f8 	bl	801cd06 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801e916:	4603      	mov	r3, r0
 801e918:	61fb      	str	r3, [r7, #28]
 801e91a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 801e91e:	f7fd fff1 	bl	801c904 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801e922:	4603      	mov	r3, r0
 801e924:	4619      	mov	r1, r3
 801e926:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801e928:	f7fd fff7 	bl	801c91a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801e92c:	4603      	mov	r3, r0
 801e92e:	4618      	mov	r0, r3
 801e930:	f7fe f846 	bl	801c9c0 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801e934:	4604      	mov	r4, r0
 801e936:	69f9      	ldr	r1, [r7, #28]
 801e938:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801e93a:	f7ff f9af 	bl	801dc9c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801e93e:	4603      	mov	r3, r0
 801e940:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801e942:	4619      	mov	r1, r3
 801e944:	4620      	mov	r0, r4
 801e946:	f7ff f914 	bl	801db72 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 801e94a:	4603      	mov	r3, r0
 801e94c:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+1, 290630308);
 801e94e:	4852      	ldr	r0, [pc, #328]	; (801ea98 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x284>)
 801e950:	f7ff f8e9 	bl	801db26 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801e954:	4603      	mov	r3, r0
 801e956:	4618      	mov	r0, r3
 801e958:	f7fe f9d5 	bl	801cd06 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801e95c:	4603      	mov	r3, r0
 801e95e:	61bb      	str	r3, [r7, #24]
 801e960:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 801e964:	f7fd ffce 	bl	801c904 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801e968:	4603      	mov	r3, r0
 801e96a:	4619      	mov	r1, r3
 801e96c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801e96e:	f7fd ffd4 	bl	801c91a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801e972:	4603      	mov	r3, r0
 801e974:	4618      	mov	r0, r3
 801e976:	f7fe f823 	bl	801c9c0 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801e97a:	4604      	mov	r4, r0
 801e97c:	69b9      	ldr	r1, [r7, #24]
 801e97e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801e980:	f7ff f98c 	bl	801dc9c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801e984:	4603      	mov	r3, r0
 801e986:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801e988:	4619      	mov	r1, r3
 801e98a:	4620      	mov	r0, r4
 801e98c:	f7ff f8f1 	bl	801db72 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 801e990:	4603      	mov	r3, r0
 801e992:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+2, 39332535);
 801e994:	4841      	ldr	r0, [pc, #260]	; (801ea9c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x288>)
 801e996:	f7ff f8c6 	bl	801db26 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801e99a:	4603      	mov	r3, r0
 801e99c:	4618      	mov	r0, r3
 801e99e:	f7fe f9b2 	bl	801cd06 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801e9a2:	4603      	mov	r3, r0
 801e9a4:	617b      	str	r3, [r7, #20]
 801e9a6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 801e9aa:	f7fd ffab 	bl	801c904 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801e9ae:	4603      	mov	r3, r0
 801e9b0:	4619      	mov	r1, r3
 801e9b2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801e9b4:	f7fd ffb1 	bl	801c91a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801e9b8:	4603      	mov	r3, r0
 801e9ba:	4618      	mov	r0, r3
 801e9bc:	f7fe f800 	bl	801c9c0 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801e9c0:	4604      	mov	r4, r0
 801e9c2:	6979      	ldr	r1, [r7, #20]
 801e9c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801e9c6:	f7ff f969 	bl	801dc9c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801e9ca:	4603      	mov	r3, r0
 801e9cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801e9ce:	4619      	mov	r1, r3
 801e9d0:	4620      	mov	r0, r4
 801e9d2:	f7ff f8ce 	bl	801db72 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 801e9d6:	4603      	mov	r3, r0
 801e9d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+3, 720401);
 801e9da:	4831      	ldr	r0, [pc, #196]	; (801eaa0 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x28c>)
 801e9dc:	f7ff f8a3 	bl	801db26 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801e9e0:	4603      	mov	r3, r0
 801e9e2:	4618      	mov	r0, r3
 801e9e4:	f7fe f98f 	bl	801cd06 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801e9e8:	4603      	mov	r3, r0
 801e9ea:	613b      	str	r3, [r7, #16]
 801e9ec:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 801e9f0:	f7fd ff88 	bl	801c904 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801e9f4:	4603      	mov	r3, r0
 801e9f6:	4619      	mov	r1, r3
 801e9f8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801e9fa:	f7fd ff8e 	bl	801c91a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801e9fe:	4603      	mov	r3, r0
 801ea00:	4618      	mov	r0, r3
 801ea02:	f7fd ffdd 	bl	801c9c0 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801ea06:	4604      	mov	r4, r0
 801ea08:	6939      	ldr	r1, [r7, #16]
 801ea0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801ea0c:	f7ff f946 	bl	801dc9c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801ea10:	4603      	mov	r3, r0
 801ea12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ea14:	4619      	mov	r1, r3
 801ea16:	4620      	mov	r0, r4
 801ea18:	f7ff f8ab 	bl	801db72 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 801ea1c:	4603      	mov	r3, r0
 801ea1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+4, 242);
 801ea20:	20f2      	movs	r0, #242	; 0xf2
 801ea22:	f7ff f880 	bl	801db26 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801ea26:	4603      	mov	r3, r0
 801ea28:	4618      	mov	r0, r3
 801ea2a:	f7fe f96c 	bl	801cd06 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801ea2e:	4603      	mov	r3, r0
 801ea30:	60fb      	str	r3, [r7, #12]
 801ea32:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 801ea36:	f7fd ff65 	bl	801c904 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801ea3a:	4603      	mov	r3, r0
 801ea3c:	4619      	mov	r1, r3
 801ea3e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801ea40:	f7fd ff6b 	bl	801c91a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801ea44:	4603      	mov	r3, r0
 801ea46:	4618      	mov	r0, r3
 801ea48:	f7fd ffba 	bl	801c9c0 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801ea4c:	4604      	mov	r4, r0
 801ea4e:	68f9      	ldr	r1, [r7, #12]
 801ea50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801ea52:	f7ff f923 	bl	801dc9c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801ea56:	4603      	mov	r3, r0
 801ea58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ea5a:	4619      	mov	r1, r3
 801ea5c:	4620      	mov	r0, r4
 801ea5e:	f7ff f888 	bl	801db72 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 801ea62:	4603      	mov	r3, r0
 801ea64:	62bb      	str	r3, [r7, #40]	; 0x28
  result = SelectUsingMask(MaskIfZero(a), ResultF::One(), result);
 801ea66:	6878      	ldr	r0, [r7, #4]
 801ea68:	f000 f8e4 	bl	801ec34 <_ZN8gemmlowp10MaskIfZeroIlLi5EEET_NS_10FixedPointIS1_XT0_EEE>
 801ea6c:	4604      	mov	r4, r0
 801ea6e:	f7fe f95e 	bl	801cd2e <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>
 801ea72:	4603      	mov	r3, r0
 801ea74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ea76:	4619      	mov	r1, r3
 801ea78:	4620      	mov	r0, r4
 801ea7a:	f7ff f87a 	bl	801db72 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 801ea7e:	4603      	mov	r3, r0
 801ea80:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 801ea82:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 801ea84:	4618      	mov	r0, r3
 801ea86:	3744      	adds	r7, #68	; 0x44
 801ea88:	46bd      	mov	sp, r7
 801ea8a:	bd90      	pop	{r4, r7, pc}
 801ea8c:	63afbe7b 	.word	0x63afbe7b
 801ea90:	4da2cbf2 	.word	0x4da2cbf2
 801ea94:	2f16ac6c 	.word	0x2f16ac6c
 801ea98:	1152aaa4 	.word	0x1152aaa4
 801ea9c:	02582ab7 	.word	0x02582ab7
 801eaa0:	000afe11 	.word	0x000afe11

0801eaa4 <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 801eaa4:	b5b0      	push	{r4, r5, r7, lr}
 801eaa6:	b084      	sub	sp, #16
 801eaa8:	af00      	add	r7, sp, #0
 801eaaa:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 801eaac:	1d3b      	adds	r3, r7, #4
 801eaae:	4618      	mov	r0, r3
 801eab0:	f7fe f91e 	bl	801ccf0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801eab4:	4603      	mov	r3, r0
 801eab6:	681d      	ldr	r5, [r3, #0]
 801eab8:	f107 030c 	add.w	r3, r7, #12
 801eabc:	4618      	mov	r0, r3
 801eabe:	f000 f80b 	bl	801ead8 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 801eac2:	4604      	mov	r4, r0
 801eac4:	4628      	mov	r0, r5
 801eac6:	f000 f8c7 	bl	801ec58 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>
 801eaca:	4603      	mov	r3, r0
 801eacc:	6023      	str	r3, [r4, #0]
  return result;
 801eace:	68fb      	ldr	r3, [r7, #12]
}
 801ead0:	4618      	mov	r0, r3
 801ead2:	3710      	adds	r7, #16
 801ead4:	46bd      	mov	sp, r7
 801ead6:	bdb0      	pop	{r4, r5, r7, pc}

0801ead8 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>:
  RawType& raw() { return i_; }
 801ead8:	b480      	push	{r7}
 801eada:	b083      	sub	sp, #12
 801eadc:	af00      	add	r7, sp, #0
 801eade:	6078      	str	r0, [r7, #4]
 801eae0:	687b      	ldr	r3, [r7, #4]
 801eae2:	4618      	mov	r0, r3
 801eae4:	370c      	adds	r7, #12
 801eae6:	46bd      	mov	sp, r7
 801eae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eaec:	4770      	bx	lr

0801eaee <_ZN8gemmlowp10FixedPointIlLi12EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 801eaee:	b590      	push	{r4, r7, lr}
 801eaf0:	b085      	sub	sp, #20
 801eaf2:	af00      	add	r7, sp, #0
 801eaf4:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 801eaf6:	f107 030c 	add.w	r3, r7, #12
 801eafa:	4618      	mov	r0, r3
 801eafc:	f7ff ffec 	bl	801ead8 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 801eb00:	4604      	mov	r4, r0
 801eb02:	6878      	ldr	r0, [r7, #4]
 801eb04:	f7fd fefe 	bl	801c904 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801eb08:	4603      	mov	r3, r0
 801eb0a:	6023      	str	r3, [r4, #0]
    return retval;
 801eb0c:	68fb      	ldr	r3, [r7, #12]
  }
 801eb0e:	4618      	mov	r0, r3
 801eb10:	3714      	adds	r7, #20
 801eb12:	46bd      	mov	sp, r7
 801eb14:	bd90      	pop	{r4, r7, pc}

0801eb16 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>:
  RawType& raw() { return i_; }
 801eb16:	b480      	push	{r7}
 801eb18:	b083      	sub	sp, #12
 801eb1a:	af00      	add	r7, sp, #0
 801eb1c:	6078      	str	r0, [r7, #4]
 801eb1e:	687b      	ldr	r3, [r7, #4]
 801eb20:	4618      	mov	r0, r3
 801eb22:	370c      	adds	r7, #12
 801eb24:	46bd      	mov	sp, r7
 801eb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eb2a:	4770      	bx	lr

0801eb2c <_ZN8gemmlowp10FixedPointIlLi12EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 801eb2c:	b580      	push	{r7, lr}
 801eb2e:	b084      	sub	sp, #16
 801eb30:	af00      	add	r7, sp, #0
 801eb32:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 801eb34:	f107 030c 	add.w	r3, r7, #12
 801eb38:	4618      	mov	r0, r3
 801eb3a:	f7ff ffcd 	bl	801ead8 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 801eb3e:	4602      	mov	r2, r0
 801eb40:	687b      	ldr	r3, [r7, #4]
 801eb42:	6013      	str	r3, [r2, #0]
    return retval;
 801eb44:	68fb      	ldr	r3, [r7, #12]
  }
 801eb46:	4618      	mov	r0, r3
 801eb48:	3710      	adds	r7, #16
 801eb4a:	46bd      	mov	sp, r7
 801eb4c:	bd80      	pop	{r7, pc}

0801eb4e <_ZN8gemmlowp10FixedPointIlLi5EE11ConstantPOTILin2EEES1_v>:
  static FixedPoint ConstantPOT() {
 801eb4e:	b580      	push	{r7, lr}
 801eb50:	af00      	add	r7, sp, #0
    return FromScalarRaw(ScalarRawType(1) << kOffset);
 801eb52:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 801eb56:	f000 f803 	bl	801eb60 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>
 801eb5a:	4603      	mov	r3, r0
  }
 801eb5c:	4618      	mov	r0, r3
 801eb5e:	bd80      	pop	{r7, pc}

0801eb60 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 801eb60:	b590      	push	{r4, r7, lr}
 801eb62:	b085      	sub	sp, #20
 801eb64:	af00      	add	r7, sp, #0
 801eb66:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 801eb68:	f107 030c 	add.w	r3, r7, #12
 801eb6c:	4618      	mov	r0, r3
 801eb6e:	f7ff ffd2 	bl	801eb16 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801eb72:	4604      	mov	r4, r0
 801eb74:	6878      	ldr	r0, [r7, #4]
 801eb76:	f7fd fec5 	bl	801c904 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801eb7a:	4603      	mov	r3, r0
 801eb7c:	6023      	str	r3, [r4, #0]
    return retval;
 801eb7e:	68fb      	ldr	r3, [r7, #12]
  }
 801eb80:	4618      	mov	r0, r3
 801eb82:	3714      	adds	r7, #20
 801eb84:	46bd      	mov	sp, r7
 801eb86:	bd90      	pop	{r4, r7, pc}

0801eb88 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 801eb88:	b590      	push	{r4, r7, lr}
 801eb8a:	b083      	sub	sp, #12
 801eb8c:	af00      	add	r7, sp, #0
 801eb8e:	6078      	str	r0, [r7, #4]
 801eb90:	6039      	str	r1, [r7, #0]
 801eb92:	1d3b      	adds	r3, r7, #4
 801eb94:	4618      	mov	r0, r3
 801eb96:	f7ff ffbe 	bl	801eb16 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801eb9a:	4603      	mov	r3, r0
 801eb9c:	681c      	ldr	r4, [r3, #0]
 801eb9e:	463b      	mov	r3, r7
 801eba0:	4618      	mov	r0, r3
 801eba2:	f7ff ffb8 	bl	801eb16 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801eba6:	4603      	mov	r3, r0
 801eba8:	681b      	ldr	r3, [r3, #0]
 801ebaa:	4619      	mov	r1, r3
 801ebac:	4620      	mov	r0, r4
 801ebae:	f7fe f9db 	bl	801cf68 <_ZN8gemmlowp3SubIlEET_S1_S1_>
 801ebb2:	4603      	mov	r3, r0
 801ebb4:	4618      	mov	r0, r3
 801ebb6:	f7ff fdfe 	bl	801e7b6 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 801ebba:	4603      	mov	r3, r0
 801ebbc:	4618      	mov	r0, r3
 801ebbe:	370c      	adds	r7, #12
 801ebc0:	46bd      	mov	sp, r7
 801ebc2:	bd90      	pop	{r4, r7, pc}

0801ebc4 <_ZN8gemmlowpanIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator&, BitAnd)
 801ebc4:	b590      	push	{r4, r7, lr}
 801ebc6:	b083      	sub	sp, #12
 801ebc8:	af00      	add	r7, sp, #0
 801ebca:	6078      	str	r0, [r7, #4]
 801ebcc:	6039      	str	r1, [r7, #0]
 801ebce:	1d3b      	adds	r3, r7, #4
 801ebd0:	4618      	mov	r0, r3
 801ebd2:	f7ff ffa0 	bl	801eb16 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801ebd6:	4603      	mov	r3, r0
 801ebd8:	681c      	ldr	r4, [r3, #0]
 801ebda:	463b      	mov	r3, r7
 801ebdc:	4618      	mov	r0, r3
 801ebde:	f7ff ff9a 	bl	801eb16 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801ebe2:	4603      	mov	r3, r0
 801ebe4:	681b      	ldr	r3, [r3, #0]
 801ebe6:	4619      	mov	r1, r3
 801ebe8:	4620      	mov	r0, r4
 801ebea:	f7fd fe96 	bl	801c91a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801ebee:	4603      	mov	r3, r0
 801ebf0:	4618      	mov	r0, r3
 801ebf2:	f7ff fde0 	bl	801e7b6 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 801ebf6:	4603      	mov	r3, r0
 801ebf8:	4618      	mov	r0, r3
 801ebfa:	370c      	adds	r7, #12
 801ebfc:	46bd      	mov	sp, r7
 801ebfe:	bd90      	pop	{r4, r7, pc}

0801ec00 <_ZN8gemmlowp7RescaleILi0ElLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 801ec00:	b5b0      	push	{r4, r5, r7, lr}
 801ec02:	b084      	sub	sp, #16
 801ec04:	af00      	add	r7, sp, #0
 801ec06:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 801ec08:	1d3b      	adds	r3, r7, #4
 801ec0a:	4618      	mov	r0, r3
 801ec0c:	f7ff ff83 	bl	801eb16 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801ec10:	4603      	mov	r3, r0
 801ec12:	681d      	ldr	r5, [r3, #0]
 801ec14:	f107 030c 	add.w	r3, r7, #12
 801ec18:	4618      	mov	r0, r3
 801ec1a:	f7fe f869 	bl	801ccf0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801ec1e:	4604      	mov	r4, r0
 801ec20:	4628      	mov	r0, r5
 801ec22:	f000 f825 	bl	801ec70 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5ElEET0_S1_>
 801ec26:	4603      	mov	r3, r0
 801ec28:	6023      	str	r3, [r4, #0]
  return result;
 801ec2a:	68fb      	ldr	r3, [r7, #12]
}
 801ec2c:	4618      	mov	r0, r3
 801ec2e:	3710      	adds	r7, #16
 801ec30:	46bd      	mov	sp, r7
 801ec32:	bdb0      	pop	{r4, r5, r7, pc}

0801ec34 <_ZN8gemmlowp10MaskIfZeroIlLi5EEET_NS_10FixedPointIS1_XT0_EEE>:
MAKE_FIXEDPOINT_UNARY_FUNC_RETURNING_RAW(MaskIfZero)
 801ec34:	b580      	push	{r7, lr}
 801ec36:	b082      	sub	sp, #8
 801ec38:	af00      	add	r7, sp, #0
 801ec3a:	6078      	str	r0, [r7, #4]
 801ec3c:	1d3b      	adds	r3, r7, #4
 801ec3e:	4618      	mov	r0, r3
 801ec40:	f7ff ff69 	bl	801eb16 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801ec44:	4603      	mov	r3, r0
 801ec46:	681b      	ldr	r3, [r3, #0]
 801ec48:	4618      	mov	r0, r3
 801ec4a:	f7fe ffb3 	bl	801dbb4 <_ZN8gemmlowp10MaskIfZeroIlEET_S1_>
 801ec4e:	4603      	mov	r3, r0
 801ec50:	4618      	mov	r0, r3
 801ec52:	3708      	adds	r7, #8
 801ec54:	46bd      	mov	sp, r7
 801ec56:	bd80      	pop	{r7, pc}

0801ec58 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 801ec58:	b580      	push	{r7, lr}
 801ec5a:	b082      	sub	sp, #8
 801ec5c:	af00      	add	r7, sp, #0
 801ec5e:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 801ec60:	6878      	ldr	r0, [r7, #4]
 801ec62:	f000 f811 	bl	801ec88 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin12ElLin1EE4evalEl>
 801ec66:	4603      	mov	r3, r0
}
 801ec68:	4618      	mov	r0, r3
 801ec6a:	3708      	adds	r7, #8
 801ec6c:	46bd      	mov	sp, r7
 801ec6e:	bd80      	pop	{r7, pc}

0801ec70 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 801ec70:	b580      	push	{r7, lr}
 801ec72:	b082      	sub	sp, #8
 801ec74:	af00      	add	r7, sp, #0
 801ec76:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 801ec78:	6878      	ldr	r0, [r7, #4]
 801ec7a:	f000 f813 	bl	801eca4 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl>
 801ec7e:	4603      	mov	r3, r0
}
 801ec80:	4618      	mov	r0, r3
 801ec82:	3708      	adds	r7, #8
 801ec84:	46bd      	mov	sp, r7
 801ec86:	bd80      	pop	{r7, pc}

0801ec88 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin12ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 801ec88:	b580      	push	{r7, lr}
 801ec8a:	b082      	sub	sp, #8
 801ec8c:	af00      	add	r7, sp, #0
 801ec8e:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 801ec90:	210c      	movs	r1, #12
 801ec92:	6878      	ldr	r0, [r7, #4]
 801ec94:	f7fd fa72 	bl	801c17c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 801ec98:	4603      	mov	r3, r0
  }
 801ec9a:	4618      	mov	r0, r3
 801ec9c:	3708      	adds	r7, #8
 801ec9e:	46bd      	mov	sp, r7
 801eca0:	bd80      	pop	{r7, pc}
	...

0801eca4 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 801eca4:	b580      	push	{r7, lr}
 801eca6:	b08a      	sub	sp, #40	; 0x28
 801eca8:	af00      	add	r7, sp, #0
 801ecaa:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 801ecac:	f7fc fde1 	bl	801b872 <_ZNSt14numeric_limitsIlE3minEv>
 801ecb0:	4603      	mov	r3, r0
 801ecb2:	4618      	mov	r0, r3
 801ecb4:	f7fd fe26 	bl	801c904 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801ecb8:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 801ecba:	f7fc f863 	bl	801ad84 <_ZNSt14numeric_limitsIlE3maxEv>
 801ecbe:	4603      	mov	r3, r0
 801ecc0:	4618      	mov	r0, r3
 801ecc2:	f7fd fe1f 	bl	801c904 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801ecc6:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 801ecc8:	2320      	movs	r3, #32
 801ecca:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 801eccc:	f06f 437c 	mvn.w	r3, #4227858432	; 0xfc000000
 801ecd0:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 801ecd2:	f06f 407c 	mvn.w	r0, #4227858432	; 0xfc000000
 801ecd6:	f7fd fe15 	bl	801c904 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801ecda:	4603      	mov	r3, r0
 801ecdc:	4619      	mov	r1, r3
 801ecde:	6878      	ldr	r0, [r7, #4]
 801ece0:	f7fd fe5a 	bl	801c998 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 801ece4:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 801ece6:	480f      	ldr	r0, [pc, #60]	; (801ed24 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl+0x80>)
 801ece8:	f7fd fe0c 	bl	801c904 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801ecec:	4603      	mov	r3, r0
 801ecee:	4619      	mov	r1, r3
 801ecf0:	6878      	ldr	r0, [r7, #4]
 801ecf2:	f7fd fe2f 	bl	801c954 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 801ecf6:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 801ecf8:	2105      	movs	r1, #5
 801ecfa:	6878      	ldr	r0, [r7, #4]
 801ecfc:	f7fe fa18 	bl	801d130 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 801ed00:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 801ed02:	68fa      	ldr	r2, [r7, #12]
 801ed04:	6a39      	ldr	r1, [r7, #32]
 801ed06:	6978      	ldr	r0, [r7, #20]
 801ed08:	f7fe fa56 	bl	801d1b8 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 801ed0c:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 801ed0e:	68fa      	ldr	r2, [r7, #12]
 801ed10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801ed12:	6938      	ldr	r0, [r7, #16]
 801ed14:	f7fe fa50 	bl	801d1b8 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 801ed18:	60f8      	str	r0, [r7, #12]
    return result;
 801ed1a:	68fb      	ldr	r3, [r7, #12]
  }
 801ed1c:	4618      	mov	r0, r3
 801ed1e:	3728      	adds	r7, #40	; 0x28
 801ed20:	46bd      	mov	sp, r7
 801ed22:	bd80      	pop	{r7, pc}
 801ed24:	fc000001 	.word	0xfc000001

0801ed28 <_ZN6tflite7gen_lutEPFffEffPsi>:
                    const int num) {
 801ed28:	b580      	push	{r7, lr}
 801ed2a:	ed2d 8b02 	vpush	{d8}
 801ed2e:	b094      	sub	sp, #80	; 0x50
 801ed30:	af00      	add	r7, sp, #0
 801ed32:	6178      	str	r0, [r7, #20]
 801ed34:	ed87 0a04 	vstr	s0, [r7, #16]
 801ed38:	edc7 0a03 	vstr	s1, [r7, #12]
 801ed3c:	60b9      	str	r1, [r7, #8]
 801ed3e:	607a      	str	r2, [r7, #4]
  float step = (max - min) / (num - 1);
 801ed40:	ed97 7a03 	vldr	s14, [r7, #12]
 801ed44:	edd7 7a04 	vldr	s15, [r7, #16]
 801ed48:	ee77 6a67 	vsub.f32	s13, s14, s15
 801ed4c:	687b      	ldr	r3, [r7, #4]
 801ed4e:	3b01      	subs	r3, #1
 801ed50:	ee07 3a90 	vmov	s15, r3
 801ed54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801ed58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801ed5c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
  float half_step = step / 2.0f;
 801ed60:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 801ed64:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801ed68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801ed6c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
  for (int i = 0; i < num - 1; i++) {
 801ed70:	2300      	movs	r3, #0
 801ed72:	64fb      	str	r3, [r7, #76]	; 0x4c
 801ed74:	687b      	ldr	r3, [r7, #4]
 801ed76:	3b01      	subs	r3, #1
 801ed78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801ed7a:	429a      	cmp	r2, r3
 801ed7c:	f280 80c0 	bge.w	801ef00 <_ZN6tflite7gen_lutEPFffEffPsi+0x1d8>
    float sample_val = TfLiteRound(func(min + i * step) * 32768.0f);
 801ed80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ed82:	ee07 3a90 	vmov	s15, r3
 801ed86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801ed8a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 801ed8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 801ed92:	edd7 7a04 	vldr	s15, [r7, #16]
 801ed96:	ee77 7a27 	vadd.f32	s15, s14, s15
 801ed9a:	697b      	ldr	r3, [r7, #20]
 801ed9c:	eeb0 0a67 	vmov.f32	s0, s15
 801eda0:	4798      	blx	r3
 801eda2:	eef0 7a40 	vmov.f32	s15, s0
 801eda6:	ed9f 7a74 	vldr	s14, [pc, #464]	; 801ef78 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 801edaa:	ee67 7a87 	vmul.f32	s15, s15, s14
 801edae:	eeb0 0a67 	vmov.f32	s0, s15
 801edb2:	f7fc f999 	bl	801b0e8 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 801edb6:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
 801edba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801edbc:	3301      	adds	r3, #1
 801edbe:	ee07 3a90 	vmov	s15, r3
 801edc2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801edc6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 801edca:	ee27 7a27 	vmul.f32	s14, s14, s15
 801edce:	edd7 7a04 	vldr	s15, [r7, #16]
 801edd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 801edd6:	697b      	ldr	r3, [r7, #20]
 801edd8:	eeb0 0a67 	vmov.f32	s0, s15
 801eddc:	4798      	blx	r3
 801edde:	eef0 7a40 	vmov.f32	s15, s0
 801ede2:	ed9f 7a65 	vldr	s14, [pc, #404]	; 801ef78 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 801ede6:	ee27 8a87 	vmul.f32	s16, s15, s14
                     TfLiteRound(func(min + i * step) * 32768.0f)) /
 801edea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801edec:	ee07 3a90 	vmov	s15, r3
 801edf0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801edf4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 801edf8:	ee27 7a27 	vmul.f32	s14, s14, s15
 801edfc:	edd7 7a04 	vldr	s15, [r7, #16]
 801ee00:	ee77 7a27 	vadd.f32	s15, s14, s15
 801ee04:	697b      	ldr	r3, [r7, #20]
 801ee06:	eeb0 0a67 	vmov.f32	s0, s15
 801ee0a:	4798      	blx	r3
 801ee0c:	eef0 7a40 	vmov.f32	s15, s0
 801ee10:	ed9f 7a59 	vldr	s14, [pc, #356]	; 801ef78 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 801ee14:	ee67 7a87 	vmul.f32	s15, s15, s14
 801ee18:	eeb0 0a67 	vmov.f32	s0, s15
 801ee1c:	f7fc f964 	bl	801b0e8 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 801ee20:	eef0 7a40 	vmov.f32	s15, s0
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
 801ee24:	ee78 7a27 	vadd.f32	s15, s16, s15
 801ee28:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801ee2c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801ee30:	eeb0 0a47 	vmov.f32	s0, s14
 801ee34:	f7fc f958 	bl	801b0e8 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 801ee38:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
        TfLiteRound(func(min + i * step + half_step) * 32768.0f);
 801ee3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ee3e:	ee07 3a90 	vmov	s15, r3
 801ee42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801ee46:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 801ee4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801ee4e:	edd7 7a04 	vldr	s15, [r7, #16]
 801ee52:	ee37 7a27 	vadd.f32	s14, s14, s15
 801ee56:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 801ee5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801ee5e:	697b      	ldr	r3, [r7, #20]
 801ee60:	eeb0 0a67 	vmov.f32	s0, s15
 801ee64:	4798      	blx	r3
 801ee66:	eef0 7a40 	vmov.f32	s15, s0
 801ee6a:	ed9f 7a43 	vldr	s14, [pc, #268]	; 801ef78 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 801ee6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 801ee72:	eeb0 0a67 	vmov.f32	s0, s15
 801ee76:	f7fc f937 	bl	801b0e8 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 801ee7a:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
    float midpoint_err = midpoint_interp_val - midpoint_val;
 801ee7e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 801ee82:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801ee86:	ee77 7a67 	vsub.f32	s15, s14, s15
 801ee8a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    float bias = TfLiteRound(midpoint_err / 2.0f);
 801ee8e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801ee92:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801ee96:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801ee9a:	eeb0 0a47 	vmov.f32	s0, s14
 801ee9e:	f7fc f923 	bl	801b0e8 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 801eea2:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
 801eea6:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 801eeaa:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801eeae:	ee77 7a67 	vsub.f32	s15, s14, s15
 801eeb2:	edc7 7a06 	vstr	s15, [r7, #24]
 801eeb6:	f04f 4347 	mov.w	r3, #3338665984	; 0xc7000000
 801eeba:	61fb      	str	r3, [r7, #28]
                               32767.0f);
 801eebc:	f107 021c 	add.w	r2, r7, #28
 801eec0:	f107 0318 	add.w	r3, r7, #24
 801eec4:	4611      	mov	r1, r2
 801eec6:	4618      	mov	r0, r3
 801eec8:	f7e7 fc7f 	bl	80067ca <_ZSt3maxIfERKT_S2_S2_>
 801eecc:	4602      	mov	r2, r0
 801eece:	4b2b      	ldr	r3, [pc, #172]	; (801ef7c <_ZN6tflite7gen_lutEPFffEffPsi+0x254>)
 801eed0:	623b      	str	r3, [r7, #32]
 801eed2:	f107 0320 	add.w	r3, r7, #32
 801eed6:	4619      	mov	r1, r3
 801eed8:	4610      	mov	r0, r2
 801eeda:	f7fc f8d8 	bl	801b08e <_ZSt3minIfERKT_S2_S2_>
 801eede:	4603      	mov	r3, r0
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
 801eee0:	edd3 7a00 	vldr	s15, [r3]
 801eee4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801eee6:	005b      	lsls	r3, r3, #1
 801eee8:	68ba      	ldr	r2, [r7, #8]
 801eeea:	4413      	add	r3, r2
 801eeec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801eef0:	ee17 2a90 	vmov	r2, s15
 801eef4:	b212      	sxth	r2, r2
 801eef6:	801a      	strh	r2, [r3, #0]
  for (int i = 0; i < num - 1; i++) {
 801eef8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801eefa:	3301      	adds	r3, #1
 801eefc:	64fb      	str	r3, [r7, #76]	; 0x4c
 801eefe:	e739      	b.n	801ed74 <_ZN6tflite7gen_lutEPFffEffPsi+0x4c>
      std::max<float>(TfLiteRound(func(max) * 32768.0f), -32768.0f), 32767.0f);
 801ef00:	697b      	ldr	r3, [r7, #20]
 801ef02:	ed97 0a03 	vldr	s0, [r7, #12]
 801ef06:	4798      	blx	r3
 801ef08:	eef0 7a40 	vmov.f32	s15, s0
 801ef0c:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 801ef78 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 801ef10:	ee67 7a87 	vmul.f32	s15, s15, s14
 801ef14:	eeb0 0a67 	vmov.f32	s0, s15
 801ef18:	f7fc f8e6 	bl	801b0e8 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 801ef1c:	eef0 7a40 	vmov.f32	s15, s0
 801ef20:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 801ef24:	f04f 4347 	mov.w	r3, #3338665984	; 0xc7000000
 801ef28:	62bb      	str	r3, [r7, #40]	; 0x28
 801ef2a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801ef2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801ef32:	4611      	mov	r1, r2
 801ef34:	4618      	mov	r0, r3
 801ef36:	f7e7 fc48 	bl	80067ca <_ZSt3maxIfERKT_S2_S2_>
 801ef3a:	4602      	mov	r2, r0
 801ef3c:	4b0f      	ldr	r3, [pc, #60]	; (801ef7c <_ZN6tflite7gen_lutEPFffEffPsi+0x254>)
 801ef3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801ef40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801ef44:	4619      	mov	r1, r3
 801ef46:	4610      	mov	r0, r2
 801ef48:	f7fc f8a1 	bl	801b08e <_ZSt3minIfERKT_S2_S2_>
 801ef4c:	4603      	mov	r3, r0
  table[num - 1] = std::min<float>(
 801ef4e:	edd3 7a00 	vldr	s15, [r3]
 801ef52:	687b      	ldr	r3, [r7, #4]
 801ef54:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801ef58:	3b01      	subs	r3, #1
 801ef5a:	005b      	lsls	r3, r3, #1
 801ef5c:	68ba      	ldr	r2, [r7, #8]
 801ef5e:	4413      	add	r3, r2
 801ef60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801ef64:	ee17 2a90 	vmov	r2, s15
 801ef68:	b212      	sxth	r2, r2
 801ef6a:	801a      	strh	r2, [r3, #0]
}
 801ef6c:	bf00      	nop
 801ef6e:	3750      	adds	r7, #80	; 0x50
 801ef70:	46bd      	mov	sp, r7
 801ef72:	ecbd 8b02 	vpop	{d8}
 801ef76:	bd80      	pop	{r7, pc}
 801ef78:	47000000 	.word	0x47000000
 801ef7c:	46fffe00 	.word	0x46fffe00

0801ef80 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>:

TfLiteStatus CalculateSoftmaxParams(TfLiteContext* context,
                                    const TfLiteTensor* input,
                                    TfLiteTensor* output,
                                    const TfLiteSoftmaxParams* params,
                                    SoftmaxParams* op_data) {
 801ef80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801ef84:	b090      	sub	sp, #64	; 0x40
 801ef86:	af06      	add	r7, sp, #24
 801ef88:	60f8      	str	r0, [r7, #12]
 801ef8a:	60b9      	str	r1, [r7, #8]
 801ef8c:	607a      	str	r2, [r7, #4]
 801ef8e:	603b      	str	r3, [r7, #0]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
 801ef90:	68bb      	ldr	r3, [r7, #8]
 801ef92:	781b      	ldrb	r3, [r3, #0]
 801ef94:	2b09      	cmp	r3, #9
 801ef96:	d004      	beq.n	801efa2 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x22>
 801ef98:	68bb      	ldr	r3, [r7, #8]
 801ef9a:	781b      	ldrb	r3, [r3, #0]
 801ef9c:	2b07      	cmp	r3, #7
 801ef9e:	f040 81b6 	bne.w	801f30e <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x38e>
    if (input->type == kTfLiteInt16) {
 801efa2:	68bb      	ldr	r3, [r7, #8]
 801efa4:	781b      	ldrb	r3, [r3, #0]
 801efa6:	2b07      	cmp	r3, #7
 801efa8:	d156      	bne.n	801f058 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xd8>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 801efaa:	687b      	ldr	r3, [r7, #4]
 801efac:	691b      	ldr	r3, [r3, #16]
 801efae:	2b00      	cmp	r3, #0
 801efb0:	d011      	beq.n	801efd6 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x56>
 801efb2:	68fb      	ldr	r3, [r7, #12]
 801efb4:	695c      	ldr	r4, [r3, #20]
 801efb6:	687b      	ldr	r3, [r7, #4]
 801efb8:	691b      	ldr	r3, [r3, #16]
 801efba:	2200      	movs	r2, #0
 801efbc:	9203      	str	r2, [sp, #12]
 801efbe:	9302      	str	r3, [sp, #8]
 801efc0:	4ba1      	ldr	r3, [pc, #644]	; (801f248 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c8>)
 801efc2:	9301      	str	r3, [sp, #4]
 801efc4:	4ba1      	ldr	r3, [pc, #644]	; (801f24c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 801efc6:	9300      	str	r3, [sp, #0]
 801efc8:	2325      	movs	r3, #37	; 0x25
 801efca:	4aa1      	ldr	r2, [pc, #644]	; (801f250 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 801efcc:	49a1      	ldr	r1, [pc, #644]	; (801f254 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 801efce:	68f8      	ldr	r0, [r7, #12]
 801efd0:	47a0      	blx	r4
 801efd2:	2301      	movs	r3, #1
 801efd4:	e1e0      	b.n	801f398 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
      TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 32768,
 801efd6:	687b      	ldr	r3, [r7, #4]
 801efd8:	edd3 7a03 	vldr	s15, [r3, #12]
 801efdc:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 801f258 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>
 801efe0:	eef4 7ac7 	vcmpe.f32	s15, s14
 801efe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801efe8:	dd07      	ble.n	801effa <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x7a>
 801efea:	687b      	ldr	r3, [r7, #4]
 801efec:	edd3 7a03 	vldr	s15, [r3, #12]
 801eff0:	ed9f 7a99 	vldr	s14, [pc, #612]	; 801f258 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>
 801eff4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801eff8:	e006      	b.n	801f008 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x88>
 801effa:	687b      	ldr	r3, [r7, #4]
 801effc:	edd3 7a03 	vldr	s15, [r3, #12]
 801f000:	ed9f 7a95 	vldr	s14, [pc, #596]	; 801f258 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>
 801f004:	ee77 7a67 	vsub.f32	s15, s14, s15
 801f008:	edc7 7a08 	vstr	s15, [r7, #32]
 801f00c:	edd7 7a08 	vldr	s15, [r7, #32]
 801f010:	ed9f 7a92 	vldr	s14, [pc, #584]	; 801f25c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2dc>
 801f014:	eef4 7ac7 	vcmpe.f32	s15, s14
 801f018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f01c:	f340 80dd 	ble.w	801f1da <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x25a>
 801f020:	68fb      	ldr	r3, [r7, #12]
 801f022:	695c      	ldr	r4, [r3, #20]
 801f024:	687b      	ldr	r3, [r7, #4]
 801f026:	68db      	ldr	r3, [r3, #12]
 801f028:	4618      	mov	r0, r3
 801f02a:	f7e1 fa97 	bl	800055c <__aeabi_f2d>
 801f02e:	4602      	mov	r2, r0
 801f030:	460b      	mov	r3, r1
 801f032:	f04f 0000 	mov.w	r0, #0
 801f036:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 801f03a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801f03e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801f042:	4b87      	ldr	r3, [pc, #540]	; (801f260 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e0>)
 801f044:	9301      	str	r3, [sp, #4]
 801f046:	4b87      	ldr	r3, [pc, #540]	; (801f264 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>)
 801f048:	9300      	str	r3, [sp, #0]
 801f04a:	2326      	movs	r3, #38	; 0x26
 801f04c:	4a80      	ldr	r2, [pc, #512]	; (801f250 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 801f04e:	4986      	ldr	r1, [pc, #536]	; (801f268 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 801f050:	68f8      	ldr	r0, [r7, #12]
 801f052:	47a0      	blx	r4
 801f054:	2301      	movs	r3, #1
 801f056:	e19f      	b.n	801f398 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
                          (0.001f * 1.f / 32768));
    } else {  // input->type == kTfLiteInt8
      TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteInt8);
 801f058:	68bb      	ldr	r3, [r7, #8]
 801f05a:	781b      	ldrb	r3, [r3, #0]
 801f05c:	2b09      	cmp	r3, #9
 801f05e:	d018      	beq.n	801f092 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x112>
 801f060:	68fb      	ldr	r3, [r7, #12]
 801f062:	695c      	ldr	r4, [r3, #20]
 801f064:	68bb      	ldr	r3, [r7, #8]
 801f066:	781b      	ldrb	r3, [r3, #0]
 801f068:	4618      	mov	r0, r3
 801f06a:	f7fb fe0f 	bl	801ac8c <TfLiteTypeGetName>
 801f06e:	4605      	mov	r5, r0
 801f070:	2009      	movs	r0, #9
 801f072:	f7fb fe0b 	bl	801ac8c <TfLiteTypeGetName>
 801f076:	4603      	mov	r3, r0
 801f078:	9303      	str	r3, [sp, #12]
 801f07a:	9502      	str	r5, [sp, #8]
 801f07c:	4b7b      	ldr	r3, [pc, #492]	; (801f26c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
 801f07e:	9301      	str	r3, [sp, #4]
 801f080:	4b7b      	ldr	r3, [pc, #492]	; (801f270 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f0>)
 801f082:	9300      	str	r3, [sp, #0]
 801f084:	2329      	movs	r3, #41	; 0x29
 801f086:	4a72      	ldr	r2, [pc, #456]	; (801f250 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 801f088:	497a      	ldr	r1, [pc, #488]	; (801f274 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f4>)
 801f08a:	68f8      	ldr	r0, [r7, #12]
 801f08c:	47a0      	blx	r4
 801f08e:	2301      	movs	r3, #1
 801f090:	e182      	b.n	801f398 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
      if (output->type == kTfLiteInt16) {
 801f092:	687b      	ldr	r3, [r7, #4]
 801f094:	781b      	ldrb	r3, [r3, #0]
 801f096:	2b07      	cmp	r3, #7
 801f098:	d155      	bne.n	801f146 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1c6>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -32768);
 801f09a:	687b      	ldr	r3, [r7, #4]
 801f09c:	691b      	ldr	r3, [r3, #16]
 801f09e:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801f0a2:	d011      	beq.n	801f0c8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x148>
 801f0a4:	68fb      	ldr	r3, [r7, #12]
 801f0a6:	695c      	ldr	r4, [r3, #20]
 801f0a8:	687b      	ldr	r3, [r7, #4]
 801f0aa:	691b      	ldr	r3, [r3, #16]
 801f0ac:	4a72      	ldr	r2, [pc, #456]	; (801f278 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f8>)
 801f0ae:	9203      	str	r2, [sp, #12]
 801f0b0:	9302      	str	r3, [sp, #8]
 801f0b2:	4b72      	ldr	r3, [pc, #456]	; (801f27c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2fc>)
 801f0b4:	9301      	str	r3, [sp, #4]
 801f0b6:	4b65      	ldr	r3, [pc, #404]	; (801f24c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 801f0b8:	9300      	str	r3, [sp, #0]
 801f0ba:	232b      	movs	r3, #43	; 0x2b
 801f0bc:	4a64      	ldr	r2, [pc, #400]	; (801f250 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 801f0be:	4965      	ldr	r1, [pc, #404]	; (801f254 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 801f0c0:	68f8      	ldr	r0, [r7, #12]
 801f0c2:	47a0      	blx	r4
 801f0c4:	2301      	movs	r3, #1
 801f0c6:	e167      	b.n	801f398 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
        TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 65536,
 801f0c8:	687b      	ldr	r3, [r7, #4]
 801f0ca:	edd3 7a03 	vldr	s15, [r3, #12]
 801f0ce:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 801f280 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 801f0d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 801f0d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f0da:	dd07      	ble.n	801f0ec <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x16c>
 801f0dc:	687b      	ldr	r3, [r7, #4]
 801f0de:	edd3 7a03 	vldr	s15, [r3, #12]
 801f0e2:	ed9f 7a67 	vldr	s14, [pc, #412]	; 801f280 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 801f0e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f0ea:	e006      	b.n	801f0fa <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x17a>
 801f0ec:	687b      	ldr	r3, [r7, #4]
 801f0ee:	edd3 7a03 	vldr	s15, [r3, #12]
 801f0f2:	ed9f 7a63 	vldr	s14, [pc, #396]	; 801f280 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 801f0f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 801f0fa:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 801f0fe:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801f102:	ed9f 7a60 	vldr	s14, [pc, #384]	; 801f284 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x304>
 801f106:	eef4 7ac7 	vcmpe.f32	s15, s14
 801f10a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f10e:	dd64      	ble.n	801f1da <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x25a>
 801f110:	68fb      	ldr	r3, [r7, #12]
 801f112:	695c      	ldr	r4, [r3, #20]
 801f114:	687b      	ldr	r3, [r7, #4]
 801f116:	68db      	ldr	r3, [r3, #12]
 801f118:	4618      	mov	r0, r3
 801f11a:	f7e1 fa1f 	bl	800055c <__aeabi_f2d>
 801f11e:	4602      	mov	r2, r0
 801f120:	460b      	mov	r3, r1
 801f122:	f04f 0000 	mov.w	r0, #0
 801f126:	4958      	ldr	r1, [pc, #352]	; (801f288 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x308>)
 801f128:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801f12c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801f130:	4b56      	ldr	r3, [pc, #344]	; (801f28c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x30c>)
 801f132:	9301      	str	r3, [sp, #4]
 801f134:	4b4b      	ldr	r3, [pc, #300]	; (801f264 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>)
 801f136:	9300      	str	r3, [sp, #0]
 801f138:	232c      	movs	r3, #44	; 0x2c
 801f13a:	4a45      	ldr	r2, [pc, #276]	; (801f250 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 801f13c:	494a      	ldr	r1, [pc, #296]	; (801f268 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 801f13e:	68f8      	ldr	r0, [r7, #12]
 801f140:	47a0      	blx	r4
 801f142:	2301      	movs	r3, #1
 801f144:	e128      	b.n	801f398 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
                            (0.001f * 1.f / 65536));
      } else {  // output->type == kTfLiteint8
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
 801f146:	687b      	ldr	r3, [r7, #4]
 801f148:	781b      	ldrb	r3, [r3, #0]
 801f14a:	2b09      	cmp	r3, #9
 801f14c:	d018      	beq.n	801f180 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x200>
 801f14e:	68fb      	ldr	r3, [r7, #12]
 801f150:	695c      	ldr	r4, [r3, #20]
 801f152:	687b      	ldr	r3, [r7, #4]
 801f154:	781b      	ldrb	r3, [r3, #0]
 801f156:	4618      	mov	r0, r3
 801f158:	f7fb fd98 	bl	801ac8c <TfLiteTypeGetName>
 801f15c:	4605      	mov	r5, r0
 801f15e:	2009      	movs	r0, #9
 801f160:	f7fb fd94 	bl	801ac8c <TfLiteTypeGetName>
 801f164:	4603      	mov	r3, r0
 801f166:	9303      	str	r3, [sp, #12]
 801f168:	9502      	str	r5, [sp, #8]
 801f16a:	4b40      	ldr	r3, [pc, #256]	; (801f26c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
 801f16c:	9301      	str	r3, [sp, #4]
 801f16e:	4b48      	ldr	r3, [pc, #288]	; (801f290 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x310>)
 801f170:	9300      	str	r3, [sp, #0]
 801f172:	232f      	movs	r3, #47	; 0x2f
 801f174:	4a36      	ldr	r2, [pc, #216]	; (801f250 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 801f176:	493f      	ldr	r1, [pc, #252]	; (801f274 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f4>)
 801f178:	68f8      	ldr	r0, [r7, #12]
 801f17a:	47a0      	blx	r4
 801f17c:	2301      	movs	r3, #1
 801f17e:	e10b      	b.n	801f398 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
 801f180:	687b      	ldr	r3, [r7, #4]
 801f182:	691b      	ldr	r3, [r3, #16]
 801f184:	f113 0f80 	cmn.w	r3, #128	; 0x80
 801f188:	d012      	beq.n	801f1b0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x230>
 801f18a:	68fb      	ldr	r3, [r7, #12]
 801f18c:	695c      	ldr	r4, [r3, #20]
 801f18e:	687b      	ldr	r3, [r7, #4]
 801f190:	691b      	ldr	r3, [r3, #16]
 801f192:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 801f196:	9203      	str	r2, [sp, #12]
 801f198:	9302      	str	r3, [sp, #8]
 801f19a:	4b3e      	ldr	r3, [pc, #248]	; (801f294 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x314>)
 801f19c:	9301      	str	r3, [sp, #4]
 801f19e:	4b2b      	ldr	r3, [pc, #172]	; (801f24c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 801f1a0:	9300      	str	r3, [sp, #0]
 801f1a2:	2330      	movs	r3, #48	; 0x30
 801f1a4:	4a2a      	ldr	r2, [pc, #168]	; (801f250 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 801f1a6:	492b      	ldr	r1, [pc, #172]	; (801f254 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 801f1a8:	68f8      	ldr	r0, [r7, #12]
 801f1aa:	47a0      	blx	r4
 801f1ac:	2301      	movs	r3, #1
 801f1ae:	e0f3      	b.n	801f398 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
        TF_LITE_ENSURE(context, output->params.scale == 1.f / 256);
 801f1b0:	687b      	ldr	r3, [r7, #4]
 801f1b2:	edd3 7a03 	vldr	s15, [r3, #12]
 801f1b6:	ed9f 7a38 	vldr	s14, [pc, #224]	; 801f298 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x318>
 801f1ba:	eef4 7a47 	vcmp.f32	s15, s14
 801f1be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f1c2:	d00a      	beq.n	801f1da <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x25a>
 801f1c4:	68fb      	ldr	r3, [r7, #12]
 801f1c6:	695c      	ldr	r4, [r3, #20]
 801f1c8:	4b34      	ldr	r3, [pc, #208]	; (801f29c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x31c>)
 801f1ca:	9300      	str	r3, [sp, #0]
 801f1cc:	2331      	movs	r3, #49	; 0x31
 801f1ce:	4a20      	ldr	r2, [pc, #128]	; (801f250 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 801f1d0:	4933      	ldr	r1, [pc, #204]	; (801f2a0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x320>)
 801f1d2:	68f8      	ldr	r0, [r7, #12]
 801f1d4:	47a0      	blx	r4
 801f1d6:	2301      	movs	r3, #1
 801f1d8:	e0de      	b.n	801f398 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
    }

    static const int kScaledDiffIntegerBits = 5;

    // Calculate input_multiplier and input_left_shift
    if (input->type == kTfLiteInt16) {
 801f1da:	68bb      	ldr	r3, [r7, #8]
 801f1dc:	781b      	ldrb	r3, [r3, #0]
 801f1de:	2b07      	cmp	r3, #7
 801f1e0:	d160      	bne.n	801f2a4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x324>
      int input_left_shift;
      double input_scale_beta_rescale =
          static_cast<double>(input->params.scale) *
 801f1e2:	68bb      	ldr	r3, [r7, #8]
 801f1e4:	68db      	ldr	r3, [r3, #12]
 801f1e6:	4618      	mov	r0, r3
 801f1e8:	f7e1 f9b8 	bl	800055c <__aeabi_f2d>
 801f1ec:	4604      	mov	r4, r0
 801f1ee:	460d      	mov	r5, r1
          static_cast<double>(params->beta) /
 801f1f0:	683b      	ldr	r3, [r7, #0]
 801f1f2:	681b      	ldr	r3, [r3, #0]
 801f1f4:	4618      	mov	r0, r3
 801f1f6:	f7e1 f9b1 	bl	800055c <__aeabi_f2d>
 801f1fa:	4602      	mov	r2, r0
 801f1fc:	460b      	mov	r3, r1
          static_cast<double>(input->params.scale) *
 801f1fe:	4620      	mov	r0, r4
 801f200:	4629      	mov	r1, r5
 801f202:	f7e1 fa03 	bl	800060c <__aeabi_dmul>
 801f206:	4602      	mov	r2, r0
 801f208:	460b      	mov	r3, r1
 801f20a:	4610      	mov	r0, r2
 801f20c:	4619      	mov	r1, r3
      double input_scale_beta_rescale =
 801f20e:	a30c      	add	r3, pc, #48	; (adr r3, 801f240 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c0>)
 801f210:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f214:	f7e1 fb24 	bl	8000860 <__aeabi_ddiv>
 801f218:	4602      	mov	r2, r0
 801f21a:	460b      	mov	r3, r1
 801f21c:	e9c7 2306 	strd	r2, r3, [r7, #24]
          (10.0 / 65535.0);  // scale the input_diff such that [-65535, 0]
                             // correspond to [-10.0, 0.0]
      QuantizeMultiplier(input_scale_beta_rescale, &op_data->input_multiplier,
 801f220:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801f222:	3308      	adds	r3, #8
 801f224:	f107 0214 	add.w	r2, r7, #20
 801f228:	4611      	mov	r1, r2
 801f22a:	4618      	mov	r0, r3
 801f22c:	ed97 0b06 	vldr	d0, [r7, #24]
 801f230:	f7fb fdb2 	bl	801ad98 <_ZN6tflite18QuantizeMultiplierEdPlPi>
                         &input_left_shift);
      op_data->input_left_shift = input_left_shift;
 801f234:	697a      	ldr	r2, [r7, #20]
 801f236:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801f238:	60da      	str	r2, [r3, #12]
          &op_data->input_multiplier, &input_left_shift);
      op_data->input_left_shift = input_left_shift;
      op_data->diff_min =
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
                                              op_data->input_left_shift);
    }
 801f23a:	e0ac      	b.n	801f396 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x416>
 801f23c:	f3af 8000 	nop.w
 801f240:	00140014 	.word	0x00140014
 801f244:	3f240014 	.word	0x3f240014
 801f248:	08029074 	.word	0x08029074
 801f24c:	08029078 	.word	0x08029078
 801f250:	08028fcc 	.word	0x08028fcc
 801f254:	08029058 	.word	0x08029058
 801f258:	38000000 	.word	0x38000000
 801f25c:	3303126f 	.word	0x3303126f
 801f260:	080290b4 	.word	0x080290b4
 801f264:	080290c0 	.word	0x080290c0
 801f268:	08029094 	.word	0x08029094
 801f26c:	080290f4 	.word	0x080290f4
 801f270:	08029100 	.word	0x08029100
 801f274:	080290d8 	.word	0x080290d8
 801f278:	ffff8000 	.word	0xffff8000
 801f27c:	0802910c 	.word	0x0802910c
 801f280:	37800000 	.word	0x37800000
 801f284:	3283126f 	.word	0x3283126f
 801f288:	3ef00000 	.word	0x3ef00000
 801f28c:	08029114 	.word	0x08029114
 801f290:	08029120 	.word	0x08029120
 801f294:	08029130 	.word	0x08029130
 801f298:	3b800000 	.word	0x3b800000
 801f29c:	08029150 	.word	0x08029150
 801f2a0:	08029138 	.word	0x08029138
          static_cast<double>(params->beta),
 801f2a4:	683b      	ldr	r3, [r7, #0]
 801f2a6:	681b      	ldr	r3, [r3, #0]
      tflite::PreprocessSoftmaxScaling(
 801f2a8:	4618      	mov	r0, r3
 801f2aa:	f7e1 f957 	bl	800055c <__aeabi_f2d>
 801f2ae:	4680      	mov	r8, r0
 801f2b0:	4689      	mov	r9, r1
          static_cast<double>(input->params.scale), kScaledDiffIntegerBits,
 801f2b2:	68bb      	ldr	r3, [r7, #8]
 801f2b4:	68db      	ldr	r3, [r3, #12]
      tflite::PreprocessSoftmaxScaling(
 801f2b6:	4618      	mov	r0, r3
 801f2b8:	f7e1 f950 	bl	800055c <__aeabi_f2d>
 801f2bc:	4682      	mov	sl, r0
 801f2be:	468b      	mov	fp, r1
 801f2c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801f2c2:	3308      	adds	r3, #8
 801f2c4:	f107 0210 	add.w	r2, r7, #16
 801f2c8:	4619      	mov	r1, r3
 801f2ca:	2005      	movs	r0, #5
 801f2cc:	ec4b ab11 	vmov	d1, sl, fp
 801f2d0:	ec49 8b10 	vmov	d0, r8, r9
 801f2d4:	f7fb fe2c 	bl	801af30 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>
      op_data->input_left_shift = input_left_shift;
 801f2d8:	693a      	ldr	r2, [r7, #16]
 801f2da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801f2dc:	60da      	str	r2, [r3, #12]
                                              op_data->input_left_shift);
 801f2de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801f2e0:	68db      	ldr	r3, [r3, #12]
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
 801f2e2:	221f      	movs	r2, #31
 801f2e4:	4619      	mov	r1, r3
 801f2e6:	2005      	movs	r0, #5
 801f2e8:	f7fb fe6a 	bl	801afc0 <_ZN6tflite20CalculateInputRadiusEiii>
 801f2ec:	4603      	mov	r3, r0
 801f2ee:	4618      	mov	r0, r3
 801f2f0:	f7e1 f922 	bl	8000538 <__aeabi_i2d>
 801f2f4:	4602      	mov	r2, r0
 801f2f6:	460b      	mov	r3, r1
 801f2f8:	4614      	mov	r4, r2
 801f2fa:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
      op_data->diff_min =
 801f2fe:	4620      	mov	r0, r4
 801f300:	4629      	mov	r1, r5
 801f302:	f7e1 fc33 	bl	8000b6c <__aeabi_d2iz>
 801f306:	4602      	mov	r2, r0
 801f308:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801f30a:	619a      	str	r2, [r3, #24]
    }
 801f30c:	e043      	b.n	801f396 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x416>
  } else {
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
 801f30e:	68bb      	ldr	r3, [r7, #8]
 801f310:	781b      	ldrb	r3, [r3, #0]
 801f312:	2b01      	cmp	r3, #1
 801f314:	d018      	beq.n	801f348 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x3c8>
 801f316:	68fb      	ldr	r3, [r7, #12]
 801f318:	695c      	ldr	r4, [r3, #20]
 801f31a:	68bb      	ldr	r3, [r7, #8]
 801f31c:	781b      	ldrb	r3, [r3, #0]
 801f31e:	4618      	mov	r0, r3
 801f320:	f7fb fcb4 	bl	801ac8c <TfLiteTypeGetName>
 801f324:	4605      	mov	r5, r0
 801f326:	2001      	movs	r0, #1
 801f328:	f7fb fcb0 	bl	801ac8c <TfLiteTypeGetName>
 801f32c:	4603      	mov	r3, r0
 801f32e:	9303      	str	r3, [sp, #12]
 801f330:	9502      	str	r5, [sp, #8]
 801f332:	4b1c      	ldr	r3, [pc, #112]	; (801f3a4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x424>)
 801f334:	9301      	str	r3, [sp, #4]
 801f336:	4b1c      	ldr	r3, [pc, #112]	; (801f3a8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x428>)
 801f338:	9300      	str	r3, [sp, #0]
 801f33a:	234e      	movs	r3, #78	; 0x4e
 801f33c:	4a1b      	ldr	r2, [pc, #108]	; (801f3ac <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x42c>)
 801f33e:	491c      	ldr	r1, [pc, #112]	; (801f3b0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x430>)
 801f340:	68f8      	ldr	r0, [r7, #12]
 801f342:	47a0      	blx	r4
 801f344:	2301      	movs	r3, #1
 801f346:	e027      	b.n	801f398 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
 801f348:	687b      	ldr	r3, [r7, #4]
 801f34a:	781b      	ldrb	r3, [r3, #0]
 801f34c:	2b01      	cmp	r3, #1
 801f34e:	d018      	beq.n	801f382 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x402>
 801f350:	68fb      	ldr	r3, [r7, #12]
 801f352:	695c      	ldr	r4, [r3, #20]
 801f354:	687b      	ldr	r3, [r7, #4]
 801f356:	781b      	ldrb	r3, [r3, #0]
 801f358:	4618      	mov	r0, r3
 801f35a:	f7fb fc97 	bl	801ac8c <TfLiteTypeGetName>
 801f35e:	4605      	mov	r5, r0
 801f360:	2001      	movs	r0, #1
 801f362:	f7fb fc93 	bl	801ac8c <TfLiteTypeGetName>
 801f366:	4603      	mov	r3, r0
 801f368:	9303      	str	r3, [sp, #12]
 801f36a:	9502      	str	r5, [sp, #8]
 801f36c:	4b0d      	ldr	r3, [pc, #52]	; (801f3a4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x424>)
 801f36e:	9301      	str	r3, [sp, #4]
 801f370:	4b10      	ldr	r3, [pc, #64]	; (801f3b4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x434>)
 801f372:	9300      	str	r3, [sp, #0]
 801f374:	234f      	movs	r3, #79	; 0x4f
 801f376:	4a0d      	ldr	r2, [pc, #52]	; (801f3ac <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x42c>)
 801f378:	490d      	ldr	r1, [pc, #52]	; (801f3b0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x430>)
 801f37a:	68f8      	ldr	r0, [r7, #12]
 801f37c:	47a0      	blx	r4
 801f37e:	2301      	movs	r3, #1
 801f380:	e00a      	b.n	801f398 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
    op_data->beta = static_cast<double>(params->beta);
 801f382:	683b      	ldr	r3, [r7, #0]
 801f384:	681b      	ldr	r3, [r3, #0]
 801f386:	4618      	mov	r0, r3
 801f388:	f7e1 f8e8 	bl	800055c <__aeabi_f2d>
 801f38c:	4602      	mov	r2, r0
 801f38e:	460b      	mov	r3, r1
 801f390:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801f392:	e9c1 2300 	strd	r2, r3, [r1]
  }
  return kTfLiteOk;
 801f396:	2300      	movs	r3, #0
}
 801f398:	4618      	mov	r0, r3
 801f39a:	3728      	adds	r7, #40	; 0x28
 801f39c:	46bd      	mov	sp, r7
 801f39e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801f3a2:	bf00      	nop
 801f3a4:	08029174 	.word	0x08029174
 801f3a8:	08029100 	.word	0x08029100
 801f3ac:	08028fcc 	.word	0x08028fcc
 801f3b0:	080290d8 	.word	0x080290d8
 801f3b4:	08029120 	.word	0x08029120

0801f3b8 <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj>:

}  // namespace

void* SoftmaxInit(TfLiteContext* context, const char* buffer, size_t length) {
 801f3b8:	b580      	push	{r7, lr}
 801f3ba:	b084      	sub	sp, #16
 801f3bc:	af00      	add	r7, sp, #0
 801f3be:	60f8      	str	r0, [r7, #12]
 801f3c0:	60b9      	str	r1, [r7, #8]
 801f3c2:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 801f3c4:	68fb      	ldr	r3, [r7, #12]
 801f3c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f3c8:	2b00      	cmp	r3, #0
 801f3ca:	d101      	bne.n	801f3d0 <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj+0x18>
 801f3cc:	f004 f836 	bl	802343c <abort>
  return context->AllocatePersistentBuffer(context, sizeof(SoftmaxParams));
 801f3d0:	68fb      	ldr	r3, [r7, #12]
 801f3d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f3d4:	2138      	movs	r1, #56	; 0x38
 801f3d6:	68f8      	ldr	r0, [r7, #12]
 801f3d8:	4798      	blx	r3
 801f3da:	4603      	mov	r3, r0
}
 801f3dc:	4618      	mov	r0, r3
 801f3de:	3710      	adds	r7, #16
 801f3e0:	46bd      	mov	sp, r7
 801f3e2:	bd80      	pop	{r7, pc}

0801f3e4 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_clEf>:
  // Populate LUT if required
  if (input->type == kTfLiteInt16) {
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
    // exp LUT only used on negative values
    // we consider exp(-10.0) is insignificant to accumulation
    gen_lut([](float value) { return std::exp(value); }, -10.0f, 0.0f,
 801f3e4:	b580      	push	{r7, lr}
 801f3e6:	b082      	sub	sp, #8
 801f3e8:	af00      	add	r7, sp, #0
 801f3ea:	6078      	str	r0, [r7, #4]
 801f3ec:	ed87 0a00 	vstr	s0, [r7]
 801f3f0:	ed97 0a00 	vldr	s0, [r7]
 801f3f4:	f7e2 faa9 	bl	800194a <_ZSt3expf>
 801f3f8:	eef0 7a40 	vmov.f32	s15, s0
 801f3fc:	eeb0 0a67 	vmov.f32	s0, s15
 801f400:	3708      	adds	r7, #8
 801f402:	46bd      	mov	sp, r7
 801f404:	bd80      	pop	{r7, pc}

0801f406 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>:
 801f406:	b580      	push	{r7, lr}
 801f408:	b082      	sub	sp, #8
 801f40a:	af00      	add	r7, sp, #0
 801f40c:	ed87 0a01 	vstr	s0, [r7, #4]
 801f410:	ed97 0a01 	vldr	s0, [r7, #4]
 801f414:	2000      	movs	r0, #0
 801f416:	f7ff ffe5 	bl	801f3e4 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_clEf>
 801f41a:	eef0 7a40 	vmov.f32	s15, s0
 801f41e:	eeb0 0a67 	vmov.f32	s0, s15
 801f422:	3708      	adds	r7, #8
 801f424:	46bd      	mov	sp, r7
 801f426:	bd80      	pop	{r7, pc}

0801f428 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv>:
 801f428:	b480      	push	{r7}
 801f42a:	b083      	sub	sp, #12
 801f42c:	af00      	add	r7, sp, #0
 801f42e:	6078      	str	r0, [r7, #4]
 801f430:	4b03      	ldr	r3, [pc, #12]	; (801f440 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv+0x18>)
 801f432:	4618      	mov	r0, r3
 801f434:	370c      	adds	r7, #12
 801f436:	46bd      	mov	sp, r7
 801f438:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f43c:	4770      	bx	lr
 801f43e:	bf00      	nop
 801f440:	0801f407 	.word	0x0801f407

0801f444 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_clEf>:
            op_data->exp_lut, kInt16LUTArraySize);
    gen_lut([](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f,
 801f444:	b480      	push	{r7}
 801f446:	b083      	sub	sp, #12
 801f448:	af00      	add	r7, sp, #0
 801f44a:	6078      	str	r0, [r7, #4]
 801f44c:	ed87 0a00 	vstr	s0, [r7]
 801f450:	edd7 7a00 	vldr	s15, [r7]
 801f454:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f458:	ee77 7a87 	vadd.f32	s15, s15, s14
 801f45c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f460:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801f464:	eef0 7a66 	vmov.f32	s15, s13
 801f468:	eeb0 0a67 	vmov.f32	s0, s15
 801f46c:	370c      	adds	r7, #12
 801f46e:	46bd      	mov	sp, r7
 801f470:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f474:	4770      	bx	lr

0801f476 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE0_4_FUNEf>:
 801f476:	b580      	push	{r7, lr}
 801f478:	b082      	sub	sp, #8
 801f47a:	af00      	add	r7, sp, #0
 801f47c:	ed87 0a01 	vstr	s0, [r7, #4]
 801f480:	ed97 0a01 	vldr	s0, [r7, #4]
 801f484:	2000      	movs	r0, #0
 801f486:	f7ff ffdd 	bl	801f444 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_clEf>
 801f48a:	eef0 7a40 	vmov.f32	s15, s0
 801f48e:	eeb0 0a67 	vmov.f32	s0, s15
 801f492:	3708      	adds	r7, #8
 801f494:	46bd      	mov	sp, r7
 801f496:	bd80      	pop	{r7, pc}

0801f498 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv>:
 801f498:	b480      	push	{r7}
 801f49a:	b083      	sub	sp, #12
 801f49c:	af00      	add	r7, sp, #0
 801f49e:	6078      	str	r0, [r7, #4]
 801f4a0:	4b03      	ldr	r3, [pc, #12]	; (801f4b0 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv+0x18>)
 801f4a2:	4618      	mov	r0, r3
 801f4a4:	370c      	adds	r7, #12
 801f4a6:	46bd      	mov	sp, r7
 801f4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f4ac:	4770      	bx	lr
 801f4ae:	bf00      	nop
 801f4b0:	0801f477 	.word	0x0801f477

0801f4b4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
 801f4b4:	b590      	push	{r4, r7, lr}
 801f4b6:	b08f      	sub	sp, #60	; 0x3c
 801f4b8:	af04      	add	r7, sp, #16
 801f4ba:	6078      	str	r0, [r7, #4]
 801f4bc:	6039      	str	r1, [r7, #0]
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
 801f4be:	6838      	ldr	r0, [r7, #0]
 801f4c0:	f7fd fa9b 	bl	801c9fa <_ZN6tflite9NumInputsEPK10TfLiteNode>
 801f4c4:	4603      	mov	r3, r0
 801f4c6:	2b01      	cmp	r3, #1
 801f4c8:	bf14      	ite	ne
 801f4ca:	2301      	movne	r3, #1
 801f4cc:	2300      	moveq	r3, #0
 801f4ce:	b2db      	uxtb	r3, r3
 801f4d0:	2b00      	cmp	r3, #0
 801f4d2:	d013      	beq.n	801f4fc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x48>
 801f4d4:	687b      	ldr	r3, [r7, #4]
 801f4d6:	695c      	ldr	r4, [r3, #20]
 801f4d8:	6838      	ldr	r0, [r7, #0]
 801f4da:	f7fd fa8e 	bl	801c9fa <_ZN6tflite9NumInputsEPK10TfLiteNode>
 801f4de:	4603      	mov	r3, r0
 801f4e0:	2201      	movs	r2, #1
 801f4e2:	9203      	str	r2, [sp, #12]
 801f4e4:	9302      	str	r3, [sp, #8]
 801f4e6:	4b7c      	ldr	r3, [pc, #496]	; (801f6d8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x224>)
 801f4e8:	9301      	str	r3, [sp, #4]
 801f4ea:	4b7c      	ldr	r3, [pc, #496]	; (801f6dc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x228>)
 801f4ec:	9300      	str	r3, [sp, #0]
 801f4ee:	235d      	movs	r3, #93	; 0x5d
 801f4f0:	4a7b      	ldr	r2, [pc, #492]	; (801f6e0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801f4f2:	497c      	ldr	r1, [pc, #496]	; (801f6e4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 801f4f4:	6878      	ldr	r0, [r7, #4]
 801f4f6:	47a0      	blx	r4
 801f4f8:	2301      	movs	r3, #1
 801f4fa:	e146      	b.n	801f78a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 801f4fc:	6838      	ldr	r0, [r7, #0]
 801f4fe:	f7fd fa89 	bl	801ca14 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 801f502:	4603      	mov	r3, r0
 801f504:	2b01      	cmp	r3, #1
 801f506:	bf14      	ite	ne
 801f508:	2301      	movne	r3, #1
 801f50a:	2300      	moveq	r3, #0
 801f50c:	b2db      	uxtb	r3, r3
 801f50e:	2b00      	cmp	r3, #0
 801f510:	d013      	beq.n	801f53a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x86>
 801f512:	687b      	ldr	r3, [r7, #4]
 801f514:	695c      	ldr	r4, [r3, #20]
 801f516:	6838      	ldr	r0, [r7, #0]
 801f518:	f7fd fa7c 	bl	801ca14 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 801f51c:	4603      	mov	r3, r0
 801f51e:	2201      	movs	r2, #1
 801f520:	9203      	str	r2, [sp, #12]
 801f522:	9302      	str	r3, [sp, #8]
 801f524:	4b6c      	ldr	r3, [pc, #432]	; (801f6d8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x224>)
 801f526:	9301      	str	r3, [sp, #4]
 801f528:	4b6f      	ldr	r3, [pc, #444]	; (801f6e8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x234>)
 801f52a:	9300      	str	r3, [sp, #0]
 801f52c:	235e      	movs	r3, #94	; 0x5e
 801f52e:	4a6c      	ldr	r2, [pc, #432]	; (801f6e0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801f530:	496c      	ldr	r1, [pc, #432]	; (801f6e4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 801f532:	6878      	ldr	r0, [r7, #4]
 801f534:	47a0      	blx	r4
 801f536:	2301      	movs	r3, #1
 801f538:	e127      	b.n	801f78a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  const TfLiteTensor* input = GetInput(context, node, 0);
 801f53a:	2200      	movs	r2, #0
 801f53c:	6839      	ldr	r1, [r7, #0]
 801f53e:	6878      	ldr	r0, [r7, #4]
 801f540:	f7fb fe94 	bl	801b26c <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801f544:	6278      	str	r0, [r7, #36]	; 0x24
  TF_LITE_ENSURE(context, input != nullptr);
 801f546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f548:	2b00      	cmp	r3, #0
 801f54a:	d10a      	bne.n	801f562 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xae>
 801f54c:	687b      	ldr	r3, [r7, #4]
 801f54e:	695c      	ldr	r4, [r3, #20]
 801f550:	4b66      	ldr	r3, [pc, #408]	; (801f6ec <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x238>)
 801f552:	9300      	str	r3, [sp, #0]
 801f554:	2360      	movs	r3, #96	; 0x60
 801f556:	4a62      	ldr	r2, [pc, #392]	; (801f6e0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801f558:	4965      	ldr	r1, [pc, #404]	; (801f6f0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 801f55a:	6878      	ldr	r0, [r7, #4]
 801f55c:	47a0      	blx	r4
 801f55e:	2301      	movs	r3, #1
 801f560:	e113      	b.n	801f78a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
 801f562:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801f564:	f7fb fe05 	bl	801b172 <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>
 801f568:	4603      	mov	r3, r0
 801f56a:	2b00      	cmp	r3, #0
 801f56c:	bfd4      	ite	le
 801f56e:	2301      	movle	r3, #1
 801f570:	2300      	movgt	r3, #0
 801f572:	b2db      	uxtb	r3, r3
 801f574:	2b00      	cmp	r3, #0
 801f576:	d00a      	beq.n	801f58e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xda>
 801f578:	687b      	ldr	r3, [r7, #4]
 801f57a:	695c      	ldr	r4, [r3, #20]
 801f57c:	4b5d      	ldr	r3, [pc, #372]	; (801f6f4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 801f57e:	9300      	str	r3, [sp, #0]
 801f580:	2361      	movs	r3, #97	; 0x61
 801f582:	4a57      	ldr	r2, [pc, #348]	; (801f6e0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801f584:	495a      	ldr	r1, [pc, #360]	; (801f6f0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 801f586:	6878      	ldr	r0, [r7, #4]
 801f588:	47a0      	blx	r4
 801f58a:	2301      	movs	r3, #1
 801f58c:	e0fd      	b.n	801f78a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TfLiteTensor* output = GetOutput(context, node, 0);
 801f58e:	2200      	movs	r2, #0
 801f590:	6839      	ldr	r1, [r7, #0]
 801f592:	6878      	ldr	r0, [r7, #4]
 801f594:	f7fb fe7a 	bl	801b28c <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 801f598:	6238      	str	r0, [r7, #32]
  TF_LITE_ENSURE(context, output != nullptr);
 801f59a:	6a3b      	ldr	r3, [r7, #32]
 801f59c:	2b00      	cmp	r3, #0
 801f59e:	d10a      	bne.n	801f5b6 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x102>
 801f5a0:	687b      	ldr	r3, [r7, #4]
 801f5a2:	695c      	ldr	r4, [r3, #20]
 801f5a4:	4b54      	ldr	r3, [pc, #336]	; (801f6f8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 801f5a6:	9300      	str	r3, [sp, #0]
 801f5a8:	2363      	movs	r3, #99	; 0x63
 801f5aa:	4a4d      	ldr	r2, [pc, #308]	; (801f6e0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801f5ac:	4950      	ldr	r1, [pc, #320]	; (801f6f0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 801f5ae:	6878      	ldr	r0, [r7, #4]
 801f5b0:	47a0      	blx	r4
 801f5b2:	2301      	movs	r3, #1
 801f5b4:	e0e9      	b.n	801f78a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TF_LITE_ENSURE(context, node->user_data != nullptr);
 801f5b6:	683b      	ldr	r3, [r7, #0]
 801f5b8:	691b      	ldr	r3, [r3, #16]
 801f5ba:	2b00      	cmp	r3, #0
 801f5bc:	d10a      	bne.n	801f5d4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x120>
 801f5be:	687b      	ldr	r3, [r7, #4]
 801f5c0:	695c      	ldr	r4, [r3, #20]
 801f5c2:	4b4e      	ldr	r3, [pc, #312]	; (801f6fc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x248>)
 801f5c4:	9300      	str	r3, [sp, #0]
 801f5c6:	2365      	movs	r3, #101	; 0x65
 801f5c8:	4a45      	ldr	r2, [pc, #276]	; (801f6e0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801f5ca:	4949      	ldr	r1, [pc, #292]	; (801f6f0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 801f5cc:	6878      	ldr	r0, [r7, #4]
 801f5ce:	47a0      	blx	r4
 801f5d0:	2301      	movs	r3, #1
 801f5d2:	e0da      	b.n	801f78a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  SoftmaxParams* op_data = static_cast<SoftmaxParams*>(node->user_data);
 801f5d4:	683b      	ldr	r3, [r7, #0]
 801f5d6:	691b      	ldr	r3, [r3, #16]
 801f5d8:	61fb      	str	r3, [r7, #28]
  if (input->type == kTfLiteInt16) {
 801f5da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f5dc:	781b      	ldrb	r3, [r3, #0]
 801f5de:	2b07      	cmp	r3, #7
 801f5e0:	d12f      	bne.n	801f642 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x18e>
    void* raw_exp_lut = context->AllocatePersistentBuffer(
 801f5e2:	687b      	ldr	r3, [r7, #4]
 801f5e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f5e6:	f240 4102 	movw	r1, #1026	; 0x402
 801f5ea:	6878      	ldr	r0, [r7, #4]
 801f5ec:	4798      	blx	r3
 801f5ee:	61b8      	str	r0, [r7, #24]
    TF_LITE_ENSURE(context, raw_exp_lut != nullptr);
 801f5f0:	69bb      	ldr	r3, [r7, #24]
 801f5f2:	2b00      	cmp	r3, #0
 801f5f4:	d10a      	bne.n	801f60c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x158>
 801f5f6:	687b      	ldr	r3, [r7, #4]
 801f5f8:	695c      	ldr	r4, [r3, #20]
 801f5fa:	4b41      	ldr	r3, [pc, #260]	; (801f700 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x24c>)
 801f5fc:	9300      	str	r3, [sp, #0]
 801f5fe:	236b      	movs	r3, #107	; 0x6b
 801f600:	4a37      	ldr	r2, [pc, #220]	; (801f6e0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801f602:	493b      	ldr	r1, [pc, #236]	; (801f6f0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 801f604:	6878      	ldr	r0, [r7, #4]
 801f606:	47a0      	blx	r4
 801f608:	2301      	movs	r3, #1
 801f60a:	e0be      	b.n	801f78a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
    op_data->exp_lut = reinterpret_cast<int16_t*>(raw_exp_lut);
 801f60c:	69fb      	ldr	r3, [r7, #28]
 801f60e:	69ba      	ldr	r2, [r7, #24]
 801f610:	629a      	str	r2, [r3, #40]	; 0x28
    void* one_over_one_plus_x_lut = context->AllocatePersistentBuffer(
 801f612:	687b      	ldr	r3, [r7, #4]
 801f614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f616:	f240 4102 	movw	r1, #1026	; 0x402
 801f61a:	6878      	ldr	r0, [r7, #4]
 801f61c:	4798      	blx	r3
 801f61e:	6178      	str	r0, [r7, #20]
    TF_LITE_ENSURE(context, one_over_one_plus_x_lut != nullptr);
 801f620:	697b      	ldr	r3, [r7, #20]
 801f622:	2b00      	cmp	r3, #0
 801f624:	d10a      	bne.n	801f63c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x188>
 801f626:	687b      	ldr	r3, [r7, #4]
 801f628:	695c      	ldr	r4, [r3, #20]
 801f62a:	4b36      	ldr	r3, [pc, #216]	; (801f704 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x250>)
 801f62c:	9300      	str	r3, [sp, #0]
 801f62e:	236f      	movs	r3, #111	; 0x6f
 801f630:	4a2b      	ldr	r2, [pc, #172]	; (801f6e0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801f632:	492f      	ldr	r1, [pc, #188]	; (801f6f0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 801f634:	6878      	ldr	r0, [r7, #4]
 801f636:	47a0      	blx	r4
 801f638:	2301      	movs	r3, #1
 801f63a:	e0a6      	b.n	801f78a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
    op_data->one_over_one_plus_x_lut =
 801f63c:	69fb      	ldr	r3, [r7, #28]
 801f63e:	697a      	ldr	r2, [r7, #20]
 801f640:	62da      	str	r2, [r3, #44]	; 0x2c
  if (output->type == kTfLiteInt16) {
 801f642:	6a3b      	ldr	r3, [r7, #32]
 801f644:	781b      	ldrb	r3, [r3, #0]
 801f646:	2b07      	cmp	r3, #7
 801f648:	d112      	bne.n	801f670 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1bc>
    TF_LITE_ENSURE(context,
 801f64a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f64c:	781b      	ldrb	r3, [r3, #0]
 801f64e:	2b09      	cmp	r3, #9
 801f650:	d028      	beq.n	801f6a4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f0>
 801f652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f654:	781b      	ldrb	r3, [r3, #0]
 801f656:	2b07      	cmp	r3, #7
 801f658:	d024      	beq.n	801f6a4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f0>
 801f65a:	687b      	ldr	r3, [r7, #4]
 801f65c:	695c      	ldr	r4, [r3, #20]
 801f65e:	4b2a      	ldr	r3, [pc, #168]	; (801f708 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x254>)
 801f660:	9300      	str	r3, [sp, #0]
 801f662:	2375      	movs	r3, #117	; 0x75
 801f664:	4a1e      	ldr	r2, [pc, #120]	; (801f6e0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801f666:	4922      	ldr	r1, [pc, #136]	; (801f6f0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 801f668:	6878      	ldr	r0, [r7, #4]
 801f66a:	47a0      	blx	r4
 801f66c:	2301      	movs	r3, #1
 801f66e:	e08c      	b.n	801f78a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
    TF_LITE_ENSURE_EQ(context, input->type, output->type);
 801f670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f672:	781a      	ldrb	r2, [r3, #0]
 801f674:	6a3b      	ldr	r3, [r7, #32]
 801f676:	781b      	ldrb	r3, [r3, #0]
 801f678:	429a      	cmp	r2, r3
 801f67a:	d013      	beq.n	801f6a4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f0>
 801f67c:	687b      	ldr	r3, [r7, #4]
 801f67e:	695c      	ldr	r4, [r3, #20]
 801f680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f682:	781b      	ldrb	r3, [r3, #0]
 801f684:	461a      	mov	r2, r3
 801f686:	6a3b      	ldr	r3, [r7, #32]
 801f688:	781b      	ldrb	r3, [r3, #0]
 801f68a:	9303      	str	r3, [sp, #12]
 801f68c:	9202      	str	r2, [sp, #8]
 801f68e:	4b1f      	ldr	r3, [pc, #124]	; (801f70c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x258>)
 801f690:	9301      	str	r3, [sp, #4]
 801f692:	4b1f      	ldr	r3, [pc, #124]	; (801f710 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x25c>)
 801f694:	9300      	str	r3, [sp, #0]
 801f696:	2378      	movs	r3, #120	; 0x78
 801f698:	4a11      	ldr	r2, [pc, #68]	; (801f6e0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801f69a:	4912      	ldr	r1, [pc, #72]	; (801f6e4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 801f69c:	6878      	ldr	r0, [r7, #4]
 801f69e:	47a0      	blx	r4
 801f6a0:	2301      	movs	r3, #1
 801f6a2:	e072      	b.n	801f78a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  if (input->type == kTfLiteInt16) {
 801f6a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f6a6:	781b      	ldrb	r3, [r3, #0]
 801f6a8:	2b07      	cmp	r3, #7
 801f6aa:	d161      	bne.n	801f770 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2bc>
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 801f6ac:	6a3b      	ldr	r3, [r7, #32]
 801f6ae:	691b      	ldr	r3, [r3, #16]
 801f6b0:	2b00      	cmp	r3, #0
 801f6b2:	d035      	beq.n	801f720 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x26c>
 801f6b4:	687b      	ldr	r3, [r7, #4]
 801f6b6:	695c      	ldr	r4, [r3, #20]
 801f6b8:	6a3b      	ldr	r3, [r7, #32]
 801f6ba:	691b      	ldr	r3, [r3, #16]
 801f6bc:	2200      	movs	r2, #0
 801f6be:	9203      	str	r2, [sp, #12]
 801f6c0:	9302      	str	r3, [sp, #8]
 801f6c2:	4b14      	ldr	r3, [pc, #80]	; (801f714 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x260>)
 801f6c4:	9301      	str	r3, [sp, #4]
 801f6c6:	4b14      	ldr	r3, [pc, #80]	; (801f718 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 801f6c8:	9300      	str	r3, [sp, #0]
 801f6ca:	237d      	movs	r3, #125	; 0x7d
 801f6cc:	4a04      	ldr	r2, [pc, #16]	; (801f6e0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801f6ce:	4905      	ldr	r1, [pc, #20]	; (801f6e4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 801f6d0:	6878      	ldr	r0, [r7, #4]
 801f6d2:	47a0      	blx	r4
 801f6d4:	2301      	movs	r3, #1
 801f6d6:	e058      	b.n	801f78a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
 801f6d8:	08029184 	.word	0x08029184
 801f6dc:	08029188 	.word	0x08029188
 801f6e0:	08028fcc 	.word	0x08028fcc
 801f6e4:	08029058 	.word	0x08029058
 801f6e8:	08029198 	.word	0x08029198
 801f6ec:	080291ac 	.word	0x080291ac
 801f6f0:	08029138 	.word	0x08029138
 801f6f4:	080291c0 	.word	0x080291c0
 801f6f8:	080291dc 	.word	0x080291dc
 801f6fc:	080291f0 	.word	0x080291f0
 801f700:	0802920c 	.word	0x0802920c
 801f704:	08029224 	.word	0x08029224
 801f708:	08029248 	.word	0x08029248
 801f70c:	08029120 	.word	0x08029120
 801f710:	08029100 	.word	0x08029100
 801f714:	08029074 	.word	0x08029074
 801f718:	08029078 	.word	0x08029078
 801f71c:	00000000 	.word	0x00000000
    gen_lut([](float value) { return std::exp(value); }, -10.0f, 0.0f,
 801f720:	f107 0308 	add.w	r3, r7, #8
 801f724:	4618      	mov	r0, r3
 801f726:	f7ff fe7f 	bl	801f428 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv>
 801f72a:	69fb      	ldr	r3, [r7, #28]
 801f72c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f72e:	f240 2201 	movw	r2, #513	; 0x201
 801f732:	4619      	mov	r1, r3
 801f734:	ed5f 0a07 	vldr	s1, [pc, #-28]	; 801f71c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x268>
 801f738:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 801f73c:	f7ff faf4 	bl	801ed28 <_ZN6tflite7gen_lutEPFffEffPsi>
    gen_lut([](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f,
 801f740:	f107 030c 	add.w	r3, r7, #12
 801f744:	4618      	mov	r0, r3
 801f746:	f7ff fea7 	bl	801f498 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv>
 801f74a:	69fb      	ldr	r3, [r7, #28]
 801f74c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f74e:	f240 2201 	movw	r2, #513	; 0x201
 801f752:	4619      	mov	r1, r3
 801f754:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 801f758:	ed1f 0a10 	vldr	s0, [pc, #-64]	; 801f71c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x268>
 801f75c:	f7ff fae4 	bl	801ed28 <_ZN6tflite7gen_lutEPFffEffPsi>
            op_data->one_over_one_plus_x_lut, kInt16LUTArraySize);
    op_data->zero_point = output->params.zero_point;
 801f760:	6a3b      	ldr	r3, [r7, #32]
 801f762:	691a      	ldr	r2, [r3, #16]
 801f764:	69fb      	ldr	r3, [r7, #28]
 801f766:	61da      	str	r2, [r3, #28]
    op_data->scale = output->params.scale;
 801f768:	6a3b      	ldr	r3, [r7, #32]
 801f76a:	68da      	ldr	r2, [r3, #12]
 801f76c:	69fb      	ldr	r3, [r7, #28]
 801f76e:	621a      	str	r2, [r3, #32]
  }

  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
 801f770:	683b      	ldr	r3, [r7, #0]
 801f772:	695b      	ldr	r3, [r3, #20]
 801f774:	613b      	str	r3, [r7, #16]
  return CalculateSoftmaxParams(context, input, output, params, op_data);
 801f776:	69fb      	ldr	r3, [r7, #28]
 801f778:	9300      	str	r3, [sp, #0]
 801f77a:	693b      	ldr	r3, [r7, #16]
 801f77c:	6a3a      	ldr	r2, [r7, #32]
 801f77e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801f780:	6878      	ldr	r0, [r7, #4]
 801f782:	f7ff fbfd 	bl	801ef80 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>
 801f786:	4603      	mov	r3, r0
 801f788:	bf00      	nop
}
 801f78a:	4618      	mov	r0, r3
 801f78c:	372c      	adds	r7, #44	; 0x2c
 801f78e:	46bd      	mov	sp, r7
 801f790:	bd90      	pop	{r4, r7, pc}
 801f792:	bf00      	nop

0801f794 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj>:
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_SOFTMAX, },
};
static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
 801f794:	b580      	push	{r7, lr}
 801f796:	b084      	sub	sp, #16
 801f798:	af00      	add	r7, sp, #0
 801f79a:	6078      	str	r0, [r7, #4]
 801f79c:	6039      	str	r1, [r7, #0]
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
 801f79e:	4b21      	ldr	r3, [pc, #132]	; (801f824 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x90>)
 801f7a0:	681a      	ldr	r2, [r3, #0]
 801f7a2:	683b      	ldr	r3, [r7, #0]
 801f7a4:	425b      	negs	r3, r3
 801f7a6:	441a      	add	r2, r3
 801f7a8:	4b1f      	ldr	r3, [pc, #124]	; (801f828 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x94>)
 801f7aa:	681b      	ldr	r3, [r3, #0]
 801f7ac:	429a      	cmp	r2, r3
 801f7ae:	d224      	bcs.n	801f7fa <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x66>
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
 801f7b0:	4b1e      	ldr	r3, [pc, #120]	; (801f82c <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x98>)
 801f7b2:	681b      	ldr	r3, [r3, #0]
 801f7b4:	2b09      	cmp	r3, #9
 801f7b6:	d906      	bls.n	801f7c6 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x32>
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
 801f7b8:	683b      	ldr	r3, [r7, #0]
 801f7ba:	4619      	mov	r1, r3
 801f7bc:	481c      	ldr	r0, [pc, #112]	; (801f830 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x9c>)
 801f7be:	f7e6 fc5d 	bl	800607c <_Z9ei_printfPKcz>
        (int)bytes);
      return NULL;
 801f7c2:	2300      	movs	r3, #0
 801f7c4:	e029      	b.n	801f81a <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x86>
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
 801f7c6:	2101      	movs	r1, #1
 801f7c8:	6838      	ldr	r0, [r7, #0]
 801f7ca:	f7fb fa29 	bl	801ac20 <_Z9ei_callocjj>
 801f7ce:	60f8      	str	r0, [r7, #12]
    if (ptr == NULL) {
 801f7d0:	68fb      	ldr	r3, [r7, #12]
 801f7d2:	2b00      	cmp	r3, #0
 801f7d4:	d106      	bne.n	801f7e4 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x50>
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
 801f7d6:	683b      	ldr	r3, [r7, #0]
 801f7d8:	4619      	mov	r1, r3
 801f7da:	4816      	ldr	r0, [pc, #88]	; (801f834 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0xa0>)
 801f7dc:	f7e6 fc4e 	bl	800607c <_Z9ei_printfPKcz>
      return NULL;
 801f7e0:	2300      	movs	r3, #0
 801f7e2:	e01a      	b.n	801f81a <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x86>
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
 801f7e4:	4b11      	ldr	r3, [pc, #68]	; (801f82c <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x98>)
 801f7e6:	681b      	ldr	r3, [r3, #0]
 801f7e8:	1c5a      	adds	r2, r3, #1
 801f7ea:	4910      	ldr	r1, [pc, #64]	; (801f82c <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x98>)
 801f7ec:	600a      	str	r2, [r1, #0]
 801f7ee:	4912      	ldr	r1, [pc, #72]	; (801f838 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0xa4>)
 801f7f0:	68fa      	ldr	r2, [r7, #12]
 801f7f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    return ptr;
 801f7f6:	68fb      	ldr	r3, [r7, #12]
 801f7f8:	e00f      	b.n	801f81a <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x86>
  }

  current_location -= bytes;
 801f7fa:	4b0a      	ldr	r3, [pc, #40]	; (801f824 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x90>)
 801f7fc:	681a      	ldr	r2, [r3, #0]
 801f7fe:	683b      	ldr	r3, [r7, #0]
 801f800:	425b      	negs	r3, r3
 801f802:	4413      	add	r3, r2
 801f804:	4a07      	ldr	r2, [pc, #28]	; (801f824 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x90>)
 801f806:	6013      	str	r3, [r2, #0]

  ptr = current_location;
 801f808:	4b06      	ldr	r3, [pc, #24]	; (801f824 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x90>)
 801f80a:	681b      	ldr	r3, [r3, #0]
 801f80c:	60fb      	str	r3, [r7, #12]
  memset(ptr, 0, bytes);
 801f80e:	683a      	ldr	r2, [r7, #0]
 801f810:	2100      	movs	r1, #0
 801f812:	68f8      	ldr	r0, [r7, #12]
 801f814:	f003 febc 	bl	8023590 <memset>

  return ptr;
 801f818:	68fb      	ldr	r3, [r7, #12]
}
 801f81a:	4618      	mov	r0, r3
 801f81c:	3710      	adds	r7, #16
 801f81e:	46bd      	mov	sp, r7
 801f820:	bd80      	pop	{r7, pc}
 801f822:	bf00      	nop
 801f824:	20001f20 	.word	0x20001f20
 801f828:	20001f1c 	.word	0x20001f1c
 801f82c:	200023b8 	.word	0x200023b8
 801f830:	08029298 	.word	0x08029298
 801f834:	08029318 	.word	0x08029318
 801f838:	20002390 	.word	0x20002390

0801f83c <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi>:
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
 801f83c:	b580      	push	{r7, lr}
 801f83e:	b086      	sub	sp, #24
 801f840:	af00      	add	r7, sp, #0
 801f842:	60f8      	str	r0, [r7, #12]
 801f844:	60b9      	str	r1, [r7, #8]
 801f846:	607a      	str	r2, [r7, #4]
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
 801f848:	4b1b      	ldr	r3, [pc, #108]	; (801f8b8 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x7c>)
 801f84a:	681b      	ldr	r3, [r3, #0]
 801f84c:	2b03      	cmp	r3, #3
 801f84e:	d906      	bls.n	801f85e <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x22>
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
 801f850:	68bb      	ldr	r3, [r7, #8]
 801f852:	4619      	mov	r1, r3
 801f854:	4819      	ldr	r0, [pc, #100]	; (801f8bc <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x80>)
 801f856:	f7e6 fc11 	bl	800607c <_Z9ei_printfPKcz>
      (int)bytes);
    return kTfLiteError;
 801f85a:	2301      	movs	r3, #1
 801f85c:	e028      	b.n	801f8b0 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x74>
  }

  scratch_buffer_t b;
  b.bytes = bytes;
 801f85e:	68bb      	ldr	r3, [r7, #8]
 801f860:	613b      	str	r3, [r7, #16]

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
 801f862:	693b      	ldr	r3, [r7, #16]
 801f864:	4619      	mov	r1, r3
 801f866:	68f8      	ldr	r0, [r7, #12]
 801f868:	f7ff ff94 	bl	801f794 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj>
 801f86c:	4603      	mov	r3, r0
 801f86e:	617b      	str	r3, [r7, #20]
  if (!b.ptr) {
 801f870:	697b      	ldr	r3, [r7, #20]
 801f872:	2b00      	cmp	r3, #0
 801f874:	d106      	bne.n	801f884 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x48>
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
 801f876:	68bb      	ldr	r3, [r7, #8]
 801f878:	4619      	mov	r1, r3
 801f87a:	4811      	ldr	r0, [pc, #68]	; (801f8c0 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x84>)
 801f87c:	f7e6 fbfe 	bl	800607c <_Z9ei_printfPKcz>
      (int)bytes);
    return kTfLiteError;
 801f880:	2301      	movs	r3, #1
 801f882:	e015      	b.n	801f8b0 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x74>
  }

  scratch_buffers[scratch_buffers_ix] = b;
 801f884:	4b0c      	ldr	r3, [pc, #48]	; (801f8b8 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x7c>)
 801f886:	681b      	ldr	r3, [r3, #0]
 801f888:	4a0e      	ldr	r2, [pc, #56]	; (801f8c4 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x88>)
 801f88a:	00db      	lsls	r3, r3, #3
 801f88c:	4413      	add	r3, r2
 801f88e:	f107 0210 	add.w	r2, r7, #16
 801f892:	e892 0003 	ldmia.w	r2, {r0, r1}
 801f896:	e883 0003 	stmia.w	r3, {r0, r1}
  *buffer_idx = scratch_buffers_ix;
 801f89a:	4b07      	ldr	r3, [pc, #28]	; (801f8b8 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x7c>)
 801f89c:	681b      	ldr	r3, [r3, #0]
 801f89e:	461a      	mov	r2, r3
 801f8a0:	687b      	ldr	r3, [r7, #4]
 801f8a2:	601a      	str	r2, [r3, #0]

  scratch_buffers_ix++;
 801f8a4:	4b04      	ldr	r3, [pc, #16]	; (801f8b8 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x7c>)
 801f8a6:	681b      	ldr	r3, [r3, #0]
 801f8a8:	3301      	adds	r3, #1
 801f8aa:	4a03      	ldr	r2, [pc, #12]	; (801f8b8 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x7c>)
 801f8ac:	6013      	str	r3, [r2, #0]

  return kTfLiteOk;
 801f8ae:	2300      	movs	r3, #0
}
 801f8b0:	4618      	mov	r0, r3
 801f8b2:	3718      	adds	r7, #24
 801f8b4:	46bd      	mov	sp, r7
 801f8b6:	bd80      	pop	{r7, pc}
 801f8b8:	200023dc 	.word	0x200023dc
 801f8bc:	08029350 	.word	0x08029350
 801f8c0:	080293a8 	.word	0x080293a8
 801f8c4:	200023bc 	.word	0x200023bc

0801f8c8 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti>:

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
 801f8c8:	b480      	push	{r7}
 801f8ca:	b083      	sub	sp, #12
 801f8cc:	af00      	add	r7, sp, #0
 801f8ce:	6078      	str	r0, [r7, #4]
 801f8d0:	6039      	str	r1, [r7, #0]
  if (buffer_idx > (int)scratch_buffers_ix) {
 801f8d2:	4b09      	ldr	r3, [pc, #36]	; (801f8f8 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x30>)
 801f8d4:	681b      	ldr	r3, [r3, #0]
 801f8d6:	461a      	mov	r2, r3
 801f8d8:	683b      	ldr	r3, [r7, #0]
 801f8da:	4293      	cmp	r3, r2
 801f8dc:	dd01      	ble.n	801f8e2 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x1a>
    return NULL;
 801f8de:	2300      	movs	r3, #0
 801f8e0:	e004      	b.n	801f8ec <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x24>
  }
  return scratch_buffers[buffer_idx].ptr;
 801f8e2:	4a06      	ldr	r2, [pc, #24]	; (801f8fc <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x34>)
 801f8e4:	683b      	ldr	r3, [r7, #0]
 801f8e6:	00db      	lsls	r3, r3, #3
 801f8e8:	4413      	add	r3, r2
 801f8ea:	685b      	ldr	r3, [r3, #4]
}
 801f8ec:	4618      	mov	r0, r3
 801f8ee:	370c      	adds	r7, #12
 801f8f0:	46bd      	mov	sp, r7
 801f8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f8f6:	4770      	bx	lr
 801f8f8:	200023dc 	.word	0x200023dc
 801f8fc:	200023bc 	.word	0x200023bc

0801f900 <_ZN12_GLOBAL__N_1L9GetTensorEPK13TfLiteContexti>:

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
 801f900:	b480      	push	{r7}
 801f902:	b083      	sub	sp, #12
 801f904:	af00      	add	r7, sp, #0
 801f906:	6078      	str	r0, [r7, #4]
 801f908:	6039      	str	r1, [r7, #0]
  return &tflTensors[tensor_idx];
 801f90a:	683b      	ldr	r3, [r7, #0]
 801f90c:	019b      	lsls	r3, r3, #6
 801f90e:	4a04      	ldr	r2, [pc, #16]	; (801f920 <_ZN12_GLOBAL__N_1L9GetTensorEPK13TfLiteContexti+0x20>)
 801f910:	4413      	add	r3, r2
}
 801f912:	4618      	mov	r0, r3
 801f914:	370c      	adds	r7, #12
 801f916:	46bd      	mov	sp, r7
 801f918:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f91c:	4770      	bx	lr
 801f91e:	bf00      	nop
 801f920:	20001f7c 	.word	0x20001f7c

0801f924 <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti>:

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
 801f924:	b480      	push	{r7}
 801f926:	b083      	sub	sp, #12
 801f928:	af00      	add	r7, sp, #0
 801f92a:	6078      	str	r0, [r7, #4]
 801f92c:	6039      	str	r1, [r7, #0]
  return &tflEvalTensors[tensor_idx];
 801f92e:	683a      	ldr	r2, [r7, #0]
 801f930:	4613      	mov	r3, r2
 801f932:	005b      	lsls	r3, r3, #1
 801f934:	4413      	add	r3, r2
 801f936:	009b      	lsls	r3, r3, #2
 801f938:	4a03      	ldr	r2, [pc, #12]	; (801f948 <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti+0x24>)
 801f93a:	4413      	add	r3, r2
}
 801f93c:	4618      	mov	r0, r3
 801f93e:	370c      	adds	r7, #12
 801f940:	46bd      	mov	sp, r7
 801f942:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f946:	4770      	bx	lr
 801f948:	2000223c 	.word	0x2000223c

0801f94c <_Z18trained_model_initPFPvjjE>:

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
 801f94c:	b5b0      	push	{r4, r5, r7, lr}
 801f94e:	b092      	sub	sp, #72	; 0x48
 801f950:	af00      	add	r7, sp, #0
 801f952:	6278      	str	r0, [r7, #36]	; 0x24
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
 801f954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f956:	f44f 7188 	mov.w	r1, #272	; 0x110
 801f95a:	2010      	movs	r0, #16
 801f95c:	4798      	blx	r3
 801f95e:	4603      	mov	r3, r0
 801f960:	4aa3      	ldr	r2, [pc, #652]	; (801fbf0 <_Z18trained_model_initPFPvjjE+0x2a4>)
 801f962:	6013      	str	r3, [r2, #0]
  if (!tensor_arena) {
 801f964:	4ba2      	ldr	r3, [pc, #648]	; (801fbf0 <_Z18trained_model_initPFPvjjE+0x2a4>)
 801f966:	681b      	ldr	r3, [r3, #0]
 801f968:	2b00      	cmp	r3, #0
 801f96a:	d104      	bne.n	801f976 <_Z18trained_model_initPFPvjjE+0x2a>
    ei_printf("ERR: failed to allocate tensor arena\n");
 801f96c:	48a1      	ldr	r0, [pc, #644]	; (801fbf4 <_Z18trained_model_initPFPvjjE+0x2a8>)
 801f96e:	f7e6 fb85 	bl	800607c <_Z9ei_printfPKcz>
    return kTfLiteError;
 801f972:	2301      	movs	r3, #1
 801f974:	e21d      	b.n	801fdb2 <_Z18trained_model_initPFPvjjE+0x466>
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
 801f976:	4b9e      	ldr	r3, [pc, #632]	; (801fbf0 <_Z18trained_model_initPFPvjjE+0x2a4>)
 801f978:	681b      	ldr	r3, [r3, #0]
 801f97a:	4a9f      	ldr	r2, [pc, #636]	; (801fbf8 <_Z18trained_model_initPFPvjjE+0x2ac>)
 801f97c:	6013      	str	r3, [r2, #0]
  current_location = tensor_arena + kTensorArenaSize;
 801f97e:	4b9c      	ldr	r3, [pc, #624]	; (801fbf0 <_Z18trained_model_initPFPvjjE+0x2a4>)
 801f980:	681b      	ldr	r3, [r3, #0]
 801f982:	f503 7388 	add.w	r3, r3, #272	; 0x110
 801f986:	4a9d      	ldr	r2, [pc, #628]	; (801fbfc <_Z18trained_model_initPFPvjjE+0x2b0>)
 801f988:	6013      	str	r3, [r2, #0]
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
 801f98a:	4b9d      	ldr	r3, [pc, #628]	; (801fc00 <_Z18trained_model_initPFPvjjE+0x2b4>)
 801f98c:	4a9d      	ldr	r2, [pc, #628]	; (801fc04 <_Z18trained_model_initPFPvjjE+0x2b8>)
 801f98e:	639a      	str	r2, [r3, #56]	; 0x38
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
 801f990:	4b9b      	ldr	r3, [pc, #620]	; (801fc00 <_Z18trained_model_initPFPvjjE+0x2b4>)
 801f992:	4a9d      	ldr	r2, [pc, #628]	; (801fc08 <_Z18trained_model_initPFPvjjE+0x2bc>)
 801f994:	641a      	str	r2, [r3, #64]	; 0x40
  ctx.GetScratchBuffer = &GetScratchBuffer;
 801f996:	4b9a      	ldr	r3, [pc, #616]	; (801fc00 <_Z18trained_model_initPFPvjjE+0x2b4>)
 801f998:	4a9c      	ldr	r2, [pc, #624]	; (801fc0c <_Z18trained_model_initPFPvjjE+0x2c0>)
 801f99a:	645a      	str	r2, [r3, #68]	; 0x44
  ctx.GetTensor = &GetTensor;
 801f99c:	4b98      	ldr	r3, [pc, #608]	; (801fc00 <_Z18trained_model_initPFPvjjE+0x2b4>)
 801f99e:	4a9c      	ldr	r2, [pc, #624]	; (801fc10 <_Z18trained_model_initPFPvjjE+0x2c4>)
 801f9a0:	651a      	str	r2, [r3, #80]	; 0x50
  ctx.GetEvalTensor = &GetEvalTensor;
 801f9a2:	4b97      	ldr	r3, [pc, #604]	; (801fc00 <_Z18trained_model_initPFPvjjE+0x2b4>)
 801f9a4:	4a9b      	ldr	r2, [pc, #620]	; (801fc14 <_Z18trained_model_initPFPvjjE+0x2c8>)
 801f9a6:	655a      	str	r2, [r3, #84]	; 0x54
  ctx.tensors = tflTensors;
 801f9a8:	4b95      	ldr	r3, [pc, #596]	; (801fc00 <_Z18trained_model_initPFPvjjE+0x2b4>)
 801f9aa:	4a9b      	ldr	r2, [pc, #620]	; (801fc18 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801f9ac:	609a      	str	r2, [r3, #8]
  ctx.tensors_size = 11;
 801f9ae:	4b94      	ldr	r3, [pc, #592]	; (801fc00 <_Z18trained_model_initPFPvjjE+0x2b4>)
 801f9b0:	220b      	movs	r2, #11
 801f9b2:	601a      	str	r2, [r3, #0]
  for (size_t i = 0; i < 11; ++i) {
 801f9b4:	2300      	movs	r3, #0
 801f9b6:	647b      	str	r3, [r7, #68]	; 0x44
 801f9b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f9ba:	2b0a      	cmp	r3, #10
 801f9bc:	f200 810c 	bhi.w	801fbd8 <_Z18trained_model_initPFPvjjE+0x28c>
    tflTensors[i].type = tensorData[i].type;
 801f9c0:	4996      	ldr	r1, [pc, #600]	; (801fc1c <_Z18trained_model_initPFPvjjE+0x2d0>)
 801f9c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801f9c4:	4613      	mov	r3, r2
 801f9c6:	005b      	lsls	r3, r3, #1
 801f9c8:	4413      	add	r3, r2
 801f9ca:	00db      	lsls	r3, r3, #3
 801f9cc:	440b      	add	r3, r1
 801f9ce:	3301      	adds	r3, #1
 801f9d0:	7819      	ldrb	r1, [r3, #0]
 801f9d2:	4a91      	ldr	r2, [pc, #580]	; (801fc18 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801f9d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f9d6:	019b      	lsls	r3, r3, #6
 801f9d8:	4413      	add	r3, r2
 801f9da:	460a      	mov	r2, r1
 801f9dc:	701a      	strb	r2, [r3, #0]
    tflEvalTensors[i].type = tensorData[i].type;
 801f9de:	498f      	ldr	r1, [pc, #572]	; (801fc1c <_Z18trained_model_initPFPvjjE+0x2d0>)
 801f9e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801f9e2:	4613      	mov	r3, r2
 801f9e4:	005b      	lsls	r3, r3, #1
 801f9e6:	4413      	add	r3, r2
 801f9e8:	00db      	lsls	r3, r3, #3
 801f9ea:	440b      	add	r3, r1
 801f9ec:	3301      	adds	r3, #1
 801f9ee:	7818      	ldrb	r0, [r3, #0]
 801f9f0:	498b      	ldr	r1, [pc, #556]	; (801fc20 <_Z18trained_model_initPFPvjjE+0x2d4>)
 801f9f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801f9f4:	4613      	mov	r3, r2
 801f9f6:	005b      	lsls	r3, r3, #1
 801f9f8:	4413      	add	r3, r2
 801f9fa:	009b      	lsls	r3, r3, #2
 801f9fc:	440b      	add	r3, r1
 801f9fe:	3308      	adds	r3, #8
 801fa00:	4602      	mov	r2, r0
 801fa02:	701a      	strb	r2, [r3, #0]
    tflTensors[i].is_variable = 0;
 801fa04:	4a84      	ldr	r2, [pc, #528]	; (801fc18 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801fa06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801fa08:	019b      	lsls	r3, r3, #6
 801fa0a:	4413      	add	r3, r2
 801fa0c:	332d      	adds	r3, #45	; 0x2d
 801fa0e:	2200      	movs	r2, #0
 801fa10:	701a      	strb	r2, [r3, #0]

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
 801fa12:	4982      	ldr	r1, [pc, #520]	; (801fc1c <_Z18trained_model_initPFPvjjE+0x2d0>)
 801fa14:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801fa16:	4613      	mov	r3, r2
 801fa18:	005b      	lsls	r3, r3, #1
 801fa1a:	4413      	add	r3, r2
 801fa1c:	00db      	lsls	r3, r3, #3
 801fa1e:	440b      	add	r3, r1
 801fa20:	7819      	ldrb	r1, [r3, #0]
 801fa22:	4a7d      	ldr	r2, [pc, #500]	; (801fc18 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801fa24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801fa26:	019b      	lsls	r3, r3, #6
 801fa28:	4413      	add	r3, r2
 801fa2a:	3314      	adds	r3, #20
 801fa2c:	460a      	mov	r2, r1
 801fa2e:	701a      	strb	r2, [r3, #0]
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
 801fa30:	497a      	ldr	r1, [pc, #488]	; (801fc1c <_Z18trained_model_initPFPvjjE+0x2d0>)
 801fa32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801fa34:	4613      	mov	r3, r2
 801fa36:	005b      	lsls	r3, r3, #1
 801fa38:	4413      	add	r3, r2
 801fa3a:	00db      	lsls	r3, r3, #3
 801fa3c:	440b      	add	r3, r1
 801fa3e:	330c      	adds	r3, #12
 801fa40:	681a      	ldr	r2, [r3, #0]
 801fa42:	4975      	ldr	r1, [pc, #468]	; (801fc18 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801fa44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801fa46:	019b      	lsls	r3, r3, #6
 801fa48:	440b      	add	r3, r1
 801fa4a:	3318      	adds	r3, #24
 801fa4c:	601a      	str	r2, [r3, #0]
    tflTensors[i].dims = tensorData[i].dims;
 801fa4e:	4973      	ldr	r1, [pc, #460]	; (801fc1c <_Z18trained_model_initPFPvjjE+0x2d0>)
 801fa50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801fa52:	4613      	mov	r3, r2
 801fa54:	005b      	lsls	r3, r3, #1
 801fa56:	4413      	add	r3, r2
 801fa58:	00db      	lsls	r3, r3, #3
 801fa5a:	440b      	add	r3, r1
 801fa5c:	3308      	adds	r3, #8
 801fa5e:	681a      	ldr	r2, [r3, #0]
 801fa60:	496d      	ldr	r1, [pc, #436]	; (801fc18 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801fa62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801fa64:	019b      	lsls	r3, r3, #6
 801fa66:	440b      	add	r3, r1
 801fa68:	3308      	adds	r3, #8
 801fa6a:	601a      	str	r2, [r3, #0]
    tflEvalTensors[i].dims = tensorData[i].dims;
 801fa6c:	496b      	ldr	r1, [pc, #428]	; (801fc1c <_Z18trained_model_initPFPvjjE+0x2d0>)
 801fa6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801fa70:	4613      	mov	r3, r2
 801fa72:	005b      	lsls	r3, r3, #1
 801fa74:	4413      	add	r3, r2
 801fa76:	00db      	lsls	r3, r3, #3
 801fa78:	440b      	add	r3, r1
 801fa7a:	3308      	adds	r3, #8
 801fa7c:	6819      	ldr	r1, [r3, #0]
 801fa7e:	4868      	ldr	r0, [pc, #416]	; (801fc20 <_Z18trained_model_initPFPvjjE+0x2d4>)
 801fa80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801fa82:	4613      	mov	r3, r2
 801fa84:	005b      	lsls	r3, r3, #1
 801fa86:	4413      	add	r3, r2
 801fa88:	009b      	lsls	r3, r3, #2
 801fa8a:	4403      	add	r3, r0
 801fa8c:	3304      	adds	r3, #4
 801fa8e:	6019      	str	r1, [r3, #0]

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
 801fa90:	4a61      	ldr	r2, [pc, #388]	; (801fc18 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801fa92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801fa94:	019b      	lsls	r3, r3, #6
 801fa96:	4413      	add	r3, r2
 801fa98:	3314      	adds	r3, #20
 801fa9a:	781b      	ldrb	r3, [r3, #0]
 801fa9c:	2b02      	cmp	r3, #2
 801fa9e:	d11e      	bne.n	801fade <_Z18trained_model_initPFPvjjE+0x192>
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
 801faa0:	495e      	ldr	r1, [pc, #376]	; (801fc1c <_Z18trained_model_initPFPvjjE+0x2d0>)
 801faa2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801faa4:	4613      	mov	r3, r2
 801faa6:	005b      	lsls	r3, r3, #1
 801faa8:	4413      	add	r3, r2
 801faaa:	00db      	lsls	r3, r3, #3
 801faac:	440b      	add	r3, r1
 801faae:	3304      	adds	r3, #4
 801fab0:	681b      	ldr	r3, [r3, #0]
 801fab2:	461a      	mov	r2, r3
 801fab4:	4b4e      	ldr	r3, [pc, #312]	; (801fbf0 <_Z18trained_model_initPFPvjjE+0x2a4>)
 801fab6:	681b      	ldr	r3, [r3, #0]
 801fab8:	4413      	add	r3, r2
 801faba:	63bb      	str	r3, [r7, #56]	; 0x38

     tflTensors[i].data.data =  start;
 801fabc:	4a56      	ldr	r2, [pc, #344]	; (801fc18 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801fabe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801fac0:	019b      	lsls	r3, r3, #6
 801fac2:	4413      	add	r3, r2
 801fac4:	3304      	adds	r3, #4
 801fac6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801fac8:	601a      	str	r2, [r3, #0]
     tflEvalTensors[i].data.data =  start;
 801faca:	4955      	ldr	r1, [pc, #340]	; (801fc20 <_Z18trained_model_initPFPvjjE+0x2d4>)
 801facc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801face:	4613      	mov	r3, r2
 801fad0:	005b      	lsls	r3, r3, #1
 801fad2:	4413      	add	r3, r2
 801fad4:	009b      	lsls	r3, r3, #2
 801fad6:	440b      	add	r3, r1
 801fad8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801fada:	601a      	str	r2, [r3, #0]
 801fadc:	e01f      	b.n	801fb1e <_Z18trained_model_initPFPvjjE+0x1d2>
    }
    else {
       tflTensors[i].data.data = tensorData[i].data;
 801fade:	494f      	ldr	r1, [pc, #316]	; (801fc1c <_Z18trained_model_initPFPvjjE+0x2d0>)
 801fae0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801fae2:	4613      	mov	r3, r2
 801fae4:	005b      	lsls	r3, r3, #1
 801fae6:	4413      	add	r3, r2
 801fae8:	00db      	lsls	r3, r3, #3
 801faea:	440b      	add	r3, r1
 801faec:	3304      	adds	r3, #4
 801faee:	681a      	ldr	r2, [r3, #0]
 801faf0:	4949      	ldr	r1, [pc, #292]	; (801fc18 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801faf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801faf4:	019b      	lsls	r3, r3, #6
 801faf6:	440b      	add	r3, r1
 801faf8:	3304      	adds	r3, #4
 801fafa:	601a      	str	r2, [r3, #0]
       tflEvalTensors[i].data.data = tensorData[i].data;
 801fafc:	4947      	ldr	r1, [pc, #284]	; (801fc1c <_Z18trained_model_initPFPvjjE+0x2d0>)
 801fafe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801fb00:	4613      	mov	r3, r2
 801fb02:	005b      	lsls	r3, r3, #1
 801fb04:	4413      	add	r3, r2
 801fb06:	00db      	lsls	r3, r3, #3
 801fb08:	440b      	add	r3, r1
 801fb0a:	3304      	adds	r3, #4
 801fb0c:	6819      	ldr	r1, [r3, #0]
 801fb0e:	4844      	ldr	r0, [pc, #272]	; (801fc20 <_Z18trained_model_initPFPvjjE+0x2d4>)
 801fb10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801fb12:	4613      	mov	r3, r2
 801fb14:	005b      	lsls	r3, r3, #1
 801fb16:	4413      	add	r3, r2
 801fb18:	009b      	lsls	r3, r3, #2
 801fb1a:	4403      	add	r3, r0
 801fb1c:	6019      	str	r1, [r3, #0]
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
 801fb1e:	4a3e      	ldr	r2, [pc, #248]	; (801fc18 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801fb20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801fb22:	019b      	lsls	r3, r3, #6
 801fb24:	4413      	add	r3, r2
 801fb26:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801fb2a:	493c      	ldr	r1, [pc, #240]	; (801fc1c <_Z18trained_model_initPFPvjjE+0x2d0>)
 801fb2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801fb2e:	4613      	mov	r3, r2
 801fb30:	005b      	lsls	r3, r3, #1
 801fb32:	4413      	add	r3, r2
 801fb34:	00db      	lsls	r3, r3, #3
 801fb36:	440b      	add	r3, r1
 801fb38:	f103 0210 	add.w	r2, r3, #16
 801fb3c:	4603      	mov	r3, r0
 801fb3e:	e892 0003 	ldmia.w	r2, {r0, r1}
 801fb42:	e883 0003 	stmia.w	r3, {r0, r1}
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
 801fb46:	4a34      	ldr	r2, [pc, #208]	; (801fc18 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801fb48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801fb4a:	019b      	lsls	r3, r3, #6
 801fb4c:	4413      	add	r3, r2
 801fb4e:	3330      	adds	r3, #48	; 0x30
 801fb50:	781b      	ldrb	r3, [r3, #0]
 801fb52:	2b01      	cmp	r3, #1
 801fb54:	d11b      	bne.n	801fb8e <_Z18trained_model_initPFPvjjE+0x242>
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
 801fb56:	4931      	ldr	r1, [pc, #196]	; (801fc1c <_Z18trained_model_initPFPvjjE+0x2d0>)
 801fb58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801fb5a:	4613      	mov	r3, r2
 801fb5c:	005b      	lsls	r3, r3, #1
 801fb5e:	4413      	add	r3, r2
 801fb60:	00db      	lsls	r3, r3, #3
 801fb62:	440b      	add	r3, r1
 801fb64:	3314      	adds	r3, #20
 801fb66:	681b      	ldr	r3, [r3, #0]
 801fb68:	637b      	str	r3, [r7, #52]	; 0x34
      tflTensors[i].params.scale = quant->scale->data[0];
 801fb6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801fb6c:	681b      	ldr	r3, [r3, #0]
 801fb6e:	685a      	ldr	r2, [r3, #4]
 801fb70:	4929      	ldr	r1, [pc, #164]	; (801fc18 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801fb72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801fb74:	019b      	lsls	r3, r3, #6
 801fb76:	440b      	add	r3, r1
 801fb78:	330c      	adds	r3, #12
 801fb7a:	601a      	str	r2, [r3, #0]
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
 801fb7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801fb7e:	685b      	ldr	r3, [r3, #4]
 801fb80:	685a      	ldr	r2, [r3, #4]
 801fb82:	4925      	ldr	r1, [pc, #148]	; (801fc18 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801fb84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801fb86:	019b      	lsls	r3, r3, #6
 801fb88:	440b      	add	r3, r1
 801fb8a:	3310      	adds	r3, #16
 801fb8c:	601a      	str	r2, [r3, #0]
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
 801fb8e:	4a22      	ldr	r2, [pc, #136]	; (801fc18 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801fb90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801fb92:	019b      	lsls	r3, r3, #6
 801fb94:	4413      	add	r3, r2
 801fb96:	3314      	adds	r3, #20
 801fb98:	781b      	ldrb	r3, [r3, #0]
 801fb9a:	2b02      	cmp	r3, #2
 801fb9c:	d118      	bne.n	801fbd0 <_Z18trained_model_initPFPvjjE+0x284>
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
 801fb9e:	4a1e      	ldr	r2, [pc, #120]	; (801fc18 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801fba0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801fba2:	019b      	lsls	r3, r3, #6
 801fba4:	4413      	add	r3, r2
 801fba6:	3304      	adds	r3, #4
 801fba8:	6819      	ldr	r1, [r3, #0]
 801fbaa:	481c      	ldr	r0, [pc, #112]	; (801fc1c <_Z18trained_model_initPFPvjjE+0x2d0>)
 801fbac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801fbae:	4613      	mov	r3, r2
 801fbb0:	005b      	lsls	r3, r3, #1
 801fbb2:	4413      	add	r3, r2
 801fbb4:	00db      	lsls	r3, r3, #3
 801fbb6:	4403      	add	r3, r0
 801fbb8:	330c      	adds	r3, #12
 801fbba:	681b      	ldr	r3, [r3, #0]
 801fbbc:	440b      	add	r3, r1
 801fbbe:	633b      	str	r3, [r7, #48]	; 0x30
      if (data_end_ptr > tensor_boundary) {
 801fbc0:	4b0d      	ldr	r3, [pc, #52]	; (801fbf8 <_Z18trained_model_initPFPvjjE+0x2ac>)
 801fbc2:	681b      	ldr	r3, [r3, #0]
 801fbc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801fbc6:	429a      	cmp	r2, r3
 801fbc8:	d902      	bls.n	801fbd0 <_Z18trained_model_initPFPvjjE+0x284>
        tensor_boundary = data_end_ptr;
 801fbca:	4a0b      	ldr	r2, [pc, #44]	; (801fbf8 <_Z18trained_model_initPFPvjjE+0x2ac>)
 801fbcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fbce:	6013      	str	r3, [r2, #0]
  for (size_t i = 0; i < 11; ++i) {
 801fbd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801fbd2:	3301      	adds	r3, #1
 801fbd4:	647b      	str	r3, [r7, #68]	; 0x44
 801fbd6:	e6ef      	b.n	801f9b8 <_Z18trained_model_initPFPvjjE+0x6c>
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
 801fbd8:	4b07      	ldr	r3, [pc, #28]	; (801fbf8 <_Z18trained_model_initPFPvjjE+0x2ac>)
 801fbda:	681a      	ldr	r2, [r3, #0]
 801fbdc:	4b07      	ldr	r3, [pc, #28]	; (801fbfc <_Z18trained_model_initPFPvjjE+0x2b0>)
 801fbde:	681b      	ldr	r3, [r3, #0]
 801fbe0:	429a      	cmp	r2, r3
 801fbe2:	d921      	bls.n	801fc28 <_Z18trained_model_initPFPvjjE+0x2dc>
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
 801fbe4:	480f      	ldr	r0, [pc, #60]	; (801fc24 <_Z18trained_model_initPFPvjjE+0x2d8>)
 801fbe6:	f7e6 fa49 	bl	800607c <_Z9ei_printfPKcz>
    return kTfLiteError;
 801fbea:	2301      	movs	r3, #1
 801fbec:	e0e1      	b.n	801fdb2 <_Z18trained_model_initPFPvjjE+0x466>
 801fbee:	bf00      	nop
 801fbf0:	20001f18 	.word	0x20001f18
 801fbf4:	080293dc 	.word	0x080293dc
 801fbf8:	20001f1c 	.word	0x20001f1c
 801fbfc:	20001f20 	.word	0x20001f20
 801fc00:	20001f24 	.word	0x20001f24
 801fc04:	0801f795 	.word	0x0801f795
 801fc08:	0801f83d 	.word	0x0801f83d
 801fc0c:	0801f8c9 	.word	0x0801f8c9
 801fc10:	0801f901 	.word	0x0801f901
 801fc14:	0801f925 	.word	0x0801f925
 801fc18:	20001f7c 	.word	0x20001f7c
 801fc1c:	20000114 	.word	0x20000114
 801fc20:	2000223c 	.word	0x2000223c
 801fc24:	08029404 	.word	0x08029404
  }
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
 801fc28:	4c64      	ldr	r4, [pc, #400]	; (801fdbc <_Z18trained_model_initPFPvjjE+0x470>)
 801fc2a:	463b      	mov	r3, r7
 801fc2c:	4618      	mov	r0, r3
 801fc2e:	f7fd fe59 	bl	801d8e4 <_ZN6tflite24Register_FULLY_CONNECTEDEv>
 801fc32:	4625      	mov	r5, r4
 801fc34:	463c      	mov	r4, r7
 801fc36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801fc38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801fc3a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801fc3e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  registrations[OP_SOFTMAX] = Register_SOFTMAX();
 801fc42:	4c5e      	ldr	r4, [pc, #376]	; (801fdbc <_Z18trained_model_initPFPvjjE+0x470>)
 801fc44:	463b      	mov	r3, r7
 801fc46:	4618      	mov	r0, r3
 801fc48:	f7fe fc7c 	bl	801e544 <_ZN6tflite16Register_SOFTMAXEv>
 801fc4c:	3420      	adds	r4, #32
 801fc4e:	463d      	mov	r5, r7
 801fc50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801fc52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801fc54:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801fc58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  for (size_t i = 0; i < 4; ++i) {
 801fc5c:	2300      	movs	r3, #0
 801fc5e:	643b      	str	r3, [r7, #64]	; 0x40
 801fc60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801fc62:	2b03      	cmp	r3, #3
 801fc64:	d86f      	bhi.n	801fd46 <_Z18trained_model_initPFPvjjE+0x3fa>
    tflNodes[i].inputs = nodeData[i].inputs;
 801fc66:	4a56      	ldr	r2, [pc, #344]	; (801fdc0 <_Z18trained_model_initPFPvjjE+0x474>)
 801fc68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801fc6a:	011b      	lsls	r3, r3, #4
 801fc6c:	4413      	add	r3, r2
 801fc6e:	6819      	ldr	r1, [r3, #0]
 801fc70:	4854      	ldr	r0, [pc, #336]	; (801fdc4 <_Z18trained_model_initPFPvjjE+0x478>)
 801fc72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801fc74:	4613      	mov	r3, r2
 801fc76:	00db      	lsls	r3, r3, #3
 801fc78:	4413      	add	r3, r2
 801fc7a:	009b      	lsls	r3, r3, #2
 801fc7c:	4403      	add	r3, r0
 801fc7e:	6019      	str	r1, [r3, #0]
    tflNodes[i].outputs = nodeData[i].outputs;
 801fc80:	4a4f      	ldr	r2, [pc, #316]	; (801fdc0 <_Z18trained_model_initPFPvjjE+0x474>)
 801fc82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801fc84:	011b      	lsls	r3, r3, #4
 801fc86:	4413      	add	r3, r2
 801fc88:	3304      	adds	r3, #4
 801fc8a:	6819      	ldr	r1, [r3, #0]
 801fc8c:	484d      	ldr	r0, [pc, #308]	; (801fdc4 <_Z18trained_model_initPFPvjjE+0x478>)
 801fc8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801fc90:	4613      	mov	r3, r2
 801fc92:	00db      	lsls	r3, r3, #3
 801fc94:	4413      	add	r3, r2
 801fc96:	009b      	lsls	r3, r3, #2
 801fc98:	4403      	add	r3, r0
 801fc9a:	3304      	adds	r3, #4
 801fc9c:	6019      	str	r1, [r3, #0]
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
 801fc9e:	4a48      	ldr	r2, [pc, #288]	; (801fdc0 <_Z18trained_model_initPFPvjjE+0x474>)
 801fca0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801fca2:	011b      	lsls	r3, r3, #4
 801fca4:	4413      	add	r3, r2
 801fca6:	3308      	adds	r3, #8
 801fca8:	6819      	ldr	r1, [r3, #0]
 801fcaa:	4846      	ldr	r0, [pc, #280]	; (801fdc4 <_Z18trained_model_initPFPvjjE+0x478>)
 801fcac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801fcae:	4613      	mov	r3, r2
 801fcb0:	00db      	lsls	r3, r3, #3
 801fcb2:	4413      	add	r3, r2
 801fcb4:	009b      	lsls	r3, r3, #2
 801fcb6:	4403      	add	r3, r0
 801fcb8:	3314      	adds	r3, #20
 801fcba:	6019      	str	r1, [r3, #0]
tflNodes[i].custom_initial_data = nullptr;
 801fcbc:	4941      	ldr	r1, [pc, #260]	; (801fdc4 <_Z18trained_model_initPFPvjjE+0x478>)
 801fcbe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801fcc0:	4613      	mov	r3, r2
 801fcc2:	00db      	lsls	r3, r3, #3
 801fcc4:	4413      	add	r3, r2
 801fcc6:	009b      	lsls	r3, r3, #2
 801fcc8:	440b      	add	r3, r1
 801fcca:	3318      	adds	r3, #24
 801fccc:	2200      	movs	r2, #0
 801fcce:	601a      	str	r2, [r3, #0]
      tflNodes[i].custom_initial_data_size = 0;
 801fcd0:	493c      	ldr	r1, [pc, #240]	; (801fdc4 <_Z18trained_model_initPFPvjjE+0x478>)
 801fcd2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801fcd4:	4613      	mov	r3, r2
 801fcd6:	00db      	lsls	r3, r3, #3
 801fcd8:	4413      	add	r3, r2
 801fcda:	009b      	lsls	r3, r3, #2
 801fcdc:	440b      	add	r3, r1
 801fcde:	331c      	adds	r3, #28
 801fce0:	2200      	movs	r2, #0
 801fce2:	601a      	str	r2, [r3, #0]
if (registrations[nodeData[i].used_op_index].init) {
 801fce4:	4a36      	ldr	r2, [pc, #216]	; (801fdc0 <_Z18trained_model_initPFPvjjE+0x474>)
 801fce6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801fce8:	011b      	lsls	r3, r3, #4
 801fcea:	4413      	add	r3, r2
 801fcec:	330c      	adds	r3, #12
 801fcee:	781b      	ldrb	r3, [r3, #0]
 801fcf0:	4a32      	ldr	r2, [pc, #200]	; (801fdbc <_Z18trained_model_initPFPvjjE+0x470>)
 801fcf2:	015b      	lsls	r3, r3, #5
 801fcf4:	4413      	add	r3, r2
 801fcf6:	681b      	ldr	r3, [r3, #0]
 801fcf8:	2b00      	cmp	r3, #0
 801fcfa:	d020      	beq.n	801fd3e <_Z18trained_model_initPFPvjjE+0x3f2>
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
 801fcfc:	4a30      	ldr	r2, [pc, #192]	; (801fdc0 <_Z18trained_model_initPFPvjjE+0x474>)
 801fcfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801fd00:	011b      	lsls	r3, r3, #4
 801fd02:	4413      	add	r3, r2
 801fd04:	330c      	adds	r3, #12
 801fd06:	781b      	ldrb	r3, [r3, #0]
 801fd08:	4a2c      	ldr	r2, [pc, #176]	; (801fdbc <_Z18trained_model_initPFPvjjE+0x470>)
 801fd0a:	015b      	lsls	r3, r3, #5
 801fd0c:	4413      	add	r3, r2
 801fd0e:	681c      	ldr	r4, [r3, #0]
 801fd10:	492c      	ldr	r1, [pc, #176]	; (801fdc4 <_Z18trained_model_initPFPvjjE+0x478>)
 801fd12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801fd14:	4613      	mov	r3, r2
 801fd16:	00db      	lsls	r3, r3, #3
 801fd18:	4413      	add	r3, r2
 801fd1a:	009b      	lsls	r3, r3, #2
 801fd1c:	440b      	add	r3, r1
 801fd1e:	3314      	adds	r3, #20
 801fd20:	681b      	ldr	r3, [r3, #0]
 801fd22:	2200      	movs	r2, #0
 801fd24:	4619      	mov	r1, r3
 801fd26:	4828      	ldr	r0, [pc, #160]	; (801fdc8 <_Z18trained_model_initPFPvjjE+0x47c>)
 801fd28:	47a0      	blx	r4
 801fd2a:	4601      	mov	r1, r0
 801fd2c:	4825      	ldr	r0, [pc, #148]	; (801fdc4 <_Z18trained_model_initPFPvjjE+0x478>)
 801fd2e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801fd30:	4613      	mov	r3, r2
 801fd32:	00db      	lsls	r3, r3, #3
 801fd34:	4413      	add	r3, r2
 801fd36:	009b      	lsls	r3, r3, #2
 801fd38:	4403      	add	r3, r0
 801fd3a:	3310      	adds	r3, #16
 801fd3c:	6019      	str	r1, [r3, #0]
  for (size_t i = 0; i < 4; ++i) {
 801fd3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801fd40:	3301      	adds	r3, #1
 801fd42:	643b      	str	r3, [r7, #64]	; 0x40
 801fd44:	e78c      	b.n	801fc60 <_Z18trained_model_initPFPvjjE+0x314>
    }
  }
  for (size_t i = 0; i < 4; ++i) {
 801fd46:	2300      	movs	r3, #0
 801fd48:	63fb      	str	r3, [r7, #60]	; 0x3c
 801fd4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801fd4c:	2b03      	cmp	r3, #3
 801fd4e:	d82f      	bhi.n	801fdb0 <_Z18trained_model_initPFPvjjE+0x464>
    if (registrations[nodeData[i].used_op_index].prepare) {
 801fd50:	4a1b      	ldr	r2, [pc, #108]	; (801fdc0 <_Z18trained_model_initPFPvjjE+0x474>)
 801fd52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801fd54:	011b      	lsls	r3, r3, #4
 801fd56:	4413      	add	r3, r2
 801fd58:	330c      	adds	r3, #12
 801fd5a:	781b      	ldrb	r3, [r3, #0]
 801fd5c:	4a17      	ldr	r2, [pc, #92]	; (801fdbc <_Z18trained_model_initPFPvjjE+0x470>)
 801fd5e:	015b      	lsls	r3, r3, #5
 801fd60:	4413      	add	r3, r2
 801fd62:	3308      	adds	r3, #8
 801fd64:	681b      	ldr	r3, [r3, #0]
 801fd66:	2b00      	cmp	r3, #0
 801fd68:	d01e      	beq.n	801fda8 <_Z18trained_model_initPFPvjjE+0x45c>
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
 801fd6a:	4a15      	ldr	r2, [pc, #84]	; (801fdc0 <_Z18trained_model_initPFPvjjE+0x474>)
 801fd6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801fd6e:	011b      	lsls	r3, r3, #4
 801fd70:	4413      	add	r3, r2
 801fd72:	330c      	adds	r3, #12
 801fd74:	781b      	ldrb	r3, [r3, #0]
 801fd76:	4a11      	ldr	r2, [pc, #68]	; (801fdbc <_Z18trained_model_initPFPvjjE+0x470>)
 801fd78:	015b      	lsls	r3, r3, #5
 801fd7a:	4413      	add	r3, r2
 801fd7c:	3308      	adds	r3, #8
 801fd7e:	681c      	ldr	r4, [r3, #0]
 801fd80:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801fd82:	4613      	mov	r3, r2
 801fd84:	00db      	lsls	r3, r3, #3
 801fd86:	4413      	add	r3, r2
 801fd88:	009b      	lsls	r3, r3, #2
 801fd8a:	4a0e      	ldr	r2, [pc, #56]	; (801fdc4 <_Z18trained_model_initPFPvjjE+0x478>)
 801fd8c:	4413      	add	r3, r2
 801fd8e:	4619      	mov	r1, r3
 801fd90:	480d      	ldr	r0, [pc, #52]	; (801fdc8 <_Z18trained_model_initPFPvjjE+0x47c>)
 801fd92:	47a0      	blx	r4
 801fd94:	4603      	mov	r3, r0
 801fd96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      if (status != kTfLiteOk) {
 801fd9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801fd9e:	2b00      	cmp	r3, #0
 801fda0:	d002      	beq.n	801fda8 <_Z18trained_model_initPFPvjjE+0x45c>
        return status;
 801fda2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801fda6:	e004      	b.n	801fdb2 <_Z18trained_model_initPFPvjjE+0x466>
  for (size_t i = 0; i < 4; ++i) {
 801fda8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801fdaa:	3301      	adds	r3, #1
 801fdac:	63fb      	str	r3, [r7, #60]	; 0x3c
 801fdae:	e7cc      	b.n	801fd4a <_Z18trained_model_initPFPvjjE+0x3fe>
      }
    }
  }
  return kTfLiteOk;
 801fdb0:	2300      	movs	r3, #0
}
 801fdb2:	4618      	mov	r0, r3
 801fdb4:	3748      	adds	r7, #72	; 0x48
 801fdb6:	46bd      	mov	sp, r7
 801fdb8:	bdb0      	pop	{r4, r5, r7, pc}
 801fdba:	bf00      	nop
 801fdbc:	200022c0 	.word	0x200022c0
 801fdc0:	08029d10 	.word	0x08029d10
 801fdc4:	20002300 	.word	0x20002300
 801fdc8:	20001f24 	.word	0x20001f24

0801fdcc <_Z19trained_model_inputi>:

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
 801fdcc:	b480      	push	{r7}
 801fdce:	b083      	sub	sp, #12
 801fdd0:	af00      	add	r7, sp, #0
 801fdd2:	6078      	str	r0, [r7, #4]
  return &ctx.tensors[inTensorIndices[index]];
 801fdd4:	4b05      	ldr	r3, [pc, #20]	; (801fdec <_Z19trained_model_inputi+0x20>)
 801fdd6:	689a      	ldr	r2, [r3, #8]
 801fdd8:	2300      	movs	r3, #0
 801fdda:	019b      	lsls	r3, r3, #6
 801fddc:	4413      	add	r3, r2
}
 801fdde:	4618      	mov	r0, r3
 801fde0:	370c      	adds	r7, #12
 801fde2:	46bd      	mov	sp, r7
 801fde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fde8:	4770      	bx	lr
 801fdea:	bf00      	nop
 801fdec:	20001f24 	.word	0x20001f24

0801fdf0 <_Z20trained_model_outputi>:

static const int outTensorIndices[] = {
  10, 
};
TfLiteTensor* trained_model_output(int index) {
 801fdf0:	b480      	push	{r7}
 801fdf2:	b083      	sub	sp, #12
 801fdf4:	af00      	add	r7, sp, #0
 801fdf6:	6078      	str	r0, [r7, #4]
  return &ctx.tensors[outTensorIndices[index]];
 801fdf8:	4b05      	ldr	r3, [pc, #20]	; (801fe10 <_Z20trained_model_outputi+0x20>)
 801fdfa:	689a      	ldr	r2, [r3, #8]
 801fdfc:	230a      	movs	r3, #10
 801fdfe:	019b      	lsls	r3, r3, #6
 801fe00:	4413      	add	r3, r2
}
 801fe02:	4618      	mov	r0, r3
 801fe04:	370c      	adds	r7, #12
 801fe06:	46bd      	mov	sp, r7
 801fe08:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe0c:	4770      	bx	lr
 801fe0e:	bf00      	nop
 801fe10:	20001f24 	.word	0x20001f24

0801fe14 <_Z20trained_model_invokev>:

TfLiteStatus trained_model_invoke() {
 801fe14:	b590      	push	{r4, r7, lr}
 801fe16:	b083      	sub	sp, #12
 801fe18:	af00      	add	r7, sp, #0
  for (size_t i = 0; i < 4; ++i) {
 801fe1a:	2300      	movs	r3, #0
 801fe1c:	607b      	str	r3, [r7, #4]
 801fe1e:	687b      	ldr	r3, [r7, #4]
 801fe20:	2b03      	cmp	r3, #3
 801fe22:	d81f      	bhi.n	801fe64 <_Z20trained_model_invokev+0x50>
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);
 801fe24:	4a12      	ldr	r2, [pc, #72]	; (801fe70 <_Z20trained_model_invokev+0x5c>)
 801fe26:	687b      	ldr	r3, [r7, #4]
 801fe28:	011b      	lsls	r3, r3, #4
 801fe2a:	4413      	add	r3, r2
 801fe2c:	330c      	adds	r3, #12
 801fe2e:	781b      	ldrb	r3, [r3, #0]
 801fe30:	4a10      	ldr	r2, [pc, #64]	; (801fe74 <_Z20trained_model_invokev+0x60>)
 801fe32:	015b      	lsls	r3, r3, #5
 801fe34:	4413      	add	r3, r2
 801fe36:	330c      	adds	r3, #12
 801fe38:	681c      	ldr	r4, [r3, #0]
 801fe3a:	687a      	ldr	r2, [r7, #4]
 801fe3c:	4613      	mov	r3, r2
 801fe3e:	00db      	lsls	r3, r3, #3
 801fe40:	4413      	add	r3, r2
 801fe42:	009b      	lsls	r3, r3, #2
 801fe44:	4a0c      	ldr	r2, [pc, #48]	; (801fe78 <_Z20trained_model_invokev+0x64>)
 801fe46:	4413      	add	r3, r2
 801fe48:	4619      	mov	r1, r3
 801fe4a:	480c      	ldr	r0, [pc, #48]	; (801fe7c <_Z20trained_model_invokev+0x68>)
 801fe4c:	47a0      	blx	r4
 801fe4e:	4603      	mov	r3, r0
 801fe50:	70fb      	strb	r3, [r7, #3]
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
 801fe52:	78fb      	ldrb	r3, [r7, #3]
 801fe54:	2b00      	cmp	r3, #0
 801fe56:	d001      	beq.n	801fe5c <_Z20trained_model_invokev+0x48>
      return status;
 801fe58:	78fb      	ldrb	r3, [r7, #3]
 801fe5a:	e004      	b.n	801fe66 <_Z20trained_model_invokev+0x52>
  for (size_t i = 0; i < 4; ++i) {
 801fe5c:	687b      	ldr	r3, [r7, #4]
 801fe5e:	3301      	adds	r3, #1
 801fe60:	607b      	str	r3, [r7, #4]
 801fe62:	e7dc      	b.n	801fe1e <_Z20trained_model_invokev+0xa>
    }
  }
  return kTfLiteOk;
 801fe64:	2300      	movs	r3, #0
}
 801fe66:	4618      	mov	r0, r3
 801fe68:	370c      	adds	r7, #12
 801fe6a:	46bd      	mov	sp, r7
 801fe6c:	bd90      	pop	{r4, r7, pc}
 801fe6e:	bf00      	nop
 801fe70:	08029d10 	.word	0x08029d10
 801fe74:	200022c0 	.word	0x200022c0
 801fe78:	20002300 	.word	0x20002300
 801fe7c:	20001f24 	.word	0x20001f24

0801fe80 <_Z19trained_model_resetPFvPvE>:

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
 801fe80:	b580      	push	{r7, lr}
 801fe82:	b084      	sub	sp, #16
 801fe84:	af00      	add	r7, sp, #0
 801fe86:	6078      	str	r0, [r7, #4]
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
 801fe88:	4b10      	ldr	r3, [pc, #64]	; (801fecc <_Z19trained_model_resetPFvPvE+0x4c>)
 801fe8a:	681a      	ldr	r2, [r3, #0]
 801fe8c:	687b      	ldr	r3, [r7, #4]
 801fe8e:	4610      	mov	r0, r2
 801fe90:	4798      	blx	r3
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;
 801fe92:	4b0f      	ldr	r3, [pc, #60]	; (801fed0 <_Z19trained_model_resetPFvPvE+0x50>)
 801fe94:	2200      	movs	r2, #0
 801fe96:	601a      	str	r2, [r3, #0]

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
 801fe98:	2300      	movs	r3, #0
 801fe9a:	60fb      	str	r3, [r7, #12]
 801fe9c:	4b0d      	ldr	r3, [pc, #52]	; (801fed4 <_Z19trained_model_resetPFvPvE+0x54>)
 801fe9e:	681b      	ldr	r3, [r3, #0]
 801fea0:	68fa      	ldr	r2, [r7, #12]
 801fea2:	429a      	cmp	r2, r3
 801fea4:	d20a      	bcs.n	801febc <_Z19trained_model_resetPFvPvE+0x3c>
    ei_free(overflow_buffers[ix]);
 801fea6:	4a0c      	ldr	r2, [pc, #48]	; (801fed8 <_Z19trained_model_resetPFvPvE+0x58>)
 801fea8:	68fb      	ldr	r3, [r7, #12]
 801feaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801feae:	4618      	mov	r0, r3
 801feb0:	f7fa fec4 	bl	801ac3c <_Z7ei_freePv>
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
 801feb4:	68fb      	ldr	r3, [r7, #12]
 801feb6:	3301      	adds	r3, #1
 801feb8:	60fb      	str	r3, [r7, #12]
 801feba:	e7ef      	b.n	801fe9c <_Z19trained_model_resetPFvPvE+0x1c>
  }
  overflow_buffers_ix = 0;
 801febc:	4b05      	ldr	r3, [pc, #20]	; (801fed4 <_Z19trained_model_resetPFvPvE+0x54>)
 801febe:	2200      	movs	r2, #0
 801fec0:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 801fec2:	2300      	movs	r3, #0
}
 801fec4:	4618      	mov	r0, r3
 801fec6:	3710      	adds	r7, #16
 801fec8:	46bd      	mov	sp, r7
 801feca:	bd80      	pop	{r7, pc}
 801fecc:	20001f18 	.word	0x20001f18
 801fed0:	200023dc 	.word	0x200023dc
 801fed4:	200023b8 	.word	0x200023b8
 801fed8:	20002390 	.word	0x20002390

0801fedc <_Z41__static_initialization_and_destruction_0ii>:
 801fedc:	b480      	push	{r7}
 801fede:	b083      	sub	sp, #12
 801fee0:	af00      	add	r7, sp, #0
 801fee2:	6078      	str	r0, [r7, #4]
 801fee4:	6039      	str	r1, [r7, #0]
 801fee6:	687b      	ldr	r3, [r7, #4]
 801fee8:	2b01      	cmp	r3, #1
 801feea:	d11e      	bne.n	801ff2a <_Z41__static_initialization_and_destruction_0ii+0x4e>
 801feec:	683b      	ldr	r3, [r7, #0]
 801feee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801fef2:	4293      	cmp	r3, r2
 801fef4:	d119      	bne.n	801ff2a <_Z41__static_initialization_and_destruction_0ii+0x4e>
};const NodeInfo_t nodeData[] = {
 801fef6:	4b10      	ldr	r3, [pc, #64]	; (801ff38 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 801fef8:	681b      	ldr	r3, [r3, #0]
 801fefa:	4a10      	ldr	r2, [pc, #64]	; (801ff3c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 801fefc:	6053      	str	r3, [r2, #4]
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 48, (TfLiteIntArray*)&tensor_dimension7, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
 801fefe:	4b0e      	ldr	r3, [pc, #56]	; (801ff38 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 801ff00:	681b      	ldr	r3, [r3, #0]
 801ff02:	3330      	adds	r3, #48	; 0x30
};const NodeInfo_t nodeData[] = {
 801ff04:	4a0d      	ldr	r2, [pc, #52]	; (801ff3c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 801ff06:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
 801ff0a:	4b0b      	ldr	r3, [pc, #44]	; (801ff38 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 801ff0c:	681b      	ldr	r3, [r3, #0]
 801ff0e:	4a0b      	ldr	r2, [pc, #44]	; (801ff3c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 801ff10:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16, (TfLiteIntArray*)&tensor_dimension9, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
 801ff14:	4b08      	ldr	r3, [pc, #32]	; (801ff38 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 801ff16:	681b      	ldr	r3, [r3, #0]
 801ff18:	3310      	adds	r3, #16
};const NodeInfo_t nodeData[] = {
 801ff1a:	4a08      	ldr	r2, [pc, #32]	; (801ff3c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 801ff1c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 801ff20:	4b05      	ldr	r3, [pc, #20]	; (801ff38 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 801ff22:	681b      	ldr	r3, [r3, #0]
 801ff24:	4a05      	ldr	r2, [pc, #20]	; (801ff3c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 801ff26:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
}
 801ff2a:	bf00      	nop
 801ff2c:	370c      	adds	r7, #12
 801ff2e:	46bd      	mov	sp, r7
 801ff30:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ff34:	4770      	bx	lr
 801ff36:	bf00      	nop
 801ff38:	20001f18 	.word	0x20001f18
 801ff3c:	20000114 	.word	0x20000114

0801ff40 <_GLOBAL__sub_I__Z18trained_model_initPFPvjjE>:
 801ff40:	b580      	push	{r7, lr}
 801ff42:	af00      	add	r7, sp, #0
 801ff44:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801ff48:	2001      	movs	r0, #1
 801ff4a:	f7ff ffc7 	bl	801fedc <_Z41__static_initialization_and_destruction_0ii>
 801ff4e:	bd80      	pop	{r7, pc}

0801ff50 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801ff50:	b580      	push	{r7, lr}
 801ff52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801ff54:	2200      	movs	r2, #0
 801ff56:	4912      	ldr	r1, [pc, #72]	; (801ffa0 <MX_USB_DEVICE_Init+0x50>)
 801ff58:	4812      	ldr	r0, [pc, #72]	; (801ffa4 <MX_USB_DEVICE_Init+0x54>)
 801ff5a:	f7ee fb35 	bl	800e5c8 <USBD_Init>
 801ff5e:	4603      	mov	r3, r0
 801ff60:	2b00      	cmp	r3, #0
 801ff62:	d001      	beq.n	801ff68 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801ff64:	f7e6 fb40 	bl	80065e8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801ff68:	490f      	ldr	r1, [pc, #60]	; (801ffa8 <MX_USB_DEVICE_Init+0x58>)
 801ff6a:	480e      	ldr	r0, [pc, #56]	; (801ffa4 <MX_USB_DEVICE_Init+0x54>)
 801ff6c:	f7ee fb5c 	bl	800e628 <USBD_RegisterClass>
 801ff70:	4603      	mov	r3, r0
 801ff72:	2b00      	cmp	r3, #0
 801ff74:	d001      	beq.n	801ff7a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801ff76:	f7e6 fb37 	bl	80065e8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801ff7a:	490c      	ldr	r1, [pc, #48]	; (801ffac <MX_USB_DEVICE_Init+0x5c>)
 801ff7c:	4809      	ldr	r0, [pc, #36]	; (801ffa4 <MX_USB_DEVICE_Init+0x54>)
 801ff7e:	f7ee fa4d 	bl	800e41c <USBD_CDC_RegisterInterface>
 801ff82:	4603      	mov	r3, r0
 801ff84:	2b00      	cmp	r3, #0
 801ff86:	d001      	beq.n	801ff8c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801ff88:	f7e6 fb2e 	bl	80065e8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801ff8c:	4805      	ldr	r0, [pc, #20]	; (801ffa4 <MX_USB_DEVICE_Init+0x54>)
 801ff8e:	f7ee fb81 	bl	800e694 <USBD_Start>
 801ff92:	4603      	mov	r3, r0
 801ff94:	2b00      	cmp	r3, #0
 801ff96:	d001      	beq.n	801ff9c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801ff98:	f7e6 fb26 	bl	80065e8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801ff9c:	bf00      	nop
 801ff9e:	bd80      	pop	{r7, pc}
 801ffa0:	20000230 	.word	0x20000230
 801ffa4:	200023e0 	.word	0x200023e0
 801ffa8:	20000088 	.word	0x20000088
 801ffac:	2000021c 	.word	0x2000021c

0801ffb0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801ffb0:	b580      	push	{r7, lr}
 801ffb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801ffb4:	2200      	movs	r2, #0
 801ffb6:	4905      	ldr	r1, [pc, #20]	; (801ffcc <CDC_Init_FS+0x1c>)
 801ffb8:	4805      	ldr	r0, [pc, #20]	; (801ffd0 <CDC_Init_FS+0x20>)
 801ffba:	f7ee fa49 	bl	800e450 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801ffbe:	4905      	ldr	r1, [pc, #20]	; (801ffd4 <CDC_Init_FS+0x24>)
 801ffc0:	4803      	ldr	r0, [pc, #12]	; (801ffd0 <CDC_Init_FS+0x20>)
 801ffc2:	f7ee fa67 	bl	800e494 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801ffc6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801ffc8:	4618      	mov	r0, r3
 801ffca:	bd80      	pop	{r7, pc}
 801ffcc:	20002ebc 	.word	0x20002ebc
 801ffd0:	200023e0 	.word	0x200023e0
 801ffd4:	200026bc 	.word	0x200026bc

0801ffd8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801ffd8:	b480      	push	{r7}
 801ffda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801ffdc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801ffde:	4618      	mov	r0, r3
 801ffe0:	46bd      	mov	sp, r7
 801ffe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ffe6:	4770      	bx	lr

0801ffe8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801ffe8:	b480      	push	{r7}
 801ffea:	b083      	sub	sp, #12
 801ffec:	af00      	add	r7, sp, #0
 801ffee:	4603      	mov	r3, r0
 801fff0:	6039      	str	r1, [r7, #0]
 801fff2:	71fb      	strb	r3, [r7, #7]
 801fff4:	4613      	mov	r3, r2
 801fff6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801fff8:	79fb      	ldrb	r3, [r7, #7]
 801fffa:	2b23      	cmp	r3, #35	; 0x23
 801fffc:	d84a      	bhi.n	8020094 <CDC_Control_FS+0xac>
 801fffe:	a201      	add	r2, pc, #4	; (adr r2, 8020004 <CDC_Control_FS+0x1c>)
 8020000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020004:	08020095 	.word	0x08020095
 8020008:	08020095 	.word	0x08020095
 802000c:	08020095 	.word	0x08020095
 8020010:	08020095 	.word	0x08020095
 8020014:	08020095 	.word	0x08020095
 8020018:	08020095 	.word	0x08020095
 802001c:	08020095 	.word	0x08020095
 8020020:	08020095 	.word	0x08020095
 8020024:	08020095 	.word	0x08020095
 8020028:	08020095 	.word	0x08020095
 802002c:	08020095 	.word	0x08020095
 8020030:	08020095 	.word	0x08020095
 8020034:	08020095 	.word	0x08020095
 8020038:	08020095 	.word	0x08020095
 802003c:	08020095 	.word	0x08020095
 8020040:	08020095 	.word	0x08020095
 8020044:	08020095 	.word	0x08020095
 8020048:	08020095 	.word	0x08020095
 802004c:	08020095 	.word	0x08020095
 8020050:	08020095 	.word	0x08020095
 8020054:	08020095 	.word	0x08020095
 8020058:	08020095 	.word	0x08020095
 802005c:	08020095 	.word	0x08020095
 8020060:	08020095 	.word	0x08020095
 8020064:	08020095 	.word	0x08020095
 8020068:	08020095 	.word	0x08020095
 802006c:	08020095 	.word	0x08020095
 8020070:	08020095 	.word	0x08020095
 8020074:	08020095 	.word	0x08020095
 8020078:	08020095 	.word	0x08020095
 802007c:	08020095 	.word	0x08020095
 8020080:	08020095 	.word	0x08020095
 8020084:	08020095 	.word	0x08020095
 8020088:	08020095 	.word	0x08020095
 802008c:	08020095 	.word	0x08020095
 8020090:	08020095 	.word	0x08020095
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8020094:	bf00      	nop
  }

  return (USBD_OK);
 8020096:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8020098:	4618      	mov	r0, r3
 802009a:	370c      	adds	r7, #12
 802009c:	46bd      	mov	sp, r7
 802009e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80200a2:	4770      	bx	lr

080200a4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80200a4:	b580      	push	{r7, lr}
 80200a6:	b082      	sub	sp, #8
 80200a8:	af00      	add	r7, sp, #0
 80200aa:	6078      	str	r0, [r7, #4]
 80200ac:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80200ae:	6879      	ldr	r1, [r7, #4]
 80200b0:	4805      	ldr	r0, [pc, #20]	; (80200c8 <CDC_Receive_FS+0x24>)
 80200b2:	f7ee f9ef 	bl	800e494 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80200b6:	4804      	ldr	r0, [pc, #16]	; (80200c8 <CDC_Receive_FS+0x24>)
 80200b8:	f7ee fa50 	bl	800e55c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80200bc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80200be:	4618      	mov	r0, r3
 80200c0:	3708      	adds	r7, #8
 80200c2:	46bd      	mov	sp, r7
 80200c4:	bd80      	pop	{r7, pc}
 80200c6:	bf00      	nop
 80200c8:	200023e0 	.word	0x200023e0

080200cc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80200cc:	b580      	push	{r7, lr}
 80200ce:	b084      	sub	sp, #16
 80200d0:	af00      	add	r7, sp, #0
 80200d2:	6078      	str	r0, [r7, #4]
 80200d4:	460b      	mov	r3, r1
 80200d6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80200d8:	2300      	movs	r3, #0
 80200da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80200dc:	4b0d      	ldr	r3, [pc, #52]	; (8020114 <CDC_Transmit_FS+0x48>)
 80200de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80200e2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80200e4:	68bb      	ldr	r3, [r7, #8]
 80200e6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80200ea:	2b00      	cmp	r3, #0
 80200ec:	d001      	beq.n	80200f2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80200ee:	2301      	movs	r3, #1
 80200f0:	e00b      	b.n	802010a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80200f2:	887b      	ldrh	r3, [r7, #2]
 80200f4:	461a      	mov	r2, r3
 80200f6:	6879      	ldr	r1, [r7, #4]
 80200f8:	4806      	ldr	r0, [pc, #24]	; (8020114 <CDC_Transmit_FS+0x48>)
 80200fa:	f7ee f9a9 	bl	800e450 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80200fe:	4805      	ldr	r0, [pc, #20]	; (8020114 <CDC_Transmit_FS+0x48>)
 8020100:	f7ee f9e6 	bl	800e4d0 <USBD_CDC_TransmitPacket>
 8020104:	4603      	mov	r3, r0
 8020106:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8020108:	7bfb      	ldrb	r3, [r7, #15]
}
 802010a:	4618      	mov	r0, r3
 802010c:	3710      	adds	r7, #16
 802010e:	46bd      	mov	sp, r7
 8020110:	bd80      	pop	{r7, pc}
 8020112:	bf00      	nop
 8020114:	200023e0 	.word	0x200023e0

08020118 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8020118:	b480      	push	{r7}
 802011a:	b087      	sub	sp, #28
 802011c:	af00      	add	r7, sp, #0
 802011e:	60f8      	str	r0, [r7, #12]
 8020120:	60b9      	str	r1, [r7, #8]
 8020122:	4613      	mov	r3, r2
 8020124:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8020126:	2300      	movs	r3, #0
 8020128:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 802012a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 802012e:	4618      	mov	r0, r3
 8020130:	371c      	adds	r7, #28
 8020132:	46bd      	mov	sp, r7
 8020134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020138:	4770      	bx	lr
	...

0802013c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 802013c:	b480      	push	{r7}
 802013e:	b083      	sub	sp, #12
 8020140:	af00      	add	r7, sp, #0
 8020142:	4603      	mov	r3, r0
 8020144:	6039      	str	r1, [r7, #0]
 8020146:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8020148:	683b      	ldr	r3, [r7, #0]
 802014a:	2212      	movs	r2, #18
 802014c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 802014e:	4b03      	ldr	r3, [pc, #12]	; (802015c <USBD_FS_DeviceDescriptor+0x20>)
}
 8020150:	4618      	mov	r0, r3
 8020152:	370c      	adds	r7, #12
 8020154:	46bd      	mov	sp, r7
 8020156:	f85d 7b04 	ldr.w	r7, [sp], #4
 802015a:	4770      	bx	lr
 802015c:	2000024c 	.word	0x2000024c

08020160 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8020160:	b480      	push	{r7}
 8020162:	b083      	sub	sp, #12
 8020164:	af00      	add	r7, sp, #0
 8020166:	4603      	mov	r3, r0
 8020168:	6039      	str	r1, [r7, #0]
 802016a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 802016c:	683b      	ldr	r3, [r7, #0]
 802016e:	2204      	movs	r2, #4
 8020170:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8020172:	4b03      	ldr	r3, [pc, #12]	; (8020180 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8020174:	4618      	mov	r0, r3
 8020176:	370c      	adds	r7, #12
 8020178:	46bd      	mov	sp, r7
 802017a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802017e:	4770      	bx	lr
 8020180:	20000260 	.word	0x20000260

08020184 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8020184:	b580      	push	{r7, lr}
 8020186:	b082      	sub	sp, #8
 8020188:	af00      	add	r7, sp, #0
 802018a:	4603      	mov	r3, r0
 802018c:	6039      	str	r1, [r7, #0]
 802018e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8020190:	79fb      	ldrb	r3, [r7, #7]
 8020192:	2b00      	cmp	r3, #0
 8020194:	d105      	bne.n	80201a2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8020196:	683a      	ldr	r2, [r7, #0]
 8020198:	4907      	ldr	r1, [pc, #28]	; (80201b8 <USBD_FS_ProductStrDescriptor+0x34>)
 802019a:	4808      	ldr	r0, [pc, #32]	; (80201bc <USBD_FS_ProductStrDescriptor+0x38>)
 802019c:	f7ef fc26 	bl	800f9ec <USBD_GetString>
 80201a0:	e004      	b.n	80201ac <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80201a2:	683a      	ldr	r2, [r7, #0]
 80201a4:	4904      	ldr	r1, [pc, #16]	; (80201b8 <USBD_FS_ProductStrDescriptor+0x34>)
 80201a6:	4805      	ldr	r0, [pc, #20]	; (80201bc <USBD_FS_ProductStrDescriptor+0x38>)
 80201a8:	f7ef fc20 	bl	800f9ec <USBD_GetString>
  }
  return USBD_StrDesc;
 80201ac:	4b02      	ldr	r3, [pc, #8]	; (80201b8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80201ae:	4618      	mov	r0, r3
 80201b0:	3708      	adds	r7, #8
 80201b2:	46bd      	mov	sp, r7
 80201b4:	bd80      	pop	{r7, pc}
 80201b6:	bf00      	nop
 80201b8:	200036bc 	.word	0x200036bc
 80201bc:	08029458 	.word	0x08029458

080201c0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80201c0:	b580      	push	{r7, lr}
 80201c2:	b082      	sub	sp, #8
 80201c4:	af00      	add	r7, sp, #0
 80201c6:	4603      	mov	r3, r0
 80201c8:	6039      	str	r1, [r7, #0]
 80201ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80201cc:	683a      	ldr	r2, [r7, #0]
 80201ce:	4904      	ldr	r1, [pc, #16]	; (80201e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80201d0:	4804      	ldr	r0, [pc, #16]	; (80201e4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80201d2:	f7ef fc0b 	bl	800f9ec <USBD_GetString>
  return USBD_StrDesc;
 80201d6:	4b02      	ldr	r3, [pc, #8]	; (80201e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80201d8:	4618      	mov	r0, r3
 80201da:	3708      	adds	r7, #8
 80201dc:	46bd      	mov	sp, r7
 80201de:	bd80      	pop	{r7, pc}
 80201e0:	200036bc 	.word	0x200036bc
 80201e4:	08029470 	.word	0x08029470

080201e8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80201e8:	b580      	push	{r7, lr}
 80201ea:	b082      	sub	sp, #8
 80201ec:	af00      	add	r7, sp, #0
 80201ee:	4603      	mov	r3, r0
 80201f0:	6039      	str	r1, [r7, #0]
 80201f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80201f4:	683b      	ldr	r3, [r7, #0]
 80201f6:	221a      	movs	r2, #26
 80201f8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80201fa:	f000 f843 	bl	8020284 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80201fe:	4b02      	ldr	r3, [pc, #8]	; (8020208 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8020200:	4618      	mov	r0, r3
 8020202:	3708      	adds	r7, #8
 8020204:	46bd      	mov	sp, r7
 8020206:	bd80      	pop	{r7, pc}
 8020208:	20000264 	.word	0x20000264

0802020c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 802020c:	b580      	push	{r7, lr}
 802020e:	b082      	sub	sp, #8
 8020210:	af00      	add	r7, sp, #0
 8020212:	4603      	mov	r3, r0
 8020214:	6039      	str	r1, [r7, #0]
 8020216:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8020218:	79fb      	ldrb	r3, [r7, #7]
 802021a:	2b00      	cmp	r3, #0
 802021c:	d105      	bne.n	802022a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 802021e:	683a      	ldr	r2, [r7, #0]
 8020220:	4907      	ldr	r1, [pc, #28]	; (8020240 <USBD_FS_ConfigStrDescriptor+0x34>)
 8020222:	4808      	ldr	r0, [pc, #32]	; (8020244 <USBD_FS_ConfigStrDescriptor+0x38>)
 8020224:	f7ef fbe2 	bl	800f9ec <USBD_GetString>
 8020228:	e004      	b.n	8020234 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 802022a:	683a      	ldr	r2, [r7, #0]
 802022c:	4904      	ldr	r1, [pc, #16]	; (8020240 <USBD_FS_ConfigStrDescriptor+0x34>)
 802022e:	4805      	ldr	r0, [pc, #20]	; (8020244 <USBD_FS_ConfigStrDescriptor+0x38>)
 8020230:	f7ef fbdc 	bl	800f9ec <USBD_GetString>
  }
  return USBD_StrDesc;
 8020234:	4b02      	ldr	r3, [pc, #8]	; (8020240 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8020236:	4618      	mov	r0, r3
 8020238:	3708      	adds	r7, #8
 802023a:	46bd      	mov	sp, r7
 802023c:	bd80      	pop	{r7, pc}
 802023e:	bf00      	nop
 8020240:	200036bc 	.word	0x200036bc
 8020244:	08029484 	.word	0x08029484

08020248 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8020248:	b580      	push	{r7, lr}
 802024a:	b082      	sub	sp, #8
 802024c:	af00      	add	r7, sp, #0
 802024e:	4603      	mov	r3, r0
 8020250:	6039      	str	r1, [r7, #0]
 8020252:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8020254:	79fb      	ldrb	r3, [r7, #7]
 8020256:	2b00      	cmp	r3, #0
 8020258:	d105      	bne.n	8020266 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 802025a:	683a      	ldr	r2, [r7, #0]
 802025c:	4907      	ldr	r1, [pc, #28]	; (802027c <USBD_FS_InterfaceStrDescriptor+0x34>)
 802025e:	4808      	ldr	r0, [pc, #32]	; (8020280 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8020260:	f7ef fbc4 	bl	800f9ec <USBD_GetString>
 8020264:	e004      	b.n	8020270 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8020266:	683a      	ldr	r2, [r7, #0]
 8020268:	4904      	ldr	r1, [pc, #16]	; (802027c <USBD_FS_InterfaceStrDescriptor+0x34>)
 802026a:	4805      	ldr	r0, [pc, #20]	; (8020280 <USBD_FS_InterfaceStrDescriptor+0x38>)
 802026c:	f7ef fbbe 	bl	800f9ec <USBD_GetString>
  }
  return USBD_StrDesc;
 8020270:	4b02      	ldr	r3, [pc, #8]	; (802027c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8020272:	4618      	mov	r0, r3
 8020274:	3708      	adds	r7, #8
 8020276:	46bd      	mov	sp, r7
 8020278:	bd80      	pop	{r7, pc}
 802027a:	bf00      	nop
 802027c:	200036bc 	.word	0x200036bc
 8020280:	08029490 	.word	0x08029490

08020284 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8020284:	b580      	push	{r7, lr}
 8020286:	b084      	sub	sp, #16
 8020288:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 802028a:	4b0f      	ldr	r3, [pc, #60]	; (80202c8 <Get_SerialNum+0x44>)
 802028c:	681b      	ldr	r3, [r3, #0]
 802028e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8020290:	4b0e      	ldr	r3, [pc, #56]	; (80202cc <Get_SerialNum+0x48>)
 8020292:	681b      	ldr	r3, [r3, #0]
 8020294:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8020296:	4b0e      	ldr	r3, [pc, #56]	; (80202d0 <Get_SerialNum+0x4c>)
 8020298:	681b      	ldr	r3, [r3, #0]
 802029a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 802029c:	68fa      	ldr	r2, [r7, #12]
 802029e:	687b      	ldr	r3, [r7, #4]
 80202a0:	4413      	add	r3, r2
 80202a2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80202a4:	68fb      	ldr	r3, [r7, #12]
 80202a6:	2b00      	cmp	r3, #0
 80202a8:	d009      	beq.n	80202be <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80202aa:	2208      	movs	r2, #8
 80202ac:	4909      	ldr	r1, [pc, #36]	; (80202d4 <Get_SerialNum+0x50>)
 80202ae:	68f8      	ldr	r0, [r7, #12]
 80202b0:	f000 f814 	bl	80202dc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80202b4:	2204      	movs	r2, #4
 80202b6:	4908      	ldr	r1, [pc, #32]	; (80202d8 <Get_SerialNum+0x54>)
 80202b8:	68b8      	ldr	r0, [r7, #8]
 80202ba:	f000 f80f 	bl	80202dc <IntToUnicode>
  }
}
 80202be:	bf00      	nop
 80202c0:	3710      	adds	r7, #16
 80202c2:	46bd      	mov	sp, r7
 80202c4:	bd80      	pop	{r7, pc}
 80202c6:	bf00      	nop
 80202c8:	1fff7a10 	.word	0x1fff7a10
 80202cc:	1fff7a14 	.word	0x1fff7a14
 80202d0:	1fff7a18 	.word	0x1fff7a18
 80202d4:	20000266 	.word	0x20000266
 80202d8:	20000276 	.word	0x20000276

080202dc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80202dc:	b480      	push	{r7}
 80202de:	b087      	sub	sp, #28
 80202e0:	af00      	add	r7, sp, #0
 80202e2:	60f8      	str	r0, [r7, #12]
 80202e4:	60b9      	str	r1, [r7, #8]
 80202e6:	4613      	mov	r3, r2
 80202e8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80202ea:	2300      	movs	r3, #0
 80202ec:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80202ee:	2300      	movs	r3, #0
 80202f0:	75fb      	strb	r3, [r7, #23]
 80202f2:	e027      	b.n	8020344 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80202f4:	68fb      	ldr	r3, [r7, #12]
 80202f6:	0f1b      	lsrs	r3, r3, #28
 80202f8:	2b09      	cmp	r3, #9
 80202fa:	d80b      	bhi.n	8020314 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80202fc:	68fb      	ldr	r3, [r7, #12]
 80202fe:	0f1b      	lsrs	r3, r3, #28
 8020300:	b2da      	uxtb	r2, r3
 8020302:	7dfb      	ldrb	r3, [r7, #23]
 8020304:	005b      	lsls	r3, r3, #1
 8020306:	4619      	mov	r1, r3
 8020308:	68bb      	ldr	r3, [r7, #8]
 802030a:	440b      	add	r3, r1
 802030c:	3230      	adds	r2, #48	; 0x30
 802030e:	b2d2      	uxtb	r2, r2
 8020310:	701a      	strb	r2, [r3, #0]
 8020312:	e00a      	b.n	802032a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8020314:	68fb      	ldr	r3, [r7, #12]
 8020316:	0f1b      	lsrs	r3, r3, #28
 8020318:	b2da      	uxtb	r2, r3
 802031a:	7dfb      	ldrb	r3, [r7, #23]
 802031c:	005b      	lsls	r3, r3, #1
 802031e:	4619      	mov	r1, r3
 8020320:	68bb      	ldr	r3, [r7, #8]
 8020322:	440b      	add	r3, r1
 8020324:	3237      	adds	r2, #55	; 0x37
 8020326:	b2d2      	uxtb	r2, r2
 8020328:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 802032a:	68fb      	ldr	r3, [r7, #12]
 802032c:	011b      	lsls	r3, r3, #4
 802032e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8020330:	7dfb      	ldrb	r3, [r7, #23]
 8020332:	005b      	lsls	r3, r3, #1
 8020334:	3301      	adds	r3, #1
 8020336:	68ba      	ldr	r2, [r7, #8]
 8020338:	4413      	add	r3, r2
 802033a:	2200      	movs	r2, #0
 802033c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 802033e:	7dfb      	ldrb	r3, [r7, #23]
 8020340:	3301      	adds	r3, #1
 8020342:	75fb      	strb	r3, [r7, #23]
 8020344:	7dfa      	ldrb	r2, [r7, #23]
 8020346:	79fb      	ldrb	r3, [r7, #7]
 8020348:	429a      	cmp	r2, r3
 802034a:	d3d3      	bcc.n	80202f4 <IntToUnicode+0x18>
  }
}
 802034c:	bf00      	nop
 802034e:	bf00      	nop
 8020350:	371c      	adds	r7, #28
 8020352:	46bd      	mov	sp, r7
 8020354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020358:	4770      	bx	lr
	...

0802035c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 802035c:	b580      	push	{r7, lr}
 802035e:	b08a      	sub	sp, #40	; 0x28
 8020360:	af00      	add	r7, sp, #0
 8020362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8020364:	f107 0314 	add.w	r3, r7, #20
 8020368:	2200      	movs	r2, #0
 802036a:	601a      	str	r2, [r3, #0]
 802036c:	605a      	str	r2, [r3, #4]
 802036e:	609a      	str	r2, [r3, #8]
 8020370:	60da      	str	r2, [r3, #12]
 8020372:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8020374:	687b      	ldr	r3, [r7, #4]
 8020376:	681b      	ldr	r3, [r3, #0]
 8020378:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 802037c:	d13a      	bne.n	80203f4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 802037e:	2300      	movs	r3, #0
 8020380:	613b      	str	r3, [r7, #16]
 8020382:	4b1e      	ldr	r3, [pc, #120]	; (80203fc <HAL_PCD_MspInit+0xa0>)
 8020384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020386:	4a1d      	ldr	r2, [pc, #116]	; (80203fc <HAL_PCD_MspInit+0xa0>)
 8020388:	f043 0301 	orr.w	r3, r3, #1
 802038c:	6313      	str	r3, [r2, #48]	; 0x30
 802038e:	4b1b      	ldr	r3, [pc, #108]	; (80203fc <HAL_PCD_MspInit+0xa0>)
 8020390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020392:	f003 0301 	and.w	r3, r3, #1
 8020396:	613b      	str	r3, [r7, #16]
 8020398:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 802039a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 802039e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80203a0:	2302      	movs	r3, #2
 80203a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80203a4:	2300      	movs	r3, #0
 80203a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80203a8:	2303      	movs	r3, #3
 80203aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80203ac:	230a      	movs	r3, #10
 80203ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80203b0:	f107 0314 	add.w	r3, r7, #20
 80203b4:	4619      	mov	r1, r3
 80203b6:	4812      	ldr	r0, [pc, #72]	; (8020400 <HAL_PCD_MspInit+0xa4>)
 80203b8:	f7e9 f964 	bl	8009684 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80203bc:	4b0f      	ldr	r3, [pc, #60]	; (80203fc <HAL_PCD_MspInit+0xa0>)
 80203be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80203c0:	4a0e      	ldr	r2, [pc, #56]	; (80203fc <HAL_PCD_MspInit+0xa0>)
 80203c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80203c6:	6353      	str	r3, [r2, #52]	; 0x34
 80203c8:	2300      	movs	r3, #0
 80203ca:	60fb      	str	r3, [r7, #12]
 80203cc:	4b0b      	ldr	r3, [pc, #44]	; (80203fc <HAL_PCD_MspInit+0xa0>)
 80203ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80203d0:	4a0a      	ldr	r2, [pc, #40]	; (80203fc <HAL_PCD_MspInit+0xa0>)
 80203d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80203d6:	6453      	str	r3, [r2, #68]	; 0x44
 80203d8:	4b08      	ldr	r3, [pc, #32]	; (80203fc <HAL_PCD_MspInit+0xa0>)
 80203da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80203dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80203e0:	60fb      	str	r3, [r7, #12]
 80203e2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80203e4:	2200      	movs	r2, #0
 80203e6:	2100      	movs	r1, #0
 80203e8:	2043      	movs	r0, #67	; 0x43
 80203ea:	f7e9 f8f8 	bl	80095de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80203ee:	2043      	movs	r0, #67	; 0x43
 80203f0:	f7e9 f911 	bl	8009616 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80203f4:	bf00      	nop
 80203f6:	3728      	adds	r7, #40	; 0x28
 80203f8:	46bd      	mov	sp, r7
 80203fa:	bd80      	pop	{r7, pc}
 80203fc:	40023800 	.word	0x40023800
 8020400:	40020000 	.word	0x40020000

08020404 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8020404:	b580      	push	{r7, lr}
 8020406:	b082      	sub	sp, #8
 8020408:	af00      	add	r7, sp, #0
 802040a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 802040c:	687b      	ldr	r3, [r7, #4]
 802040e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8020412:	687b      	ldr	r3, [r7, #4]
 8020414:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8020418:	4619      	mov	r1, r3
 802041a:	4610      	mov	r0, r2
 802041c:	f7ee f987 	bl	800e72e <USBD_LL_SetupStage>
}
 8020420:	bf00      	nop
 8020422:	3708      	adds	r7, #8
 8020424:	46bd      	mov	sp, r7
 8020426:	bd80      	pop	{r7, pc}

08020428 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8020428:	b580      	push	{r7, lr}
 802042a:	b082      	sub	sp, #8
 802042c:	af00      	add	r7, sp, #0
 802042e:	6078      	str	r0, [r7, #4]
 8020430:	460b      	mov	r3, r1
 8020432:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8020434:	687b      	ldr	r3, [r7, #4]
 8020436:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 802043a:	78fa      	ldrb	r2, [r7, #3]
 802043c:	6879      	ldr	r1, [r7, #4]
 802043e:	4613      	mov	r3, r2
 8020440:	00db      	lsls	r3, r3, #3
 8020442:	4413      	add	r3, r2
 8020444:	009b      	lsls	r3, r3, #2
 8020446:	440b      	add	r3, r1
 8020448:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 802044c:	681a      	ldr	r2, [r3, #0]
 802044e:	78fb      	ldrb	r3, [r7, #3]
 8020450:	4619      	mov	r1, r3
 8020452:	f7ee f9c1 	bl	800e7d8 <USBD_LL_DataOutStage>
}
 8020456:	bf00      	nop
 8020458:	3708      	adds	r7, #8
 802045a:	46bd      	mov	sp, r7
 802045c:	bd80      	pop	{r7, pc}

0802045e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802045e:	b580      	push	{r7, lr}
 8020460:	b082      	sub	sp, #8
 8020462:	af00      	add	r7, sp, #0
 8020464:	6078      	str	r0, [r7, #4]
 8020466:	460b      	mov	r3, r1
 8020468:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 802046a:	687b      	ldr	r3, [r7, #4]
 802046c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8020470:	78fa      	ldrb	r2, [r7, #3]
 8020472:	6879      	ldr	r1, [r7, #4]
 8020474:	4613      	mov	r3, r2
 8020476:	00db      	lsls	r3, r3, #3
 8020478:	4413      	add	r3, r2
 802047a:	009b      	lsls	r3, r3, #2
 802047c:	440b      	add	r3, r1
 802047e:	334c      	adds	r3, #76	; 0x4c
 8020480:	681a      	ldr	r2, [r3, #0]
 8020482:	78fb      	ldrb	r3, [r7, #3]
 8020484:	4619      	mov	r1, r3
 8020486:	f7ee fa5a 	bl	800e93e <USBD_LL_DataInStage>
}
 802048a:	bf00      	nop
 802048c:	3708      	adds	r7, #8
 802048e:	46bd      	mov	sp, r7
 8020490:	bd80      	pop	{r7, pc}

08020492 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8020492:	b580      	push	{r7, lr}
 8020494:	b082      	sub	sp, #8
 8020496:	af00      	add	r7, sp, #0
 8020498:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 802049a:	687b      	ldr	r3, [r7, #4]
 802049c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80204a0:	4618      	mov	r0, r3
 80204a2:	f7ee fb8e 	bl	800ebc2 <USBD_LL_SOF>
}
 80204a6:	bf00      	nop
 80204a8:	3708      	adds	r7, #8
 80204aa:	46bd      	mov	sp, r7
 80204ac:	bd80      	pop	{r7, pc}

080204ae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80204ae:	b580      	push	{r7, lr}
 80204b0:	b084      	sub	sp, #16
 80204b2:	af00      	add	r7, sp, #0
 80204b4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80204b6:	2301      	movs	r3, #1
 80204b8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80204ba:	687b      	ldr	r3, [r7, #4]
 80204bc:	68db      	ldr	r3, [r3, #12]
 80204be:	2b00      	cmp	r3, #0
 80204c0:	d102      	bne.n	80204c8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80204c2:	2300      	movs	r3, #0
 80204c4:	73fb      	strb	r3, [r7, #15]
 80204c6:	e008      	b.n	80204da <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80204c8:	687b      	ldr	r3, [r7, #4]
 80204ca:	68db      	ldr	r3, [r3, #12]
 80204cc:	2b02      	cmp	r3, #2
 80204ce:	d102      	bne.n	80204d6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80204d0:	2301      	movs	r3, #1
 80204d2:	73fb      	strb	r3, [r7, #15]
 80204d4:	e001      	b.n	80204da <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80204d6:	f7e6 f887 	bl	80065e8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80204da:	687b      	ldr	r3, [r7, #4]
 80204dc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80204e0:	7bfa      	ldrb	r2, [r7, #15]
 80204e2:	4611      	mov	r1, r2
 80204e4:	4618      	mov	r0, r3
 80204e6:	f7ee fb2e 	bl	800eb46 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80204ea:	687b      	ldr	r3, [r7, #4]
 80204ec:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80204f0:	4618      	mov	r0, r3
 80204f2:	f7ee fad6 	bl	800eaa2 <USBD_LL_Reset>
}
 80204f6:	bf00      	nop
 80204f8:	3710      	adds	r7, #16
 80204fa:	46bd      	mov	sp, r7
 80204fc:	bd80      	pop	{r7, pc}
	...

08020500 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8020500:	b580      	push	{r7, lr}
 8020502:	b082      	sub	sp, #8
 8020504:	af00      	add	r7, sp, #0
 8020506:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8020508:	687b      	ldr	r3, [r7, #4]
 802050a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 802050e:	4618      	mov	r0, r3
 8020510:	f7ee fb29 	bl	800eb66 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8020514:	687b      	ldr	r3, [r7, #4]
 8020516:	681b      	ldr	r3, [r3, #0]
 8020518:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 802051c:	681b      	ldr	r3, [r3, #0]
 802051e:	687a      	ldr	r2, [r7, #4]
 8020520:	6812      	ldr	r2, [r2, #0]
 8020522:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8020526:	f043 0301 	orr.w	r3, r3, #1
 802052a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 802052c:	687b      	ldr	r3, [r7, #4]
 802052e:	6a1b      	ldr	r3, [r3, #32]
 8020530:	2b00      	cmp	r3, #0
 8020532:	d005      	beq.n	8020540 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8020534:	4b04      	ldr	r3, [pc, #16]	; (8020548 <HAL_PCD_SuspendCallback+0x48>)
 8020536:	691b      	ldr	r3, [r3, #16]
 8020538:	4a03      	ldr	r2, [pc, #12]	; (8020548 <HAL_PCD_SuspendCallback+0x48>)
 802053a:	f043 0306 	orr.w	r3, r3, #6
 802053e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8020540:	bf00      	nop
 8020542:	3708      	adds	r7, #8
 8020544:	46bd      	mov	sp, r7
 8020546:	bd80      	pop	{r7, pc}
 8020548:	e000ed00 	.word	0xe000ed00

0802054c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802054c:	b580      	push	{r7, lr}
 802054e:	b082      	sub	sp, #8
 8020550:	af00      	add	r7, sp, #0
 8020552:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8020554:	687b      	ldr	r3, [r7, #4]
 8020556:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 802055a:	4618      	mov	r0, r3
 802055c:	f7ee fb19 	bl	800eb92 <USBD_LL_Resume>
}
 8020560:	bf00      	nop
 8020562:	3708      	adds	r7, #8
 8020564:	46bd      	mov	sp, r7
 8020566:	bd80      	pop	{r7, pc}

08020568 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8020568:	b580      	push	{r7, lr}
 802056a:	b082      	sub	sp, #8
 802056c:	af00      	add	r7, sp, #0
 802056e:	6078      	str	r0, [r7, #4]
 8020570:	460b      	mov	r3, r1
 8020572:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8020574:	687b      	ldr	r3, [r7, #4]
 8020576:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 802057a:	78fa      	ldrb	r2, [r7, #3]
 802057c:	4611      	mov	r1, r2
 802057e:	4618      	mov	r0, r3
 8020580:	f7ee fb71 	bl	800ec66 <USBD_LL_IsoOUTIncomplete>
}
 8020584:	bf00      	nop
 8020586:	3708      	adds	r7, #8
 8020588:	46bd      	mov	sp, r7
 802058a:	bd80      	pop	{r7, pc}

0802058c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802058c:	b580      	push	{r7, lr}
 802058e:	b082      	sub	sp, #8
 8020590:	af00      	add	r7, sp, #0
 8020592:	6078      	str	r0, [r7, #4]
 8020594:	460b      	mov	r3, r1
 8020596:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8020598:	687b      	ldr	r3, [r7, #4]
 802059a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 802059e:	78fa      	ldrb	r2, [r7, #3]
 80205a0:	4611      	mov	r1, r2
 80205a2:	4618      	mov	r0, r3
 80205a4:	f7ee fb2d 	bl	800ec02 <USBD_LL_IsoINIncomplete>
}
 80205a8:	bf00      	nop
 80205aa:	3708      	adds	r7, #8
 80205ac:	46bd      	mov	sp, r7
 80205ae:	bd80      	pop	{r7, pc}

080205b0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80205b0:	b580      	push	{r7, lr}
 80205b2:	b082      	sub	sp, #8
 80205b4:	af00      	add	r7, sp, #0
 80205b6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80205b8:	687b      	ldr	r3, [r7, #4]
 80205ba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80205be:	4618      	mov	r0, r3
 80205c0:	f7ee fb83 	bl	800ecca <USBD_LL_DevConnected>
}
 80205c4:	bf00      	nop
 80205c6:	3708      	adds	r7, #8
 80205c8:	46bd      	mov	sp, r7
 80205ca:	bd80      	pop	{r7, pc}

080205cc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80205cc:	b580      	push	{r7, lr}
 80205ce:	b082      	sub	sp, #8
 80205d0:	af00      	add	r7, sp, #0
 80205d2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80205d4:	687b      	ldr	r3, [r7, #4]
 80205d6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80205da:	4618      	mov	r0, r3
 80205dc:	f7ee fb80 	bl	800ece0 <USBD_LL_DevDisconnected>
}
 80205e0:	bf00      	nop
 80205e2:	3708      	adds	r7, #8
 80205e4:	46bd      	mov	sp, r7
 80205e6:	bd80      	pop	{r7, pc}

080205e8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80205e8:	b580      	push	{r7, lr}
 80205ea:	b082      	sub	sp, #8
 80205ec:	af00      	add	r7, sp, #0
 80205ee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80205f0:	687b      	ldr	r3, [r7, #4]
 80205f2:	781b      	ldrb	r3, [r3, #0]
 80205f4:	2b00      	cmp	r3, #0
 80205f6:	d13c      	bne.n	8020672 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80205f8:	4a20      	ldr	r2, [pc, #128]	; (802067c <USBD_LL_Init+0x94>)
 80205fa:	687b      	ldr	r3, [r7, #4]
 80205fc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8020600:	687b      	ldr	r3, [r7, #4]
 8020602:	4a1e      	ldr	r2, [pc, #120]	; (802067c <USBD_LL_Init+0x94>)
 8020604:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8020608:	4b1c      	ldr	r3, [pc, #112]	; (802067c <USBD_LL_Init+0x94>)
 802060a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 802060e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8020610:	4b1a      	ldr	r3, [pc, #104]	; (802067c <USBD_LL_Init+0x94>)
 8020612:	2204      	movs	r2, #4
 8020614:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8020616:	4b19      	ldr	r3, [pc, #100]	; (802067c <USBD_LL_Init+0x94>)
 8020618:	2202      	movs	r2, #2
 802061a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 802061c:	4b17      	ldr	r3, [pc, #92]	; (802067c <USBD_LL_Init+0x94>)
 802061e:	2200      	movs	r2, #0
 8020620:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8020622:	4b16      	ldr	r3, [pc, #88]	; (802067c <USBD_LL_Init+0x94>)
 8020624:	2202      	movs	r2, #2
 8020626:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8020628:	4b14      	ldr	r3, [pc, #80]	; (802067c <USBD_LL_Init+0x94>)
 802062a:	2200      	movs	r2, #0
 802062c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 802062e:	4b13      	ldr	r3, [pc, #76]	; (802067c <USBD_LL_Init+0x94>)
 8020630:	2200      	movs	r2, #0
 8020632:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8020634:	4b11      	ldr	r3, [pc, #68]	; (802067c <USBD_LL_Init+0x94>)
 8020636:	2200      	movs	r2, #0
 8020638:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 802063a:	4b10      	ldr	r3, [pc, #64]	; (802067c <USBD_LL_Init+0x94>)
 802063c:	2200      	movs	r2, #0
 802063e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8020640:	4b0e      	ldr	r3, [pc, #56]	; (802067c <USBD_LL_Init+0x94>)
 8020642:	2200      	movs	r2, #0
 8020644:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8020646:	480d      	ldr	r0, [pc, #52]	; (802067c <USBD_LL_Init+0x94>)
 8020648:	f7e9 fa04 	bl	8009a54 <HAL_PCD_Init>
 802064c:	4603      	mov	r3, r0
 802064e:	2b00      	cmp	r3, #0
 8020650:	d001      	beq.n	8020656 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8020652:	f7e5 ffc9 	bl	80065e8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8020656:	2180      	movs	r1, #128	; 0x80
 8020658:	4808      	ldr	r0, [pc, #32]	; (802067c <USBD_LL_Init+0x94>)
 802065a:	f7ea fc5c 	bl	800af16 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 802065e:	2240      	movs	r2, #64	; 0x40
 8020660:	2100      	movs	r1, #0
 8020662:	4806      	ldr	r0, [pc, #24]	; (802067c <USBD_LL_Init+0x94>)
 8020664:	f7ea fc10 	bl	800ae88 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8020668:	2280      	movs	r2, #128	; 0x80
 802066a:	2101      	movs	r1, #1
 802066c:	4803      	ldr	r0, [pc, #12]	; (802067c <USBD_LL_Init+0x94>)
 802066e:	f7ea fc0b 	bl	800ae88 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8020672:	2300      	movs	r3, #0
}
 8020674:	4618      	mov	r0, r3
 8020676:	3708      	adds	r7, #8
 8020678:	46bd      	mov	sp, r7
 802067a:	bd80      	pop	{r7, pc}
 802067c:	200038bc 	.word	0x200038bc

08020680 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8020680:	b580      	push	{r7, lr}
 8020682:	b084      	sub	sp, #16
 8020684:	af00      	add	r7, sp, #0
 8020686:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8020688:	2300      	movs	r3, #0
 802068a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802068c:	2300      	movs	r3, #0
 802068e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8020690:	687b      	ldr	r3, [r7, #4]
 8020692:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8020696:	4618      	mov	r0, r3
 8020698:	f7e9 faf9 	bl	8009c8e <HAL_PCD_Start>
 802069c:	4603      	mov	r3, r0
 802069e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80206a0:	7bfb      	ldrb	r3, [r7, #15]
 80206a2:	4618      	mov	r0, r3
 80206a4:	f000 f942 	bl	802092c <USBD_Get_USB_Status>
 80206a8:	4603      	mov	r3, r0
 80206aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80206ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80206ae:	4618      	mov	r0, r3
 80206b0:	3710      	adds	r7, #16
 80206b2:	46bd      	mov	sp, r7
 80206b4:	bd80      	pop	{r7, pc}

080206b6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80206b6:	b580      	push	{r7, lr}
 80206b8:	b084      	sub	sp, #16
 80206ba:	af00      	add	r7, sp, #0
 80206bc:	6078      	str	r0, [r7, #4]
 80206be:	4608      	mov	r0, r1
 80206c0:	4611      	mov	r1, r2
 80206c2:	461a      	mov	r2, r3
 80206c4:	4603      	mov	r3, r0
 80206c6:	70fb      	strb	r3, [r7, #3]
 80206c8:	460b      	mov	r3, r1
 80206ca:	70bb      	strb	r3, [r7, #2]
 80206cc:	4613      	mov	r3, r2
 80206ce:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80206d0:	2300      	movs	r3, #0
 80206d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80206d4:	2300      	movs	r3, #0
 80206d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80206d8:	687b      	ldr	r3, [r7, #4]
 80206da:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80206de:	78bb      	ldrb	r3, [r7, #2]
 80206e0:	883a      	ldrh	r2, [r7, #0]
 80206e2:	78f9      	ldrb	r1, [r7, #3]
 80206e4:	f7e9 ffca 	bl	800a67c <HAL_PCD_EP_Open>
 80206e8:	4603      	mov	r3, r0
 80206ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80206ec:	7bfb      	ldrb	r3, [r7, #15]
 80206ee:	4618      	mov	r0, r3
 80206f0:	f000 f91c 	bl	802092c <USBD_Get_USB_Status>
 80206f4:	4603      	mov	r3, r0
 80206f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80206f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80206fa:	4618      	mov	r0, r3
 80206fc:	3710      	adds	r7, #16
 80206fe:	46bd      	mov	sp, r7
 8020700:	bd80      	pop	{r7, pc}

08020702 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8020702:	b580      	push	{r7, lr}
 8020704:	b084      	sub	sp, #16
 8020706:	af00      	add	r7, sp, #0
 8020708:	6078      	str	r0, [r7, #4]
 802070a:	460b      	mov	r3, r1
 802070c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802070e:	2300      	movs	r3, #0
 8020710:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8020712:	2300      	movs	r3, #0
 8020714:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8020716:	687b      	ldr	r3, [r7, #4]
 8020718:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 802071c:	78fa      	ldrb	r2, [r7, #3]
 802071e:	4611      	mov	r1, r2
 8020720:	4618      	mov	r0, r3
 8020722:	f7ea f813 	bl	800a74c <HAL_PCD_EP_Close>
 8020726:	4603      	mov	r3, r0
 8020728:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802072a:	7bfb      	ldrb	r3, [r7, #15]
 802072c:	4618      	mov	r0, r3
 802072e:	f000 f8fd 	bl	802092c <USBD_Get_USB_Status>
 8020732:	4603      	mov	r3, r0
 8020734:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8020736:	7bbb      	ldrb	r3, [r7, #14]
}
 8020738:	4618      	mov	r0, r3
 802073a:	3710      	adds	r7, #16
 802073c:	46bd      	mov	sp, r7
 802073e:	bd80      	pop	{r7, pc}

08020740 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8020740:	b580      	push	{r7, lr}
 8020742:	b084      	sub	sp, #16
 8020744:	af00      	add	r7, sp, #0
 8020746:	6078      	str	r0, [r7, #4]
 8020748:	460b      	mov	r3, r1
 802074a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802074c:	2300      	movs	r3, #0
 802074e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8020750:	2300      	movs	r3, #0
 8020752:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8020754:	687b      	ldr	r3, [r7, #4]
 8020756:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 802075a:	78fa      	ldrb	r2, [r7, #3]
 802075c:	4611      	mov	r1, r2
 802075e:	4618      	mov	r0, r3
 8020760:	f7ea f8eb 	bl	800a93a <HAL_PCD_EP_SetStall>
 8020764:	4603      	mov	r3, r0
 8020766:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8020768:	7bfb      	ldrb	r3, [r7, #15]
 802076a:	4618      	mov	r0, r3
 802076c:	f000 f8de 	bl	802092c <USBD_Get_USB_Status>
 8020770:	4603      	mov	r3, r0
 8020772:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8020774:	7bbb      	ldrb	r3, [r7, #14]
}
 8020776:	4618      	mov	r0, r3
 8020778:	3710      	adds	r7, #16
 802077a:	46bd      	mov	sp, r7
 802077c:	bd80      	pop	{r7, pc}

0802077e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 802077e:	b580      	push	{r7, lr}
 8020780:	b084      	sub	sp, #16
 8020782:	af00      	add	r7, sp, #0
 8020784:	6078      	str	r0, [r7, #4]
 8020786:	460b      	mov	r3, r1
 8020788:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802078a:	2300      	movs	r3, #0
 802078c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802078e:	2300      	movs	r3, #0
 8020790:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8020792:	687b      	ldr	r3, [r7, #4]
 8020794:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8020798:	78fa      	ldrb	r2, [r7, #3]
 802079a:	4611      	mov	r1, r2
 802079c:	4618      	mov	r0, r3
 802079e:	f7ea f930 	bl	800aa02 <HAL_PCD_EP_ClrStall>
 80207a2:	4603      	mov	r3, r0
 80207a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80207a6:	7bfb      	ldrb	r3, [r7, #15]
 80207a8:	4618      	mov	r0, r3
 80207aa:	f000 f8bf 	bl	802092c <USBD_Get_USB_Status>
 80207ae:	4603      	mov	r3, r0
 80207b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80207b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80207b4:	4618      	mov	r0, r3
 80207b6:	3710      	adds	r7, #16
 80207b8:	46bd      	mov	sp, r7
 80207ba:	bd80      	pop	{r7, pc}

080207bc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80207bc:	b480      	push	{r7}
 80207be:	b085      	sub	sp, #20
 80207c0:	af00      	add	r7, sp, #0
 80207c2:	6078      	str	r0, [r7, #4]
 80207c4:	460b      	mov	r3, r1
 80207c6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80207c8:	687b      	ldr	r3, [r7, #4]
 80207ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80207ce:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80207d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80207d4:	2b00      	cmp	r3, #0
 80207d6:	da0b      	bge.n	80207f0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80207d8:	78fb      	ldrb	r3, [r7, #3]
 80207da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80207de:	68f9      	ldr	r1, [r7, #12]
 80207e0:	4613      	mov	r3, r2
 80207e2:	00db      	lsls	r3, r3, #3
 80207e4:	4413      	add	r3, r2
 80207e6:	009b      	lsls	r3, r3, #2
 80207e8:	440b      	add	r3, r1
 80207ea:	333e      	adds	r3, #62	; 0x3e
 80207ec:	781b      	ldrb	r3, [r3, #0]
 80207ee:	e00b      	b.n	8020808 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80207f0:	78fb      	ldrb	r3, [r7, #3]
 80207f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80207f6:	68f9      	ldr	r1, [r7, #12]
 80207f8:	4613      	mov	r3, r2
 80207fa:	00db      	lsls	r3, r3, #3
 80207fc:	4413      	add	r3, r2
 80207fe:	009b      	lsls	r3, r3, #2
 8020800:	440b      	add	r3, r1
 8020802:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8020806:	781b      	ldrb	r3, [r3, #0]
  }
}
 8020808:	4618      	mov	r0, r3
 802080a:	3714      	adds	r7, #20
 802080c:	46bd      	mov	sp, r7
 802080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020812:	4770      	bx	lr

08020814 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8020814:	b580      	push	{r7, lr}
 8020816:	b084      	sub	sp, #16
 8020818:	af00      	add	r7, sp, #0
 802081a:	6078      	str	r0, [r7, #4]
 802081c:	460b      	mov	r3, r1
 802081e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8020820:	2300      	movs	r3, #0
 8020822:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8020824:	2300      	movs	r3, #0
 8020826:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8020828:	687b      	ldr	r3, [r7, #4]
 802082a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 802082e:	78fa      	ldrb	r2, [r7, #3]
 8020830:	4611      	mov	r1, r2
 8020832:	4618      	mov	r0, r3
 8020834:	f7e9 fefd 	bl	800a632 <HAL_PCD_SetAddress>
 8020838:	4603      	mov	r3, r0
 802083a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802083c:	7bfb      	ldrb	r3, [r7, #15]
 802083e:	4618      	mov	r0, r3
 8020840:	f000 f874 	bl	802092c <USBD_Get_USB_Status>
 8020844:	4603      	mov	r3, r0
 8020846:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8020848:	7bbb      	ldrb	r3, [r7, #14]
}
 802084a:	4618      	mov	r0, r3
 802084c:	3710      	adds	r7, #16
 802084e:	46bd      	mov	sp, r7
 8020850:	bd80      	pop	{r7, pc}

08020852 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8020852:	b580      	push	{r7, lr}
 8020854:	b086      	sub	sp, #24
 8020856:	af00      	add	r7, sp, #0
 8020858:	60f8      	str	r0, [r7, #12]
 802085a:	607a      	str	r2, [r7, #4]
 802085c:	603b      	str	r3, [r7, #0]
 802085e:	460b      	mov	r3, r1
 8020860:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8020862:	2300      	movs	r3, #0
 8020864:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8020866:	2300      	movs	r3, #0
 8020868:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 802086a:	68fb      	ldr	r3, [r7, #12]
 802086c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8020870:	7af9      	ldrb	r1, [r7, #11]
 8020872:	683b      	ldr	r3, [r7, #0]
 8020874:	687a      	ldr	r2, [r7, #4]
 8020876:	f7ea f816 	bl	800a8a6 <HAL_PCD_EP_Transmit>
 802087a:	4603      	mov	r3, r0
 802087c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802087e:	7dfb      	ldrb	r3, [r7, #23]
 8020880:	4618      	mov	r0, r3
 8020882:	f000 f853 	bl	802092c <USBD_Get_USB_Status>
 8020886:	4603      	mov	r3, r0
 8020888:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 802088a:	7dbb      	ldrb	r3, [r7, #22]
}
 802088c:	4618      	mov	r0, r3
 802088e:	3718      	adds	r7, #24
 8020890:	46bd      	mov	sp, r7
 8020892:	bd80      	pop	{r7, pc}

08020894 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8020894:	b580      	push	{r7, lr}
 8020896:	b086      	sub	sp, #24
 8020898:	af00      	add	r7, sp, #0
 802089a:	60f8      	str	r0, [r7, #12]
 802089c:	607a      	str	r2, [r7, #4]
 802089e:	603b      	str	r3, [r7, #0]
 80208a0:	460b      	mov	r3, r1
 80208a2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80208a4:	2300      	movs	r3, #0
 80208a6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80208a8:	2300      	movs	r3, #0
 80208aa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80208ac:	68fb      	ldr	r3, [r7, #12]
 80208ae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80208b2:	7af9      	ldrb	r1, [r7, #11]
 80208b4:	683b      	ldr	r3, [r7, #0]
 80208b6:	687a      	ldr	r2, [r7, #4]
 80208b8:	f7e9 ff92 	bl	800a7e0 <HAL_PCD_EP_Receive>
 80208bc:	4603      	mov	r3, r0
 80208be:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80208c0:	7dfb      	ldrb	r3, [r7, #23]
 80208c2:	4618      	mov	r0, r3
 80208c4:	f000 f832 	bl	802092c <USBD_Get_USB_Status>
 80208c8:	4603      	mov	r3, r0
 80208ca:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80208cc:	7dbb      	ldrb	r3, [r7, #22]
}
 80208ce:	4618      	mov	r0, r3
 80208d0:	3718      	adds	r7, #24
 80208d2:	46bd      	mov	sp, r7
 80208d4:	bd80      	pop	{r7, pc}

080208d6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80208d6:	b580      	push	{r7, lr}
 80208d8:	b082      	sub	sp, #8
 80208da:	af00      	add	r7, sp, #0
 80208dc:	6078      	str	r0, [r7, #4]
 80208de:	460b      	mov	r3, r1
 80208e0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80208e2:	687b      	ldr	r3, [r7, #4]
 80208e4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80208e8:	78fa      	ldrb	r2, [r7, #3]
 80208ea:	4611      	mov	r1, r2
 80208ec:	4618      	mov	r0, r3
 80208ee:	f7e9 ffc2 	bl	800a876 <HAL_PCD_EP_GetRxCount>
 80208f2:	4603      	mov	r3, r0
}
 80208f4:	4618      	mov	r0, r3
 80208f6:	3708      	adds	r7, #8
 80208f8:	46bd      	mov	sp, r7
 80208fa:	bd80      	pop	{r7, pc}

080208fc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80208fc:	b480      	push	{r7}
 80208fe:	b083      	sub	sp, #12
 8020900:	af00      	add	r7, sp, #0
 8020902:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8020904:	4b03      	ldr	r3, [pc, #12]	; (8020914 <USBD_static_malloc+0x18>)
}
 8020906:	4618      	mov	r0, r3
 8020908:	370c      	adds	r7, #12
 802090a:	46bd      	mov	sp, r7
 802090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020910:	4770      	bx	lr
 8020912:	bf00      	nop
 8020914:	20003dc8 	.word	0x20003dc8

08020918 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8020918:	b480      	push	{r7}
 802091a:	b083      	sub	sp, #12
 802091c:	af00      	add	r7, sp, #0
 802091e:	6078      	str	r0, [r7, #4]

}
 8020920:	bf00      	nop
 8020922:	370c      	adds	r7, #12
 8020924:	46bd      	mov	sp, r7
 8020926:	f85d 7b04 	ldr.w	r7, [sp], #4
 802092a:	4770      	bx	lr

0802092c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 802092c:	b480      	push	{r7}
 802092e:	b085      	sub	sp, #20
 8020930:	af00      	add	r7, sp, #0
 8020932:	4603      	mov	r3, r0
 8020934:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8020936:	2300      	movs	r3, #0
 8020938:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 802093a:	79fb      	ldrb	r3, [r7, #7]
 802093c:	2b03      	cmp	r3, #3
 802093e:	d817      	bhi.n	8020970 <USBD_Get_USB_Status+0x44>
 8020940:	a201      	add	r2, pc, #4	; (adr r2, 8020948 <USBD_Get_USB_Status+0x1c>)
 8020942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020946:	bf00      	nop
 8020948:	08020959 	.word	0x08020959
 802094c:	0802095f 	.word	0x0802095f
 8020950:	08020965 	.word	0x08020965
 8020954:	0802096b 	.word	0x0802096b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8020958:	2300      	movs	r3, #0
 802095a:	73fb      	strb	r3, [r7, #15]
    break;
 802095c:	e00b      	b.n	8020976 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 802095e:	2303      	movs	r3, #3
 8020960:	73fb      	strb	r3, [r7, #15]
    break;
 8020962:	e008      	b.n	8020976 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8020964:	2301      	movs	r3, #1
 8020966:	73fb      	strb	r3, [r7, #15]
    break;
 8020968:	e005      	b.n	8020976 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 802096a:	2303      	movs	r3, #3
 802096c:	73fb      	strb	r3, [r7, #15]
    break;
 802096e:	e002      	b.n	8020976 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8020970:	2303      	movs	r3, #3
 8020972:	73fb      	strb	r3, [r7, #15]
    break;
 8020974:	bf00      	nop
  }
  return usb_status;
 8020976:	7bfb      	ldrb	r3, [r7, #15]
}
 8020978:	4618      	mov	r0, r3
 802097a:	3714      	adds	r7, #20
 802097c:	46bd      	mov	sp, r7
 802097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020982:	4770      	bx	lr

08020984 <_ZdaPv>:
 8020984:	f000 b816 	b.w	80209b4 <_ZdlPv>

08020988 <_Znwj>:
 8020988:	2801      	cmp	r0, #1
 802098a:	bf38      	it	cc
 802098c:	2001      	movcc	r0, #1
 802098e:	b510      	push	{r4, lr}
 8020990:	4604      	mov	r4, r0
 8020992:	4620      	mov	r0, r4
 8020994:	f002 fdc4 	bl	8023520 <malloc>
 8020998:	b930      	cbnz	r0, 80209a8 <_Znwj+0x20>
 802099a:	f000 f80d 	bl	80209b8 <_ZSt15get_new_handlerv>
 802099e:	b908      	cbnz	r0, 80209a4 <_Znwj+0x1c>
 80209a0:	f002 fd4c 	bl	802343c <abort>
 80209a4:	4780      	blx	r0
 80209a6:	e7f4      	b.n	8020992 <_Znwj+0xa>
 80209a8:	bd10      	pop	{r4, pc}

080209aa <_Znaj>:
 80209aa:	f7ff bfed 	b.w	8020988 <_Znwj>

080209ae <_ZSt20__throw_length_errorPKc>:
 80209ae:	b508      	push	{r3, lr}
 80209b0:	f002 fd44 	bl	802343c <abort>

080209b4 <_ZdlPv>:
 80209b4:	f002 bdbc 	b.w	8023530 <free>

080209b8 <_ZSt15get_new_handlerv>:
 80209b8:	4b02      	ldr	r3, [pc, #8]	; (80209c4 <_ZSt15get_new_handlerv+0xc>)
 80209ba:	6818      	ldr	r0, [r3, #0]
 80209bc:	f3bf 8f5b 	dmb	ish
 80209c0:	4770      	bx	lr
 80209c2:	bf00      	nop
 80209c4:	20003fe8 	.word	0x20003fe8

080209c8 <cos>:
 80209c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80209ca:	ec53 2b10 	vmov	r2, r3, d0
 80209ce:	4826      	ldr	r0, [pc, #152]	; (8020a68 <cos+0xa0>)
 80209d0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80209d4:	4281      	cmp	r1, r0
 80209d6:	dc06      	bgt.n	80209e6 <cos+0x1e>
 80209d8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8020a60 <cos+0x98>
 80209dc:	b005      	add	sp, #20
 80209de:	f85d eb04 	ldr.w	lr, [sp], #4
 80209e2:	f001 bd41 	b.w	8022468 <__kernel_cos>
 80209e6:	4821      	ldr	r0, [pc, #132]	; (8020a6c <cos+0xa4>)
 80209e8:	4281      	cmp	r1, r0
 80209ea:	dd09      	ble.n	8020a00 <cos+0x38>
 80209ec:	ee10 0a10 	vmov	r0, s0
 80209f0:	4619      	mov	r1, r3
 80209f2:	f7df fc53 	bl	800029c <__aeabi_dsub>
 80209f6:	ec41 0b10 	vmov	d0, r0, r1
 80209fa:	b005      	add	sp, #20
 80209fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8020a00:	4668      	mov	r0, sp
 8020a02:	f001 f859 	bl	8021ab8 <__ieee754_rem_pio2>
 8020a06:	f000 0003 	and.w	r0, r0, #3
 8020a0a:	2801      	cmp	r0, #1
 8020a0c:	d00b      	beq.n	8020a26 <cos+0x5e>
 8020a0e:	2802      	cmp	r0, #2
 8020a10:	d016      	beq.n	8020a40 <cos+0x78>
 8020a12:	b9e0      	cbnz	r0, 8020a4e <cos+0x86>
 8020a14:	ed9d 1b02 	vldr	d1, [sp, #8]
 8020a18:	ed9d 0b00 	vldr	d0, [sp]
 8020a1c:	f001 fd24 	bl	8022468 <__kernel_cos>
 8020a20:	ec51 0b10 	vmov	r0, r1, d0
 8020a24:	e7e7      	b.n	80209f6 <cos+0x2e>
 8020a26:	ed9d 1b02 	vldr	d1, [sp, #8]
 8020a2a:	ed9d 0b00 	vldr	d0, [sp]
 8020a2e:	f002 f933 	bl	8022c98 <__kernel_sin>
 8020a32:	ec53 2b10 	vmov	r2, r3, d0
 8020a36:	ee10 0a10 	vmov	r0, s0
 8020a3a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8020a3e:	e7da      	b.n	80209f6 <cos+0x2e>
 8020a40:	ed9d 1b02 	vldr	d1, [sp, #8]
 8020a44:	ed9d 0b00 	vldr	d0, [sp]
 8020a48:	f001 fd0e 	bl	8022468 <__kernel_cos>
 8020a4c:	e7f1      	b.n	8020a32 <cos+0x6a>
 8020a4e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8020a52:	ed9d 0b00 	vldr	d0, [sp]
 8020a56:	2001      	movs	r0, #1
 8020a58:	f002 f91e 	bl	8022c98 <__kernel_sin>
 8020a5c:	e7e0      	b.n	8020a20 <cos+0x58>
 8020a5e:	bf00      	nop
	...
 8020a68:	3fe921fb 	.word	0x3fe921fb
 8020a6c:	7fefffff 	.word	0x7fefffff

08020a70 <floor>:
 8020a70:	ec51 0b10 	vmov	r0, r1, d0
 8020a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020a78:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8020a7c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8020a80:	2e13      	cmp	r6, #19
 8020a82:	ee10 5a10 	vmov	r5, s0
 8020a86:	ee10 8a10 	vmov	r8, s0
 8020a8a:	460c      	mov	r4, r1
 8020a8c:	dc32      	bgt.n	8020af4 <floor+0x84>
 8020a8e:	2e00      	cmp	r6, #0
 8020a90:	da14      	bge.n	8020abc <floor+0x4c>
 8020a92:	a333      	add	r3, pc, #204	; (adr r3, 8020b60 <floor+0xf0>)
 8020a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a98:	f7df fc02 	bl	80002a0 <__adddf3>
 8020a9c:	2200      	movs	r2, #0
 8020a9e:	2300      	movs	r3, #0
 8020aa0:	f7e0 f844 	bl	8000b2c <__aeabi_dcmpgt>
 8020aa4:	b138      	cbz	r0, 8020ab6 <floor+0x46>
 8020aa6:	2c00      	cmp	r4, #0
 8020aa8:	da57      	bge.n	8020b5a <floor+0xea>
 8020aaa:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8020aae:	431d      	orrs	r5, r3
 8020ab0:	d001      	beq.n	8020ab6 <floor+0x46>
 8020ab2:	4c2d      	ldr	r4, [pc, #180]	; (8020b68 <floor+0xf8>)
 8020ab4:	2500      	movs	r5, #0
 8020ab6:	4621      	mov	r1, r4
 8020ab8:	4628      	mov	r0, r5
 8020aba:	e025      	b.n	8020b08 <floor+0x98>
 8020abc:	4f2b      	ldr	r7, [pc, #172]	; (8020b6c <floor+0xfc>)
 8020abe:	4137      	asrs	r7, r6
 8020ac0:	ea01 0307 	and.w	r3, r1, r7
 8020ac4:	4303      	orrs	r3, r0
 8020ac6:	d01f      	beq.n	8020b08 <floor+0x98>
 8020ac8:	a325      	add	r3, pc, #148	; (adr r3, 8020b60 <floor+0xf0>)
 8020aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020ace:	f7df fbe7 	bl	80002a0 <__adddf3>
 8020ad2:	2200      	movs	r2, #0
 8020ad4:	2300      	movs	r3, #0
 8020ad6:	f7e0 f829 	bl	8000b2c <__aeabi_dcmpgt>
 8020ada:	2800      	cmp	r0, #0
 8020adc:	d0eb      	beq.n	8020ab6 <floor+0x46>
 8020ade:	2c00      	cmp	r4, #0
 8020ae0:	bfbe      	ittt	lt
 8020ae2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8020ae6:	fa43 f606 	asrlt.w	r6, r3, r6
 8020aea:	19a4      	addlt	r4, r4, r6
 8020aec:	ea24 0407 	bic.w	r4, r4, r7
 8020af0:	2500      	movs	r5, #0
 8020af2:	e7e0      	b.n	8020ab6 <floor+0x46>
 8020af4:	2e33      	cmp	r6, #51	; 0x33
 8020af6:	dd0b      	ble.n	8020b10 <floor+0xa0>
 8020af8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8020afc:	d104      	bne.n	8020b08 <floor+0x98>
 8020afe:	ee10 2a10 	vmov	r2, s0
 8020b02:	460b      	mov	r3, r1
 8020b04:	f7df fbcc 	bl	80002a0 <__adddf3>
 8020b08:	ec41 0b10 	vmov	d0, r0, r1
 8020b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020b10:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8020b14:	f04f 33ff 	mov.w	r3, #4294967295
 8020b18:	fa23 f707 	lsr.w	r7, r3, r7
 8020b1c:	4207      	tst	r7, r0
 8020b1e:	d0f3      	beq.n	8020b08 <floor+0x98>
 8020b20:	a30f      	add	r3, pc, #60	; (adr r3, 8020b60 <floor+0xf0>)
 8020b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020b26:	f7df fbbb 	bl	80002a0 <__adddf3>
 8020b2a:	2200      	movs	r2, #0
 8020b2c:	2300      	movs	r3, #0
 8020b2e:	f7df fffd 	bl	8000b2c <__aeabi_dcmpgt>
 8020b32:	2800      	cmp	r0, #0
 8020b34:	d0bf      	beq.n	8020ab6 <floor+0x46>
 8020b36:	2c00      	cmp	r4, #0
 8020b38:	da02      	bge.n	8020b40 <floor+0xd0>
 8020b3a:	2e14      	cmp	r6, #20
 8020b3c:	d103      	bne.n	8020b46 <floor+0xd6>
 8020b3e:	3401      	adds	r4, #1
 8020b40:	ea25 0507 	bic.w	r5, r5, r7
 8020b44:	e7b7      	b.n	8020ab6 <floor+0x46>
 8020b46:	2301      	movs	r3, #1
 8020b48:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8020b4c:	fa03 f606 	lsl.w	r6, r3, r6
 8020b50:	4435      	add	r5, r6
 8020b52:	4545      	cmp	r5, r8
 8020b54:	bf38      	it	cc
 8020b56:	18e4      	addcc	r4, r4, r3
 8020b58:	e7f2      	b.n	8020b40 <floor+0xd0>
 8020b5a:	2500      	movs	r5, #0
 8020b5c:	462c      	mov	r4, r5
 8020b5e:	e7aa      	b.n	8020ab6 <floor+0x46>
 8020b60:	8800759c 	.word	0x8800759c
 8020b64:	7e37e43c 	.word	0x7e37e43c
 8020b68:	bff00000 	.word	0xbff00000
 8020b6c:	000fffff 	.word	0x000fffff

08020b70 <frexp>:
 8020b70:	b570      	push	{r4, r5, r6, lr}
 8020b72:	2100      	movs	r1, #0
 8020b74:	ec55 4b10 	vmov	r4, r5, d0
 8020b78:	6001      	str	r1, [r0, #0]
 8020b7a:	4916      	ldr	r1, [pc, #88]	; (8020bd4 <frexp+0x64>)
 8020b7c:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8020b80:	428a      	cmp	r2, r1
 8020b82:	4606      	mov	r6, r0
 8020b84:	462b      	mov	r3, r5
 8020b86:	dc22      	bgt.n	8020bce <frexp+0x5e>
 8020b88:	ee10 1a10 	vmov	r1, s0
 8020b8c:	4311      	orrs	r1, r2
 8020b8e:	d01e      	beq.n	8020bce <frexp+0x5e>
 8020b90:	4911      	ldr	r1, [pc, #68]	; (8020bd8 <frexp+0x68>)
 8020b92:	4029      	ands	r1, r5
 8020b94:	b969      	cbnz	r1, 8020bb2 <frexp+0x42>
 8020b96:	4b11      	ldr	r3, [pc, #68]	; (8020bdc <frexp+0x6c>)
 8020b98:	2200      	movs	r2, #0
 8020b9a:	ee10 0a10 	vmov	r0, s0
 8020b9e:	4629      	mov	r1, r5
 8020ba0:	f7df fd34 	bl	800060c <__aeabi_dmul>
 8020ba4:	460b      	mov	r3, r1
 8020ba6:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8020baa:	f06f 0135 	mvn.w	r1, #53	; 0x35
 8020bae:	4604      	mov	r4, r0
 8020bb0:	6031      	str	r1, [r6, #0]
 8020bb2:	6831      	ldr	r1, [r6, #0]
 8020bb4:	1512      	asrs	r2, r2, #20
 8020bb6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8020bba:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 8020bbe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8020bc2:	440a      	add	r2, r1
 8020bc4:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 8020bc8:	6032      	str	r2, [r6, #0]
 8020bca:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 8020bce:	ec45 4b10 	vmov	d0, r4, r5
 8020bd2:	bd70      	pop	{r4, r5, r6, pc}
 8020bd4:	7fefffff 	.word	0x7fefffff
 8020bd8:	7ff00000 	.word	0x7ff00000
 8020bdc:	43500000 	.word	0x43500000

08020be0 <round>:
 8020be0:	ec51 0b10 	vmov	r0, r1, d0
 8020be4:	b570      	push	{r4, r5, r6, lr}
 8020be6:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8020bea:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8020bee:	2c13      	cmp	r4, #19
 8020bf0:	ee10 2a10 	vmov	r2, s0
 8020bf4:	460b      	mov	r3, r1
 8020bf6:	dc19      	bgt.n	8020c2c <round+0x4c>
 8020bf8:	2c00      	cmp	r4, #0
 8020bfa:	da09      	bge.n	8020c10 <round+0x30>
 8020bfc:	3401      	adds	r4, #1
 8020bfe:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8020c02:	d103      	bne.n	8020c0c <round+0x2c>
 8020c04:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8020c08:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8020c0c:	2200      	movs	r2, #0
 8020c0e:	e028      	b.n	8020c62 <round+0x82>
 8020c10:	4d15      	ldr	r5, [pc, #84]	; (8020c68 <round+0x88>)
 8020c12:	4125      	asrs	r5, r4
 8020c14:	ea01 0605 	and.w	r6, r1, r5
 8020c18:	4332      	orrs	r2, r6
 8020c1a:	d00e      	beq.n	8020c3a <round+0x5a>
 8020c1c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8020c20:	fa42 f404 	asr.w	r4, r2, r4
 8020c24:	4423      	add	r3, r4
 8020c26:	ea23 0305 	bic.w	r3, r3, r5
 8020c2a:	e7ef      	b.n	8020c0c <round+0x2c>
 8020c2c:	2c33      	cmp	r4, #51	; 0x33
 8020c2e:	dd07      	ble.n	8020c40 <round+0x60>
 8020c30:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8020c34:	d101      	bne.n	8020c3a <round+0x5a>
 8020c36:	f7df fb33 	bl	80002a0 <__adddf3>
 8020c3a:	ec41 0b10 	vmov	d0, r0, r1
 8020c3e:	bd70      	pop	{r4, r5, r6, pc}
 8020c40:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8020c44:	f04f 35ff 	mov.w	r5, #4294967295
 8020c48:	40f5      	lsrs	r5, r6
 8020c4a:	4228      	tst	r0, r5
 8020c4c:	d0f5      	beq.n	8020c3a <round+0x5a>
 8020c4e:	2101      	movs	r1, #1
 8020c50:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8020c54:	fa01 f404 	lsl.w	r4, r1, r4
 8020c58:	1912      	adds	r2, r2, r4
 8020c5a:	bf28      	it	cs
 8020c5c:	185b      	addcs	r3, r3, r1
 8020c5e:	ea22 0205 	bic.w	r2, r2, r5
 8020c62:	4619      	mov	r1, r3
 8020c64:	4610      	mov	r0, r2
 8020c66:	e7e8      	b.n	8020c3a <round+0x5a>
 8020c68:	000fffff 	.word	0x000fffff
 8020c6c:	00000000 	.word	0x00000000

08020c70 <sin>:
 8020c70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8020c72:	ec53 2b10 	vmov	r2, r3, d0
 8020c76:	4828      	ldr	r0, [pc, #160]	; (8020d18 <sin+0xa8>)
 8020c78:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8020c7c:	4281      	cmp	r1, r0
 8020c7e:	dc07      	bgt.n	8020c90 <sin+0x20>
 8020c80:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8020d10 <sin+0xa0>
 8020c84:	2000      	movs	r0, #0
 8020c86:	b005      	add	sp, #20
 8020c88:	f85d eb04 	ldr.w	lr, [sp], #4
 8020c8c:	f002 b804 	b.w	8022c98 <__kernel_sin>
 8020c90:	4822      	ldr	r0, [pc, #136]	; (8020d1c <sin+0xac>)
 8020c92:	4281      	cmp	r1, r0
 8020c94:	dd09      	ble.n	8020caa <sin+0x3a>
 8020c96:	ee10 0a10 	vmov	r0, s0
 8020c9a:	4619      	mov	r1, r3
 8020c9c:	f7df fafe 	bl	800029c <__aeabi_dsub>
 8020ca0:	ec41 0b10 	vmov	d0, r0, r1
 8020ca4:	b005      	add	sp, #20
 8020ca6:	f85d fb04 	ldr.w	pc, [sp], #4
 8020caa:	4668      	mov	r0, sp
 8020cac:	f000 ff04 	bl	8021ab8 <__ieee754_rem_pio2>
 8020cb0:	f000 0003 	and.w	r0, r0, #3
 8020cb4:	2801      	cmp	r0, #1
 8020cb6:	d00c      	beq.n	8020cd2 <sin+0x62>
 8020cb8:	2802      	cmp	r0, #2
 8020cba:	d011      	beq.n	8020ce0 <sin+0x70>
 8020cbc:	b9f0      	cbnz	r0, 8020cfc <sin+0x8c>
 8020cbe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8020cc2:	ed9d 0b00 	vldr	d0, [sp]
 8020cc6:	2001      	movs	r0, #1
 8020cc8:	f001 ffe6 	bl	8022c98 <__kernel_sin>
 8020ccc:	ec51 0b10 	vmov	r0, r1, d0
 8020cd0:	e7e6      	b.n	8020ca0 <sin+0x30>
 8020cd2:	ed9d 1b02 	vldr	d1, [sp, #8]
 8020cd6:	ed9d 0b00 	vldr	d0, [sp]
 8020cda:	f001 fbc5 	bl	8022468 <__kernel_cos>
 8020cde:	e7f5      	b.n	8020ccc <sin+0x5c>
 8020ce0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8020ce4:	ed9d 0b00 	vldr	d0, [sp]
 8020ce8:	2001      	movs	r0, #1
 8020cea:	f001 ffd5 	bl	8022c98 <__kernel_sin>
 8020cee:	ec53 2b10 	vmov	r2, r3, d0
 8020cf2:	ee10 0a10 	vmov	r0, s0
 8020cf6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8020cfa:	e7d1      	b.n	8020ca0 <sin+0x30>
 8020cfc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8020d00:	ed9d 0b00 	vldr	d0, [sp]
 8020d04:	f001 fbb0 	bl	8022468 <__kernel_cos>
 8020d08:	e7f1      	b.n	8020cee <sin+0x7e>
 8020d0a:	bf00      	nop
 8020d0c:	f3af 8000 	nop.w
	...
 8020d18:	3fe921fb 	.word	0x3fe921fb
 8020d1c:	7fefffff 	.word	0x7fefffff

08020d20 <tan>:
 8020d20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8020d22:	ec53 2b10 	vmov	r2, r3, d0
 8020d26:	4816      	ldr	r0, [pc, #88]	; (8020d80 <tan+0x60>)
 8020d28:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8020d2c:	4281      	cmp	r1, r0
 8020d2e:	dc07      	bgt.n	8020d40 <tan+0x20>
 8020d30:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8020d78 <tan+0x58>
 8020d34:	2001      	movs	r0, #1
 8020d36:	b005      	add	sp, #20
 8020d38:	f85d eb04 	ldr.w	lr, [sp], #4
 8020d3c:	f002 b86c 	b.w	8022e18 <__kernel_tan>
 8020d40:	4810      	ldr	r0, [pc, #64]	; (8020d84 <tan+0x64>)
 8020d42:	4281      	cmp	r1, r0
 8020d44:	dd09      	ble.n	8020d5a <tan+0x3a>
 8020d46:	ee10 0a10 	vmov	r0, s0
 8020d4a:	4619      	mov	r1, r3
 8020d4c:	f7df faa6 	bl	800029c <__aeabi_dsub>
 8020d50:	ec41 0b10 	vmov	d0, r0, r1
 8020d54:	b005      	add	sp, #20
 8020d56:	f85d fb04 	ldr.w	pc, [sp], #4
 8020d5a:	4668      	mov	r0, sp
 8020d5c:	f000 feac 	bl	8021ab8 <__ieee754_rem_pio2>
 8020d60:	0040      	lsls	r0, r0, #1
 8020d62:	f000 0002 	and.w	r0, r0, #2
 8020d66:	ed9d 1b02 	vldr	d1, [sp, #8]
 8020d6a:	ed9d 0b00 	vldr	d0, [sp]
 8020d6e:	f1c0 0001 	rsb	r0, r0, #1
 8020d72:	f002 f851 	bl	8022e18 <__kernel_tan>
 8020d76:	e7ed      	b.n	8020d54 <tan+0x34>
	...
 8020d80:	3fe921fb 	.word	0x3fe921fb
 8020d84:	7fefffff 	.word	0x7fefffff

08020d88 <frexpf>:
 8020d88:	ee10 3a10 	vmov	r3, s0
 8020d8c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8020d90:	2100      	movs	r1, #0
 8020d92:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8020d96:	6001      	str	r1, [r0, #0]
 8020d98:	da19      	bge.n	8020dce <frexpf+0x46>
 8020d9a:	b1c2      	cbz	r2, 8020dce <frexpf+0x46>
 8020d9c:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8020da0:	d10a      	bne.n	8020db8 <frexpf+0x30>
 8020da2:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8020dd0 <frexpf+0x48>
 8020da6:	ee60 7a27 	vmul.f32	s15, s0, s15
 8020daa:	f06f 0118 	mvn.w	r1, #24
 8020dae:	ee17 3a90 	vmov	r3, s15
 8020db2:	6001      	str	r1, [r0, #0]
 8020db4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8020db8:	6801      	ldr	r1, [r0, #0]
 8020dba:	15d2      	asrs	r2, r2, #23
 8020dbc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8020dc0:	3a7e      	subs	r2, #126	; 0x7e
 8020dc2:	f043 537c 	orr.w	r3, r3, #1056964608	; 0x3f000000
 8020dc6:	440a      	add	r2, r1
 8020dc8:	ee00 3a10 	vmov	s0, r3
 8020dcc:	6002      	str	r2, [r0, #0]
 8020dce:	4770      	bx	lr
 8020dd0:	4c000000 	.word	0x4c000000

08020dd4 <roundf>:
 8020dd4:	ee10 0a10 	vmov	r0, s0
 8020dd8:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8020ddc:	3a7f      	subs	r2, #127	; 0x7f
 8020dde:	2a16      	cmp	r2, #22
 8020de0:	dc15      	bgt.n	8020e0e <roundf+0x3a>
 8020de2:	2a00      	cmp	r2, #0
 8020de4:	da08      	bge.n	8020df8 <roundf+0x24>
 8020de6:	3201      	adds	r2, #1
 8020de8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8020dec:	d101      	bne.n	8020df2 <roundf+0x1e>
 8020dee:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8020df2:	ee00 3a10 	vmov	s0, r3
 8020df6:	4770      	bx	lr
 8020df8:	4907      	ldr	r1, [pc, #28]	; (8020e18 <roundf+0x44>)
 8020dfa:	4111      	asrs	r1, r2
 8020dfc:	4208      	tst	r0, r1
 8020dfe:	d0fa      	beq.n	8020df6 <roundf+0x22>
 8020e00:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8020e04:	4113      	asrs	r3, r2
 8020e06:	4403      	add	r3, r0
 8020e08:	ea23 0301 	bic.w	r3, r3, r1
 8020e0c:	e7f1      	b.n	8020df2 <roundf+0x1e>
 8020e0e:	2a80      	cmp	r2, #128	; 0x80
 8020e10:	d1f1      	bne.n	8020df6 <roundf+0x22>
 8020e12:	ee30 0a00 	vadd.f32	s0, s0, s0
 8020e16:	4770      	bx	lr
 8020e18:	007fffff 	.word	0x007fffff

08020e1c <pow>:
 8020e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020e1e:	ed2d 8b02 	vpush	{d8}
 8020e22:	eeb0 8a40 	vmov.f32	s16, s0
 8020e26:	eef0 8a60 	vmov.f32	s17, s1
 8020e2a:	ec55 4b11 	vmov	r4, r5, d1
 8020e2e:	f000 f913 	bl	8021058 <__ieee754_pow>
 8020e32:	4622      	mov	r2, r4
 8020e34:	462b      	mov	r3, r5
 8020e36:	4620      	mov	r0, r4
 8020e38:	4629      	mov	r1, r5
 8020e3a:	ec57 6b10 	vmov	r6, r7, d0
 8020e3e:	f7df fe7f 	bl	8000b40 <__aeabi_dcmpun>
 8020e42:	2800      	cmp	r0, #0
 8020e44:	d13b      	bne.n	8020ebe <pow+0xa2>
 8020e46:	ec51 0b18 	vmov	r0, r1, d8
 8020e4a:	2200      	movs	r2, #0
 8020e4c:	2300      	movs	r3, #0
 8020e4e:	f7df fe45 	bl	8000adc <__aeabi_dcmpeq>
 8020e52:	b1b8      	cbz	r0, 8020e84 <pow+0x68>
 8020e54:	2200      	movs	r2, #0
 8020e56:	2300      	movs	r3, #0
 8020e58:	4620      	mov	r0, r4
 8020e5a:	4629      	mov	r1, r5
 8020e5c:	f7df fe3e 	bl	8000adc <__aeabi_dcmpeq>
 8020e60:	2800      	cmp	r0, #0
 8020e62:	d146      	bne.n	8020ef2 <pow+0xd6>
 8020e64:	ec45 4b10 	vmov	d0, r4, r5
 8020e68:	f002 fa3b 	bl	80232e2 <finite>
 8020e6c:	b338      	cbz	r0, 8020ebe <pow+0xa2>
 8020e6e:	2200      	movs	r2, #0
 8020e70:	2300      	movs	r3, #0
 8020e72:	4620      	mov	r0, r4
 8020e74:	4629      	mov	r1, r5
 8020e76:	f7df fe3b 	bl	8000af0 <__aeabi_dcmplt>
 8020e7a:	b300      	cbz	r0, 8020ebe <pow+0xa2>
 8020e7c:	f002 fb10 	bl	80234a0 <__errno>
 8020e80:	2322      	movs	r3, #34	; 0x22
 8020e82:	e01b      	b.n	8020ebc <pow+0xa0>
 8020e84:	ec47 6b10 	vmov	d0, r6, r7
 8020e88:	f002 fa2b 	bl	80232e2 <finite>
 8020e8c:	b9e0      	cbnz	r0, 8020ec8 <pow+0xac>
 8020e8e:	eeb0 0a48 	vmov.f32	s0, s16
 8020e92:	eef0 0a68 	vmov.f32	s1, s17
 8020e96:	f002 fa24 	bl	80232e2 <finite>
 8020e9a:	b1a8      	cbz	r0, 8020ec8 <pow+0xac>
 8020e9c:	ec45 4b10 	vmov	d0, r4, r5
 8020ea0:	f002 fa1f 	bl	80232e2 <finite>
 8020ea4:	b180      	cbz	r0, 8020ec8 <pow+0xac>
 8020ea6:	4632      	mov	r2, r6
 8020ea8:	463b      	mov	r3, r7
 8020eaa:	4630      	mov	r0, r6
 8020eac:	4639      	mov	r1, r7
 8020eae:	f7df fe47 	bl	8000b40 <__aeabi_dcmpun>
 8020eb2:	2800      	cmp	r0, #0
 8020eb4:	d0e2      	beq.n	8020e7c <pow+0x60>
 8020eb6:	f002 faf3 	bl	80234a0 <__errno>
 8020eba:	2321      	movs	r3, #33	; 0x21
 8020ebc:	6003      	str	r3, [r0, #0]
 8020ebe:	ecbd 8b02 	vpop	{d8}
 8020ec2:	ec47 6b10 	vmov	d0, r6, r7
 8020ec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020ec8:	2200      	movs	r2, #0
 8020eca:	2300      	movs	r3, #0
 8020ecc:	4630      	mov	r0, r6
 8020ece:	4639      	mov	r1, r7
 8020ed0:	f7df fe04 	bl	8000adc <__aeabi_dcmpeq>
 8020ed4:	2800      	cmp	r0, #0
 8020ed6:	d0f2      	beq.n	8020ebe <pow+0xa2>
 8020ed8:	eeb0 0a48 	vmov.f32	s0, s16
 8020edc:	eef0 0a68 	vmov.f32	s1, s17
 8020ee0:	f002 f9ff 	bl	80232e2 <finite>
 8020ee4:	2800      	cmp	r0, #0
 8020ee6:	d0ea      	beq.n	8020ebe <pow+0xa2>
 8020ee8:	ec45 4b10 	vmov	d0, r4, r5
 8020eec:	f002 f9f9 	bl	80232e2 <finite>
 8020ef0:	e7c3      	b.n	8020e7a <pow+0x5e>
 8020ef2:	4f01      	ldr	r7, [pc, #4]	; (8020ef8 <pow+0xdc>)
 8020ef4:	2600      	movs	r6, #0
 8020ef6:	e7e2      	b.n	8020ebe <pow+0xa2>
 8020ef8:	3ff00000 	.word	0x3ff00000

08020efc <sqrt>:
 8020efc:	b538      	push	{r3, r4, r5, lr}
 8020efe:	ed2d 8b02 	vpush	{d8}
 8020f02:	ec55 4b10 	vmov	r4, r5, d0
 8020f06:	f000 ffe3 	bl	8021ed0 <__ieee754_sqrt>
 8020f0a:	4622      	mov	r2, r4
 8020f0c:	462b      	mov	r3, r5
 8020f0e:	4620      	mov	r0, r4
 8020f10:	4629      	mov	r1, r5
 8020f12:	eeb0 8a40 	vmov.f32	s16, s0
 8020f16:	eef0 8a60 	vmov.f32	s17, s1
 8020f1a:	f7df fe11 	bl	8000b40 <__aeabi_dcmpun>
 8020f1e:	b990      	cbnz	r0, 8020f46 <sqrt+0x4a>
 8020f20:	2200      	movs	r2, #0
 8020f22:	2300      	movs	r3, #0
 8020f24:	4620      	mov	r0, r4
 8020f26:	4629      	mov	r1, r5
 8020f28:	f7df fde2 	bl	8000af0 <__aeabi_dcmplt>
 8020f2c:	b158      	cbz	r0, 8020f46 <sqrt+0x4a>
 8020f2e:	f002 fab7 	bl	80234a0 <__errno>
 8020f32:	2321      	movs	r3, #33	; 0x21
 8020f34:	6003      	str	r3, [r0, #0]
 8020f36:	2200      	movs	r2, #0
 8020f38:	2300      	movs	r3, #0
 8020f3a:	4610      	mov	r0, r2
 8020f3c:	4619      	mov	r1, r3
 8020f3e:	f7df fc8f 	bl	8000860 <__aeabi_ddiv>
 8020f42:	ec41 0b18 	vmov	d8, r0, r1
 8020f46:	eeb0 0a48 	vmov.f32	s0, s16
 8020f4a:	eef0 0a68 	vmov.f32	s1, s17
 8020f4e:	ecbd 8b02 	vpop	{d8}
 8020f52:	bd38      	pop	{r3, r4, r5, pc}

08020f54 <expf>:
 8020f54:	b508      	push	{r3, lr}
 8020f56:	ed2d 8b02 	vpush	{d8}
 8020f5a:	eef0 8a40 	vmov.f32	s17, s0
 8020f5e:	f001 f869 	bl	8022034 <__ieee754_expf>
 8020f62:	eeb0 8a40 	vmov.f32	s16, s0
 8020f66:	eeb0 0a68 	vmov.f32	s0, s17
 8020f6a:	f002 fa53 	bl	8023414 <finitef>
 8020f6e:	b160      	cbz	r0, 8020f8a <expf+0x36>
 8020f70:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8020fb0 <expf+0x5c>
 8020f74:	eef4 8ae7 	vcmpe.f32	s17, s15
 8020f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020f7c:	dd0a      	ble.n	8020f94 <expf+0x40>
 8020f7e:	f002 fa8f 	bl	80234a0 <__errno>
 8020f82:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8020fb4 <expf+0x60>
 8020f86:	2322      	movs	r3, #34	; 0x22
 8020f88:	6003      	str	r3, [r0, #0]
 8020f8a:	eeb0 0a48 	vmov.f32	s0, s16
 8020f8e:	ecbd 8b02 	vpop	{d8}
 8020f92:	bd08      	pop	{r3, pc}
 8020f94:	eddf 7a08 	vldr	s15, [pc, #32]	; 8020fb8 <expf+0x64>
 8020f98:	eef4 8ae7 	vcmpe.f32	s17, s15
 8020f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020fa0:	d5f3      	bpl.n	8020f8a <expf+0x36>
 8020fa2:	f002 fa7d 	bl	80234a0 <__errno>
 8020fa6:	2322      	movs	r3, #34	; 0x22
 8020fa8:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8020fbc <expf+0x68>
 8020fac:	6003      	str	r3, [r0, #0]
 8020fae:	e7ec      	b.n	8020f8a <expf+0x36>
 8020fb0:	42b17180 	.word	0x42b17180
 8020fb4:	7f800000 	.word	0x7f800000
 8020fb8:	c2cff1b5 	.word	0xc2cff1b5
 8020fbc:	00000000 	.word	0x00000000

08020fc0 <log10f>:
 8020fc0:	b508      	push	{r3, lr}
 8020fc2:	ed2d 8b02 	vpush	{d8}
 8020fc6:	eeb0 8a40 	vmov.f32	s16, s0
 8020fca:	f001 f9f1 	bl	80223b0 <__ieee754_log10f>
 8020fce:	eeb4 8a48 	vcmp.f32	s16, s16
 8020fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020fd6:	d60f      	bvs.n	8020ff8 <log10f+0x38>
 8020fd8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8020fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020fe0:	d80a      	bhi.n	8020ff8 <log10f+0x38>
 8020fe2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8020fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020fea:	d108      	bne.n	8020ffe <log10f+0x3e>
 8020fec:	f002 fa58 	bl	80234a0 <__errno>
 8020ff0:	2322      	movs	r3, #34	; 0x22
 8020ff2:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8021014 <log10f+0x54>
 8020ff6:	6003      	str	r3, [r0, #0]
 8020ff8:	ecbd 8b02 	vpop	{d8}
 8020ffc:	bd08      	pop	{r3, pc}
 8020ffe:	f002 fa4f 	bl	80234a0 <__errno>
 8021002:	ecbd 8b02 	vpop	{d8}
 8021006:	2321      	movs	r3, #33	; 0x21
 8021008:	6003      	str	r3, [r0, #0]
 802100a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 802100e:	4802      	ldr	r0, [pc, #8]	; (8021018 <log10f+0x58>)
 8021010:	f002 ba0e 	b.w	8023430 <nanf>
 8021014:	ff800000 	.word	0xff800000
 8021018:	08029fab 	.word	0x08029fab

0802101c <sqrtf>:
 802101c:	b508      	push	{r3, lr}
 802101e:	ed2d 8b02 	vpush	{d8}
 8021022:	eeb0 8a40 	vmov.f32	s16, s0
 8021026:	f001 fa1b 	bl	8022460 <__ieee754_sqrtf>
 802102a:	eeb4 8a48 	vcmp.f32	s16, s16
 802102e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021032:	d60c      	bvs.n	802104e <sqrtf+0x32>
 8021034:	eddf 8a07 	vldr	s17, [pc, #28]	; 8021054 <sqrtf+0x38>
 8021038:	eeb4 8ae8 	vcmpe.f32	s16, s17
 802103c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021040:	d505      	bpl.n	802104e <sqrtf+0x32>
 8021042:	f002 fa2d 	bl	80234a0 <__errno>
 8021046:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 802104a:	2321      	movs	r3, #33	; 0x21
 802104c:	6003      	str	r3, [r0, #0]
 802104e:	ecbd 8b02 	vpop	{d8}
 8021052:	bd08      	pop	{r3, pc}
 8021054:	00000000 	.word	0x00000000

08021058 <__ieee754_pow>:
 8021058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802105c:	ed2d 8b06 	vpush	{d8-d10}
 8021060:	b089      	sub	sp, #36	; 0x24
 8021062:	ed8d 1b00 	vstr	d1, [sp]
 8021066:	e9dd 2900 	ldrd	r2, r9, [sp]
 802106a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 802106e:	ea58 0102 	orrs.w	r1, r8, r2
 8021072:	ec57 6b10 	vmov	r6, r7, d0
 8021076:	d115      	bne.n	80210a4 <__ieee754_pow+0x4c>
 8021078:	19b3      	adds	r3, r6, r6
 802107a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 802107e:	4152      	adcs	r2, r2
 8021080:	4299      	cmp	r1, r3
 8021082:	4b89      	ldr	r3, [pc, #548]	; (80212a8 <__ieee754_pow+0x250>)
 8021084:	4193      	sbcs	r3, r2
 8021086:	f080 84d2 	bcs.w	8021a2e <__ieee754_pow+0x9d6>
 802108a:	e9dd 2300 	ldrd	r2, r3, [sp]
 802108e:	4630      	mov	r0, r6
 8021090:	4639      	mov	r1, r7
 8021092:	f7df f905 	bl	80002a0 <__adddf3>
 8021096:	ec41 0b10 	vmov	d0, r0, r1
 802109a:	b009      	add	sp, #36	; 0x24
 802109c:	ecbd 8b06 	vpop	{d8-d10}
 80210a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80210a4:	4b81      	ldr	r3, [pc, #516]	; (80212ac <__ieee754_pow+0x254>)
 80210a6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80210aa:	429c      	cmp	r4, r3
 80210ac:	ee10 aa10 	vmov	sl, s0
 80210b0:	463d      	mov	r5, r7
 80210b2:	dc06      	bgt.n	80210c2 <__ieee754_pow+0x6a>
 80210b4:	d101      	bne.n	80210ba <__ieee754_pow+0x62>
 80210b6:	2e00      	cmp	r6, #0
 80210b8:	d1e7      	bne.n	802108a <__ieee754_pow+0x32>
 80210ba:	4598      	cmp	r8, r3
 80210bc:	dc01      	bgt.n	80210c2 <__ieee754_pow+0x6a>
 80210be:	d10f      	bne.n	80210e0 <__ieee754_pow+0x88>
 80210c0:	b172      	cbz	r2, 80210e0 <__ieee754_pow+0x88>
 80210c2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80210c6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80210ca:	ea55 050a 	orrs.w	r5, r5, sl
 80210ce:	d1dc      	bne.n	802108a <__ieee754_pow+0x32>
 80210d0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80210d4:	18db      	adds	r3, r3, r3
 80210d6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80210da:	4152      	adcs	r2, r2
 80210dc:	429d      	cmp	r5, r3
 80210de:	e7d0      	b.n	8021082 <__ieee754_pow+0x2a>
 80210e0:	2d00      	cmp	r5, #0
 80210e2:	da3b      	bge.n	802115c <__ieee754_pow+0x104>
 80210e4:	4b72      	ldr	r3, [pc, #456]	; (80212b0 <__ieee754_pow+0x258>)
 80210e6:	4598      	cmp	r8, r3
 80210e8:	dc51      	bgt.n	802118e <__ieee754_pow+0x136>
 80210ea:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80210ee:	4598      	cmp	r8, r3
 80210f0:	f340 84ac 	ble.w	8021a4c <__ieee754_pow+0x9f4>
 80210f4:	ea4f 5328 	mov.w	r3, r8, asr #20
 80210f8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80210fc:	2b14      	cmp	r3, #20
 80210fe:	dd0f      	ble.n	8021120 <__ieee754_pow+0xc8>
 8021100:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8021104:	fa22 f103 	lsr.w	r1, r2, r3
 8021108:	fa01 f303 	lsl.w	r3, r1, r3
 802110c:	4293      	cmp	r3, r2
 802110e:	f040 849d 	bne.w	8021a4c <__ieee754_pow+0x9f4>
 8021112:	f001 0101 	and.w	r1, r1, #1
 8021116:	f1c1 0302 	rsb	r3, r1, #2
 802111a:	9304      	str	r3, [sp, #16]
 802111c:	b182      	cbz	r2, 8021140 <__ieee754_pow+0xe8>
 802111e:	e05f      	b.n	80211e0 <__ieee754_pow+0x188>
 8021120:	2a00      	cmp	r2, #0
 8021122:	d15b      	bne.n	80211dc <__ieee754_pow+0x184>
 8021124:	f1c3 0314 	rsb	r3, r3, #20
 8021128:	fa48 f103 	asr.w	r1, r8, r3
 802112c:	fa01 f303 	lsl.w	r3, r1, r3
 8021130:	4543      	cmp	r3, r8
 8021132:	f040 8488 	bne.w	8021a46 <__ieee754_pow+0x9ee>
 8021136:	f001 0101 	and.w	r1, r1, #1
 802113a:	f1c1 0302 	rsb	r3, r1, #2
 802113e:	9304      	str	r3, [sp, #16]
 8021140:	4b5c      	ldr	r3, [pc, #368]	; (80212b4 <__ieee754_pow+0x25c>)
 8021142:	4598      	cmp	r8, r3
 8021144:	d132      	bne.n	80211ac <__ieee754_pow+0x154>
 8021146:	f1b9 0f00 	cmp.w	r9, #0
 802114a:	f280 8478 	bge.w	8021a3e <__ieee754_pow+0x9e6>
 802114e:	4959      	ldr	r1, [pc, #356]	; (80212b4 <__ieee754_pow+0x25c>)
 8021150:	4632      	mov	r2, r6
 8021152:	463b      	mov	r3, r7
 8021154:	2000      	movs	r0, #0
 8021156:	f7df fb83 	bl	8000860 <__aeabi_ddiv>
 802115a:	e79c      	b.n	8021096 <__ieee754_pow+0x3e>
 802115c:	2300      	movs	r3, #0
 802115e:	9304      	str	r3, [sp, #16]
 8021160:	2a00      	cmp	r2, #0
 8021162:	d13d      	bne.n	80211e0 <__ieee754_pow+0x188>
 8021164:	4b51      	ldr	r3, [pc, #324]	; (80212ac <__ieee754_pow+0x254>)
 8021166:	4598      	cmp	r8, r3
 8021168:	d1ea      	bne.n	8021140 <__ieee754_pow+0xe8>
 802116a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 802116e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8021172:	ea53 030a 	orrs.w	r3, r3, sl
 8021176:	f000 845a 	beq.w	8021a2e <__ieee754_pow+0x9d6>
 802117a:	4b4f      	ldr	r3, [pc, #316]	; (80212b8 <__ieee754_pow+0x260>)
 802117c:	429c      	cmp	r4, r3
 802117e:	dd08      	ble.n	8021192 <__ieee754_pow+0x13a>
 8021180:	f1b9 0f00 	cmp.w	r9, #0
 8021184:	f2c0 8457 	blt.w	8021a36 <__ieee754_pow+0x9de>
 8021188:	e9dd 0100 	ldrd	r0, r1, [sp]
 802118c:	e783      	b.n	8021096 <__ieee754_pow+0x3e>
 802118e:	2302      	movs	r3, #2
 8021190:	e7e5      	b.n	802115e <__ieee754_pow+0x106>
 8021192:	f1b9 0f00 	cmp.w	r9, #0
 8021196:	f04f 0000 	mov.w	r0, #0
 802119a:	f04f 0100 	mov.w	r1, #0
 802119e:	f6bf af7a 	bge.w	8021096 <__ieee754_pow+0x3e>
 80211a2:	e9dd 0300 	ldrd	r0, r3, [sp]
 80211a6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80211aa:	e774      	b.n	8021096 <__ieee754_pow+0x3e>
 80211ac:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80211b0:	d106      	bne.n	80211c0 <__ieee754_pow+0x168>
 80211b2:	4632      	mov	r2, r6
 80211b4:	463b      	mov	r3, r7
 80211b6:	4630      	mov	r0, r6
 80211b8:	4639      	mov	r1, r7
 80211ba:	f7df fa27 	bl	800060c <__aeabi_dmul>
 80211be:	e76a      	b.n	8021096 <__ieee754_pow+0x3e>
 80211c0:	4b3e      	ldr	r3, [pc, #248]	; (80212bc <__ieee754_pow+0x264>)
 80211c2:	4599      	cmp	r9, r3
 80211c4:	d10c      	bne.n	80211e0 <__ieee754_pow+0x188>
 80211c6:	2d00      	cmp	r5, #0
 80211c8:	db0a      	blt.n	80211e0 <__ieee754_pow+0x188>
 80211ca:	ec47 6b10 	vmov	d0, r6, r7
 80211ce:	b009      	add	sp, #36	; 0x24
 80211d0:	ecbd 8b06 	vpop	{d8-d10}
 80211d4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80211d8:	f000 be7a 	b.w	8021ed0 <__ieee754_sqrt>
 80211dc:	2300      	movs	r3, #0
 80211de:	9304      	str	r3, [sp, #16]
 80211e0:	ec47 6b10 	vmov	d0, r6, r7
 80211e4:	f002 f874 	bl	80232d0 <fabs>
 80211e8:	ec51 0b10 	vmov	r0, r1, d0
 80211ec:	f1ba 0f00 	cmp.w	sl, #0
 80211f0:	d129      	bne.n	8021246 <__ieee754_pow+0x1ee>
 80211f2:	b124      	cbz	r4, 80211fe <__ieee754_pow+0x1a6>
 80211f4:	4b2f      	ldr	r3, [pc, #188]	; (80212b4 <__ieee754_pow+0x25c>)
 80211f6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80211fa:	429a      	cmp	r2, r3
 80211fc:	d123      	bne.n	8021246 <__ieee754_pow+0x1ee>
 80211fe:	f1b9 0f00 	cmp.w	r9, #0
 8021202:	da05      	bge.n	8021210 <__ieee754_pow+0x1b8>
 8021204:	4602      	mov	r2, r0
 8021206:	460b      	mov	r3, r1
 8021208:	2000      	movs	r0, #0
 802120a:	492a      	ldr	r1, [pc, #168]	; (80212b4 <__ieee754_pow+0x25c>)
 802120c:	f7df fb28 	bl	8000860 <__aeabi_ddiv>
 8021210:	2d00      	cmp	r5, #0
 8021212:	f6bf af40 	bge.w	8021096 <__ieee754_pow+0x3e>
 8021216:	9b04      	ldr	r3, [sp, #16]
 8021218:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 802121c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8021220:	4323      	orrs	r3, r4
 8021222:	d108      	bne.n	8021236 <__ieee754_pow+0x1de>
 8021224:	4602      	mov	r2, r0
 8021226:	460b      	mov	r3, r1
 8021228:	4610      	mov	r0, r2
 802122a:	4619      	mov	r1, r3
 802122c:	f7df f836 	bl	800029c <__aeabi_dsub>
 8021230:	4602      	mov	r2, r0
 8021232:	460b      	mov	r3, r1
 8021234:	e78f      	b.n	8021156 <__ieee754_pow+0xfe>
 8021236:	9b04      	ldr	r3, [sp, #16]
 8021238:	2b01      	cmp	r3, #1
 802123a:	f47f af2c 	bne.w	8021096 <__ieee754_pow+0x3e>
 802123e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8021242:	4619      	mov	r1, r3
 8021244:	e727      	b.n	8021096 <__ieee754_pow+0x3e>
 8021246:	0feb      	lsrs	r3, r5, #31
 8021248:	3b01      	subs	r3, #1
 802124a:	9306      	str	r3, [sp, #24]
 802124c:	9a06      	ldr	r2, [sp, #24]
 802124e:	9b04      	ldr	r3, [sp, #16]
 8021250:	4313      	orrs	r3, r2
 8021252:	d102      	bne.n	802125a <__ieee754_pow+0x202>
 8021254:	4632      	mov	r2, r6
 8021256:	463b      	mov	r3, r7
 8021258:	e7e6      	b.n	8021228 <__ieee754_pow+0x1d0>
 802125a:	4b19      	ldr	r3, [pc, #100]	; (80212c0 <__ieee754_pow+0x268>)
 802125c:	4598      	cmp	r8, r3
 802125e:	f340 80fb 	ble.w	8021458 <__ieee754_pow+0x400>
 8021262:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8021266:	4598      	cmp	r8, r3
 8021268:	4b13      	ldr	r3, [pc, #76]	; (80212b8 <__ieee754_pow+0x260>)
 802126a:	dd0c      	ble.n	8021286 <__ieee754_pow+0x22e>
 802126c:	429c      	cmp	r4, r3
 802126e:	dc0f      	bgt.n	8021290 <__ieee754_pow+0x238>
 8021270:	f1b9 0f00 	cmp.w	r9, #0
 8021274:	da0f      	bge.n	8021296 <__ieee754_pow+0x23e>
 8021276:	2000      	movs	r0, #0
 8021278:	b009      	add	sp, #36	; 0x24
 802127a:	ecbd 8b06 	vpop	{d8-d10}
 802127e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021282:	f001 bffa 	b.w	802327a <__math_oflow>
 8021286:	429c      	cmp	r4, r3
 8021288:	dbf2      	blt.n	8021270 <__ieee754_pow+0x218>
 802128a:	4b0a      	ldr	r3, [pc, #40]	; (80212b4 <__ieee754_pow+0x25c>)
 802128c:	429c      	cmp	r4, r3
 802128e:	dd19      	ble.n	80212c4 <__ieee754_pow+0x26c>
 8021290:	f1b9 0f00 	cmp.w	r9, #0
 8021294:	dcef      	bgt.n	8021276 <__ieee754_pow+0x21e>
 8021296:	2000      	movs	r0, #0
 8021298:	b009      	add	sp, #36	; 0x24
 802129a:	ecbd 8b06 	vpop	{d8-d10}
 802129e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80212a2:	f001 bfe1 	b.w	8023268 <__math_uflow>
 80212a6:	bf00      	nop
 80212a8:	fff00000 	.word	0xfff00000
 80212ac:	7ff00000 	.word	0x7ff00000
 80212b0:	433fffff 	.word	0x433fffff
 80212b4:	3ff00000 	.word	0x3ff00000
 80212b8:	3fefffff 	.word	0x3fefffff
 80212bc:	3fe00000 	.word	0x3fe00000
 80212c0:	41e00000 	.word	0x41e00000
 80212c4:	4b60      	ldr	r3, [pc, #384]	; (8021448 <__ieee754_pow+0x3f0>)
 80212c6:	2200      	movs	r2, #0
 80212c8:	f7de ffe8 	bl	800029c <__aeabi_dsub>
 80212cc:	a354      	add	r3, pc, #336	; (adr r3, 8021420 <__ieee754_pow+0x3c8>)
 80212ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80212d2:	4604      	mov	r4, r0
 80212d4:	460d      	mov	r5, r1
 80212d6:	f7df f999 	bl	800060c <__aeabi_dmul>
 80212da:	a353      	add	r3, pc, #332	; (adr r3, 8021428 <__ieee754_pow+0x3d0>)
 80212dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80212e0:	4606      	mov	r6, r0
 80212e2:	460f      	mov	r7, r1
 80212e4:	4620      	mov	r0, r4
 80212e6:	4629      	mov	r1, r5
 80212e8:	f7df f990 	bl	800060c <__aeabi_dmul>
 80212ec:	4b57      	ldr	r3, [pc, #348]	; (802144c <__ieee754_pow+0x3f4>)
 80212ee:	4682      	mov	sl, r0
 80212f0:	468b      	mov	fp, r1
 80212f2:	2200      	movs	r2, #0
 80212f4:	4620      	mov	r0, r4
 80212f6:	4629      	mov	r1, r5
 80212f8:	f7df f988 	bl	800060c <__aeabi_dmul>
 80212fc:	4602      	mov	r2, r0
 80212fe:	460b      	mov	r3, r1
 8021300:	a14b      	add	r1, pc, #300	; (adr r1, 8021430 <__ieee754_pow+0x3d8>)
 8021302:	e9d1 0100 	ldrd	r0, r1, [r1]
 8021306:	f7de ffc9 	bl	800029c <__aeabi_dsub>
 802130a:	4622      	mov	r2, r4
 802130c:	462b      	mov	r3, r5
 802130e:	f7df f97d 	bl	800060c <__aeabi_dmul>
 8021312:	4602      	mov	r2, r0
 8021314:	460b      	mov	r3, r1
 8021316:	2000      	movs	r0, #0
 8021318:	494d      	ldr	r1, [pc, #308]	; (8021450 <__ieee754_pow+0x3f8>)
 802131a:	f7de ffbf 	bl	800029c <__aeabi_dsub>
 802131e:	4622      	mov	r2, r4
 8021320:	4680      	mov	r8, r0
 8021322:	4689      	mov	r9, r1
 8021324:	462b      	mov	r3, r5
 8021326:	4620      	mov	r0, r4
 8021328:	4629      	mov	r1, r5
 802132a:	f7df f96f 	bl	800060c <__aeabi_dmul>
 802132e:	4602      	mov	r2, r0
 8021330:	460b      	mov	r3, r1
 8021332:	4640      	mov	r0, r8
 8021334:	4649      	mov	r1, r9
 8021336:	f7df f969 	bl	800060c <__aeabi_dmul>
 802133a:	a33f      	add	r3, pc, #252	; (adr r3, 8021438 <__ieee754_pow+0x3e0>)
 802133c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021340:	f7df f964 	bl	800060c <__aeabi_dmul>
 8021344:	4602      	mov	r2, r0
 8021346:	460b      	mov	r3, r1
 8021348:	4650      	mov	r0, sl
 802134a:	4659      	mov	r1, fp
 802134c:	f7de ffa6 	bl	800029c <__aeabi_dsub>
 8021350:	4602      	mov	r2, r0
 8021352:	460b      	mov	r3, r1
 8021354:	4680      	mov	r8, r0
 8021356:	4689      	mov	r9, r1
 8021358:	4630      	mov	r0, r6
 802135a:	4639      	mov	r1, r7
 802135c:	f7de ffa0 	bl	80002a0 <__adddf3>
 8021360:	2000      	movs	r0, #0
 8021362:	4632      	mov	r2, r6
 8021364:	463b      	mov	r3, r7
 8021366:	4604      	mov	r4, r0
 8021368:	460d      	mov	r5, r1
 802136a:	f7de ff97 	bl	800029c <__aeabi_dsub>
 802136e:	4602      	mov	r2, r0
 8021370:	460b      	mov	r3, r1
 8021372:	4640      	mov	r0, r8
 8021374:	4649      	mov	r1, r9
 8021376:	f7de ff91 	bl	800029c <__aeabi_dsub>
 802137a:	9b04      	ldr	r3, [sp, #16]
 802137c:	9a06      	ldr	r2, [sp, #24]
 802137e:	3b01      	subs	r3, #1
 8021380:	4313      	orrs	r3, r2
 8021382:	4682      	mov	sl, r0
 8021384:	468b      	mov	fp, r1
 8021386:	f040 81e7 	bne.w	8021758 <__ieee754_pow+0x700>
 802138a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8021440 <__ieee754_pow+0x3e8>
 802138e:	eeb0 8a47 	vmov.f32	s16, s14
 8021392:	eef0 8a67 	vmov.f32	s17, s15
 8021396:	e9dd 6700 	ldrd	r6, r7, [sp]
 802139a:	2600      	movs	r6, #0
 802139c:	4632      	mov	r2, r6
 802139e:	463b      	mov	r3, r7
 80213a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80213a4:	f7de ff7a 	bl	800029c <__aeabi_dsub>
 80213a8:	4622      	mov	r2, r4
 80213aa:	462b      	mov	r3, r5
 80213ac:	f7df f92e 	bl	800060c <__aeabi_dmul>
 80213b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80213b4:	4680      	mov	r8, r0
 80213b6:	4689      	mov	r9, r1
 80213b8:	4650      	mov	r0, sl
 80213ba:	4659      	mov	r1, fp
 80213bc:	f7df f926 	bl	800060c <__aeabi_dmul>
 80213c0:	4602      	mov	r2, r0
 80213c2:	460b      	mov	r3, r1
 80213c4:	4640      	mov	r0, r8
 80213c6:	4649      	mov	r1, r9
 80213c8:	f7de ff6a 	bl	80002a0 <__adddf3>
 80213cc:	4632      	mov	r2, r6
 80213ce:	463b      	mov	r3, r7
 80213d0:	4680      	mov	r8, r0
 80213d2:	4689      	mov	r9, r1
 80213d4:	4620      	mov	r0, r4
 80213d6:	4629      	mov	r1, r5
 80213d8:	f7df f918 	bl	800060c <__aeabi_dmul>
 80213dc:	460b      	mov	r3, r1
 80213de:	4604      	mov	r4, r0
 80213e0:	460d      	mov	r5, r1
 80213e2:	4602      	mov	r2, r0
 80213e4:	4649      	mov	r1, r9
 80213e6:	4640      	mov	r0, r8
 80213e8:	f7de ff5a 	bl	80002a0 <__adddf3>
 80213ec:	4b19      	ldr	r3, [pc, #100]	; (8021454 <__ieee754_pow+0x3fc>)
 80213ee:	4299      	cmp	r1, r3
 80213f0:	ec45 4b19 	vmov	d9, r4, r5
 80213f4:	4606      	mov	r6, r0
 80213f6:	460f      	mov	r7, r1
 80213f8:	468b      	mov	fp, r1
 80213fa:	f340 82f1 	ble.w	80219e0 <__ieee754_pow+0x988>
 80213fe:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8021402:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8021406:	4303      	orrs	r3, r0
 8021408:	f000 81e4 	beq.w	80217d4 <__ieee754_pow+0x77c>
 802140c:	ec51 0b18 	vmov	r0, r1, d8
 8021410:	2200      	movs	r2, #0
 8021412:	2300      	movs	r3, #0
 8021414:	f7df fb6c 	bl	8000af0 <__aeabi_dcmplt>
 8021418:	3800      	subs	r0, #0
 802141a:	bf18      	it	ne
 802141c:	2001      	movne	r0, #1
 802141e:	e72b      	b.n	8021278 <__ieee754_pow+0x220>
 8021420:	60000000 	.word	0x60000000
 8021424:	3ff71547 	.word	0x3ff71547
 8021428:	f85ddf44 	.word	0xf85ddf44
 802142c:	3e54ae0b 	.word	0x3e54ae0b
 8021430:	55555555 	.word	0x55555555
 8021434:	3fd55555 	.word	0x3fd55555
 8021438:	652b82fe 	.word	0x652b82fe
 802143c:	3ff71547 	.word	0x3ff71547
 8021440:	00000000 	.word	0x00000000
 8021444:	bff00000 	.word	0xbff00000
 8021448:	3ff00000 	.word	0x3ff00000
 802144c:	3fd00000 	.word	0x3fd00000
 8021450:	3fe00000 	.word	0x3fe00000
 8021454:	408fffff 	.word	0x408fffff
 8021458:	4bd5      	ldr	r3, [pc, #852]	; (80217b0 <__ieee754_pow+0x758>)
 802145a:	402b      	ands	r3, r5
 802145c:	2200      	movs	r2, #0
 802145e:	b92b      	cbnz	r3, 802146c <__ieee754_pow+0x414>
 8021460:	4bd4      	ldr	r3, [pc, #848]	; (80217b4 <__ieee754_pow+0x75c>)
 8021462:	f7df f8d3 	bl	800060c <__aeabi_dmul>
 8021466:	f06f 0234 	mvn.w	r2, #52	; 0x34
 802146a:	460c      	mov	r4, r1
 802146c:	1523      	asrs	r3, r4, #20
 802146e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8021472:	4413      	add	r3, r2
 8021474:	9305      	str	r3, [sp, #20]
 8021476:	4bd0      	ldr	r3, [pc, #832]	; (80217b8 <__ieee754_pow+0x760>)
 8021478:	f3c4 0413 	ubfx	r4, r4, #0, #20
 802147c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8021480:	429c      	cmp	r4, r3
 8021482:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8021486:	dd08      	ble.n	802149a <__ieee754_pow+0x442>
 8021488:	4bcc      	ldr	r3, [pc, #816]	; (80217bc <__ieee754_pow+0x764>)
 802148a:	429c      	cmp	r4, r3
 802148c:	f340 8162 	ble.w	8021754 <__ieee754_pow+0x6fc>
 8021490:	9b05      	ldr	r3, [sp, #20]
 8021492:	3301      	adds	r3, #1
 8021494:	9305      	str	r3, [sp, #20]
 8021496:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 802149a:	2400      	movs	r4, #0
 802149c:	00e3      	lsls	r3, r4, #3
 802149e:	9307      	str	r3, [sp, #28]
 80214a0:	4bc7      	ldr	r3, [pc, #796]	; (80217c0 <__ieee754_pow+0x768>)
 80214a2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80214a6:	ed93 7b00 	vldr	d7, [r3]
 80214aa:	4629      	mov	r1, r5
 80214ac:	ec53 2b17 	vmov	r2, r3, d7
 80214b0:	eeb0 9a47 	vmov.f32	s18, s14
 80214b4:	eef0 9a67 	vmov.f32	s19, s15
 80214b8:	4682      	mov	sl, r0
 80214ba:	f7de feef 	bl	800029c <__aeabi_dsub>
 80214be:	4652      	mov	r2, sl
 80214c0:	4606      	mov	r6, r0
 80214c2:	460f      	mov	r7, r1
 80214c4:	462b      	mov	r3, r5
 80214c6:	ec51 0b19 	vmov	r0, r1, d9
 80214ca:	f7de fee9 	bl	80002a0 <__adddf3>
 80214ce:	4602      	mov	r2, r0
 80214d0:	460b      	mov	r3, r1
 80214d2:	2000      	movs	r0, #0
 80214d4:	49bb      	ldr	r1, [pc, #748]	; (80217c4 <__ieee754_pow+0x76c>)
 80214d6:	f7df f9c3 	bl	8000860 <__aeabi_ddiv>
 80214da:	ec41 0b1a 	vmov	d10, r0, r1
 80214de:	4602      	mov	r2, r0
 80214e0:	460b      	mov	r3, r1
 80214e2:	4630      	mov	r0, r6
 80214e4:	4639      	mov	r1, r7
 80214e6:	f7df f891 	bl	800060c <__aeabi_dmul>
 80214ea:	2300      	movs	r3, #0
 80214ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80214f0:	9302      	str	r3, [sp, #8]
 80214f2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80214f6:	46ab      	mov	fp, r5
 80214f8:	106d      	asrs	r5, r5, #1
 80214fa:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80214fe:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8021502:	ec41 0b18 	vmov	d8, r0, r1
 8021506:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 802150a:	2200      	movs	r2, #0
 802150c:	4640      	mov	r0, r8
 802150e:	4649      	mov	r1, r9
 8021510:	4614      	mov	r4, r2
 8021512:	461d      	mov	r5, r3
 8021514:	f7df f87a 	bl	800060c <__aeabi_dmul>
 8021518:	4602      	mov	r2, r0
 802151a:	460b      	mov	r3, r1
 802151c:	4630      	mov	r0, r6
 802151e:	4639      	mov	r1, r7
 8021520:	f7de febc 	bl	800029c <__aeabi_dsub>
 8021524:	ec53 2b19 	vmov	r2, r3, d9
 8021528:	4606      	mov	r6, r0
 802152a:	460f      	mov	r7, r1
 802152c:	4620      	mov	r0, r4
 802152e:	4629      	mov	r1, r5
 8021530:	f7de feb4 	bl	800029c <__aeabi_dsub>
 8021534:	4602      	mov	r2, r0
 8021536:	460b      	mov	r3, r1
 8021538:	4650      	mov	r0, sl
 802153a:	4659      	mov	r1, fp
 802153c:	f7de feae 	bl	800029c <__aeabi_dsub>
 8021540:	4642      	mov	r2, r8
 8021542:	464b      	mov	r3, r9
 8021544:	f7df f862 	bl	800060c <__aeabi_dmul>
 8021548:	4602      	mov	r2, r0
 802154a:	460b      	mov	r3, r1
 802154c:	4630      	mov	r0, r6
 802154e:	4639      	mov	r1, r7
 8021550:	f7de fea4 	bl	800029c <__aeabi_dsub>
 8021554:	ec53 2b1a 	vmov	r2, r3, d10
 8021558:	f7df f858 	bl	800060c <__aeabi_dmul>
 802155c:	ec53 2b18 	vmov	r2, r3, d8
 8021560:	ec41 0b19 	vmov	d9, r0, r1
 8021564:	ec51 0b18 	vmov	r0, r1, d8
 8021568:	f7df f850 	bl	800060c <__aeabi_dmul>
 802156c:	a37c      	add	r3, pc, #496	; (adr r3, 8021760 <__ieee754_pow+0x708>)
 802156e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021572:	4604      	mov	r4, r0
 8021574:	460d      	mov	r5, r1
 8021576:	f7df f849 	bl	800060c <__aeabi_dmul>
 802157a:	a37b      	add	r3, pc, #492	; (adr r3, 8021768 <__ieee754_pow+0x710>)
 802157c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021580:	f7de fe8e 	bl	80002a0 <__adddf3>
 8021584:	4622      	mov	r2, r4
 8021586:	462b      	mov	r3, r5
 8021588:	f7df f840 	bl	800060c <__aeabi_dmul>
 802158c:	a378      	add	r3, pc, #480	; (adr r3, 8021770 <__ieee754_pow+0x718>)
 802158e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021592:	f7de fe85 	bl	80002a0 <__adddf3>
 8021596:	4622      	mov	r2, r4
 8021598:	462b      	mov	r3, r5
 802159a:	f7df f837 	bl	800060c <__aeabi_dmul>
 802159e:	a376      	add	r3, pc, #472	; (adr r3, 8021778 <__ieee754_pow+0x720>)
 80215a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80215a4:	f7de fe7c 	bl	80002a0 <__adddf3>
 80215a8:	4622      	mov	r2, r4
 80215aa:	462b      	mov	r3, r5
 80215ac:	f7df f82e 	bl	800060c <__aeabi_dmul>
 80215b0:	a373      	add	r3, pc, #460	; (adr r3, 8021780 <__ieee754_pow+0x728>)
 80215b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80215b6:	f7de fe73 	bl	80002a0 <__adddf3>
 80215ba:	4622      	mov	r2, r4
 80215bc:	462b      	mov	r3, r5
 80215be:	f7df f825 	bl	800060c <__aeabi_dmul>
 80215c2:	a371      	add	r3, pc, #452	; (adr r3, 8021788 <__ieee754_pow+0x730>)
 80215c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80215c8:	f7de fe6a 	bl	80002a0 <__adddf3>
 80215cc:	4622      	mov	r2, r4
 80215ce:	4606      	mov	r6, r0
 80215d0:	460f      	mov	r7, r1
 80215d2:	462b      	mov	r3, r5
 80215d4:	4620      	mov	r0, r4
 80215d6:	4629      	mov	r1, r5
 80215d8:	f7df f818 	bl	800060c <__aeabi_dmul>
 80215dc:	4602      	mov	r2, r0
 80215de:	460b      	mov	r3, r1
 80215e0:	4630      	mov	r0, r6
 80215e2:	4639      	mov	r1, r7
 80215e4:	f7df f812 	bl	800060c <__aeabi_dmul>
 80215e8:	4642      	mov	r2, r8
 80215ea:	4604      	mov	r4, r0
 80215ec:	460d      	mov	r5, r1
 80215ee:	464b      	mov	r3, r9
 80215f0:	ec51 0b18 	vmov	r0, r1, d8
 80215f4:	f7de fe54 	bl	80002a0 <__adddf3>
 80215f8:	ec53 2b19 	vmov	r2, r3, d9
 80215fc:	f7df f806 	bl	800060c <__aeabi_dmul>
 8021600:	4622      	mov	r2, r4
 8021602:	462b      	mov	r3, r5
 8021604:	f7de fe4c 	bl	80002a0 <__adddf3>
 8021608:	4642      	mov	r2, r8
 802160a:	4682      	mov	sl, r0
 802160c:	468b      	mov	fp, r1
 802160e:	464b      	mov	r3, r9
 8021610:	4640      	mov	r0, r8
 8021612:	4649      	mov	r1, r9
 8021614:	f7de fffa 	bl	800060c <__aeabi_dmul>
 8021618:	4b6b      	ldr	r3, [pc, #428]	; (80217c8 <__ieee754_pow+0x770>)
 802161a:	2200      	movs	r2, #0
 802161c:	4606      	mov	r6, r0
 802161e:	460f      	mov	r7, r1
 8021620:	f7de fe3e 	bl	80002a0 <__adddf3>
 8021624:	4652      	mov	r2, sl
 8021626:	465b      	mov	r3, fp
 8021628:	f7de fe3a 	bl	80002a0 <__adddf3>
 802162c:	2000      	movs	r0, #0
 802162e:	4604      	mov	r4, r0
 8021630:	460d      	mov	r5, r1
 8021632:	4602      	mov	r2, r0
 8021634:	460b      	mov	r3, r1
 8021636:	4640      	mov	r0, r8
 8021638:	4649      	mov	r1, r9
 802163a:	f7de ffe7 	bl	800060c <__aeabi_dmul>
 802163e:	4b62      	ldr	r3, [pc, #392]	; (80217c8 <__ieee754_pow+0x770>)
 8021640:	4680      	mov	r8, r0
 8021642:	4689      	mov	r9, r1
 8021644:	2200      	movs	r2, #0
 8021646:	4620      	mov	r0, r4
 8021648:	4629      	mov	r1, r5
 802164a:	f7de fe27 	bl	800029c <__aeabi_dsub>
 802164e:	4632      	mov	r2, r6
 8021650:	463b      	mov	r3, r7
 8021652:	f7de fe23 	bl	800029c <__aeabi_dsub>
 8021656:	4602      	mov	r2, r0
 8021658:	460b      	mov	r3, r1
 802165a:	4650      	mov	r0, sl
 802165c:	4659      	mov	r1, fp
 802165e:	f7de fe1d 	bl	800029c <__aeabi_dsub>
 8021662:	ec53 2b18 	vmov	r2, r3, d8
 8021666:	f7de ffd1 	bl	800060c <__aeabi_dmul>
 802166a:	4622      	mov	r2, r4
 802166c:	4606      	mov	r6, r0
 802166e:	460f      	mov	r7, r1
 8021670:	462b      	mov	r3, r5
 8021672:	ec51 0b19 	vmov	r0, r1, d9
 8021676:	f7de ffc9 	bl	800060c <__aeabi_dmul>
 802167a:	4602      	mov	r2, r0
 802167c:	460b      	mov	r3, r1
 802167e:	4630      	mov	r0, r6
 8021680:	4639      	mov	r1, r7
 8021682:	f7de fe0d 	bl	80002a0 <__adddf3>
 8021686:	4606      	mov	r6, r0
 8021688:	460f      	mov	r7, r1
 802168a:	4602      	mov	r2, r0
 802168c:	460b      	mov	r3, r1
 802168e:	4640      	mov	r0, r8
 8021690:	4649      	mov	r1, r9
 8021692:	f7de fe05 	bl	80002a0 <__adddf3>
 8021696:	a33e      	add	r3, pc, #248	; (adr r3, 8021790 <__ieee754_pow+0x738>)
 8021698:	e9d3 2300 	ldrd	r2, r3, [r3]
 802169c:	2000      	movs	r0, #0
 802169e:	4604      	mov	r4, r0
 80216a0:	460d      	mov	r5, r1
 80216a2:	f7de ffb3 	bl	800060c <__aeabi_dmul>
 80216a6:	4642      	mov	r2, r8
 80216a8:	ec41 0b18 	vmov	d8, r0, r1
 80216ac:	464b      	mov	r3, r9
 80216ae:	4620      	mov	r0, r4
 80216b0:	4629      	mov	r1, r5
 80216b2:	f7de fdf3 	bl	800029c <__aeabi_dsub>
 80216b6:	4602      	mov	r2, r0
 80216b8:	460b      	mov	r3, r1
 80216ba:	4630      	mov	r0, r6
 80216bc:	4639      	mov	r1, r7
 80216be:	f7de fded 	bl	800029c <__aeabi_dsub>
 80216c2:	a335      	add	r3, pc, #212	; (adr r3, 8021798 <__ieee754_pow+0x740>)
 80216c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80216c8:	f7de ffa0 	bl	800060c <__aeabi_dmul>
 80216cc:	a334      	add	r3, pc, #208	; (adr r3, 80217a0 <__ieee754_pow+0x748>)
 80216ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80216d2:	4606      	mov	r6, r0
 80216d4:	460f      	mov	r7, r1
 80216d6:	4620      	mov	r0, r4
 80216d8:	4629      	mov	r1, r5
 80216da:	f7de ff97 	bl	800060c <__aeabi_dmul>
 80216de:	4602      	mov	r2, r0
 80216e0:	460b      	mov	r3, r1
 80216e2:	4630      	mov	r0, r6
 80216e4:	4639      	mov	r1, r7
 80216e6:	f7de fddb 	bl	80002a0 <__adddf3>
 80216ea:	9a07      	ldr	r2, [sp, #28]
 80216ec:	4b37      	ldr	r3, [pc, #220]	; (80217cc <__ieee754_pow+0x774>)
 80216ee:	4413      	add	r3, r2
 80216f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80216f4:	f7de fdd4 	bl	80002a0 <__adddf3>
 80216f8:	4682      	mov	sl, r0
 80216fa:	9805      	ldr	r0, [sp, #20]
 80216fc:	468b      	mov	fp, r1
 80216fe:	f7de ff1b 	bl	8000538 <__aeabi_i2d>
 8021702:	9a07      	ldr	r2, [sp, #28]
 8021704:	4b32      	ldr	r3, [pc, #200]	; (80217d0 <__ieee754_pow+0x778>)
 8021706:	4413      	add	r3, r2
 8021708:	e9d3 8900 	ldrd	r8, r9, [r3]
 802170c:	4606      	mov	r6, r0
 802170e:	460f      	mov	r7, r1
 8021710:	4652      	mov	r2, sl
 8021712:	465b      	mov	r3, fp
 8021714:	ec51 0b18 	vmov	r0, r1, d8
 8021718:	f7de fdc2 	bl	80002a0 <__adddf3>
 802171c:	4642      	mov	r2, r8
 802171e:	464b      	mov	r3, r9
 8021720:	f7de fdbe 	bl	80002a0 <__adddf3>
 8021724:	4632      	mov	r2, r6
 8021726:	463b      	mov	r3, r7
 8021728:	f7de fdba 	bl	80002a0 <__adddf3>
 802172c:	2000      	movs	r0, #0
 802172e:	4632      	mov	r2, r6
 8021730:	463b      	mov	r3, r7
 8021732:	4604      	mov	r4, r0
 8021734:	460d      	mov	r5, r1
 8021736:	f7de fdb1 	bl	800029c <__aeabi_dsub>
 802173a:	4642      	mov	r2, r8
 802173c:	464b      	mov	r3, r9
 802173e:	f7de fdad 	bl	800029c <__aeabi_dsub>
 8021742:	ec53 2b18 	vmov	r2, r3, d8
 8021746:	f7de fda9 	bl	800029c <__aeabi_dsub>
 802174a:	4602      	mov	r2, r0
 802174c:	460b      	mov	r3, r1
 802174e:	4650      	mov	r0, sl
 8021750:	4659      	mov	r1, fp
 8021752:	e610      	b.n	8021376 <__ieee754_pow+0x31e>
 8021754:	2401      	movs	r4, #1
 8021756:	e6a1      	b.n	802149c <__ieee754_pow+0x444>
 8021758:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80217a8 <__ieee754_pow+0x750>
 802175c:	e617      	b.n	802138e <__ieee754_pow+0x336>
 802175e:	bf00      	nop
 8021760:	4a454eef 	.word	0x4a454eef
 8021764:	3fca7e28 	.word	0x3fca7e28
 8021768:	93c9db65 	.word	0x93c9db65
 802176c:	3fcd864a 	.word	0x3fcd864a
 8021770:	a91d4101 	.word	0xa91d4101
 8021774:	3fd17460 	.word	0x3fd17460
 8021778:	518f264d 	.word	0x518f264d
 802177c:	3fd55555 	.word	0x3fd55555
 8021780:	db6fabff 	.word	0xdb6fabff
 8021784:	3fdb6db6 	.word	0x3fdb6db6
 8021788:	33333303 	.word	0x33333303
 802178c:	3fe33333 	.word	0x3fe33333
 8021790:	e0000000 	.word	0xe0000000
 8021794:	3feec709 	.word	0x3feec709
 8021798:	dc3a03fd 	.word	0xdc3a03fd
 802179c:	3feec709 	.word	0x3feec709
 80217a0:	145b01f5 	.word	0x145b01f5
 80217a4:	be3e2fe0 	.word	0xbe3e2fe0
 80217a8:	00000000 	.word	0x00000000
 80217ac:	3ff00000 	.word	0x3ff00000
 80217b0:	7ff00000 	.word	0x7ff00000
 80217b4:	43400000 	.word	0x43400000
 80217b8:	0003988e 	.word	0x0003988e
 80217bc:	000bb679 	.word	0x000bb679
 80217c0:	08029d50 	.word	0x08029d50
 80217c4:	3ff00000 	.word	0x3ff00000
 80217c8:	40080000 	.word	0x40080000
 80217cc:	08029d70 	.word	0x08029d70
 80217d0:	08029d60 	.word	0x08029d60
 80217d4:	a3b5      	add	r3, pc, #724	; (adr r3, 8021aac <__ieee754_pow+0xa54>)
 80217d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80217da:	4640      	mov	r0, r8
 80217dc:	4649      	mov	r1, r9
 80217de:	f7de fd5f 	bl	80002a0 <__adddf3>
 80217e2:	4622      	mov	r2, r4
 80217e4:	ec41 0b1a 	vmov	d10, r0, r1
 80217e8:	462b      	mov	r3, r5
 80217ea:	4630      	mov	r0, r6
 80217ec:	4639      	mov	r1, r7
 80217ee:	f7de fd55 	bl	800029c <__aeabi_dsub>
 80217f2:	4602      	mov	r2, r0
 80217f4:	460b      	mov	r3, r1
 80217f6:	ec51 0b1a 	vmov	r0, r1, d10
 80217fa:	f7df f997 	bl	8000b2c <__aeabi_dcmpgt>
 80217fe:	2800      	cmp	r0, #0
 8021800:	f47f ae04 	bne.w	802140c <__ieee754_pow+0x3b4>
 8021804:	4aa4      	ldr	r2, [pc, #656]	; (8021a98 <__ieee754_pow+0xa40>)
 8021806:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 802180a:	4293      	cmp	r3, r2
 802180c:	f340 8108 	ble.w	8021a20 <__ieee754_pow+0x9c8>
 8021810:	151b      	asrs	r3, r3, #20
 8021812:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8021816:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 802181a:	fa4a f303 	asr.w	r3, sl, r3
 802181e:	445b      	add	r3, fp
 8021820:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8021824:	4e9d      	ldr	r6, [pc, #628]	; (8021a9c <__ieee754_pow+0xa44>)
 8021826:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 802182a:	4116      	asrs	r6, r2
 802182c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8021830:	2000      	movs	r0, #0
 8021832:	ea23 0106 	bic.w	r1, r3, r6
 8021836:	f1c2 0214 	rsb	r2, r2, #20
 802183a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 802183e:	fa4a fa02 	asr.w	sl, sl, r2
 8021842:	f1bb 0f00 	cmp.w	fp, #0
 8021846:	4602      	mov	r2, r0
 8021848:	460b      	mov	r3, r1
 802184a:	4620      	mov	r0, r4
 802184c:	4629      	mov	r1, r5
 802184e:	bfb8      	it	lt
 8021850:	f1ca 0a00 	rsblt	sl, sl, #0
 8021854:	f7de fd22 	bl	800029c <__aeabi_dsub>
 8021858:	ec41 0b19 	vmov	d9, r0, r1
 802185c:	4642      	mov	r2, r8
 802185e:	464b      	mov	r3, r9
 8021860:	ec51 0b19 	vmov	r0, r1, d9
 8021864:	f7de fd1c 	bl	80002a0 <__adddf3>
 8021868:	a37b      	add	r3, pc, #492	; (adr r3, 8021a58 <__ieee754_pow+0xa00>)
 802186a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802186e:	2000      	movs	r0, #0
 8021870:	4604      	mov	r4, r0
 8021872:	460d      	mov	r5, r1
 8021874:	f7de feca 	bl	800060c <__aeabi_dmul>
 8021878:	ec53 2b19 	vmov	r2, r3, d9
 802187c:	4606      	mov	r6, r0
 802187e:	460f      	mov	r7, r1
 8021880:	4620      	mov	r0, r4
 8021882:	4629      	mov	r1, r5
 8021884:	f7de fd0a 	bl	800029c <__aeabi_dsub>
 8021888:	4602      	mov	r2, r0
 802188a:	460b      	mov	r3, r1
 802188c:	4640      	mov	r0, r8
 802188e:	4649      	mov	r1, r9
 8021890:	f7de fd04 	bl	800029c <__aeabi_dsub>
 8021894:	a372      	add	r3, pc, #456	; (adr r3, 8021a60 <__ieee754_pow+0xa08>)
 8021896:	e9d3 2300 	ldrd	r2, r3, [r3]
 802189a:	f7de feb7 	bl	800060c <__aeabi_dmul>
 802189e:	a372      	add	r3, pc, #456	; (adr r3, 8021a68 <__ieee754_pow+0xa10>)
 80218a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80218a4:	4680      	mov	r8, r0
 80218a6:	4689      	mov	r9, r1
 80218a8:	4620      	mov	r0, r4
 80218aa:	4629      	mov	r1, r5
 80218ac:	f7de feae 	bl	800060c <__aeabi_dmul>
 80218b0:	4602      	mov	r2, r0
 80218b2:	460b      	mov	r3, r1
 80218b4:	4640      	mov	r0, r8
 80218b6:	4649      	mov	r1, r9
 80218b8:	f7de fcf2 	bl	80002a0 <__adddf3>
 80218bc:	4604      	mov	r4, r0
 80218be:	460d      	mov	r5, r1
 80218c0:	4602      	mov	r2, r0
 80218c2:	460b      	mov	r3, r1
 80218c4:	4630      	mov	r0, r6
 80218c6:	4639      	mov	r1, r7
 80218c8:	f7de fcea 	bl	80002a0 <__adddf3>
 80218cc:	4632      	mov	r2, r6
 80218ce:	463b      	mov	r3, r7
 80218d0:	4680      	mov	r8, r0
 80218d2:	4689      	mov	r9, r1
 80218d4:	f7de fce2 	bl	800029c <__aeabi_dsub>
 80218d8:	4602      	mov	r2, r0
 80218da:	460b      	mov	r3, r1
 80218dc:	4620      	mov	r0, r4
 80218de:	4629      	mov	r1, r5
 80218e0:	f7de fcdc 	bl	800029c <__aeabi_dsub>
 80218e4:	4642      	mov	r2, r8
 80218e6:	4606      	mov	r6, r0
 80218e8:	460f      	mov	r7, r1
 80218ea:	464b      	mov	r3, r9
 80218ec:	4640      	mov	r0, r8
 80218ee:	4649      	mov	r1, r9
 80218f0:	f7de fe8c 	bl	800060c <__aeabi_dmul>
 80218f4:	a35e      	add	r3, pc, #376	; (adr r3, 8021a70 <__ieee754_pow+0xa18>)
 80218f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80218fa:	4604      	mov	r4, r0
 80218fc:	460d      	mov	r5, r1
 80218fe:	f7de fe85 	bl	800060c <__aeabi_dmul>
 8021902:	a35d      	add	r3, pc, #372	; (adr r3, 8021a78 <__ieee754_pow+0xa20>)
 8021904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021908:	f7de fcc8 	bl	800029c <__aeabi_dsub>
 802190c:	4622      	mov	r2, r4
 802190e:	462b      	mov	r3, r5
 8021910:	f7de fe7c 	bl	800060c <__aeabi_dmul>
 8021914:	a35a      	add	r3, pc, #360	; (adr r3, 8021a80 <__ieee754_pow+0xa28>)
 8021916:	e9d3 2300 	ldrd	r2, r3, [r3]
 802191a:	f7de fcc1 	bl	80002a0 <__adddf3>
 802191e:	4622      	mov	r2, r4
 8021920:	462b      	mov	r3, r5
 8021922:	f7de fe73 	bl	800060c <__aeabi_dmul>
 8021926:	a358      	add	r3, pc, #352	; (adr r3, 8021a88 <__ieee754_pow+0xa30>)
 8021928:	e9d3 2300 	ldrd	r2, r3, [r3]
 802192c:	f7de fcb6 	bl	800029c <__aeabi_dsub>
 8021930:	4622      	mov	r2, r4
 8021932:	462b      	mov	r3, r5
 8021934:	f7de fe6a 	bl	800060c <__aeabi_dmul>
 8021938:	a355      	add	r3, pc, #340	; (adr r3, 8021a90 <__ieee754_pow+0xa38>)
 802193a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802193e:	f7de fcaf 	bl	80002a0 <__adddf3>
 8021942:	4622      	mov	r2, r4
 8021944:	462b      	mov	r3, r5
 8021946:	f7de fe61 	bl	800060c <__aeabi_dmul>
 802194a:	4602      	mov	r2, r0
 802194c:	460b      	mov	r3, r1
 802194e:	4640      	mov	r0, r8
 8021950:	4649      	mov	r1, r9
 8021952:	f7de fca3 	bl	800029c <__aeabi_dsub>
 8021956:	4604      	mov	r4, r0
 8021958:	460d      	mov	r5, r1
 802195a:	4602      	mov	r2, r0
 802195c:	460b      	mov	r3, r1
 802195e:	4640      	mov	r0, r8
 8021960:	4649      	mov	r1, r9
 8021962:	f7de fe53 	bl	800060c <__aeabi_dmul>
 8021966:	2200      	movs	r2, #0
 8021968:	ec41 0b19 	vmov	d9, r0, r1
 802196c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8021970:	4620      	mov	r0, r4
 8021972:	4629      	mov	r1, r5
 8021974:	f7de fc92 	bl	800029c <__aeabi_dsub>
 8021978:	4602      	mov	r2, r0
 802197a:	460b      	mov	r3, r1
 802197c:	ec51 0b19 	vmov	r0, r1, d9
 8021980:	f7de ff6e 	bl	8000860 <__aeabi_ddiv>
 8021984:	4632      	mov	r2, r6
 8021986:	4604      	mov	r4, r0
 8021988:	460d      	mov	r5, r1
 802198a:	463b      	mov	r3, r7
 802198c:	4640      	mov	r0, r8
 802198e:	4649      	mov	r1, r9
 8021990:	f7de fe3c 	bl	800060c <__aeabi_dmul>
 8021994:	4632      	mov	r2, r6
 8021996:	463b      	mov	r3, r7
 8021998:	f7de fc82 	bl	80002a0 <__adddf3>
 802199c:	4602      	mov	r2, r0
 802199e:	460b      	mov	r3, r1
 80219a0:	4620      	mov	r0, r4
 80219a2:	4629      	mov	r1, r5
 80219a4:	f7de fc7a 	bl	800029c <__aeabi_dsub>
 80219a8:	4642      	mov	r2, r8
 80219aa:	464b      	mov	r3, r9
 80219ac:	f7de fc76 	bl	800029c <__aeabi_dsub>
 80219b0:	460b      	mov	r3, r1
 80219b2:	4602      	mov	r2, r0
 80219b4:	493a      	ldr	r1, [pc, #232]	; (8021aa0 <__ieee754_pow+0xa48>)
 80219b6:	2000      	movs	r0, #0
 80219b8:	f7de fc70 	bl	800029c <__aeabi_dsub>
 80219bc:	ec41 0b10 	vmov	d0, r0, r1
 80219c0:	ee10 3a90 	vmov	r3, s1
 80219c4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80219c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80219cc:	da2b      	bge.n	8021a26 <__ieee754_pow+0x9ce>
 80219ce:	4650      	mov	r0, sl
 80219d0:	f001 fc9a 	bl	8023308 <scalbn>
 80219d4:	ec51 0b10 	vmov	r0, r1, d0
 80219d8:	ec53 2b18 	vmov	r2, r3, d8
 80219dc:	f7ff bbed 	b.w	80211ba <__ieee754_pow+0x162>
 80219e0:	4b30      	ldr	r3, [pc, #192]	; (8021aa4 <__ieee754_pow+0xa4c>)
 80219e2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80219e6:	429e      	cmp	r6, r3
 80219e8:	f77f af0c 	ble.w	8021804 <__ieee754_pow+0x7ac>
 80219ec:	4b2e      	ldr	r3, [pc, #184]	; (8021aa8 <__ieee754_pow+0xa50>)
 80219ee:	440b      	add	r3, r1
 80219f0:	4303      	orrs	r3, r0
 80219f2:	d009      	beq.n	8021a08 <__ieee754_pow+0x9b0>
 80219f4:	ec51 0b18 	vmov	r0, r1, d8
 80219f8:	2200      	movs	r2, #0
 80219fa:	2300      	movs	r3, #0
 80219fc:	f7df f878 	bl	8000af0 <__aeabi_dcmplt>
 8021a00:	3800      	subs	r0, #0
 8021a02:	bf18      	it	ne
 8021a04:	2001      	movne	r0, #1
 8021a06:	e447      	b.n	8021298 <__ieee754_pow+0x240>
 8021a08:	4622      	mov	r2, r4
 8021a0a:	462b      	mov	r3, r5
 8021a0c:	f7de fc46 	bl	800029c <__aeabi_dsub>
 8021a10:	4642      	mov	r2, r8
 8021a12:	464b      	mov	r3, r9
 8021a14:	f7df f880 	bl	8000b18 <__aeabi_dcmpge>
 8021a18:	2800      	cmp	r0, #0
 8021a1a:	f43f aef3 	beq.w	8021804 <__ieee754_pow+0x7ac>
 8021a1e:	e7e9      	b.n	80219f4 <__ieee754_pow+0x99c>
 8021a20:	f04f 0a00 	mov.w	sl, #0
 8021a24:	e71a      	b.n	802185c <__ieee754_pow+0x804>
 8021a26:	ec51 0b10 	vmov	r0, r1, d0
 8021a2a:	4619      	mov	r1, r3
 8021a2c:	e7d4      	b.n	80219d8 <__ieee754_pow+0x980>
 8021a2e:	491c      	ldr	r1, [pc, #112]	; (8021aa0 <__ieee754_pow+0xa48>)
 8021a30:	2000      	movs	r0, #0
 8021a32:	f7ff bb30 	b.w	8021096 <__ieee754_pow+0x3e>
 8021a36:	2000      	movs	r0, #0
 8021a38:	2100      	movs	r1, #0
 8021a3a:	f7ff bb2c 	b.w	8021096 <__ieee754_pow+0x3e>
 8021a3e:	4630      	mov	r0, r6
 8021a40:	4639      	mov	r1, r7
 8021a42:	f7ff bb28 	b.w	8021096 <__ieee754_pow+0x3e>
 8021a46:	9204      	str	r2, [sp, #16]
 8021a48:	f7ff bb7a 	b.w	8021140 <__ieee754_pow+0xe8>
 8021a4c:	2300      	movs	r3, #0
 8021a4e:	f7ff bb64 	b.w	802111a <__ieee754_pow+0xc2>
 8021a52:	bf00      	nop
 8021a54:	f3af 8000 	nop.w
 8021a58:	00000000 	.word	0x00000000
 8021a5c:	3fe62e43 	.word	0x3fe62e43
 8021a60:	fefa39ef 	.word	0xfefa39ef
 8021a64:	3fe62e42 	.word	0x3fe62e42
 8021a68:	0ca86c39 	.word	0x0ca86c39
 8021a6c:	be205c61 	.word	0xbe205c61
 8021a70:	72bea4d0 	.word	0x72bea4d0
 8021a74:	3e663769 	.word	0x3e663769
 8021a78:	c5d26bf1 	.word	0xc5d26bf1
 8021a7c:	3ebbbd41 	.word	0x3ebbbd41
 8021a80:	af25de2c 	.word	0xaf25de2c
 8021a84:	3f11566a 	.word	0x3f11566a
 8021a88:	16bebd93 	.word	0x16bebd93
 8021a8c:	3f66c16c 	.word	0x3f66c16c
 8021a90:	5555553e 	.word	0x5555553e
 8021a94:	3fc55555 	.word	0x3fc55555
 8021a98:	3fe00000 	.word	0x3fe00000
 8021a9c:	000fffff 	.word	0x000fffff
 8021aa0:	3ff00000 	.word	0x3ff00000
 8021aa4:	4090cbff 	.word	0x4090cbff
 8021aa8:	3f6f3400 	.word	0x3f6f3400
 8021aac:	652b82fe 	.word	0x652b82fe
 8021ab0:	3c971547 	.word	0x3c971547
 8021ab4:	00000000 	.word	0x00000000

08021ab8 <__ieee754_rem_pio2>:
 8021ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021abc:	ed2d 8b02 	vpush	{d8}
 8021ac0:	ec55 4b10 	vmov	r4, r5, d0
 8021ac4:	4bca      	ldr	r3, [pc, #808]	; (8021df0 <__ieee754_rem_pio2+0x338>)
 8021ac6:	b08b      	sub	sp, #44	; 0x2c
 8021ac8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8021acc:	4598      	cmp	r8, r3
 8021ace:	4682      	mov	sl, r0
 8021ad0:	9502      	str	r5, [sp, #8]
 8021ad2:	dc08      	bgt.n	8021ae6 <__ieee754_rem_pio2+0x2e>
 8021ad4:	2200      	movs	r2, #0
 8021ad6:	2300      	movs	r3, #0
 8021ad8:	ed80 0b00 	vstr	d0, [r0]
 8021adc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8021ae0:	f04f 0b00 	mov.w	fp, #0
 8021ae4:	e028      	b.n	8021b38 <__ieee754_rem_pio2+0x80>
 8021ae6:	4bc3      	ldr	r3, [pc, #780]	; (8021df4 <__ieee754_rem_pio2+0x33c>)
 8021ae8:	4598      	cmp	r8, r3
 8021aea:	dc78      	bgt.n	8021bde <__ieee754_rem_pio2+0x126>
 8021aec:	9b02      	ldr	r3, [sp, #8]
 8021aee:	4ec2      	ldr	r6, [pc, #776]	; (8021df8 <__ieee754_rem_pio2+0x340>)
 8021af0:	2b00      	cmp	r3, #0
 8021af2:	ee10 0a10 	vmov	r0, s0
 8021af6:	a3b0      	add	r3, pc, #704	; (adr r3, 8021db8 <__ieee754_rem_pio2+0x300>)
 8021af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021afc:	4629      	mov	r1, r5
 8021afe:	dd39      	ble.n	8021b74 <__ieee754_rem_pio2+0xbc>
 8021b00:	f7de fbcc 	bl	800029c <__aeabi_dsub>
 8021b04:	45b0      	cmp	r8, r6
 8021b06:	4604      	mov	r4, r0
 8021b08:	460d      	mov	r5, r1
 8021b0a:	d01b      	beq.n	8021b44 <__ieee754_rem_pio2+0x8c>
 8021b0c:	a3ac      	add	r3, pc, #688	; (adr r3, 8021dc0 <__ieee754_rem_pio2+0x308>)
 8021b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021b12:	f7de fbc3 	bl	800029c <__aeabi_dsub>
 8021b16:	4602      	mov	r2, r0
 8021b18:	460b      	mov	r3, r1
 8021b1a:	e9ca 2300 	strd	r2, r3, [sl]
 8021b1e:	4620      	mov	r0, r4
 8021b20:	4629      	mov	r1, r5
 8021b22:	f7de fbbb 	bl	800029c <__aeabi_dsub>
 8021b26:	a3a6      	add	r3, pc, #664	; (adr r3, 8021dc0 <__ieee754_rem_pio2+0x308>)
 8021b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021b2c:	f7de fbb6 	bl	800029c <__aeabi_dsub>
 8021b30:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8021b34:	f04f 0b01 	mov.w	fp, #1
 8021b38:	4658      	mov	r0, fp
 8021b3a:	b00b      	add	sp, #44	; 0x2c
 8021b3c:	ecbd 8b02 	vpop	{d8}
 8021b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021b44:	a3a0      	add	r3, pc, #640	; (adr r3, 8021dc8 <__ieee754_rem_pio2+0x310>)
 8021b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021b4a:	f7de fba7 	bl	800029c <__aeabi_dsub>
 8021b4e:	a3a0      	add	r3, pc, #640	; (adr r3, 8021dd0 <__ieee754_rem_pio2+0x318>)
 8021b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021b54:	4604      	mov	r4, r0
 8021b56:	460d      	mov	r5, r1
 8021b58:	f7de fba0 	bl	800029c <__aeabi_dsub>
 8021b5c:	4602      	mov	r2, r0
 8021b5e:	460b      	mov	r3, r1
 8021b60:	e9ca 2300 	strd	r2, r3, [sl]
 8021b64:	4620      	mov	r0, r4
 8021b66:	4629      	mov	r1, r5
 8021b68:	f7de fb98 	bl	800029c <__aeabi_dsub>
 8021b6c:	a398      	add	r3, pc, #608	; (adr r3, 8021dd0 <__ieee754_rem_pio2+0x318>)
 8021b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021b72:	e7db      	b.n	8021b2c <__ieee754_rem_pio2+0x74>
 8021b74:	f7de fb94 	bl	80002a0 <__adddf3>
 8021b78:	45b0      	cmp	r8, r6
 8021b7a:	4604      	mov	r4, r0
 8021b7c:	460d      	mov	r5, r1
 8021b7e:	d016      	beq.n	8021bae <__ieee754_rem_pio2+0xf6>
 8021b80:	a38f      	add	r3, pc, #572	; (adr r3, 8021dc0 <__ieee754_rem_pio2+0x308>)
 8021b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021b86:	f7de fb8b 	bl	80002a0 <__adddf3>
 8021b8a:	4602      	mov	r2, r0
 8021b8c:	460b      	mov	r3, r1
 8021b8e:	e9ca 2300 	strd	r2, r3, [sl]
 8021b92:	4620      	mov	r0, r4
 8021b94:	4629      	mov	r1, r5
 8021b96:	f7de fb81 	bl	800029c <__aeabi_dsub>
 8021b9a:	a389      	add	r3, pc, #548	; (adr r3, 8021dc0 <__ieee754_rem_pio2+0x308>)
 8021b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021ba0:	f7de fb7e 	bl	80002a0 <__adddf3>
 8021ba4:	f04f 3bff 	mov.w	fp, #4294967295
 8021ba8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8021bac:	e7c4      	b.n	8021b38 <__ieee754_rem_pio2+0x80>
 8021bae:	a386      	add	r3, pc, #536	; (adr r3, 8021dc8 <__ieee754_rem_pio2+0x310>)
 8021bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021bb4:	f7de fb74 	bl	80002a0 <__adddf3>
 8021bb8:	a385      	add	r3, pc, #532	; (adr r3, 8021dd0 <__ieee754_rem_pio2+0x318>)
 8021bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021bbe:	4604      	mov	r4, r0
 8021bc0:	460d      	mov	r5, r1
 8021bc2:	f7de fb6d 	bl	80002a0 <__adddf3>
 8021bc6:	4602      	mov	r2, r0
 8021bc8:	460b      	mov	r3, r1
 8021bca:	e9ca 2300 	strd	r2, r3, [sl]
 8021bce:	4620      	mov	r0, r4
 8021bd0:	4629      	mov	r1, r5
 8021bd2:	f7de fb63 	bl	800029c <__aeabi_dsub>
 8021bd6:	a37e      	add	r3, pc, #504	; (adr r3, 8021dd0 <__ieee754_rem_pio2+0x318>)
 8021bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021bdc:	e7e0      	b.n	8021ba0 <__ieee754_rem_pio2+0xe8>
 8021bde:	4b87      	ldr	r3, [pc, #540]	; (8021dfc <__ieee754_rem_pio2+0x344>)
 8021be0:	4598      	cmp	r8, r3
 8021be2:	f300 80d9 	bgt.w	8021d98 <__ieee754_rem_pio2+0x2e0>
 8021be6:	f001 fb73 	bl	80232d0 <fabs>
 8021bea:	ec55 4b10 	vmov	r4, r5, d0
 8021bee:	ee10 0a10 	vmov	r0, s0
 8021bf2:	a379      	add	r3, pc, #484	; (adr r3, 8021dd8 <__ieee754_rem_pio2+0x320>)
 8021bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021bf8:	4629      	mov	r1, r5
 8021bfa:	f7de fd07 	bl	800060c <__aeabi_dmul>
 8021bfe:	4b80      	ldr	r3, [pc, #512]	; (8021e00 <__ieee754_rem_pio2+0x348>)
 8021c00:	2200      	movs	r2, #0
 8021c02:	f7de fb4d 	bl	80002a0 <__adddf3>
 8021c06:	f7de ffb1 	bl	8000b6c <__aeabi_d2iz>
 8021c0a:	4683      	mov	fp, r0
 8021c0c:	f7de fc94 	bl	8000538 <__aeabi_i2d>
 8021c10:	4602      	mov	r2, r0
 8021c12:	460b      	mov	r3, r1
 8021c14:	ec43 2b18 	vmov	d8, r2, r3
 8021c18:	a367      	add	r3, pc, #412	; (adr r3, 8021db8 <__ieee754_rem_pio2+0x300>)
 8021c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021c1e:	f7de fcf5 	bl	800060c <__aeabi_dmul>
 8021c22:	4602      	mov	r2, r0
 8021c24:	460b      	mov	r3, r1
 8021c26:	4620      	mov	r0, r4
 8021c28:	4629      	mov	r1, r5
 8021c2a:	f7de fb37 	bl	800029c <__aeabi_dsub>
 8021c2e:	a364      	add	r3, pc, #400	; (adr r3, 8021dc0 <__ieee754_rem_pio2+0x308>)
 8021c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021c34:	4606      	mov	r6, r0
 8021c36:	460f      	mov	r7, r1
 8021c38:	ec51 0b18 	vmov	r0, r1, d8
 8021c3c:	f7de fce6 	bl	800060c <__aeabi_dmul>
 8021c40:	f1bb 0f1f 	cmp.w	fp, #31
 8021c44:	4604      	mov	r4, r0
 8021c46:	460d      	mov	r5, r1
 8021c48:	dc0d      	bgt.n	8021c66 <__ieee754_rem_pio2+0x1ae>
 8021c4a:	4b6e      	ldr	r3, [pc, #440]	; (8021e04 <__ieee754_rem_pio2+0x34c>)
 8021c4c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8021c50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8021c54:	4543      	cmp	r3, r8
 8021c56:	d006      	beq.n	8021c66 <__ieee754_rem_pio2+0x1ae>
 8021c58:	4622      	mov	r2, r4
 8021c5a:	462b      	mov	r3, r5
 8021c5c:	4630      	mov	r0, r6
 8021c5e:	4639      	mov	r1, r7
 8021c60:	f7de fb1c 	bl	800029c <__aeabi_dsub>
 8021c64:	e00f      	b.n	8021c86 <__ieee754_rem_pio2+0x1ce>
 8021c66:	462b      	mov	r3, r5
 8021c68:	4622      	mov	r2, r4
 8021c6a:	4630      	mov	r0, r6
 8021c6c:	4639      	mov	r1, r7
 8021c6e:	f7de fb15 	bl	800029c <__aeabi_dsub>
 8021c72:	ea4f 5328 	mov.w	r3, r8, asr #20
 8021c76:	9303      	str	r3, [sp, #12]
 8021c78:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8021c7c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8021c80:	f1b8 0f10 	cmp.w	r8, #16
 8021c84:	dc02      	bgt.n	8021c8c <__ieee754_rem_pio2+0x1d4>
 8021c86:	e9ca 0100 	strd	r0, r1, [sl]
 8021c8a:	e039      	b.n	8021d00 <__ieee754_rem_pio2+0x248>
 8021c8c:	a34e      	add	r3, pc, #312	; (adr r3, 8021dc8 <__ieee754_rem_pio2+0x310>)
 8021c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021c92:	ec51 0b18 	vmov	r0, r1, d8
 8021c96:	f7de fcb9 	bl	800060c <__aeabi_dmul>
 8021c9a:	4604      	mov	r4, r0
 8021c9c:	460d      	mov	r5, r1
 8021c9e:	4602      	mov	r2, r0
 8021ca0:	460b      	mov	r3, r1
 8021ca2:	4630      	mov	r0, r6
 8021ca4:	4639      	mov	r1, r7
 8021ca6:	f7de faf9 	bl	800029c <__aeabi_dsub>
 8021caa:	4602      	mov	r2, r0
 8021cac:	460b      	mov	r3, r1
 8021cae:	4680      	mov	r8, r0
 8021cb0:	4689      	mov	r9, r1
 8021cb2:	4630      	mov	r0, r6
 8021cb4:	4639      	mov	r1, r7
 8021cb6:	f7de faf1 	bl	800029c <__aeabi_dsub>
 8021cba:	4622      	mov	r2, r4
 8021cbc:	462b      	mov	r3, r5
 8021cbe:	f7de faed 	bl	800029c <__aeabi_dsub>
 8021cc2:	a343      	add	r3, pc, #268	; (adr r3, 8021dd0 <__ieee754_rem_pio2+0x318>)
 8021cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021cc8:	4604      	mov	r4, r0
 8021cca:	460d      	mov	r5, r1
 8021ccc:	ec51 0b18 	vmov	r0, r1, d8
 8021cd0:	f7de fc9c 	bl	800060c <__aeabi_dmul>
 8021cd4:	4622      	mov	r2, r4
 8021cd6:	462b      	mov	r3, r5
 8021cd8:	f7de fae0 	bl	800029c <__aeabi_dsub>
 8021cdc:	4602      	mov	r2, r0
 8021cde:	460b      	mov	r3, r1
 8021ce0:	4604      	mov	r4, r0
 8021ce2:	460d      	mov	r5, r1
 8021ce4:	4640      	mov	r0, r8
 8021ce6:	4649      	mov	r1, r9
 8021ce8:	f7de fad8 	bl	800029c <__aeabi_dsub>
 8021cec:	9a03      	ldr	r2, [sp, #12]
 8021cee:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8021cf2:	1ad3      	subs	r3, r2, r3
 8021cf4:	2b31      	cmp	r3, #49	; 0x31
 8021cf6:	dc24      	bgt.n	8021d42 <__ieee754_rem_pio2+0x28a>
 8021cf8:	e9ca 0100 	strd	r0, r1, [sl]
 8021cfc:	4646      	mov	r6, r8
 8021cfe:	464f      	mov	r7, r9
 8021d00:	e9da 8900 	ldrd	r8, r9, [sl]
 8021d04:	4630      	mov	r0, r6
 8021d06:	4642      	mov	r2, r8
 8021d08:	464b      	mov	r3, r9
 8021d0a:	4639      	mov	r1, r7
 8021d0c:	f7de fac6 	bl	800029c <__aeabi_dsub>
 8021d10:	462b      	mov	r3, r5
 8021d12:	4622      	mov	r2, r4
 8021d14:	f7de fac2 	bl	800029c <__aeabi_dsub>
 8021d18:	9b02      	ldr	r3, [sp, #8]
 8021d1a:	2b00      	cmp	r3, #0
 8021d1c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8021d20:	f6bf af0a 	bge.w	8021b38 <__ieee754_rem_pio2+0x80>
 8021d24:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8021d28:	f8ca 3004 	str.w	r3, [sl, #4]
 8021d2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8021d30:	f8ca 8000 	str.w	r8, [sl]
 8021d34:	f8ca 0008 	str.w	r0, [sl, #8]
 8021d38:	f8ca 300c 	str.w	r3, [sl, #12]
 8021d3c:	f1cb 0b00 	rsb	fp, fp, #0
 8021d40:	e6fa      	b.n	8021b38 <__ieee754_rem_pio2+0x80>
 8021d42:	a327      	add	r3, pc, #156	; (adr r3, 8021de0 <__ieee754_rem_pio2+0x328>)
 8021d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021d48:	ec51 0b18 	vmov	r0, r1, d8
 8021d4c:	f7de fc5e 	bl	800060c <__aeabi_dmul>
 8021d50:	4604      	mov	r4, r0
 8021d52:	460d      	mov	r5, r1
 8021d54:	4602      	mov	r2, r0
 8021d56:	460b      	mov	r3, r1
 8021d58:	4640      	mov	r0, r8
 8021d5a:	4649      	mov	r1, r9
 8021d5c:	f7de fa9e 	bl	800029c <__aeabi_dsub>
 8021d60:	4602      	mov	r2, r0
 8021d62:	460b      	mov	r3, r1
 8021d64:	4606      	mov	r6, r0
 8021d66:	460f      	mov	r7, r1
 8021d68:	4640      	mov	r0, r8
 8021d6a:	4649      	mov	r1, r9
 8021d6c:	f7de fa96 	bl	800029c <__aeabi_dsub>
 8021d70:	4622      	mov	r2, r4
 8021d72:	462b      	mov	r3, r5
 8021d74:	f7de fa92 	bl	800029c <__aeabi_dsub>
 8021d78:	a31b      	add	r3, pc, #108	; (adr r3, 8021de8 <__ieee754_rem_pio2+0x330>)
 8021d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021d7e:	4604      	mov	r4, r0
 8021d80:	460d      	mov	r5, r1
 8021d82:	ec51 0b18 	vmov	r0, r1, d8
 8021d86:	f7de fc41 	bl	800060c <__aeabi_dmul>
 8021d8a:	4622      	mov	r2, r4
 8021d8c:	462b      	mov	r3, r5
 8021d8e:	f7de fa85 	bl	800029c <__aeabi_dsub>
 8021d92:	4604      	mov	r4, r0
 8021d94:	460d      	mov	r5, r1
 8021d96:	e75f      	b.n	8021c58 <__ieee754_rem_pio2+0x1a0>
 8021d98:	4b1b      	ldr	r3, [pc, #108]	; (8021e08 <__ieee754_rem_pio2+0x350>)
 8021d9a:	4598      	cmp	r8, r3
 8021d9c:	dd36      	ble.n	8021e0c <__ieee754_rem_pio2+0x354>
 8021d9e:	ee10 2a10 	vmov	r2, s0
 8021da2:	462b      	mov	r3, r5
 8021da4:	4620      	mov	r0, r4
 8021da6:	4629      	mov	r1, r5
 8021da8:	f7de fa78 	bl	800029c <__aeabi_dsub>
 8021dac:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8021db0:	e9ca 0100 	strd	r0, r1, [sl]
 8021db4:	e694      	b.n	8021ae0 <__ieee754_rem_pio2+0x28>
 8021db6:	bf00      	nop
 8021db8:	54400000 	.word	0x54400000
 8021dbc:	3ff921fb 	.word	0x3ff921fb
 8021dc0:	1a626331 	.word	0x1a626331
 8021dc4:	3dd0b461 	.word	0x3dd0b461
 8021dc8:	1a600000 	.word	0x1a600000
 8021dcc:	3dd0b461 	.word	0x3dd0b461
 8021dd0:	2e037073 	.word	0x2e037073
 8021dd4:	3ba3198a 	.word	0x3ba3198a
 8021dd8:	6dc9c883 	.word	0x6dc9c883
 8021ddc:	3fe45f30 	.word	0x3fe45f30
 8021de0:	2e000000 	.word	0x2e000000
 8021de4:	3ba3198a 	.word	0x3ba3198a
 8021de8:	252049c1 	.word	0x252049c1
 8021dec:	397b839a 	.word	0x397b839a
 8021df0:	3fe921fb 	.word	0x3fe921fb
 8021df4:	4002d97b 	.word	0x4002d97b
 8021df8:	3ff921fb 	.word	0x3ff921fb
 8021dfc:	413921fb 	.word	0x413921fb
 8021e00:	3fe00000 	.word	0x3fe00000
 8021e04:	08029d80 	.word	0x08029d80
 8021e08:	7fefffff 	.word	0x7fefffff
 8021e0c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8021e10:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8021e14:	ee10 0a10 	vmov	r0, s0
 8021e18:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8021e1c:	ee10 6a10 	vmov	r6, s0
 8021e20:	460f      	mov	r7, r1
 8021e22:	f7de fea3 	bl	8000b6c <__aeabi_d2iz>
 8021e26:	f7de fb87 	bl	8000538 <__aeabi_i2d>
 8021e2a:	4602      	mov	r2, r0
 8021e2c:	460b      	mov	r3, r1
 8021e2e:	4630      	mov	r0, r6
 8021e30:	4639      	mov	r1, r7
 8021e32:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8021e36:	f7de fa31 	bl	800029c <__aeabi_dsub>
 8021e3a:	4b23      	ldr	r3, [pc, #140]	; (8021ec8 <__ieee754_rem_pio2+0x410>)
 8021e3c:	2200      	movs	r2, #0
 8021e3e:	f7de fbe5 	bl	800060c <__aeabi_dmul>
 8021e42:	460f      	mov	r7, r1
 8021e44:	4606      	mov	r6, r0
 8021e46:	f7de fe91 	bl	8000b6c <__aeabi_d2iz>
 8021e4a:	f7de fb75 	bl	8000538 <__aeabi_i2d>
 8021e4e:	4602      	mov	r2, r0
 8021e50:	460b      	mov	r3, r1
 8021e52:	4630      	mov	r0, r6
 8021e54:	4639      	mov	r1, r7
 8021e56:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8021e5a:	f7de fa1f 	bl	800029c <__aeabi_dsub>
 8021e5e:	4b1a      	ldr	r3, [pc, #104]	; (8021ec8 <__ieee754_rem_pio2+0x410>)
 8021e60:	2200      	movs	r2, #0
 8021e62:	f7de fbd3 	bl	800060c <__aeabi_dmul>
 8021e66:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8021e6a:	ad04      	add	r5, sp, #16
 8021e6c:	f04f 0803 	mov.w	r8, #3
 8021e70:	46a9      	mov	r9, r5
 8021e72:	2600      	movs	r6, #0
 8021e74:	2700      	movs	r7, #0
 8021e76:	4632      	mov	r2, r6
 8021e78:	463b      	mov	r3, r7
 8021e7a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8021e7e:	46c3      	mov	fp, r8
 8021e80:	3d08      	subs	r5, #8
 8021e82:	f108 38ff 	add.w	r8, r8, #4294967295
 8021e86:	f7de fe29 	bl	8000adc <__aeabi_dcmpeq>
 8021e8a:	2800      	cmp	r0, #0
 8021e8c:	d1f3      	bne.n	8021e76 <__ieee754_rem_pio2+0x3be>
 8021e8e:	4b0f      	ldr	r3, [pc, #60]	; (8021ecc <__ieee754_rem_pio2+0x414>)
 8021e90:	9301      	str	r3, [sp, #4]
 8021e92:	2302      	movs	r3, #2
 8021e94:	9300      	str	r3, [sp, #0]
 8021e96:	4622      	mov	r2, r4
 8021e98:	465b      	mov	r3, fp
 8021e9a:	4651      	mov	r1, sl
 8021e9c:	4648      	mov	r0, r9
 8021e9e:	f000 fbab 	bl	80225f8 <__kernel_rem_pio2>
 8021ea2:	9b02      	ldr	r3, [sp, #8]
 8021ea4:	2b00      	cmp	r3, #0
 8021ea6:	4683      	mov	fp, r0
 8021ea8:	f6bf ae46 	bge.w	8021b38 <__ieee754_rem_pio2+0x80>
 8021eac:	e9da 2100 	ldrd	r2, r1, [sl]
 8021eb0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8021eb4:	e9ca 2300 	strd	r2, r3, [sl]
 8021eb8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8021ebc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8021ec0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8021ec4:	e73a      	b.n	8021d3c <__ieee754_rem_pio2+0x284>
 8021ec6:	bf00      	nop
 8021ec8:	41700000 	.word	0x41700000
 8021ecc:	08029e00 	.word	0x08029e00

08021ed0 <__ieee754_sqrt>:
 8021ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021ed4:	ec55 4b10 	vmov	r4, r5, d0
 8021ed8:	4e55      	ldr	r6, [pc, #340]	; (8022030 <__ieee754_sqrt+0x160>)
 8021eda:	43ae      	bics	r6, r5
 8021edc:	ee10 0a10 	vmov	r0, s0
 8021ee0:	ee10 3a10 	vmov	r3, s0
 8021ee4:	462a      	mov	r2, r5
 8021ee6:	4629      	mov	r1, r5
 8021ee8:	d110      	bne.n	8021f0c <__ieee754_sqrt+0x3c>
 8021eea:	ee10 2a10 	vmov	r2, s0
 8021eee:	462b      	mov	r3, r5
 8021ef0:	f7de fb8c 	bl	800060c <__aeabi_dmul>
 8021ef4:	4602      	mov	r2, r0
 8021ef6:	460b      	mov	r3, r1
 8021ef8:	4620      	mov	r0, r4
 8021efa:	4629      	mov	r1, r5
 8021efc:	f7de f9d0 	bl	80002a0 <__adddf3>
 8021f00:	4604      	mov	r4, r0
 8021f02:	460d      	mov	r5, r1
 8021f04:	ec45 4b10 	vmov	d0, r4, r5
 8021f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021f0c:	2d00      	cmp	r5, #0
 8021f0e:	dc10      	bgt.n	8021f32 <__ieee754_sqrt+0x62>
 8021f10:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8021f14:	4330      	orrs	r0, r6
 8021f16:	d0f5      	beq.n	8021f04 <__ieee754_sqrt+0x34>
 8021f18:	b15d      	cbz	r5, 8021f32 <__ieee754_sqrt+0x62>
 8021f1a:	ee10 2a10 	vmov	r2, s0
 8021f1e:	462b      	mov	r3, r5
 8021f20:	ee10 0a10 	vmov	r0, s0
 8021f24:	f7de f9ba 	bl	800029c <__aeabi_dsub>
 8021f28:	4602      	mov	r2, r0
 8021f2a:	460b      	mov	r3, r1
 8021f2c:	f7de fc98 	bl	8000860 <__aeabi_ddiv>
 8021f30:	e7e6      	b.n	8021f00 <__ieee754_sqrt+0x30>
 8021f32:	1512      	asrs	r2, r2, #20
 8021f34:	d074      	beq.n	8022020 <__ieee754_sqrt+0x150>
 8021f36:	07d4      	lsls	r4, r2, #31
 8021f38:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8021f3c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8021f40:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8021f44:	bf5e      	ittt	pl
 8021f46:	0fda      	lsrpl	r2, r3, #31
 8021f48:	005b      	lslpl	r3, r3, #1
 8021f4a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8021f4e:	2400      	movs	r4, #0
 8021f50:	0fda      	lsrs	r2, r3, #31
 8021f52:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8021f56:	107f      	asrs	r7, r7, #1
 8021f58:	005b      	lsls	r3, r3, #1
 8021f5a:	2516      	movs	r5, #22
 8021f5c:	4620      	mov	r0, r4
 8021f5e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8021f62:	1886      	adds	r6, r0, r2
 8021f64:	428e      	cmp	r6, r1
 8021f66:	bfde      	ittt	le
 8021f68:	1b89      	suble	r1, r1, r6
 8021f6a:	18b0      	addle	r0, r6, r2
 8021f6c:	18a4      	addle	r4, r4, r2
 8021f6e:	0049      	lsls	r1, r1, #1
 8021f70:	3d01      	subs	r5, #1
 8021f72:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8021f76:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8021f7a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8021f7e:	d1f0      	bne.n	8021f62 <__ieee754_sqrt+0x92>
 8021f80:	462a      	mov	r2, r5
 8021f82:	f04f 0e20 	mov.w	lr, #32
 8021f86:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8021f8a:	4281      	cmp	r1, r0
 8021f8c:	eb06 0c05 	add.w	ip, r6, r5
 8021f90:	dc02      	bgt.n	8021f98 <__ieee754_sqrt+0xc8>
 8021f92:	d113      	bne.n	8021fbc <__ieee754_sqrt+0xec>
 8021f94:	459c      	cmp	ip, r3
 8021f96:	d811      	bhi.n	8021fbc <__ieee754_sqrt+0xec>
 8021f98:	f1bc 0f00 	cmp.w	ip, #0
 8021f9c:	eb0c 0506 	add.w	r5, ip, r6
 8021fa0:	da43      	bge.n	802202a <__ieee754_sqrt+0x15a>
 8021fa2:	2d00      	cmp	r5, #0
 8021fa4:	db41      	blt.n	802202a <__ieee754_sqrt+0x15a>
 8021fa6:	f100 0801 	add.w	r8, r0, #1
 8021faa:	1a09      	subs	r1, r1, r0
 8021fac:	459c      	cmp	ip, r3
 8021fae:	bf88      	it	hi
 8021fb0:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8021fb4:	eba3 030c 	sub.w	r3, r3, ip
 8021fb8:	4432      	add	r2, r6
 8021fba:	4640      	mov	r0, r8
 8021fbc:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8021fc0:	f1be 0e01 	subs.w	lr, lr, #1
 8021fc4:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8021fc8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8021fcc:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8021fd0:	d1db      	bne.n	8021f8a <__ieee754_sqrt+0xba>
 8021fd2:	430b      	orrs	r3, r1
 8021fd4:	d006      	beq.n	8021fe4 <__ieee754_sqrt+0x114>
 8021fd6:	1c50      	adds	r0, r2, #1
 8021fd8:	bf13      	iteet	ne
 8021fda:	3201      	addne	r2, #1
 8021fdc:	3401      	addeq	r4, #1
 8021fde:	4672      	moveq	r2, lr
 8021fe0:	f022 0201 	bicne.w	r2, r2, #1
 8021fe4:	1063      	asrs	r3, r4, #1
 8021fe6:	0852      	lsrs	r2, r2, #1
 8021fe8:	07e1      	lsls	r1, r4, #31
 8021fea:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8021fee:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8021ff2:	bf48      	it	mi
 8021ff4:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8021ff8:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8021ffc:	4614      	mov	r4, r2
 8021ffe:	e781      	b.n	8021f04 <__ieee754_sqrt+0x34>
 8022000:	0ad9      	lsrs	r1, r3, #11
 8022002:	3815      	subs	r0, #21
 8022004:	055b      	lsls	r3, r3, #21
 8022006:	2900      	cmp	r1, #0
 8022008:	d0fa      	beq.n	8022000 <__ieee754_sqrt+0x130>
 802200a:	02cd      	lsls	r5, r1, #11
 802200c:	d50a      	bpl.n	8022024 <__ieee754_sqrt+0x154>
 802200e:	f1c2 0420 	rsb	r4, r2, #32
 8022012:	fa23 f404 	lsr.w	r4, r3, r4
 8022016:	1e55      	subs	r5, r2, #1
 8022018:	4093      	lsls	r3, r2
 802201a:	4321      	orrs	r1, r4
 802201c:	1b42      	subs	r2, r0, r5
 802201e:	e78a      	b.n	8021f36 <__ieee754_sqrt+0x66>
 8022020:	4610      	mov	r0, r2
 8022022:	e7f0      	b.n	8022006 <__ieee754_sqrt+0x136>
 8022024:	0049      	lsls	r1, r1, #1
 8022026:	3201      	adds	r2, #1
 8022028:	e7ef      	b.n	802200a <__ieee754_sqrt+0x13a>
 802202a:	4680      	mov	r8, r0
 802202c:	e7bd      	b.n	8021faa <__ieee754_sqrt+0xda>
 802202e:	bf00      	nop
 8022030:	7ff00000 	.word	0x7ff00000

08022034 <__ieee754_expf>:
 8022034:	ee10 2a10 	vmov	r2, s0
 8022038:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 802203c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8022040:	d902      	bls.n	8022048 <__ieee754_expf+0x14>
 8022042:	ee30 0a00 	vadd.f32	s0, s0, s0
 8022046:	4770      	bx	lr
 8022048:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 802204c:	d106      	bne.n	802205c <__ieee754_expf+0x28>
 802204e:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8022188 <__ieee754_expf+0x154>
 8022052:	2b00      	cmp	r3, #0
 8022054:	bf18      	it	ne
 8022056:	eeb0 0a67 	vmovne.f32	s0, s15
 802205a:	4770      	bx	lr
 802205c:	484b      	ldr	r0, [pc, #300]	; (802218c <__ieee754_expf+0x158>)
 802205e:	4282      	cmp	r2, r0
 8022060:	dd02      	ble.n	8022068 <__ieee754_expf+0x34>
 8022062:	2000      	movs	r0, #0
 8022064:	f001 b92e 	b.w	80232c4 <__math_oflowf>
 8022068:	2a00      	cmp	r2, #0
 802206a:	da05      	bge.n	8022078 <__ieee754_expf+0x44>
 802206c:	4a48      	ldr	r2, [pc, #288]	; (8022190 <__ieee754_expf+0x15c>)
 802206e:	4291      	cmp	r1, r2
 8022070:	d902      	bls.n	8022078 <__ieee754_expf+0x44>
 8022072:	2000      	movs	r0, #0
 8022074:	f001 b920 	b.w	80232b8 <__math_uflowf>
 8022078:	4a46      	ldr	r2, [pc, #280]	; (8022194 <__ieee754_expf+0x160>)
 802207a:	4291      	cmp	r1, r2
 802207c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8022080:	d952      	bls.n	8022128 <__ieee754_expf+0xf4>
 8022082:	4a45      	ldr	r2, [pc, #276]	; (8022198 <__ieee754_expf+0x164>)
 8022084:	4291      	cmp	r1, r2
 8022086:	ea4f 0283 	mov.w	r2, r3, lsl #2
 802208a:	d834      	bhi.n	80220f6 <__ieee754_expf+0xc2>
 802208c:	4943      	ldr	r1, [pc, #268]	; (802219c <__ieee754_expf+0x168>)
 802208e:	4411      	add	r1, r2
 8022090:	ed91 7a00 	vldr	s14, [r1]
 8022094:	4942      	ldr	r1, [pc, #264]	; (80221a0 <__ieee754_expf+0x16c>)
 8022096:	440a      	add	r2, r1
 8022098:	edd2 7a00 	vldr	s15, [r2]
 802209c:	ee30 7a47 	vsub.f32	s14, s0, s14
 80220a0:	f1c3 0201 	rsb	r2, r3, #1
 80220a4:	1ad2      	subs	r2, r2, r3
 80220a6:	ee37 0a67 	vsub.f32	s0, s14, s15
 80220aa:	ee20 6a00 	vmul.f32	s12, s0, s0
 80220ae:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 80221a4 <__ieee754_expf+0x170>
 80220b2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80221a8 <__ieee754_expf+0x174>
 80220b6:	eee6 6a05 	vfma.f32	s13, s12, s10
 80220ba:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 80221ac <__ieee754_expf+0x178>
 80220be:	eea6 5a86 	vfma.f32	s10, s13, s12
 80220c2:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80221b0 <__ieee754_expf+0x17c>
 80220c6:	eee5 6a06 	vfma.f32	s13, s10, s12
 80220ca:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 80221b4 <__ieee754_expf+0x180>
 80220ce:	eea6 5a86 	vfma.f32	s10, s13, s12
 80220d2:	eef0 6a40 	vmov.f32	s13, s0
 80220d6:	eee5 6a46 	vfms.f32	s13, s10, s12
 80220da:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80220de:	ee20 5a26 	vmul.f32	s10, s0, s13
 80220e2:	bb92      	cbnz	r2, 802214a <__ieee754_expf+0x116>
 80220e4:	ee76 6ac6 	vsub.f32	s13, s13, s12
 80220e8:	eec5 7a26 	vdiv.f32	s15, s10, s13
 80220ec:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80220f0:	ee35 0ac0 	vsub.f32	s0, s11, s0
 80220f4:	4770      	bx	lr
 80220f6:	4b30      	ldr	r3, [pc, #192]	; (80221b8 <__ieee754_expf+0x184>)
 80220f8:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80221bc <__ieee754_expf+0x188>
 80220fc:	eddf 6a30 	vldr	s13, [pc, #192]	; 80221c0 <__ieee754_expf+0x18c>
 8022100:	4413      	add	r3, r2
 8022102:	edd3 7a00 	vldr	s15, [r3]
 8022106:	eee0 7a07 	vfma.f32	s15, s0, s14
 802210a:	eeb0 7a40 	vmov.f32	s14, s0
 802210e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8022112:	ee17 2a90 	vmov	r2, s15
 8022116:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802211a:	eea7 7ae6 	vfms.f32	s14, s15, s13
 802211e:	eddf 6a29 	vldr	s13, [pc, #164]	; 80221c4 <__ieee754_expf+0x190>
 8022122:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8022126:	e7be      	b.n	80220a6 <__ieee754_expf+0x72>
 8022128:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 802212c:	d20b      	bcs.n	8022146 <__ieee754_expf+0x112>
 802212e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80221c8 <__ieee754_expf+0x194>
 8022132:	ee70 6a26 	vadd.f32	s13, s0, s13
 8022136:	eef4 6ae5 	vcmpe.f32	s13, s11
 802213a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802213e:	dd02      	ble.n	8022146 <__ieee754_expf+0x112>
 8022140:	ee30 0a25 	vadd.f32	s0, s0, s11
 8022144:	4770      	bx	lr
 8022146:	2200      	movs	r2, #0
 8022148:	e7af      	b.n	80220aa <__ieee754_expf+0x76>
 802214a:	ee76 6a66 	vsub.f32	s13, s12, s13
 802214e:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8022152:	ee85 0a26 	vdiv.f32	s0, s10, s13
 8022156:	bfb8      	it	lt
 8022158:	3264      	addlt	r2, #100	; 0x64
 802215a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 802215e:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8022162:	ee75 7ac0 	vsub.f32	s15, s11, s0
 8022166:	ee17 3a90 	vmov	r3, s15
 802216a:	bfab      	itete	ge
 802216c:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8022170:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8022174:	ee00 3a10 	vmovge	s0, r3
 8022178:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 80221cc <__ieee754_expf+0x198>
 802217c:	bfbc      	itt	lt
 802217e:	ee00 3a10 	vmovlt	s0, r3
 8022182:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8022186:	4770      	bx	lr
 8022188:	00000000 	.word	0x00000000
 802218c:	42b17217 	.word	0x42b17217
 8022190:	42cff1b5 	.word	0x42cff1b5
 8022194:	3eb17218 	.word	0x3eb17218
 8022198:	3f851591 	.word	0x3f851591
 802219c:	08029f10 	.word	0x08029f10
 80221a0:	08029f18 	.word	0x08029f18
 80221a4:	3331bb4c 	.word	0x3331bb4c
 80221a8:	b5ddea0e 	.word	0xb5ddea0e
 80221ac:	388ab355 	.word	0x388ab355
 80221b0:	bb360b61 	.word	0xbb360b61
 80221b4:	3e2aaaab 	.word	0x3e2aaaab
 80221b8:	08029f08 	.word	0x08029f08
 80221bc:	3fb8aa3b 	.word	0x3fb8aa3b
 80221c0:	3f317180 	.word	0x3f317180
 80221c4:	3717f7d1 	.word	0x3717f7d1
 80221c8:	7149f2ca 	.word	0x7149f2ca
 80221cc:	0d800000 	.word	0x0d800000

080221d0 <__ieee754_logf>:
 80221d0:	ee10 3a10 	vmov	r3, s0
 80221d4:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80221d8:	d106      	bne.n	80221e8 <__ieee754_logf+0x18>
 80221da:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8022370 <__ieee754_logf+0x1a0>
 80221de:	eddf 7a65 	vldr	s15, [pc, #404]	; 8022374 <__ieee754_logf+0x1a4>
 80221e2:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80221e6:	4770      	bx	lr
 80221e8:	2b00      	cmp	r3, #0
 80221ea:	da02      	bge.n	80221f2 <__ieee754_logf+0x22>
 80221ec:	ee30 7a40 	vsub.f32	s14, s0, s0
 80221f0:	e7f5      	b.n	80221de <__ieee754_logf+0xe>
 80221f2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80221f6:	db02      	blt.n	80221fe <__ieee754_logf+0x2e>
 80221f8:	ee30 0a00 	vadd.f32	s0, s0, s0
 80221fc:	4770      	bx	lr
 80221fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8022202:	bfb8      	it	lt
 8022204:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 8022378 <__ieee754_logf+0x1a8>
 8022208:	485c      	ldr	r0, [pc, #368]	; (802237c <__ieee754_logf+0x1ac>)
 802220a:	bfbe      	ittt	lt
 802220c:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8022210:	f06f 0118 	mvnlt.w	r1, #24
 8022214:	ee17 3a90 	vmovlt	r3, s15
 8022218:	ea4f 52e3 	mov.w	r2, r3, asr #23
 802221c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8022220:	4418      	add	r0, r3
 8022222:	bfa8      	it	ge
 8022224:	2100      	movge	r1, #0
 8022226:	3a7f      	subs	r2, #127	; 0x7f
 8022228:	440a      	add	r2, r1
 802222a:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 802222e:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 8022232:	4319      	orrs	r1, r3
 8022234:	ee00 1a10 	vmov	s0, r1
 8022238:	4951      	ldr	r1, [pc, #324]	; (8022380 <__ieee754_logf+0x1b0>)
 802223a:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 802223e:	f103 000f 	add.w	r0, r3, #15
 8022242:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8022246:	4001      	ands	r1, r0
 8022248:	ee30 0a67 	vsub.f32	s0, s0, s15
 802224c:	bb89      	cbnz	r1, 80222b2 <__ieee754_logf+0xe2>
 802224e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8022252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022256:	d10f      	bne.n	8022278 <__ieee754_logf+0xa8>
 8022258:	2a00      	cmp	r2, #0
 802225a:	f000 8085 	beq.w	8022368 <__ieee754_logf+0x198>
 802225e:	ee07 2a90 	vmov	s15, r2
 8022262:	ed9f 0a48 	vldr	s0, [pc, #288]	; 8022384 <__ieee754_logf+0x1b4>
 8022266:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8022388 <__ieee754_logf+0x1b8>
 802226a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802226e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8022272:	eea7 0a87 	vfma.f32	s0, s15, s14
 8022276:	4770      	bx	lr
 8022278:	eddf 6a44 	vldr	s13, [pc, #272]	; 802238c <__ieee754_logf+0x1bc>
 802227c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8022280:	eee0 7a66 	vfms.f32	s15, s0, s13
 8022284:	ee20 7a00 	vmul.f32	s14, s0, s0
 8022288:	ee27 7a27 	vmul.f32	s14, s14, s15
 802228c:	b912      	cbnz	r2, 8022294 <__ieee754_logf+0xc4>
 802228e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8022292:	4770      	bx	lr
 8022294:	ee07 2a90 	vmov	s15, r2
 8022298:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8022384 <__ieee754_logf+0x1b4>
 802229c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80222a0:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80222a4:	ee37 0a40 	vsub.f32	s0, s14, s0
 80222a8:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8022388 <__ieee754_logf+0x1b8>
 80222ac:	ee97 0a87 	vfnms.f32	s0, s15, s14
 80222b0:	4770      	bx	lr
 80222b2:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80222b6:	ee70 7a27 	vadd.f32	s15, s0, s15
 80222ba:	eddf 5a35 	vldr	s11, [pc, #212]	; 8022390 <__ieee754_logf+0x1c0>
 80222be:	eddf 4a35 	vldr	s9, [pc, #212]	; 8022394 <__ieee754_logf+0x1c4>
 80222c2:	4935      	ldr	r1, [pc, #212]	; (8022398 <__ieee754_logf+0x1c8>)
 80222c4:	ee80 6a27 	vdiv.f32	s12, s0, s15
 80222c8:	4419      	add	r1, r3
 80222ca:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 80222ce:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80222d2:	430b      	orrs	r3, r1
 80222d4:	2b00      	cmp	r3, #0
 80222d6:	ee07 2a90 	vmov	s15, r2
 80222da:	ee26 5a06 	vmul.f32	s10, s12, s12
 80222de:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80222e2:	ee25 7a05 	vmul.f32	s14, s10, s10
 80222e6:	eddf 7a2d 	vldr	s15, [pc, #180]	; 802239c <__ieee754_logf+0x1cc>
 80222ea:	eee7 7a25 	vfma.f32	s15, s14, s11
 80222ee:	eddf 5a2c 	vldr	s11, [pc, #176]	; 80223a0 <__ieee754_logf+0x1d0>
 80222f2:	eee7 5a87 	vfma.f32	s11, s15, s14
 80222f6:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80223a4 <__ieee754_logf+0x1d4>
 80222fa:	eee7 7a24 	vfma.f32	s15, s14, s9
 80222fe:	eddf 4a2a 	vldr	s9, [pc, #168]	; 80223a8 <__ieee754_logf+0x1d8>
 8022302:	eee7 4a87 	vfma.f32	s9, s15, s14
 8022306:	eddf 7a29 	vldr	s15, [pc, #164]	; 80223ac <__ieee754_logf+0x1dc>
 802230a:	eee4 7a87 	vfma.f32	s15, s9, s14
 802230e:	ee67 7a85 	vmul.f32	s15, s15, s10
 8022312:	eee5 7a87 	vfma.f32	s15, s11, s14
 8022316:	dd1c      	ble.n	8022352 <__ieee754_logf+0x182>
 8022318:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 802231c:	ee20 7a07 	vmul.f32	s14, s0, s14
 8022320:	ee27 7a00 	vmul.f32	s14, s14, s0
 8022324:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022328:	ee67 7a86 	vmul.f32	s15, s15, s12
 802232c:	b922      	cbnz	r2, 8022338 <__ieee754_logf+0x168>
 802232e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8022332:	ee30 0a67 	vsub.f32	s0, s0, s15
 8022336:	4770      	bx	lr
 8022338:	ed9f 6a12 	vldr	s12, [pc, #72]	; 8022384 <__ieee754_logf+0x1b4>
 802233c:	eee6 7a86 	vfma.f32	s15, s13, s12
 8022340:	ee77 7a67 	vsub.f32	s15, s14, s15
 8022344:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8022348:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8022388 <__ieee754_logf+0x1b8>
 802234c:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8022350:	4770      	bx	lr
 8022352:	ee70 7a67 	vsub.f32	s15, s0, s15
 8022356:	ee67 7a86 	vmul.f32	s15, s15, s12
 802235a:	2a00      	cmp	r2, #0
 802235c:	d0e9      	beq.n	8022332 <__ieee754_logf+0x162>
 802235e:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8022384 <__ieee754_logf+0x1b4>
 8022362:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8022366:	e7ed      	b.n	8022344 <__ieee754_logf+0x174>
 8022368:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8022374 <__ieee754_logf+0x1a4>
 802236c:	4770      	bx	lr
 802236e:	bf00      	nop
 8022370:	cc000000 	.word	0xcc000000
 8022374:	00000000 	.word	0x00000000
 8022378:	4c000000 	.word	0x4c000000
 802237c:	004afb20 	.word	0x004afb20
 8022380:	007ffff0 	.word	0x007ffff0
 8022384:	3717f7d1 	.word	0x3717f7d1
 8022388:	3f317180 	.word	0x3f317180
 802238c:	3eaaaaab 	.word	0x3eaaaaab
 8022390:	3e1cd04f 	.word	0x3e1cd04f
 8022394:	3e178897 	.word	0x3e178897
 8022398:	ffcf5c30 	.word	0xffcf5c30
 802239c:	3e638e29 	.word	0x3e638e29
 80223a0:	3ecccccd 	.word	0x3ecccccd
 80223a4:	3e3a3325 	.word	0x3e3a3325
 80223a8:	3e924925 	.word	0x3e924925
 80223ac:	3f2aaaab 	.word	0x3f2aaaab

080223b0 <__ieee754_log10f>:
 80223b0:	b508      	push	{r3, lr}
 80223b2:	ee10 2a10 	vmov	r2, s0
 80223b6:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 80223ba:	ed2d 8b02 	vpush	{d8}
 80223be:	d108      	bne.n	80223d2 <__ieee754_log10f+0x22>
 80223c0:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8022448 <__ieee754_log10f+0x98>
 80223c4:	eddf 7a21 	vldr	s15, [pc, #132]	; 802244c <__ieee754_log10f+0x9c>
 80223c8:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80223cc:	ecbd 8b02 	vpop	{d8}
 80223d0:	bd08      	pop	{r3, pc}
 80223d2:	2a00      	cmp	r2, #0
 80223d4:	da02      	bge.n	80223dc <__ieee754_log10f+0x2c>
 80223d6:	ee30 7a40 	vsub.f32	s14, s0, s0
 80223da:	e7f3      	b.n	80223c4 <__ieee754_log10f+0x14>
 80223dc:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80223e0:	db02      	blt.n	80223e8 <__ieee754_log10f+0x38>
 80223e2:	ee30 0a00 	vadd.f32	s0, s0, s0
 80223e6:	e7f1      	b.n	80223cc <__ieee754_log10f+0x1c>
 80223e8:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 80223ec:	bfbf      	itttt	lt
 80223ee:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 8022450 <__ieee754_log10f+0xa0>
 80223f2:	ee60 7a27 	vmullt.f32	s15, s0, s15
 80223f6:	f06f 0118 	mvnlt.w	r1, #24
 80223fa:	ee17 2a90 	vmovlt	r2, s15
 80223fe:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8022402:	bfa8      	it	ge
 8022404:	2100      	movge	r1, #0
 8022406:	3b7f      	subs	r3, #127	; 0x7f
 8022408:	440b      	add	r3, r1
 802240a:	0fd9      	lsrs	r1, r3, #31
 802240c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8022410:	ee07 3a90 	vmov	s15, r3
 8022414:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8022418:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 802241c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8022420:	ee00 3a10 	vmov	s0, r3
 8022424:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8022428:	f7ff fed2 	bl	80221d0 <__ieee754_logf>
 802242c:	eddf 7a09 	vldr	s15, [pc, #36]	; 8022454 <__ieee754_log10f+0xa4>
 8022430:	ee20 0a27 	vmul.f32	s0, s0, s15
 8022434:	eddf 7a08 	vldr	s15, [pc, #32]	; 8022458 <__ieee754_log10f+0xa8>
 8022438:	eea8 0a27 	vfma.f32	s0, s16, s15
 802243c:	eddf 7a07 	vldr	s15, [pc, #28]	; 802245c <__ieee754_log10f+0xac>
 8022440:	eea8 0a27 	vfma.f32	s0, s16, s15
 8022444:	e7c2      	b.n	80223cc <__ieee754_log10f+0x1c>
 8022446:	bf00      	nop
 8022448:	cc000000 	.word	0xcc000000
 802244c:	00000000 	.word	0x00000000
 8022450:	4c000000 	.word	0x4c000000
 8022454:	3ede5bd9 	.word	0x3ede5bd9
 8022458:	355427db 	.word	0x355427db
 802245c:	3e9a2080 	.word	0x3e9a2080

08022460 <__ieee754_sqrtf>:
 8022460:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8022464:	4770      	bx	lr
	...

08022468 <__kernel_cos>:
 8022468:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802246c:	ec57 6b10 	vmov	r6, r7, d0
 8022470:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8022474:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8022478:	ed8d 1b00 	vstr	d1, [sp]
 802247c:	da07      	bge.n	802248e <__kernel_cos+0x26>
 802247e:	ee10 0a10 	vmov	r0, s0
 8022482:	4639      	mov	r1, r7
 8022484:	f7de fb72 	bl	8000b6c <__aeabi_d2iz>
 8022488:	2800      	cmp	r0, #0
 802248a:	f000 8088 	beq.w	802259e <__kernel_cos+0x136>
 802248e:	4632      	mov	r2, r6
 8022490:	463b      	mov	r3, r7
 8022492:	4630      	mov	r0, r6
 8022494:	4639      	mov	r1, r7
 8022496:	f7de f8b9 	bl	800060c <__aeabi_dmul>
 802249a:	4b51      	ldr	r3, [pc, #324]	; (80225e0 <__kernel_cos+0x178>)
 802249c:	2200      	movs	r2, #0
 802249e:	4604      	mov	r4, r0
 80224a0:	460d      	mov	r5, r1
 80224a2:	f7de f8b3 	bl	800060c <__aeabi_dmul>
 80224a6:	a340      	add	r3, pc, #256	; (adr r3, 80225a8 <__kernel_cos+0x140>)
 80224a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80224ac:	4682      	mov	sl, r0
 80224ae:	468b      	mov	fp, r1
 80224b0:	4620      	mov	r0, r4
 80224b2:	4629      	mov	r1, r5
 80224b4:	f7de f8aa 	bl	800060c <__aeabi_dmul>
 80224b8:	a33d      	add	r3, pc, #244	; (adr r3, 80225b0 <__kernel_cos+0x148>)
 80224ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80224be:	f7dd feef 	bl	80002a0 <__adddf3>
 80224c2:	4622      	mov	r2, r4
 80224c4:	462b      	mov	r3, r5
 80224c6:	f7de f8a1 	bl	800060c <__aeabi_dmul>
 80224ca:	a33b      	add	r3, pc, #236	; (adr r3, 80225b8 <__kernel_cos+0x150>)
 80224cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80224d0:	f7dd fee4 	bl	800029c <__aeabi_dsub>
 80224d4:	4622      	mov	r2, r4
 80224d6:	462b      	mov	r3, r5
 80224d8:	f7de f898 	bl	800060c <__aeabi_dmul>
 80224dc:	a338      	add	r3, pc, #224	; (adr r3, 80225c0 <__kernel_cos+0x158>)
 80224de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80224e2:	f7dd fedd 	bl	80002a0 <__adddf3>
 80224e6:	4622      	mov	r2, r4
 80224e8:	462b      	mov	r3, r5
 80224ea:	f7de f88f 	bl	800060c <__aeabi_dmul>
 80224ee:	a336      	add	r3, pc, #216	; (adr r3, 80225c8 <__kernel_cos+0x160>)
 80224f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80224f4:	f7dd fed2 	bl	800029c <__aeabi_dsub>
 80224f8:	4622      	mov	r2, r4
 80224fa:	462b      	mov	r3, r5
 80224fc:	f7de f886 	bl	800060c <__aeabi_dmul>
 8022500:	a333      	add	r3, pc, #204	; (adr r3, 80225d0 <__kernel_cos+0x168>)
 8022502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022506:	f7dd fecb 	bl	80002a0 <__adddf3>
 802250a:	4622      	mov	r2, r4
 802250c:	462b      	mov	r3, r5
 802250e:	f7de f87d 	bl	800060c <__aeabi_dmul>
 8022512:	4622      	mov	r2, r4
 8022514:	462b      	mov	r3, r5
 8022516:	f7de f879 	bl	800060c <__aeabi_dmul>
 802251a:	e9dd 2300 	ldrd	r2, r3, [sp]
 802251e:	4604      	mov	r4, r0
 8022520:	460d      	mov	r5, r1
 8022522:	4630      	mov	r0, r6
 8022524:	4639      	mov	r1, r7
 8022526:	f7de f871 	bl	800060c <__aeabi_dmul>
 802252a:	460b      	mov	r3, r1
 802252c:	4602      	mov	r2, r0
 802252e:	4629      	mov	r1, r5
 8022530:	4620      	mov	r0, r4
 8022532:	f7dd feb3 	bl	800029c <__aeabi_dsub>
 8022536:	4b2b      	ldr	r3, [pc, #172]	; (80225e4 <__kernel_cos+0x17c>)
 8022538:	4598      	cmp	r8, r3
 802253a:	4606      	mov	r6, r0
 802253c:	460f      	mov	r7, r1
 802253e:	dc10      	bgt.n	8022562 <__kernel_cos+0xfa>
 8022540:	4602      	mov	r2, r0
 8022542:	460b      	mov	r3, r1
 8022544:	4650      	mov	r0, sl
 8022546:	4659      	mov	r1, fp
 8022548:	f7dd fea8 	bl	800029c <__aeabi_dsub>
 802254c:	460b      	mov	r3, r1
 802254e:	4926      	ldr	r1, [pc, #152]	; (80225e8 <__kernel_cos+0x180>)
 8022550:	4602      	mov	r2, r0
 8022552:	2000      	movs	r0, #0
 8022554:	f7dd fea2 	bl	800029c <__aeabi_dsub>
 8022558:	ec41 0b10 	vmov	d0, r0, r1
 802255c:	b003      	add	sp, #12
 802255e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022562:	4b22      	ldr	r3, [pc, #136]	; (80225ec <__kernel_cos+0x184>)
 8022564:	4920      	ldr	r1, [pc, #128]	; (80225e8 <__kernel_cos+0x180>)
 8022566:	4598      	cmp	r8, r3
 8022568:	bfcc      	ite	gt
 802256a:	4d21      	ldrgt	r5, [pc, #132]	; (80225f0 <__kernel_cos+0x188>)
 802256c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8022570:	2400      	movs	r4, #0
 8022572:	4622      	mov	r2, r4
 8022574:	462b      	mov	r3, r5
 8022576:	2000      	movs	r0, #0
 8022578:	f7dd fe90 	bl	800029c <__aeabi_dsub>
 802257c:	4622      	mov	r2, r4
 802257e:	4680      	mov	r8, r0
 8022580:	4689      	mov	r9, r1
 8022582:	462b      	mov	r3, r5
 8022584:	4650      	mov	r0, sl
 8022586:	4659      	mov	r1, fp
 8022588:	f7dd fe88 	bl	800029c <__aeabi_dsub>
 802258c:	4632      	mov	r2, r6
 802258e:	463b      	mov	r3, r7
 8022590:	f7dd fe84 	bl	800029c <__aeabi_dsub>
 8022594:	4602      	mov	r2, r0
 8022596:	460b      	mov	r3, r1
 8022598:	4640      	mov	r0, r8
 802259a:	4649      	mov	r1, r9
 802259c:	e7da      	b.n	8022554 <__kernel_cos+0xec>
 802259e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80225d8 <__kernel_cos+0x170>
 80225a2:	e7db      	b.n	802255c <__kernel_cos+0xf4>
 80225a4:	f3af 8000 	nop.w
 80225a8:	be8838d4 	.word	0xbe8838d4
 80225ac:	bda8fae9 	.word	0xbda8fae9
 80225b0:	bdb4b1c4 	.word	0xbdb4b1c4
 80225b4:	3e21ee9e 	.word	0x3e21ee9e
 80225b8:	809c52ad 	.word	0x809c52ad
 80225bc:	3e927e4f 	.word	0x3e927e4f
 80225c0:	19cb1590 	.word	0x19cb1590
 80225c4:	3efa01a0 	.word	0x3efa01a0
 80225c8:	16c15177 	.word	0x16c15177
 80225cc:	3f56c16c 	.word	0x3f56c16c
 80225d0:	5555554c 	.word	0x5555554c
 80225d4:	3fa55555 	.word	0x3fa55555
 80225d8:	00000000 	.word	0x00000000
 80225dc:	3ff00000 	.word	0x3ff00000
 80225e0:	3fe00000 	.word	0x3fe00000
 80225e4:	3fd33332 	.word	0x3fd33332
 80225e8:	3ff00000 	.word	0x3ff00000
 80225ec:	3fe90000 	.word	0x3fe90000
 80225f0:	3fd20000 	.word	0x3fd20000
 80225f4:	00000000 	.word	0x00000000

080225f8 <__kernel_rem_pio2>:
 80225f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80225fc:	ed2d 8b02 	vpush	{d8}
 8022600:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8022604:	f112 0f14 	cmn.w	r2, #20
 8022608:	9308      	str	r3, [sp, #32]
 802260a:	9101      	str	r1, [sp, #4]
 802260c:	4bc4      	ldr	r3, [pc, #784]	; (8022920 <__kernel_rem_pio2+0x328>)
 802260e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8022610:	900b      	str	r0, [sp, #44]	; 0x2c
 8022612:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8022616:	9302      	str	r3, [sp, #8]
 8022618:	9b08      	ldr	r3, [sp, #32]
 802261a:	f103 33ff 	add.w	r3, r3, #4294967295
 802261e:	bfa8      	it	ge
 8022620:	1ed4      	subge	r4, r2, #3
 8022622:	9306      	str	r3, [sp, #24]
 8022624:	bfb2      	itee	lt
 8022626:	2400      	movlt	r4, #0
 8022628:	2318      	movge	r3, #24
 802262a:	fb94 f4f3 	sdivge	r4, r4, r3
 802262e:	f06f 0317 	mvn.w	r3, #23
 8022632:	fb04 3303 	mla	r3, r4, r3, r3
 8022636:	eb03 0a02 	add.w	sl, r3, r2
 802263a:	9b02      	ldr	r3, [sp, #8]
 802263c:	9a06      	ldr	r2, [sp, #24]
 802263e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8022910 <__kernel_rem_pio2+0x318>
 8022642:	eb03 0802 	add.w	r8, r3, r2
 8022646:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8022648:	1aa7      	subs	r7, r4, r2
 802264a:	ae22      	add	r6, sp, #136	; 0x88
 802264c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8022650:	2500      	movs	r5, #0
 8022652:	4545      	cmp	r5, r8
 8022654:	dd13      	ble.n	802267e <__kernel_rem_pio2+0x86>
 8022656:	9b08      	ldr	r3, [sp, #32]
 8022658:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8022910 <__kernel_rem_pio2+0x318>
 802265c:	aa22      	add	r2, sp, #136	; 0x88
 802265e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8022662:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8022666:	f04f 0800 	mov.w	r8, #0
 802266a:	9b02      	ldr	r3, [sp, #8]
 802266c:	4598      	cmp	r8, r3
 802266e:	dc2f      	bgt.n	80226d0 <__kernel_rem_pio2+0xd8>
 8022670:	ed8d 8b04 	vstr	d8, [sp, #16]
 8022674:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8022678:	462f      	mov	r7, r5
 802267a:	2600      	movs	r6, #0
 802267c:	e01b      	b.n	80226b6 <__kernel_rem_pio2+0xbe>
 802267e:	42ef      	cmn	r7, r5
 8022680:	d407      	bmi.n	8022692 <__kernel_rem_pio2+0x9a>
 8022682:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8022686:	f7dd ff57 	bl	8000538 <__aeabi_i2d>
 802268a:	e8e6 0102 	strd	r0, r1, [r6], #8
 802268e:	3501      	adds	r5, #1
 8022690:	e7df      	b.n	8022652 <__kernel_rem_pio2+0x5a>
 8022692:	ec51 0b18 	vmov	r0, r1, d8
 8022696:	e7f8      	b.n	802268a <__kernel_rem_pio2+0x92>
 8022698:	e9d7 2300 	ldrd	r2, r3, [r7]
 802269c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80226a0:	f7dd ffb4 	bl	800060c <__aeabi_dmul>
 80226a4:	4602      	mov	r2, r0
 80226a6:	460b      	mov	r3, r1
 80226a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80226ac:	f7dd fdf8 	bl	80002a0 <__adddf3>
 80226b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80226b4:	3601      	adds	r6, #1
 80226b6:	9b06      	ldr	r3, [sp, #24]
 80226b8:	429e      	cmp	r6, r3
 80226ba:	f1a7 0708 	sub.w	r7, r7, #8
 80226be:	ddeb      	ble.n	8022698 <__kernel_rem_pio2+0xa0>
 80226c0:	ed9d 7b04 	vldr	d7, [sp, #16]
 80226c4:	f108 0801 	add.w	r8, r8, #1
 80226c8:	ecab 7b02 	vstmia	fp!, {d7}
 80226cc:	3508      	adds	r5, #8
 80226ce:	e7cc      	b.n	802266a <__kernel_rem_pio2+0x72>
 80226d0:	9b02      	ldr	r3, [sp, #8]
 80226d2:	aa0e      	add	r2, sp, #56	; 0x38
 80226d4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80226d8:	930d      	str	r3, [sp, #52]	; 0x34
 80226da:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80226dc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80226e0:	9c02      	ldr	r4, [sp, #8]
 80226e2:	930c      	str	r3, [sp, #48]	; 0x30
 80226e4:	00e3      	lsls	r3, r4, #3
 80226e6:	930a      	str	r3, [sp, #40]	; 0x28
 80226e8:	ab9a      	add	r3, sp, #616	; 0x268
 80226ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80226ee:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80226f2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80226f6:	ab72      	add	r3, sp, #456	; 0x1c8
 80226f8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80226fc:	46c3      	mov	fp, r8
 80226fe:	46a1      	mov	r9, r4
 8022700:	f1b9 0f00 	cmp.w	r9, #0
 8022704:	f1a5 0508 	sub.w	r5, r5, #8
 8022708:	dc77      	bgt.n	80227fa <__kernel_rem_pio2+0x202>
 802270a:	ec47 6b10 	vmov	d0, r6, r7
 802270e:	4650      	mov	r0, sl
 8022710:	f000 fdfa 	bl	8023308 <scalbn>
 8022714:	ec57 6b10 	vmov	r6, r7, d0
 8022718:	2200      	movs	r2, #0
 802271a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 802271e:	ee10 0a10 	vmov	r0, s0
 8022722:	4639      	mov	r1, r7
 8022724:	f7dd ff72 	bl	800060c <__aeabi_dmul>
 8022728:	ec41 0b10 	vmov	d0, r0, r1
 802272c:	f7fe f9a0 	bl	8020a70 <floor>
 8022730:	4b7c      	ldr	r3, [pc, #496]	; (8022924 <__kernel_rem_pio2+0x32c>)
 8022732:	ec51 0b10 	vmov	r0, r1, d0
 8022736:	2200      	movs	r2, #0
 8022738:	f7dd ff68 	bl	800060c <__aeabi_dmul>
 802273c:	4602      	mov	r2, r0
 802273e:	460b      	mov	r3, r1
 8022740:	4630      	mov	r0, r6
 8022742:	4639      	mov	r1, r7
 8022744:	f7dd fdaa 	bl	800029c <__aeabi_dsub>
 8022748:	460f      	mov	r7, r1
 802274a:	4606      	mov	r6, r0
 802274c:	f7de fa0e 	bl	8000b6c <__aeabi_d2iz>
 8022750:	9004      	str	r0, [sp, #16]
 8022752:	f7dd fef1 	bl	8000538 <__aeabi_i2d>
 8022756:	4602      	mov	r2, r0
 8022758:	460b      	mov	r3, r1
 802275a:	4630      	mov	r0, r6
 802275c:	4639      	mov	r1, r7
 802275e:	f7dd fd9d 	bl	800029c <__aeabi_dsub>
 8022762:	f1ba 0f00 	cmp.w	sl, #0
 8022766:	4606      	mov	r6, r0
 8022768:	460f      	mov	r7, r1
 802276a:	dd6d      	ble.n	8022848 <__kernel_rem_pio2+0x250>
 802276c:	1e62      	subs	r2, r4, #1
 802276e:	ab0e      	add	r3, sp, #56	; 0x38
 8022770:	9d04      	ldr	r5, [sp, #16]
 8022772:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8022776:	f1ca 0118 	rsb	r1, sl, #24
 802277a:	fa40 f301 	asr.w	r3, r0, r1
 802277e:	441d      	add	r5, r3
 8022780:	408b      	lsls	r3, r1
 8022782:	1ac0      	subs	r0, r0, r3
 8022784:	ab0e      	add	r3, sp, #56	; 0x38
 8022786:	9504      	str	r5, [sp, #16]
 8022788:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 802278c:	f1ca 0317 	rsb	r3, sl, #23
 8022790:	fa40 fb03 	asr.w	fp, r0, r3
 8022794:	f1bb 0f00 	cmp.w	fp, #0
 8022798:	dd65      	ble.n	8022866 <__kernel_rem_pio2+0x26e>
 802279a:	9b04      	ldr	r3, [sp, #16]
 802279c:	2200      	movs	r2, #0
 802279e:	3301      	adds	r3, #1
 80227a0:	9304      	str	r3, [sp, #16]
 80227a2:	4615      	mov	r5, r2
 80227a4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80227a8:	4294      	cmp	r4, r2
 80227aa:	f300 809c 	bgt.w	80228e6 <__kernel_rem_pio2+0x2ee>
 80227ae:	f1ba 0f00 	cmp.w	sl, #0
 80227b2:	dd07      	ble.n	80227c4 <__kernel_rem_pio2+0x1cc>
 80227b4:	f1ba 0f01 	cmp.w	sl, #1
 80227b8:	f000 80c0 	beq.w	802293c <__kernel_rem_pio2+0x344>
 80227bc:	f1ba 0f02 	cmp.w	sl, #2
 80227c0:	f000 80c6 	beq.w	8022950 <__kernel_rem_pio2+0x358>
 80227c4:	f1bb 0f02 	cmp.w	fp, #2
 80227c8:	d14d      	bne.n	8022866 <__kernel_rem_pio2+0x26e>
 80227ca:	4632      	mov	r2, r6
 80227cc:	463b      	mov	r3, r7
 80227ce:	4956      	ldr	r1, [pc, #344]	; (8022928 <__kernel_rem_pio2+0x330>)
 80227d0:	2000      	movs	r0, #0
 80227d2:	f7dd fd63 	bl	800029c <__aeabi_dsub>
 80227d6:	4606      	mov	r6, r0
 80227d8:	460f      	mov	r7, r1
 80227da:	2d00      	cmp	r5, #0
 80227dc:	d043      	beq.n	8022866 <__kernel_rem_pio2+0x26e>
 80227de:	4650      	mov	r0, sl
 80227e0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8022918 <__kernel_rem_pio2+0x320>
 80227e4:	f000 fd90 	bl	8023308 <scalbn>
 80227e8:	4630      	mov	r0, r6
 80227ea:	4639      	mov	r1, r7
 80227ec:	ec53 2b10 	vmov	r2, r3, d0
 80227f0:	f7dd fd54 	bl	800029c <__aeabi_dsub>
 80227f4:	4606      	mov	r6, r0
 80227f6:	460f      	mov	r7, r1
 80227f8:	e035      	b.n	8022866 <__kernel_rem_pio2+0x26e>
 80227fa:	4b4c      	ldr	r3, [pc, #304]	; (802292c <__kernel_rem_pio2+0x334>)
 80227fc:	2200      	movs	r2, #0
 80227fe:	4630      	mov	r0, r6
 8022800:	4639      	mov	r1, r7
 8022802:	f7dd ff03 	bl	800060c <__aeabi_dmul>
 8022806:	f7de f9b1 	bl	8000b6c <__aeabi_d2iz>
 802280a:	f7dd fe95 	bl	8000538 <__aeabi_i2d>
 802280e:	4602      	mov	r2, r0
 8022810:	460b      	mov	r3, r1
 8022812:	ec43 2b18 	vmov	d8, r2, r3
 8022816:	4b46      	ldr	r3, [pc, #280]	; (8022930 <__kernel_rem_pio2+0x338>)
 8022818:	2200      	movs	r2, #0
 802281a:	f7dd fef7 	bl	800060c <__aeabi_dmul>
 802281e:	4602      	mov	r2, r0
 8022820:	460b      	mov	r3, r1
 8022822:	4630      	mov	r0, r6
 8022824:	4639      	mov	r1, r7
 8022826:	f7dd fd39 	bl	800029c <__aeabi_dsub>
 802282a:	f7de f99f 	bl	8000b6c <__aeabi_d2iz>
 802282e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8022832:	f84b 0b04 	str.w	r0, [fp], #4
 8022836:	ec51 0b18 	vmov	r0, r1, d8
 802283a:	f7dd fd31 	bl	80002a0 <__adddf3>
 802283e:	f109 39ff 	add.w	r9, r9, #4294967295
 8022842:	4606      	mov	r6, r0
 8022844:	460f      	mov	r7, r1
 8022846:	e75b      	b.n	8022700 <__kernel_rem_pio2+0x108>
 8022848:	d106      	bne.n	8022858 <__kernel_rem_pio2+0x260>
 802284a:	1e63      	subs	r3, r4, #1
 802284c:	aa0e      	add	r2, sp, #56	; 0x38
 802284e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8022852:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8022856:	e79d      	b.n	8022794 <__kernel_rem_pio2+0x19c>
 8022858:	4b36      	ldr	r3, [pc, #216]	; (8022934 <__kernel_rem_pio2+0x33c>)
 802285a:	2200      	movs	r2, #0
 802285c:	f7de f95c 	bl	8000b18 <__aeabi_dcmpge>
 8022860:	2800      	cmp	r0, #0
 8022862:	d13d      	bne.n	80228e0 <__kernel_rem_pio2+0x2e8>
 8022864:	4683      	mov	fp, r0
 8022866:	2200      	movs	r2, #0
 8022868:	2300      	movs	r3, #0
 802286a:	4630      	mov	r0, r6
 802286c:	4639      	mov	r1, r7
 802286e:	f7de f935 	bl	8000adc <__aeabi_dcmpeq>
 8022872:	2800      	cmp	r0, #0
 8022874:	f000 80c0 	beq.w	80229f8 <__kernel_rem_pio2+0x400>
 8022878:	1e65      	subs	r5, r4, #1
 802287a:	462b      	mov	r3, r5
 802287c:	2200      	movs	r2, #0
 802287e:	9902      	ldr	r1, [sp, #8]
 8022880:	428b      	cmp	r3, r1
 8022882:	da6c      	bge.n	802295e <__kernel_rem_pio2+0x366>
 8022884:	2a00      	cmp	r2, #0
 8022886:	f000 8089 	beq.w	802299c <__kernel_rem_pio2+0x3a4>
 802288a:	ab0e      	add	r3, sp, #56	; 0x38
 802288c:	f1aa 0a18 	sub.w	sl, sl, #24
 8022890:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8022894:	2b00      	cmp	r3, #0
 8022896:	f000 80ad 	beq.w	80229f4 <__kernel_rem_pio2+0x3fc>
 802289a:	4650      	mov	r0, sl
 802289c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8022918 <__kernel_rem_pio2+0x320>
 80228a0:	f000 fd32 	bl	8023308 <scalbn>
 80228a4:	ab9a      	add	r3, sp, #616	; 0x268
 80228a6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80228aa:	ec57 6b10 	vmov	r6, r7, d0
 80228ae:	00ec      	lsls	r4, r5, #3
 80228b0:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 80228b4:	46aa      	mov	sl, r5
 80228b6:	f1ba 0f00 	cmp.w	sl, #0
 80228ba:	f280 80d6 	bge.w	8022a6a <__kernel_rem_pio2+0x472>
 80228be:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8022910 <__kernel_rem_pio2+0x318>
 80228c2:	462e      	mov	r6, r5
 80228c4:	2e00      	cmp	r6, #0
 80228c6:	f2c0 8104 	blt.w	8022ad2 <__kernel_rem_pio2+0x4da>
 80228ca:	ab72      	add	r3, sp, #456	; 0x1c8
 80228cc:	ed8d 8b06 	vstr	d8, [sp, #24]
 80228d0:	f8df a064 	ldr.w	sl, [pc, #100]	; 8022938 <__kernel_rem_pio2+0x340>
 80228d4:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 80228d8:	f04f 0800 	mov.w	r8, #0
 80228dc:	1baf      	subs	r7, r5, r6
 80228de:	e0ea      	b.n	8022ab6 <__kernel_rem_pio2+0x4be>
 80228e0:	f04f 0b02 	mov.w	fp, #2
 80228e4:	e759      	b.n	802279a <__kernel_rem_pio2+0x1a2>
 80228e6:	f8d8 3000 	ldr.w	r3, [r8]
 80228ea:	b955      	cbnz	r5, 8022902 <__kernel_rem_pio2+0x30a>
 80228ec:	b123      	cbz	r3, 80228f8 <__kernel_rem_pio2+0x300>
 80228ee:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80228f2:	f8c8 3000 	str.w	r3, [r8]
 80228f6:	2301      	movs	r3, #1
 80228f8:	3201      	adds	r2, #1
 80228fa:	f108 0804 	add.w	r8, r8, #4
 80228fe:	461d      	mov	r5, r3
 8022900:	e752      	b.n	80227a8 <__kernel_rem_pio2+0x1b0>
 8022902:	1acb      	subs	r3, r1, r3
 8022904:	f8c8 3000 	str.w	r3, [r8]
 8022908:	462b      	mov	r3, r5
 802290a:	e7f5      	b.n	80228f8 <__kernel_rem_pio2+0x300>
 802290c:	f3af 8000 	nop.w
	...
 802291c:	3ff00000 	.word	0x3ff00000
 8022920:	08029f60 	.word	0x08029f60
 8022924:	40200000 	.word	0x40200000
 8022928:	3ff00000 	.word	0x3ff00000
 802292c:	3e700000 	.word	0x3e700000
 8022930:	41700000 	.word	0x41700000
 8022934:	3fe00000 	.word	0x3fe00000
 8022938:	08029f20 	.word	0x08029f20
 802293c:	1e62      	subs	r2, r4, #1
 802293e:	ab0e      	add	r3, sp, #56	; 0x38
 8022940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8022944:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8022948:	a90e      	add	r1, sp, #56	; 0x38
 802294a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 802294e:	e739      	b.n	80227c4 <__kernel_rem_pio2+0x1cc>
 8022950:	1e62      	subs	r2, r4, #1
 8022952:	ab0e      	add	r3, sp, #56	; 0x38
 8022954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8022958:	f3c3 0315 	ubfx	r3, r3, #0, #22
 802295c:	e7f4      	b.n	8022948 <__kernel_rem_pio2+0x350>
 802295e:	a90e      	add	r1, sp, #56	; 0x38
 8022960:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8022964:	3b01      	subs	r3, #1
 8022966:	430a      	orrs	r2, r1
 8022968:	e789      	b.n	802287e <__kernel_rem_pio2+0x286>
 802296a:	3301      	adds	r3, #1
 802296c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8022970:	2900      	cmp	r1, #0
 8022972:	d0fa      	beq.n	802296a <__kernel_rem_pio2+0x372>
 8022974:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022976:	f502 721a 	add.w	r2, r2, #616	; 0x268
 802297a:	446a      	add	r2, sp
 802297c:	3a98      	subs	r2, #152	; 0x98
 802297e:	920a      	str	r2, [sp, #40]	; 0x28
 8022980:	9a08      	ldr	r2, [sp, #32]
 8022982:	18e3      	adds	r3, r4, r3
 8022984:	18a5      	adds	r5, r4, r2
 8022986:	aa22      	add	r2, sp, #136	; 0x88
 8022988:	f104 0801 	add.w	r8, r4, #1
 802298c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8022990:	9304      	str	r3, [sp, #16]
 8022992:	9b04      	ldr	r3, [sp, #16]
 8022994:	4543      	cmp	r3, r8
 8022996:	da04      	bge.n	80229a2 <__kernel_rem_pio2+0x3aa>
 8022998:	461c      	mov	r4, r3
 802299a:	e6a3      	b.n	80226e4 <__kernel_rem_pio2+0xec>
 802299c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802299e:	2301      	movs	r3, #1
 80229a0:	e7e4      	b.n	802296c <__kernel_rem_pio2+0x374>
 80229a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80229a4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80229a8:	f7dd fdc6 	bl	8000538 <__aeabi_i2d>
 80229ac:	e8e5 0102 	strd	r0, r1, [r5], #8
 80229b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80229b2:	46ab      	mov	fp, r5
 80229b4:	461c      	mov	r4, r3
 80229b6:	f04f 0900 	mov.w	r9, #0
 80229ba:	2600      	movs	r6, #0
 80229bc:	2700      	movs	r7, #0
 80229be:	9b06      	ldr	r3, [sp, #24]
 80229c0:	4599      	cmp	r9, r3
 80229c2:	dd06      	ble.n	80229d2 <__kernel_rem_pio2+0x3da>
 80229c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80229c6:	e8e3 6702 	strd	r6, r7, [r3], #8
 80229ca:	f108 0801 	add.w	r8, r8, #1
 80229ce:	930a      	str	r3, [sp, #40]	; 0x28
 80229d0:	e7df      	b.n	8022992 <__kernel_rem_pio2+0x39a>
 80229d2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80229d6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80229da:	f7dd fe17 	bl	800060c <__aeabi_dmul>
 80229de:	4602      	mov	r2, r0
 80229e0:	460b      	mov	r3, r1
 80229e2:	4630      	mov	r0, r6
 80229e4:	4639      	mov	r1, r7
 80229e6:	f7dd fc5b 	bl	80002a0 <__adddf3>
 80229ea:	f109 0901 	add.w	r9, r9, #1
 80229ee:	4606      	mov	r6, r0
 80229f0:	460f      	mov	r7, r1
 80229f2:	e7e4      	b.n	80229be <__kernel_rem_pio2+0x3c6>
 80229f4:	3d01      	subs	r5, #1
 80229f6:	e748      	b.n	802288a <__kernel_rem_pio2+0x292>
 80229f8:	ec47 6b10 	vmov	d0, r6, r7
 80229fc:	f1ca 0000 	rsb	r0, sl, #0
 8022a00:	f000 fc82 	bl	8023308 <scalbn>
 8022a04:	ec57 6b10 	vmov	r6, r7, d0
 8022a08:	4ba0      	ldr	r3, [pc, #640]	; (8022c8c <__kernel_rem_pio2+0x694>)
 8022a0a:	ee10 0a10 	vmov	r0, s0
 8022a0e:	2200      	movs	r2, #0
 8022a10:	4639      	mov	r1, r7
 8022a12:	f7de f881 	bl	8000b18 <__aeabi_dcmpge>
 8022a16:	b1f8      	cbz	r0, 8022a58 <__kernel_rem_pio2+0x460>
 8022a18:	4b9d      	ldr	r3, [pc, #628]	; (8022c90 <__kernel_rem_pio2+0x698>)
 8022a1a:	2200      	movs	r2, #0
 8022a1c:	4630      	mov	r0, r6
 8022a1e:	4639      	mov	r1, r7
 8022a20:	f7dd fdf4 	bl	800060c <__aeabi_dmul>
 8022a24:	f7de f8a2 	bl	8000b6c <__aeabi_d2iz>
 8022a28:	4680      	mov	r8, r0
 8022a2a:	f7dd fd85 	bl	8000538 <__aeabi_i2d>
 8022a2e:	4b97      	ldr	r3, [pc, #604]	; (8022c8c <__kernel_rem_pio2+0x694>)
 8022a30:	2200      	movs	r2, #0
 8022a32:	f7dd fdeb 	bl	800060c <__aeabi_dmul>
 8022a36:	460b      	mov	r3, r1
 8022a38:	4602      	mov	r2, r0
 8022a3a:	4639      	mov	r1, r7
 8022a3c:	4630      	mov	r0, r6
 8022a3e:	f7dd fc2d 	bl	800029c <__aeabi_dsub>
 8022a42:	f7de f893 	bl	8000b6c <__aeabi_d2iz>
 8022a46:	1c65      	adds	r5, r4, #1
 8022a48:	ab0e      	add	r3, sp, #56	; 0x38
 8022a4a:	f10a 0a18 	add.w	sl, sl, #24
 8022a4e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8022a52:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8022a56:	e720      	b.n	802289a <__kernel_rem_pio2+0x2a2>
 8022a58:	4630      	mov	r0, r6
 8022a5a:	4639      	mov	r1, r7
 8022a5c:	f7de f886 	bl	8000b6c <__aeabi_d2iz>
 8022a60:	ab0e      	add	r3, sp, #56	; 0x38
 8022a62:	4625      	mov	r5, r4
 8022a64:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8022a68:	e717      	b.n	802289a <__kernel_rem_pio2+0x2a2>
 8022a6a:	ab0e      	add	r3, sp, #56	; 0x38
 8022a6c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8022a70:	f7dd fd62 	bl	8000538 <__aeabi_i2d>
 8022a74:	4632      	mov	r2, r6
 8022a76:	463b      	mov	r3, r7
 8022a78:	f7dd fdc8 	bl	800060c <__aeabi_dmul>
 8022a7c:	4b84      	ldr	r3, [pc, #528]	; (8022c90 <__kernel_rem_pio2+0x698>)
 8022a7e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8022a82:	2200      	movs	r2, #0
 8022a84:	4630      	mov	r0, r6
 8022a86:	4639      	mov	r1, r7
 8022a88:	f7dd fdc0 	bl	800060c <__aeabi_dmul>
 8022a8c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8022a90:	4606      	mov	r6, r0
 8022a92:	460f      	mov	r7, r1
 8022a94:	e70f      	b.n	80228b6 <__kernel_rem_pio2+0x2be>
 8022a96:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8022a9a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8022a9e:	f7dd fdb5 	bl	800060c <__aeabi_dmul>
 8022aa2:	4602      	mov	r2, r0
 8022aa4:	460b      	mov	r3, r1
 8022aa6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8022aaa:	f7dd fbf9 	bl	80002a0 <__adddf3>
 8022aae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8022ab2:	f108 0801 	add.w	r8, r8, #1
 8022ab6:	9b02      	ldr	r3, [sp, #8]
 8022ab8:	4598      	cmp	r8, r3
 8022aba:	dc01      	bgt.n	8022ac0 <__kernel_rem_pio2+0x4c8>
 8022abc:	45b8      	cmp	r8, r7
 8022abe:	ddea      	ble.n	8022a96 <__kernel_rem_pio2+0x49e>
 8022ac0:	ed9d 7b06 	vldr	d7, [sp, #24]
 8022ac4:	ab4a      	add	r3, sp, #296	; 0x128
 8022ac6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8022aca:	ed87 7b00 	vstr	d7, [r7]
 8022ace:	3e01      	subs	r6, #1
 8022ad0:	e6f8      	b.n	80228c4 <__kernel_rem_pio2+0x2cc>
 8022ad2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8022ad4:	2b02      	cmp	r3, #2
 8022ad6:	dc0b      	bgt.n	8022af0 <__kernel_rem_pio2+0x4f8>
 8022ad8:	2b00      	cmp	r3, #0
 8022ada:	dc35      	bgt.n	8022b48 <__kernel_rem_pio2+0x550>
 8022adc:	d059      	beq.n	8022b92 <__kernel_rem_pio2+0x59a>
 8022ade:	9b04      	ldr	r3, [sp, #16]
 8022ae0:	f003 0007 	and.w	r0, r3, #7
 8022ae4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8022ae8:	ecbd 8b02 	vpop	{d8}
 8022aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022af0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8022af2:	2b03      	cmp	r3, #3
 8022af4:	d1f3      	bne.n	8022ade <__kernel_rem_pio2+0x4e6>
 8022af6:	ab4a      	add	r3, sp, #296	; 0x128
 8022af8:	4423      	add	r3, r4
 8022afa:	9306      	str	r3, [sp, #24]
 8022afc:	461c      	mov	r4, r3
 8022afe:	469a      	mov	sl, r3
 8022b00:	9502      	str	r5, [sp, #8]
 8022b02:	9b02      	ldr	r3, [sp, #8]
 8022b04:	2b00      	cmp	r3, #0
 8022b06:	f1aa 0a08 	sub.w	sl, sl, #8
 8022b0a:	dc6b      	bgt.n	8022be4 <__kernel_rem_pio2+0x5ec>
 8022b0c:	46aa      	mov	sl, r5
 8022b0e:	f1ba 0f01 	cmp.w	sl, #1
 8022b12:	f1a4 0408 	sub.w	r4, r4, #8
 8022b16:	f300 8085 	bgt.w	8022c24 <__kernel_rem_pio2+0x62c>
 8022b1a:	9c06      	ldr	r4, [sp, #24]
 8022b1c:	2000      	movs	r0, #0
 8022b1e:	3408      	adds	r4, #8
 8022b20:	2100      	movs	r1, #0
 8022b22:	2d01      	cmp	r5, #1
 8022b24:	f300 809d 	bgt.w	8022c62 <__kernel_rem_pio2+0x66a>
 8022b28:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8022b2c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8022b30:	f1bb 0f00 	cmp.w	fp, #0
 8022b34:	f040 809b 	bne.w	8022c6e <__kernel_rem_pio2+0x676>
 8022b38:	9b01      	ldr	r3, [sp, #4]
 8022b3a:	e9c3 5600 	strd	r5, r6, [r3]
 8022b3e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8022b42:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8022b46:	e7ca      	b.n	8022ade <__kernel_rem_pio2+0x4e6>
 8022b48:	3408      	adds	r4, #8
 8022b4a:	ab4a      	add	r3, sp, #296	; 0x128
 8022b4c:	441c      	add	r4, r3
 8022b4e:	462e      	mov	r6, r5
 8022b50:	2000      	movs	r0, #0
 8022b52:	2100      	movs	r1, #0
 8022b54:	2e00      	cmp	r6, #0
 8022b56:	da36      	bge.n	8022bc6 <__kernel_rem_pio2+0x5ce>
 8022b58:	f1bb 0f00 	cmp.w	fp, #0
 8022b5c:	d039      	beq.n	8022bd2 <__kernel_rem_pio2+0x5da>
 8022b5e:	4602      	mov	r2, r0
 8022b60:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8022b64:	9c01      	ldr	r4, [sp, #4]
 8022b66:	e9c4 2300 	strd	r2, r3, [r4]
 8022b6a:	4602      	mov	r2, r0
 8022b6c:	460b      	mov	r3, r1
 8022b6e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8022b72:	f7dd fb93 	bl	800029c <__aeabi_dsub>
 8022b76:	ae4c      	add	r6, sp, #304	; 0x130
 8022b78:	2401      	movs	r4, #1
 8022b7a:	42a5      	cmp	r5, r4
 8022b7c:	da2c      	bge.n	8022bd8 <__kernel_rem_pio2+0x5e0>
 8022b7e:	f1bb 0f00 	cmp.w	fp, #0
 8022b82:	d002      	beq.n	8022b8a <__kernel_rem_pio2+0x592>
 8022b84:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8022b88:	4619      	mov	r1, r3
 8022b8a:	9b01      	ldr	r3, [sp, #4]
 8022b8c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8022b90:	e7a5      	b.n	8022ade <__kernel_rem_pio2+0x4e6>
 8022b92:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8022b96:	eb0d 0403 	add.w	r4, sp, r3
 8022b9a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8022b9e:	2000      	movs	r0, #0
 8022ba0:	2100      	movs	r1, #0
 8022ba2:	2d00      	cmp	r5, #0
 8022ba4:	da09      	bge.n	8022bba <__kernel_rem_pio2+0x5c2>
 8022ba6:	f1bb 0f00 	cmp.w	fp, #0
 8022baa:	d002      	beq.n	8022bb2 <__kernel_rem_pio2+0x5ba>
 8022bac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8022bb0:	4619      	mov	r1, r3
 8022bb2:	9b01      	ldr	r3, [sp, #4]
 8022bb4:	e9c3 0100 	strd	r0, r1, [r3]
 8022bb8:	e791      	b.n	8022ade <__kernel_rem_pio2+0x4e6>
 8022bba:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8022bbe:	f7dd fb6f 	bl	80002a0 <__adddf3>
 8022bc2:	3d01      	subs	r5, #1
 8022bc4:	e7ed      	b.n	8022ba2 <__kernel_rem_pio2+0x5aa>
 8022bc6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8022bca:	f7dd fb69 	bl	80002a0 <__adddf3>
 8022bce:	3e01      	subs	r6, #1
 8022bd0:	e7c0      	b.n	8022b54 <__kernel_rem_pio2+0x55c>
 8022bd2:	4602      	mov	r2, r0
 8022bd4:	460b      	mov	r3, r1
 8022bd6:	e7c5      	b.n	8022b64 <__kernel_rem_pio2+0x56c>
 8022bd8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8022bdc:	f7dd fb60 	bl	80002a0 <__adddf3>
 8022be0:	3401      	adds	r4, #1
 8022be2:	e7ca      	b.n	8022b7a <__kernel_rem_pio2+0x582>
 8022be4:	e9da 8900 	ldrd	r8, r9, [sl]
 8022be8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8022bec:	9b02      	ldr	r3, [sp, #8]
 8022bee:	3b01      	subs	r3, #1
 8022bf0:	9302      	str	r3, [sp, #8]
 8022bf2:	4632      	mov	r2, r6
 8022bf4:	463b      	mov	r3, r7
 8022bf6:	4640      	mov	r0, r8
 8022bf8:	4649      	mov	r1, r9
 8022bfa:	f7dd fb51 	bl	80002a0 <__adddf3>
 8022bfe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8022c02:	4602      	mov	r2, r0
 8022c04:	460b      	mov	r3, r1
 8022c06:	4640      	mov	r0, r8
 8022c08:	4649      	mov	r1, r9
 8022c0a:	f7dd fb47 	bl	800029c <__aeabi_dsub>
 8022c0e:	4632      	mov	r2, r6
 8022c10:	463b      	mov	r3, r7
 8022c12:	f7dd fb45 	bl	80002a0 <__adddf3>
 8022c16:	ed9d 7b08 	vldr	d7, [sp, #32]
 8022c1a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8022c1e:	ed8a 7b00 	vstr	d7, [sl]
 8022c22:	e76e      	b.n	8022b02 <__kernel_rem_pio2+0x50a>
 8022c24:	e9d4 8900 	ldrd	r8, r9, [r4]
 8022c28:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8022c2c:	4640      	mov	r0, r8
 8022c2e:	4632      	mov	r2, r6
 8022c30:	463b      	mov	r3, r7
 8022c32:	4649      	mov	r1, r9
 8022c34:	f7dd fb34 	bl	80002a0 <__adddf3>
 8022c38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8022c3c:	4602      	mov	r2, r0
 8022c3e:	460b      	mov	r3, r1
 8022c40:	4640      	mov	r0, r8
 8022c42:	4649      	mov	r1, r9
 8022c44:	f7dd fb2a 	bl	800029c <__aeabi_dsub>
 8022c48:	4632      	mov	r2, r6
 8022c4a:	463b      	mov	r3, r7
 8022c4c:	f7dd fb28 	bl	80002a0 <__adddf3>
 8022c50:	ed9d 7b02 	vldr	d7, [sp, #8]
 8022c54:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8022c58:	ed84 7b00 	vstr	d7, [r4]
 8022c5c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8022c60:	e755      	b.n	8022b0e <__kernel_rem_pio2+0x516>
 8022c62:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8022c66:	f7dd fb1b 	bl	80002a0 <__adddf3>
 8022c6a:	3d01      	subs	r5, #1
 8022c6c:	e759      	b.n	8022b22 <__kernel_rem_pio2+0x52a>
 8022c6e:	9b01      	ldr	r3, [sp, #4]
 8022c70:	9a01      	ldr	r2, [sp, #4]
 8022c72:	601d      	str	r5, [r3, #0]
 8022c74:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8022c78:	605c      	str	r4, [r3, #4]
 8022c7a:	609f      	str	r7, [r3, #8]
 8022c7c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8022c80:	60d3      	str	r3, [r2, #12]
 8022c82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8022c86:	6110      	str	r0, [r2, #16]
 8022c88:	6153      	str	r3, [r2, #20]
 8022c8a:	e728      	b.n	8022ade <__kernel_rem_pio2+0x4e6>
 8022c8c:	41700000 	.word	0x41700000
 8022c90:	3e700000 	.word	0x3e700000
 8022c94:	00000000 	.word	0x00000000

08022c98 <__kernel_sin>:
 8022c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022c9c:	ed2d 8b04 	vpush	{d8-d9}
 8022ca0:	eeb0 8a41 	vmov.f32	s16, s2
 8022ca4:	eef0 8a61 	vmov.f32	s17, s3
 8022ca8:	ec55 4b10 	vmov	r4, r5, d0
 8022cac:	b083      	sub	sp, #12
 8022cae:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8022cb2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8022cb6:	9001      	str	r0, [sp, #4]
 8022cb8:	da06      	bge.n	8022cc8 <__kernel_sin+0x30>
 8022cba:	ee10 0a10 	vmov	r0, s0
 8022cbe:	4629      	mov	r1, r5
 8022cc0:	f7dd ff54 	bl	8000b6c <__aeabi_d2iz>
 8022cc4:	2800      	cmp	r0, #0
 8022cc6:	d051      	beq.n	8022d6c <__kernel_sin+0xd4>
 8022cc8:	4622      	mov	r2, r4
 8022cca:	462b      	mov	r3, r5
 8022ccc:	4620      	mov	r0, r4
 8022cce:	4629      	mov	r1, r5
 8022cd0:	f7dd fc9c 	bl	800060c <__aeabi_dmul>
 8022cd4:	4682      	mov	sl, r0
 8022cd6:	468b      	mov	fp, r1
 8022cd8:	4602      	mov	r2, r0
 8022cda:	460b      	mov	r3, r1
 8022cdc:	4620      	mov	r0, r4
 8022cde:	4629      	mov	r1, r5
 8022ce0:	f7dd fc94 	bl	800060c <__aeabi_dmul>
 8022ce4:	a341      	add	r3, pc, #260	; (adr r3, 8022dec <__kernel_sin+0x154>)
 8022ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022cea:	4680      	mov	r8, r0
 8022cec:	4689      	mov	r9, r1
 8022cee:	4650      	mov	r0, sl
 8022cf0:	4659      	mov	r1, fp
 8022cf2:	f7dd fc8b 	bl	800060c <__aeabi_dmul>
 8022cf6:	a33f      	add	r3, pc, #252	; (adr r3, 8022df4 <__kernel_sin+0x15c>)
 8022cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022cfc:	f7dd face 	bl	800029c <__aeabi_dsub>
 8022d00:	4652      	mov	r2, sl
 8022d02:	465b      	mov	r3, fp
 8022d04:	f7dd fc82 	bl	800060c <__aeabi_dmul>
 8022d08:	a33c      	add	r3, pc, #240	; (adr r3, 8022dfc <__kernel_sin+0x164>)
 8022d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022d0e:	f7dd fac7 	bl	80002a0 <__adddf3>
 8022d12:	4652      	mov	r2, sl
 8022d14:	465b      	mov	r3, fp
 8022d16:	f7dd fc79 	bl	800060c <__aeabi_dmul>
 8022d1a:	a33a      	add	r3, pc, #232	; (adr r3, 8022e04 <__kernel_sin+0x16c>)
 8022d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022d20:	f7dd fabc 	bl	800029c <__aeabi_dsub>
 8022d24:	4652      	mov	r2, sl
 8022d26:	465b      	mov	r3, fp
 8022d28:	f7dd fc70 	bl	800060c <__aeabi_dmul>
 8022d2c:	a337      	add	r3, pc, #220	; (adr r3, 8022e0c <__kernel_sin+0x174>)
 8022d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022d32:	f7dd fab5 	bl	80002a0 <__adddf3>
 8022d36:	9b01      	ldr	r3, [sp, #4]
 8022d38:	4606      	mov	r6, r0
 8022d3a:	460f      	mov	r7, r1
 8022d3c:	b9eb      	cbnz	r3, 8022d7a <__kernel_sin+0xe2>
 8022d3e:	4602      	mov	r2, r0
 8022d40:	460b      	mov	r3, r1
 8022d42:	4650      	mov	r0, sl
 8022d44:	4659      	mov	r1, fp
 8022d46:	f7dd fc61 	bl	800060c <__aeabi_dmul>
 8022d4a:	a325      	add	r3, pc, #148	; (adr r3, 8022de0 <__kernel_sin+0x148>)
 8022d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022d50:	f7dd faa4 	bl	800029c <__aeabi_dsub>
 8022d54:	4642      	mov	r2, r8
 8022d56:	464b      	mov	r3, r9
 8022d58:	f7dd fc58 	bl	800060c <__aeabi_dmul>
 8022d5c:	4602      	mov	r2, r0
 8022d5e:	460b      	mov	r3, r1
 8022d60:	4620      	mov	r0, r4
 8022d62:	4629      	mov	r1, r5
 8022d64:	f7dd fa9c 	bl	80002a0 <__adddf3>
 8022d68:	4604      	mov	r4, r0
 8022d6a:	460d      	mov	r5, r1
 8022d6c:	ec45 4b10 	vmov	d0, r4, r5
 8022d70:	b003      	add	sp, #12
 8022d72:	ecbd 8b04 	vpop	{d8-d9}
 8022d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022d7a:	4b1b      	ldr	r3, [pc, #108]	; (8022de8 <__kernel_sin+0x150>)
 8022d7c:	ec51 0b18 	vmov	r0, r1, d8
 8022d80:	2200      	movs	r2, #0
 8022d82:	f7dd fc43 	bl	800060c <__aeabi_dmul>
 8022d86:	4632      	mov	r2, r6
 8022d88:	ec41 0b19 	vmov	d9, r0, r1
 8022d8c:	463b      	mov	r3, r7
 8022d8e:	4640      	mov	r0, r8
 8022d90:	4649      	mov	r1, r9
 8022d92:	f7dd fc3b 	bl	800060c <__aeabi_dmul>
 8022d96:	4602      	mov	r2, r0
 8022d98:	460b      	mov	r3, r1
 8022d9a:	ec51 0b19 	vmov	r0, r1, d9
 8022d9e:	f7dd fa7d 	bl	800029c <__aeabi_dsub>
 8022da2:	4652      	mov	r2, sl
 8022da4:	465b      	mov	r3, fp
 8022da6:	f7dd fc31 	bl	800060c <__aeabi_dmul>
 8022daa:	ec53 2b18 	vmov	r2, r3, d8
 8022dae:	f7dd fa75 	bl	800029c <__aeabi_dsub>
 8022db2:	a30b      	add	r3, pc, #44	; (adr r3, 8022de0 <__kernel_sin+0x148>)
 8022db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022db8:	4606      	mov	r6, r0
 8022dba:	460f      	mov	r7, r1
 8022dbc:	4640      	mov	r0, r8
 8022dbe:	4649      	mov	r1, r9
 8022dc0:	f7dd fc24 	bl	800060c <__aeabi_dmul>
 8022dc4:	4602      	mov	r2, r0
 8022dc6:	460b      	mov	r3, r1
 8022dc8:	4630      	mov	r0, r6
 8022dca:	4639      	mov	r1, r7
 8022dcc:	f7dd fa68 	bl	80002a0 <__adddf3>
 8022dd0:	4602      	mov	r2, r0
 8022dd2:	460b      	mov	r3, r1
 8022dd4:	4620      	mov	r0, r4
 8022dd6:	4629      	mov	r1, r5
 8022dd8:	f7dd fa60 	bl	800029c <__aeabi_dsub>
 8022ddc:	e7c4      	b.n	8022d68 <__kernel_sin+0xd0>
 8022dde:	bf00      	nop
 8022de0:	55555549 	.word	0x55555549
 8022de4:	3fc55555 	.word	0x3fc55555
 8022de8:	3fe00000 	.word	0x3fe00000
 8022dec:	5acfd57c 	.word	0x5acfd57c
 8022df0:	3de5d93a 	.word	0x3de5d93a
 8022df4:	8a2b9ceb 	.word	0x8a2b9ceb
 8022df8:	3e5ae5e6 	.word	0x3e5ae5e6
 8022dfc:	57b1fe7d 	.word	0x57b1fe7d
 8022e00:	3ec71de3 	.word	0x3ec71de3
 8022e04:	19c161d5 	.word	0x19c161d5
 8022e08:	3f2a01a0 	.word	0x3f2a01a0
 8022e0c:	1110f8a6 	.word	0x1110f8a6
 8022e10:	3f811111 	.word	0x3f811111
 8022e14:	00000000 	.word	0x00000000

08022e18 <__kernel_tan>:
 8022e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022e1c:	ed2d 8b06 	vpush	{d8-d10}
 8022e20:	ec5b ab10 	vmov	sl, fp, d0
 8022e24:	4be0      	ldr	r3, [pc, #896]	; (80231a8 <__kernel_tan+0x390>)
 8022e26:	b083      	sub	sp, #12
 8022e28:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8022e2c:	429f      	cmp	r7, r3
 8022e2e:	ec59 8b11 	vmov	r8, r9, d1
 8022e32:	4606      	mov	r6, r0
 8022e34:	f8cd b000 	str.w	fp, [sp]
 8022e38:	dc61      	bgt.n	8022efe <__kernel_tan+0xe6>
 8022e3a:	ee10 0a10 	vmov	r0, s0
 8022e3e:	4659      	mov	r1, fp
 8022e40:	f7dd fe94 	bl	8000b6c <__aeabi_d2iz>
 8022e44:	4605      	mov	r5, r0
 8022e46:	2800      	cmp	r0, #0
 8022e48:	f040 8083 	bne.w	8022f52 <__kernel_tan+0x13a>
 8022e4c:	1c73      	adds	r3, r6, #1
 8022e4e:	4652      	mov	r2, sl
 8022e50:	4313      	orrs	r3, r2
 8022e52:	433b      	orrs	r3, r7
 8022e54:	d112      	bne.n	8022e7c <__kernel_tan+0x64>
 8022e56:	ec4b ab10 	vmov	d0, sl, fp
 8022e5a:	f000 fa39 	bl	80232d0 <fabs>
 8022e5e:	49d3      	ldr	r1, [pc, #844]	; (80231ac <__kernel_tan+0x394>)
 8022e60:	ec53 2b10 	vmov	r2, r3, d0
 8022e64:	2000      	movs	r0, #0
 8022e66:	f7dd fcfb 	bl	8000860 <__aeabi_ddiv>
 8022e6a:	4682      	mov	sl, r0
 8022e6c:	468b      	mov	fp, r1
 8022e6e:	ec4b ab10 	vmov	d0, sl, fp
 8022e72:	b003      	add	sp, #12
 8022e74:	ecbd 8b06 	vpop	{d8-d10}
 8022e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022e7c:	2e01      	cmp	r6, #1
 8022e7e:	d0f6      	beq.n	8022e6e <__kernel_tan+0x56>
 8022e80:	4642      	mov	r2, r8
 8022e82:	464b      	mov	r3, r9
 8022e84:	4650      	mov	r0, sl
 8022e86:	4659      	mov	r1, fp
 8022e88:	f7dd fa0a 	bl	80002a0 <__adddf3>
 8022e8c:	4602      	mov	r2, r0
 8022e8e:	460b      	mov	r3, r1
 8022e90:	460f      	mov	r7, r1
 8022e92:	2000      	movs	r0, #0
 8022e94:	49c6      	ldr	r1, [pc, #792]	; (80231b0 <__kernel_tan+0x398>)
 8022e96:	f7dd fce3 	bl	8000860 <__aeabi_ddiv>
 8022e9a:	e9cd 0100 	strd	r0, r1, [sp]
 8022e9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8022ea2:	462e      	mov	r6, r5
 8022ea4:	4652      	mov	r2, sl
 8022ea6:	462c      	mov	r4, r5
 8022ea8:	4630      	mov	r0, r6
 8022eaa:	461d      	mov	r5, r3
 8022eac:	4639      	mov	r1, r7
 8022eae:	465b      	mov	r3, fp
 8022eb0:	f7dd f9f4 	bl	800029c <__aeabi_dsub>
 8022eb4:	4602      	mov	r2, r0
 8022eb6:	460b      	mov	r3, r1
 8022eb8:	4640      	mov	r0, r8
 8022eba:	4649      	mov	r1, r9
 8022ebc:	f7dd f9ee 	bl	800029c <__aeabi_dsub>
 8022ec0:	4632      	mov	r2, r6
 8022ec2:	462b      	mov	r3, r5
 8022ec4:	f7dd fba2 	bl	800060c <__aeabi_dmul>
 8022ec8:	4632      	mov	r2, r6
 8022eca:	4680      	mov	r8, r0
 8022ecc:	4689      	mov	r9, r1
 8022ece:	462b      	mov	r3, r5
 8022ed0:	4630      	mov	r0, r6
 8022ed2:	4639      	mov	r1, r7
 8022ed4:	f7dd fb9a 	bl	800060c <__aeabi_dmul>
 8022ed8:	4bb4      	ldr	r3, [pc, #720]	; (80231ac <__kernel_tan+0x394>)
 8022eda:	2200      	movs	r2, #0
 8022edc:	f7dd f9e0 	bl	80002a0 <__adddf3>
 8022ee0:	4602      	mov	r2, r0
 8022ee2:	460b      	mov	r3, r1
 8022ee4:	4640      	mov	r0, r8
 8022ee6:	4649      	mov	r1, r9
 8022ee8:	f7dd f9da 	bl	80002a0 <__adddf3>
 8022eec:	e9dd 2300 	ldrd	r2, r3, [sp]
 8022ef0:	f7dd fb8c 	bl	800060c <__aeabi_dmul>
 8022ef4:	4622      	mov	r2, r4
 8022ef6:	462b      	mov	r3, r5
 8022ef8:	f7dd f9d2 	bl	80002a0 <__adddf3>
 8022efc:	e7b5      	b.n	8022e6a <__kernel_tan+0x52>
 8022efe:	4bad      	ldr	r3, [pc, #692]	; (80231b4 <__kernel_tan+0x39c>)
 8022f00:	429f      	cmp	r7, r3
 8022f02:	dd26      	ble.n	8022f52 <__kernel_tan+0x13a>
 8022f04:	9b00      	ldr	r3, [sp, #0]
 8022f06:	2b00      	cmp	r3, #0
 8022f08:	da09      	bge.n	8022f1e <__kernel_tan+0x106>
 8022f0a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8022f0e:	469b      	mov	fp, r3
 8022f10:	ee10 aa10 	vmov	sl, s0
 8022f14:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8022f18:	ee11 8a10 	vmov	r8, s2
 8022f1c:	4699      	mov	r9, r3
 8022f1e:	4652      	mov	r2, sl
 8022f20:	465b      	mov	r3, fp
 8022f22:	a183      	add	r1, pc, #524	; (adr r1, 8023130 <__kernel_tan+0x318>)
 8022f24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8022f28:	f7dd f9b8 	bl	800029c <__aeabi_dsub>
 8022f2c:	4642      	mov	r2, r8
 8022f2e:	464b      	mov	r3, r9
 8022f30:	4604      	mov	r4, r0
 8022f32:	460d      	mov	r5, r1
 8022f34:	a180      	add	r1, pc, #512	; (adr r1, 8023138 <__kernel_tan+0x320>)
 8022f36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8022f3a:	f7dd f9af 	bl	800029c <__aeabi_dsub>
 8022f3e:	4622      	mov	r2, r4
 8022f40:	462b      	mov	r3, r5
 8022f42:	f7dd f9ad 	bl	80002a0 <__adddf3>
 8022f46:	f04f 0800 	mov.w	r8, #0
 8022f4a:	4682      	mov	sl, r0
 8022f4c:	468b      	mov	fp, r1
 8022f4e:	f04f 0900 	mov.w	r9, #0
 8022f52:	4652      	mov	r2, sl
 8022f54:	465b      	mov	r3, fp
 8022f56:	4650      	mov	r0, sl
 8022f58:	4659      	mov	r1, fp
 8022f5a:	f7dd fb57 	bl	800060c <__aeabi_dmul>
 8022f5e:	4602      	mov	r2, r0
 8022f60:	460b      	mov	r3, r1
 8022f62:	ec43 2b18 	vmov	d8, r2, r3
 8022f66:	f7dd fb51 	bl	800060c <__aeabi_dmul>
 8022f6a:	ec53 2b18 	vmov	r2, r3, d8
 8022f6e:	4604      	mov	r4, r0
 8022f70:	460d      	mov	r5, r1
 8022f72:	4650      	mov	r0, sl
 8022f74:	4659      	mov	r1, fp
 8022f76:	f7dd fb49 	bl	800060c <__aeabi_dmul>
 8022f7a:	a371      	add	r3, pc, #452	; (adr r3, 8023140 <__kernel_tan+0x328>)
 8022f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022f80:	ec41 0b19 	vmov	d9, r0, r1
 8022f84:	4620      	mov	r0, r4
 8022f86:	4629      	mov	r1, r5
 8022f88:	f7dd fb40 	bl	800060c <__aeabi_dmul>
 8022f8c:	a36e      	add	r3, pc, #440	; (adr r3, 8023148 <__kernel_tan+0x330>)
 8022f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022f92:	f7dd f985 	bl	80002a0 <__adddf3>
 8022f96:	4622      	mov	r2, r4
 8022f98:	462b      	mov	r3, r5
 8022f9a:	f7dd fb37 	bl	800060c <__aeabi_dmul>
 8022f9e:	a36c      	add	r3, pc, #432	; (adr r3, 8023150 <__kernel_tan+0x338>)
 8022fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022fa4:	f7dd f97c 	bl	80002a0 <__adddf3>
 8022fa8:	4622      	mov	r2, r4
 8022faa:	462b      	mov	r3, r5
 8022fac:	f7dd fb2e 	bl	800060c <__aeabi_dmul>
 8022fb0:	a369      	add	r3, pc, #420	; (adr r3, 8023158 <__kernel_tan+0x340>)
 8022fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022fb6:	f7dd f973 	bl	80002a0 <__adddf3>
 8022fba:	4622      	mov	r2, r4
 8022fbc:	462b      	mov	r3, r5
 8022fbe:	f7dd fb25 	bl	800060c <__aeabi_dmul>
 8022fc2:	a367      	add	r3, pc, #412	; (adr r3, 8023160 <__kernel_tan+0x348>)
 8022fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022fc8:	f7dd f96a 	bl	80002a0 <__adddf3>
 8022fcc:	4622      	mov	r2, r4
 8022fce:	462b      	mov	r3, r5
 8022fd0:	f7dd fb1c 	bl	800060c <__aeabi_dmul>
 8022fd4:	a364      	add	r3, pc, #400	; (adr r3, 8023168 <__kernel_tan+0x350>)
 8022fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022fda:	f7dd f961 	bl	80002a0 <__adddf3>
 8022fde:	ec53 2b18 	vmov	r2, r3, d8
 8022fe2:	f7dd fb13 	bl	800060c <__aeabi_dmul>
 8022fe6:	a362      	add	r3, pc, #392	; (adr r3, 8023170 <__kernel_tan+0x358>)
 8022fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022fec:	ec41 0b1a 	vmov	d10, r0, r1
 8022ff0:	4620      	mov	r0, r4
 8022ff2:	4629      	mov	r1, r5
 8022ff4:	f7dd fb0a 	bl	800060c <__aeabi_dmul>
 8022ff8:	a35f      	add	r3, pc, #380	; (adr r3, 8023178 <__kernel_tan+0x360>)
 8022ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022ffe:	f7dd f94f 	bl	80002a0 <__adddf3>
 8023002:	4622      	mov	r2, r4
 8023004:	462b      	mov	r3, r5
 8023006:	f7dd fb01 	bl	800060c <__aeabi_dmul>
 802300a:	a35d      	add	r3, pc, #372	; (adr r3, 8023180 <__kernel_tan+0x368>)
 802300c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023010:	f7dd f946 	bl	80002a0 <__adddf3>
 8023014:	4622      	mov	r2, r4
 8023016:	462b      	mov	r3, r5
 8023018:	f7dd faf8 	bl	800060c <__aeabi_dmul>
 802301c:	a35a      	add	r3, pc, #360	; (adr r3, 8023188 <__kernel_tan+0x370>)
 802301e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023022:	f7dd f93d 	bl	80002a0 <__adddf3>
 8023026:	4622      	mov	r2, r4
 8023028:	462b      	mov	r3, r5
 802302a:	f7dd faef 	bl	800060c <__aeabi_dmul>
 802302e:	a358      	add	r3, pc, #352	; (adr r3, 8023190 <__kernel_tan+0x378>)
 8023030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023034:	f7dd f934 	bl	80002a0 <__adddf3>
 8023038:	4622      	mov	r2, r4
 802303a:	462b      	mov	r3, r5
 802303c:	f7dd fae6 	bl	800060c <__aeabi_dmul>
 8023040:	a355      	add	r3, pc, #340	; (adr r3, 8023198 <__kernel_tan+0x380>)
 8023042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023046:	f7dd f92b 	bl	80002a0 <__adddf3>
 802304a:	4602      	mov	r2, r0
 802304c:	460b      	mov	r3, r1
 802304e:	ec51 0b1a 	vmov	r0, r1, d10
 8023052:	f7dd f925 	bl	80002a0 <__adddf3>
 8023056:	ec53 2b19 	vmov	r2, r3, d9
 802305a:	f7dd fad7 	bl	800060c <__aeabi_dmul>
 802305e:	4642      	mov	r2, r8
 8023060:	464b      	mov	r3, r9
 8023062:	f7dd f91d 	bl	80002a0 <__adddf3>
 8023066:	ec53 2b18 	vmov	r2, r3, d8
 802306a:	f7dd facf 	bl	800060c <__aeabi_dmul>
 802306e:	4642      	mov	r2, r8
 8023070:	464b      	mov	r3, r9
 8023072:	f7dd f915 	bl	80002a0 <__adddf3>
 8023076:	a34a      	add	r3, pc, #296	; (adr r3, 80231a0 <__kernel_tan+0x388>)
 8023078:	e9d3 2300 	ldrd	r2, r3, [r3]
 802307c:	4604      	mov	r4, r0
 802307e:	460d      	mov	r5, r1
 8023080:	ec51 0b19 	vmov	r0, r1, d9
 8023084:	f7dd fac2 	bl	800060c <__aeabi_dmul>
 8023088:	4622      	mov	r2, r4
 802308a:	462b      	mov	r3, r5
 802308c:	f7dd f908 	bl	80002a0 <__adddf3>
 8023090:	460b      	mov	r3, r1
 8023092:	ec41 0b18 	vmov	d8, r0, r1
 8023096:	4602      	mov	r2, r0
 8023098:	4659      	mov	r1, fp
 802309a:	4650      	mov	r0, sl
 802309c:	f7dd f900 	bl	80002a0 <__adddf3>
 80230a0:	4b44      	ldr	r3, [pc, #272]	; (80231b4 <__kernel_tan+0x39c>)
 80230a2:	429f      	cmp	r7, r3
 80230a4:	4604      	mov	r4, r0
 80230a6:	460d      	mov	r5, r1
 80230a8:	f340 8086 	ble.w	80231b8 <__kernel_tan+0x3a0>
 80230ac:	4630      	mov	r0, r6
 80230ae:	f7dd fa43 	bl	8000538 <__aeabi_i2d>
 80230b2:	4622      	mov	r2, r4
 80230b4:	4680      	mov	r8, r0
 80230b6:	4689      	mov	r9, r1
 80230b8:	462b      	mov	r3, r5
 80230ba:	4620      	mov	r0, r4
 80230bc:	4629      	mov	r1, r5
 80230be:	f7dd faa5 	bl	800060c <__aeabi_dmul>
 80230c2:	4642      	mov	r2, r8
 80230c4:	4606      	mov	r6, r0
 80230c6:	460f      	mov	r7, r1
 80230c8:	464b      	mov	r3, r9
 80230ca:	4620      	mov	r0, r4
 80230cc:	4629      	mov	r1, r5
 80230ce:	f7dd f8e7 	bl	80002a0 <__adddf3>
 80230d2:	4602      	mov	r2, r0
 80230d4:	460b      	mov	r3, r1
 80230d6:	4630      	mov	r0, r6
 80230d8:	4639      	mov	r1, r7
 80230da:	f7dd fbc1 	bl	8000860 <__aeabi_ddiv>
 80230de:	ec53 2b18 	vmov	r2, r3, d8
 80230e2:	f7dd f8db 	bl	800029c <__aeabi_dsub>
 80230e6:	4602      	mov	r2, r0
 80230e8:	460b      	mov	r3, r1
 80230ea:	4650      	mov	r0, sl
 80230ec:	4659      	mov	r1, fp
 80230ee:	f7dd f8d5 	bl	800029c <__aeabi_dsub>
 80230f2:	4602      	mov	r2, r0
 80230f4:	460b      	mov	r3, r1
 80230f6:	f7dd f8d3 	bl	80002a0 <__adddf3>
 80230fa:	4602      	mov	r2, r0
 80230fc:	460b      	mov	r3, r1
 80230fe:	4640      	mov	r0, r8
 8023100:	4649      	mov	r1, r9
 8023102:	f7dd f8cb 	bl	800029c <__aeabi_dsub>
 8023106:	9b00      	ldr	r3, [sp, #0]
 8023108:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 802310c:	f00a 0a02 	and.w	sl, sl, #2
 8023110:	4604      	mov	r4, r0
 8023112:	f1ca 0001 	rsb	r0, sl, #1
 8023116:	460d      	mov	r5, r1
 8023118:	f7dd fa0e 	bl	8000538 <__aeabi_i2d>
 802311c:	4602      	mov	r2, r0
 802311e:	460b      	mov	r3, r1
 8023120:	4620      	mov	r0, r4
 8023122:	4629      	mov	r1, r5
 8023124:	f7dd fa72 	bl	800060c <__aeabi_dmul>
 8023128:	e69f      	b.n	8022e6a <__kernel_tan+0x52>
 802312a:	bf00      	nop
 802312c:	f3af 8000 	nop.w
 8023130:	54442d18 	.word	0x54442d18
 8023134:	3fe921fb 	.word	0x3fe921fb
 8023138:	33145c07 	.word	0x33145c07
 802313c:	3c81a626 	.word	0x3c81a626
 8023140:	74bf7ad4 	.word	0x74bf7ad4
 8023144:	3efb2a70 	.word	0x3efb2a70
 8023148:	32f0a7e9 	.word	0x32f0a7e9
 802314c:	3f12b80f 	.word	0x3f12b80f
 8023150:	1a8d1068 	.word	0x1a8d1068
 8023154:	3f3026f7 	.word	0x3f3026f7
 8023158:	fee08315 	.word	0xfee08315
 802315c:	3f57dbc8 	.word	0x3f57dbc8
 8023160:	e96e8493 	.word	0xe96e8493
 8023164:	3f8226e3 	.word	0x3f8226e3
 8023168:	1bb341fe 	.word	0x1bb341fe
 802316c:	3faba1ba 	.word	0x3faba1ba
 8023170:	db605373 	.word	0xdb605373
 8023174:	bef375cb 	.word	0xbef375cb
 8023178:	a03792a6 	.word	0xa03792a6
 802317c:	3f147e88 	.word	0x3f147e88
 8023180:	f2f26501 	.word	0xf2f26501
 8023184:	3f4344d8 	.word	0x3f4344d8
 8023188:	c9560328 	.word	0xc9560328
 802318c:	3f6d6d22 	.word	0x3f6d6d22
 8023190:	8406d637 	.word	0x8406d637
 8023194:	3f9664f4 	.word	0x3f9664f4
 8023198:	1110fe7a 	.word	0x1110fe7a
 802319c:	3fc11111 	.word	0x3fc11111
 80231a0:	55555563 	.word	0x55555563
 80231a4:	3fd55555 	.word	0x3fd55555
 80231a8:	3e2fffff 	.word	0x3e2fffff
 80231ac:	3ff00000 	.word	0x3ff00000
 80231b0:	bff00000 	.word	0xbff00000
 80231b4:	3fe59427 	.word	0x3fe59427
 80231b8:	2e01      	cmp	r6, #1
 80231ba:	d02f      	beq.n	802321c <__kernel_tan+0x404>
 80231bc:	460f      	mov	r7, r1
 80231be:	4602      	mov	r2, r0
 80231c0:	460b      	mov	r3, r1
 80231c2:	4689      	mov	r9, r1
 80231c4:	2000      	movs	r0, #0
 80231c6:	4917      	ldr	r1, [pc, #92]	; (8023224 <__kernel_tan+0x40c>)
 80231c8:	f7dd fb4a 	bl	8000860 <__aeabi_ddiv>
 80231cc:	2600      	movs	r6, #0
 80231ce:	e9cd 0100 	strd	r0, r1, [sp]
 80231d2:	4652      	mov	r2, sl
 80231d4:	465b      	mov	r3, fp
 80231d6:	4630      	mov	r0, r6
 80231d8:	4639      	mov	r1, r7
 80231da:	f7dd f85f 	bl	800029c <__aeabi_dsub>
 80231de:	e9dd 4500 	ldrd	r4, r5, [sp]
 80231e2:	4602      	mov	r2, r0
 80231e4:	460b      	mov	r3, r1
 80231e6:	ec51 0b18 	vmov	r0, r1, d8
 80231ea:	f7dd f857 	bl	800029c <__aeabi_dsub>
 80231ee:	4632      	mov	r2, r6
 80231f0:	462b      	mov	r3, r5
 80231f2:	f7dd fa0b 	bl	800060c <__aeabi_dmul>
 80231f6:	46b0      	mov	r8, r6
 80231f8:	460f      	mov	r7, r1
 80231fa:	4642      	mov	r2, r8
 80231fc:	462b      	mov	r3, r5
 80231fe:	4634      	mov	r4, r6
 8023200:	4649      	mov	r1, r9
 8023202:	4606      	mov	r6, r0
 8023204:	4640      	mov	r0, r8
 8023206:	f7dd fa01 	bl	800060c <__aeabi_dmul>
 802320a:	4b07      	ldr	r3, [pc, #28]	; (8023228 <__kernel_tan+0x410>)
 802320c:	2200      	movs	r2, #0
 802320e:	f7dd f847 	bl	80002a0 <__adddf3>
 8023212:	4602      	mov	r2, r0
 8023214:	460b      	mov	r3, r1
 8023216:	4630      	mov	r0, r6
 8023218:	4639      	mov	r1, r7
 802321a:	e665      	b.n	8022ee8 <__kernel_tan+0xd0>
 802321c:	4682      	mov	sl, r0
 802321e:	468b      	mov	fp, r1
 8023220:	e625      	b.n	8022e6e <__kernel_tan+0x56>
 8023222:	bf00      	nop
 8023224:	bff00000 	.word	0xbff00000
 8023228:	3ff00000 	.word	0x3ff00000

0802322c <with_errno>:
 802322c:	b570      	push	{r4, r5, r6, lr}
 802322e:	4604      	mov	r4, r0
 8023230:	460d      	mov	r5, r1
 8023232:	4616      	mov	r6, r2
 8023234:	f000 f934 	bl	80234a0 <__errno>
 8023238:	4629      	mov	r1, r5
 802323a:	6006      	str	r6, [r0, #0]
 802323c:	4620      	mov	r0, r4
 802323e:	bd70      	pop	{r4, r5, r6, pc}

08023240 <xflow>:
 8023240:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8023242:	4614      	mov	r4, r2
 8023244:	461d      	mov	r5, r3
 8023246:	b108      	cbz	r0, 802324c <xflow+0xc>
 8023248:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 802324c:	e9cd 2300 	strd	r2, r3, [sp]
 8023250:	e9dd 2300 	ldrd	r2, r3, [sp]
 8023254:	4620      	mov	r0, r4
 8023256:	4629      	mov	r1, r5
 8023258:	f7dd f9d8 	bl	800060c <__aeabi_dmul>
 802325c:	2222      	movs	r2, #34	; 0x22
 802325e:	b003      	add	sp, #12
 8023260:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8023264:	f7ff bfe2 	b.w	802322c <with_errno>

08023268 <__math_uflow>:
 8023268:	b508      	push	{r3, lr}
 802326a:	2200      	movs	r2, #0
 802326c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8023270:	f7ff ffe6 	bl	8023240 <xflow>
 8023274:	ec41 0b10 	vmov	d0, r0, r1
 8023278:	bd08      	pop	{r3, pc}

0802327a <__math_oflow>:
 802327a:	b508      	push	{r3, lr}
 802327c:	2200      	movs	r2, #0
 802327e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8023282:	f7ff ffdd 	bl	8023240 <xflow>
 8023286:	ec41 0b10 	vmov	d0, r0, r1
 802328a:	bd08      	pop	{r3, pc}

0802328c <with_errnof>:
 802328c:	b513      	push	{r0, r1, r4, lr}
 802328e:	4604      	mov	r4, r0
 8023290:	ed8d 0a01 	vstr	s0, [sp, #4]
 8023294:	f000 f904 	bl	80234a0 <__errno>
 8023298:	ed9d 0a01 	vldr	s0, [sp, #4]
 802329c:	6004      	str	r4, [r0, #0]
 802329e:	b002      	add	sp, #8
 80232a0:	bd10      	pop	{r4, pc}

080232a2 <xflowf>:
 80232a2:	b130      	cbz	r0, 80232b2 <xflowf+0x10>
 80232a4:	eef1 7a40 	vneg.f32	s15, s0
 80232a8:	ee27 0a80 	vmul.f32	s0, s15, s0
 80232ac:	2022      	movs	r0, #34	; 0x22
 80232ae:	f7ff bfed 	b.w	802328c <with_errnof>
 80232b2:	eef0 7a40 	vmov.f32	s15, s0
 80232b6:	e7f7      	b.n	80232a8 <xflowf+0x6>

080232b8 <__math_uflowf>:
 80232b8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80232c0 <__math_uflowf+0x8>
 80232bc:	f7ff bff1 	b.w	80232a2 <xflowf>
 80232c0:	10000000 	.word	0x10000000

080232c4 <__math_oflowf>:
 80232c4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80232cc <__math_oflowf+0x8>
 80232c8:	f7ff bfeb 	b.w	80232a2 <xflowf>
 80232cc:	70000000 	.word	0x70000000

080232d0 <fabs>:
 80232d0:	ec51 0b10 	vmov	r0, r1, d0
 80232d4:	ee10 2a10 	vmov	r2, s0
 80232d8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80232dc:	ec43 2b10 	vmov	d0, r2, r3
 80232e0:	4770      	bx	lr

080232e2 <finite>:
 80232e2:	b082      	sub	sp, #8
 80232e4:	ed8d 0b00 	vstr	d0, [sp]
 80232e8:	9801      	ldr	r0, [sp, #4]
 80232ea:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80232ee:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80232f2:	0fc0      	lsrs	r0, r0, #31
 80232f4:	b002      	add	sp, #8
 80232f6:	4770      	bx	lr

080232f8 <nan>:
 80232f8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8023300 <nan+0x8>
 80232fc:	4770      	bx	lr
 80232fe:	bf00      	nop
 8023300:	00000000 	.word	0x00000000
 8023304:	7ff80000 	.word	0x7ff80000

08023308 <scalbn>:
 8023308:	b570      	push	{r4, r5, r6, lr}
 802330a:	ec55 4b10 	vmov	r4, r5, d0
 802330e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8023312:	4606      	mov	r6, r0
 8023314:	462b      	mov	r3, r5
 8023316:	b99a      	cbnz	r2, 8023340 <scalbn+0x38>
 8023318:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 802331c:	4323      	orrs	r3, r4
 802331e:	d036      	beq.n	802338e <scalbn+0x86>
 8023320:	4b39      	ldr	r3, [pc, #228]	; (8023408 <scalbn+0x100>)
 8023322:	4629      	mov	r1, r5
 8023324:	ee10 0a10 	vmov	r0, s0
 8023328:	2200      	movs	r2, #0
 802332a:	f7dd f96f 	bl	800060c <__aeabi_dmul>
 802332e:	4b37      	ldr	r3, [pc, #220]	; (802340c <scalbn+0x104>)
 8023330:	429e      	cmp	r6, r3
 8023332:	4604      	mov	r4, r0
 8023334:	460d      	mov	r5, r1
 8023336:	da10      	bge.n	802335a <scalbn+0x52>
 8023338:	a32b      	add	r3, pc, #172	; (adr r3, 80233e8 <scalbn+0xe0>)
 802333a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802333e:	e03a      	b.n	80233b6 <scalbn+0xae>
 8023340:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8023344:	428a      	cmp	r2, r1
 8023346:	d10c      	bne.n	8023362 <scalbn+0x5a>
 8023348:	ee10 2a10 	vmov	r2, s0
 802334c:	4620      	mov	r0, r4
 802334e:	4629      	mov	r1, r5
 8023350:	f7dc ffa6 	bl	80002a0 <__adddf3>
 8023354:	4604      	mov	r4, r0
 8023356:	460d      	mov	r5, r1
 8023358:	e019      	b.n	802338e <scalbn+0x86>
 802335a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 802335e:	460b      	mov	r3, r1
 8023360:	3a36      	subs	r2, #54	; 0x36
 8023362:	4432      	add	r2, r6
 8023364:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8023368:	428a      	cmp	r2, r1
 802336a:	dd08      	ble.n	802337e <scalbn+0x76>
 802336c:	2d00      	cmp	r5, #0
 802336e:	a120      	add	r1, pc, #128	; (adr r1, 80233f0 <scalbn+0xe8>)
 8023370:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023374:	da1c      	bge.n	80233b0 <scalbn+0xa8>
 8023376:	a120      	add	r1, pc, #128	; (adr r1, 80233f8 <scalbn+0xf0>)
 8023378:	e9d1 0100 	ldrd	r0, r1, [r1]
 802337c:	e018      	b.n	80233b0 <scalbn+0xa8>
 802337e:	2a00      	cmp	r2, #0
 8023380:	dd08      	ble.n	8023394 <scalbn+0x8c>
 8023382:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8023386:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 802338a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 802338e:	ec45 4b10 	vmov	d0, r4, r5
 8023392:	bd70      	pop	{r4, r5, r6, pc}
 8023394:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8023398:	da19      	bge.n	80233ce <scalbn+0xc6>
 802339a:	f24c 3350 	movw	r3, #50000	; 0xc350
 802339e:	429e      	cmp	r6, r3
 80233a0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80233a4:	dd0a      	ble.n	80233bc <scalbn+0xb4>
 80233a6:	a112      	add	r1, pc, #72	; (adr r1, 80233f0 <scalbn+0xe8>)
 80233a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80233ac:	2b00      	cmp	r3, #0
 80233ae:	d1e2      	bne.n	8023376 <scalbn+0x6e>
 80233b0:	a30f      	add	r3, pc, #60	; (adr r3, 80233f0 <scalbn+0xe8>)
 80233b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80233b6:	f7dd f929 	bl	800060c <__aeabi_dmul>
 80233ba:	e7cb      	b.n	8023354 <scalbn+0x4c>
 80233bc:	a10a      	add	r1, pc, #40	; (adr r1, 80233e8 <scalbn+0xe0>)
 80233be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80233c2:	2b00      	cmp	r3, #0
 80233c4:	d0b8      	beq.n	8023338 <scalbn+0x30>
 80233c6:	a10e      	add	r1, pc, #56	; (adr r1, 8023400 <scalbn+0xf8>)
 80233c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80233cc:	e7b4      	b.n	8023338 <scalbn+0x30>
 80233ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80233d2:	3236      	adds	r2, #54	; 0x36
 80233d4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80233d8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80233dc:	4620      	mov	r0, r4
 80233de:	4b0c      	ldr	r3, [pc, #48]	; (8023410 <scalbn+0x108>)
 80233e0:	2200      	movs	r2, #0
 80233e2:	e7e8      	b.n	80233b6 <scalbn+0xae>
 80233e4:	f3af 8000 	nop.w
 80233e8:	c2f8f359 	.word	0xc2f8f359
 80233ec:	01a56e1f 	.word	0x01a56e1f
 80233f0:	8800759c 	.word	0x8800759c
 80233f4:	7e37e43c 	.word	0x7e37e43c
 80233f8:	8800759c 	.word	0x8800759c
 80233fc:	fe37e43c 	.word	0xfe37e43c
 8023400:	c2f8f359 	.word	0xc2f8f359
 8023404:	81a56e1f 	.word	0x81a56e1f
 8023408:	43500000 	.word	0x43500000
 802340c:	ffff3cb0 	.word	0xffff3cb0
 8023410:	3c900000 	.word	0x3c900000

08023414 <finitef>:
 8023414:	b082      	sub	sp, #8
 8023416:	ed8d 0a01 	vstr	s0, [sp, #4]
 802341a:	9801      	ldr	r0, [sp, #4]
 802341c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8023420:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8023424:	bfac      	ite	ge
 8023426:	2000      	movge	r0, #0
 8023428:	2001      	movlt	r0, #1
 802342a:	b002      	add	sp, #8
 802342c:	4770      	bx	lr
	...

08023430 <nanf>:
 8023430:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8023438 <nanf+0x8>
 8023434:	4770      	bx	lr
 8023436:	bf00      	nop
 8023438:	7fc00000 	.word	0x7fc00000

0802343c <abort>:
 802343c:	b508      	push	{r3, lr}
 802343e:	2006      	movs	r0, #6
 8023440:	f000 ffa0 	bl	8024384 <raise>
 8023444:	2001      	movs	r0, #1
 8023446:	f7e5 fe6f 	bl	8009128 <_exit>
	...

0802344c <__assert_func>:
 802344c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802344e:	4614      	mov	r4, r2
 8023450:	461a      	mov	r2, r3
 8023452:	4b09      	ldr	r3, [pc, #36]	; (8023478 <__assert_func+0x2c>)
 8023454:	681b      	ldr	r3, [r3, #0]
 8023456:	4605      	mov	r5, r0
 8023458:	68d8      	ldr	r0, [r3, #12]
 802345a:	b14c      	cbz	r4, 8023470 <__assert_func+0x24>
 802345c:	4b07      	ldr	r3, [pc, #28]	; (802347c <__assert_func+0x30>)
 802345e:	9100      	str	r1, [sp, #0]
 8023460:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8023464:	4906      	ldr	r1, [pc, #24]	; (8023480 <__assert_func+0x34>)
 8023466:	462b      	mov	r3, r5
 8023468:	f000 f820 	bl	80234ac <fiprintf>
 802346c:	f7ff ffe6 	bl	802343c <abort>
 8023470:	4b04      	ldr	r3, [pc, #16]	; (8023484 <__assert_func+0x38>)
 8023472:	461c      	mov	r4, r3
 8023474:	e7f3      	b.n	802345e <__assert_func+0x12>
 8023476:	bf00      	nop
 8023478:	20000280 	.word	0x20000280
 802347c:	08029f70 	.word	0x08029f70
 8023480:	08029f7d 	.word	0x08029f7d
 8023484:	08029fab 	.word	0x08029fab

08023488 <atof>:
 8023488:	2100      	movs	r1, #0
 802348a:	f001 bdcf 	b.w	802502c <strtod>
	...

08023490 <calloc>:
 8023490:	4b02      	ldr	r3, [pc, #8]	; (802349c <calloc+0xc>)
 8023492:	460a      	mov	r2, r1
 8023494:	4601      	mov	r1, r0
 8023496:	6818      	ldr	r0, [r3, #0]
 8023498:	f000 b882 	b.w	80235a0 <_calloc_r>
 802349c:	20000280 	.word	0x20000280

080234a0 <__errno>:
 80234a0:	4b01      	ldr	r3, [pc, #4]	; (80234a8 <__errno+0x8>)
 80234a2:	6818      	ldr	r0, [r3, #0]
 80234a4:	4770      	bx	lr
 80234a6:	bf00      	nop
 80234a8:	20000280 	.word	0x20000280

080234ac <fiprintf>:
 80234ac:	b40e      	push	{r1, r2, r3}
 80234ae:	b503      	push	{r0, r1, lr}
 80234b0:	4601      	mov	r1, r0
 80234b2:	ab03      	add	r3, sp, #12
 80234b4:	4805      	ldr	r0, [pc, #20]	; (80234cc <fiprintf+0x20>)
 80234b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80234ba:	6800      	ldr	r0, [r0, #0]
 80234bc:	9301      	str	r3, [sp, #4]
 80234be:	f000 f98f 	bl	80237e0 <_vfiprintf_r>
 80234c2:	b002      	add	sp, #8
 80234c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80234c8:	b003      	add	sp, #12
 80234ca:	4770      	bx	lr
 80234cc:	20000280 	.word	0x20000280

080234d0 <__libc_init_array>:
 80234d0:	b570      	push	{r4, r5, r6, lr}
 80234d2:	4d0d      	ldr	r5, [pc, #52]	; (8023508 <__libc_init_array+0x38>)
 80234d4:	4c0d      	ldr	r4, [pc, #52]	; (802350c <__libc_init_array+0x3c>)
 80234d6:	1b64      	subs	r4, r4, r5
 80234d8:	10a4      	asrs	r4, r4, #2
 80234da:	2600      	movs	r6, #0
 80234dc:	42a6      	cmp	r6, r4
 80234de:	d109      	bne.n	80234f4 <__libc_init_array+0x24>
 80234e0:	4d0b      	ldr	r5, [pc, #44]	; (8023510 <__libc_init_array+0x40>)
 80234e2:	4c0c      	ldr	r4, [pc, #48]	; (8023514 <__libc_init_array+0x44>)
 80234e4:	f004 f9c4 	bl	8027870 <_init>
 80234e8:	1b64      	subs	r4, r4, r5
 80234ea:	10a4      	asrs	r4, r4, #2
 80234ec:	2600      	movs	r6, #0
 80234ee:	42a6      	cmp	r6, r4
 80234f0:	d105      	bne.n	80234fe <__libc_init_array+0x2e>
 80234f2:	bd70      	pop	{r4, r5, r6, pc}
 80234f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80234f8:	4798      	blx	r3
 80234fa:	3601      	adds	r6, #1
 80234fc:	e7ee      	b.n	80234dc <__libc_init_array+0xc>
 80234fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8023502:	4798      	blx	r3
 8023504:	3601      	adds	r6, #1
 8023506:	e7f2      	b.n	80234ee <__libc_init_array+0x1e>
 8023508:	0802a41c 	.word	0x0802a41c
 802350c:	0802a41c 	.word	0x0802a41c
 8023510:	0802a41c 	.word	0x0802a41c
 8023514:	0802a424 	.word	0x0802a424

08023518 <__retarget_lock_init_recursive>:
 8023518:	4770      	bx	lr

0802351a <__retarget_lock_acquire_recursive>:
 802351a:	4770      	bx	lr

0802351c <__retarget_lock_release_recursive>:
 802351c:	4770      	bx	lr
	...

08023520 <malloc>:
 8023520:	4b02      	ldr	r3, [pc, #8]	; (802352c <malloc+0xc>)
 8023522:	4601      	mov	r1, r0
 8023524:	6818      	ldr	r0, [r3, #0]
 8023526:	f000 b8bd 	b.w	80236a4 <_malloc_r>
 802352a:	bf00      	nop
 802352c:	20000280 	.word	0x20000280

08023530 <free>:
 8023530:	4b02      	ldr	r3, [pc, #8]	; (802353c <free+0xc>)
 8023532:	4601      	mov	r1, r0
 8023534:	6818      	ldr	r0, [r3, #0]
 8023536:	f000 b849 	b.w	80235cc <_free_r>
 802353a:	bf00      	nop
 802353c:	20000280 	.word	0x20000280

08023540 <memcpy>:
 8023540:	440a      	add	r2, r1
 8023542:	4291      	cmp	r1, r2
 8023544:	f100 33ff 	add.w	r3, r0, #4294967295
 8023548:	d100      	bne.n	802354c <memcpy+0xc>
 802354a:	4770      	bx	lr
 802354c:	b510      	push	{r4, lr}
 802354e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8023552:	f803 4f01 	strb.w	r4, [r3, #1]!
 8023556:	4291      	cmp	r1, r2
 8023558:	d1f9      	bne.n	802354e <memcpy+0xe>
 802355a:	bd10      	pop	{r4, pc}

0802355c <memmove>:
 802355c:	4288      	cmp	r0, r1
 802355e:	b510      	push	{r4, lr}
 8023560:	eb01 0402 	add.w	r4, r1, r2
 8023564:	d902      	bls.n	802356c <memmove+0x10>
 8023566:	4284      	cmp	r4, r0
 8023568:	4623      	mov	r3, r4
 802356a:	d807      	bhi.n	802357c <memmove+0x20>
 802356c:	1e43      	subs	r3, r0, #1
 802356e:	42a1      	cmp	r1, r4
 8023570:	d008      	beq.n	8023584 <memmove+0x28>
 8023572:	f811 2b01 	ldrb.w	r2, [r1], #1
 8023576:	f803 2f01 	strb.w	r2, [r3, #1]!
 802357a:	e7f8      	b.n	802356e <memmove+0x12>
 802357c:	4402      	add	r2, r0
 802357e:	4601      	mov	r1, r0
 8023580:	428a      	cmp	r2, r1
 8023582:	d100      	bne.n	8023586 <memmove+0x2a>
 8023584:	bd10      	pop	{r4, pc}
 8023586:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802358a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802358e:	e7f7      	b.n	8023580 <memmove+0x24>

08023590 <memset>:
 8023590:	4402      	add	r2, r0
 8023592:	4603      	mov	r3, r0
 8023594:	4293      	cmp	r3, r2
 8023596:	d100      	bne.n	802359a <memset+0xa>
 8023598:	4770      	bx	lr
 802359a:	f803 1b01 	strb.w	r1, [r3], #1
 802359e:	e7f9      	b.n	8023594 <memset+0x4>

080235a0 <_calloc_r>:
 80235a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80235a2:	fba1 2402 	umull	r2, r4, r1, r2
 80235a6:	b94c      	cbnz	r4, 80235bc <_calloc_r+0x1c>
 80235a8:	4611      	mov	r1, r2
 80235aa:	9201      	str	r2, [sp, #4]
 80235ac:	f000 f87a 	bl	80236a4 <_malloc_r>
 80235b0:	9a01      	ldr	r2, [sp, #4]
 80235b2:	4605      	mov	r5, r0
 80235b4:	b930      	cbnz	r0, 80235c4 <_calloc_r+0x24>
 80235b6:	4628      	mov	r0, r5
 80235b8:	b003      	add	sp, #12
 80235ba:	bd30      	pop	{r4, r5, pc}
 80235bc:	220c      	movs	r2, #12
 80235be:	6002      	str	r2, [r0, #0]
 80235c0:	2500      	movs	r5, #0
 80235c2:	e7f8      	b.n	80235b6 <_calloc_r+0x16>
 80235c4:	4621      	mov	r1, r4
 80235c6:	f7ff ffe3 	bl	8023590 <memset>
 80235ca:	e7f4      	b.n	80235b6 <_calloc_r+0x16>

080235cc <_free_r>:
 80235cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80235ce:	2900      	cmp	r1, #0
 80235d0:	d044      	beq.n	802365c <_free_r+0x90>
 80235d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80235d6:	9001      	str	r0, [sp, #4]
 80235d8:	2b00      	cmp	r3, #0
 80235da:	f1a1 0404 	sub.w	r4, r1, #4
 80235de:	bfb8      	it	lt
 80235e0:	18e4      	addlt	r4, r4, r3
 80235e2:	f003 fa2d 	bl	8026a40 <__malloc_lock>
 80235e6:	4a1e      	ldr	r2, [pc, #120]	; (8023660 <_free_r+0x94>)
 80235e8:	9801      	ldr	r0, [sp, #4]
 80235ea:	6813      	ldr	r3, [r2, #0]
 80235ec:	b933      	cbnz	r3, 80235fc <_free_r+0x30>
 80235ee:	6063      	str	r3, [r4, #4]
 80235f0:	6014      	str	r4, [r2, #0]
 80235f2:	b003      	add	sp, #12
 80235f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80235f8:	f003 ba28 	b.w	8026a4c <__malloc_unlock>
 80235fc:	42a3      	cmp	r3, r4
 80235fe:	d908      	bls.n	8023612 <_free_r+0x46>
 8023600:	6825      	ldr	r5, [r4, #0]
 8023602:	1961      	adds	r1, r4, r5
 8023604:	428b      	cmp	r3, r1
 8023606:	bf01      	itttt	eq
 8023608:	6819      	ldreq	r1, [r3, #0]
 802360a:	685b      	ldreq	r3, [r3, #4]
 802360c:	1949      	addeq	r1, r1, r5
 802360e:	6021      	streq	r1, [r4, #0]
 8023610:	e7ed      	b.n	80235ee <_free_r+0x22>
 8023612:	461a      	mov	r2, r3
 8023614:	685b      	ldr	r3, [r3, #4]
 8023616:	b10b      	cbz	r3, 802361c <_free_r+0x50>
 8023618:	42a3      	cmp	r3, r4
 802361a:	d9fa      	bls.n	8023612 <_free_r+0x46>
 802361c:	6811      	ldr	r1, [r2, #0]
 802361e:	1855      	adds	r5, r2, r1
 8023620:	42a5      	cmp	r5, r4
 8023622:	d10b      	bne.n	802363c <_free_r+0x70>
 8023624:	6824      	ldr	r4, [r4, #0]
 8023626:	4421      	add	r1, r4
 8023628:	1854      	adds	r4, r2, r1
 802362a:	42a3      	cmp	r3, r4
 802362c:	6011      	str	r1, [r2, #0]
 802362e:	d1e0      	bne.n	80235f2 <_free_r+0x26>
 8023630:	681c      	ldr	r4, [r3, #0]
 8023632:	685b      	ldr	r3, [r3, #4]
 8023634:	6053      	str	r3, [r2, #4]
 8023636:	4421      	add	r1, r4
 8023638:	6011      	str	r1, [r2, #0]
 802363a:	e7da      	b.n	80235f2 <_free_r+0x26>
 802363c:	d902      	bls.n	8023644 <_free_r+0x78>
 802363e:	230c      	movs	r3, #12
 8023640:	6003      	str	r3, [r0, #0]
 8023642:	e7d6      	b.n	80235f2 <_free_r+0x26>
 8023644:	6825      	ldr	r5, [r4, #0]
 8023646:	1961      	adds	r1, r4, r5
 8023648:	428b      	cmp	r3, r1
 802364a:	bf04      	itt	eq
 802364c:	6819      	ldreq	r1, [r3, #0]
 802364e:	685b      	ldreq	r3, [r3, #4]
 8023650:	6063      	str	r3, [r4, #4]
 8023652:	bf04      	itt	eq
 8023654:	1949      	addeq	r1, r1, r5
 8023656:	6021      	streq	r1, [r4, #0]
 8023658:	6054      	str	r4, [r2, #4]
 802365a:	e7ca      	b.n	80235f2 <_free_r+0x26>
 802365c:	b003      	add	sp, #12
 802365e:	bd30      	pop	{r4, r5, pc}
 8023660:	20003ff0 	.word	0x20003ff0

08023664 <sbrk_aligned>:
 8023664:	b570      	push	{r4, r5, r6, lr}
 8023666:	4e0e      	ldr	r6, [pc, #56]	; (80236a0 <sbrk_aligned+0x3c>)
 8023668:	460c      	mov	r4, r1
 802366a:	6831      	ldr	r1, [r6, #0]
 802366c:	4605      	mov	r5, r0
 802366e:	b911      	cbnz	r1, 8023676 <sbrk_aligned+0x12>
 8023670:	f000 fe50 	bl	8024314 <_sbrk_r>
 8023674:	6030      	str	r0, [r6, #0]
 8023676:	4621      	mov	r1, r4
 8023678:	4628      	mov	r0, r5
 802367a:	f000 fe4b 	bl	8024314 <_sbrk_r>
 802367e:	1c43      	adds	r3, r0, #1
 8023680:	d00a      	beq.n	8023698 <sbrk_aligned+0x34>
 8023682:	1cc4      	adds	r4, r0, #3
 8023684:	f024 0403 	bic.w	r4, r4, #3
 8023688:	42a0      	cmp	r0, r4
 802368a:	d007      	beq.n	802369c <sbrk_aligned+0x38>
 802368c:	1a21      	subs	r1, r4, r0
 802368e:	4628      	mov	r0, r5
 8023690:	f000 fe40 	bl	8024314 <_sbrk_r>
 8023694:	3001      	adds	r0, #1
 8023696:	d101      	bne.n	802369c <sbrk_aligned+0x38>
 8023698:	f04f 34ff 	mov.w	r4, #4294967295
 802369c:	4620      	mov	r0, r4
 802369e:	bd70      	pop	{r4, r5, r6, pc}
 80236a0:	20003ff4 	.word	0x20003ff4

080236a4 <_malloc_r>:
 80236a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80236a8:	1ccd      	adds	r5, r1, #3
 80236aa:	f025 0503 	bic.w	r5, r5, #3
 80236ae:	3508      	adds	r5, #8
 80236b0:	2d0c      	cmp	r5, #12
 80236b2:	bf38      	it	cc
 80236b4:	250c      	movcc	r5, #12
 80236b6:	2d00      	cmp	r5, #0
 80236b8:	4607      	mov	r7, r0
 80236ba:	db01      	blt.n	80236c0 <_malloc_r+0x1c>
 80236bc:	42a9      	cmp	r1, r5
 80236be:	d905      	bls.n	80236cc <_malloc_r+0x28>
 80236c0:	230c      	movs	r3, #12
 80236c2:	603b      	str	r3, [r7, #0]
 80236c4:	2600      	movs	r6, #0
 80236c6:	4630      	mov	r0, r6
 80236c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80236cc:	4e2e      	ldr	r6, [pc, #184]	; (8023788 <_malloc_r+0xe4>)
 80236ce:	f003 f9b7 	bl	8026a40 <__malloc_lock>
 80236d2:	6833      	ldr	r3, [r6, #0]
 80236d4:	461c      	mov	r4, r3
 80236d6:	bb34      	cbnz	r4, 8023726 <_malloc_r+0x82>
 80236d8:	4629      	mov	r1, r5
 80236da:	4638      	mov	r0, r7
 80236dc:	f7ff ffc2 	bl	8023664 <sbrk_aligned>
 80236e0:	1c43      	adds	r3, r0, #1
 80236e2:	4604      	mov	r4, r0
 80236e4:	d14d      	bne.n	8023782 <_malloc_r+0xde>
 80236e6:	6834      	ldr	r4, [r6, #0]
 80236e8:	4626      	mov	r6, r4
 80236ea:	2e00      	cmp	r6, #0
 80236ec:	d140      	bne.n	8023770 <_malloc_r+0xcc>
 80236ee:	6823      	ldr	r3, [r4, #0]
 80236f0:	4631      	mov	r1, r6
 80236f2:	4638      	mov	r0, r7
 80236f4:	eb04 0803 	add.w	r8, r4, r3
 80236f8:	f000 fe0c 	bl	8024314 <_sbrk_r>
 80236fc:	4580      	cmp	r8, r0
 80236fe:	d13a      	bne.n	8023776 <_malloc_r+0xd2>
 8023700:	6821      	ldr	r1, [r4, #0]
 8023702:	3503      	adds	r5, #3
 8023704:	1a6d      	subs	r5, r5, r1
 8023706:	f025 0503 	bic.w	r5, r5, #3
 802370a:	3508      	adds	r5, #8
 802370c:	2d0c      	cmp	r5, #12
 802370e:	bf38      	it	cc
 8023710:	250c      	movcc	r5, #12
 8023712:	4629      	mov	r1, r5
 8023714:	4638      	mov	r0, r7
 8023716:	f7ff ffa5 	bl	8023664 <sbrk_aligned>
 802371a:	3001      	adds	r0, #1
 802371c:	d02b      	beq.n	8023776 <_malloc_r+0xd2>
 802371e:	6823      	ldr	r3, [r4, #0]
 8023720:	442b      	add	r3, r5
 8023722:	6023      	str	r3, [r4, #0]
 8023724:	e00e      	b.n	8023744 <_malloc_r+0xa0>
 8023726:	6822      	ldr	r2, [r4, #0]
 8023728:	1b52      	subs	r2, r2, r5
 802372a:	d41e      	bmi.n	802376a <_malloc_r+0xc6>
 802372c:	2a0b      	cmp	r2, #11
 802372e:	d916      	bls.n	802375e <_malloc_r+0xba>
 8023730:	1961      	adds	r1, r4, r5
 8023732:	42a3      	cmp	r3, r4
 8023734:	6025      	str	r5, [r4, #0]
 8023736:	bf18      	it	ne
 8023738:	6059      	strne	r1, [r3, #4]
 802373a:	6863      	ldr	r3, [r4, #4]
 802373c:	bf08      	it	eq
 802373e:	6031      	streq	r1, [r6, #0]
 8023740:	5162      	str	r2, [r4, r5]
 8023742:	604b      	str	r3, [r1, #4]
 8023744:	4638      	mov	r0, r7
 8023746:	f104 060b 	add.w	r6, r4, #11
 802374a:	f003 f97f 	bl	8026a4c <__malloc_unlock>
 802374e:	f026 0607 	bic.w	r6, r6, #7
 8023752:	1d23      	adds	r3, r4, #4
 8023754:	1af2      	subs	r2, r6, r3
 8023756:	d0b6      	beq.n	80236c6 <_malloc_r+0x22>
 8023758:	1b9b      	subs	r3, r3, r6
 802375a:	50a3      	str	r3, [r4, r2]
 802375c:	e7b3      	b.n	80236c6 <_malloc_r+0x22>
 802375e:	6862      	ldr	r2, [r4, #4]
 8023760:	42a3      	cmp	r3, r4
 8023762:	bf0c      	ite	eq
 8023764:	6032      	streq	r2, [r6, #0]
 8023766:	605a      	strne	r2, [r3, #4]
 8023768:	e7ec      	b.n	8023744 <_malloc_r+0xa0>
 802376a:	4623      	mov	r3, r4
 802376c:	6864      	ldr	r4, [r4, #4]
 802376e:	e7b2      	b.n	80236d6 <_malloc_r+0x32>
 8023770:	4634      	mov	r4, r6
 8023772:	6876      	ldr	r6, [r6, #4]
 8023774:	e7b9      	b.n	80236ea <_malloc_r+0x46>
 8023776:	230c      	movs	r3, #12
 8023778:	603b      	str	r3, [r7, #0]
 802377a:	4638      	mov	r0, r7
 802377c:	f003 f966 	bl	8026a4c <__malloc_unlock>
 8023780:	e7a1      	b.n	80236c6 <_malloc_r+0x22>
 8023782:	6025      	str	r5, [r4, #0]
 8023784:	e7de      	b.n	8023744 <_malloc_r+0xa0>
 8023786:	bf00      	nop
 8023788:	20003ff0 	.word	0x20003ff0

0802378c <__sfputc_r>:
 802378c:	6893      	ldr	r3, [r2, #8]
 802378e:	3b01      	subs	r3, #1
 8023790:	2b00      	cmp	r3, #0
 8023792:	b410      	push	{r4}
 8023794:	6093      	str	r3, [r2, #8]
 8023796:	da08      	bge.n	80237aa <__sfputc_r+0x1e>
 8023798:	6994      	ldr	r4, [r2, #24]
 802379a:	42a3      	cmp	r3, r4
 802379c:	db01      	blt.n	80237a2 <__sfputc_r+0x16>
 802379e:	290a      	cmp	r1, #10
 80237a0:	d103      	bne.n	80237aa <__sfputc_r+0x1e>
 80237a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80237a6:	f001 bc6d 	b.w	8025084 <__swbuf_r>
 80237aa:	6813      	ldr	r3, [r2, #0]
 80237ac:	1c58      	adds	r0, r3, #1
 80237ae:	6010      	str	r0, [r2, #0]
 80237b0:	7019      	strb	r1, [r3, #0]
 80237b2:	4608      	mov	r0, r1
 80237b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80237b8:	4770      	bx	lr

080237ba <__sfputs_r>:
 80237ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80237bc:	4606      	mov	r6, r0
 80237be:	460f      	mov	r7, r1
 80237c0:	4614      	mov	r4, r2
 80237c2:	18d5      	adds	r5, r2, r3
 80237c4:	42ac      	cmp	r4, r5
 80237c6:	d101      	bne.n	80237cc <__sfputs_r+0x12>
 80237c8:	2000      	movs	r0, #0
 80237ca:	e007      	b.n	80237dc <__sfputs_r+0x22>
 80237cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80237d0:	463a      	mov	r2, r7
 80237d2:	4630      	mov	r0, r6
 80237d4:	f7ff ffda 	bl	802378c <__sfputc_r>
 80237d8:	1c43      	adds	r3, r0, #1
 80237da:	d1f3      	bne.n	80237c4 <__sfputs_r+0xa>
 80237dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080237e0 <_vfiprintf_r>:
 80237e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80237e4:	460d      	mov	r5, r1
 80237e6:	b09d      	sub	sp, #116	; 0x74
 80237e8:	4614      	mov	r4, r2
 80237ea:	4698      	mov	r8, r3
 80237ec:	4606      	mov	r6, r0
 80237ee:	b118      	cbz	r0, 80237f8 <_vfiprintf_r+0x18>
 80237f0:	6983      	ldr	r3, [r0, #24]
 80237f2:	b90b      	cbnz	r3, 80237f8 <_vfiprintf_r+0x18>
 80237f4:	f002 fc9c 	bl	8026130 <__sinit>
 80237f8:	4b89      	ldr	r3, [pc, #548]	; (8023a20 <_vfiprintf_r+0x240>)
 80237fa:	429d      	cmp	r5, r3
 80237fc:	d11b      	bne.n	8023836 <_vfiprintf_r+0x56>
 80237fe:	6875      	ldr	r5, [r6, #4]
 8023800:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8023802:	07d9      	lsls	r1, r3, #31
 8023804:	d405      	bmi.n	8023812 <_vfiprintf_r+0x32>
 8023806:	89ab      	ldrh	r3, [r5, #12]
 8023808:	059a      	lsls	r2, r3, #22
 802380a:	d402      	bmi.n	8023812 <_vfiprintf_r+0x32>
 802380c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802380e:	f7ff fe84 	bl	802351a <__retarget_lock_acquire_recursive>
 8023812:	89ab      	ldrh	r3, [r5, #12]
 8023814:	071b      	lsls	r3, r3, #28
 8023816:	d501      	bpl.n	802381c <_vfiprintf_r+0x3c>
 8023818:	692b      	ldr	r3, [r5, #16]
 802381a:	b9eb      	cbnz	r3, 8023858 <_vfiprintf_r+0x78>
 802381c:	4629      	mov	r1, r5
 802381e:	4630      	mov	r0, r6
 8023820:	f001 fc82 	bl	8025128 <__swsetup_r>
 8023824:	b1c0      	cbz	r0, 8023858 <_vfiprintf_r+0x78>
 8023826:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8023828:	07dc      	lsls	r4, r3, #31
 802382a:	d50e      	bpl.n	802384a <_vfiprintf_r+0x6a>
 802382c:	f04f 30ff 	mov.w	r0, #4294967295
 8023830:	b01d      	add	sp, #116	; 0x74
 8023832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023836:	4b7b      	ldr	r3, [pc, #492]	; (8023a24 <_vfiprintf_r+0x244>)
 8023838:	429d      	cmp	r5, r3
 802383a:	d101      	bne.n	8023840 <_vfiprintf_r+0x60>
 802383c:	68b5      	ldr	r5, [r6, #8]
 802383e:	e7df      	b.n	8023800 <_vfiprintf_r+0x20>
 8023840:	4b79      	ldr	r3, [pc, #484]	; (8023a28 <_vfiprintf_r+0x248>)
 8023842:	429d      	cmp	r5, r3
 8023844:	bf08      	it	eq
 8023846:	68f5      	ldreq	r5, [r6, #12]
 8023848:	e7da      	b.n	8023800 <_vfiprintf_r+0x20>
 802384a:	89ab      	ldrh	r3, [r5, #12]
 802384c:	0598      	lsls	r0, r3, #22
 802384e:	d4ed      	bmi.n	802382c <_vfiprintf_r+0x4c>
 8023850:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8023852:	f7ff fe63 	bl	802351c <__retarget_lock_release_recursive>
 8023856:	e7e9      	b.n	802382c <_vfiprintf_r+0x4c>
 8023858:	2300      	movs	r3, #0
 802385a:	9309      	str	r3, [sp, #36]	; 0x24
 802385c:	2320      	movs	r3, #32
 802385e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8023862:	f8cd 800c 	str.w	r8, [sp, #12]
 8023866:	2330      	movs	r3, #48	; 0x30
 8023868:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8023a2c <_vfiprintf_r+0x24c>
 802386c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8023870:	f04f 0901 	mov.w	r9, #1
 8023874:	4623      	mov	r3, r4
 8023876:	469a      	mov	sl, r3
 8023878:	f813 2b01 	ldrb.w	r2, [r3], #1
 802387c:	b10a      	cbz	r2, 8023882 <_vfiprintf_r+0xa2>
 802387e:	2a25      	cmp	r2, #37	; 0x25
 8023880:	d1f9      	bne.n	8023876 <_vfiprintf_r+0x96>
 8023882:	ebba 0b04 	subs.w	fp, sl, r4
 8023886:	d00b      	beq.n	80238a0 <_vfiprintf_r+0xc0>
 8023888:	465b      	mov	r3, fp
 802388a:	4622      	mov	r2, r4
 802388c:	4629      	mov	r1, r5
 802388e:	4630      	mov	r0, r6
 8023890:	f7ff ff93 	bl	80237ba <__sfputs_r>
 8023894:	3001      	adds	r0, #1
 8023896:	f000 80aa 	beq.w	80239ee <_vfiprintf_r+0x20e>
 802389a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802389c:	445a      	add	r2, fp
 802389e:	9209      	str	r2, [sp, #36]	; 0x24
 80238a0:	f89a 3000 	ldrb.w	r3, [sl]
 80238a4:	2b00      	cmp	r3, #0
 80238a6:	f000 80a2 	beq.w	80239ee <_vfiprintf_r+0x20e>
 80238aa:	2300      	movs	r3, #0
 80238ac:	f04f 32ff 	mov.w	r2, #4294967295
 80238b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80238b4:	f10a 0a01 	add.w	sl, sl, #1
 80238b8:	9304      	str	r3, [sp, #16]
 80238ba:	9307      	str	r3, [sp, #28]
 80238bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80238c0:	931a      	str	r3, [sp, #104]	; 0x68
 80238c2:	4654      	mov	r4, sl
 80238c4:	2205      	movs	r2, #5
 80238c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80238ca:	4858      	ldr	r0, [pc, #352]	; (8023a2c <_vfiprintf_r+0x24c>)
 80238cc:	f7dc fc80 	bl	80001d0 <memchr>
 80238d0:	9a04      	ldr	r2, [sp, #16]
 80238d2:	b9d8      	cbnz	r0, 802390c <_vfiprintf_r+0x12c>
 80238d4:	06d1      	lsls	r1, r2, #27
 80238d6:	bf44      	itt	mi
 80238d8:	2320      	movmi	r3, #32
 80238da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80238de:	0713      	lsls	r3, r2, #28
 80238e0:	bf44      	itt	mi
 80238e2:	232b      	movmi	r3, #43	; 0x2b
 80238e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80238e8:	f89a 3000 	ldrb.w	r3, [sl]
 80238ec:	2b2a      	cmp	r3, #42	; 0x2a
 80238ee:	d015      	beq.n	802391c <_vfiprintf_r+0x13c>
 80238f0:	9a07      	ldr	r2, [sp, #28]
 80238f2:	4654      	mov	r4, sl
 80238f4:	2000      	movs	r0, #0
 80238f6:	f04f 0c0a 	mov.w	ip, #10
 80238fa:	4621      	mov	r1, r4
 80238fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8023900:	3b30      	subs	r3, #48	; 0x30
 8023902:	2b09      	cmp	r3, #9
 8023904:	d94e      	bls.n	80239a4 <_vfiprintf_r+0x1c4>
 8023906:	b1b0      	cbz	r0, 8023936 <_vfiprintf_r+0x156>
 8023908:	9207      	str	r2, [sp, #28]
 802390a:	e014      	b.n	8023936 <_vfiprintf_r+0x156>
 802390c:	eba0 0308 	sub.w	r3, r0, r8
 8023910:	fa09 f303 	lsl.w	r3, r9, r3
 8023914:	4313      	orrs	r3, r2
 8023916:	9304      	str	r3, [sp, #16]
 8023918:	46a2      	mov	sl, r4
 802391a:	e7d2      	b.n	80238c2 <_vfiprintf_r+0xe2>
 802391c:	9b03      	ldr	r3, [sp, #12]
 802391e:	1d19      	adds	r1, r3, #4
 8023920:	681b      	ldr	r3, [r3, #0]
 8023922:	9103      	str	r1, [sp, #12]
 8023924:	2b00      	cmp	r3, #0
 8023926:	bfbb      	ittet	lt
 8023928:	425b      	neglt	r3, r3
 802392a:	f042 0202 	orrlt.w	r2, r2, #2
 802392e:	9307      	strge	r3, [sp, #28]
 8023930:	9307      	strlt	r3, [sp, #28]
 8023932:	bfb8      	it	lt
 8023934:	9204      	strlt	r2, [sp, #16]
 8023936:	7823      	ldrb	r3, [r4, #0]
 8023938:	2b2e      	cmp	r3, #46	; 0x2e
 802393a:	d10c      	bne.n	8023956 <_vfiprintf_r+0x176>
 802393c:	7863      	ldrb	r3, [r4, #1]
 802393e:	2b2a      	cmp	r3, #42	; 0x2a
 8023940:	d135      	bne.n	80239ae <_vfiprintf_r+0x1ce>
 8023942:	9b03      	ldr	r3, [sp, #12]
 8023944:	1d1a      	adds	r2, r3, #4
 8023946:	681b      	ldr	r3, [r3, #0]
 8023948:	9203      	str	r2, [sp, #12]
 802394a:	2b00      	cmp	r3, #0
 802394c:	bfb8      	it	lt
 802394e:	f04f 33ff 	movlt.w	r3, #4294967295
 8023952:	3402      	adds	r4, #2
 8023954:	9305      	str	r3, [sp, #20]
 8023956:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8023a3c <_vfiprintf_r+0x25c>
 802395a:	7821      	ldrb	r1, [r4, #0]
 802395c:	2203      	movs	r2, #3
 802395e:	4650      	mov	r0, sl
 8023960:	f7dc fc36 	bl	80001d0 <memchr>
 8023964:	b140      	cbz	r0, 8023978 <_vfiprintf_r+0x198>
 8023966:	2340      	movs	r3, #64	; 0x40
 8023968:	eba0 000a 	sub.w	r0, r0, sl
 802396c:	fa03 f000 	lsl.w	r0, r3, r0
 8023970:	9b04      	ldr	r3, [sp, #16]
 8023972:	4303      	orrs	r3, r0
 8023974:	3401      	adds	r4, #1
 8023976:	9304      	str	r3, [sp, #16]
 8023978:	f814 1b01 	ldrb.w	r1, [r4], #1
 802397c:	482c      	ldr	r0, [pc, #176]	; (8023a30 <_vfiprintf_r+0x250>)
 802397e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8023982:	2206      	movs	r2, #6
 8023984:	f7dc fc24 	bl	80001d0 <memchr>
 8023988:	2800      	cmp	r0, #0
 802398a:	d03f      	beq.n	8023a0c <_vfiprintf_r+0x22c>
 802398c:	4b29      	ldr	r3, [pc, #164]	; (8023a34 <_vfiprintf_r+0x254>)
 802398e:	bb1b      	cbnz	r3, 80239d8 <_vfiprintf_r+0x1f8>
 8023990:	9b03      	ldr	r3, [sp, #12]
 8023992:	3307      	adds	r3, #7
 8023994:	f023 0307 	bic.w	r3, r3, #7
 8023998:	3308      	adds	r3, #8
 802399a:	9303      	str	r3, [sp, #12]
 802399c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802399e:	443b      	add	r3, r7
 80239a0:	9309      	str	r3, [sp, #36]	; 0x24
 80239a2:	e767      	b.n	8023874 <_vfiprintf_r+0x94>
 80239a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80239a8:	460c      	mov	r4, r1
 80239aa:	2001      	movs	r0, #1
 80239ac:	e7a5      	b.n	80238fa <_vfiprintf_r+0x11a>
 80239ae:	2300      	movs	r3, #0
 80239b0:	3401      	adds	r4, #1
 80239b2:	9305      	str	r3, [sp, #20]
 80239b4:	4619      	mov	r1, r3
 80239b6:	f04f 0c0a 	mov.w	ip, #10
 80239ba:	4620      	mov	r0, r4
 80239bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80239c0:	3a30      	subs	r2, #48	; 0x30
 80239c2:	2a09      	cmp	r2, #9
 80239c4:	d903      	bls.n	80239ce <_vfiprintf_r+0x1ee>
 80239c6:	2b00      	cmp	r3, #0
 80239c8:	d0c5      	beq.n	8023956 <_vfiprintf_r+0x176>
 80239ca:	9105      	str	r1, [sp, #20]
 80239cc:	e7c3      	b.n	8023956 <_vfiprintf_r+0x176>
 80239ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80239d2:	4604      	mov	r4, r0
 80239d4:	2301      	movs	r3, #1
 80239d6:	e7f0      	b.n	80239ba <_vfiprintf_r+0x1da>
 80239d8:	ab03      	add	r3, sp, #12
 80239da:	9300      	str	r3, [sp, #0]
 80239dc:	462a      	mov	r2, r5
 80239de:	4b16      	ldr	r3, [pc, #88]	; (8023a38 <_vfiprintf_r+0x258>)
 80239e0:	a904      	add	r1, sp, #16
 80239e2:	4630      	mov	r0, r6
 80239e4:	f000 f8cc 	bl	8023b80 <_printf_float>
 80239e8:	4607      	mov	r7, r0
 80239ea:	1c78      	adds	r0, r7, #1
 80239ec:	d1d6      	bne.n	802399c <_vfiprintf_r+0x1bc>
 80239ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80239f0:	07d9      	lsls	r1, r3, #31
 80239f2:	d405      	bmi.n	8023a00 <_vfiprintf_r+0x220>
 80239f4:	89ab      	ldrh	r3, [r5, #12]
 80239f6:	059a      	lsls	r2, r3, #22
 80239f8:	d402      	bmi.n	8023a00 <_vfiprintf_r+0x220>
 80239fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80239fc:	f7ff fd8e 	bl	802351c <__retarget_lock_release_recursive>
 8023a00:	89ab      	ldrh	r3, [r5, #12]
 8023a02:	065b      	lsls	r3, r3, #25
 8023a04:	f53f af12 	bmi.w	802382c <_vfiprintf_r+0x4c>
 8023a08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8023a0a:	e711      	b.n	8023830 <_vfiprintf_r+0x50>
 8023a0c:	ab03      	add	r3, sp, #12
 8023a0e:	9300      	str	r3, [sp, #0]
 8023a10:	462a      	mov	r2, r5
 8023a12:	4b09      	ldr	r3, [pc, #36]	; (8023a38 <_vfiprintf_r+0x258>)
 8023a14:	a904      	add	r1, sp, #16
 8023a16:	4630      	mov	r0, r6
 8023a18:	f000 fb56 	bl	80240c8 <_printf_i>
 8023a1c:	e7e4      	b.n	80239e8 <_vfiprintf_r+0x208>
 8023a1e:	bf00      	nop
 8023a20:	0802a1fc 	.word	0x0802a1fc
 8023a24:	0802a21c 	.word	0x0802a21c
 8023a28:	0802a1dc 	.word	0x0802a1dc
 8023a2c:	08029fb0 	.word	0x08029fb0
 8023a30:	08029fba 	.word	0x08029fba
 8023a34:	08023b81 	.word	0x08023b81
 8023a38:	080237bb 	.word	0x080237bb
 8023a3c:	08029fb6 	.word	0x08029fb6

08023a40 <__cvt>:
 8023a40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8023a44:	ec55 4b10 	vmov	r4, r5, d0
 8023a48:	2d00      	cmp	r5, #0
 8023a4a:	460e      	mov	r6, r1
 8023a4c:	4619      	mov	r1, r3
 8023a4e:	462b      	mov	r3, r5
 8023a50:	bfbb      	ittet	lt
 8023a52:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8023a56:	461d      	movlt	r5, r3
 8023a58:	2300      	movge	r3, #0
 8023a5a:	232d      	movlt	r3, #45	; 0x2d
 8023a5c:	700b      	strb	r3, [r1, #0]
 8023a5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023a60:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8023a64:	4691      	mov	r9, r2
 8023a66:	f023 0820 	bic.w	r8, r3, #32
 8023a6a:	bfbc      	itt	lt
 8023a6c:	4622      	movlt	r2, r4
 8023a6e:	4614      	movlt	r4, r2
 8023a70:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8023a74:	d005      	beq.n	8023a82 <__cvt+0x42>
 8023a76:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8023a7a:	d100      	bne.n	8023a7e <__cvt+0x3e>
 8023a7c:	3601      	adds	r6, #1
 8023a7e:	2102      	movs	r1, #2
 8023a80:	e000      	b.n	8023a84 <__cvt+0x44>
 8023a82:	2103      	movs	r1, #3
 8023a84:	ab03      	add	r3, sp, #12
 8023a86:	9301      	str	r3, [sp, #4]
 8023a88:	ab02      	add	r3, sp, #8
 8023a8a:	9300      	str	r3, [sp, #0]
 8023a8c:	ec45 4b10 	vmov	d0, r4, r5
 8023a90:	4653      	mov	r3, sl
 8023a92:	4632      	mov	r2, r6
 8023a94:	f001 fc44 	bl	8025320 <_dtoa_r>
 8023a98:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8023a9c:	4607      	mov	r7, r0
 8023a9e:	d102      	bne.n	8023aa6 <__cvt+0x66>
 8023aa0:	f019 0f01 	tst.w	r9, #1
 8023aa4:	d022      	beq.n	8023aec <__cvt+0xac>
 8023aa6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8023aaa:	eb07 0906 	add.w	r9, r7, r6
 8023aae:	d110      	bne.n	8023ad2 <__cvt+0x92>
 8023ab0:	783b      	ldrb	r3, [r7, #0]
 8023ab2:	2b30      	cmp	r3, #48	; 0x30
 8023ab4:	d10a      	bne.n	8023acc <__cvt+0x8c>
 8023ab6:	2200      	movs	r2, #0
 8023ab8:	2300      	movs	r3, #0
 8023aba:	4620      	mov	r0, r4
 8023abc:	4629      	mov	r1, r5
 8023abe:	f7dd f80d 	bl	8000adc <__aeabi_dcmpeq>
 8023ac2:	b918      	cbnz	r0, 8023acc <__cvt+0x8c>
 8023ac4:	f1c6 0601 	rsb	r6, r6, #1
 8023ac8:	f8ca 6000 	str.w	r6, [sl]
 8023acc:	f8da 3000 	ldr.w	r3, [sl]
 8023ad0:	4499      	add	r9, r3
 8023ad2:	2200      	movs	r2, #0
 8023ad4:	2300      	movs	r3, #0
 8023ad6:	4620      	mov	r0, r4
 8023ad8:	4629      	mov	r1, r5
 8023ada:	f7dc ffff 	bl	8000adc <__aeabi_dcmpeq>
 8023ade:	b108      	cbz	r0, 8023ae4 <__cvt+0xa4>
 8023ae0:	f8cd 900c 	str.w	r9, [sp, #12]
 8023ae4:	2230      	movs	r2, #48	; 0x30
 8023ae6:	9b03      	ldr	r3, [sp, #12]
 8023ae8:	454b      	cmp	r3, r9
 8023aea:	d307      	bcc.n	8023afc <__cvt+0xbc>
 8023aec:	9b03      	ldr	r3, [sp, #12]
 8023aee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023af0:	1bdb      	subs	r3, r3, r7
 8023af2:	4638      	mov	r0, r7
 8023af4:	6013      	str	r3, [r2, #0]
 8023af6:	b004      	add	sp, #16
 8023af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023afc:	1c59      	adds	r1, r3, #1
 8023afe:	9103      	str	r1, [sp, #12]
 8023b00:	701a      	strb	r2, [r3, #0]
 8023b02:	e7f0      	b.n	8023ae6 <__cvt+0xa6>

08023b04 <__exponent>:
 8023b04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8023b06:	4603      	mov	r3, r0
 8023b08:	2900      	cmp	r1, #0
 8023b0a:	bfb8      	it	lt
 8023b0c:	4249      	neglt	r1, r1
 8023b0e:	f803 2b02 	strb.w	r2, [r3], #2
 8023b12:	bfb4      	ite	lt
 8023b14:	222d      	movlt	r2, #45	; 0x2d
 8023b16:	222b      	movge	r2, #43	; 0x2b
 8023b18:	2909      	cmp	r1, #9
 8023b1a:	7042      	strb	r2, [r0, #1]
 8023b1c:	dd2a      	ble.n	8023b74 <__exponent+0x70>
 8023b1e:	f10d 0407 	add.w	r4, sp, #7
 8023b22:	46a4      	mov	ip, r4
 8023b24:	270a      	movs	r7, #10
 8023b26:	46a6      	mov	lr, r4
 8023b28:	460a      	mov	r2, r1
 8023b2a:	fb91 f6f7 	sdiv	r6, r1, r7
 8023b2e:	fb07 1516 	mls	r5, r7, r6, r1
 8023b32:	3530      	adds	r5, #48	; 0x30
 8023b34:	2a63      	cmp	r2, #99	; 0x63
 8023b36:	f104 34ff 	add.w	r4, r4, #4294967295
 8023b3a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8023b3e:	4631      	mov	r1, r6
 8023b40:	dcf1      	bgt.n	8023b26 <__exponent+0x22>
 8023b42:	3130      	adds	r1, #48	; 0x30
 8023b44:	f1ae 0502 	sub.w	r5, lr, #2
 8023b48:	f804 1c01 	strb.w	r1, [r4, #-1]
 8023b4c:	1c44      	adds	r4, r0, #1
 8023b4e:	4629      	mov	r1, r5
 8023b50:	4561      	cmp	r1, ip
 8023b52:	d30a      	bcc.n	8023b6a <__exponent+0x66>
 8023b54:	f10d 0209 	add.w	r2, sp, #9
 8023b58:	eba2 020e 	sub.w	r2, r2, lr
 8023b5c:	4565      	cmp	r5, ip
 8023b5e:	bf88      	it	hi
 8023b60:	2200      	movhi	r2, #0
 8023b62:	4413      	add	r3, r2
 8023b64:	1a18      	subs	r0, r3, r0
 8023b66:	b003      	add	sp, #12
 8023b68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023b6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8023b6e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8023b72:	e7ed      	b.n	8023b50 <__exponent+0x4c>
 8023b74:	2330      	movs	r3, #48	; 0x30
 8023b76:	3130      	adds	r1, #48	; 0x30
 8023b78:	7083      	strb	r3, [r0, #2]
 8023b7a:	70c1      	strb	r1, [r0, #3]
 8023b7c:	1d03      	adds	r3, r0, #4
 8023b7e:	e7f1      	b.n	8023b64 <__exponent+0x60>

08023b80 <_printf_float>:
 8023b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023b84:	ed2d 8b02 	vpush	{d8}
 8023b88:	b08d      	sub	sp, #52	; 0x34
 8023b8a:	460c      	mov	r4, r1
 8023b8c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8023b90:	4616      	mov	r6, r2
 8023b92:	461f      	mov	r7, r3
 8023b94:	4605      	mov	r5, r0
 8023b96:	f002 fed7 	bl	8026948 <_localeconv_r>
 8023b9a:	f8d0 a000 	ldr.w	sl, [r0]
 8023b9e:	4650      	mov	r0, sl
 8023ba0:	f7dc fb70 	bl	8000284 <strlen>
 8023ba4:	2300      	movs	r3, #0
 8023ba6:	930a      	str	r3, [sp, #40]	; 0x28
 8023ba8:	6823      	ldr	r3, [r4, #0]
 8023baa:	9305      	str	r3, [sp, #20]
 8023bac:	f8d8 3000 	ldr.w	r3, [r8]
 8023bb0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8023bb4:	3307      	adds	r3, #7
 8023bb6:	f023 0307 	bic.w	r3, r3, #7
 8023bba:	f103 0208 	add.w	r2, r3, #8
 8023bbe:	f8c8 2000 	str.w	r2, [r8]
 8023bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023bc6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8023bca:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8023bce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8023bd2:	9307      	str	r3, [sp, #28]
 8023bd4:	f8cd 8018 	str.w	r8, [sp, #24]
 8023bd8:	ee08 0a10 	vmov	s16, r0
 8023bdc:	4b9f      	ldr	r3, [pc, #636]	; (8023e5c <_printf_float+0x2dc>)
 8023bde:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8023be2:	f04f 32ff 	mov.w	r2, #4294967295
 8023be6:	f7dc ffab 	bl	8000b40 <__aeabi_dcmpun>
 8023bea:	bb88      	cbnz	r0, 8023c50 <_printf_float+0xd0>
 8023bec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8023bf0:	4b9a      	ldr	r3, [pc, #616]	; (8023e5c <_printf_float+0x2dc>)
 8023bf2:	f04f 32ff 	mov.w	r2, #4294967295
 8023bf6:	f7dc ff85 	bl	8000b04 <__aeabi_dcmple>
 8023bfa:	bb48      	cbnz	r0, 8023c50 <_printf_float+0xd0>
 8023bfc:	2200      	movs	r2, #0
 8023bfe:	2300      	movs	r3, #0
 8023c00:	4640      	mov	r0, r8
 8023c02:	4649      	mov	r1, r9
 8023c04:	f7dc ff74 	bl	8000af0 <__aeabi_dcmplt>
 8023c08:	b110      	cbz	r0, 8023c10 <_printf_float+0x90>
 8023c0a:	232d      	movs	r3, #45	; 0x2d
 8023c0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8023c10:	4b93      	ldr	r3, [pc, #588]	; (8023e60 <_printf_float+0x2e0>)
 8023c12:	4894      	ldr	r0, [pc, #592]	; (8023e64 <_printf_float+0x2e4>)
 8023c14:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8023c18:	bf94      	ite	ls
 8023c1a:	4698      	movls	r8, r3
 8023c1c:	4680      	movhi	r8, r0
 8023c1e:	2303      	movs	r3, #3
 8023c20:	6123      	str	r3, [r4, #16]
 8023c22:	9b05      	ldr	r3, [sp, #20]
 8023c24:	f023 0204 	bic.w	r2, r3, #4
 8023c28:	6022      	str	r2, [r4, #0]
 8023c2a:	f04f 0900 	mov.w	r9, #0
 8023c2e:	9700      	str	r7, [sp, #0]
 8023c30:	4633      	mov	r3, r6
 8023c32:	aa0b      	add	r2, sp, #44	; 0x2c
 8023c34:	4621      	mov	r1, r4
 8023c36:	4628      	mov	r0, r5
 8023c38:	f000 f9d8 	bl	8023fec <_printf_common>
 8023c3c:	3001      	adds	r0, #1
 8023c3e:	f040 8090 	bne.w	8023d62 <_printf_float+0x1e2>
 8023c42:	f04f 30ff 	mov.w	r0, #4294967295
 8023c46:	b00d      	add	sp, #52	; 0x34
 8023c48:	ecbd 8b02 	vpop	{d8}
 8023c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023c50:	4642      	mov	r2, r8
 8023c52:	464b      	mov	r3, r9
 8023c54:	4640      	mov	r0, r8
 8023c56:	4649      	mov	r1, r9
 8023c58:	f7dc ff72 	bl	8000b40 <__aeabi_dcmpun>
 8023c5c:	b140      	cbz	r0, 8023c70 <_printf_float+0xf0>
 8023c5e:	464b      	mov	r3, r9
 8023c60:	2b00      	cmp	r3, #0
 8023c62:	bfbc      	itt	lt
 8023c64:	232d      	movlt	r3, #45	; 0x2d
 8023c66:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8023c6a:	487f      	ldr	r0, [pc, #508]	; (8023e68 <_printf_float+0x2e8>)
 8023c6c:	4b7f      	ldr	r3, [pc, #508]	; (8023e6c <_printf_float+0x2ec>)
 8023c6e:	e7d1      	b.n	8023c14 <_printf_float+0x94>
 8023c70:	6863      	ldr	r3, [r4, #4]
 8023c72:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8023c76:	9206      	str	r2, [sp, #24]
 8023c78:	1c5a      	adds	r2, r3, #1
 8023c7a:	d13f      	bne.n	8023cfc <_printf_float+0x17c>
 8023c7c:	2306      	movs	r3, #6
 8023c7e:	6063      	str	r3, [r4, #4]
 8023c80:	9b05      	ldr	r3, [sp, #20]
 8023c82:	6861      	ldr	r1, [r4, #4]
 8023c84:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8023c88:	2300      	movs	r3, #0
 8023c8a:	9303      	str	r3, [sp, #12]
 8023c8c:	ab0a      	add	r3, sp, #40	; 0x28
 8023c8e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8023c92:	ab09      	add	r3, sp, #36	; 0x24
 8023c94:	ec49 8b10 	vmov	d0, r8, r9
 8023c98:	9300      	str	r3, [sp, #0]
 8023c9a:	6022      	str	r2, [r4, #0]
 8023c9c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8023ca0:	4628      	mov	r0, r5
 8023ca2:	f7ff fecd 	bl	8023a40 <__cvt>
 8023ca6:	9b06      	ldr	r3, [sp, #24]
 8023ca8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8023caa:	2b47      	cmp	r3, #71	; 0x47
 8023cac:	4680      	mov	r8, r0
 8023cae:	d108      	bne.n	8023cc2 <_printf_float+0x142>
 8023cb0:	1cc8      	adds	r0, r1, #3
 8023cb2:	db02      	blt.n	8023cba <_printf_float+0x13a>
 8023cb4:	6863      	ldr	r3, [r4, #4]
 8023cb6:	4299      	cmp	r1, r3
 8023cb8:	dd41      	ble.n	8023d3e <_printf_float+0x1be>
 8023cba:	f1ab 0b02 	sub.w	fp, fp, #2
 8023cbe:	fa5f fb8b 	uxtb.w	fp, fp
 8023cc2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8023cc6:	d820      	bhi.n	8023d0a <_printf_float+0x18a>
 8023cc8:	3901      	subs	r1, #1
 8023cca:	465a      	mov	r2, fp
 8023ccc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8023cd0:	9109      	str	r1, [sp, #36]	; 0x24
 8023cd2:	f7ff ff17 	bl	8023b04 <__exponent>
 8023cd6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023cd8:	1813      	adds	r3, r2, r0
 8023cda:	2a01      	cmp	r2, #1
 8023cdc:	4681      	mov	r9, r0
 8023cde:	6123      	str	r3, [r4, #16]
 8023ce0:	dc02      	bgt.n	8023ce8 <_printf_float+0x168>
 8023ce2:	6822      	ldr	r2, [r4, #0]
 8023ce4:	07d2      	lsls	r2, r2, #31
 8023ce6:	d501      	bpl.n	8023cec <_printf_float+0x16c>
 8023ce8:	3301      	adds	r3, #1
 8023cea:	6123      	str	r3, [r4, #16]
 8023cec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8023cf0:	2b00      	cmp	r3, #0
 8023cf2:	d09c      	beq.n	8023c2e <_printf_float+0xae>
 8023cf4:	232d      	movs	r3, #45	; 0x2d
 8023cf6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8023cfa:	e798      	b.n	8023c2e <_printf_float+0xae>
 8023cfc:	9a06      	ldr	r2, [sp, #24]
 8023cfe:	2a47      	cmp	r2, #71	; 0x47
 8023d00:	d1be      	bne.n	8023c80 <_printf_float+0x100>
 8023d02:	2b00      	cmp	r3, #0
 8023d04:	d1bc      	bne.n	8023c80 <_printf_float+0x100>
 8023d06:	2301      	movs	r3, #1
 8023d08:	e7b9      	b.n	8023c7e <_printf_float+0xfe>
 8023d0a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8023d0e:	d118      	bne.n	8023d42 <_printf_float+0x1c2>
 8023d10:	2900      	cmp	r1, #0
 8023d12:	6863      	ldr	r3, [r4, #4]
 8023d14:	dd0b      	ble.n	8023d2e <_printf_float+0x1ae>
 8023d16:	6121      	str	r1, [r4, #16]
 8023d18:	b913      	cbnz	r3, 8023d20 <_printf_float+0x1a0>
 8023d1a:	6822      	ldr	r2, [r4, #0]
 8023d1c:	07d0      	lsls	r0, r2, #31
 8023d1e:	d502      	bpl.n	8023d26 <_printf_float+0x1a6>
 8023d20:	3301      	adds	r3, #1
 8023d22:	440b      	add	r3, r1
 8023d24:	6123      	str	r3, [r4, #16]
 8023d26:	65a1      	str	r1, [r4, #88]	; 0x58
 8023d28:	f04f 0900 	mov.w	r9, #0
 8023d2c:	e7de      	b.n	8023cec <_printf_float+0x16c>
 8023d2e:	b913      	cbnz	r3, 8023d36 <_printf_float+0x1b6>
 8023d30:	6822      	ldr	r2, [r4, #0]
 8023d32:	07d2      	lsls	r2, r2, #31
 8023d34:	d501      	bpl.n	8023d3a <_printf_float+0x1ba>
 8023d36:	3302      	adds	r3, #2
 8023d38:	e7f4      	b.n	8023d24 <_printf_float+0x1a4>
 8023d3a:	2301      	movs	r3, #1
 8023d3c:	e7f2      	b.n	8023d24 <_printf_float+0x1a4>
 8023d3e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8023d42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023d44:	4299      	cmp	r1, r3
 8023d46:	db05      	blt.n	8023d54 <_printf_float+0x1d4>
 8023d48:	6823      	ldr	r3, [r4, #0]
 8023d4a:	6121      	str	r1, [r4, #16]
 8023d4c:	07d8      	lsls	r0, r3, #31
 8023d4e:	d5ea      	bpl.n	8023d26 <_printf_float+0x1a6>
 8023d50:	1c4b      	adds	r3, r1, #1
 8023d52:	e7e7      	b.n	8023d24 <_printf_float+0x1a4>
 8023d54:	2900      	cmp	r1, #0
 8023d56:	bfd4      	ite	le
 8023d58:	f1c1 0202 	rsble	r2, r1, #2
 8023d5c:	2201      	movgt	r2, #1
 8023d5e:	4413      	add	r3, r2
 8023d60:	e7e0      	b.n	8023d24 <_printf_float+0x1a4>
 8023d62:	6823      	ldr	r3, [r4, #0]
 8023d64:	055a      	lsls	r2, r3, #21
 8023d66:	d407      	bmi.n	8023d78 <_printf_float+0x1f8>
 8023d68:	6923      	ldr	r3, [r4, #16]
 8023d6a:	4642      	mov	r2, r8
 8023d6c:	4631      	mov	r1, r6
 8023d6e:	4628      	mov	r0, r5
 8023d70:	47b8      	blx	r7
 8023d72:	3001      	adds	r0, #1
 8023d74:	d12c      	bne.n	8023dd0 <_printf_float+0x250>
 8023d76:	e764      	b.n	8023c42 <_printf_float+0xc2>
 8023d78:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8023d7c:	f240 80e0 	bls.w	8023f40 <_printf_float+0x3c0>
 8023d80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8023d84:	2200      	movs	r2, #0
 8023d86:	2300      	movs	r3, #0
 8023d88:	f7dc fea8 	bl	8000adc <__aeabi_dcmpeq>
 8023d8c:	2800      	cmp	r0, #0
 8023d8e:	d034      	beq.n	8023dfa <_printf_float+0x27a>
 8023d90:	4a37      	ldr	r2, [pc, #220]	; (8023e70 <_printf_float+0x2f0>)
 8023d92:	2301      	movs	r3, #1
 8023d94:	4631      	mov	r1, r6
 8023d96:	4628      	mov	r0, r5
 8023d98:	47b8      	blx	r7
 8023d9a:	3001      	adds	r0, #1
 8023d9c:	f43f af51 	beq.w	8023c42 <_printf_float+0xc2>
 8023da0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8023da4:	429a      	cmp	r2, r3
 8023da6:	db02      	blt.n	8023dae <_printf_float+0x22e>
 8023da8:	6823      	ldr	r3, [r4, #0]
 8023daa:	07d8      	lsls	r0, r3, #31
 8023dac:	d510      	bpl.n	8023dd0 <_printf_float+0x250>
 8023dae:	ee18 3a10 	vmov	r3, s16
 8023db2:	4652      	mov	r2, sl
 8023db4:	4631      	mov	r1, r6
 8023db6:	4628      	mov	r0, r5
 8023db8:	47b8      	blx	r7
 8023dba:	3001      	adds	r0, #1
 8023dbc:	f43f af41 	beq.w	8023c42 <_printf_float+0xc2>
 8023dc0:	f04f 0800 	mov.w	r8, #0
 8023dc4:	f104 091a 	add.w	r9, r4, #26
 8023dc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023dca:	3b01      	subs	r3, #1
 8023dcc:	4543      	cmp	r3, r8
 8023dce:	dc09      	bgt.n	8023de4 <_printf_float+0x264>
 8023dd0:	6823      	ldr	r3, [r4, #0]
 8023dd2:	079b      	lsls	r3, r3, #30
 8023dd4:	f100 8105 	bmi.w	8023fe2 <_printf_float+0x462>
 8023dd8:	68e0      	ldr	r0, [r4, #12]
 8023dda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023ddc:	4298      	cmp	r0, r3
 8023dde:	bfb8      	it	lt
 8023de0:	4618      	movlt	r0, r3
 8023de2:	e730      	b.n	8023c46 <_printf_float+0xc6>
 8023de4:	2301      	movs	r3, #1
 8023de6:	464a      	mov	r2, r9
 8023de8:	4631      	mov	r1, r6
 8023dea:	4628      	mov	r0, r5
 8023dec:	47b8      	blx	r7
 8023dee:	3001      	adds	r0, #1
 8023df0:	f43f af27 	beq.w	8023c42 <_printf_float+0xc2>
 8023df4:	f108 0801 	add.w	r8, r8, #1
 8023df8:	e7e6      	b.n	8023dc8 <_printf_float+0x248>
 8023dfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023dfc:	2b00      	cmp	r3, #0
 8023dfe:	dc39      	bgt.n	8023e74 <_printf_float+0x2f4>
 8023e00:	4a1b      	ldr	r2, [pc, #108]	; (8023e70 <_printf_float+0x2f0>)
 8023e02:	2301      	movs	r3, #1
 8023e04:	4631      	mov	r1, r6
 8023e06:	4628      	mov	r0, r5
 8023e08:	47b8      	blx	r7
 8023e0a:	3001      	adds	r0, #1
 8023e0c:	f43f af19 	beq.w	8023c42 <_printf_float+0xc2>
 8023e10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8023e14:	4313      	orrs	r3, r2
 8023e16:	d102      	bne.n	8023e1e <_printf_float+0x29e>
 8023e18:	6823      	ldr	r3, [r4, #0]
 8023e1a:	07d9      	lsls	r1, r3, #31
 8023e1c:	d5d8      	bpl.n	8023dd0 <_printf_float+0x250>
 8023e1e:	ee18 3a10 	vmov	r3, s16
 8023e22:	4652      	mov	r2, sl
 8023e24:	4631      	mov	r1, r6
 8023e26:	4628      	mov	r0, r5
 8023e28:	47b8      	blx	r7
 8023e2a:	3001      	adds	r0, #1
 8023e2c:	f43f af09 	beq.w	8023c42 <_printf_float+0xc2>
 8023e30:	f04f 0900 	mov.w	r9, #0
 8023e34:	f104 0a1a 	add.w	sl, r4, #26
 8023e38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023e3a:	425b      	negs	r3, r3
 8023e3c:	454b      	cmp	r3, r9
 8023e3e:	dc01      	bgt.n	8023e44 <_printf_float+0x2c4>
 8023e40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023e42:	e792      	b.n	8023d6a <_printf_float+0x1ea>
 8023e44:	2301      	movs	r3, #1
 8023e46:	4652      	mov	r2, sl
 8023e48:	4631      	mov	r1, r6
 8023e4a:	4628      	mov	r0, r5
 8023e4c:	47b8      	blx	r7
 8023e4e:	3001      	adds	r0, #1
 8023e50:	f43f aef7 	beq.w	8023c42 <_printf_float+0xc2>
 8023e54:	f109 0901 	add.w	r9, r9, #1
 8023e58:	e7ee      	b.n	8023e38 <_printf_float+0x2b8>
 8023e5a:	bf00      	nop
 8023e5c:	7fefffff 	.word	0x7fefffff
 8023e60:	08029fc1 	.word	0x08029fc1
 8023e64:	08029fc5 	.word	0x08029fc5
 8023e68:	08029fcd 	.word	0x08029fcd
 8023e6c:	08029fc9 	.word	0x08029fc9
 8023e70:	08029fd1 	.word	0x08029fd1
 8023e74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023e76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8023e78:	429a      	cmp	r2, r3
 8023e7a:	bfa8      	it	ge
 8023e7c:	461a      	movge	r2, r3
 8023e7e:	2a00      	cmp	r2, #0
 8023e80:	4691      	mov	r9, r2
 8023e82:	dc37      	bgt.n	8023ef4 <_printf_float+0x374>
 8023e84:	f04f 0b00 	mov.w	fp, #0
 8023e88:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8023e8c:	f104 021a 	add.w	r2, r4, #26
 8023e90:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8023e92:	9305      	str	r3, [sp, #20]
 8023e94:	eba3 0309 	sub.w	r3, r3, r9
 8023e98:	455b      	cmp	r3, fp
 8023e9a:	dc33      	bgt.n	8023f04 <_printf_float+0x384>
 8023e9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8023ea0:	429a      	cmp	r2, r3
 8023ea2:	db3b      	blt.n	8023f1c <_printf_float+0x39c>
 8023ea4:	6823      	ldr	r3, [r4, #0]
 8023ea6:	07da      	lsls	r2, r3, #31
 8023ea8:	d438      	bmi.n	8023f1c <_printf_float+0x39c>
 8023eaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023eac:	9a05      	ldr	r2, [sp, #20]
 8023eae:	9909      	ldr	r1, [sp, #36]	; 0x24
 8023eb0:	1a9a      	subs	r2, r3, r2
 8023eb2:	eba3 0901 	sub.w	r9, r3, r1
 8023eb6:	4591      	cmp	r9, r2
 8023eb8:	bfa8      	it	ge
 8023eba:	4691      	movge	r9, r2
 8023ebc:	f1b9 0f00 	cmp.w	r9, #0
 8023ec0:	dc35      	bgt.n	8023f2e <_printf_float+0x3ae>
 8023ec2:	f04f 0800 	mov.w	r8, #0
 8023ec6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8023eca:	f104 0a1a 	add.w	sl, r4, #26
 8023ece:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8023ed2:	1a9b      	subs	r3, r3, r2
 8023ed4:	eba3 0309 	sub.w	r3, r3, r9
 8023ed8:	4543      	cmp	r3, r8
 8023eda:	f77f af79 	ble.w	8023dd0 <_printf_float+0x250>
 8023ede:	2301      	movs	r3, #1
 8023ee0:	4652      	mov	r2, sl
 8023ee2:	4631      	mov	r1, r6
 8023ee4:	4628      	mov	r0, r5
 8023ee6:	47b8      	blx	r7
 8023ee8:	3001      	adds	r0, #1
 8023eea:	f43f aeaa 	beq.w	8023c42 <_printf_float+0xc2>
 8023eee:	f108 0801 	add.w	r8, r8, #1
 8023ef2:	e7ec      	b.n	8023ece <_printf_float+0x34e>
 8023ef4:	4613      	mov	r3, r2
 8023ef6:	4631      	mov	r1, r6
 8023ef8:	4642      	mov	r2, r8
 8023efa:	4628      	mov	r0, r5
 8023efc:	47b8      	blx	r7
 8023efe:	3001      	adds	r0, #1
 8023f00:	d1c0      	bne.n	8023e84 <_printf_float+0x304>
 8023f02:	e69e      	b.n	8023c42 <_printf_float+0xc2>
 8023f04:	2301      	movs	r3, #1
 8023f06:	4631      	mov	r1, r6
 8023f08:	4628      	mov	r0, r5
 8023f0a:	9205      	str	r2, [sp, #20]
 8023f0c:	47b8      	blx	r7
 8023f0e:	3001      	adds	r0, #1
 8023f10:	f43f ae97 	beq.w	8023c42 <_printf_float+0xc2>
 8023f14:	9a05      	ldr	r2, [sp, #20]
 8023f16:	f10b 0b01 	add.w	fp, fp, #1
 8023f1a:	e7b9      	b.n	8023e90 <_printf_float+0x310>
 8023f1c:	ee18 3a10 	vmov	r3, s16
 8023f20:	4652      	mov	r2, sl
 8023f22:	4631      	mov	r1, r6
 8023f24:	4628      	mov	r0, r5
 8023f26:	47b8      	blx	r7
 8023f28:	3001      	adds	r0, #1
 8023f2a:	d1be      	bne.n	8023eaa <_printf_float+0x32a>
 8023f2c:	e689      	b.n	8023c42 <_printf_float+0xc2>
 8023f2e:	9a05      	ldr	r2, [sp, #20]
 8023f30:	464b      	mov	r3, r9
 8023f32:	4442      	add	r2, r8
 8023f34:	4631      	mov	r1, r6
 8023f36:	4628      	mov	r0, r5
 8023f38:	47b8      	blx	r7
 8023f3a:	3001      	adds	r0, #1
 8023f3c:	d1c1      	bne.n	8023ec2 <_printf_float+0x342>
 8023f3e:	e680      	b.n	8023c42 <_printf_float+0xc2>
 8023f40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023f42:	2a01      	cmp	r2, #1
 8023f44:	dc01      	bgt.n	8023f4a <_printf_float+0x3ca>
 8023f46:	07db      	lsls	r3, r3, #31
 8023f48:	d538      	bpl.n	8023fbc <_printf_float+0x43c>
 8023f4a:	2301      	movs	r3, #1
 8023f4c:	4642      	mov	r2, r8
 8023f4e:	4631      	mov	r1, r6
 8023f50:	4628      	mov	r0, r5
 8023f52:	47b8      	blx	r7
 8023f54:	3001      	adds	r0, #1
 8023f56:	f43f ae74 	beq.w	8023c42 <_printf_float+0xc2>
 8023f5a:	ee18 3a10 	vmov	r3, s16
 8023f5e:	4652      	mov	r2, sl
 8023f60:	4631      	mov	r1, r6
 8023f62:	4628      	mov	r0, r5
 8023f64:	47b8      	blx	r7
 8023f66:	3001      	adds	r0, #1
 8023f68:	f43f ae6b 	beq.w	8023c42 <_printf_float+0xc2>
 8023f6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8023f70:	2200      	movs	r2, #0
 8023f72:	2300      	movs	r3, #0
 8023f74:	f7dc fdb2 	bl	8000adc <__aeabi_dcmpeq>
 8023f78:	b9d8      	cbnz	r0, 8023fb2 <_printf_float+0x432>
 8023f7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023f7c:	f108 0201 	add.w	r2, r8, #1
 8023f80:	3b01      	subs	r3, #1
 8023f82:	4631      	mov	r1, r6
 8023f84:	4628      	mov	r0, r5
 8023f86:	47b8      	blx	r7
 8023f88:	3001      	adds	r0, #1
 8023f8a:	d10e      	bne.n	8023faa <_printf_float+0x42a>
 8023f8c:	e659      	b.n	8023c42 <_printf_float+0xc2>
 8023f8e:	2301      	movs	r3, #1
 8023f90:	4652      	mov	r2, sl
 8023f92:	4631      	mov	r1, r6
 8023f94:	4628      	mov	r0, r5
 8023f96:	47b8      	blx	r7
 8023f98:	3001      	adds	r0, #1
 8023f9a:	f43f ae52 	beq.w	8023c42 <_printf_float+0xc2>
 8023f9e:	f108 0801 	add.w	r8, r8, #1
 8023fa2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023fa4:	3b01      	subs	r3, #1
 8023fa6:	4543      	cmp	r3, r8
 8023fa8:	dcf1      	bgt.n	8023f8e <_printf_float+0x40e>
 8023faa:	464b      	mov	r3, r9
 8023fac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8023fb0:	e6dc      	b.n	8023d6c <_printf_float+0x1ec>
 8023fb2:	f04f 0800 	mov.w	r8, #0
 8023fb6:	f104 0a1a 	add.w	sl, r4, #26
 8023fba:	e7f2      	b.n	8023fa2 <_printf_float+0x422>
 8023fbc:	2301      	movs	r3, #1
 8023fbe:	4642      	mov	r2, r8
 8023fc0:	e7df      	b.n	8023f82 <_printf_float+0x402>
 8023fc2:	2301      	movs	r3, #1
 8023fc4:	464a      	mov	r2, r9
 8023fc6:	4631      	mov	r1, r6
 8023fc8:	4628      	mov	r0, r5
 8023fca:	47b8      	blx	r7
 8023fcc:	3001      	adds	r0, #1
 8023fce:	f43f ae38 	beq.w	8023c42 <_printf_float+0xc2>
 8023fd2:	f108 0801 	add.w	r8, r8, #1
 8023fd6:	68e3      	ldr	r3, [r4, #12]
 8023fd8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8023fda:	1a5b      	subs	r3, r3, r1
 8023fdc:	4543      	cmp	r3, r8
 8023fde:	dcf0      	bgt.n	8023fc2 <_printf_float+0x442>
 8023fe0:	e6fa      	b.n	8023dd8 <_printf_float+0x258>
 8023fe2:	f04f 0800 	mov.w	r8, #0
 8023fe6:	f104 0919 	add.w	r9, r4, #25
 8023fea:	e7f4      	b.n	8023fd6 <_printf_float+0x456>

08023fec <_printf_common>:
 8023fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023ff0:	4616      	mov	r6, r2
 8023ff2:	4699      	mov	r9, r3
 8023ff4:	688a      	ldr	r2, [r1, #8]
 8023ff6:	690b      	ldr	r3, [r1, #16]
 8023ff8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8023ffc:	4293      	cmp	r3, r2
 8023ffe:	bfb8      	it	lt
 8024000:	4613      	movlt	r3, r2
 8024002:	6033      	str	r3, [r6, #0]
 8024004:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8024008:	4607      	mov	r7, r0
 802400a:	460c      	mov	r4, r1
 802400c:	b10a      	cbz	r2, 8024012 <_printf_common+0x26>
 802400e:	3301      	adds	r3, #1
 8024010:	6033      	str	r3, [r6, #0]
 8024012:	6823      	ldr	r3, [r4, #0]
 8024014:	0699      	lsls	r1, r3, #26
 8024016:	bf42      	ittt	mi
 8024018:	6833      	ldrmi	r3, [r6, #0]
 802401a:	3302      	addmi	r3, #2
 802401c:	6033      	strmi	r3, [r6, #0]
 802401e:	6825      	ldr	r5, [r4, #0]
 8024020:	f015 0506 	ands.w	r5, r5, #6
 8024024:	d106      	bne.n	8024034 <_printf_common+0x48>
 8024026:	f104 0a19 	add.w	sl, r4, #25
 802402a:	68e3      	ldr	r3, [r4, #12]
 802402c:	6832      	ldr	r2, [r6, #0]
 802402e:	1a9b      	subs	r3, r3, r2
 8024030:	42ab      	cmp	r3, r5
 8024032:	dc26      	bgt.n	8024082 <_printf_common+0x96>
 8024034:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8024038:	1e13      	subs	r3, r2, #0
 802403a:	6822      	ldr	r2, [r4, #0]
 802403c:	bf18      	it	ne
 802403e:	2301      	movne	r3, #1
 8024040:	0692      	lsls	r2, r2, #26
 8024042:	d42b      	bmi.n	802409c <_printf_common+0xb0>
 8024044:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8024048:	4649      	mov	r1, r9
 802404a:	4638      	mov	r0, r7
 802404c:	47c0      	blx	r8
 802404e:	3001      	adds	r0, #1
 8024050:	d01e      	beq.n	8024090 <_printf_common+0xa4>
 8024052:	6823      	ldr	r3, [r4, #0]
 8024054:	68e5      	ldr	r5, [r4, #12]
 8024056:	6832      	ldr	r2, [r6, #0]
 8024058:	f003 0306 	and.w	r3, r3, #6
 802405c:	2b04      	cmp	r3, #4
 802405e:	bf08      	it	eq
 8024060:	1aad      	subeq	r5, r5, r2
 8024062:	68a3      	ldr	r3, [r4, #8]
 8024064:	6922      	ldr	r2, [r4, #16]
 8024066:	bf0c      	ite	eq
 8024068:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802406c:	2500      	movne	r5, #0
 802406e:	4293      	cmp	r3, r2
 8024070:	bfc4      	itt	gt
 8024072:	1a9b      	subgt	r3, r3, r2
 8024074:	18ed      	addgt	r5, r5, r3
 8024076:	2600      	movs	r6, #0
 8024078:	341a      	adds	r4, #26
 802407a:	42b5      	cmp	r5, r6
 802407c:	d11a      	bne.n	80240b4 <_printf_common+0xc8>
 802407e:	2000      	movs	r0, #0
 8024080:	e008      	b.n	8024094 <_printf_common+0xa8>
 8024082:	2301      	movs	r3, #1
 8024084:	4652      	mov	r2, sl
 8024086:	4649      	mov	r1, r9
 8024088:	4638      	mov	r0, r7
 802408a:	47c0      	blx	r8
 802408c:	3001      	adds	r0, #1
 802408e:	d103      	bne.n	8024098 <_printf_common+0xac>
 8024090:	f04f 30ff 	mov.w	r0, #4294967295
 8024094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024098:	3501      	adds	r5, #1
 802409a:	e7c6      	b.n	802402a <_printf_common+0x3e>
 802409c:	18e1      	adds	r1, r4, r3
 802409e:	1c5a      	adds	r2, r3, #1
 80240a0:	2030      	movs	r0, #48	; 0x30
 80240a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80240a6:	4422      	add	r2, r4
 80240a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80240ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80240b0:	3302      	adds	r3, #2
 80240b2:	e7c7      	b.n	8024044 <_printf_common+0x58>
 80240b4:	2301      	movs	r3, #1
 80240b6:	4622      	mov	r2, r4
 80240b8:	4649      	mov	r1, r9
 80240ba:	4638      	mov	r0, r7
 80240bc:	47c0      	blx	r8
 80240be:	3001      	adds	r0, #1
 80240c0:	d0e6      	beq.n	8024090 <_printf_common+0xa4>
 80240c2:	3601      	adds	r6, #1
 80240c4:	e7d9      	b.n	802407a <_printf_common+0x8e>
	...

080240c8 <_printf_i>:
 80240c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80240cc:	7e0f      	ldrb	r7, [r1, #24]
 80240ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80240d0:	2f78      	cmp	r7, #120	; 0x78
 80240d2:	4691      	mov	r9, r2
 80240d4:	4680      	mov	r8, r0
 80240d6:	460c      	mov	r4, r1
 80240d8:	469a      	mov	sl, r3
 80240da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80240de:	d807      	bhi.n	80240f0 <_printf_i+0x28>
 80240e0:	2f62      	cmp	r7, #98	; 0x62
 80240e2:	d80a      	bhi.n	80240fa <_printf_i+0x32>
 80240e4:	2f00      	cmp	r7, #0
 80240e6:	f000 80d8 	beq.w	802429a <_printf_i+0x1d2>
 80240ea:	2f58      	cmp	r7, #88	; 0x58
 80240ec:	f000 80a3 	beq.w	8024236 <_printf_i+0x16e>
 80240f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80240f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80240f8:	e03a      	b.n	8024170 <_printf_i+0xa8>
 80240fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80240fe:	2b15      	cmp	r3, #21
 8024100:	d8f6      	bhi.n	80240f0 <_printf_i+0x28>
 8024102:	a101      	add	r1, pc, #4	; (adr r1, 8024108 <_printf_i+0x40>)
 8024104:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8024108:	08024161 	.word	0x08024161
 802410c:	08024175 	.word	0x08024175
 8024110:	080240f1 	.word	0x080240f1
 8024114:	080240f1 	.word	0x080240f1
 8024118:	080240f1 	.word	0x080240f1
 802411c:	080240f1 	.word	0x080240f1
 8024120:	08024175 	.word	0x08024175
 8024124:	080240f1 	.word	0x080240f1
 8024128:	080240f1 	.word	0x080240f1
 802412c:	080240f1 	.word	0x080240f1
 8024130:	080240f1 	.word	0x080240f1
 8024134:	08024281 	.word	0x08024281
 8024138:	080241a5 	.word	0x080241a5
 802413c:	08024263 	.word	0x08024263
 8024140:	080240f1 	.word	0x080240f1
 8024144:	080240f1 	.word	0x080240f1
 8024148:	080242a3 	.word	0x080242a3
 802414c:	080240f1 	.word	0x080240f1
 8024150:	080241a5 	.word	0x080241a5
 8024154:	080240f1 	.word	0x080240f1
 8024158:	080240f1 	.word	0x080240f1
 802415c:	0802426b 	.word	0x0802426b
 8024160:	682b      	ldr	r3, [r5, #0]
 8024162:	1d1a      	adds	r2, r3, #4
 8024164:	681b      	ldr	r3, [r3, #0]
 8024166:	602a      	str	r2, [r5, #0]
 8024168:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802416c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8024170:	2301      	movs	r3, #1
 8024172:	e0a3      	b.n	80242bc <_printf_i+0x1f4>
 8024174:	6820      	ldr	r0, [r4, #0]
 8024176:	6829      	ldr	r1, [r5, #0]
 8024178:	0606      	lsls	r6, r0, #24
 802417a:	f101 0304 	add.w	r3, r1, #4
 802417e:	d50a      	bpl.n	8024196 <_printf_i+0xce>
 8024180:	680e      	ldr	r6, [r1, #0]
 8024182:	602b      	str	r3, [r5, #0]
 8024184:	2e00      	cmp	r6, #0
 8024186:	da03      	bge.n	8024190 <_printf_i+0xc8>
 8024188:	232d      	movs	r3, #45	; 0x2d
 802418a:	4276      	negs	r6, r6
 802418c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8024190:	485e      	ldr	r0, [pc, #376]	; (802430c <_printf_i+0x244>)
 8024192:	230a      	movs	r3, #10
 8024194:	e019      	b.n	80241ca <_printf_i+0x102>
 8024196:	680e      	ldr	r6, [r1, #0]
 8024198:	602b      	str	r3, [r5, #0]
 802419a:	f010 0f40 	tst.w	r0, #64	; 0x40
 802419e:	bf18      	it	ne
 80241a0:	b236      	sxthne	r6, r6
 80241a2:	e7ef      	b.n	8024184 <_printf_i+0xbc>
 80241a4:	682b      	ldr	r3, [r5, #0]
 80241a6:	6820      	ldr	r0, [r4, #0]
 80241a8:	1d19      	adds	r1, r3, #4
 80241aa:	6029      	str	r1, [r5, #0]
 80241ac:	0601      	lsls	r1, r0, #24
 80241ae:	d501      	bpl.n	80241b4 <_printf_i+0xec>
 80241b0:	681e      	ldr	r6, [r3, #0]
 80241b2:	e002      	b.n	80241ba <_printf_i+0xf2>
 80241b4:	0646      	lsls	r6, r0, #25
 80241b6:	d5fb      	bpl.n	80241b0 <_printf_i+0xe8>
 80241b8:	881e      	ldrh	r6, [r3, #0]
 80241ba:	4854      	ldr	r0, [pc, #336]	; (802430c <_printf_i+0x244>)
 80241bc:	2f6f      	cmp	r7, #111	; 0x6f
 80241be:	bf0c      	ite	eq
 80241c0:	2308      	moveq	r3, #8
 80241c2:	230a      	movne	r3, #10
 80241c4:	2100      	movs	r1, #0
 80241c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80241ca:	6865      	ldr	r5, [r4, #4]
 80241cc:	60a5      	str	r5, [r4, #8]
 80241ce:	2d00      	cmp	r5, #0
 80241d0:	bfa2      	ittt	ge
 80241d2:	6821      	ldrge	r1, [r4, #0]
 80241d4:	f021 0104 	bicge.w	r1, r1, #4
 80241d8:	6021      	strge	r1, [r4, #0]
 80241da:	b90e      	cbnz	r6, 80241e0 <_printf_i+0x118>
 80241dc:	2d00      	cmp	r5, #0
 80241de:	d04d      	beq.n	802427c <_printf_i+0x1b4>
 80241e0:	4615      	mov	r5, r2
 80241e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80241e6:	fb03 6711 	mls	r7, r3, r1, r6
 80241ea:	5dc7      	ldrb	r7, [r0, r7]
 80241ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80241f0:	4637      	mov	r7, r6
 80241f2:	42bb      	cmp	r3, r7
 80241f4:	460e      	mov	r6, r1
 80241f6:	d9f4      	bls.n	80241e2 <_printf_i+0x11a>
 80241f8:	2b08      	cmp	r3, #8
 80241fa:	d10b      	bne.n	8024214 <_printf_i+0x14c>
 80241fc:	6823      	ldr	r3, [r4, #0]
 80241fe:	07de      	lsls	r6, r3, #31
 8024200:	d508      	bpl.n	8024214 <_printf_i+0x14c>
 8024202:	6923      	ldr	r3, [r4, #16]
 8024204:	6861      	ldr	r1, [r4, #4]
 8024206:	4299      	cmp	r1, r3
 8024208:	bfde      	ittt	le
 802420a:	2330      	movle	r3, #48	; 0x30
 802420c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8024210:	f105 35ff 	addle.w	r5, r5, #4294967295
 8024214:	1b52      	subs	r2, r2, r5
 8024216:	6122      	str	r2, [r4, #16]
 8024218:	f8cd a000 	str.w	sl, [sp]
 802421c:	464b      	mov	r3, r9
 802421e:	aa03      	add	r2, sp, #12
 8024220:	4621      	mov	r1, r4
 8024222:	4640      	mov	r0, r8
 8024224:	f7ff fee2 	bl	8023fec <_printf_common>
 8024228:	3001      	adds	r0, #1
 802422a:	d14c      	bne.n	80242c6 <_printf_i+0x1fe>
 802422c:	f04f 30ff 	mov.w	r0, #4294967295
 8024230:	b004      	add	sp, #16
 8024232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024236:	4835      	ldr	r0, [pc, #212]	; (802430c <_printf_i+0x244>)
 8024238:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 802423c:	6829      	ldr	r1, [r5, #0]
 802423e:	6823      	ldr	r3, [r4, #0]
 8024240:	f851 6b04 	ldr.w	r6, [r1], #4
 8024244:	6029      	str	r1, [r5, #0]
 8024246:	061d      	lsls	r5, r3, #24
 8024248:	d514      	bpl.n	8024274 <_printf_i+0x1ac>
 802424a:	07df      	lsls	r7, r3, #31
 802424c:	bf44      	itt	mi
 802424e:	f043 0320 	orrmi.w	r3, r3, #32
 8024252:	6023      	strmi	r3, [r4, #0]
 8024254:	b91e      	cbnz	r6, 802425e <_printf_i+0x196>
 8024256:	6823      	ldr	r3, [r4, #0]
 8024258:	f023 0320 	bic.w	r3, r3, #32
 802425c:	6023      	str	r3, [r4, #0]
 802425e:	2310      	movs	r3, #16
 8024260:	e7b0      	b.n	80241c4 <_printf_i+0xfc>
 8024262:	6823      	ldr	r3, [r4, #0]
 8024264:	f043 0320 	orr.w	r3, r3, #32
 8024268:	6023      	str	r3, [r4, #0]
 802426a:	2378      	movs	r3, #120	; 0x78
 802426c:	4828      	ldr	r0, [pc, #160]	; (8024310 <_printf_i+0x248>)
 802426e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8024272:	e7e3      	b.n	802423c <_printf_i+0x174>
 8024274:	0659      	lsls	r1, r3, #25
 8024276:	bf48      	it	mi
 8024278:	b2b6      	uxthmi	r6, r6
 802427a:	e7e6      	b.n	802424a <_printf_i+0x182>
 802427c:	4615      	mov	r5, r2
 802427e:	e7bb      	b.n	80241f8 <_printf_i+0x130>
 8024280:	682b      	ldr	r3, [r5, #0]
 8024282:	6826      	ldr	r6, [r4, #0]
 8024284:	6961      	ldr	r1, [r4, #20]
 8024286:	1d18      	adds	r0, r3, #4
 8024288:	6028      	str	r0, [r5, #0]
 802428a:	0635      	lsls	r5, r6, #24
 802428c:	681b      	ldr	r3, [r3, #0]
 802428e:	d501      	bpl.n	8024294 <_printf_i+0x1cc>
 8024290:	6019      	str	r1, [r3, #0]
 8024292:	e002      	b.n	802429a <_printf_i+0x1d2>
 8024294:	0670      	lsls	r0, r6, #25
 8024296:	d5fb      	bpl.n	8024290 <_printf_i+0x1c8>
 8024298:	8019      	strh	r1, [r3, #0]
 802429a:	2300      	movs	r3, #0
 802429c:	6123      	str	r3, [r4, #16]
 802429e:	4615      	mov	r5, r2
 80242a0:	e7ba      	b.n	8024218 <_printf_i+0x150>
 80242a2:	682b      	ldr	r3, [r5, #0]
 80242a4:	1d1a      	adds	r2, r3, #4
 80242a6:	602a      	str	r2, [r5, #0]
 80242a8:	681d      	ldr	r5, [r3, #0]
 80242aa:	6862      	ldr	r2, [r4, #4]
 80242ac:	2100      	movs	r1, #0
 80242ae:	4628      	mov	r0, r5
 80242b0:	f7db ff8e 	bl	80001d0 <memchr>
 80242b4:	b108      	cbz	r0, 80242ba <_printf_i+0x1f2>
 80242b6:	1b40      	subs	r0, r0, r5
 80242b8:	6060      	str	r0, [r4, #4]
 80242ba:	6863      	ldr	r3, [r4, #4]
 80242bc:	6123      	str	r3, [r4, #16]
 80242be:	2300      	movs	r3, #0
 80242c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80242c4:	e7a8      	b.n	8024218 <_printf_i+0x150>
 80242c6:	6923      	ldr	r3, [r4, #16]
 80242c8:	462a      	mov	r2, r5
 80242ca:	4649      	mov	r1, r9
 80242cc:	4640      	mov	r0, r8
 80242ce:	47d0      	blx	sl
 80242d0:	3001      	adds	r0, #1
 80242d2:	d0ab      	beq.n	802422c <_printf_i+0x164>
 80242d4:	6823      	ldr	r3, [r4, #0]
 80242d6:	079b      	lsls	r3, r3, #30
 80242d8:	d413      	bmi.n	8024302 <_printf_i+0x23a>
 80242da:	68e0      	ldr	r0, [r4, #12]
 80242dc:	9b03      	ldr	r3, [sp, #12]
 80242de:	4298      	cmp	r0, r3
 80242e0:	bfb8      	it	lt
 80242e2:	4618      	movlt	r0, r3
 80242e4:	e7a4      	b.n	8024230 <_printf_i+0x168>
 80242e6:	2301      	movs	r3, #1
 80242e8:	4632      	mov	r2, r6
 80242ea:	4649      	mov	r1, r9
 80242ec:	4640      	mov	r0, r8
 80242ee:	47d0      	blx	sl
 80242f0:	3001      	adds	r0, #1
 80242f2:	d09b      	beq.n	802422c <_printf_i+0x164>
 80242f4:	3501      	adds	r5, #1
 80242f6:	68e3      	ldr	r3, [r4, #12]
 80242f8:	9903      	ldr	r1, [sp, #12]
 80242fa:	1a5b      	subs	r3, r3, r1
 80242fc:	42ab      	cmp	r3, r5
 80242fe:	dcf2      	bgt.n	80242e6 <_printf_i+0x21e>
 8024300:	e7eb      	b.n	80242da <_printf_i+0x212>
 8024302:	2500      	movs	r5, #0
 8024304:	f104 0619 	add.w	r6, r4, #25
 8024308:	e7f5      	b.n	80242f6 <_printf_i+0x22e>
 802430a:	bf00      	nop
 802430c:	08029fd3 	.word	0x08029fd3
 8024310:	08029fe4 	.word	0x08029fe4

08024314 <_sbrk_r>:
 8024314:	b538      	push	{r3, r4, r5, lr}
 8024316:	4d06      	ldr	r5, [pc, #24]	; (8024330 <_sbrk_r+0x1c>)
 8024318:	2300      	movs	r3, #0
 802431a:	4604      	mov	r4, r0
 802431c:	4608      	mov	r0, r1
 802431e:	602b      	str	r3, [r5, #0]
 8024320:	f7e4 ff7a 	bl	8009218 <_sbrk>
 8024324:	1c43      	adds	r3, r0, #1
 8024326:	d102      	bne.n	802432e <_sbrk_r+0x1a>
 8024328:	682b      	ldr	r3, [r5, #0]
 802432a:	b103      	cbz	r3, 802432e <_sbrk_r+0x1a>
 802432c:	6023      	str	r3, [r4, #0]
 802432e:	bd38      	pop	{r3, r4, r5, pc}
 8024330:	20003ff8 	.word	0x20003ff8

08024334 <_raise_r>:
 8024334:	291f      	cmp	r1, #31
 8024336:	b538      	push	{r3, r4, r5, lr}
 8024338:	4604      	mov	r4, r0
 802433a:	460d      	mov	r5, r1
 802433c:	d904      	bls.n	8024348 <_raise_r+0x14>
 802433e:	2316      	movs	r3, #22
 8024340:	6003      	str	r3, [r0, #0]
 8024342:	f04f 30ff 	mov.w	r0, #4294967295
 8024346:	bd38      	pop	{r3, r4, r5, pc}
 8024348:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802434a:	b112      	cbz	r2, 8024352 <_raise_r+0x1e>
 802434c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8024350:	b94b      	cbnz	r3, 8024366 <_raise_r+0x32>
 8024352:	4620      	mov	r0, r4
 8024354:	f000 f830 	bl	80243b8 <_getpid_r>
 8024358:	462a      	mov	r2, r5
 802435a:	4601      	mov	r1, r0
 802435c:	4620      	mov	r0, r4
 802435e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8024362:	f000 b817 	b.w	8024394 <_kill_r>
 8024366:	2b01      	cmp	r3, #1
 8024368:	d00a      	beq.n	8024380 <_raise_r+0x4c>
 802436a:	1c59      	adds	r1, r3, #1
 802436c:	d103      	bne.n	8024376 <_raise_r+0x42>
 802436e:	2316      	movs	r3, #22
 8024370:	6003      	str	r3, [r0, #0]
 8024372:	2001      	movs	r0, #1
 8024374:	e7e7      	b.n	8024346 <_raise_r+0x12>
 8024376:	2400      	movs	r4, #0
 8024378:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802437c:	4628      	mov	r0, r5
 802437e:	4798      	blx	r3
 8024380:	2000      	movs	r0, #0
 8024382:	e7e0      	b.n	8024346 <_raise_r+0x12>

08024384 <raise>:
 8024384:	4b02      	ldr	r3, [pc, #8]	; (8024390 <raise+0xc>)
 8024386:	4601      	mov	r1, r0
 8024388:	6818      	ldr	r0, [r3, #0]
 802438a:	f7ff bfd3 	b.w	8024334 <_raise_r>
 802438e:	bf00      	nop
 8024390:	20000280 	.word	0x20000280

08024394 <_kill_r>:
 8024394:	b538      	push	{r3, r4, r5, lr}
 8024396:	4d07      	ldr	r5, [pc, #28]	; (80243b4 <_kill_r+0x20>)
 8024398:	2300      	movs	r3, #0
 802439a:	4604      	mov	r4, r0
 802439c:	4608      	mov	r0, r1
 802439e:	4611      	mov	r1, r2
 80243a0:	602b      	str	r3, [r5, #0]
 80243a2:	f7e4 feb1 	bl	8009108 <_kill>
 80243a6:	1c43      	adds	r3, r0, #1
 80243a8:	d102      	bne.n	80243b0 <_kill_r+0x1c>
 80243aa:	682b      	ldr	r3, [r5, #0]
 80243ac:	b103      	cbz	r3, 80243b0 <_kill_r+0x1c>
 80243ae:	6023      	str	r3, [r4, #0]
 80243b0:	bd38      	pop	{r3, r4, r5, pc}
 80243b2:	bf00      	nop
 80243b4:	20003ff8 	.word	0x20003ff8

080243b8 <_getpid_r>:
 80243b8:	f7e4 be9e 	b.w	80090f8 <_getpid>

080243bc <strncmp>:
 80243bc:	b510      	push	{r4, lr}
 80243be:	b17a      	cbz	r2, 80243e0 <strncmp+0x24>
 80243c0:	4603      	mov	r3, r0
 80243c2:	3901      	subs	r1, #1
 80243c4:	1884      	adds	r4, r0, r2
 80243c6:	f813 0b01 	ldrb.w	r0, [r3], #1
 80243ca:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80243ce:	4290      	cmp	r0, r2
 80243d0:	d101      	bne.n	80243d6 <strncmp+0x1a>
 80243d2:	42a3      	cmp	r3, r4
 80243d4:	d101      	bne.n	80243da <strncmp+0x1e>
 80243d6:	1a80      	subs	r0, r0, r2
 80243d8:	bd10      	pop	{r4, pc}
 80243da:	2800      	cmp	r0, #0
 80243dc:	d1f3      	bne.n	80243c6 <strncmp+0xa>
 80243de:	e7fa      	b.n	80243d6 <strncmp+0x1a>
 80243e0:	4610      	mov	r0, r2
 80243e2:	e7f9      	b.n	80243d8 <strncmp+0x1c>

080243e4 <sulp>:
 80243e4:	b570      	push	{r4, r5, r6, lr}
 80243e6:	4604      	mov	r4, r0
 80243e8:	460d      	mov	r5, r1
 80243ea:	ec45 4b10 	vmov	d0, r4, r5
 80243ee:	4616      	mov	r6, r2
 80243f0:	f002 fea4 	bl	802713c <__ulp>
 80243f4:	ec51 0b10 	vmov	r0, r1, d0
 80243f8:	b17e      	cbz	r6, 802441a <sulp+0x36>
 80243fa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80243fe:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8024402:	2b00      	cmp	r3, #0
 8024404:	dd09      	ble.n	802441a <sulp+0x36>
 8024406:	051b      	lsls	r3, r3, #20
 8024408:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 802440c:	2400      	movs	r4, #0
 802440e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8024412:	4622      	mov	r2, r4
 8024414:	462b      	mov	r3, r5
 8024416:	f7dc f8f9 	bl	800060c <__aeabi_dmul>
 802441a:	bd70      	pop	{r4, r5, r6, pc}
 802441c:	0000      	movs	r0, r0
	...

08024420 <_strtod_l>:
 8024420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024424:	ed2d 8b02 	vpush	{d8}
 8024428:	b09d      	sub	sp, #116	; 0x74
 802442a:	461f      	mov	r7, r3
 802442c:	2300      	movs	r3, #0
 802442e:	9318      	str	r3, [sp, #96]	; 0x60
 8024430:	4ba2      	ldr	r3, [pc, #648]	; (80246bc <_strtod_l+0x29c>)
 8024432:	9213      	str	r2, [sp, #76]	; 0x4c
 8024434:	681b      	ldr	r3, [r3, #0]
 8024436:	9305      	str	r3, [sp, #20]
 8024438:	4604      	mov	r4, r0
 802443a:	4618      	mov	r0, r3
 802443c:	4688      	mov	r8, r1
 802443e:	f7db ff21 	bl	8000284 <strlen>
 8024442:	f04f 0a00 	mov.w	sl, #0
 8024446:	4605      	mov	r5, r0
 8024448:	f04f 0b00 	mov.w	fp, #0
 802444c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8024450:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8024452:	781a      	ldrb	r2, [r3, #0]
 8024454:	2a2b      	cmp	r2, #43	; 0x2b
 8024456:	d04e      	beq.n	80244f6 <_strtod_l+0xd6>
 8024458:	d83b      	bhi.n	80244d2 <_strtod_l+0xb2>
 802445a:	2a0d      	cmp	r2, #13
 802445c:	d834      	bhi.n	80244c8 <_strtod_l+0xa8>
 802445e:	2a08      	cmp	r2, #8
 8024460:	d834      	bhi.n	80244cc <_strtod_l+0xac>
 8024462:	2a00      	cmp	r2, #0
 8024464:	d03e      	beq.n	80244e4 <_strtod_l+0xc4>
 8024466:	2300      	movs	r3, #0
 8024468:	930a      	str	r3, [sp, #40]	; 0x28
 802446a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 802446c:	7833      	ldrb	r3, [r6, #0]
 802446e:	2b30      	cmp	r3, #48	; 0x30
 8024470:	f040 80b0 	bne.w	80245d4 <_strtod_l+0x1b4>
 8024474:	7873      	ldrb	r3, [r6, #1]
 8024476:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 802447a:	2b58      	cmp	r3, #88	; 0x58
 802447c:	d168      	bne.n	8024550 <_strtod_l+0x130>
 802447e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024480:	9301      	str	r3, [sp, #4]
 8024482:	ab18      	add	r3, sp, #96	; 0x60
 8024484:	9702      	str	r7, [sp, #8]
 8024486:	9300      	str	r3, [sp, #0]
 8024488:	4a8d      	ldr	r2, [pc, #564]	; (80246c0 <_strtod_l+0x2a0>)
 802448a:	ab19      	add	r3, sp, #100	; 0x64
 802448c:	a917      	add	r1, sp, #92	; 0x5c
 802448e:	4620      	mov	r0, r4
 8024490:	f001 ff52 	bl	8026338 <__gethex>
 8024494:	f010 0707 	ands.w	r7, r0, #7
 8024498:	4605      	mov	r5, r0
 802449a:	d005      	beq.n	80244a8 <_strtod_l+0x88>
 802449c:	2f06      	cmp	r7, #6
 802449e:	d12c      	bne.n	80244fa <_strtod_l+0xda>
 80244a0:	3601      	adds	r6, #1
 80244a2:	2300      	movs	r3, #0
 80244a4:	9617      	str	r6, [sp, #92]	; 0x5c
 80244a6:	930a      	str	r3, [sp, #40]	; 0x28
 80244a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80244aa:	2b00      	cmp	r3, #0
 80244ac:	f040 8590 	bne.w	8024fd0 <_strtod_l+0xbb0>
 80244b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80244b2:	b1eb      	cbz	r3, 80244f0 <_strtod_l+0xd0>
 80244b4:	4652      	mov	r2, sl
 80244b6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80244ba:	ec43 2b10 	vmov	d0, r2, r3
 80244be:	b01d      	add	sp, #116	; 0x74
 80244c0:	ecbd 8b02 	vpop	{d8}
 80244c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80244c8:	2a20      	cmp	r2, #32
 80244ca:	d1cc      	bne.n	8024466 <_strtod_l+0x46>
 80244cc:	3301      	adds	r3, #1
 80244ce:	9317      	str	r3, [sp, #92]	; 0x5c
 80244d0:	e7be      	b.n	8024450 <_strtod_l+0x30>
 80244d2:	2a2d      	cmp	r2, #45	; 0x2d
 80244d4:	d1c7      	bne.n	8024466 <_strtod_l+0x46>
 80244d6:	2201      	movs	r2, #1
 80244d8:	920a      	str	r2, [sp, #40]	; 0x28
 80244da:	1c5a      	adds	r2, r3, #1
 80244dc:	9217      	str	r2, [sp, #92]	; 0x5c
 80244de:	785b      	ldrb	r3, [r3, #1]
 80244e0:	2b00      	cmp	r3, #0
 80244e2:	d1c2      	bne.n	802446a <_strtod_l+0x4a>
 80244e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80244e6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80244ea:	2b00      	cmp	r3, #0
 80244ec:	f040 856e 	bne.w	8024fcc <_strtod_l+0xbac>
 80244f0:	4652      	mov	r2, sl
 80244f2:	465b      	mov	r3, fp
 80244f4:	e7e1      	b.n	80244ba <_strtod_l+0x9a>
 80244f6:	2200      	movs	r2, #0
 80244f8:	e7ee      	b.n	80244d8 <_strtod_l+0xb8>
 80244fa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80244fc:	b13a      	cbz	r2, 802450e <_strtod_l+0xee>
 80244fe:	2135      	movs	r1, #53	; 0x35
 8024500:	a81a      	add	r0, sp, #104	; 0x68
 8024502:	f002 ff26 	bl	8027352 <__copybits>
 8024506:	9918      	ldr	r1, [sp, #96]	; 0x60
 8024508:	4620      	mov	r0, r4
 802450a:	f002 fae5 	bl	8026ad8 <_Bfree>
 802450e:	3f01      	subs	r7, #1
 8024510:	2f04      	cmp	r7, #4
 8024512:	d806      	bhi.n	8024522 <_strtod_l+0x102>
 8024514:	e8df f007 	tbb	[pc, r7]
 8024518:	1714030a 	.word	0x1714030a
 802451c:	0a          	.byte	0x0a
 802451d:	00          	.byte	0x00
 802451e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8024522:	0728      	lsls	r0, r5, #28
 8024524:	d5c0      	bpl.n	80244a8 <_strtod_l+0x88>
 8024526:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 802452a:	e7bd      	b.n	80244a8 <_strtod_l+0x88>
 802452c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8024530:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8024532:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8024536:	f202 4233 	addw	r2, r2, #1075	; 0x433
 802453a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 802453e:	e7f0      	b.n	8024522 <_strtod_l+0x102>
 8024540:	f8df b180 	ldr.w	fp, [pc, #384]	; 80246c4 <_strtod_l+0x2a4>
 8024544:	e7ed      	b.n	8024522 <_strtod_l+0x102>
 8024546:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 802454a:	f04f 3aff 	mov.w	sl, #4294967295
 802454e:	e7e8      	b.n	8024522 <_strtod_l+0x102>
 8024550:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8024552:	1c5a      	adds	r2, r3, #1
 8024554:	9217      	str	r2, [sp, #92]	; 0x5c
 8024556:	785b      	ldrb	r3, [r3, #1]
 8024558:	2b30      	cmp	r3, #48	; 0x30
 802455a:	d0f9      	beq.n	8024550 <_strtod_l+0x130>
 802455c:	2b00      	cmp	r3, #0
 802455e:	d0a3      	beq.n	80244a8 <_strtod_l+0x88>
 8024560:	2301      	movs	r3, #1
 8024562:	f04f 0900 	mov.w	r9, #0
 8024566:	9304      	str	r3, [sp, #16]
 8024568:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802456a:	9308      	str	r3, [sp, #32]
 802456c:	f8cd 901c 	str.w	r9, [sp, #28]
 8024570:	464f      	mov	r7, r9
 8024572:	220a      	movs	r2, #10
 8024574:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8024576:	7806      	ldrb	r6, [r0, #0]
 8024578:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 802457c:	b2d9      	uxtb	r1, r3
 802457e:	2909      	cmp	r1, #9
 8024580:	d92a      	bls.n	80245d8 <_strtod_l+0x1b8>
 8024582:	9905      	ldr	r1, [sp, #20]
 8024584:	462a      	mov	r2, r5
 8024586:	f7ff ff19 	bl	80243bc <strncmp>
 802458a:	b398      	cbz	r0, 80245f4 <_strtod_l+0x1d4>
 802458c:	2000      	movs	r0, #0
 802458e:	4632      	mov	r2, r6
 8024590:	463d      	mov	r5, r7
 8024592:	9005      	str	r0, [sp, #20]
 8024594:	4603      	mov	r3, r0
 8024596:	2a65      	cmp	r2, #101	; 0x65
 8024598:	d001      	beq.n	802459e <_strtod_l+0x17e>
 802459a:	2a45      	cmp	r2, #69	; 0x45
 802459c:	d118      	bne.n	80245d0 <_strtod_l+0x1b0>
 802459e:	b91d      	cbnz	r5, 80245a8 <_strtod_l+0x188>
 80245a0:	9a04      	ldr	r2, [sp, #16]
 80245a2:	4302      	orrs	r2, r0
 80245a4:	d09e      	beq.n	80244e4 <_strtod_l+0xc4>
 80245a6:	2500      	movs	r5, #0
 80245a8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80245ac:	f108 0201 	add.w	r2, r8, #1
 80245b0:	9217      	str	r2, [sp, #92]	; 0x5c
 80245b2:	f898 2001 	ldrb.w	r2, [r8, #1]
 80245b6:	2a2b      	cmp	r2, #43	; 0x2b
 80245b8:	d075      	beq.n	80246a6 <_strtod_l+0x286>
 80245ba:	2a2d      	cmp	r2, #45	; 0x2d
 80245bc:	d07b      	beq.n	80246b6 <_strtod_l+0x296>
 80245be:	f04f 0c00 	mov.w	ip, #0
 80245c2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80245c6:	2909      	cmp	r1, #9
 80245c8:	f240 8082 	bls.w	80246d0 <_strtod_l+0x2b0>
 80245cc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80245d0:	2600      	movs	r6, #0
 80245d2:	e09d      	b.n	8024710 <_strtod_l+0x2f0>
 80245d4:	2300      	movs	r3, #0
 80245d6:	e7c4      	b.n	8024562 <_strtod_l+0x142>
 80245d8:	2f08      	cmp	r7, #8
 80245da:	bfd8      	it	le
 80245dc:	9907      	ldrle	r1, [sp, #28]
 80245de:	f100 0001 	add.w	r0, r0, #1
 80245e2:	bfda      	itte	le
 80245e4:	fb02 3301 	mlale	r3, r2, r1, r3
 80245e8:	9307      	strle	r3, [sp, #28]
 80245ea:	fb02 3909 	mlagt	r9, r2, r9, r3
 80245ee:	3701      	adds	r7, #1
 80245f0:	9017      	str	r0, [sp, #92]	; 0x5c
 80245f2:	e7bf      	b.n	8024574 <_strtod_l+0x154>
 80245f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80245f6:	195a      	adds	r2, r3, r5
 80245f8:	9217      	str	r2, [sp, #92]	; 0x5c
 80245fa:	5d5a      	ldrb	r2, [r3, r5]
 80245fc:	2f00      	cmp	r7, #0
 80245fe:	d037      	beq.n	8024670 <_strtod_l+0x250>
 8024600:	9005      	str	r0, [sp, #20]
 8024602:	463d      	mov	r5, r7
 8024604:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8024608:	2b09      	cmp	r3, #9
 802460a:	d912      	bls.n	8024632 <_strtod_l+0x212>
 802460c:	2301      	movs	r3, #1
 802460e:	e7c2      	b.n	8024596 <_strtod_l+0x176>
 8024610:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8024612:	1c5a      	adds	r2, r3, #1
 8024614:	9217      	str	r2, [sp, #92]	; 0x5c
 8024616:	785a      	ldrb	r2, [r3, #1]
 8024618:	3001      	adds	r0, #1
 802461a:	2a30      	cmp	r2, #48	; 0x30
 802461c:	d0f8      	beq.n	8024610 <_strtod_l+0x1f0>
 802461e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8024622:	2b08      	cmp	r3, #8
 8024624:	f200 84d9 	bhi.w	8024fda <_strtod_l+0xbba>
 8024628:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802462a:	9005      	str	r0, [sp, #20]
 802462c:	2000      	movs	r0, #0
 802462e:	9308      	str	r3, [sp, #32]
 8024630:	4605      	mov	r5, r0
 8024632:	3a30      	subs	r2, #48	; 0x30
 8024634:	f100 0301 	add.w	r3, r0, #1
 8024638:	d014      	beq.n	8024664 <_strtod_l+0x244>
 802463a:	9905      	ldr	r1, [sp, #20]
 802463c:	4419      	add	r1, r3
 802463e:	9105      	str	r1, [sp, #20]
 8024640:	462b      	mov	r3, r5
 8024642:	eb00 0e05 	add.w	lr, r0, r5
 8024646:	210a      	movs	r1, #10
 8024648:	4573      	cmp	r3, lr
 802464a:	d113      	bne.n	8024674 <_strtod_l+0x254>
 802464c:	182b      	adds	r3, r5, r0
 802464e:	2b08      	cmp	r3, #8
 8024650:	f105 0501 	add.w	r5, r5, #1
 8024654:	4405      	add	r5, r0
 8024656:	dc1c      	bgt.n	8024692 <_strtod_l+0x272>
 8024658:	9907      	ldr	r1, [sp, #28]
 802465a:	230a      	movs	r3, #10
 802465c:	fb03 2301 	mla	r3, r3, r1, r2
 8024660:	9307      	str	r3, [sp, #28]
 8024662:	2300      	movs	r3, #0
 8024664:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8024666:	1c51      	adds	r1, r2, #1
 8024668:	9117      	str	r1, [sp, #92]	; 0x5c
 802466a:	7852      	ldrb	r2, [r2, #1]
 802466c:	4618      	mov	r0, r3
 802466e:	e7c9      	b.n	8024604 <_strtod_l+0x1e4>
 8024670:	4638      	mov	r0, r7
 8024672:	e7d2      	b.n	802461a <_strtod_l+0x1fa>
 8024674:	2b08      	cmp	r3, #8
 8024676:	dc04      	bgt.n	8024682 <_strtod_l+0x262>
 8024678:	9e07      	ldr	r6, [sp, #28]
 802467a:	434e      	muls	r6, r1
 802467c:	9607      	str	r6, [sp, #28]
 802467e:	3301      	adds	r3, #1
 8024680:	e7e2      	b.n	8024648 <_strtod_l+0x228>
 8024682:	f103 0c01 	add.w	ip, r3, #1
 8024686:	f1bc 0f10 	cmp.w	ip, #16
 802468a:	bfd8      	it	le
 802468c:	fb01 f909 	mulle.w	r9, r1, r9
 8024690:	e7f5      	b.n	802467e <_strtod_l+0x25e>
 8024692:	2d10      	cmp	r5, #16
 8024694:	bfdc      	itt	le
 8024696:	230a      	movle	r3, #10
 8024698:	fb03 2909 	mlale	r9, r3, r9, r2
 802469c:	e7e1      	b.n	8024662 <_strtod_l+0x242>
 802469e:	2300      	movs	r3, #0
 80246a0:	9305      	str	r3, [sp, #20]
 80246a2:	2301      	movs	r3, #1
 80246a4:	e77c      	b.n	80245a0 <_strtod_l+0x180>
 80246a6:	f04f 0c00 	mov.w	ip, #0
 80246aa:	f108 0202 	add.w	r2, r8, #2
 80246ae:	9217      	str	r2, [sp, #92]	; 0x5c
 80246b0:	f898 2002 	ldrb.w	r2, [r8, #2]
 80246b4:	e785      	b.n	80245c2 <_strtod_l+0x1a2>
 80246b6:	f04f 0c01 	mov.w	ip, #1
 80246ba:	e7f6      	b.n	80246aa <_strtod_l+0x28a>
 80246bc:	0802a2a4 	.word	0x0802a2a4
 80246c0:	08029ff8 	.word	0x08029ff8
 80246c4:	7ff00000 	.word	0x7ff00000
 80246c8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80246ca:	1c51      	adds	r1, r2, #1
 80246cc:	9117      	str	r1, [sp, #92]	; 0x5c
 80246ce:	7852      	ldrb	r2, [r2, #1]
 80246d0:	2a30      	cmp	r2, #48	; 0x30
 80246d2:	d0f9      	beq.n	80246c8 <_strtod_l+0x2a8>
 80246d4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80246d8:	2908      	cmp	r1, #8
 80246da:	f63f af79 	bhi.w	80245d0 <_strtod_l+0x1b0>
 80246de:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80246e2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80246e4:	9206      	str	r2, [sp, #24]
 80246e6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80246e8:	1c51      	adds	r1, r2, #1
 80246ea:	9117      	str	r1, [sp, #92]	; 0x5c
 80246ec:	7852      	ldrb	r2, [r2, #1]
 80246ee:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80246f2:	2e09      	cmp	r6, #9
 80246f4:	d937      	bls.n	8024766 <_strtod_l+0x346>
 80246f6:	9e06      	ldr	r6, [sp, #24]
 80246f8:	1b89      	subs	r1, r1, r6
 80246fa:	2908      	cmp	r1, #8
 80246fc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8024700:	dc02      	bgt.n	8024708 <_strtod_l+0x2e8>
 8024702:	4576      	cmp	r6, lr
 8024704:	bfa8      	it	ge
 8024706:	4676      	movge	r6, lr
 8024708:	f1bc 0f00 	cmp.w	ip, #0
 802470c:	d000      	beq.n	8024710 <_strtod_l+0x2f0>
 802470e:	4276      	negs	r6, r6
 8024710:	2d00      	cmp	r5, #0
 8024712:	d14d      	bne.n	80247b0 <_strtod_l+0x390>
 8024714:	9904      	ldr	r1, [sp, #16]
 8024716:	4301      	orrs	r1, r0
 8024718:	f47f aec6 	bne.w	80244a8 <_strtod_l+0x88>
 802471c:	2b00      	cmp	r3, #0
 802471e:	f47f aee1 	bne.w	80244e4 <_strtod_l+0xc4>
 8024722:	2a69      	cmp	r2, #105	; 0x69
 8024724:	d027      	beq.n	8024776 <_strtod_l+0x356>
 8024726:	dc24      	bgt.n	8024772 <_strtod_l+0x352>
 8024728:	2a49      	cmp	r2, #73	; 0x49
 802472a:	d024      	beq.n	8024776 <_strtod_l+0x356>
 802472c:	2a4e      	cmp	r2, #78	; 0x4e
 802472e:	f47f aed9 	bne.w	80244e4 <_strtod_l+0xc4>
 8024732:	499f      	ldr	r1, [pc, #636]	; (80249b0 <_strtod_l+0x590>)
 8024734:	a817      	add	r0, sp, #92	; 0x5c
 8024736:	f002 f857 	bl	80267e8 <__match>
 802473a:	2800      	cmp	r0, #0
 802473c:	f43f aed2 	beq.w	80244e4 <_strtod_l+0xc4>
 8024740:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8024742:	781b      	ldrb	r3, [r3, #0]
 8024744:	2b28      	cmp	r3, #40	; 0x28
 8024746:	d12d      	bne.n	80247a4 <_strtod_l+0x384>
 8024748:	499a      	ldr	r1, [pc, #616]	; (80249b4 <_strtod_l+0x594>)
 802474a:	aa1a      	add	r2, sp, #104	; 0x68
 802474c:	a817      	add	r0, sp, #92	; 0x5c
 802474e:	f002 f85f 	bl	8026810 <__hexnan>
 8024752:	2805      	cmp	r0, #5
 8024754:	d126      	bne.n	80247a4 <_strtod_l+0x384>
 8024756:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8024758:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 802475c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8024760:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8024764:	e6a0      	b.n	80244a8 <_strtod_l+0x88>
 8024766:	210a      	movs	r1, #10
 8024768:	fb01 2e0e 	mla	lr, r1, lr, r2
 802476c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8024770:	e7b9      	b.n	80246e6 <_strtod_l+0x2c6>
 8024772:	2a6e      	cmp	r2, #110	; 0x6e
 8024774:	e7db      	b.n	802472e <_strtod_l+0x30e>
 8024776:	4990      	ldr	r1, [pc, #576]	; (80249b8 <_strtod_l+0x598>)
 8024778:	a817      	add	r0, sp, #92	; 0x5c
 802477a:	f002 f835 	bl	80267e8 <__match>
 802477e:	2800      	cmp	r0, #0
 8024780:	f43f aeb0 	beq.w	80244e4 <_strtod_l+0xc4>
 8024784:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8024786:	498d      	ldr	r1, [pc, #564]	; (80249bc <_strtod_l+0x59c>)
 8024788:	3b01      	subs	r3, #1
 802478a:	a817      	add	r0, sp, #92	; 0x5c
 802478c:	9317      	str	r3, [sp, #92]	; 0x5c
 802478e:	f002 f82b 	bl	80267e8 <__match>
 8024792:	b910      	cbnz	r0, 802479a <_strtod_l+0x37a>
 8024794:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8024796:	3301      	adds	r3, #1
 8024798:	9317      	str	r3, [sp, #92]	; 0x5c
 802479a:	f8df b230 	ldr.w	fp, [pc, #560]	; 80249cc <_strtod_l+0x5ac>
 802479e:	f04f 0a00 	mov.w	sl, #0
 80247a2:	e681      	b.n	80244a8 <_strtod_l+0x88>
 80247a4:	4886      	ldr	r0, [pc, #536]	; (80249c0 <_strtod_l+0x5a0>)
 80247a6:	f7fe fda7 	bl	80232f8 <nan>
 80247aa:	ec5b ab10 	vmov	sl, fp, d0
 80247ae:	e67b      	b.n	80244a8 <_strtod_l+0x88>
 80247b0:	9b05      	ldr	r3, [sp, #20]
 80247b2:	9807      	ldr	r0, [sp, #28]
 80247b4:	1af3      	subs	r3, r6, r3
 80247b6:	2f00      	cmp	r7, #0
 80247b8:	bf08      	it	eq
 80247ba:	462f      	moveq	r7, r5
 80247bc:	2d10      	cmp	r5, #16
 80247be:	9306      	str	r3, [sp, #24]
 80247c0:	46a8      	mov	r8, r5
 80247c2:	bfa8      	it	ge
 80247c4:	f04f 0810 	movge.w	r8, #16
 80247c8:	f7db fea6 	bl	8000518 <__aeabi_ui2d>
 80247cc:	2d09      	cmp	r5, #9
 80247ce:	4682      	mov	sl, r0
 80247d0:	468b      	mov	fp, r1
 80247d2:	dd13      	ble.n	80247fc <_strtod_l+0x3dc>
 80247d4:	4b7b      	ldr	r3, [pc, #492]	; (80249c4 <_strtod_l+0x5a4>)
 80247d6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80247da:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80247de:	f7db ff15 	bl	800060c <__aeabi_dmul>
 80247e2:	4682      	mov	sl, r0
 80247e4:	4648      	mov	r0, r9
 80247e6:	468b      	mov	fp, r1
 80247e8:	f7db fe96 	bl	8000518 <__aeabi_ui2d>
 80247ec:	4602      	mov	r2, r0
 80247ee:	460b      	mov	r3, r1
 80247f0:	4650      	mov	r0, sl
 80247f2:	4659      	mov	r1, fp
 80247f4:	f7db fd54 	bl	80002a0 <__adddf3>
 80247f8:	4682      	mov	sl, r0
 80247fa:	468b      	mov	fp, r1
 80247fc:	2d0f      	cmp	r5, #15
 80247fe:	dc38      	bgt.n	8024872 <_strtod_l+0x452>
 8024800:	9b06      	ldr	r3, [sp, #24]
 8024802:	2b00      	cmp	r3, #0
 8024804:	f43f ae50 	beq.w	80244a8 <_strtod_l+0x88>
 8024808:	dd24      	ble.n	8024854 <_strtod_l+0x434>
 802480a:	2b16      	cmp	r3, #22
 802480c:	dc0b      	bgt.n	8024826 <_strtod_l+0x406>
 802480e:	496d      	ldr	r1, [pc, #436]	; (80249c4 <_strtod_l+0x5a4>)
 8024810:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8024814:	e9d1 0100 	ldrd	r0, r1, [r1]
 8024818:	4652      	mov	r2, sl
 802481a:	465b      	mov	r3, fp
 802481c:	f7db fef6 	bl	800060c <__aeabi_dmul>
 8024820:	4682      	mov	sl, r0
 8024822:	468b      	mov	fp, r1
 8024824:	e640      	b.n	80244a8 <_strtod_l+0x88>
 8024826:	9a06      	ldr	r2, [sp, #24]
 8024828:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 802482c:	4293      	cmp	r3, r2
 802482e:	db20      	blt.n	8024872 <_strtod_l+0x452>
 8024830:	4c64      	ldr	r4, [pc, #400]	; (80249c4 <_strtod_l+0x5a4>)
 8024832:	f1c5 050f 	rsb	r5, r5, #15
 8024836:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 802483a:	4652      	mov	r2, sl
 802483c:	465b      	mov	r3, fp
 802483e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8024842:	f7db fee3 	bl	800060c <__aeabi_dmul>
 8024846:	9b06      	ldr	r3, [sp, #24]
 8024848:	1b5d      	subs	r5, r3, r5
 802484a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 802484e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8024852:	e7e3      	b.n	802481c <_strtod_l+0x3fc>
 8024854:	9b06      	ldr	r3, [sp, #24]
 8024856:	3316      	adds	r3, #22
 8024858:	db0b      	blt.n	8024872 <_strtod_l+0x452>
 802485a:	9b05      	ldr	r3, [sp, #20]
 802485c:	1b9e      	subs	r6, r3, r6
 802485e:	4b59      	ldr	r3, [pc, #356]	; (80249c4 <_strtod_l+0x5a4>)
 8024860:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8024864:	e9d6 2300 	ldrd	r2, r3, [r6]
 8024868:	4650      	mov	r0, sl
 802486a:	4659      	mov	r1, fp
 802486c:	f7db fff8 	bl	8000860 <__aeabi_ddiv>
 8024870:	e7d6      	b.n	8024820 <_strtod_l+0x400>
 8024872:	9b06      	ldr	r3, [sp, #24]
 8024874:	eba5 0808 	sub.w	r8, r5, r8
 8024878:	4498      	add	r8, r3
 802487a:	f1b8 0f00 	cmp.w	r8, #0
 802487e:	dd74      	ble.n	802496a <_strtod_l+0x54a>
 8024880:	f018 030f 	ands.w	r3, r8, #15
 8024884:	d00a      	beq.n	802489c <_strtod_l+0x47c>
 8024886:	494f      	ldr	r1, [pc, #316]	; (80249c4 <_strtod_l+0x5a4>)
 8024888:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 802488c:	4652      	mov	r2, sl
 802488e:	465b      	mov	r3, fp
 8024890:	e9d1 0100 	ldrd	r0, r1, [r1]
 8024894:	f7db feba 	bl	800060c <__aeabi_dmul>
 8024898:	4682      	mov	sl, r0
 802489a:	468b      	mov	fp, r1
 802489c:	f038 080f 	bics.w	r8, r8, #15
 80248a0:	d04f      	beq.n	8024942 <_strtod_l+0x522>
 80248a2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80248a6:	dd22      	ble.n	80248ee <_strtod_l+0x4ce>
 80248a8:	2500      	movs	r5, #0
 80248aa:	462e      	mov	r6, r5
 80248ac:	9507      	str	r5, [sp, #28]
 80248ae:	9505      	str	r5, [sp, #20]
 80248b0:	2322      	movs	r3, #34	; 0x22
 80248b2:	f8df b118 	ldr.w	fp, [pc, #280]	; 80249cc <_strtod_l+0x5ac>
 80248b6:	6023      	str	r3, [r4, #0]
 80248b8:	f04f 0a00 	mov.w	sl, #0
 80248bc:	9b07      	ldr	r3, [sp, #28]
 80248be:	2b00      	cmp	r3, #0
 80248c0:	f43f adf2 	beq.w	80244a8 <_strtod_l+0x88>
 80248c4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80248c6:	4620      	mov	r0, r4
 80248c8:	f002 f906 	bl	8026ad8 <_Bfree>
 80248cc:	9905      	ldr	r1, [sp, #20]
 80248ce:	4620      	mov	r0, r4
 80248d0:	f002 f902 	bl	8026ad8 <_Bfree>
 80248d4:	4631      	mov	r1, r6
 80248d6:	4620      	mov	r0, r4
 80248d8:	f002 f8fe 	bl	8026ad8 <_Bfree>
 80248dc:	9907      	ldr	r1, [sp, #28]
 80248de:	4620      	mov	r0, r4
 80248e0:	f002 f8fa 	bl	8026ad8 <_Bfree>
 80248e4:	4629      	mov	r1, r5
 80248e6:	4620      	mov	r0, r4
 80248e8:	f002 f8f6 	bl	8026ad8 <_Bfree>
 80248ec:	e5dc      	b.n	80244a8 <_strtod_l+0x88>
 80248ee:	4b36      	ldr	r3, [pc, #216]	; (80249c8 <_strtod_l+0x5a8>)
 80248f0:	9304      	str	r3, [sp, #16]
 80248f2:	2300      	movs	r3, #0
 80248f4:	ea4f 1828 	mov.w	r8, r8, asr #4
 80248f8:	4650      	mov	r0, sl
 80248fa:	4659      	mov	r1, fp
 80248fc:	4699      	mov	r9, r3
 80248fe:	f1b8 0f01 	cmp.w	r8, #1
 8024902:	dc21      	bgt.n	8024948 <_strtod_l+0x528>
 8024904:	b10b      	cbz	r3, 802490a <_strtod_l+0x4ea>
 8024906:	4682      	mov	sl, r0
 8024908:	468b      	mov	fp, r1
 802490a:	4b2f      	ldr	r3, [pc, #188]	; (80249c8 <_strtod_l+0x5a8>)
 802490c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8024910:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8024914:	4652      	mov	r2, sl
 8024916:	465b      	mov	r3, fp
 8024918:	e9d9 0100 	ldrd	r0, r1, [r9]
 802491c:	f7db fe76 	bl	800060c <__aeabi_dmul>
 8024920:	4b2a      	ldr	r3, [pc, #168]	; (80249cc <_strtod_l+0x5ac>)
 8024922:	460a      	mov	r2, r1
 8024924:	400b      	ands	r3, r1
 8024926:	492a      	ldr	r1, [pc, #168]	; (80249d0 <_strtod_l+0x5b0>)
 8024928:	428b      	cmp	r3, r1
 802492a:	4682      	mov	sl, r0
 802492c:	d8bc      	bhi.n	80248a8 <_strtod_l+0x488>
 802492e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8024932:	428b      	cmp	r3, r1
 8024934:	bf86      	itte	hi
 8024936:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80249d4 <_strtod_l+0x5b4>
 802493a:	f04f 3aff 	movhi.w	sl, #4294967295
 802493e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8024942:	2300      	movs	r3, #0
 8024944:	9304      	str	r3, [sp, #16]
 8024946:	e084      	b.n	8024a52 <_strtod_l+0x632>
 8024948:	f018 0f01 	tst.w	r8, #1
 802494c:	d005      	beq.n	802495a <_strtod_l+0x53a>
 802494e:	9b04      	ldr	r3, [sp, #16]
 8024950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024954:	f7db fe5a 	bl	800060c <__aeabi_dmul>
 8024958:	2301      	movs	r3, #1
 802495a:	9a04      	ldr	r2, [sp, #16]
 802495c:	3208      	adds	r2, #8
 802495e:	f109 0901 	add.w	r9, r9, #1
 8024962:	ea4f 0868 	mov.w	r8, r8, asr #1
 8024966:	9204      	str	r2, [sp, #16]
 8024968:	e7c9      	b.n	80248fe <_strtod_l+0x4de>
 802496a:	d0ea      	beq.n	8024942 <_strtod_l+0x522>
 802496c:	f1c8 0800 	rsb	r8, r8, #0
 8024970:	f018 020f 	ands.w	r2, r8, #15
 8024974:	d00a      	beq.n	802498c <_strtod_l+0x56c>
 8024976:	4b13      	ldr	r3, [pc, #76]	; (80249c4 <_strtod_l+0x5a4>)
 8024978:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802497c:	4650      	mov	r0, sl
 802497e:	4659      	mov	r1, fp
 8024980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024984:	f7db ff6c 	bl	8000860 <__aeabi_ddiv>
 8024988:	4682      	mov	sl, r0
 802498a:	468b      	mov	fp, r1
 802498c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8024990:	d0d7      	beq.n	8024942 <_strtod_l+0x522>
 8024992:	f1b8 0f1f 	cmp.w	r8, #31
 8024996:	dd1f      	ble.n	80249d8 <_strtod_l+0x5b8>
 8024998:	2500      	movs	r5, #0
 802499a:	462e      	mov	r6, r5
 802499c:	9507      	str	r5, [sp, #28]
 802499e:	9505      	str	r5, [sp, #20]
 80249a0:	2322      	movs	r3, #34	; 0x22
 80249a2:	f04f 0a00 	mov.w	sl, #0
 80249a6:	f04f 0b00 	mov.w	fp, #0
 80249aa:	6023      	str	r3, [r4, #0]
 80249ac:	e786      	b.n	80248bc <_strtod_l+0x49c>
 80249ae:	bf00      	nop
 80249b0:	08029fce 	.word	0x08029fce
 80249b4:	0802a00c 	.word	0x0802a00c
 80249b8:	08029fc6 	.word	0x08029fc6
 80249bc:	0802a14c 	.word	0x0802a14c
 80249c0:	08029fab 	.word	0x08029fab
 80249c4:	0802a340 	.word	0x0802a340
 80249c8:	0802a318 	.word	0x0802a318
 80249cc:	7ff00000 	.word	0x7ff00000
 80249d0:	7ca00000 	.word	0x7ca00000
 80249d4:	7fefffff 	.word	0x7fefffff
 80249d8:	f018 0310 	ands.w	r3, r8, #16
 80249dc:	bf18      	it	ne
 80249de:	236a      	movne	r3, #106	; 0x6a
 80249e0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8024d90 <_strtod_l+0x970>
 80249e4:	9304      	str	r3, [sp, #16]
 80249e6:	4650      	mov	r0, sl
 80249e8:	4659      	mov	r1, fp
 80249ea:	2300      	movs	r3, #0
 80249ec:	f018 0f01 	tst.w	r8, #1
 80249f0:	d004      	beq.n	80249fc <_strtod_l+0x5dc>
 80249f2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80249f6:	f7db fe09 	bl	800060c <__aeabi_dmul>
 80249fa:	2301      	movs	r3, #1
 80249fc:	ea5f 0868 	movs.w	r8, r8, asr #1
 8024a00:	f109 0908 	add.w	r9, r9, #8
 8024a04:	d1f2      	bne.n	80249ec <_strtod_l+0x5cc>
 8024a06:	b10b      	cbz	r3, 8024a0c <_strtod_l+0x5ec>
 8024a08:	4682      	mov	sl, r0
 8024a0a:	468b      	mov	fp, r1
 8024a0c:	9b04      	ldr	r3, [sp, #16]
 8024a0e:	b1c3      	cbz	r3, 8024a42 <_strtod_l+0x622>
 8024a10:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8024a14:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8024a18:	2b00      	cmp	r3, #0
 8024a1a:	4659      	mov	r1, fp
 8024a1c:	dd11      	ble.n	8024a42 <_strtod_l+0x622>
 8024a1e:	2b1f      	cmp	r3, #31
 8024a20:	f340 8124 	ble.w	8024c6c <_strtod_l+0x84c>
 8024a24:	2b34      	cmp	r3, #52	; 0x34
 8024a26:	bfde      	ittt	le
 8024a28:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8024a2c:	f04f 33ff 	movle.w	r3, #4294967295
 8024a30:	fa03 f202 	lslle.w	r2, r3, r2
 8024a34:	f04f 0a00 	mov.w	sl, #0
 8024a38:	bfcc      	ite	gt
 8024a3a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8024a3e:	ea02 0b01 	andle.w	fp, r2, r1
 8024a42:	2200      	movs	r2, #0
 8024a44:	2300      	movs	r3, #0
 8024a46:	4650      	mov	r0, sl
 8024a48:	4659      	mov	r1, fp
 8024a4a:	f7dc f847 	bl	8000adc <__aeabi_dcmpeq>
 8024a4e:	2800      	cmp	r0, #0
 8024a50:	d1a2      	bne.n	8024998 <_strtod_l+0x578>
 8024a52:	9b07      	ldr	r3, [sp, #28]
 8024a54:	9300      	str	r3, [sp, #0]
 8024a56:	9908      	ldr	r1, [sp, #32]
 8024a58:	462b      	mov	r3, r5
 8024a5a:	463a      	mov	r2, r7
 8024a5c:	4620      	mov	r0, r4
 8024a5e:	f002 f8a3 	bl	8026ba8 <__s2b>
 8024a62:	9007      	str	r0, [sp, #28]
 8024a64:	2800      	cmp	r0, #0
 8024a66:	f43f af1f 	beq.w	80248a8 <_strtod_l+0x488>
 8024a6a:	9b05      	ldr	r3, [sp, #20]
 8024a6c:	1b9e      	subs	r6, r3, r6
 8024a6e:	9b06      	ldr	r3, [sp, #24]
 8024a70:	2b00      	cmp	r3, #0
 8024a72:	bfb4      	ite	lt
 8024a74:	4633      	movlt	r3, r6
 8024a76:	2300      	movge	r3, #0
 8024a78:	930c      	str	r3, [sp, #48]	; 0x30
 8024a7a:	9b06      	ldr	r3, [sp, #24]
 8024a7c:	2500      	movs	r5, #0
 8024a7e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8024a82:	9312      	str	r3, [sp, #72]	; 0x48
 8024a84:	462e      	mov	r6, r5
 8024a86:	9b07      	ldr	r3, [sp, #28]
 8024a88:	4620      	mov	r0, r4
 8024a8a:	6859      	ldr	r1, [r3, #4]
 8024a8c:	f001 ffe4 	bl	8026a58 <_Balloc>
 8024a90:	9005      	str	r0, [sp, #20]
 8024a92:	2800      	cmp	r0, #0
 8024a94:	f43f af0c 	beq.w	80248b0 <_strtod_l+0x490>
 8024a98:	9b07      	ldr	r3, [sp, #28]
 8024a9a:	691a      	ldr	r2, [r3, #16]
 8024a9c:	3202      	adds	r2, #2
 8024a9e:	f103 010c 	add.w	r1, r3, #12
 8024aa2:	0092      	lsls	r2, r2, #2
 8024aa4:	300c      	adds	r0, #12
 8024aa6:	f7fe fd4b 	bl	8023540 <memcpy>
 8024aaa:	ec4b ab10 	vmov	d0, sl, fp
 8024aae:	aa1a      	add	r2, sp, #104	; 0x68
 8024ab0:	a919      	add	r1, sp, #100	; 0x64
 8024ab2:	4620      	mov	r0, r4
 8024ab4:	f002 fbbe 	bl	8027234 <__d2b>
 8024ab8:	ec4b ab18 	vmov	d8, sl, fp
 8024abc:	9018      	str	r0, [sp, #96]	; 0x60
 8024abe:	2800      	cmp	r0, #0
 8024ac0:	f43f aef6 	beq.w	80248b0 <_strtod_l+0x490>
 8024ac4:	2101      	movs	r1, #1
 8024ac6:	4620      	mov	r0, r4
 8024ac8:	f002 f908 	bl	8026cdc <__i2b>
 8024acc:	4606      	mov	r6, r0
 8024ace:	2800      	cmp	r0, #0
 8024ad0:	f43f aeee 	beq.w	80248b0 <_strtod_l+0x490>
 8024ad4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8024ad6:	9904      	ldr	r1, [sp, #16]
 8024ad8:	2b00      	cmp	r3, #0
 8024ada:	bfab      	itete	ge
 8024adc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8024ade:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8024ae0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8024ae2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8024ae6:	bfac      	ite	ge
 8024ae8:	eb03 0902 	addge.w	r9, r3, r2
 8024aec:	1ad7      	sublt	r7, r2, r3
 8024aee:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8024af0:	eba3 0801 	sub.w	r8, r3, r1
 8024af4:	4490      	add	r8, r2
 8024af6:	4ba1      	ldr	r3, [pc, #644]	; (8024d7c <_strtod_l+0x95c>)
 8024af8:	f108 38ff 	add.w	r8, r8, #4294967295
 8024afc:	4598      	cmp	r8, r3
 8024afe:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8024b02:	f280 80c7 	bge.w	8024c94 <_strtod_l+0x874>
 8024b06:	eba3 0308 	sub.w	r3, r3, r8
 8024b0a:	2b1f      	cmp	r3, #31
 8024b0c:	eba2 0203 	sub.w	r2, r2, r3
 8024b10:	f04f 0101 	mov.w	r1, #1
 8024b14:	f300 80b1 	bgt.w	8024c7a <_strtod_l+0x85a>
 8024b18:	fa01 f303 	lsl.w	r3, r1, r3
 8024b1c:	930d      	str	r3, [sp, #52]	; 0x34
 8024b1e:	2300      	movs	r3, #0
 8024b20:	9308      	str	r3, [sp, #32]
 8024b22:	eb09 0802 	add.w	r8, r9, r2
 8024b26:	9b04      	ldr	r3, [sp, #16]
 8024b28:	45c1      	cmp	r9, r8
 8024b2a:	4417      	add	r7, r2
 8024b2c:	441f      	add	r7, r3
 8024b2e:	464b      	mov	r3, r9
 8024b30:	bfa8      	it	ge
 8024b32:	4643      	movge	r3, r8
 8024b34:	42bb      	cmp	r3, r7
 8024b36:	bfa8      	it	ge
 8024b38:	463b      	movge	r3, r7
 8024b3a:	2b00      	cmp	r3, #0
 8024b3c:	bfc2      	ittt	gt
 8024b3e:	eba8 0803 	subgt.w	r8, r8, r3
 8024b42:	1aff      	subgt	r7, r7, r3
 8024b44:	eba9 0903 	subgt.w	r9, r9, r3
 8024b48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024b4a:	2b00      	cmp	r3, #0
 8024b4c:	dd17      	ble.n	8024b7e <_strtod_l+0x75e>
 8024b4e:	4631      	mov	r1, r6
 8024b50:	461a      	mov	r2, r3
 8024b52:	4620      	mov	r0, r4
 8024b54:	f002 f982 	bl	8026e5c <__pow5mult>
 8024b58:	4606      	mov	r6, r0
 8024b5a:	2800      	cmp	r0, #0
 8024b5c:	f43f aea8 	beq.w	80248b0 <_strtod_l+0x490>
 8024b60:	4601      	mov	r1, r0
 8024b62:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8024b64:	4620      	mov	r0, r4
 8024b66:	f002 f8cf 	bl	8026d08 <__multiply>
 8024b6a:	900b      	str	r0, [sp, #44]	; 0x2c
 8024b6c:	2800      	cmp	r0, #0
 8024b6e:	f43f ae9f 	beq.w	80248b0 <_strtod_l+0x490>
 8024b72:	9918      	ldr	r1, [sp, #96]	; 0x60
 8024b74:	4620      	mov	r0, r4
 8024b76:	f001 ffaf 	bl	8026ad8 <_Bfree>
 8024b7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024b7c:	9318      	str	r3, [sp, #96]	; 0x60
 8024b7e:	f1b8 0f00 	cmp.w	r8, #0
 8024b82:	f300 808c 	bgt.w	8024c9e <_strtod_l+0x87e>
 8024b86:	9b06      	ldr	r3, [sp, #24]
 8024b88:	2b00      	cmp	r3, #0
 8024b8a:	dd08      	ble.n	8024b9e <_strtod_l+0x77e>
 8024b8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8024b8e:	9905      	ldr	r1, [sp, #20]
 8024b90:	4620      	mov	r0, r4
 8024b92:	f002 f963 	bl	8026e5c <__pow5mult>
 8024b96:	9005      	str	r0, [sp, #20]
 8024b98:	2800      	cmp	r0, #0
 8024b9a:	f43f ae89 	beq.w	80248b0 <_strtod_l+0x490>
 8024b9e:	2f00      	cmp	r7, #0
 8024ba0:	dd08      	ble.n	8024bb4 <_strtod_l+0x794>
 8024ba2:	9905      	ldr	r1, [sp, #20]
 8024ba4:	463a      	mov	r2, r7
 8024ba6:	4620      	mov	r0, r4
 8024ba8:	f002 f9b2 	bl	8026f10 <__lshift>
 8024bac:	9005      	str	r0, [sp, #20]
 8024bae:	2800      	cmp	r0, #0
 8024bb0:	f43f ae7e 	beq.w	80248b0 <_strtod_l+0x490>
 8024bb4:	f1b9 0f00 	cmp.w	r9, #0
 8024bb8:	dd08      	ble.n	8024bcc <_strtod_l+0x7ac>
 8024bba:	4631      	mov	r1, r6
 8024bbc:	464a      	mov	r2, r9
 8024bbe:	4620      	mov	r0, r4
 8024bc0:	f002 f9a6 	bl	8026f10 <__lshift>
 8024bc4:	4606      	mov	r6, r0
 8024bc6:	2800      	cmp	r0, #0
 8024bc8:	f43f ae72 	beq.w	80248b0 <_strtod_l+0x490>
 8024bcc:	9a05      	ldr	r2, [sp, #20]
 8024bce:	9918      	ldr	r1, [sp, #96]	; 0x60
 8024bd0:	4620      	mov	r0, r4
 8024bd2:	f002 fa29 	bl	8027028 <__mdiff>
 8024bd6:	4605      	mov	r5, r0
 8024bd8:	2800      	cmp	r0, #0
 8024bda:	f43f ae69 	beq.w	80248b0 <_strtod_l+0x490>
 8024bde:	68c3      	ldr	r3, [r0, #12]
 8024be0:	930b      	str	r3, [sp, #44]	; 0x2c
 8024be2:	2300      	movs	r3, #0
 8024be4:	60c3      	str	r3, [r0, #12]
 8024be6:	4631      	mov	r1, r6
 8024be8:	f002 fa02 	bl	8026ff0 <__mcmp>
 8024bec:	2800      	cmp	r0, #0
 8024bee:	da60      	bge.n	8024cb2 <_strtod_l+0x892>
 8024bf0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024bf2:	ea53 030a 	orrs.w	r3, r3, sl
 8024bf6:	f040 8082 	bne.w	8024cfe <_strtod_l+0x8de>
 8024bfa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8024bfe:	2b00      	cmp	r3, #0
 8024c00:	d17d      	bne.n	8024cfe <_strtod_l+0x8de>
 8024c02:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8024c06:	0d1b      	lsrs	r3, r3, #20
 8024c08:	051b      	lsls	r3, r3, #20
 8024c0a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8024c0e:	d976      	bls.n	8024cfe <_strtod_l+0x8de>
 8024c10:	696b      	ldr	r3, [r5, #20]
 8024c12:	b913      	cbnz	r3, 8024c1a <_strtod_l+0x7fa>
 8024c14:	692b      	ldr	r3, [r5, #16]
 8024c16:	2b01      	cmp	r3, #1
 8024c18:	dd71      	ble.n	8024cfe <_strtod_l+0x8de>
 8024c1a:	4629      	mov	r1, r5
 8024c1c:	2201      	movs	r2, #1
 8024c1e:	4620      	mov	r0, r4
 8024c20:	f002 f976 	bl	8026f10 <__lshift>
 8024c24:	4631      	mov	r1, r6
 8024c26:	4605      	mov	r5, r0
 8024c28:	f002 f9e2 	bl	8026ff0 <__mcmp>
 8024c2c:	2800      	cmp	r0, #0
 8024c2e:	dd66      	ble.n	8024cfe <_strtod_l+0x8de>
 8024c30:	9904      	ldr	r1, [sp, #16]
 8024c32:	4a53      	ldr	r2, [pc, #332]	; (8024d80 <_strtod_l+0x960>)
 8024c34:	465b      	mov	r3, fp
 8024c36:	2900      	cmp	r1, #0
 8024c38:	f000 8081 	beq.w	8024d3e <_strtod_l+0x91e>
 8024c3c:	ea02 010b 	and.w	r1, r2, fp
 8024c40:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8024c44:	dc7b      	bgt.n	8024d3e <_strtod_l+0x91e>
 8024c46:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8024c4a:	f77f aea9 	ble.w	80249a0 <_strtod_l+0x580>
 8024c4e:	4b4d      	ldr	r3, [pc, #308]	; (8024d84 <_strtod_l+0x964>)
 8024c50:	4650      	mov	r0, sl
 8024c52:	4659      	mov	r1, fp
 8024c54:	2200      	movs	r2, #0
 8024c56:	f7db fcd9 	bl	800060c <__aeabi_dmul>
 8024c5a:	460b      	mov	r3, r1
 8024c5c:	4303      	orrs	r3, r0
 8024c5e:	bf08      	it	eq
 8024c60:	2322      	moveq	r3, #34	; 0x22
 8024c62:	4682      	mov	sl, r0
 8024c64:	468b      	mov	fp, r1
 8024c66:	bf08      	it	eq
 8024c68:	6023      	streq	r3, [r4, #0]
 8024c6a:	e62b      	b.n	80248c4 <_strtod_l+0x4a4>
 8024c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8024c70:	fa02 f303 	lsl.w	r3, r2, r3
 8024c74:	ea03 0a0a 	and.w	sl, r3, sl
 8024c78:	e6e3      	b.n	8024a42 <_strtod_l+0x622>
 8024c7a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8024c7e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8024c82:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8024c86:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8024c8a:	fa01 f308 	lsl.w	r3, r1, r8
 8024c8e:	9308      	str	r3, [sp, #32]
 8024c90:	910d      	str	r1, [sp, #52]	; 0x34
 8024c92:	e746      	b.n	8024b22 <_strtod_l+0x702>
 8024c94:	2300      	movs	r3, #0
 8024c96:	9308      	str	r3, [sp, #32]
 8024c98:	2301      	movs	r3, #1
 8024c9a:	930d      	str	r3, [sp, #52]	; 0x34
 8024c9c:	e741      	b.n	8024b22 <_strtod_l+0x702>
 8024c9e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8024ca0:	4642      	mov	r2, r8
 8024ca2:	4620      	mov	r0, r4
 8024ca4:	f002 f934 	bl	8026f10 <__lshift>
 8024ca8:	9018      	str	r0, [sp, #96]	; 0x60
 8024caa:	2800      	cmp	r0, #0
 8024cac:	f47f af6b 	bne.w	8024b86 <_strtod_l+0x766>
 8024cb0:	e5fe      	b.n	80248b0 <_strtod_l+0x490>
 8024cb2:	465f      	mov	r7, fp
 8024cb4:	d16e      	bne.n	8024d94 <_strtod_l+0x974>
 8024cb6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8024cb8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8024cbc:	b342      	cbz	r2, 8024d10 <_strtod_l+0x8f0>
 8024cbe:	4a32      	ldr	r2, [pc, #200]	; (8024d88 <_strtod_l+0x968>)
 8024cc0:	4293      	cmp	r3, r2
 8024cc2:	d128      	bne.n	8024d16 <_strtod_l+0x8f6>
 8024cc4:	9b04      	ldr	r3, [sp, #16]
 8024cc6:	4651      	mov	r1, sl
 8024cc8:	b1eb      	cbz	r3, 8024d06 <_strtod_l+0x8e6>
 8024cca:	4b2d      	ldr	r3, [pc, #180]	; (8024d80 <_strtod_l+0x960>)
 8024ccc:	403b      	ands	r3, r7
 8024cce:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8024cd2:	f04f 32ff 	mov.w	r2, #4294967295
 8024cd6:	d819      	bhi.n	8024d0c <_strtod_l+0x8ec>
 8024cd8:	0d1b      	lsrs	r3, r3, #20
 8024cda:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8024cde:	fa02 f303 	lsl.w	r3, r2, r3
 8024ce2:	4299      	cmp	r1, r3
 8024ce4:	d117      	bne.n	8024d16 <_strtod_l+0x8f6>
 8024ce6:	4b29      	ldr	r3, [pc, #164]	; (8024d8c <_strtod_l+0x96c>)
 8024ce8:	429f      	cmp	r7, r3
 8024cea:	d102      	bne.n	8024cf2 <_strtod_l+0x8d2>
 8024cec:	3101      	adds	r1, #1
 8024cee:	f43f addf 	beq.w	80248b0 <_strtod_l+0x490>
 8024cf2:	4b23      	ldr	r3, [pc, #140]	; (8024d80 <_strtod_l+0x960>)
 8024cf4:	403b      	ands	r3, r7
 8024cf6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8024cfa:	f04f 0a00 	mov.w	sl, #0
 8024cfe:	9b04      	ldr	r3, [sp, #16]
 8024d00:	2b00      	cmp	r3, #0
 8024d02:	d1a4      	bne.n	8024c4e <_strtod_l+0x82e>
 8024d04:	e5de      	b.n	80248c4 <_strtod_l+0x4a4>
 8024d06:	f04f 33ff 	mov.w	r3, #4294967295
 8024d0a:	e7ea      	b.n	8024ce2 <_strtod_l+0x8c2>
 8024d0c:	4613      	mov	r3, r2
 8024d0e:	e7e8      	b.n	8024ce2 <_strtod_l+0x8c2>
 8024d10:	ea53 030a 	orrs.w	r3, r3, sl
 8024d14:	d08c      	beq.n	8024c30 <_strtod_l+0x810>
 8024d16:	9b08      	ldr	r3, [sp, #32]
 8024d18:	b1db      	cbz	r3, 8024d52 <_strtod_l+0x932>
 8024d1a:	423b      	tst	r3, r7
 8024d1c:	d0ef      	beq.n	8024cfe <_strtod_l+0x8de>
 8024d1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024d20:	9a04      	ldr	r2, [sp, #16]
 8024d22:	4650      	mov	r0, sl
 8024d24:	4659      	mov	r1, fp
 8024d26:	b1c3      	cbz	r3, 8024d5a <_strtod_l+0x93a>
 8024d28:	f7ff fb5c 	bl	80243e4 <sulp>
 8024d2c:	4602      	mov	r2, r0
 8024d2e:	460b      	mov	r3, r1
 8024d30:	ec51 0b18 	vmov	r0, r1, d8
 8024d34:	f7db fab4 	bl	80002a0 <__adddf3>
 8024d38:	4682      	mov	sl, r0
 8024d3a:	468b      	mov	fp, r1
 8024d3c:	e7df      	b.n	8024cfe <_strtod_l+0x8de>
 8024d3e:	4013      	ands	r3, r2
 8024d40:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8024d44:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8024d48:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8024d4c:	f04f 3aff 	mov.w	sl, #4294967295
 8024d50:	e7d5      	b.n	8024cfe <_strtod_l+0x8de>
 8024d52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024d54:	ea13 0f0a 	tst.w	r3, sl
 8024d58:	e7e0      	b.n	8024d1c <_strtod_l+0x8fc>
 8024d5a:	f7ff fb43 	bl	80243e4 <sulp>
 8024d5e:	4602      	mov	r2, r0
 8024d60:	460b      	mov	r3, r1
 8024d62:	ec51 0b18 	vmov	r0, r1, d8
 8024d66:	f7db fa99 	bl	800029c <__aeabi_dsub>
 8024d6a:	2200      	movs	r2, #0
 8024d6c:	2300      	movs	r3, #0
 8024d6e:	4682      	mov	sl, r0
 8024d70:	468b      	mov	fp, r1
 8024d72:	f7db feb3 	bl	8000adc <__aeabi_dcmpeq>
 8024d76:	2800      	cmp	r0, #0
 8024d78:	d0c1      	beq.n	8024cfe <_strtod_l+0x8de>
 8024d7a:	e611      	b.n	80249a0 <_strtod_l+0x580>
 8024d7c:	fffffc02 	.word	0xfffffc02
 8024d80:	7ff00000 	.word	0x7ff00000
 8024d84:	39500000 	.word	0x39500000
 8024d88:	000fffff 	.word	0x000fffff
 8024d8c:	7fefffff 	.word	0x7fefffff
 8024d90:	0802a020 	.word	0x0802a020
 8024d94:	4631      	mov	r1, r6
 8024d96:	4628      	mov	r0, r5
 8024d98:	f002 faa8 	bl	80272ec <__ratio>
 8024d9c:	ec59 8b10 	vmov	r8, r9, d0
 8024da0:	ee10 0a10 	vmov	r0, s0
 8024da4:	2200      	movs	r2, #0
 8024da6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8024daa:	4649      	mov	r1, r9
 8024dac:	f7db feaa 	bl	8000b04 <__aeabi_dcmple>
 8024db0:	2800      	cmp	r0, #0
 8024db2:	d07a      	beq.n	8024eaa <_strtod_l+0xa8a>
 8024db4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024db6:	2b00      	cmp	r3, #0
 8024db8:	d04a      	beq.n	8024e50 <_strtod_l+0xa30>
 8024dba:	4b95      	ldr	r3, [pc, #596]	; (8025010 <_strtod_l+0xbf0>)
 8024dbc:	2200      	movs	r2, #0
 8024dbe:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8024dc2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8025010 <_strtod_l+0xbf0>
 8024dc6:	f04f 0800 	mov.w	r8, #0
 8024dca:	4b92      	ldr	r3, [pc, #584]	; (8025014 <_strtod_l+0xbf4>)
 8024dcc:	403b      	ands	r3, r7
 8024dce:	930d      	str	r3, [sp, #52]	; 0x34
 8024dd0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8024dd2:	4b91      	ldr	r3, [pc, #580]	; (8025018 <_strtod_l+0xbf8>)
 8024dd4:	429a      	cmp	r2, r3
 8024dd6:	f040 80b0 	bne.w	8024f3a <_strtod_l+0xb1a>
 8024dda:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8024dde:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8024de2:	ec4b ab10 	vmov	d0, sl, fp
 8024de6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8024dea:	f002 f9a7 	bl	802713c <__ulp>
 8024dee:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8024df2:	ec53 2b10 	vmov	r2, r3, d0
 8024df6:	f7db fc09 	bl	800060c <__aeabi_dmul>
 8024dfa:	4652      	mov	r2, sl
 8024dfc:	465b      	mov	r3, fp
 8024dfe:	f7db fa4f 	bl	80002a0 <__adddf3>
 8024e02:	460b      	mov	r3, r1
 8024e04:	4983      	ldr	r1, [pc, #524]	; (8025014 <_strtod_l+0xbf4>)
 8024e06:	4a85      	ldr	r2, [pc, #532]	; (802501c <_strtod_l+0xbfc>)
 8024e08:	4019      	ands	r1, r3
 8024e0a:	4291      	cmp	r1, r2
 8024e0c:	4682      	mov	sl, r0
 8024e0e:	d960      	bls.n	8024ed2 <_strtod_l+0xab2>
 8024e10:	ee18 3a90 	vmov	r3, s17
 8024e14:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8024e18:	4293      	cmp	r3, r2
 8024e1a:	d104      	bne.n	8024e26 <_strtod_l+0xa06>
 8024e1c:	ee18 3a10 	vmov	r3, s16
 8024e20:	3301      	adds	r3, #1
 8024e22:	f43f ad45 	beq.w	80248b0 <_strtod_l+0x490>
 8024e26:	f8df b200 	ldr.w	fp, [pc, #512]	; 8025028 <_strtod_l+0xc08>
 8024e2a:	f04f 3aff 	mov.w	sl, #4294967295
 8024e2e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8024e30:	4620      	mov	r0, r4
 8024e32:	f001 fe51 	bl	8026ad8 <_Bfree>
 8024e36:	9905      	ldr	r1, [sp, #20]
 8024e38:	4620      	mov	r0, r4
 8024e3a:	f001 fe4d 	bl	8026ad8 <_Bfree>
 8024e3e:	4631      	mov	r1, r6
 8024e40:	4620      	mov	r0, r4
 8024e42:	f001 fe49 	bl	8026ad8 <_Bfree>
 8024e46:	4629      	mov	r1, r5
 8024e48:	4620      	mov	r0, r4
 8024e4a:	f001 fe45 	bl	8026ad8 <_Bfree>
 8024e4e:	e61a      	b.n	8024a86 <_strtod_l+0x666>
 8024e50:	f1ba 0f00 	cmp.w	sl, #0
 8024e54:	d11b      	bne.n	8024e8e <_strtod_l+0xa6e>
 8024e56:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8024e5a:	b9f3      	cbnz	r3, 8024e9a <_strtod_l+0xa7a>
 8024e5c:	4b6c      	ldr	r3, [pc, #432]	; (8025010 <_strtod_l+0xbf0>)
 8024e5e:	2200      	movs	r2, #0
 8024e60:	4640      	mov	r0, r8
 8024e62:	4649      	mov	r1, r9
 8024e64:	f7db fe44 	bl	8000af0 <__aeabi_dcmplt>
 8024e68:	b9d0      	cbnz	r0, 8024ea0 <_strtod_l+0xa80>
 8024e6a:	4640      	mov	r0, r8
 8024e6c:	4649      	mov	r1, r9
 8024e6e:	4b6c      	ldr	r3, [pc, #432]	; (8025020 <_strtod_l+0xc00>)
 8024e70:	2200      	movs	r2, #0
 8024e72:	f7db fbcb 	bl	800060c <__aeabi_dmul>
 8024e76:	4680      	mov	r8, r0
 8024e78:	4689      	mov	r9, r1
 8024e7a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8024e7e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8024e82:	9315      	str	r3, [sp, #84]	; 0x54
 8024e84:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8024e88:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8024e8c:	e79d      	b.n	8024dca <_strtod_l+0x9aa>
 8024e8e:	f1ba 0f01 	cmp.w	sl, #1
 8024e92:	d102      	bne.n	8024e9a <_strtod_l+0xa7a>
 8024e94:	2f00      	cmp	r7, #0
 8024e96:	f43f ad83 	beq.w	80249a0 <_strtod_l+0x580>
 8024e9a:	4b62      	ldr	r3, [pc, #392]	; (8025024 <_strtod_l+0xc04>)
 8024e9c:	2200      	movs	r2, #0
 8024e9e:	e78e      	b.n	8024dbe <_strtod_l+0x99e>
 8024ea0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8025020 <_strtod_l+0xc00>
 8024ea4:	f04f 0800 	mov.w	r8, #0
 8024ea8:	e7e7      	b.n	8024e7a <_strtod_l+0xa5a>
 8024eaa:	4b5d      	ldr	r3, [pc, #372]	; (8025020 <_strtod_l+0xc00>)
 8024eac:	4640      	mov	r0, r8
 8024eae:	4649      	mov	r1, r9
 8024eb0:	2200      	movs	r2, #0
 8024eb2:	f7db fbab 	bl	800060c <__aeabi_dmul>
 8024eb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024eb8:	4680      	mov	r8, r0
 8024eba:	4689      	mov	r9, r1
 8024ebc:	b933      	cbnz	r3, 8024ecc <_strtod_l+0xaac>
 8024ebe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8024ec2:	900e      	str	r0, [sp, #56]	; 0x38
 8024ec4:	930f      	str	r3, [sp, #60]	; 0x3c
 8024ec6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8024eca:	e7dd      	b.n	8024e88 <_strtod_l+0xa68>
 8024ecc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8024ed0:	e7f9      	b.n	8024ec6 <_strtod_l+0xaa6>
 8024ed2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8024ed6:	9b04      	ldr	r3, [sp, #16]
 8024ed8:	2b00      	cmp	r3, #0
 8024eda:	d1a8      	bne.n	8024e2e <_strtod_l+0xa0e>
 8024edc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8024ee0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8024ee2:	0d1b      	lsrs	r3, r3, #20
 8024ee4:	051b      	lsls	r3, r3, #20
 8024ee6:	429a      	cmp	r2, r3
 8024ee8:	d1a1      	bne.n	8024e2e <_strtod_l+0xa0e>
 8024eea:	4640      	mov	r0, r8
 8024eec:	4649      	mov	r1, r9
 8024eee:	f7db ff3d 	bl	8000d6c <__aeabi_d2lz>
 8024ef2:	f7db fb5d 	bl	80005b0 <__aeabi_l2d>
 8024ef6:	4602      	mov	r2, r0
 8024ef8:	460b      	mov	r3, r1
 8024efa:	4640      	mov	r0, r8
 8024efc:	4649      	mov	r1, r9
 8024efe:	f7db f9cd 	bl	800029c <__aeabi_dsub>
 8024f02:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8024f04:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8024f08:	ea43 030a 	orr.w	r3, r3, sl
 8024f0c:	4313      	orrs	r3, r2
 8024f0e:	4680      	mov	r8, r0
 8024f10:	4689      	mov	r9, r1
 8024f12:	d055      	beq.n	8024fc0 <_strtod_l+0xba0>
 8024f14:	a336      	add	r3, pc, #216	; (adr r3, 8024ff0 <_strtod_l+0xbd0>)
 8024f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024f1a:	f7db fde9 	bl	8000af0 <__aeabi_dcmplt>
 8024f1e:	2800      	cmp	r0, #0
 8024f20:	f47f acd0 	bne.w	80248c4 <_strtod_l+0x4a4>
 8024f24:	a334      	add	r3, pc, #208	; (adr r3, 8024ff8 <_strtod_l+0xbd8>)
 8024f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024f2a:	4640      	mov	r0, r8
 8024f2c:	4649      	mov	r1, r9
 8024f2e:	f7db fdfd 	bl	8000b2c <__aeabi_dcmpgt>
 8024f32:	2800      	cmp	r0, #0
 8024f34:	f43f af7b 	beq.w	8024e2e <_strtod_l+0xa0e>
 8024f38:	e4c4      	b.n	80248c4 <_strtod_l+0x4a4>
 8024f3a:	9b04      	ldr	r3, [sp, #16]
 8024f3c:	b333      	cbz	r3, 8024f8c <_strtod_l+0xb6c>
 8024f3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024f40:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8024f44:	d822      	bhi.n	8024f8c <_strtod_l+0xb6c>
 8024f46:	a32e      	add	r3, pc, #184	; (adr r3, 8025000 <_strtod_l+0xbe0>)
 8024f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024f4c:	4640      	mov	r0, r8
 8024f4e:	4649      	mov	r1, r9
 8024f50:	f7db fdd8 	bl	8000b04 <__aeabi_dcmple>
 8024f54:	b1a0      	cbz	r0, 8024f80 <_strtod_l+0xb60>
 8024f56:	4649      	mov	r1, r9
 8024f58:	4640      	mov	r0, r8
 8024f5a:	f7db fe2f 	bl	8000bbc <__aeabi_d2uiz>
 8024f5e:	2801      	cmp	r0, #1
 8024f60:	bf38      	it	cc
 8024f62:	2001      	movcc	r0, #1
 8024f64:	f7db fad8 	bl	8000518 <__aeabi_ui2d>
 8024f68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024f6a:	4680      	mov	r8, r0
 8024f6c:	4689      	mov	r9, r1
 8024f6e:	bb23      	cbnz	r3, 8024fba <_strtod_l+0xb9a>
 8024f70:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8024f74:	9010      	str	r0, [sp, #64]	; 0x40
 8024f76:	9311      	str	r3, [sp, #68]	; 0x44
 8024f78:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8024f7c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8024f80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024f82:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8024f84:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8024f88:	1a9b      	subs	r3, r3, r2
 8024f8a:	9309      	str	r3, [sp, #36]	; 0x24
 8024f8c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8024f90:	eeb0 0a48 	vmov.f32	s0, s16
 8024f94:	eef0 0a68 	vmov.f32	s1, s17
 8024f98:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8024f9c:	f002 f8ce 	bl	802713c <__ulp>
 8024fa0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8024fa4:	ec53 2b10 	vmov	r2, r3, d0
 8024fa8:	f7db fb30 	bl	800060c <__aeabi_dmul>
 8024fac:	ec53 2b18 	vmov	r2, r3, d8
 8024fb0:	f7db f976 	bl	80002a0 <__adddf3>
 8024fb4:	4682      	mov	sl, r0
 8024fb6:	468b      	mov	fp, r1
 8024fb8:	e78d      	b.n	8024ed6 <_strtod_l+0xab6>
 8024fba:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8024fbe:	e7db      	b.n	8024f78 <_strtod_l+0xb58>
 8024fc0:	a311      	add	r3, pc, #68	; (adr r3, 8025008 <_strtod_l+0xbe8>)
 8024fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024fc6:	f7db fd93 	bl	8000af0 <__aeabi_dcmplt>
 8024fca:	e7b2      	b.n	8024f32 <_strtod_l+0xb12>
 8024fcc:	2300      	movs	r3, #0
 8024fce:	930a      	str	r3, [sp, #40]	; 0x28
 8024fd0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8024fd2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8024fd4:	6013      	str	r3, [r2, #0]
 8024fd6:	f7ff ba6b 	b.w	80244b0 <_strtod_l+0x90>
 8024fda:	2a65      	cmp	r2, #101	; 0x65
 8024fdc:	f43f ab5f 	beq.w	802469e <_strtod_l+0x27e>
 8024fe0:	2a45      	cmp	r2, #69	; 0x45
 8024fe2:	f43f ab5c 	beq.w	802469e <_strtod_l+0x27e>
 8024fe6:	2301      	movs	r3, #1
 8024fe8:	f7ff bb94 	b.w	8024714 <_strtod_l+0x2f4>
 8024fec:	f3af 8000 	nop.w
 8024ff0:	94a03595 	.word	0x94a03595
 8024ff4:	3fdfffff 	.word	0x3fdfffff
 8024ff8:	35afe535 	.word	0x35afe535
 8024ffc:	3fe00000 	.word	0x3fe00000
 8025000:	ffc00000 	.word	0xffc00000
 8025004:	41dfffff 	.word	0x41dfffff
 8025008:	94a03595 	.word	0x94a03595
 802500c:	3fcfffff 	.word	0x3fcfffff
 8025010:	3ff00000 	.word	0x3ff00000
 8025014:	7ff00000 	.word	0x7ff00000
 8025018:	7fe00000 	.word	0x7fe00000
 802501c:	7c9fffff 	.word	0x7c9fffff
 8025020:	3fe00000 	.word	0x3fe00000
 8025024:	bff00000 	.word	0xbff00000
 8025028:	7fefffff 	.word	0x7fefffff

0802502c <strtod>:
 802502c:	460a      	mov	r2, r1
 802502e:	4601      	mov	r1, r0
 8025030:	4802      	ldr	r0, [pc, #8]	; (802503c <strtod+0x10>)
 8025032:	4b03      	ldr	r3, [pc, #12]	; (8025040 <strtod+0x14>)
 8025034:	6800      	ldr	r0, [r0, #0]
 8025036:	f7ff b9f3 	b.w	8024420 <_strtod_l>
 802503a:	bf00      	nop
 802503c:	20000280 	.word	0x20000280
 8025040:	200002e8 	.word	0x200002e8

08025044 <_vsiprintf_r>:
 8025044:	b500      	push	{lr}
 8025046:	b09b      	sub	sp, #108	; 0x6c
 8025048:	9100      	str	r1, [sp, #0]
 802504a:	9104      	str	r1, [sp, #16]
 802504c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8025050:	9105      	str	r1, [sp, #20]
 8025052:	9102      	str	r1, [sp, #8]
 8025054:	4905      	ldr	r1, [pc, #20]	; (802506c <_vsiprintf_r+0x28>)
 8025056:	9103      	str	r1, [sp, #12]
 8025058:	4669      	mov	r1, sp
 802505a:	f002 fa49 	bl	80274f0 <_svfiprintf_r>
 802505e:	9b00      	ldr	r3, [sp, #0]
 8025060:	2200      	movs	r2, #0
 8025062:	701a      	strb	r2, [r3, #0]
 8025064:	b01b      	add	sp, #108	; 0x6c
 8025066:	f85d fb04 	ldr.w	pc, [sp], #4
 802506a:	bf00      	nop
 802506c:	ffff0208 	.word	0xffff0208

08025070 <vsiprintf>:
 8025070:	4613      	mov	r3, r2
 8025072:	460a      	mov	r2, r1
 8025074:	4601      	mov	r1, r0
 8025076:	4802      	ldr	r0, [pc, #8]	; (8025080 <vsiprintf+0x10>)
 8025078:	6800      	ldr	r0, [r0, #0]
 802507a:	f7ff bfe3 	b.w	8025044 <_vsiprintf_r>
 802507e:	bf00      	nop
 8025080:	20000280 	.word	0x20000280

08025084 <__swbuf_r>:
 8025084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025086:	460e      	mov	r6, r1
 8025088:	4614      	mov	r4, r2
 802508a:	4605      	mov	r5, r0
 802508c:	b118      	cbz	r0, 8025096 <__swbuf_r+0x12>
 802508e:	6983      	ldr	r3, [r0, #24]
 8025090:	b90b      	cbnz	r3, 8025096 <__swbuf_r+0x12>
 8025092:	f001 f84d 	bl	8026130 <__sinit>
 8025096:	4b21      	ldr	r3, [pc, #132]	; (802511c <__swbuf_r+0x98>)
 8025098:	429c      	cmp	r4, r3
 802509a:	d12b      	bne.n	80250f4 <__swbuf_r+0x70>
 802509c:	686c      	ldr	r4, [r5, #4]
 802509e:	69a3      	ldr	r3, [r4, #24]
 80250a0:	60a3      	str	r3, [r4, #8]
 80250a2:	89a3      	ldrh	r3, [r4, #12]
 80250a4:	071a      	lsls	r2, r3, #28
 80250a6:	d52f      	bpl.n	8025108 <__swbuf_r+0x84>
 80250a8:	6923      	ldr	r3, [r4, #16]
 80250aa:	b36b      	cbz	r3, 8025108 <__swbuf_r+0x84>
 80250ac:	6923      	ldr	r3, [r4, #16]
 80250ae:	6820      	ldr	r0, [r4, #0]
 80250b0:	1ac0      	subs	r0, r0, r3
 80250b2:	6963      	ldr	r3, [r4, #20]
 80250b4:	b2f6      	uxtb	r6, r6
 80250b6:	4283      	cmp	r3, r0
 80250b8:	4637      	mov	r7, r6
 80250ba:	dc04      	bgt.n	80250c6 <__swbuf_r+0x42>
 80250bc:	4621      	mov	r1, r4
 80250be:	4628      	mov	r0, r5
 80250c0:	f000 ffa2 	bl	8026008 <_fflush_r>
 80250c4:	bb30      	cbnz	r0, 8025114 <__swbuf_r+0x90>
 80250c6:	68a3      	ldr	r3, [r4, #8]
 80250c8:	3b01      	subs	r3, #1
 80250ca:	60a3      	str	r3, [r4, #8]
 80250cc:	6823      	ldr	r3, [r4, #0]
 80250ce:	1c5a      	adds	r2, r3, #1
 80250d0:	6022      	str	r2, [r4, #0]
 80250d2:	701e      	strb	r6, [r3, #0]
 80250d4:	6963      	ldr	r3, [r4, #20]
 80250d6:	3001      	adds	r0, #1
 80250d8:	4283      	cmp	r3, r0
 80250da:	d004      	beq.n	80250e6 <__swbuf_r+0x62>
 80250dc:	89a3      	ldrh	r3, [r4, #12]
 80250de:	07db      	lsls	r3, r3, #31
 80250e0:	d506      	bpl.n	80250f0 <__swbuf_r+0x6c>
 80250e2:	2e0a      	cmp	r6, #10
 80250e4:	d104      	bne.n	80250f0 <__swbuf_r+0x6c>
 80250e6:	4621      	mov	r1, r4
 80250e8:	4628      	mov	r0, r5
 80250ea:	f000 ff8d 	bl	8026008 <_fflush_r>
 80250ee:	b988      	cbnz	r0, 8025114 <__swbuf_r+0x90>
 80250f0:	4638      	mov	r0, r7
 80250f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80250f4:	4b0a      	ldr	r3, [pc, #40]	; (8025120 <__swbuf_r+0x9c>)
 80250f6:	429c      	cmp	r4, r3
 80250f8:	d101      	bne.n	80250fe <__swbuf_r+0x7a>
 80250fa:	68ac      	ldr	r4, [r5, #8]
 80250fc:	e7cf      	b.n	802509e <__swbuf_r+0x1a>
 80250fe:	4b09      	ldr	r3, [pc, #36]	; (8025124 <__swbuf_r+0xa0>)
 8025100:	429c      	cmp	r4, r3
 8025102:	bf08      	it	eq
 8025104:	68ec      	ldreq	r4, [r5, #12]
 8025106:	e7ca      	b.n	802509e <__swbuf_r+0x1a>
 8025108:	4621      	mov	r1, r4
 802510a:	4628      	mov	r0, r5
 802510c:	f000 f80c 	bl	8025128 <__swsetup_r>
 8025110:	2800      	cmp	r0, #0
 8025112:	d0cb      	beq.n	80250ac <__swbuf_r+0x28>
 8025114:	f04f 37ff 	mov.w	r7, #4294967295
 8025118:	e7ea      	b.n	80250f0 <__swbuf_r+0x6c>
 802511a:	bf00      	nop
 802511c:	0802a1fc 	.word	0x0802a1fc
 8025120:	0802a21c 	.word	0x0802a21c
 8025124:	0802a1dc 	.word	0x0802a1dc

08025128 <__swsetup_r>:
 8025128:	4b32      	ldr	r3, [pc, #200]	; (80251f4 <__swsetup_r+0xcc>)
 802512a:	b570      	push	{r4, r5, r6, lr}
 802512c:	681d      	ldr	r5, [r3, #0]
 802512e:	4606      	mov	r6, r0
 8025130:	460c      	mov	r4, r1
 8025132:	b125      	cbz	r5, 802513e <__swsetup_r+0x16>
 8025134:	69ab      	ldr	r3, [r5, #24]
 8025136:	b913      	cbnz	r3, 802513e <__swsetup_r+0x16>
 8025138:	4628      	mov	r0, r5
 802513a:	f000 fff9 	bl	8026130 <__sinit>
 802513e:	4b2e      	ldr	r3, [pc, #184]	; (80251f8 <__swsetup_r+0xd0>)
 8025140:	429c      	cmp	r4, r3
 8025142:	d10f      	bne.n	8025164 <__swsetup_r+0x3c>
 8025144:	686c      	ldr	r4, [r5, #4]
 8025146:	89a3      	ldrh	r3, [r4, #12]
 8025148:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802514c:	0719      	lsls	r1, r3, #28
 802514e:	d42c      	bmi.n	80251aa <__swsetup_r+0x82>
 8025150:	06dd      	lsls	r5, r3, #27
 8025152:	d411      	bmi.n	8025178 <__swsetup_r+0x50>
 8025154:	2309      	movs	r3, #9
 8025156:	6033      	str	r3, [r6, #0]
 8025158:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802515c:	81a3      	strh	r3, [r4, #12]
 802515e:	f04f 30ff 	mov.w	r0, #4294967295
 8025162:	e03e      	b.n	80251e2 <__swsetup_r+0xba>
 8025164:	4b25      	ldr	r3, [pc, #148]	; (80251fc <__swsetup_r+0xd4>)
 8025166:	429c      	cmp	r4, r3
 8025168:	d101      	bne.n	802516e <__swsetup_r+0x46>
 802516a:	68ac      	ldr	r4, [r5, #8]
 802516c:	e7eb      	b.n	8025146 <__swsetup_r+0x1e>
 802516e:	4b24      	ldr	r3, [pc, #144]	; (8025200 <__swsetup_r+0xd8>)
 8025170:	429c      	cmp	r4, r3
 8025172:	bf08      	it	eq
 8025174:	68ec      	ldreq	r4, [r5, #12]
 8025176:	e7e6      	b.n	8025146 <__swsetup_r+0x1e>
 8025178:	0758      	lsls	r0, r3, #29
 802517a:	d512      	bpl.n	80251a2 <__swsetup_r+0x7a>
 802517c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802517e:	b141      	cbz	r1, 8025192 <__swsetup_r+0x6a>
 8025180:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8025184:	4299      	cmp	r1, r3
 8025186:	d002      	beq.n	802518e <__swsetup_r+0x66>
 8025188:	4630      	mov	r0, r6
 802518a:	f7fe fa1f 	bl	80235cc <_free_r>
 802518e:	2300      	movs	r3, #0
 8025190:	6363      	str	r3, [r4, #52]	; 0x34
 8025192:	89a3      	ldrh	r3, [r4, #12]
 8025194:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8025198:	81a3      	strh	r3, [r4, #12]
 802519a:	2300      	movs	r3, #0
 802519c:	6063      	str	r3, [r4, #4]
 802519e:	6923      	ldr	r3, [r4, #16]
 80251a0:	6023      	str	r3, [r4, #0]
 80251a2:	89a3      	ldrh	r3, [r4, #12]
 80251a4:	f043 0308 	orr.w	r3, r3, #8
 80251a8:	81a3      	strh	r3, [r4, #12]
 80251aa:	6923      	ldr	r3, [r4, #16]
 80251ac:	b94b      	cbnz	r3, 80251c2 <__swsetup_r+0x9a>
 80251ae:	89a3      	ldrh	r3, [r4, #12]
 80251b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80251b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80251b8:	d003      	beq.n	80251c2 <__swsetup_r+0x9a>
 80251ba:	4621      	mov	r1, r4
 80251bc:	4630      	mov	r0, r6
 80251be:	f001 fbed 	bl	802699c <__smakebuf_r>
 80251c2:	89a0      	ldrh	r0, [r4, #12]
 80251c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80251c8:	f010 0301 	ands.w	r3, r0, #1
 80251cc:	d00a      	beq.n	80251e4 <__swsetup_r+0xbc>
 80251ce:	2300      	movs	r3, #0
 80251d0:	60a3      	str	r3, [r4, #8]
 80251d2:	6963      	ldr	r3, [r4, #20]
 80251d4:	425b      	negs	r3, r3
 80251d6:	61a3      	str	r3, [r4, #24]
 80251d8:	6923      	ldr	r3, [r4, #16]
 80251da:	b943      	cbnz	r3, 80251ee <__swsetup_r+0xc6>
 80251dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80251e0:	d1ba      	bne.n	8025158 <__swsetup_r+0x30>
 80251e2:	bd70      	pop	{r4, r5, r6, pc}
 80251e4:	0781      	lsls	r1, r0, #30
 80251e6:	bf58      	it	pl
 80251e8:	6963      	ldrpl	r3, [r4, #20]
 80251ea:	60a3      	str	r3, [r4, #8]
 80251ec:	e7f4      	b.n	80251d8 <__swsetup_r+0xb0>
 80251ee:	2000      	movs	r0, #0
 80251f0:	e7f7      	b.n	80251e2 <__swsetup_r+0xba>
 80251f2:	bf00      	nop
 80251f4:	20000280 	.word	0x20000280
 80251f8:	0802a1fc 	.word	0x0802a1fc
 80251fc:	0802a21c 	.word	0x0802a21c
 8025200:	0802a1dc 	.word	0x0802a1dc

08025204 <quorem>:
 8025204:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025208:	6903      	ldr	r3, [r0, #16]
 802520a:	690c      	ldr	r4, [r1, #16]
 802520c:	42a3      	cmp	r3, r4
 802520e:	4607      	mov	r7, r0
 8025210:	f2c0 8081 	blt.w	8025316 <quorem+0x112>
 8025214:	3c01      	subs	r4, #1
 8025216:	f101 0814 	add.w	r8, r1, #20
 802521a:	f100 0514 	add.w	r5, r0, #20
 802521e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8025222:	9301      	str	r3, [sp, #4]
 8025224:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8025228:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802522c:	3301      	adds	r3, #1
 802522e:	429a      	cmp	r2, r3
 8025230:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8025234:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8025238:	fbb2 f6f3 	udiv	r6, r2, r3
 802523c:	d331      	bcc.n	80252a2 <quorem+0x9e>
 802523e:	f04f 0e00 	mov.w	lr, #0
 8025242:	4640      	mov	r0, r8
 8025244:	46ac      	mov	ip, r5
 8025246:	46f2      	mov	sl, lr
 8025248:	f850 2b04 	ldr.w	r2, [r0], #4
 802524c:	b293      	uxth	r3, r2
 802524e:	fb06 e303 	mla	r3, r6, r3, lr
 8025252:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8025256:	b29b      	uxth	r3, r3
 8025258:	ebaa 0303 	sub.w	r3, sl, r3
 802525c:	f8dc a000 	ldr.w	sl, [ip]
 8025260:	0c12      	lsrs	r2, r2, #16
 8025262:	fa13 f38a 	uxtah	r3, r3, sl
 8025266:	fb06 e202 	mla	r2, r6, r2, lr
 802526a:	9300      	str	r3, [sp, #0]
 802526c:	9b00      	ldr	r3, [sp, #0]
 802526e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8025272:	b292      	uxth	r2, r2
 8025274:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8025278:	eb02 4223 	add.w	r2, r2, r3, asr #16
 802527c:	f8bd 3000 	ldrh.w	r3, [sp]
 8025280:	4581      	cmp	r9, r0
 8025282:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8025286:	f84c 3b04 	str.w	r3, [ip], #4
 802528a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 802528e:	d2db      	bcs.n	8025248 <quorem+0x44>
 8025290:	f855 300b 	ldr.w	r3, [r5, fp]
 8025294:	b92b      	cbnz	r3, 80252a2 <quorem+0x9e>
 8025296:	9b01      	ldr	r3, [sp, #4]
 8025298:	3b04      	subs	r3, #4
 802529a:	429d      	cmp	r5, r3
 802529c:	461a      	mov	r2, r3
 802529e:	d32e      	bcc.n	80252fe <quorem+0xfa>
 80252a0:	613c      	str	r4, [r7, #16]
 80252a2:	4638      	mov	r0, r7
 80252a4:	f001 fea4 	bl	8026ff0 <__mcmp>
 80252a8:	2800      	cmp	r0, #0
 80252aa:	db24      	blt.n	80252f6 <quorem+0xf2>
 80252ac:	3601      	adds	r6, #1
 80252ae:	4628      	mov	r0, r5
 80252b0:	f04f 0c00 	mov.w	ip, #0
 80252b4:	f858 2b04 	ldr.w	r2, [r8], #4
 80252b8:	f8d0 e000 	ldr.w	lr, [r0]
 80252bc:	b293      	uxth	r3, r2
 80252be:	ebac 0303 	sub.w	r3, ip, r3
 80252c2:	0c12      	lsrs	r2, r2, #16
 80252c4:	fa13 f38e 	uxtah	r3, r3, lr
 80252c8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80252cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80252d0:	b29b      	uxth	r3, r3
 80252d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80252d6:	45c1      	cmp	r9, r8
 80252d8:	f840 3b04 	str.w	r3, [r0], #4
 80252dc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80252e0:	d2e8      	bcs.n	80252b4 <quorem+0xb0>
 80252e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80252e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80252ea:	b922      	cbnz	r2, 80252f6 <quorem+0xf2>
 80252ec:	3b04      	subs	r3, #4
 80252ee:	429d      	cmp	r5, r3
 80252f0:	461a      	mov	r2, r3
 80252f2:	d30a      	bcc.n	802530a <quorem+0x106>
 80252f4:	613c      	str	r4, [r7, #16]
 80252f6:	4630      	mov	r0, r6
 80252f8:	b003      	add	sp, #12
 80252fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80252fe:	6812      	ldr	r2, [r2, #0]
 8025300:	3b04      	subs	r3, #4
 8025302:	2a00      	cmp	r2, #0
 8025304:	d1cc      	bne.n	80252a0 <quorem+0x9c>
 8025306:	3c01      	subs	r4, #1
 8025308:	e7c7      	b.n	802529a <quorem+0x96>
 802530a:	6812      	ldr	r2, [r2, #0]
 802530c:	3b04      	subs	r3, #4
 802530e:	2a00      	cmp	r2, #0
 8025310:	d1f0      	bne.n	80252f4 <quorem+0xf0>
 8025312:	3c01      	subs	r4, #1
 8025314:	e7eb      	b.n	80252ee <quorem+0xea>
 8025316:	2000      	movs	r0, #0
 8025318:	e7ee      	b.n	80252f8 <quorem+0xf4>
 802531a:	0000      	movs	r0, r0
 802531c:	0000      	movs	r0, r0
	...

08025320 <_dtoa_r>:
 8025320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025324:	ed2d 8b04 	vpush	{d8-d9}
 8025328:	ec57 6b10 	vmov	r6, r7, d0
 802532c:	b093      	sub	sp, #76	; 0x4c
 802532e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8025330:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8025334:	9106      	str	r1, [sp, #24]
 8025336:	ee10 aa10 	vmov	sl, s0
 802533a:	4604      	mov	r4, r0
 802533c:	9209      	str	r2, [sp, #36]	; 0x24
 802533e:	930c      	str	r3, [sp, #48]	; 0x30
 8025340:	46bb      	mov	fp, r7
 8025342:	b975      	cbnz	r5, 8025362 <_dtoa_r+0x42>
 8025344:	2010      	movs	r0, #16
 8025346:	f7fe f8eb 	bl	8023520 <malloc>
 802534a:	4602      	mov	r2, r0
 802534c:	6260      	str	r0, [r4, #36]	; 0x24
 802534e:	b920      	cbnz	r0, 802535a <_dtoa_r+0x3a>
 8025350:	4ba7      	ldr	r3, [pc, #668]	; (80255f0 <_dtoa_r+0x2d0>)
 8025352:	21ea      	movs	r1, #234	; 0xea
 8025354:	48a7      	ldr	r0, [pc, #668]	; (80255f4 <_dtoa_r+0x2d4>)
 8025356:	f7fe f879 	bl	802344c <__assert_func>
 802535a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 802535e:	6005      	str	r5, [r0, #0]
 8025360:	60c5      	str	r5, [r0, #12]
 8025362:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8025364:	6819      	ldr	r1, [r3, #0]
 8025366:	b151      	cbz	r1, 802537e <_dtoa_r+0x5e>
 8025368:	685a      	ldr	r2, [r3, #4]
 802536a:	604a      	str	r2, [r1, #4]
 802536c:	2301      	movs	r3, #1
 802536e:	4093      	lsls	r3, r2
 8025370:	608b      	str	r3, [r1, #8]
 8025372:	4620      	mov	r0, r4
 8025374:	f001 fbb0 	bl	8026ad8 <_Bfree>
 8025378:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802537a:	2200      	movs	r2, #0
 802537c:	601a      	str	r2, [r3, #0]
 802537e:	1e3b      	subs	r3, r7, #0
 8025380:	bfaa      	itet	ge
 8025382:	2300      	movge	r3, #0
 8025384:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8025388:	f8c8 3000 	strge.w	r3, [r8]
 802538c:	4b9a      	ldr	r3, [pc, #616]	; (80255f8 <_dtoa_r+0x2d8>)
 802538e:	bfbc      	itt	lt
 8025390:	2201      	movlt	r2, #1
 8025392:	f8c8 2000 	strlt.w	r2, [r8]
 8025396:	ea33 030b 	bics.w	r3, r3, fp
 802539a:	d11b      	bne.n	80253d4 <_dtoa_r+0xb4>
 802539c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802539e:	f242 730f 	movw	r3, #9999	; 0x270f
 80253a2:	6013      	str	r3, [r2, #0]
 80253a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80253a8:	4333      	orrs	r3, r6
 80253aa:	f000 8592 	beq.w	8025ed2 <_dtoa_r+0xbb2>
 80253ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80253b0:	b963      	cbnz	r3, 80253cc <_dtoa_r+0xac>
 80253b2:	4b92      	ldr	r3, [pc, #584]	; (80255fc <_dtoa_r+0x2dc>)
 80253b4:	e022      	b.n	80253fc <_dtoa_r+0xdc>
 80253b6:	4b92      	ldr	r3, [pc, #584]	; (8025600 <_dtoa_r+0x2e0>)
 80253b8:	9301      	str	r3, [sp, #4]
 80253ba:	3308      	adds	r3, #8
 80253bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80253be:	6013      	str	r3, [r2, #0]
 80253c0:	9801      	ldr	r0, [sp, #4]
 80253c2:	b013      	add	sp, #76	; 0x4c
 80253c4:	ecbd 8b04 	vpop	{d8-d9}
 80253c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80253cc:	4b8b      	ldr	r3, [pc, #556]	; (80255fc <_dtoa_r+0x2dc>)
 80253ce:	9301      	str	r3, [sp, #4]
 80253d0:	3303      	adds	r3, #3
 80253d2:	e7f3      	b.n	80253bc <_dtoa_r+0x9c>
 80253d4:	2200      	movs	r2, #0
 80253d6:	2300      	movs	r3, #0
 80253d8:	4650      	mov	r0, sl
 80253da:	4659      	mov	r1, fp
 80253dc:	f7db fb7e 	bl	8000adc <__aeabi_dcmpeq>
 80253e0:	ec4b ab19 	vmov	d9, sl, fp
 80253e4:	4680      	mov	r8, r0
 80253e6:	b158      	cbz	r0, 8025400 <_dtoa_r+0xe0>
 80253e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80253ea:	2301      	movs	r3, #1
 80253ec:	6013      	str	r3, [r2, #0]
 80253ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80253f0:	2b00      	cmp	r3, #0
 80253f2:	f000 856b 	beq.w	8025ecc <_dtoa_r+0xbac>
 80253f6:	4883      	ldr	r0, [pc, #524]	; (8025604 <_dtoa_r+0x2e4>)
 80253f8:	6018      	str	r0, [r3, #0]
 80253fa:	1e43      	subs	r3, r0, #1
 80253fc:	9301      	str	r3, [sp, #4]
 80253fe:	e7df      	b.n	80253c0 <_dtoa_r+0xa0>
 8025400:	ec4b ab10 	vmov	d0, sl, fp
 8025404:	aa10      	add	r2, sp, #64	; 0x40
 8025406:	a911      	add	r1, sp, #68	; 0x44
 8025408:	4620      	mov	r0, r4
 802540a:	f001 ff13 	bl	8027234 <__d2b>
 802540e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8025412:	ee08 0a10 	vmov	s16, r0
 8025416:	2d00      	cmp	r5, #0
 8025418:	f000 8084 	beq.w	8025524 <_dtoa_r+0x204>
 802541c:	ee19 3a90 	vmov	r3, s19
 8025420:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8025424:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8025428:	4656      	mov	r6, sl
 802542a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 802542e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8025432:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8025436:	4b74      	ldr	r3, [pc, #464]	; (8025608 <_dtoa_r+0x2e8>)
 8025438:	2200      	movs	r2, #0
 802543a:	4630      	mov	r0, r6
 802543c:	4639      	mov	r1, r7
 802543e:	f7da ff2d 	bl	800029c <__aeabi_dsub>
 8025442:	a365      	add	r3, pc, #404	; (adr r3, 80255d8 <_dtoa_r+0x2b8>)
 8025444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025448:	f7db f8e0 	bl	800060c <__aeabi_dmul>
 802544c:	a364      	add	r3, pc, #400	; (adr r3, 80255e0 <_dtoa_r+0x2c0>)
 802544e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025452:	f7da ff25 	bl	80002a0 <__adddf3>
 8025456:	4606      	mov	r6, r0
 8025458:	4628      	mov	r0, r5
 802545a:	460f      	mov	r7, r1
 802545c:	f7db f86c 	bl	8000538 <__aeabi_i2d>
 8025460:	a361      	add	r3, pc, #388	; (adr r3, 80255e8 <_dtoa_r+0x2c8>)
 8025462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025466:	f7db f8d1 	bl	800060c <__aeabi_dmul>
 802546a:	4602      	mov	r2, r0
 802546c:	460b      	mov	r3, r1
 802546e:	4630      	mov	r0, r6
 8025470:	4639      	mov	r1, r7
 8025472:	f7da ff15 	bl	80002a0 <__adddf3>
 8025476:	4606      	mov	r6, r0
 8025478:	460f      	mov	r7, r1
 802547a:	f7db fb77 	bl	8000b6c <__aeabi_d2iz>
 802547e:	2200      	movs	r2, #0
 8025480:	9000      	str	r0, [sp, #0]
 8025482:	2300      	movs	r3, #0
 8025484:	4630      	mov	r0, r6
 8025486:	4639      	mov	r1, r7
 8025488:	f7db fb32 	bl	8000af0 <__aeabi_dcmplt>
 802548c:	b150      	cbz	r0, 80254a4 <_dtoa_r+0x184>
 802548e:	9800      	ldr	r0, [sp, #0]
 8025490:	f7db f852 	bl	8000538 <__aeabi_i2d>
 8025494:	4632      	mov	r2, r6
 8025496:	463b      	mov	r3, r7
 8025498:	f7db fb20 	bl	8000adc <__aeabi_dcmpeq>
 802549c:	b910      	cbnz	r0, 80254a4 <_dtoa_r+0x184>
 802549e:	9b00      	ldr	r3, [sp, #0]
 80254a0:	3b01      	subs	r3, #1
 80254a2:	9300      	str	r3, [sp, #0]
 80254a4:	9b00      	ldr	r3, [sp, #0]
 80254a6:	2b16      	cmp	r3, #22
 80254a8:	d85a      	bhi.n	8025560 <_dtoa_r+0x240>
 80254aa:	9a00      	ldr	r2, [sp, #0]
 80254ac:	4b57      	ldr	r3, [pc, #348]	; (802560c <_dtoa_r+0x2ec>)
 80254ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80254b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80254b6:	ec51 0b19 	vmov	r0, r1, d9
 80254ba:	f7db fb19 	bl	8000af0 <__aeabi_dcmplt>
 80254be:	2800      	cmp	r0, #0
 80254c0:	d050      	beq.n	8025564 <_dtoa_r+0x244>
 80254c2:	9b00      	ldr	r3, [sp, #0]
 80254c4:	3b01      	subs	r3, #1
 80254c6:	9300      	str	r3, [sp, #0]
 80254c8:	2300      	movs	r3, #0
 80254ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80254cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80254ce:	1b5d      	subs	r5, r3, r5
 80254d0:	1e6b      	subs	r3, r5, #1
 80254d2:	9305      	str	r3, [sp, #20]
 80254d4:	bf45      	ittet	mi
 80254d6:	f1c5 0301 	rsbmi	r3, r5, #1
 80254da:	9304      	strmi	r3, [sp, #16]
 80254dc:	2300      	movpl	r3, #0
 80254de:	2300      	movmi	r3, #0
 80254e0:	bf4c      	ite	mi
 80254e2:	9305      	strmi	r3, [sp, #20]
 80254e4:	9304      	strpl	r3, [sp, #16]
 80254e6:	9b00      	ldr	r3, [sp, #0]
 80254e8:	2b00      	cmp	r3, #0
 80254ea:	db3d      	blt.n	8025568 <_dtoa_r+0x248>
 80254ec:	9b05      	ldr	r3, [sp, #20]
 80254ee:	9a00      	ldr	r2, [sp, #0]
 80254f0:	920a      	str	r2, [sp, #40]	; 0x28
 80254f2:	4413      	add	r3, r2
 80254f4:	9305      	str	r3, [sp, #20]
 80254f6:	2300      	movs	r3, #0
 80254f8:	9307      	str	r3, [sp, #28]
 80254fa:	9b06      	ldr	r3, [sp, #24]
 80254fc:	2b09      	cmp	r3, #9
 80254fe:	f200 8089 	bhi.w	8025614 <_dtoa_r+0x2f4>
 8025502:	2b05      	cmp	r3, #5
 8025504:	bfc4      	itt	gt
 8025506:	3b04      	subgt	r3, #4
 8025508:	9306      	strgt	r3, [sp, #24]
 802550a:	9b06      	ldr	r3, [sp, #24]
 802550c:	f1a3 0302 	sub.w	r3, r3, #2
 8025510:	bfcc      	ite	gt
 8025512:	2500      	movgt	r5, #0
 8025514:	2501      	movle	r5, #1
 8025516:	2b03      	cmp	r3, #3
 8025518:	f200 8087 	bhi.w	802562a <_dtoa_r+0x30a>
 802551c:	e8df f003 	tbb	[pc, r3]
 8025520:	59383a2d 	.word	0x59383a2d
 8025524:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8025528:	441d      	add	r5, r3
 802552a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 802552e:	2b20      	cmp	r3, #32
 8025530:	bfc1      	itttt	gt
 8025532:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8025536:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 802553a:	fa0b f303 	lslgt.w	r3, fp, r3
 802553e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8025542:	bfda      	itte	le
 8025544:	f1c3 0320 	rsble	r3, r3, #32
 8025548:	fa06 f003 	lslle.w	r0, r6, r3
 802554c:	4318      	orrgt	r0, r3
 802554e:	f7da ffe3 	bl	8000518 <__aeabi_ui2d>
 8025552:	2301      	movs	r3, #1
 8025554:	4606      	mov	r6, r0
 8025556:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 802555a:	3d01      	subs	r5, #1
 802555c:	930e      	str	r3, [sp, #56]	; 0x38
 802555e:	e76a      	b.n	8025436 <_dtoa_r+0x116>
 8025560:	2301      	movs	r3, #1
 8025562:	e7b2      	b.n	80254ca <_dtoa_r+0x1aa>
 8025564:	900b      	str	r0, [sp, #44]	; 0x2c
 8025566:	e7b1      	b.n	80254cc <_dtoa_r+0x1ac>
 8025568:	9b04      	ldr	r3, [sp, #16]
 802556a:	9a00      	ldr	r2, [sp, #0]
 802556c:	1a9b      	subs	r3, r3, r2
 802556e:	9304      	str	r3, [sp, #16]
 8025570:	4253      	negs	r3, r2
 8025572:	9307      	str	r3, [sp, #28]
 8025574:	2300      	movs	r3, #0
 8025576:	930a      	str	r3, [sp, #40]	; 0x28
 8025578:	e7bf      	b.n	80254fa <_dtoa_r+0x1da>
 802557a:	2300      	movs	r3, #0
 802557c:	9308      	str	r3, [sp, #32]
 802557e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025580:	2b00      	cmp	r3, #0
 8025582:	dc55      	bgt.n	8025630 <_dtoa_r+0x310>
 8025584:	2301      	movs	r3, #1
 8025586:	e9cd 3302 	strd	r3, r3, [sp, #8]
 802558a:	461a      	mov	r2, r3
 802558c:	9209      	str	r2, [sp, #36]	; 0x24
 802558e:	e00c      	b.n	80255aa <_dtoa_r+0x28a>
 8025590:	2301      	movs	r3, #1
 8025592:	e7f3      	b.n	802557c <_dtoa_r+0x25c>
 8025594:	2300      	movs	r3, #0
 8025596:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025598:	9308      	str	r3, [sp, #32]
 802559a:	9b00      	ldr	r3, [sp, #0]
 802559c:	4413      	add	r3, r2
 802559e:	9302      	str	r3, [sp, #8]
 80255a0:	3301      	adds	r3, #1
 80255a2:	2b01      	cmp	r3, #1
 80255a4:	9303      	str	r3, [sp, #12]
 80255a6:	bfb8      	it	lt
 80255a8:	2301      	movlt	r3, #1
 80255aa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80255ac:	2200      	movs	r2, #0
 80255ae:	6042      	str	r2, [r0, #4]
 80255b0:	2204      	movs	r2, #4
 80255b2:	f102 0614 	add.w	r6, r2, #20
 80255b6:	429e      	cmp	r6, r3
 80255b8:	6841      	ldr	r1, [r0, #4]
 80255ba:	d93d      	bls.n	8025638 <_dtoa_r+0x318>
 80255bc:	4620      	mov	r0, r4
 80255be:	f001 fa4b 	bl	8026a58 <_Balloc>
 80255c2:	9001      	str	r0, [sp, #4]
 80255c4:	2800      	cmp	r0, #0
 80255c6:	d13b      	bne.n	8025640 <_dtoa_r+0x320>
 80255c8:	4b11      	ldr	r3, [pc, #68]	; (8025610 <_dtoa_r+0x2f0>)
 80255ca:	4602      	mov	r2, r0
 80255cc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80255d0:	e6c0      	b.n	8025354 <_dtoa_r+0x34>
 80255d2:	2301      	movs	r3, #1
 80255d4:	e7df      	b.n	8025596 <_dtoa_r+0x276>
 80255d6:	bf00      	nop
 80255d8:	636f4361 	.word	0x636f4361
 80255dc:	3fd287a7 	.word	0x3fd287a7
 80255e0:	8b60c8b3 	.word	0x8b60c8b3
 80255e4:	3fc68a28 	.word	0x3fc68a28
 80255e8:	509f79fb 	.word	0x509f79fb
 80255ec:	3fd34413 	.word	0x3fd34413
 80255f0:	0802a156 	.word	0x0802a156
 80255f4:	0802a16d 	.word	0x0802a16d
 80255f8:	7ff00000 	.word	0x7ff00000
 80255fc:	0802a152 	.word	0x0802a152
 8025600:	0802a149 	.word	0x0802a149
 8025604:	08029fd2 	.word	0x08029fd2
 8025608:	3ff80000 	.word	0x3ff80000
 802560c:	0802a340 	.word	0x0802a340
 8025610:	0802a1c8 	.word	0x0802a1c8
 8025614:	2501      	movs	r5, #1
 8025616:	2300      	movs	r3, #0
 8025618:	9306      	str	r3, [sp, #24]
 802561a:	9508      	str	r5, [sp, #32]
 802561c:	f04f 33ff 	mov.w	r3, #4294967295
 8025620:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8025624:	2200      	movs	r2, #0
 8025626:	2312      	movs	r3, #18
 8025628:	e7b0      	b.n	802558c <_dtoa_r+0x26c>
 802562a:	2301      	movs	r3, #1
 802562c:	9308      	str	r3, [sp, #32]
 802562e:	e7f5      	b.n	802561c <_dtoa_r+0x2fc>
 8025630:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025632:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8025636:	e7b8      	b.n	80255aa <_dtoa_r+0x28a>
 8025638:	3101      	adds	r1, #1
 802563a:	6041      	str	r1, [r0, #4]
 802563c:	0052      	lsls	r2, r2, #1
 802563e:	e7b8      	b.n	80255b2 <_dtoa_r+0x292>
 8025640:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8025642:	9a01      	ldr	r2, [sp, #4]
 8025644:	601a      	str	r2, [r3, #0]
 8025646:	9b03      	ldr	r3, [sp, #12]
 8025648:	2b0e      	cmp	r3, #14
 802564a:	f200 809d 	bhi.w	8025788 <_dtoa_r+0x468>
 802564e:	2d00      	cmp	r5, #0
 8025650:	f000 809a 	beq.w	8025788 <_dtoa_r+0x468>
 8025654:	9b00      	ldr	r3, [sp, #0]
 8025656:	2b00      	cmp	r3, #0
 8025658:	dd32      	ble.n	80256c0 <_dtoa_r+0x3a0>
 802565a:	4ab7      	ldr	r2, [pc, #732]	; (8025938 <_dtoa_r+0x618>)
 802565c:	f003 030f 	and.w	r3, r3, #15
 8025660:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8025664:	e9d3 8900 	ldrd	r8, r9, [r3]
 8025668:	9b00      	ldr	r3, [sp, #0]
 802566a:	05d8      	lsls	r0, r3, #23
 802566c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8025670:	d516      	bpl.n	80256a0 <_dtoa_r+0x380>
 8025672:	4bb2      	ldr	r3, [pc, #712]	; (802593c <_dtoa_r+0x61c>)
 8025674:	ec51 0b19 	vmov	r0, r1, d9
 8025678:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 802567c:	f7db f8f0 	bl	8000860 <__aeabi_ddiv>
 8025680:	f007 070f 	and.w	r7, r7, #15
 8025684:	4682      	mov	sl, r0
 8025686:	468b      	mov	fp, r1
 8025688:	2503      	movs	r5, #3
 802568a:	4eac      	ldr	r6, [pc, #688]	; (802593c <_dtoa_r+0x61c>)
 802568c:	b957      	cbnz	r7, 80256a4 <_dtoa_r+0x384>
 802568e:	4642      	mov	r2, r8
 8025690:	464b      	mov	r3, r9
 8025692:	4650      	mov	r0, sl
 8025694:	4659      	mov	r1, fp
 8025696:	f7db f8e3 	bl	8000860 <__aeabi_ddiv>
 802569a:	4682      	mov	sl, r0
 802569c:	468b      	mov	fp, r1
 802569e:	e028      	b.n	80256f2 <_dtoa_r+0x3d2>
 80256a0:	2502      	movs	r5, #2
 80256a2:	e7f2      	b.n	802568a <_dtoa_r+0x36a>
 80256a4:	07f9      	lsls	r1, r7, #31
 80256a6:	d508      	bpl.n	80256ba <_dtoa_r+0x39a>
 80256a8:	4640      	mov	r0, r8
 80256aa:	4649      	mov	r1, r9
 80256ac:	e9d6 2300 	ldrd	r2, r3, [r6]
 80256b0:	f7da ffac 	bl	800060c <__aeabi_dmul>
 80256b4:	3501      	adds	r5, #1
 80256b6:	4680      	mov	r8, r0
 80256b8:	4689      	mov	r9, r1
 80256ba:	107f      	asrs	r7, r7, #1
 80256bc:	3608      	adds	r6, #8
 80256be:	e7e5      	b.n	802568c <_dtoa_r+0x36c>
 80256c0:	f000 809b 	beq.w	80257fa <_dtoa_r+0x4da>
 80256c4:	9b00      	ldr	r3, [sp, #0]
 80256c6:	4f9d      	ldr	r7, [pc, #628]	; (802593c <_dtoa_r+0x61c>)
 80256c8:	425e      	negs	r6, r3
 80256ca:	4b9b      	ldr	r3, [pc, #620]	; (8025938 <_dtoa_r+0x618>)
 80256cc:	f006 020f 	and.w	r2, r6, #15
 80256d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80256d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80256d8:	ec51 0b19 	vmov	r0, r1, d9
 80256dc:	f7da ff96 	bl	800060c <__aeabi_dmul>
 80256e0:	1136      	asrs	r6, r6, #4
 80256e2:	4682      	mov	sl, r0
 80256e4:	468b      	mov	fp, r1
 80256e6:	2300      	movs	r3, #0
 80256e8:	2502      	movs	r5, #2
 80256ea:	2e00      	cmp	r6, #0
 80256ec:	d17a      	bne.n	80257e4 <_dtoa_r+0x4c4>
 80256ee:	2b00      	cmp	r3, #0
 80256f0:	d1d3      	bne.n	802569a <_dtoa_r+0x37a>
 80256f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80256f4:	2b00      	cmp	r3, #0
 80256f6:	f000 8082 	beq.w	80257fe <_dtoa_r+0x4de>
 80256fa:	4b91      	ldr	r3, [pc, #580]	; (8025940 <_dtoa_r+0x620>)
 80256fc:	2200      	movs	r2, #0
 80256fe:	4650      	mov	r0, sl
 8025700:	4659      	mov	r1, fp
 8025702:	f7db f9f5 	bl	8000af0 <__aeabi_dcmplt>
 8025706:	2800      	cmp	r0, #0
 8025708:	d079      	beq.n	80257fe <_dtoa_r+0x4de>
 802570a:	9b03      	ldr	r3, [sp, #12]
 802570c:	2b00      	cmp	r3, #0
 802570e:	d076      	beq.n	80257fe <_dtoa_r+0x4de>
 8025710:	9b02      	ldr	r3, [sp, #8]
 8025712:	2b00      	cmp	r3, #0
 8025714:	dd36      	ble.n	8025784 <_dtoa_r+0x464>
 8025716:	9b00      	ldr	r3, [sp, #0]
 8025718:	4650      	mov	r0, sl
 802571a:	4659      	mov	r1, fp
 802571c:	1e5f      	subs	r7, r3, #1
 802571e:	2200      	movs	r2, #0
 8025720:	4b88      	ldr	r3, [pc, #544]	; (8025944 <_dtoa_r+0x624>)
 8025722:	f7da ff73 	bl	800060c <__aeabi_dmul>
 8025726:	9e02      	ldr	r6, [sp, #8]
 8025728:	4682      	mov	sl, r0
 802572a:	468b      	mov	fp, r1
 802572c:	3501      	adds	r5, #1
 802572e:	4628      	mov	r0, r5
 8025730:	f7da ff02 	bl	8000538 <__aeabi_i2d>
 8025734:	4652      	mov	r2, sl
 8025736:	465b      	mov	r3, fp
 8025738:	f7da ff68 	bl	800060c <__aeabi_dmul>
 802573c:	4b82      	ldr	r3, [pc, #520]	; (8025948 <_dtoa_r+0x628>)
 802573e:	2200      	movs	r2, #0
 8025740:	f7da fdae 	bl	80002a0 <__adddf3>
 8025744:	46d0      	mov	r8, sl
 8025746:	46d9      	mov	r9, fp
 8025748:	4682      	mov	sl, r0
 802574a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 802574e:	2e00      	cmp	r6, #0
 8025750:	d158      	bne.n	8025804 <_dtoa_r+0x4e4>
 8025752:	4b7e      	ldr	r3, [pc, #504]	; (802594c <_dtoa_r+0x62c>)
 8025754:	2200      	movs	r2, #0
 8025756:	4640      	mov	r0, r8
 8025758:	4649      	mov	r1, r9
 802575a:	f7da fd9f 	bl	800029c <__aeabi_dsub>
 802575e:	4652      	mov	r2, sl
 8025760:	465b      	mov	r3, fp
 8025762:	4680      	mov	r8, r0
 8025764:	4689      	mov	r9, r1
 8025766:	f7db f9e1 	bl	8000b2c <__aeabi_dcmpgt>
 802576a:	2800      	cmp	r0, #0
 802576c:	f040 8295 	bne.w	8025c9a <_dtoa_r+0x97a>
 8025770:	4652      	mov	r2, sl
 8025772:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8025776:	4640      	mov	r0, r8
 8025778:	4649      	mov	r1, r9
 802577a:	f7db f9b9 	bl	8000af0 <__aeabi_dcmplt>
 802577e:	2800      	cmp	r0, #0
 8025780:	f040 8289 	bne.w	8025c96 <_dtoa_r+0x976>
 8025784:	ec5b ab19 	vmov	sl, fp, d9
 8025788:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802578a:	2b00      	cmp	r3, #0
 802578c:	f2c0 8148 	blt.w	8025a20 <_dtoa_r+0x700>
 8025790:	9a00      	ldr	r2, [sp, #0]
 8025792:	2a0e      	cmp	r2, #14
 8025794:	f300 8144 	bgt.w	8025a20 <_dtoa_r+0x700>
 8025798:	4b67      	ldr	r3, [pc, #412]	; (8025938 <_dtoa_r+0x618>)
 802579a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802579e:	e9d3 8900 	ldrd	r8, r9, [r3]
 80257a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80257a4:	2b00      	cmp	r3, #0
 80257a6:	f280 80d5 	bge.w	8025954 <_dtoa_r+0x634>
 80257aa:	9b03      	ldr	r3, [sp, #12]
 80257ac:	2b00      	cmp	r3, #0
 80257ae:	f300 80d1 	bgt.w	8025954 <_dtoa_r+0x634>
 80257b2:	f040 826f 	bne.w	8025c94 <_dtoa_r+0x974>
 80257b6:	4b65      	ldr	r3, [pc, #404]	; (802594c <_dtoa_r+0x62c>)
 80257b8:	2200      	movs	r2, #0
 80257ba:	4640      	mov	r0, r8
 80257bc:	4649      	mov	r1, r9
 80257be:	f7da ff25 	bl	800060c <__aeabi_dmul>
 80257c2:	4652      	mov	r2, sl
 80257c4:	465b      	mov	r3, fp
 80257c6:	f7db f9a7 	bl	8000b18 <__aeabi_dcmpge>
 80257ca:	9e03      	ldr	r6, [sp, #12]
 80257cc:	4637      	mov	r7, r6
 80257ce:	2800      	cmp	r0, #0
 80257d0:	f040 8245 	bne.w	8025c5e <_dtoa_r+0x93e>
 80257d4:	9d01      	ldr	r5, [sp, #4]
 80257d6:	2331      	movs	r3, #49	; 0x31
 80257d8:	f805 3b01 	strb.w	r3, [r5], #1
 80257dc:	9b00      	ldr	r3, [sp, #0]
 80257de:	3301      	adds	r3, #1
 80257e0:	9300      	str	r3, [sp, #0]
 80257e2:	e240      	b.n	8025c66 <_dtoa_r+0x946>
 80257e4:	07f2      	lsls	r2, r6, #31
 80257e6:	d505      	bpl.n	80257f4 <_dtoa_r+0x4d4>
 80257e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80257ec:	f7da ff0e 	bl	800060c <__aeabi_dmul>
 80257f0:	3501      	adds	r5, #1
 80257f2:	2301      	movs	r3, #1
 80257f4:	1076      	asrs	r6, r6, #1
 80257f6:	3708      	adds	r7, #8
 80257f8:	e777      	b.n	80256ea <_dtoa_r+0x3ca>
 80257fa:	2502      	movs	r5, #2
 80257fc:	e779      	b.n	80256f2 <_dtoa_r+0x3d2>
 80257fe:	9f00      	ldr	r7, [sp, #0]
 8025800:	9e03      	ldr	r6, [sp, #12]
 8025802:	e794      	b.n	802572e <_dtoa_r+0x40e>
 8025804:	9901      	ldr	r1, [sp, #4]
 8025806:	4b4c      	ldr	r3, [pc, #304]	; (8025938 <_dtoa_r+0x618>)
 8025808:	4431      	add	r1, r6
 802580a:	910d      	str	r1, [sp, #52]	; 0x34
 802580c:	9908      	ldr	r1, [sp, #32]
 802580e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8025812:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8025816:	2900      	cmp	r1, #0
 8025818:	d043      	beq.n	80258a2 <_dtoa_r+0x582>
 802581a:	494d      	ldr	r1, [pc, #308]	; (8025950 <_dtoa_r+0x630>)
 802581c:	2000      	movs	r0, #0
 802581e:	f7db f81f 	bl	8000860 <__aeabi_ddiv>
 8025822:	4652      	mov	r2, sl
 8025824:	465b      	mov	r3, fp
 8025826:	f7da fd39 	bl	800029c <__aeabi_dsub>
 802582a:	9d01      	ldr	r5, [sp, #4]
 802582c:	4682      	mov	sl, r0
 802582e:	468b      	mov	fp, r1
 8025830:	4649      	mov	r1, r9
 8025832:	4640      	mov	r0, r8
 8025834:	f7db f99a 	bl	8000b6c <__aeabi_d2iz>
 8025838:	4606      	mov	r6, r0
 802583a:	f7da fe7d 	bl	8000538 <__aeabi_i2d>
 802583e:	4602      	mov	r2, r0
 8025840:	460b      	mov	r3, r1
 8025842:	4640      	mov	r0, r8
 8025844:	4649      	mov	r1, r9
 8025846:	f7da fd29 	bl	800029c <__aeabi_dsub>
 802584a:	3630      	adds	r6, #48	; 0x30
 802584c:	f805 6b01 	strb.w	r6, [r5], #1
 8025850:	4652      	mov	r2, sl
 8025852:	465b      	mov	r3, fp
 8025854:	4680      	mov	r8, r0
 8025856:	4689      	mov	r9, r1
 8025858:	f7db f94a 	bl	8000af0 <__aeabi_dcmplt>
 802585c:	2800      	cmp	r0, #0
 802585e:	d163      	bne.n	8025928 <_dtoa_r+0x608>
 8025860:	4642      	mov	r2, r8
 8025862:	464b      	mov	r3, r9
 8025864:	4936      	ldr	r1, [pc, #216]	; (8025940 <_dtoa_r+0x620>)
 8025866:	2000      	movs	r0, #0
 8025868:	f7da fd18 	bl	800029c <__aeabi_dsub>
 802586c:	4652      	mov	r2, sl
 802586e:	465b      	mov	r3, fp
 8025870:	f7db f93e 	bl	8000af0 <__aeabi_dcmplt>
 8025874:	2800      	cmp	r0, #0
 8025876:	f040 80b5 	bne.w	80259e4 <_dtoa_r+0x6c4>
 802587a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802587c:	429d      	cmp	r5, r3
 802587e:	d081      	beq.n	8025784 <_dtoa_r+0x464>
 8025880:	4b30      	ldr	r3, [pc, #192]	; (8025944 <_dtoa_r+0x624>)
 8025882:	2200      	movs	r2, #0
 8025884:	4650      	mov	r0, sl
 8025886:	4659      	mov	r1, fp
 8025888:	f7da fec0 	bl	800060c <__aeabi_dmul>
 802588c:	4b2d      	ldr	r3, [pc, #180]	; (8025944 <_dtoa_r+0x624>)
 802588e:	4682      	mov	sl, r0
 8025890:	468b      	mov	fp, r1
 8025892:	4640      	mov	r0, r8
 8025894:	4649      	mov	r1, r9
 8025896:	2200      	movs	r2, #0
 8025898:	f7da feb8 	bl	800060c <__aeabi_dmul>
 802589c:	4680      	mov	r8, r0
 802589e:	4689      	mov	r9, r1
 80258a0:	e7c6      	b.n	8025830 <_dtoa_r+0x510>
 80258a2:	4650      	mov	r0, sl
 80258a4:	4659      	mov	r1, fp
 80258a6:	f7da feb1 	bl	800060c <__aeabi_dmul>
 80258aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80258ac:	9d01      	ldr	r5, [sp, #4]
 80258ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80258b0:	4682      	mov	sl, r0
 80258b2:	468b      	mov	fp, r1
 80258b4:	4649      	mov	r1, r9
 80258b6:	4640      	mov	r0, r8
 80258b8:	f7db f958 	bl	8000b6c <__aeabi_d2iz>
 80258bc:	4606      	mov	r6, r0
 80258be:	f7da fe3b 	bl	8000538 <__aeabi_i2d>
 80258c2:	3630      	adds	r6, #48	; 0x30
 80258c4:	4602      	mov	r2, r0
 80258c6:	460b      	mov	r3, r1
 80258c8:	4640      	mov	r0, r8
 80258ca:	4649      	mov	r1, r9
 80258cc:	f7da fce6 	bl	800029c <__aeabi_dsub>
 80258d0:	f805 6b01 	strb.w	r6, [r5], #1
 80258d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80258d6:	429d      	cmp	r5, r3
 80258d8:	4680      	mov	r8, r0
 80258da:	4689      	mov	r9, r1
 80258dc:	f04f 0200 	mov.w	r2, #0
 80258e0:	d124      	bne.n	802592c <_dtoa_r+0x60c>
 80258e2:	4b1b      	ldr	r3, [pc, #108]	; (8025950 <_dtoa_r+0x630>)
 80258e4:	4650      	mov	r0, sl
 80258e6:	4659      	mov	r1, fp
 80258e8:	f7da fcda 	bl	80002a0 <__adddf3>
 80258ec:	4602      	mov	r2, r0
 80258ee:	460b      	mov	r3, r1
 80258f0:	4640      	mov	r0, r8
 80258f2:	4649      	mov	r1, r9
 80258f4:	f7db f91a 	bl	8000b2c <__aeabi_dcmpgt>
 80258f8:	2800      	cmp	r0, #0
 80258fa:	d173      	bne.n	80259e4 <_dtoa_r+0x6c4>
 80258fc:	4652      	mov	r2, sl
 80258fe:	465b      	mov	r3, fp
 8025900:	4913      	ldr	r1, [pc, #76]	; (8025950 <_dtoa_r+0x630>)
 8025902:	2000      	movs	r0, #0
 8025904:	f7da fcca 	bl	800029c <__aeabi_dsub>
 8025908:	4602      	mov	r2, r0
 802590a:	460b      	mov	r3, r1
 802590c:	4640      	mov	r0, r8
 802590e:	4649      	mov	r1, r9
 8025910:	f7db f8ee 	bl	8000af0 <__aeabi_dcmplt>
 8025914:	2800      	cmp	r0, #0
 8025916:	f43f af35 	beq.w	8025784 <_dtoa_r+0x464>
 802591a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802591c:	1e6b      	subs	r3, r5, #1
 802591e:	930f      	str	r3, [sp, #60]	; 0x3c
 8025920:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8025924:	2b30      	cmp	r3, #48	; 0x30
 8025926:	d0f8      	beq.n	802591a <_dtoa_r+0x5fa>
 8025928:	9700      	str	r7, [sp, #0]
 802592a:	e049      	b.n	80259c0 <_dtoa_r+0x6a0>
 802592c:	4b05      	ldr	r3, [pc, #20]	; (8025944 <_dtoa_r+0x624>)
 802592e:	f7da fe6d 	bl	800060c <__aeabi_dmul>
 8025932:	4680      	mov	r8, r0
 8025934:	4689      	mov	r9, r1
 8025936:	e7bd      	b.n	80258b4 <_dtoa_r+0x594>
 8025938:	0802a340 	.word	0x0802a340
 802593c:	0802a318 	.word	0x0802a318
 8025940:	3ff00000 	.word	0x3ff00000
 8025944:	40240000 	.word	0x40240000
 8025948:	401c0000 	.word	0x401c0000
 802594c:	40140000 	.word	0x40140000
 8025950:	3fe00000 	.word	0x3fe00000
 8025954:	9d01      	ldr	r5, [sp, #4]
 8025956:	4656      	mov	r6, sl
 8025958:	465f      	mov	r7, fp
 802595a:	4642      	mov	r2, r8
 802595c:	464b      	mov	r3, r9
 802595e:	4630      	mov	r0, r6
 8025960:	4639      	mov	r1, r7
 8025962:	f7da ff7d 	bl	8000860 <__aeabi_ddiv>
 8025966:	f7db f901 	bl	8000b6c <__aeabi_d2iz>
 802596a:	4682      	mov	sl, r0
 802596c:	f7da fde4 	bl	8000538 <__aeabi_i2d>
 8025970:	4642      	mov	r2, r8
 8025972:	464b      	mov	r3, r9
 8025974:	f7da fe4a 	bl	800060c <__aeabi_dmul>
 8025978:	4602      	mov	r2, r0
 802597a:	460b      	mov	r3, r1
 802597c:	4630      	mov	r0, r6
 802597e:	4639      	mov	r1, r7
 8025980:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8025984:	f7da fc8a 	bl	800029c <__aeabi_dsub>
 8025988:	f805 6b01 	strb.w	r6, [r5], #1
 802598c:	9e01      	ldr	r6, [sp, #4]
 802598e:	9f03      	ldr	r7, [sp, #12]
 8025990:	1bae      	subs	r6, r5, r6
 8025992:	42b7      	cmp	r7, r6
 8025994:	4602      	mov	r2, r0
 8025996:	460b      	mov	r3, r1
 8025998:	d135      	bne.n	8025a06 <_dtoa_r+0x6e6>
 802599a:	f7da fc81 	bl	80002a0 <__adddf3>
 802599e:	4642      	mov	r2, r8
 80259a0:	464b      	mov	r3, r9
 80259a2:	4606      	mov	r6, r0
 80259a4:	460f      	mov	r7, r1
 80259a6:	f7db f8c1 	bl	8000b2c <__aeabi_dcmpgt>
 80259aa:	b9d0      	cbnz	r0, 80259e2 <_dtoa_r+0x6c2>
 80259ac:	4642      	mov	r2, r8
 80259ae:	464b      	mov	r3, r9
 80259b0:	4630      	mov	r0, r6
 80259b2:	4639      	mov	r1, r7
 80259b4:	f7db f892 	bl	8000adc <__aeabi_dcmpeq>
 80259b8:	b110      	cbz	r0, 80259c0 <_dtoa_r+0x6a0>
 80259ba:	f01a 0f01 	tst.w	sl, #1
 80259be:	d110      	bne.n	80259e2 <_dtoa_r+0x6c2>
 80259c0:	4620      	mov	r0, r4
 80259c2:	ee18 1a10 	vmov	r1, s16
 80259c6:	f001 f887 	bl	8026ad8 <_Bfree>
 80259ca:	2300      	movs	r3, #0
 80259cc:	9800      	ldr	r0, [sp, #0]
 80259ce:	702b      	strb	r3, [r5, #0]
 80259d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80259d2:	3001      	adds	r0, #1
 80259d4:	6018      	str	r0, [r3, #0]
 80259d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80259d8:	2b00      	cmp	r3, #0
 80259da:	f43f acf1 	beq.w	80253c0 <_dtoa_r+0xa0>
 80259de:	601d      	str	r5, [r3, #0]
 80259e0:	e4ee      	b.n	80253c0 <_dtoa_r+0xa0>
 80259e2:	9f00      	ldr	r7, [sp, #0]
 80259e4:	462b      	mov	r3, r5
 80259e6:	461d      	mov	r5, r3
 80259e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80259ec:	2a39      	cmp	r2, #57	; 0x39
 80259ee:	d106      	bne.n	80259fe <_dtoa_r+0x6de>
 80259f0:	9a01      	ldr	r2, [sp, #4]
 80259f2:	429a      	cmp	r2, r3
 80259f4:	d1f7      	bne.n	80259e6 <_dtoa_r+0x6c6>
 80259f6:	9901      	ldr	r1, [sp, #4]
 80259f8:	2230      	movs	r2, #48	; 0x30
 80259fa:	3701      	adds	r7, #1
 80259fc:	700a      	strb	r2, [r1, #0]
 80259fe:	781a      	ldrb	r2, [r3, #0]
 8025a00:	3201      	adds	r2, #1
 8025a02:	701a      	strb	r2, [r3, #0]
 8025a04:	e790      	b.n	8025928 <_dtoa_r+0x608>
 8025a06:	4ba6      	ldr	r3, [pc, #664]	; (8025ca0 <_dtoa_r+0x980>)
 8025a08:	2200      	movs	r2, #0
 8025a0a:	f7da fdff 	bl	800060c <__aeabi_dmul>
 8025a0e:	2200      	movs	r2, #0
 8025a10:	2300      	movs	r3, #0
 8025a12:	4606      	mov	r6, r0
 8025a14:	460f      	mov	r7, r1
 8025a16:	f7db f861 	bl	8000adc <__aeabi_dcmpeq>
 8025a1a:	2800      	cmp	r0, #0
 8025a1c:	d09d      	beq.n	802595a <_dtoa_r+0x63a>
 8025a1e:	e7cf      	b.n	80259c0 <_dtoa_r+0x6a0>
 8025a20:	9a08      	ldr	r2, [sp, #32]
 8025a22:	2a00      	cmp	r2, #0
 8025a24:	f000 80d7 	beq.w	8025bd6 <_dtoa_r+0x8b6>
 8025a28:	9a06      	ldr	r2, [sp, #24]
 8025a2a:	2a01      	cmp	r2, #1
 8025a2c:	f300 80ba 	bgt.w	8025ba4 <_dtoa_r+0x884>
 8025a30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8025a32:	2a00      	cmp	r2, #0
 8025a34:	f000 80b2 	beq.w	8025b9c <_dtoa_r+0x87c>
 8025a38:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8025a3c:	9e07      	ldr	r6, [sp, #28]
 8025a3e:	9d04      	ldr	r5, [sp, #16]
 8025a40:	9a04      	ldr	r2, [sp, #16]
 8025a42:	441a      	add	r2, r3
 8025a44:	9204      	str	r2, [sp, #16]
 8025a46:	9a05      	ldr	r2, [sp, #20]
 8025a48:	2101      	movs	r1, #1
 8025a4a:	441a      	add	r2, r3
 8025a4c:	4620      	mov	r0, r4
 8025a4e:	9205      	str	r2, [sp, #20]
 8025a50:	f001 f944 	bl	8026cdc <__i2b>
 8025a54:	4607      	mov	r7, r0
 8025a56:	2d00      	cmp	r5, #0
 8025a58:	dd0c      	ble.n	8025a74 <_dtoa_r+0x754>
 8025a5a:	9b05      	ldr	r3, [sp, #20]
 8025a5c:	2b00      	cmp	r3, #0
 8025a5e:	dd09      	ble.n	8025a74 <_dtoa_r+0x754>
 8025a60:	42ab      	cmp	r3, r5
 8025a62:	9a04      	ldr	r2, [sp, #16]
 8025a64:	bfa8      	it	ge
 8025a66:	462b      	movge	r3, r5
 8025a68:	1ad2      	subs	r2, r2, r3
 8025a6a:	9204      	str	r2, [sp, #16]
 8025a6c:	9a05      	ldr	r2, [sp, #20]
 8025a6e:	1aed      	subs	r5, r5, r3
 8025a70:	1ad3      	subs	r3, r2, r3
 8025a72:	9305      	str	r3, [sp, #20]
 8025a74:	9b07      	ldr	r3, [sp, #28]
 8025a76:	b31b      	cbz	r3, 8025ac0 <_dtoa_r+0x7a0>
 8025a78:	9b08      	ldr	r3, [sp, #32]
 8025a7a:	2b00      	cmp	r3, #0
 8025a7c:	f000 80af 	beq.w	8025bde <_dtoa_r+0x8be>
 8025a80:	2e00      	cmp	r6, #0
 8025a82:	dd13      	ble.n	8025aac <_dtoa_r+0x78c>
 8025a84:	4639      	mov	r1, r7
 8025a86:	4632      	mov	r2, r6
 8025a88:	4620      	mov	r0, r4
 8025a8a:	f001 f9e7 	bl	8026e5c <__pow5mult>
 8025a8e:	ee18 2a10 	vmov	r2, s16
 8025a92:	4601      	mov	r1, r0
 8025a94:	4607      	mov	r7, r0
 8025a96:	4620      	mov	r0, r4
 8025a98:	f001 f936 	bl	8026d08 <__multiply>
 8025a9c:	ee18 1a10 	vmov	r1, s16
 8025aa0:	4680      	mov	r8, r0
 8025aa2:	4620      	mov	r0, r4
 8025aa4:	f001 f818 	bl	8026ad8 <_Bfree>
 8025aa8:	ee08 8a10 	vmov	s16, r8
 8025aac:	9b07      	ldr	r3, [sp, #28]
 8025aae:	1b9a      	subs	r2, r3, r6
 8025ab0:	d006      	beq.n	8025ac0 <_dtoa_r+0x7a0>
 8025ab2:	ee18 1a10 	vmov	r1, s16
 8025ab6:	4620      	mov	r0, r4
 8025ab8:	f001 f9d0 	bl	8026e5c <__pow5mult>
 8025abc:	ee08 0a10 	vmov	s16, r0
 8025ac0:	2101      	movs	r1, #1
 8025ac2:	4620      	mov	r0, r4
 8025ac4:	f001 f90a 	bl	8026cdc <__i2b>
 8025ac8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025aca:	2b00      	cmp	r3, #0
 8025acc:	4606      	mov	r6, r0
 8025ace:	f340 8088 	ble.w	8025be2 <_dtoa_r+0x8c2>
 8025ad2:	461a      	mov	r2, r3
 8025ad4:	4601      	mov	r1, r0
 8025ad6:	4620      	mov	r0, r4
 8025ad8:	f001 f9c0 	bl	8026e5c <__pow5mult>
 8025adc:	9b06      	ldr	r3, [sp, #24]
 8025ade:	2b01      	cmp	r3, #1
 8025ae0:	4606      	mov	r6, r0
 8025ae2:	f340 8081 	ble.w	8025be8 <_dtoa_r+0x8c8>
 8025ae6:	f04f 0800 	mov.w	r8, #0
 8025aea:	6933      	ldr	r3, [r6, #16]
 8025aec:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8025af0:	6918      	ldr	r0, [r3, #16]
 8025af2:	f001 f8a3 	bl	8026c3c <__hi0bits>
 8025af6:	f1c0 0020 	rsb	r0, r0, #32
 8025afa:	9b05      	ldr	r3, [sp, #20]
 8025afc:	4418      	add	r0, r3
 8025afe:	f010 001f 	ands.w	r0, r0, #31
 8025b02:	f000 8092 	beq.w	8025c2a <_dtoa_r+0x90a>
 8025b06:	f1c0 0320 	rsb	r3, r0, #32
 8025b0a:	2b04      	cmp	r3, #4
 8025b0c:	f340 808a 	ble.w	8025c24 <_dtoa_r+0x904>
 8025b10:	f1c0 001c 	rsb	r0, r0, #28
 8025b14:	9b04      	ldr	r3, [sp, #16]
 8025b16:	4403      	add	r3, r0
 8025b18:	9304      	str	r3, [sp, #16]
 8025b1a:	9b05      	ldr	r3, [sp, #20]
 8025b1c:	4403      	add	r3, r0
 8025b1e:	4405      	add	r5, r0
 8025b20:	9305      	str	r3, [sp, #20]
 8025b22:	9b04      	ldr	r3, [sp, #16]
 8025b24:	2b00      	cmp	r3, #0
 8025b26:	dd07      	ble.n	8025b38 <_dtoa_r+0x818>
 8025b28:	ee18 1a10 	vmov	r1, s16
 8025b2c:	461a      	mov	r2, r3
 8025b2e:	4620      	mov	r0, r4
 8025b30:	f001 f9ee 	bl	8026f10 <__lshift>
 8025b34:	ee08 0a10 	vmov	s16, r0
 8025b38:	9b05      	ldr	r3, [sp, #20]
 8025b3a:	2b00      	cmp	r3, #0
 8025b3c:	dd05      	ble.n	8025b4a <_dtoa_r+0x82a>
 8025b3e:	4631      	mov	r1, r6
 8025b40:	461a      	mov	r2, r3
 8025b42:	4620      	mov	r0, r4
 8025b44:	f001 f9e4 	bl	8026f10 <__lshift>
 8025b48:	4606      	mov	r6, r0
 8025b4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025b4c:	2b00      	cmp	r3, #0
 8025b4e:	d06e      	beq.n	8025c2e <_dtoa_r+0x90e>
 8025b50:	ee18 0a10 	vmov	r0, s16
 8025b54:	4631      	mov	r1, r6
 8025b56:	f001 fa4b 	bl	8026ff0 <__mcmp>
 8025b5a:	2800      	cmp	r0, #0
 8025b5c:	da67      	bge.n	8025c2e <_dtoa_r+0x90e>
 8025b5e:	9b00      	ldr	r3, [sp, #0]
 8025b60:	3b01      	subs	r3, #1
 8025b62:	ee18 1a10 	vmov	r1, s16
 8025b66:	9300      	str	r3, [sp, #0]
 8025b68:	220a      	movs	r2, #10
 8025b6a:	2300      	movs	r3, #0
 8025b6c:	4620      	mov	r0, r4
 8025b6e:	f000 ffd5 	bl	8026b1c <__multadd>
 8025b72:	9b08      	ldr	r3, [sp, #32]
 8025b74:	ee08 0a10 	vmov	s16, r0
 8025b78:	2b00      	cmp	r3, #0
 8025b7a:	f000 81b1 	beq.w	8025ee0 <_dtoa_r+0xbc0>
 8025b7e:	2300      	movs	r3, #0
 8025b80:	4639      	mov	r1, r7
 8025b82:	220a      	movs	r2, #10
 8025b84:	4620      	mov	r0, r4
 8025b86:	f000 ffc9 	bl	8026b1c <__multadd>
 8025b8a:	9b02      	ldr	r3, [sp, #8]
 8025b8c:	2b00      	cmp	r3, #0
 8025b8e:	4607      	mov	r7, r0
 8025b90:	f300 808e 	bgt.w	8025cb0 <_dtoa_r+0x990>
 8025b94:	9b06      	ldr	r3, [sp, #24]
 8025b96:	2b02      	cmp	r3, #2
 8025b98:	dc51      	bgt.n	8025c3e <_dtoa_r+0x91e>
 8025b9a:	e089      	b.n	8025cb0 <_dtoa_r+0x990>
 8025b9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8025b9e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8025ba2:	e74b      	b.n	8025a3c <_dtoa_r+0x71c>
 8025ba4:	9b03      	ldr	r3, [sp, #12]
 8025ba6:	1e5e      	subs	r6, r3, #1
 8025ba8:	9b07      	ldr	r3, [sp, #28]
 8025baa:	42b3      	cmp	r3, r6
 8025bac:	bfbf      	itttt	lt
 8025bae:	9b07      	ldrlt	r3, [sp, #28]
 8025bb0:	9607      	strlt	r6, [sp, #28]
 8025bb2:	1af2      	sublt	r2, r6, r3
 8025bb4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8025bb6:	bfb6      	itet	lt
 8025bb8:	189b      	addlt	r3, r3, r2
 8025bba:	1b9e      	subge	r6, r3, r6
 8025bbc:	930a      	strlt	r3, [sp, #40]	; 0x28
 8025bbe:	9b03      	ldr	r3, [sp, #12]
 8025bc0:	bfb8      	it	lt
 8025bc2:	2600      	movlt	r6, #0
 8025bc4:	2b00      	cmp	r3, #0
 8025bc6:	bfb7      	itett	lt
 8025bc8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8025bcc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8025bd0:	1a9d      	sublt	r5, r3, r2
 8025bd2:	2300      	movlt	r3, #0
 8025bd4:	e734      	b.n	8025a40 <_dtoa_r+0x720>
 8025bd6:	9e07      	ldr	r6, [sp, #28]
 8025bd8:	9d04      	ldr	r5, [sp, #16]
 8025bda:	9f08      	ldr	r7, [sp, #32]
 8025bdc:	e73b      	b.n	8025a56 <_dtoa_r+0x736>
 8025bde:	9a07      	ldr	r2, [sp, #28]
 8025be0:	e767      	b.n	8025ab2 <_dtoa_r+0x792>
 8025be2:	9b06      	ldr	r3, [sp, #24]
 8025be4:	2b01      	cmp	r3, #1
 8025be6:	dc18      	bgt.n	8025c1a <_dtoa_r+0x8fa>
 8025be8:	f1ba 0f00 	cmp.w	sl, #0
 8025bec:	d115      	bne.n	8025c1a <_dtoa_r+0x8fa>
 8025bee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8025bf2:	b993      	cbnz	r3, 8025c1a <_dtoa_r+0x8fa>
 8025bf4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8025bf8:	0d1b      	lsrs	r3, r3, #20
 8025bfa:	051b      	lsls	r3, r3, #20
 8025bfc:	b183      	cbz	r3, 8025c20 <_dtoa_r+0x900>
 8025bfe:	9b04      	ldr	r3, [sp, #16]
 8025c00:	3301      	adds	r3, #1
 8025c02:	9304      	str	r3, [sp, #16]
 8025c04:	9b05      	ldr	r3, [sp, #20]
 8025c06:	3301      	adds	r3, #1
 8025c08:	9305      	str	r3, [sp, #20]
 8025c0a:	f04f 0801 	mov.w	r8, #1
 8025c0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025c10:	2b00      	cmp	r3, #0
 8025c12:	f47f af6a 	bne.w	8025aea <_dtoa_r+0x7ca>
 8025c16:	2001      	movs	r0, #1
 8025c18:	e76f      	b.n	8025afa <_dtoa_r+0x7da>
 8025c1a:	f04f 0800 	mov.w	r8, #0
 8025c1e:	e7f6      	b.n	8025c0e <_dtoa_r+0x8ee>
 8025c20:	4698      	mov	r8, r3
 8025c22:	e7f4      	b.n	8025c0e <_dtoa_r+0x8ee>
 8025c24:	f43f af7d 	beq.w	8025b22 <_dtoa_r+0x802>
 8025c28:	4618      	mov	r0, r3
 8025c2a:	301c      	adds	r0, #28
 8025c2c:	e772      	b.n	8025b14 <_dtoa_r+0x7f4>
 8025c2e:	9b03      	ldr	r3, [sp, #12]
 8025c30:	2b00      	cmp	r3, #0
 8025c32:	dc37      	bgt.n	8025ca4 <_dtoa_r+0x984>
 8025c34:	9b06      	ldr	r3, [sp, #24]
 8025c36:	2b02      	cmp	r3, #2
 8025c38:	dd34      	ble.n	8025ca4 <_dtoa_r+0x984>
 8025c3a:	9b03      	ldr	r3, [sp, #12]
 8025c3c:	9302      	str	r3, [sp, #8]
 8025c3e:	9b02      	ldr	r3, [sp, #8]
 8025c40:	b96b      	cbnz	r3, 8025c5e <_dtoa_r+0x93e>
 8025c42:	4631      	mov	r1, r6
 8025c44:	2205      	movs	r2, #5
 8025c46:	4620      	mov	r0, r4
 8025c48:	f000 ff68 	bl	8026b1c <__multadd>
 8025c4c:	4601      	mov	r1, r0
 8025c4e:	4606      	mov	r6, r0
 8025c50:	ee18 0a10 	vmov	r0, s16
 8025c54:	f001 f9cc 	bl	8026ff0 <__mcmp>
 8025c58:	2800      	cmp	r0, #0
 8025c5a:	f73f adbb 	bgt.w	80257d4 <_dtoa_r+0x4b4>
 8025c5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025c60:	9d01      	ldr	r5, [sp, #4]
 8025c62:	43db      	mvns	r3, r3
 8025c64:	9300      	str	r3, [sp, #0]
 8025c66:	f04f 0800 	mov.w	r8, #0
 8025c6a:	4631      	mov	r1, r6
 8025c6c:	4620      	mov	r0, r4
 8025c6e:	f000 ff33 	bl	8026ad8 <_Bfree>
 8025c72:	2f00      	cmp	r7, #0
 8025c74:	f43f aea4 	beq.w	80259c0 <_dtoa_r+0x6a0>
 8025c78:	f1b8 0f00 	cmp.w	r8, #0
 8025c7c:	d005      	beq.n	8025c8a <_dtoa_r+0x96a>
 8025c7e:	45b8      	cmp	r8, r7
 8025c80:	d003      	beq.n	8025c8a <_dtoa_r+0x96a>
 8025c82:	4641      	mov	r1, r8
 8025c84:	4620      	mov	r0, r4
 8025c86:	f000 ff27 	bl	8026ad8 <_Bfree>
 8025c8a:	4639      	mov	r1, r7
 8025c8c:	4620      	mov	r0, r4
 8025c8e:	f000 ff23 	bl	8026ad8 <_Bfree>
 8025c92:	e695      	b.n	80259c0 <_dtoa_r+0x6a0>
 8025c94:	2600      	movs	r6, #0
 8025c96:	4637      	mov	r7, r6
 8025c98:	e7e1      	b.n	8025c5e <_dtoa_r+0x93e>
 8025c9a:	9700      	str	r7, [sp, #0]
 8025c9c:	4637      	mov	r7, r6
 8025c9e:	e599      	b.n	80257d4 <_dtoa_r+0x4b4>
 8025ca0:	40240000 	.word	0x40240000
 8025ca4:	9b08      	ldr	r3, [sp, #32]
 8025ca6:	2b00      	cmp	r3, #0
 8025ca8:	f000 80ca 	beq.w	8025e40 <_dtoa_r+0xb20>
 8025cac:	9b03      	ldr	r3, [sp, #12]
 8025cae:	9302      	str	r3, [sp, #8]
 8025cb0:	2d00      	cmp	r5, #0
 8025cb2:	dd05      	ble.n	8025cc0 <_dtoa_r+0x9a0>
 8025cb4:	4639      	mov	r1, r7
 8025cb6:	462a      	mov	r2, r5
 8025cb8:	4620      	mov	r0, r4
 8025cba:	f001 f929 	bl	8026f10 <__lshift>
 8025cbe:	4607      	mov	r7, r0
 8025cc0:	f1b8 0f00 	cmp.w	r8, #0
 8025cc4:	d05b      	beq.n	8025d7e <_dtoa_r+0xa5e>
 8025cc6:	6879      	ldr	r1, [r7, #4]
 8025cc8:	4620      	mov	r0, r4
 8025cca:	f000 fec5 	bl	8026a58 <_Balloc>
 8025cce:	4605      	mov	r5, r0
 8025cd0:	b928      	cbnz	r0, 8025cde <_dtoa_r+0x9be>
 8025cd2:	4b87      	ldr	r3, [pc, #540]	; (8025ef0 <_dtoa_r+0xbd0>)
 8025cd4:	4602      	mov	r2, r0
 8025cd6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8025cda:	f7ff bb3b 	b.w	8025354 <_dtoa_r+0x34>
 8025cde:	693a      	ldr	r2, [r7, #16]
 8025ce0:	3202      	adds	r2, #2
 8025ce2:	0092      	lsls	r2, r2, #2
 8025ce4:	f107 010c 	add.w	r1, r7, #12
 8025ce8:	300c      	adds	r0, #12
 8025cea:	f7fd fc29 	bl	8023540 <memcpy>
 8025cee:	2201      	movs	r2, #1
 8025cf0:	4629      	mov	r1, r5
 8025cf2:	4620      	mov	r0, r4
 8025cf4:	f001 f90c 	bl	8026f10 <__lshift>
 8025cf8:	9b01      	ldr	r3, [sp, #4]
 8025cfa:	f103 0901 	add.w	r9, r3, #1
 8025cfe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8025d02:	4413      	add	r3, r2
 8025d04:	9305      	str	r3, [sp, #20]
 8025d06:	f00a 0301 	and.w	r3, sl, #1
 8025d0a:	46b8      	mov	r8, r7
 8025d0c:	9304      	str	r3, [sp, #16]
 8025d0e:	4607      	mov	r7, r0
 8025d10:	4631      	mov	r1, r6
 8025d12:	ee18 0a10 	vmov	r0, s16
 8025d16:	f7ff fa75 	bl	8025204 <quorem>
 8025d1a:	4641      	mov	r1, r8
 8025d1c:	9002      	str	r0, [sp, #8]
 8025d1e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8025d22:	ee18 0a10 	vmov	r0, s16
 8025d26:	f001 f963 	bl	8026ff0 <__mcmp>
 8025d2a:	463a      	mov	r2, r7
 8025d2c:	9003      	str	r0, [sp, #12]
 8025d2e:	4631      	mov	r1, r6
 8025d30:	4620      	mov	r0, r4
 8025d32:	f001 f979 	bl	8027028 <__mdiff>
 8025d36:	68c2      	ldr	r2, [r0, #12]
 8025d38:	f109 3bff 	add.w	fp, r9, #4294967295
 8025d3c:	4605      	mov	r5, r0
 8025d3e:	bb02      	cbnz	r2, 8025d82 <_dtoa_r+0xa62>
 8025d40:	4601      	mov	r1, r0
 8025d42:	ee18 0a10 	vmov	r0, s16
 8025d46:	f001 f953 	bl	8026ff0 <__mcmp>
 8025d4a:	4602      	mov	r2, r0
 8025d4c:	4629      	mov	r1, r5
 8025d4e:	4620      	mov	r0, r4
 8025d50:	9207      	str	r2, [sp, #28]
 8025d52:	f000 fec1 	bl	8026ad8 <_Bfree>
 8025d56:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8025d5a:	ea43 0102 	orr.w	r1, r3, r2
 8025d5e:	9b04      	ldr	r3, [sp, #16]
 8025d60:	430b      	orrs	r3, r1
 8025d62:	464d      	mov	r5, r9
 8025d64:	d10f      	bne.n	8025d86 <_dtoa_r+0xa66>
 8025d66:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8025d6a:	d02a      	beq.n	8025dc2 <_dtoa_r+0xaa2>
 8025d6c:	9b03      	ldr	r3, [sp, #12]
 8025d6e:	2b00      	cmp	r3, #0
 8025d70:	dd02      	ble.n	8025d78 <_dtoa_r+0xa58>
 8025d72:	9b02      	ldr	r3, [sp, #8]
 8025d74:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8025d78:	f88b a000 	strb.w	sl, [fp]
 8025d7c:	e775      	b.n	8025c6a <_dtoa_r+0x94a>
 8025d7e:	4638      	mov	r0, r7
 8025d80:	e7ba      	b.n	8025cf8 <_dtoa_r+0x9d8>
 8025d82:	2201      	movs	r2, #1
 8025d84:	e7e2      	b.n	8025d4c <_dtoa_r+0xa2c>
 8025d86:	9b03      	ldr	r3, [sp, #12]
 8025d88:	2b00      	cmp	r3, #0
 8025d8a:	db04      	blt.n	8025d96 <_dtoa_r+0xa76>
 8025d8c:	9906      	ldr	r1, [sp, #24]
 8025d8e:	430b      	orrs	r3, r1
 8025d90:	9904      	ldr	r1, [sp, #16]
 8025d92:	430b      	orrs	r3, r1
 8025d94:	d122      	bne.n	8025ddc <_dtoa_r+0xabc>
 8025d96:	2a00      	cmp	r2, #0
 8025d98:	ddee      	ble.n	8025d78 <_dtoa_r+0xa58>
 8025d9a:	ee18 1a10 	vmov	r1, s16
 8025d9e:	2201      	movs	r2, #1
 8025da0:	4620      	mov	r0, r4
 8025da2:	f001 f8b5 	bl	8026f10 <__lshift>
 8025da6:	4631      	mov	r1, r6
 8025da8:	ee08 0a10 	vmov	s16, r0
 8025dac:	f001 f920 	bl	8026ff0 <__mcmp>
 8025db0:	2800      	cmp	r0, #0
 8025db2:	dc03      	bgt.n	8025dbc <_dtoa_r+0xa9c>
 8025db4:	d1e0      	bne.n	8025d78 <_dtoa_r+0xa58>
 8025db6:	f01a 0f01 	tst.w	sl, #1
 8025dba:	d0dd      	beq.n	8025d78 <_dtoa_r+0xa58>
 8025dbc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8025dc0:	d1d7      	bne.n	8025d72 <_dtoa_r+0xa52>
 8025dc2:	2339      	movs	r3, #57	; 0x39
 8025dc4:	f88b 3000 	strb.w	r3, [fp]
 8025dc8:	462b      	mov	r3, r5
 8025dca:	461d      	mov	r5, r3
 8025dcc:	3b01      	subs	r3, #1
 8025dce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8025dd2:	2a39      	cmp	r2, #57	; 0x39
 8025dd4:	d071      	beq.n	8025eba <_dtoa_r+0xb9a>
 8025dd6:	3201      	adds	r2, #1
 8025dd8:	701a      	strb	r2, [r3, #0]
 8025dda:	e746      	b.n	8025c6a <_dtoa_r+0x94a>
 8025ddc:	2a00      	cmp	r2, #0
 8025dde:	dd07      	ble.n	8025df0 <_dtoa_r+0xad0>
 8025de0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8025de4:	d0ed      	beq.n	8025dc2 <_dtoa_r+0xaa2>
 8025de6:	f10a 0301 	add.w	r3, sl, #1
 8025dea:	f88b 3000 	strb.w	r3, [fp]
 8025dee:	e73c      	b.n	8025c6a <_dtoa_r+0x94a>
 8025df0:	9b05      	ldr	r3, [sp, #20]
 8025df2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8025df6:	4599      	cmp	r9, r3
 8025df8:	d047      	beq.n	8025e8a <_dtoa_r+0xb6a>
 8025dfa:	ee18 1a10 	vmov	r1, s16
 8025dfe:	2300      	movs	r3, #0
 8025e00:	220a      	movs	r2, #10
 8025e02:	4620      	mov	r0, r4
 8025e04:	f000 fe8a 	bl	8026b1c <__multadd>
 8025e08:	45b8      	cmp	r8, r7
 8025e0a:	ee08 0a10 	vmov	s16, r0
 8025e0e:	f04f 0300 	mov.w	r3, #0
 8025e12:	f04f 020a 	mov.w	r2, #10
 8025e16:	4641      	mov	r1, r8
 8025e18:	4620      	mov	r0, r4
 8025e1a:	d106      	bne.n	8025e2a <_dtoa_r+0xb0a>
 8025e1c:	f000 fe7e 	bl	8026b1c <__multadd>
 8025e20:	4680      	mov	r8, r0
 8025e22:	4607      	mov	r7, r0
 8025e24:	f109 0901 	add.w	r9, r9, #1
 8025e28:	e772      	b.n	8025d10 <_dtoa_r+0x9f0>
 8025e2a:	f000 fe77 	bl	8026b1c <__multadd>
 8025e2e:	4639      	mov	r1, r7
 8025e30:	4680      	mov	r8, r0
 8025e32:	2300      	movs	r3, #0
 8025e34:	220a      	movs	r2, #10
 8025e36:	4620      	mov	r0, r4
 8025e38:	f000 fe70 	bl	8026b1c <__multadd>
 8025e3c:	4607      	mov	r7, r0
 8025e3e:	e7f1      	b.n	8025e24 <_dtoa_r+0xb04>
 8025e40:	9b03      	ldr	r3, [sp, #12]
 8025e42:	9302      	str	r3, [sp, #8]
 8025e44:	9d01      	ldr	r5, [sp, #4]
 8025e46:	ee18 0a10 	vmov	r0, s16
 8025e4a:	4631      	mov	r1, r6
 8025e4c:	f7ff f9da 	bl	8025204 <quorem>
 8025e50:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8025e54:	9b01      	ldr	r3, [sp, #4]
 8025e56:	f805 ab01 	strb.w	sl, [r5], #1
 8025e5a:	1aea      	subs	r2, r5, r3
 8025e5c:	9b02      	ldr	r3, [sp, #8]
 8025e5e:	4293      	cmp	r3, r2
 8025e60:	dd09      	ble.n	8025e76 <_dtoa_r+0xb56>
 8025e62:	ee18 1a10 	vmov	r1, s16
 8025e66:	2300      	movs	r3, #0
 8025e68:	220a      	movs	r2, #10
 8025e6a:	4620      	mov	r0, r4
 8025e6c:	f000 fe56 	bl	8026b1c <__multadd>
 8025e70:	ee08 0a10 	vmov	s16, r0
 8025e74:	e7e7      	b.n	8025e46 <_dtoa_r+0xb26>
 8025e76:	9b02      	ldr	r3, [sp, #8]
 8025e78:	2b00      	cmp	r3, #0
 8025e7a:	bfc8      	it	gt
 8025e7c:	461d      	movgt	r5, r3
 8025e7e:	9b01      	ldr	r3, [sp, #4]
 8025e80:	bfd8      	it	le
 8025e82:	2501      	movle	r5, #1
 8025e84:	441d      	add	r5, r3
 8025e86:	f04f 0800 	mov.w	r8, #0
 8025e8a:	ee18 1a10 	vmov	r1, s16
 8025e8e:	2201      	movs	r2, #1
 8025e90:	4620      	mov	r0, r4
 8025e92:	f001 f83d 	bl	8026f10 <__lshift>
 8025e96:	4631      	mov	r1, r6
 8025e98:	ee08 0a10 	vmov	s16, r0
 8025e9c:	f001 f8a8 	bl	8026ff0 <__mcmp>
 8025ea0:	2800      	cmp	r0, #0
 8025ea2:	dc91      	bgt.n	8025dc8 <_dtoa_r+0xaa8>
 8025ea4:	d102      	bne.n	8025eac <_dtoa_r+0xb8c>
 8025ea6:	f01a 0f01 	tst.w	sl, #1
 8025eaa:	d18d      	bne.n	8025dc8 <_dtoa_r+0xaa8>
 8025eac:	462b      	mov	r3, r5
 8025eae:	461d      	mov	r5, r3
 8025eb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8025eb4:	2a30      	cmp	r2, #48	; 0x30
 8025eb6:	d0fa      	beq.n	8025eae <_dtoa_r+0xb8e>
 8025eb8:	e6d7      	b.n	8025c6a <_dtoa_r+0x94a>
 8025eba:	9a01      	ldr	r2, [sp, #4]
 8025ebc:	429a      	cmp	r2, r3
 8025ebe:	d184      	bne.n	8025dca <_dtoa_r+0xaaa>
 8025ec0:	9b00      	ldr	r3, [sp, #0]
 8025ec2:	3301      	adds	r3, #1
 8025ec4:	9300      	str	r3, [sp, #0]
 8025ec6:	2331      	movs	r3, #49	; 0x31
 8025ec8:	7013      	strb	r3, [r2, #0]
 8025eca:	e6ce      	b.n	8025c6a <_dtoa_r+0x94a>
 8025ecc:	4b09      	ldr	r3, [pc, #36]	; (8025ef4 <_dtoa_r+0xbd4>)
 8025ece:	f7ff ba95 	b.w	80253fc <_dtoa_r+0xdc>
 8025ed2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8025ed4:	2b00      	cmp	r3, #0
 8025ed6:	f47f aa6e 	bne.w	80253b6 <_dtoa_r+0x96>
 8025eda:	4b07      	ldr	r3, [pc, #28]	; (8025ef8 <_dtoa_r+0xbd8>)
 8025edc:	f7ff ba8e 	b.w	80253fc <_dtoa_r+0xdc>
 8025ee0:	9b02      	ldr	r3, [sp, #8]
 8025ee2:	2b00      	cmp	r3, #0
 8025ee4:	dcae      	bgt.n	8025e44 <_dtoa_r+0xb24>
 8025ee6:	9b06      	ldr	r3, [sp, #24]
 8025ee8:	2b02      	cmp	r3, #2
 8025eea:	f73f aea8 	bgt.w	8025c3e <_dtoa_r+0x91e>
 8025eee:	e7a9      	b.n	8025e44 <_dtoa_r+0xb24>
 8025ef0:	0802a1c8 	.word	0x0802a1c8
 8025ef4:	08029fd1 	.word	0x08029fd1
 8025ef8:	0802a149 	.word	0x0802a149

08025efc <__sflush_r>:
 8025efc:	898a      	ldrh	r2, [r1, #12]
 8025efe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025f02:	4605      	mov	r5, r0
 8025f04:	0710      	lsls	r0, r2, #28
 8025f06:	460c      	mov	r4, r1
 8025f08:	d458      	bmi.n	8025fbc <__sflush_r+0xc0>
 8025f0a:	684b      	ldr	r3, [r1, #4]
 8025f0c:	2b00      	cmp	r3, #0
 8025f0e:	dc05      	bgt.n	8025f1c <__sflush_r+0x20>
 8025f10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8025f12:	2b00      	cmp	r3, #0
 8025f14:	dc02      	bgt.n	8025f1c <__sflush_r+0x20>
 8025f16:	2000      	movs	r0, #0
 8025f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025f1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8025f1e:	2e00      	cmp	r6, #0
 8025f20:	d0f9      	beq.n	8025f16 <__sflush_r+0x1a>
 8025f22:	2300      	movs	r3, #0
 8025f24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8025f28:	682f      	ldr	r7, [r5, #0]
 8025f2a:	602b      	str	r3, [r5, #0]
 8025f2c:	d032      	beq.n	8025f94 <__sflush_r+0x98>
 8025f2e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8025f30:	89a3      	ldrh	r3, [r4, #12]
 8025f32:	075a      	lsls	r2, r3, #29
 8025f34:	d505      	bpl.n	8025f42 <__sflush_r+0x46>
 8025f36:	6863      	ldr	r3, [r4, #4]
 8025f38:	1ac0      	subs	r0, r0, r3
 8025f3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8025f3c:	b10b      	cbz	r3, 8025f42 <__sflush_r+0x46>
 8025f3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8025f40:	1ac0      	subs	r0, r0, r3
 8025f42:	2300      	movs	r3, #0
 8025f44:	4602      	mov	r2, r0
 8025f46:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8025f48:	6a21      	ldr	r1, [r4, #32]
 8025f4a:	4628      	mov	r0, r5
 8025f4c:	47b0      	blx	r6
 8025f4e:	1c43      	adds	r3, r0, #1
 8025f50:	89a3      	ldrh	r3, [r4, #12]
 8025f52:	d106      	bne.n	8025f62 <__sflush_r+0x66>
 8025f54:	6829      	ldr	r1, [r5, #0]
 8025f56:	291d      	cmp	r1, #29
 8025f58:	d82c      	bhi.n	8025fb4 <__sflush_r+0xb8>
 8025f5a:	4a2a      	ldr	r2, [pc, #168]	; (8026004 <__sflush_r+0x108>)
 8025f5c:	40ca      	lsrs	r2, r1
 8025f5e:	07d6      	lsls	r6, r2, #31
 8025f60:	d528      	bpl.n	8025fb4 <__sflush_r+0xb8>
 8025f62:	2200      	movs	r2, #0
 8025f64:	6062      	str	r2, [r4, #4]
 8025f66:	04d9      	lsls	r1, r3, #19
 8025f68:	6922      	ldr	r2, [r4, #16]
 8025f6a:	6022      	str	r2, [r4, #0]
 8025f6c:	d504      	bpl.n	8025f78 <__sflush_r+0x7c>
 8025f6e:	1c42      	adds	r2, r0, #1
 8025f70:	d101      	bne.n	8025f76 <__sflush_r+0x7a>
 8025f72:	682b      	ldr	r3, [r5, #0]
 8025f74:	b903      	cbnz	r3, 8025f78 <__sflush_r+0x7c>
 8025f76:	6560      	str	r0, [r4, #84]	; 0x54
 8025f78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8025f7a:	602f      	str	r7, [r5, #0]
 8025f7c:	2900      	cmp	r1, #0
 8025f7e:	d0ca      	beq.n	8025f16 <__sflush_r+0x1a>
 8025f80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8025f84:	4299      	cmp	r1, r3
 8025f86:	d002      	beq.n	8025f8e <__sflush_r+0x92>
 8025f88:	4628      	mov	r0, r5
 8025f8a:	f7fd fb1f 	bl	80235cc <_free_r>
 8025f8e:	2000      	movs	r0, #0
 8025f90:	6360      	str	r0, [r4, #52]	; 0x34
 8025f92:	e7c1      	b.n	8025f18 <__sflush_r+0x1c>
 8025f94:	6a21      	ldr	r1, [r4, #32]
 8025f96:	2301      	movs	r3, #1
 8025f98:	4628      	mov	r0, r5
 8025f9a:	47b0      	blx	r6
 8025f9c:	1c41      	adds	r1, r0, #1
 8025f9e:	d1c7      	bne.n	8025f30 <__sflush_r+0x34>
 8025fa0:	682b      	ldr	r3, [r5, #0]
 8025fa2:	2b00      	cmp	r3, #0
 8025fa4:	d0c4      	beq.n	8025f30 <__sflush_r+0x34>
 8025fa6:	2b1d      	cmp	r3, #29
 8025fa8:	d001      	beq.n	8025fae <__sflush_r+0xb2>
 8025faa:	2b16      	cmp	r3, #22
 8025fac:	d101      	bne.n	8025fb2 <__sflush_r+0xb6>
 8025fae:	602f      	str	r7, [r5, #0]
 8025fb0:	e7b1      	b.n	8025f16 <__sflush_r+0x1a>
 8025fb2:	89a3      	ldrh	r3, [r4, #12]
 8025fb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025fb8:	81a3      	strh	r3, [r4, #12]
 8025fba:	e7ad      	b.n	8025f18 <__sflush_r+0x1c>
 8025fbc:	690f      	ldr	r7, [r1, #16]
 8025fbe:	2f00      	cmp	r7, #0
 8025fc0:	d0a9      	beq.n	8025f16 <__sflush_r+0x1a>
 8025fc2:	0793      	lsls	r3, r2, #30
 8025fc4:	680e      	ldr	r6, [r1, #0]
 8025fc6:	bf08      	it	eq
 8025fc8:	694b      	ldreq	r3, [r1, #20]
 8025fca:	600f      	str	r7, [r1, #0]
 8025fcc:	bf18      	it	ne
 8025fce:	2300      	movne	r3, #0
 8025fd0:	eba6 0807 	sub.w	r8, r6, r7
 8025fd4:	608b      	str	r3, [r1, #8]
 8025fd6:	f1b8 0f00 	cmp.w	r8, #0
 8025fda:	dd9c      	ble.n	8025f16 <__sflush_r+0x1a>
 8025fdc:	6a21      	ldr	r1, [r4, #32]
 8025fde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8025fe0:	4643      	mov	r3, r8
 8025fe2:	463a      	mov	r2, r7
 8025fe4:	4628      	mov	r0, r5
 8025fe6:	47b0      	blx	r6
 8025fe8:	2800      	cmp	r0, #0
 8025fea:	dc06      	bgt.n	8025ffa <__sflush_r+0xfe>
 8025fec:	89a3      	ldrh	r3, [r4, #12]
 8025fee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025ff2:	81a3      	strh	r3, [r4, #12]
 8025ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8025ff8:	e78e      	b.n	8025f18 <__sflush_r+0x1c>
 8025ffa:	4407      	add	r7, r0
 8025ffc:	eba8 0800 	sub.w	r8, r8, r0
 8026000:	e7e9      	b.n	8025fd6 <__sflush_r+0xda>
 8026002:	bf00      	nop
 8026004:	20400001 	.word	0x20400001

08026008 <_fflush_r>:
 8026008:	b538      	push	{r3, r4, r5, lr}
 802600a:	690b      	ldr	r3, [r1, #16]
 802600c:	4605      	mov	r5, r0
 802600e:	460c      	mov	r4, r1
 8026010:	b913      	cbnz	r3, 8026018 <_fflush_r+0x10>
 8026012:	2500      	movs	r5, #0
 8026014:	4628      	mov	r0, r5
 8026016:	bd38      	pop	{r3, r4, r5, pc}
 8026018:	b118      	cbz	r0, 8026022 <_fflush_r+0x1a>
 802601a:	6983      	ldr	r3, [r0, #24]
 802601c:	b90b      	cbnz	r3, 8026022 <_fflush_r+0x1a>
 802601e:	f000 f887 	bl	8026130 <__sinit>
 8026022:	4b14      	ldr	r3, [pc, #80]	; (8026074 <_fflush_r+0x6c>)
 8026024:	429c      	cmp	r4, r3
 8026026:	d11b      	bne.n	8026060 <_fflush_r+0x58>
 8026028:	686c      	ldr	r4, [r5, #4]
 802602a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802602e:	2b00      	cmp	r3, #0
 8026030:	d0ef      	beq.n	8026012 <_fflush_r+0xa>
 8026032:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8026034:	07d0      	lsls	r0, r2, #31
 8026036:	d404      	bmi.n	8026042 <_fflush_r+0x3a>
 8026038:	0599      	lsls	r1, r3, #22
 802603a:	d402      	bmi.n	8026042 <_fflush_r+0x3a>
 802603c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802603e:	f7fd fa6c 	bl	802351a <__retarget_lock_acquire_recursive>
 8026042:	4628      	mov	r0, r5
 8026044:	4621      	mov	r1, r4
 8026046:	f7ff ff59 	bl	8025efc <__sflush_r>
 802604a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802604c:	07da      	lsls	r2, r3, #31
 802604e:	4605      	mov	r5, r0
 8026050:	d4e0      	bmi.n	8026014 <_fflush_r+0xc>
 8026052:	89a3      	ldrh	r3, [r4, #12]
 8026054:	059b      	lsls	r3, r3, #22
 8026056:	d4dd      	bmi.n	8026014 <_fflush_r+0xc>
 8026058:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802605a:	f7fd fa5f 	bl	802351c <__retarget_lock_release_recursive>
 802605e:	e7d9      	b.n	8026014 <_fflush_r+0xc>
 8026060:	4b05      	ldr	r3, [pc, #20]	; (8026078 <_fflush_r+0x70>)
 8026062:	429c      	cmp	r4, r3
 8026064:	d101      	bne.n	802606a <_fflush_r+0x62>
 8026066:	68ac      	ldr	r4, [r5, #8]
 8026068:	e7df      	b.n	802602a <_fflush_r+0x22>
 802606a:	4b04      	ldr	r3, [pc, #16]	; (802607c <_fflush_r+0x74>)
 802606c:	429c      	cmp	r4, r3
 802606e:	bf08      	it	eq
 8026070:	68ec      	ldreq	r4, [r5, #12]
 8026072:	e7da      	b.n	802602a <_fflush_r+0x22>
 8026074:	0802a1fc 	.word	0x0802a1fc
 8026078:	0802a21c 	.word	0x0802a21c
 802607c:	0802a1dc 	.word	0x0802a1dc

08026080 <std>:
 8026080:	2300      	movs	r3, #0
 8026082:	b510      	push	{r4, lr}
 8026084:	4604      	mov	r4, r0
 8026086:	e9c0 3300 	strd	r3, r3, [r0]
 802608a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802608e:	6083      	str	r3, [r0, #8]
 8026090:	8181      	strh	r1, [r0, #12]
 8026092:	6643      	str	r3, [r0, #100]	; 0x64
 8026094:	81c2      	strh	r2, [r0, #14]
 8026096:	6183      	str	r3, [r0, #24]
 8026098:	4619      	mov	r1, r3
 802609a:	2208      	movs	r2, #8
 802609c:	305c      	adds	r0, #92	; 0x5c
 802609e:	f7fd fa77 	bl	8023590 <memset>
 80260a2:	4b05      	ldr	r3, [pc, #20]	; (80260b8 <std+0x38>)
 80260a4:	6263      	str	r3, [r4, #36]	; 0x24
 80260a6:	4b05      	ldr	r3, [pc, #20]	; (80260bc <std+0x3c>)
 80260a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80260aa:	4b05      	ldr	r3, [pc, #20]	; (80260c0 <std+0x40>)
 80260ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80260ae:	4b05      	ldr	r3, [pc, #20]	; (80260c4 <std+0x44>)
 80260b0:	6224      	str	r4, [r4, #32]
 80260b2:	6323      	str	r3, [r4, #48]	; 0x30
 80260b4:	bd10      	pop	{r4, pc}
 80260b6:	bf00      	nop
 80260b8:	080276f1 	.word	0x080276f1
 80260bc:	08027713 	.word	0x08027713
 80260c0:	0802774b 	.word	0x0802774b
 80260c4:	0802776f 	.word	0x0802776f

080260c8 <_cleanup_r>:
 80260c8:	4901      	ldr	r1, [pc, #4]	; (80260d0 <_cleanup_r+0x8>)
 80260ca:	f000 b8af 	b.w	802622c <_fwalk_reent>
 80260ce:	bf00      	nop
 80260d0:	08026009 	.word	0x08026009

080260d4 <__sfmoreglue>:
 80260d4:	b570      	push	{r4, r5, r6, lr}
 80260d6:	2268      	movs	r2, #104	; 0x68
 80260d8:	1e4d      	subs	r5, r1, #1
 80260da:	4355      	muls	r5, r2
 80260dc:	460e      	mov	r6, r1
 80260de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80260e2:	f7fd fadf 	bl	80236a4 <_malloc_r>
 80260e6:	4604      	mov	r4, r0
 80260e8:	b140      	cbz	r0, 80260fc <__sfmoreglue+0x28>
 80260ea:	2100      	movs	r1, #0
 80260ec:	e9c0 1600 	strd	r1, r6, [r0]
 80260f0:	300c      	adds	r0, #12
 80260f2:	60a0      	str	r0, [r4, #8]
 80260f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80260f8:	f7fd fa4a 	bl	8023590 <memset>
 80260fc:	4620      	mov	r0, r4
 80260fe:	bd70      	pop	{r4, r5, r6, pc}

08026100 <__sfp_lock_acquire>:
 8026100:	4801      	ldr	r0, [pc, #4]	; (8026108 <__sfp_lock_acquire+0x8>)
 8026102:	f7fd ba0a 	b.w	802351a <__retarget_lock_acquire_recursive>
 8026106:	bf00      	nop
 8026108:	20003fed 	.word	0x20003fed

0802610c <__sfp_lock_release>:
 802610c:	4801      	ldr	r0, [pc, #4]	; (8026114 <__sfp_lock_release+0x8>)
 802610e:	f7fd ba05 	b.w	802351c <__retarget_lock_release_recursive>
 8026112:	bf00      	nop
 8026114:	20003fed 	.word	0x20003fed

08026118 <__sinit_lock_acquire>:
 8026118:	4801      	ldr	r0, [pc, #4]	; (8026120 <__sinit_lock_acquire+0x8>)
 802611a:	f7fd b9fe 	b.w	802351a <__retarget_lock_acquire_recursive>
 802611e:	bf00      	nop
 8026120:	20003fee 	.word	0x20003fee

08026124 <__sinit_lock_release>:
 8026124:	4801      	ldr	r0, [pc, #4]	; (802612c <__sinit_lock_release+0x8>)
 8026126:	f7fd b9f9 	b.w	802351c <__retarget_lock_release_recursive>
 802612a:	bf00      	nop
 802612c:	20003fee 	.word	0x20003fee

08026130 <__sinit>:
 8026130:	b510      	push	{r4, lr}
 8026132:	4604      	mov	r4, r0
 8026134:	f7ff fff0 	bl	8026118 <__sinit_lock_acquire>
 8026138:	69a3      	ldr	r3, [r4, #24]
 802613a:	b11b      	cbz	r3, 8026144 <__sinit+0x14>
 802613c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026140:	f7ff bff0 	b.w	8026124 <__sinit_lock_release>
 8026144:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8026148:	6523      	str	r3, [r4, #80]	; 0x50
 802614a:	4b13      	ldr	r3, [pc, #76]	; (8026198 <__sinit+0x68>)
 802614c:	4a13      	ldr	r2, [pc, #76]	; (802619c <__sinit+0x6c>)
 802614e:	681b      	ldr	r3, [r3, #0]
 8026150:	62a2      	str	r2, [r4, #40]	; 0x28
 8026152:	42a3      	cmp	r3, r4
 8026154:	bf04      	itt	eq
 8026156:	2301      	moveq	r3, #1
 8026158:	61a3      	streq	r3, [r4, #24]
 802615a:	4620      	mov	r0, r4
 802615c:	f000 f820 	bl	80261a0 <__sfp>
 8026160:	6060      	str	r0, [r4, #4]
 8026162:	4620      	mov	r0, r4
 8026164:	f000 f81c 	bl	80261a0 <__sfp>
 8026168:	60a0      	str	r0, [r4, #8]
 802616a:	4620      	mov	r0, r4
 802616c:	f000 f818 	bl	80261a0 <__sfp>
 8026170:	2200      	movs	r2, #0
 8026172:	60e0      	str	r0, [r4, #12]
 8026174:	2104      	movs	r1, #4
 8026176:	6860      	ldr	r0, [r4, #4]
 8026178:	f7ff ff82 	bl	8026080 <std>
 802617c:	68a0      	ldr	r0, [r4, #8]
 802617e:	2201      	movs	r2, #1
 8026180:	2109      	movs	r1, #9
 8026182:	f7ff ff7d 	bl	8026080 <std>
 8026186:	68e0      	ldr	r0, [r4, #12]
 8026188:	2202      	movs	r2, #2
 802618a:	2112      	movs	r1, #18
 802618c:	f7ff ff78 	bl	8026080 <std>
 8026190:	2301      	movs	r3, #1
 8026192:	61a3      	str	r3, [r4, #24]
 8026194:	e7d2      	b.n	802613c <__sinit+0xc>
 8026196:	bf00      	nop
 8026198:	08029fac 	.word	0x08029fac
 802619c:	080260c9 	.word	0x080260c9

080261a0 <__sfp>:
 80261a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80261a2:	4607      	mov	r7, r0
 80261a4:	f7ff ffac 	bl	8026100 <__sfp_lock_acquire>
 80261a8:	4b1e      	ldr	r3, [pc, #120]	; (8026224 <__sfp+0x84>)
 80261aa:	681e      	ldr	r6, [r3, #0]
 80261ac:	69b3      	ldr	r3, [r6, #24]
 80261ae:	b913      	cbnz	r3, 80261b6 <__sfp+0x16>
 80261b0:	4630      	mov	r0, r6
 80261b2:	f7ff ffbd 	bl	8026130 <__sinit>
 80261b6:	3648      	adds	r6, #72	; 0x48
 80261b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80261bc:	3b01      	subs	r3, #1
 80261be:	d503      	bpl.n	80261c8 <__sfp+0x28>
 80261c0:	6833      	ldr	r3, [r6, #0]
 80261c2:	b30b      	cbz	r3, 8026208 <__sfp+0x68>
 80261c4:	6836      	ldr	r6, [r6, #0]
 80261c6:	e7f7      	b.n	80261b8 <__sfp+0x18>
 80261c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80261cc:	b9d5      	cbnz	r5, 8026204 <__sfp+0x64>
 80261ce:	4b16      	ldr	r3, [pc, #88]	; (8026228 <__sfp+0x88>)
 80261d0:	60e3      	str	r3, [r4, #12]
 80261d2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80261d6:	6665      	str	r5, [r4, #100]	; 0x64
 80261d8:	f7fd f99e 	bl	8023518 <__retarget_lock_init_recursive>
 80261dc:	f7ff ff96 	bl	802610c <__sfp_lock_release>
 80261e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80261e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80261e8:	6025      	str	r5, [r4, #0]
 80261ea:	61a5      	str	r5, [r4, #24]
 80261ec:	2208      	movs	r2, #8
 80261ee:	4629      	mov	r1, r5
 80261f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80261f4:	f7fd f9cc 	bl	8023590 <memset>
 80261f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80261fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8026200:	4620      	mov	r0, r4
 8026202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026204:	3468      	adds	r4, #104	; 0x68
 8026206:	e7d9      	b.n	80261bc <__sfp+0x1c>
 8026208:	2104      	movs	r1, #4
 802620a:	4638      	mov	r0, r7
 802620c:	f7ff ff62 	bl	80260d4 <__sfmoreglue>
 8026210:	4604      	mov	r4, r0
 8026212:	6030      	str	r0, [r6, #0]
 8026214:	2800      	cmp	r0, #0
 8026216:	d1d5      	bne.n	80261c4 <__sfp+0x24>
 8026218:	f7ff ff78 	bl	802610c <__sfp_lock_release>
 802621c:	230c      	movs	r3, #12
 802621e:	603b      	str	r3, [r7, #0]
 8026220:	e7ee      	b.n	8026200 <__sfp+0x60>
 8026222:	bf00      	nop
 8026224:	08029fac 	.word	0x08029fac
 8026228:	ffff0001 	.word	0xffff0001

0802622c <_fwalk_reent>:
 802622c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026230:	4606      	mov	r6, r0
 8026232:	4688      	mov	r8, r1
 8026234:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8026238:	2700      	movs	r7, #0
 802623a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802623e:	f1b9 0901 	subs.w	r9, r9, #1
 8026242:	d505      	bpl.n	8026250 <_fwalk_reent+0x24>
 8026244:	6824      	ldr	r4, [r4, #0]
 8026246:	2c00      	cmp	r4, #0
 8026248:	d1f7      	bne.n	802623a <_fwalk_reent+0xe>
 802624a:	4638      	mov	r0, r7
 802624c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026250:	89ab      	ldrh	r3, [r5, #12]
 8026252:	2b01      	cmp	r3, #1
 8026254:	d907      	bls.n	8026266 <_fwalk_reent+0x3a>
 8026256:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802625a:	3301      	adds	r3, #1
 802625c:	d003      	beq.n	8026266 <_fwalk_reent+0x3a>
 802625e:	4629      	mov	r1, r5
 8026260:	4630      	mov	r0, r6
 8026262:	47c0      	blx	r8
 8026264:	4307      	orrs	r7, r0
 8026266:	3568      	adds	r5, #104	; 0x68
 8026268:	e7e9      	b.n	802623e <_fwalk_reent+0x12>

0802626a <rshift>:
 802626a:	6903      	ldr	r3, [r0, #16]
 802626c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8026270:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8026274:	ea4f 1261 	mov.w	r2, r1, asr #5
 8026278:	f100 0414 	add.w	r4, r0, #20
 802627c:	dd45      	ble.n	802630a <rshift+0xa0>
 802627e:	f011 011f 	ands.w	r1, r1, #31
 8026282:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8026286:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 802628a:	d10c      	bne.n	80262a6 <rshift+0x3c>
 802628c:	f100 0710 	add.w	r7, r0, #16
 8026290:	4629      	mov	r1, r5
 8026292:	42b1      	cmp	r1, r6
 8026294:	d334      	bcc.n	8026300 <rshift+0x96>
 8026296:	1a9b      	subs	r3, r3, r2
 8026298:	009b      	lsls	r3, r3, #2
 802629a:	1eea      	subs	r2, r5, #3
 802629c:	4296      	cmp	r6, r2
 802629e:	bf38      	it	cc
 80262a0:	2300      	movcc	r3, #0
 80262a2:	4423      	add	r3, r4
 80262a4:	e015      	b.n	80262d2 <rshift+0x68>
 80262a6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80262aa:	f1c1 0820 	rsb	r8, r1, #32
 80262ae:	40cf      	lsrs	r7, r1
 80262b0:	f105 0e04 	add.w	lr, r5, #4
 80262b4:	46a1      	mov	r9, r4
 80262b6:	4576      	cmp	r6, lr
 80262b8:	46f4      	mov	ip, lr
 80262ba:	d815      	bhi.n	80262e8 <rshift+0x7e>
 80262bc:	1a9a      	subs	r2, r3, r2
 80262be:	0092      	lsls	r2, r2, #2
 80262c0:	3a04      	subs	r2, #4
 80262c2:	3501      	adds	r5, #1
 80262c4:	42ae      	cmp	r6, r5
 80262c6:	bf38      	it	cc
 80262c8:	2200      	movcc	r2, #0
 80262ca:	18a3      	adds	r3, r4, r2
 80262cc:	50a7      	str	r7, [r4, r2]
 80262ce:	b107      	cbz	r7, 80262d2 <rshift+0x68>
 80262d0:	3304      	adds	r3, #4
 80262d2:	1b1a      	subs	r2, r3, r4
 80262d4:	42a3      	cmp	r3, r4
 80262d6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80262da:	bf08      	it	eq
 80262dc:	2300      	moveq	r3, #0
 80262de:	6102      	str	r2, [r0, #16]
 80262e0:	bf08      	it	eq
 80262e2:	6143      	streq	r3, [r0, #20]
 80262e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80262e8:	f8dc c000 	ldr.w	ip, [ip]
 80262ec:	fa0c fc08 	lsl.w	ip, ip, r8
 80262f0:	ea4c 0707 	orr.w	r7, ip, r7
 80262f4:	f849 7b04 	str.w	r7, [r9], #4
 80262f8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80262fc:	40cf      	lsrs	r7, r1
 80262fe:	e7da      	b.n	80262b6 <rshift+0x4c>
 8026300:	f851 cb04 	ldr.w	ip, [r1], #4
 8026304:	f847 cf04 	str.w	ip, [r7, #4]!
 8026308:	e7c3      	b.n	8026292 <rshift+0x28>
 802630a:	4623      	mov	r3, r4
 802630c:	e7e1      	b.n	80262d2 <rshift+0x68>

0802630e <__hexdig_fun>:
 802630e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8026312:	2b09      	cmp	r3, #9
 8026314:	d802      	bhi.n	802631c <__hexdig_fun+0xe>
 8026316:	3820      	subs	r0, #32
 8026318:	b2c0      	uxtb	r0, r0
 802631a:	4770      	bx	lr
 802631c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8026320:	2b05      	cmp	r3, #5
 8026322:	d801      	bhi.n	8026328 <__hexdig_fun+0x1a>
 8026324:	3847      	subs	r0, #71	; 0x47
 8026326:	e7f7      	b.n	8026318 <__hexdig_fun+0xa>
 8026328:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 802632c:	2b05      	cmp	r3, #5
 802632e:	d801      	bhi.n	8026334 <__hexdig_fun+0x26>
 8026330:	3827      	subs	r0, #39	; 0x27
 8026332:	e7f1      	b.n	8026318 <__hexdig_fun+0xa>
 8026334:	2000      	movs	r0, #0
 8026336:	4770      	bx	lr

08026338 <__gethex>:
 8026338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802633c:	ed2d 8b02 	vpush	{d8}
 8026340:	b089      	sub	sp, #36	; 0x24
 8026342:	ee08 0a10 	vmov	s16, r0
 8026346:	9304      	str	r3, [sp, #16]
 8026348:	4bb4      	ldr	r3, [pc, #720]	; (802661c <__gethex+0x2e4>)
 802634a:	681b      	ldr	r3, [r3, #0]
 802634c:	9301      	str	r3, [sp, #4]
 802634e:	4618      	mov	r0, r3
 8026350:	468b      	mov	fp, r1
 8026352:	4690      	mov	r8, r2
 8026354:	f7d9 ff96 	bl	8000284 <strlen>
 8026358:	9b01      	ldr	r3, [sp, #4]
 802635a:	f8db 2000 	ldr.w	r2, [fp]
 802635e:	4403      	add	r3, r0
 8026360:	4682      	mov	sl, r0
 8026362:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8026366:	9305      	str	r3, [sp, #20]
 8026368:	1c93      	adds	r3, r2, #2
 802636a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 802636e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8026372:	32fe      	adds	r2, #254	; 0xfe
 8026374:	18d1      	adds	r1, r2, r3
 8026376:	461f      	mov	r7, r3
 8026378:	f813 0b01 	ldrb.w	r0, [r3], #1
 802637c:	9100      	str	r1, [sp, #0]
 802637e:	2830      	cmp	r0, #48	; 0x30
 8026380:	d0f8      	beq.n	8026374 <__gethex+0x3c>
 8026382:	f7ff ffc4 	bl	802630e <__hexdig_fun>
 8026386:	4604      	mov	r4, r0
 8026388:	2800      	cmp	r0, #0
 802638a:	d13a      	bne.n	8026402 <__gethex+0xca>
 802638c:	9901      	ldr	r1, [sp, #4]
 802638e:	4652      	mov	r2, sl
 8026390:	4638      	mov	r0, r7
 8026392:	f7fe f813 	bl	80243bc <strncmp>
 8026396:	4605      	mov	r5, r0
 8026398:	2800      	cmp	r0, #0
 802639a:	d168      	bne.n	802646e <__gethex+0x136>
 802639c:	f817 000a 	ldrb.w	r0, [r7, sl]
 80263a0:	eb07 060a 	add.w	r6, r7, sl
 80263a4:	f7ff ffb3 	bl	802630e <__hexdig_fun>
 80263a8:	2800      	cmp	r0, #0
 80263aa:	d062      	beq.n	8026472 <__gethex+0x13a>
 80263ac:	4633      	mov	r3, r6
 80263ae:	7818      	ldrb	r0, [r3, #0]
 80263b0:	2830      	cmp	r0, #48	; 0x30
 80263b2:	461f      	mov	r7, r3
 80263b4:	f103 0301 	add.w	r3, r3, #1
 80263b8:	d0f9      	beq.n	80263ae <__gethex+0x76>
 80263ba:	f7ff ffa8 	bl	802630e <__hexdig_fun>
 80263be:	2301      	movs	r3, #1
 80263c0:	fab0 f480 	clz	r4, r0
 80263c4:	0964      	lsrs	r4, r4, #5
 80263c6:	4635      	mov	r5, r6
 80263c8:	9300      	str	r3, [sp, #0]
 80263ca:	463a      	mov	r2, r7
 80263cc:	4616      	mov	r6, r2
 80263ce:	3201      	adds	r2, #1
 80263d0:	7830      	ldrb	r0, [r6, #0]
 80263d2:	f7ff ff9c 	bl	802630e <__hexdig_fun>
 80263d6:	2800      	cmp	r0, #0
 80263d8:	d1f8      	bne.n	80263cc <__gethex+0x94>
 80263da:	9901      	ldr	r1, [sp, #4]
 80263dc:	4652      	mov	r2, sl
 80263de:	4630      	mov	r0, r6
 80263e0:	f7fd ffec 	bl	80243bc <strncmp>
 80263e4:	b980      	cbnz	r0, 8026408 <__gethex+0xd0>
 80263e6:	b94d      	cbnz	r5, 80263fc <__gethex+0xc4>
 80263e8:	eb06 050a 	add.w	r5, r6, sl
 80263ec:	462a      	mov	r2, r5
 80263ee:	4616      	mov	r6, r2
 80263f0:	3201      	adds	r2, #1
 80263f2:	7830      	ldrb	r0, [r6, #0]
 80263f4:	f7ff ff8b 	bl	802630e <__hexdig_fun>
 80263f8:	2800      	cmp	r0, #0
 80263fa:	d1f8      	bne.n	80263ee <__gethex+0xb6>
 80263fc:	1bad      	subs	r5, r5, r6
 80263fe:	00ad      	lsls	r5, r5, #2
 8026400:	e004      	b.n	802640c <__gethex+0xd4>
 8026402:	2400      	movs	r4, #0
 8026404:	4625      	mov	r5, r4
 8026406:	e7e0      	b.n	80263ca <__gethex+0x92>
 8026408:	2d00      	cmp	r5, #0
 802640a:	d1f7      	bne.n	80263fc <__gethex+0xc4>
 802640c:	7833      	ldrb	r3, [r6, #0]
 802640e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8026412:	2b50      	cmp	r3, #80	; 0x50
 8026414:	d13b      	bne.n	802648e <__gethex+0x156>
 8026416:	7873      	ldrb	r3, [r6, #1]
 8026418:	2b2b      	cmp	r3, #43	; 0x2b
 802641a:	d02c      	beq.n	8026476 <__gethex+0x13e>
 802641c:	2b2d      	cmp	r3, #45	; 0x2d
 802641e:	d02e      	beq.n	802647e <__gethex+0x146>
 8026420:	1c71      	adds	r1, r6, #1
 8026422:	f04f 0900 	mov.w	r9, #0
 8026426:	7808      	ldrb	r0, [r1, #0]
 8026428:	f7ff ff71 	bl	802630e <__hexdig_fun>
 802642c:	1e43      	subs	r3, r0, #1
 802642e:	b2db      	uxtb	r3, r3
 8026430:	2b18      	cmp	r3, #24
 8026432:	d82c      	bhi.n	802648e <__gethex+0x156>
 8026434:	f1a0 0210 	sub.w	r2, r0, #16
 8026438:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 802643c:	f7ff ff67 	bl	802630e <__hexdig_fun>
 8026440:	1e43      	subs	r3, r0, #1
 8026442:	b2db      	uxtb	r3, r3
 8026444:	2b18      	cmp	r3, #24
 8026446:	d91d      	bls.n	8026484 <__gethex+0x14c>
 8026448:	f1b9 0f00 	cmp.w	r9, #0
 802644c:	d000      	beq.n	8026450 <__gethex+0x118>
 802644e:	4252      	negs	r2, r2
 8026450:	4415      	add	r5, r2
 8026452:	f8cb 1000 	str.w	r1, [fp]
 8026456:	b1e4      	cbz	r4, 8026492 <__gethex+0x15a>
 8026458:	9b00      	ldr	r3, [sp, #0]
 802645a:	2b00      	cmp	r3, #0
 802645c:	bf14      	ite	ne
 802645e:	2700      	movne	r7, #0
 8026460:	2706      	moveq	r7, #6
 8026462:	4638      	mov	r0, r7
 8026464:	b009      	add	sp, #36	; 0x24
 8026466:	ecbd 8b02 	vpop	{d8}
 802646a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802646e:	463e      	mov	r6, r7
 8026470:	4625      	mov	r5, r4
 8026472:	2401      	movs	r4, #1
 8026474:	e7ca      	b.n	802640c <__gethex+0xd4>
 8026476:	f04f 0900 	mov.w	r9, #0
 802647a:	1cb1      	adds	r1, r6, #2
 802647c:	e7d3      	b.n	8026426 <__gethex+0xee>
 802647e:	f04f 0901 	mov.w	r9, #1
 8026482:	e7fa      	b.n	802647a <__gethex+0x142>
 8026484:	230a      	movs	r3, #10
 8026486:	fb03 0202 	mla	r2, r3, r2, r0
 802648a:	3a10      	subs	r2, #16
 802648c:	e7d4      	b.n	8026438 <__gethex+0x100>
 802648e:	4631      	mov	r1, r6
 8026490:	e7df      	b.n	8026452 <__gethex+0x11a>
 8026492:	1bf3      	subs	r3, r6, r7
 8026494:	3b01      	subs	r3, #1
 8026496:	4621      	mov	r1, r4
 8026498:	2b07      	cmp	r3, #7
 802649a:	dc0b      	bgt.n	80264b4 <__gethex+0x17c>
 802649c:	ee18 0a10 	vmov	r0, s16
 80264a0:	f000 fada 	bl	8026a58 <_Balloc>
 80264a4:	4604      	mov	r4, r0
 80264a6:	b940      	cbnz	r0, 80264ba <__gethex+0x182>
 80264a8:	4b5d      	ldr	r3, [pc, #372]	; (8026620 <__gethex+0x2e8>)
 80264aa:	4602      	mov	r2, r0
 80264ac:	21de      	movs	r1, #222	; 0xde
 80264ae:	485d      	ldr	r0, [pc, #372]	; (8026624 <__gethex+0x2ec>)
 80264b0:	f7fc ffcc 	bl	802344c <__assert_func>
 80264b4:	3101      	adds	r1, #1
 80264b6:	105b      	asrs	r3, r3, #1
 80264b8:	e7ee      	b.n	8026498 <__gethex+0x160>
 80264ba:	f100 0914 	add.w	r9, r0, #20
 80264be:	f04f 0b00 	mov.w	fp, #0
 80264c2:	f1ca 0301 	rsb	r3, sl, #1
 80264c6:	f8cd 9008 	str.w	r9, [sp, #8]
 80264ca:	f8cd b000 	str.w	fp, [sp]
 80264ce:	9306      	str	r3, [sp, #24]
 80264d0:	42b7      	cmp	r7, r6
 80264d2:	d340      	bcc.n	8026556 <__gethex+0x21e>
 80264d4:	9802      	ldr	r0, [sp, #8]
 80264d6:	9b00      	ldr	r3, [sp, #0]
 80264d8:	f840 3b04 	str.w	r3, [r0], #4
 80264dc:	eba0 0009 	sub.w	r0, r0, r9
 80264e0:	1080      	asrs	r0, r0, #2
 80264e2:	0146      	lsls	r6, r0, #5
 80264e4:	6120      	str	r0, [r4, #16]
 80264e6:	4618      	mov	r0, r3
 80264e8:	f000 fba8 	bl	8026c3c <__hi0bits>
 80264ec:	1a30      	subs	r0, r6, r0
 80264ee:	f8d8 6000 	ldr.w	r6, [r8]
 80264f2:	42b0      	cmp	r0, r6
 80264f4:	dd63      	ble.n	80265be <__gethex+0x286>
 80264f6:	1b87      	subs	r7, r0, r6
 80264f8:	4639      	mov	r1, r7
 80264fa:	4620      	mov	r0, r4
 80264fc:	f000 ff4c 	bl	8027398 <__any_on>
 8026500:	4682      	mov	sl, r0
 8026502:	b1a8      	cbz	r0, 8026530 <__gethex+0x1f8>
 8026504:	1e7b      	subs	r3, r7, #1
 8026506:	1159      	asrs	r1, r3, #5
 8026508:	f003 021f 	and.w	r2, r3, #31
 802650c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8026510:	f04f 0a01 	mov.w	sl, #1
 8026514:	fa0a f202 	lsl.w	r2, sl, r2
 8026518:	420a      	tst	r2, r1
 802651a:	d009      	beq.n	8026530 <__gethex+0x1f8>
 802651c:	4553      	cmp	r3, sl
 802651e:	dd05      	ble.n	802652c <__gethex+0x1f4>
 8026520:	1eb9      	subs	r1, r7, #2
 8026522:	4620      	mov	r0, r4
 8026524:	f000 ff38 	bl	8027398 <__any_on>
 8026528:	2800      	cmp	r0, #0
 802652a:	d145      	bne.n	80265b8 <__gethex+0x280>
 802652c:	f04f 0a02 	mov.w	sl, #2
 8026530:	4639      	mov	r1, r7
 8026532:	4620      	mov	r0, r4
 8026534:	f7ff fe99 	bl	802626a <rshift>
 8026538:	443d      	add	r5, r7
 802653a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 802653e:	42ab      	cmp	r3, r5
 8026540:	da4c      	bge.n	80265dc <__gethex+0x2a4>
 8026542:	ee18 0a10 	vmov	r0, s16
 8026546:	4621      	mov	r1, r4
 8026548:	f000 fac6 	bl	8026ad8 <_Bfree>
 802654c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802654e:	2300      	movs	r3, #0
 8026550:	6013      	str	r3, [r2, #0]
 8026552:	27a3      	movs	r7, #163	; 0xa3
 8026554:	e785      	b.n	8026462 <__gethex+0x12a>
 8026556:	1e73      	subs	r3, r6, #1
 8026558:	9a05      	ldr	r2, [sp, #20]
 802655a:	9303      	str	r3, [sp, #12]
 802655c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8026560:	4293      	cmp	r3, r2
 8026562:	d019      	beq.n	8026598 <__gethex+0x260>
 8026564:	f1bb 0f20 	cmp.w	fp, #32
 8026568:	d107      	bne.n	802657a <__gethex+0x242>
 802656a:	9b02      	ldr	r3, [sp, #8]
 802656c:	9a00      	ldr	r2, [sp, #0]
 802656e:	f843 2b04 	str.w	r2, [r3], #4
 8026572:	9302      	str	r3, [sp, #8]
 8026574:	2300      	movs	r3, #0
 8026576:	9300      	str	r3, [sp, #0]
 8026578:	469b      	mov	fp, r3
 802657a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 802657e:	f7ff fec6 	bl	802630e <__hexdig_fun>
 8026582:	9b00      	ldr	r3, [sp, #0]
 8026584:	f000 000f 	and.w	r0, r0, #15
 8026588:	fa00 f00b 	lsl.w	r0, r0, fp
 802658c:	4303      	orrs	r3, r0
 802658e:	9300      	str	r3, [sp, #0]
 8026590:	f10b 0b04 	add.w	fp, fp, #4
 8026594:	9b03      	ldr	r3, [sp, #12]
 8026596:	e00d      	b.n	80265b4 <__gethex+0x27c>
 8026598:	9b03      	ldr	r3, [sp, #12]
 802659a:	9a06      	ldr	r2, [sp, #24]
 802659c:	4413      	add	r3, r2
 802659e:	42bb      	cmp	r3, r7
 80265a0:	d3e0      	bcc.n	8026564 <__gethex+0x22c>
 80265a2:	4618      	mov	r0, r3
 80265a4:	9901      	ldr	r1, [sp, #4]
 80265a6:	9307      	str	r3, [sp, #28]
 80265a8:	4652      	mov	r2, sl
 80265aa:	f7fd ff07 	bl	80243bc <strncmp>
 80265ae:	9b07      	ldr	r3, [sp, #28]
 80265b0:	2800      	cmp	r0, #0
 80265b2:	d1d7      	bne.n	8026564 <__gethex+0x22c>
 80265b4:	461e      	mov	r6, r3
 80265b6:	e78b      	b.n	80264d0 <__gethex+0x198>
 80265b8:	f04f 0a03 	mov.w	sl, #3
 80265bc:	e7b8      	b.n	8026530 <__gethex+0x1f8>
 80265be:	da0a      	bge.n	80265d6 <__gethex+0x29e>
 80265c0:	1a37      	subs	r7, r6, r0
 80265c2:	4621      	mov	r1, r4
 80265c4:	ee18 0a10 	vmov	r0, s16
 80265c8:	463a      	mov	r2, r7
 80265ca:	f000 fca1 	bl	8026f10 <__lshift>
 80265ce:	1bed      	subs	r5, r5, r7
 80265d0:	4604      	mov	r4, r0
 80265d2:	f100 0914 	add.w	r9, r0, #20
 80265d6:	f04f 0a00 	mov.w	sl, #0
 80265da:	e7ae      	b.n	802653a <__gethex+0x202>
 80265dc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80265e0:	42a8      	cmp	r0, r5
 80265e2:	dd72      	ble.n	80266ca <__gethex+0x392>
 80265e4:	1b45      	subs	r5, r0, r5
 80265e6:	42ae      	cmp	r6, r5
 80265e8:	dc36      	bgt.n	8026658 <__gethex+0x320>
 80265ea:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80265ee:	2b02      	cmp	r3, #2
 80265f0:	d02a      	beq.n	8026648 <__gethex+0x310>
 80265f2:	2b03      	cmp	r3, #3
 80265f4:	d02c      	beq.n	8026650 <__gethex+0x318>
 80265f6:	2b01      	cmp	r3, #1
 80265f8:	d11c      	bne.n	8026634 <__gethex+0x2fc>
 80265fa:	42ae      	cmp	r6, r5
 80265fc:	d11a      	bne.n	8026634 <__gethex+0x2fc>
 80265fe:	2e01      	cmp	r6, #1
 8026600:	d112      	bne.n	8026628 <__gethex+0x2f0>
 8026602:	9a04      	ldr	r2, [sp, #16]
 8026604:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8026608:	6013      	str	r3, [r2, #0]
 802660a:	2301      	movs	r3, #1
 802660c:	6123      	str	r3, [r4, #16]
 802660e:	f8c9 3000 	str.w	r3, [r9]
 8026612:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8026614:	2762      	movs	r7, #98	; 0x62
 8026616:	601c      	str	r4, [r3, #0]
 8026618:	e723      	b.n	8026462 <__gethex+0x12a>
 802661a:	bf00      	nop
 802661c:	0802a2a4 	.word	0x0802a2a4
 8026620:	0802a1c8 	.word	0x0802a1c8
 8026624:	0802a23c 	.word	0x0802a23c
 8026628:	1e71      	subs	r1, r6, #1
 802662a:	4620      	mov	r0, r4
 802662c:	f000 feb4 	bl	8027398 <__any_on>
 8026630:	2800      	cmp	r0, #0
 8026632:	d1e6      	bne.n	8026602 <__gethex+0x2ca>
 8026634:	ee18 0a10 	vmov	r0, s16
 8026638:	4621      	mov	r1, r4
 802663a:	f000 fa4d 	bl	8026ad8 <_Bfree>
 802663e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8026640:	2300      	movs	r3, #0
 8026642:	6013      	str	r3, [r2, #0]
 8026644:	2750      	movs	r7, #80	; 0x50
 8026646:	e70c      	b.n	8026462 <__gethex+0x12a>
 8026648:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802664a:	2b00      	cmp	r3, #0
 802664c:	d1f2      	bne.n	8026634 <__gethex+0x2fc>
 802664e:	e7d8      	b.n	8026602 <__gethex+0x2ca>
 8026650:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8026652:	2b00      	cmp	r3, #0
 8026654:	d1d5      	bne.n	8026602 <__gethex+0x2ca>
 8026656:	e7ed      	b.n	8026634 <__gethex+0x2fc>
 8026658:	1e6f      	subs	r7, r5, #1
 802665a:	f1ba 0f00 	cmp.w	sl, #0
 802665e:	d131      	bne.n	80266c4 <__gethex+0x38c>
 8026660:	b127      	cbz	r7, 802666c <__gethex+0x334>
 8026662:	4639      	mov	r1, r7
 8026664:	4620      	mov	r0, r4
 8026666:	f000 fe97 	bl	8027398 <__any_on>
 802666a:	4682      	mov	sl, r0
 802666c:	117b      	asrs	r3, r7, #5
 802666e:	2101      	movs	r1, #1
 8026670:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8026674:	f007 071f 	and.w	r7, r7, #31
 8026678:	fa01 f707 	lsl.w	r7, r1, r7
 802667c:	421f      	tst	r7, r3
 802667e:	4629      	mov	r1, r5
 8026680:	4620      	mov	r0, r4
 8026682:	bf18      	it	ne
 8026684:	f04a 0a02 	orrne.w	sl, sl, #2
 8026688:	1b76      	subs	r6, r6, r5
 802668a:	f7ff fdee 	bl	802626a <rshift>
 802668e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8026692:	2702      	movs	r7, #2
 8026694:	f1ba 0f00 	cmp.w	sl, #0
 8026698:	d048      	beq.n	802672c <__gethex+0x3f4>
 802669a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 802669e:	2b02      	cmp	r3, #2
 80266a0:	d015      	beq.n	80266ce <__gethex+0x396>
 80266a2:	2b03      	cmp	r3, #3
 80266a4:	d017      	beq.n	80266d6 <__gethex+0x39e>
 80266a6:	2b01      	cmp	r3, #1
 80266a8:	d109      	bne.n	80266be <__gethex+0x386>
 80266aa:	f01a 0f02 	tst.w	sl, #2
 80266ae:	d006      	beq.n	80266be <__gethex+0x386>
 80266b0:	f8d9 0000 	ldr.w	r0, [r9]
 80266b4:	ea4a 0a00 	orr.w	sl, sl, r0
 80266b8:	f01a 0f01 	tst.w	sl, #1
 80266bc:	d10e      	bne.n	80266dc <__gethex+0x3a4>
 80266be:	f047 0710 	orr.w	r7, r7, #16
 80266c2:	e033      	b.n	802672c <__gethex+0x3f4>
 80266c4:	f04f 0a01 	mov.w	sl, #1
 80266c8:	e7d0      	b.n	802666c <__gethex+0x334>
 80266ca:	2701      	movs	r7, #1
 80266cc:	e7e2      	b.n	8026694 <__gethex+0x35c>
 80266ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80266d0:	f1c3 0301 	rsb	r3, r3, #1
 80266d4:	9315      	str	r3, [sp, #84]	; 0x54
 80266d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80266d8:	2b00      	cmp	r3, #0
 80266da:	d0f0      	beq.n	80266be <__gethex+0x386>
 80266dc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80266e0:	f104 0314 	add.w	r3, r4, #20
 80266e4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80266e8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80266ec:	f04f 0c00 	mov.w	ip, #0
 80266f0:	4618      	mov	r0, r3
 80266f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80266f6:	f1b2 3fff 	cmp.w	r2, #4294967295
 80266fa:	d01c      	beq.n	8026736 <__gethex+0x3fe>
 80266fc:	3201      	adds	r2, #1
 80266fe:	6002      	str	r2, [r0, #0]
 8026700:	2f02      	cmp	r7, #2
 8026702:	f104 0314 	add.w	r3, r4, #20
 8026706:	d13f      	bne.n	8026788 <__gethex+0x450>
 8026708:	f8d8 2000 	ldr.w	r2, [r8]
 802670c:	3a01      	subs	r2, #1
 802670e:	42b2      	cmp	r2, r6
 8026710:	d10a      	bne.n	8026728 <__gethex+0x3f0>
 8026712:	1171      	asrs	r1, r6, #5
 8026714:	2201      	movs	r2, #1
 8026716:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 802671a:	f006 061f 	and.w	r6, r6, #31
 802671e:	fa02 f606 	lsl.w	r6, r2, r6
 8026722:	421e      	tst	r6, r3
 8026724:	bf18      	it	ne
 8026726:	4617      	movne	r7, r2
 8026728:	f047 0720 	orr.w	r7, r7, #32
 802672c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802672e:	601c      	str	r4, [r3, #0]
 8026730:	9b04      	ldr	r3, [sp, #16]
 8026732:	601d      	str	r5, [r3, #0]
 8026734:	e695      	b.n	8026462 <__gethex+0x12a>
 8026736:	4299      	cmp	r1, r3
 8026738:	f843 cc04 	str.w	ip, [r3, #-4]
 802673c:	d8d8      	bhi.n	80266f0 <__gethex+0x3b8>
 802673e:	68a3      	ldr	r3, [r4, #8]
 8026740:	459b      	cmp	fp, r3
 8026742:	db19      	blt.n	8026778 <__gethex+0x440>
 8026744:	6861      	ldr	r1, [r4, #4]
 8026746:	ee18 0a10 	vmov	r0, s16
 802674a:	3101      	adds	r1, #1
 802674c:	f000 f984 	bl	8026a58 <_Balloc>
 8026750:	4681      	mov	r9, r0
 8026752:	b918      	cbnz	r0, 802675c <__gethex+0x424>
 8026754:	4b1a      	ldr	r3, [pc, #104]	; (80267c0 <__gethex+0x488>)
 8026756:	4602      	mov	r2, r0
 8026758:	2184      	movs	r1, #132	; 0x84
 802675a:	e6a8      	b.n	80264ae <__gethex+0x176>
 802675c:	6922      	ldr	r2, [r4, #16]
 802675e:	3202      	adds	r2, #2
 8026760:	f104 010c 	add.w	r1, r4, #12
 8026764:	0092      	lsls	r2, r2, #2
 8026766:	300c      	adds	r0, #12
 8026768:	f7fc feea 	bl	8023540 <memcpy>
 802676c:	4621      	mov	r1, r4
 802676e:	ee18 0a10 	vmov	r0, s16
 8026772:	f000 f9b1 	bl	8026ad8 <_Bfree>
 8026776:	464c      	mov	r4, r9
 8026778:	6923      	ldr	r3, [r4, #16]
 802677a:	1c5a      	adds	r2, r3, #1
 802677c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8026780:	6122      	str	r2, [r4, #16]
 8026782:	2201      	movs	r2, #1
 8026784:	615a      	str	r2, [r3, #20]
 8026786:	e7bb      	b.n	8026700 <__gethex+0x3c8>
 8026788:	6922      	ldr	r2, [r4, #16]
 802678a:	455a      	cmp	r2, fp
 802678c:	dd0b      	ble.n	80267a6 <__gethex+0x46e>
 802678e:	2101      	movs	r1, #1
 8026790:	4620      	mov	r0, r4
 8026792:	f7ff fd6a 	bl	802626a <rshift>
 8026796:	f8d8 3008 	ldr.w	r3, [r8, #8]
 802679a:	3501      	adds	r5, #1
 802679c:	42ab      	cmp	r3, r5
 802679e:	f6ff aed0 	blt.w	8026542 <__gethex+0x20a>
 80267a2:	2701      	movs	r7, #1
 80267a4:	e7c0      	b.n	8026728 <__gethex+0x3f0>
 80267a6:	f016 061f 	ands.w	r6, r6, #31
 80267aa:	d0fa      	beq.n	80267a2 <__gethex+0x46a>
 80267ac:	4453      	add	r3, sl
 80267ae:	f1c6 0620 	rsb	r6, r6, #32
 80267b2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80267b6:	f000 fa41 	bl	8026c3c <__hi0bits>
 80267ba:	42b0      	cmp	r0, r6
 80267bc:	dbe7      	blt.n	802678e <__gethex+0x456>
 80267be:	e7f0      	b.n	80267a2 <__gethex+0x46a>
 80267c0:	0802a1c8 	.word	0x0802a1c8

080267c4 <L_shift>:
 80267c4:	f1c2 0208 	rsb	r2, r2, #8
 80267c8:	0092      	lsls	r2, r2, #2
 80267ca:	b570      	push	{r4, r5, r6, lr}
 80267cc:	f1c2 0620 	rsb	r6, r2, #32
 80267d0:	6843      	ldr	r3, [r0, #4]
 80267d2:	6804      	ldr	r4, [r0, #0]
 80267d4:	fa03 f506 	lsl.w	r5, r3, r6
 80267d8:	432c      	orrs	r4, r5
 80267da:	40d3      	lsrs	r3, r2
 80267dc:	6004      	str	r4, [r0, #0]
 80267de:	f840 3f04 	str.w	r3, [r0, #4]!
 80267e2:	4288      	cmp	r0, r1
 80267e4:	d3f4      	bcc.n	80267d0 <L_shift+0xc>
 80267e6:	bd70      	pop	{r4, r5, r6, pc}

080267e8 <__match>:
 80267e8:	b530      	push	{r4, r5, lr}
 80267ea:	6803      	ldr	r3, [r0, #0]
 80267ec:	3301      	adds	r3, #1
 80267ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80267f2:	b914      	cbnz	r4, 80267fa <__match+0x12>
 80267f4:	6003      	str	r3, [r0, #0]
 80267f6:	2001      	movs	r0, #1
 80267f8:	bd30      	pop	{r4, r5, pc}
 80267fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80267fe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8026802:	2d19      	cmp	r5, #25
 8026804:	bf98      	it	ls
 8026806:	3220      	addls	r2, #32
 8026808:	42a2      	cmp	r2, r4
 802680a:	d0f0      	beq.n	80267ee <__match+0x6>
 802680c:	2000      	movs	r0, #0
 802680e:	e7f3      	b.n	80267f8 <__match+0x10>

08026810 <__hexnan>:
 8026810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026814:	680b      	ldr	r3, [r1, #0]
 8026816:	115e      	asrs	r6, r3, #5
 8026818:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 802681c:	f013 031f 	ands.w	r3, r3, #31
 8026820:	b087      	sub	sp, #28
 8026822:	bf18      	it	ne
 8026824:	3604      	addne	r6, #4
 8026826:	2500      	movs	r5, #0
 8026828:	1f37      	subs	r7, r6, #4
 802682a:	4690      	mov	r8, r2
 802682c:	6802      	ldr	r2, [r0, #0]
 802682e:	9301      	str	r3, [sp, #4]
 8026830:	4682      	mov	sl, r0
 8026832:	f846 5c04 	str.w	r5, [r6, #-4]
 8026836:	46b9      	mov	r9, r7
 8026838:	463c      	mov	r4, r7
 802683a:	9502      	str	r5, [sp, #8]
 802683c:	46ab      	mov	fp, r5
 802683e:	7851      	ldrb	r1, [r2, #1]
 8026840:	1c53      	adds	r3, r2, #1
 8026842:	9303      	str	r3, [sp, #12]
 8026844:	b341      	cbz	r1, 8026898 <__hexnan+0x88>
 8026846:	4608      	mov	r0, r1
 8026848:	9205      	str	r2, [sp, #20]
 802684a:	9104      	str	r1, [sp, #16]
 802684c:	f7ff fd5f 	bl	802630e <__hexdig_fun>
 8026850:	2800      	cmp	r0, #0
 8026852:	d14f      	bne.n	80268f4 <__hexnan+0xe4>
 8026854:	9904      	ldr	r1, [sp, #16]
 8026856:	9a05      	ldr	r2, [sp, #20]
 8026858:	2920      	cmp	r1, #32
 802685a:	d818      	bhi.n	802688e <__hexnan+0x7e>
 802685c:	9b02      	ldr	r3, [sp, #8]
 802685e:	459b      	cmp	fp, r3
 8026860:	dd13      	ble.n	802688a <__hexnan+0x7a>
 8026862:	454c      	cmp	r4, r9
 8026864:	d206      	bcs.n	8026874 <__hexnan+0x64>
 8026866:	2d07      	cmp	r5, #7
 8026868:	dc04      	bgt.n	8026874 <__hexnan+0x64>
 802686a:	462a      	mov	r2, r5
 802686c:	4649      	mov	r1, r9
 802686e:	4620      	mov	r0, r4
 8026870:	f7ff ffa8 	bl	80267c4 <L_shift>
 8026874:	4544      	cmp	r4, r8
 8026876:	d950      	bls.n	802691a <__hexnan+0x10a>
 8026878:	2300      	movs	r3, #0
 802687a:	f1a4 0904 	sub.w	r9, r4, #4
 802687e:	f844 3c04 	str.w	r3, [r4, #-4]
 8026882:	f8cd b008 	str.w	fp, [sp, #8]
 8026886:	464c      	mov	r4, r9
 8026888:	461d      	mov	r5, r3
 802688a:	9a03      	ldr	r2, [sp, #12]
 802688c:	e7d7      	b.n	802683e <__hexnan+0x2e>
 802688e:	2929      	cmp	r1, #41	; 0x29
 8026890:	d156      	bne.n	8026940 <__hexnan+0x130>
 8026892:	3202      	adds	r2, #2
 8026894:	f8ca 2000 	str.w	r2, [sl]
 8026898:	f1bb 0f00 	cmp.w	fp, #0
 802689c:	d050      	beq.n	8026940 <__hexnan+0x130>
 802689e:	454c      	cmp	r4, r9
 80268a0:	d206      	bcs.n	80268b0 <__hexnan+0xa0>
 80268a2:	2d07      	cmp	r5, #7
 80268a4:	dc04      	bgt.n	80268b0 <__hexnan+0xa0>
 80268a6:	462a      	mov	r2, r5
 80268a8:	4649      	mov	r1, r9
 80268aa:	4620      	mov	r0, r4
 80268ac:	f7ff ff8a 	bl	80267c4 <L_shift>
 80268b0:	4544      	cmp	r4, r8
 80268b2:	d934      	bls.n	802691e <__hexnan+0x10e>
 80268b4:	f1a8 0204 	sub.w	r2, r8, #4
 80268b8:	4623      	mov	r3, r4
 80268ba:	f853 1b04 	ldr.w	r1, [r3], #4
 80268be:	f842 1f04 	str.w	r1, [r2, #4]!
 80268c2:	429f      	cmp	r7, r3
 80268c4:	d2f9      	bcs.n	80268ba <__hexnan+0xaa>
 80268c6:	1b3b      	subs	r3, r7, r4
 80268c8:	f023 0303 	bic.w	r3, r3, #3
 80268cc:	3304      	adds	r3, #4
 80268ce:	3401      	adds	r4, #1
 80268d0:	3e03      	subs	r6, #3
 80268d2:	42b4      	cmp	r4, r6
 80268d4:	bf88      	it	hi
 80268d6:	2304      	movhi	r3, #4
 80268d8:	4443      	add	r3, r8
 80268da:	2200      	movs	r2, #0
 80268dc:	f843 2b04 	str.w	r2, [r3], #4
 80268e0:	429f      	cmp	r7, r3
 80268e2:	d2fb      	bcs.n	80268dc <__hexnan+0xcc>
 80268e4:	683b      	ldr	r3, [r7, #0]
 80268e6:	b91b      	cbnz	r3, 80268f0 <__hexnan+0xe0>
 80268e8:	4547      	cmp	r7, r8
 80268ea:	d127      	bne.n	802693c <__hexnan+0x12c>
 80268ec:	2301      	movs	r3, #1
 80268ee:	603b      	str	r3, [r7, #0]
 80268f0:	2005      	movs	r0, #5
 80268f2:	e026      	b.n	8026942 <__hexnan+0x132>
 80268f4:	3501      	adds	r5, #1
 80268f6:	2d08      	cmp	r5, #8
 80268f8:	f10b 0b01 	add.w	fp, fp, #1
 80268fc:	dd06      	ble.n	802690c <__hexnan+0xfc>
 80268fe:	4544      	cmp	r4, r8
 8026900:	d9c3      	bls.n	802688a <__hexnan+0x7a>
 8026902:	2300      	movs	r3, #0
 8026904:	f844 3c04 	str.w	r3, [r4, #-4]
 8026908:	2501      	movs	r5, #1
 802690a:	3c04      	subs	r4, #4
 802690c:	6822      	ldr	r2, [r4, #0]
 802690e:	f000 000f 	and.w	r0, r0, #15
 8026912:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8026916:	6022      	str	r2, [r4, #0]
 8026918:	e7b7      	b.n	802688a <__hexnan+0x7a>
 802691a:	2508      	movs	r5, #8
 802691c:	e7b5      	b.n	802688a <__hexnan+0x7a>
 802691e:	9b01      	ldr	r3, [sp, #4]
 8026920:	2b00      	cmp	r3, #0
 8026922:	d0df      	beq.n	80268e4 <__hexnan+0xd4>
 8026924:	f04f 32ff 	mov.w	r2, #4294967295
 8026928:	f1c3 0320 	rsb	r3, r3, #32
 802692c:	fa22 f303 	lsr.w	r3, r2, r3
 8026930:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8026934:	401a      	ands	r2, r3
 8026936:	f846 2c04 	str.w	r2, [r6, #-4]
 802693a:	e7d3      	b.n	80268e4 <__hexnan+0xd4>
 802693c:	3f04      	subs	r7, #4
 802693e:	e7d1      	b.n	80268e4 <__hexnan+0xd4>
 8026940:	2004      	movs	r0, #4
 8026942:	b007      	add	sp, #28
 8026944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026948 <_localeconv_r>:
 8026948:	4800      	ldr	r0, [pc, #0]	; (802694c <_localeconv_r+0x4>)
 802694a:	4770      	bx	lr
 802694c:	200003d8 	.word	0x200003d8

08026950 <__swhatbuf_r>:
 8026950:	b570      	push	{r4, r5, r6, lr}
 8026952:	460e      	mov	r6, r1
 8026954:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026958:	2900      	cmp	r1, #0
 802695a:	b096      	sub	sp, #88	; 0x58
 802695c:	4614      	mov	r4, r2
 802695e:	461d      	mov	r5, r3
 8026960:	da08      	bge.n	8026974 <__swhatbuf_r+0x24>
 8026962:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8026966:	2200      	movs	r2, #0
 8026968:	602a      	str	r2, [r5, #0]
 802696a:	061a      	lsls	r2, r3, #24
 802696c:	d410      	bmi.n	8026990 <__swhatbuf_r+0x40>
 802696e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8026972:	e00e      	b.n	8026992 <__swhatbuf_r+0x42>
 8026974:	466a      	mov	r2, sp
 8026976:	f000 ff2d 	bl	80277d4 <_fstat_r>
 802697a:	2800      	cmp	r0, #0
 802697c:	dbf1      	blt.n	8026962 <__swhatbuf_r+0x12>
 802697e:	9a01      	ldr	r2, [sp, #4]
 8026980:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8026984:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8026988:	425a      	negs	r2, r3
 802698a:	415a      	adcs	r2, r3
 802698c:	602a      	str	r2, [r5, #0]
 802698e:	e7ee      	b.n	802696e <__swhatbuf_r+0x1e>
 8026990:	2340      	movs	r3, #64	; 0x40
 8026992:	2000      	movs	r0, #0
 8026994:	6023      	str	r3, [r4, #0]
 8026996:	b016      	add	sp, #88	; 0x58
 8026998:	bd70      	pop	{r4, r5, r6, pc}
	...

0802699c <__smakebuf_r>:
 802699c:	898b      	ldrh	r3, [r1, #12]
 802699e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80269a0:	079d      	lsls	r5, r3, #30
 80269a2:	4606      	mov	r6, r0
 80269a4:	460c      	mov	r4, r1
 80269a6:	d507      	bpl.n	80269b8 <__smakebuf_r+0x1c>
 80269a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80269ac:	6023      	str	r3, [r4, #0]
 80269ae:	6123      	str	r3, [r4, #16]
 80269b0:	2301      	movs	r3, #1
 80269b2:	6163      	str	r3, [r4, #20]
 80269b4:	b002      	add	sp, #8
 80269b6:	bd70      	pop	{r4, r5, r6, pc}
 80269b8:	ab01      	add	r3, sp, #4
 80269ba:	466a      	mov	r2, sp
 80269bc:	f7ff ffc8 	bl	8026950 <__swhatbuf_r>
 80269c0:	9900      	ldr	r1, [sp, #0]
 80269c2:	4605      	mov	r5, r0
 80269c4:	4630      	mov	r0, r6
 80269c6:	f7fc fe6d 	bl	80236a4 <_malloc_r>
 80269ca:	b948      	cbnz	r0, 80269e0 <__smakebuf_r+0x44>
 80269cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80269d0:	059a      	lsls	r2, r3, #22
 80269d2:	d4ef      	bmi.n	80269b4 <__smakebuf_r+0x18>
 80269d4:	f023 0303 	bic.w	r3, r3, #3
 80269d8:	f043 0302 	orr.w	r3, r3, #2
 80269dc:	81a3      	strh	r3, [r4, #12]
 80269de:	e7e3      	b.n	80269a8 <__smakebuf_r+0xc>
 80269e0:	4b0d      	ldr	r3, [pc, #52]	; (8026a18 <__smakebuf_r+0x7c>)
 80269e2:	62b3      	str	r3, [r6, #40]	; 0x28
 80269e4:	89a3      	ldrh	r3, [r4, #12]
 80269e6:	6020      	str	r0, [r4, #0]
 80269e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80269ec:	81a3      	strh	r3, [r4, #12]
 80269ee:	9b00      	ldr	r3, [sp, #0]
 80269f0:	6163      	str	r3, [r4, #20]
 80269f2:	9b01      	ldr	r3, [sp, #4]
 80269f4:	6120      	str	r0, [r4, #16]
 80269f6:	b15b      	cbz	r3, 8026a10 <__smakebuf_r+0x74>
 80269f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80269fc:	4630      	mov	r0, r6
 80269fe:	f000 fefb 	bl	80277f8 <_isatty_r>
 8026a02:	b128      	cbz	r0, 8026a10 <__smakebuf_r+0x74>
 8026a04:	89a3      	ldrh	r3, [r4, #12]
 8026a06:	f023 0303 	bic.w	r3, r3, #3
 8026a0a:	f043 0301 	orr.w	r3, r3, #1
 8026a0e:	81a3      	strh	r3, [r4, #12]
 8026a10:	89a0      	ldrh	r0, [r4, #12]
 8026a12:	4305      	orrs	r5, r0
 8026a14:	81a5      	strh	r5, [r4, #12]
 8026a16:	e7cd      	b.n	80269b4 <__smakebuf_r+0x18>
 8026a18:	080260c9 	.word	0x080260c9

08026a1c <__ascii_mbtowc>:
 8026a1c:	b082      	sub	sp, #8
 8026a1e:	b901      	cbnz	r1, 8026a22 <__ascii_mbtowc+0x6>
 8026a20:	a901      	add	r1, sp, #4
 8026a22:	b142      	cbz	r2, 8026a36 <__ascii_mbtowc+0x1a>
 8026a24:	b14b      	cbz	r3, 8026a3a <__ascii_mbtowc+0x1e>
 8026a26:	7813      	ldrb	r3, [r2, #0]
 8026a28:	600b      	str	r3, [r1, #0]
 8026a2a:	7812      	ldrb	r2, [r2, #0]
 8026a2c:	1e10      	subs	r0, r2, #0
 8026a2e:	bf18      	it	ne
 8026a30:	2001      	movne	r0, #1
 8026a32:	b002      	add	sp, #8
 8026a34:	4770      	bx	lr
 8026a36:	4610      	mov	r0, r2
 8026a38:	e7fb      	b.n	8026a32 <__ascii_mbtowc+0x16>
 8026a3a:	f06f 0001 	mvn.w	r0, #1
 8026a3e:	e7f8      	b.n	8026a32 <__ascii_mbtowc+0x16>

08026a40 <__malloc_lock>:
 8026a40:	4801      	ldr	r0, [pc, #4]	; (8026a48 <__malloc_lock+0x8>)
 8026a42:	f7fc bd6a 	b.w	802351a <__retarget_lock_acquire_recursive>
 8026a46:	bf00      	nop
 8026a48:	20003fec 	.word	0x20003fec

08026a4c <__malloc_unlock>:
 8026a4c:	4801      	ldr	r0, [pc, #4]	; (8026a54 <__malloc_unlock+0x8>)
 8026a4e:	f7fc bd65 	b.w	802351c <__retarget_lock_release_recursive>
 8026a52:	bf00      	nop
 8026a54:	20003fec 	.word	0x20003fec

08026a58 <_Balloc>:
 8026a58:	b570      	push	{r4, r5, r6, lr}
 8026a5a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8026a5c:	4604      	mov	r4, r0
 8026a5e:	460d      	mov	r5, r1
 8026a60:	b976      	cbnz	r6, 8026a80 <_Balloc+0x28>
 8026a62:	2010      	movs	r0, #16
 8026a64:	f7fc fd5c 	bl	8023520 <malloc>
 8026a68:	4602      	mov	r2, r0
 8026a6a:	6260      	str	r0, [r4, #36]	; 0x24
 8026a6c:	b920      	cbnz	r0, 8026a78 <_Balloc+0x20>
 8026a6e:	4b18      	ldr	r3, [pc, #96]	; (8026ad0 <_Balloc+0x78>)
 8026a70:	4818      	ldr	r0, [pc, #96]	; (8026ad4 <_Balloc+0x7c>)
 8026a72:	2166      	movs	r1, #102	; 0x66
 8026a74:	f7fc fcea 	bl	802344c <__assert_func>
 8026a78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8026a7c:	6006      	str	r6, [r0, #0]
 8026a7e:	60c6      	str	r6, [r0, #12]
 8026a80:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8026a82:	68f3      	ldr	r3, [r6, #12]
 8026a84:	b183      	cbz	r3, 8026aa8 <_Balloc+0x50>
 8026a86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8026a88:	68db      	ldr	r3, [r3, #12]
 8026a8a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8026a8e:	b9b8      	cbnz	r0, 8026ac0 <_Balloc+0x68>
 8026a90:	2101      	movs	r1, #1
 8026a92:	fa01 f605 	lsl.w	r6, r1, r5
 8026a96:	1d72      	adds	r2, r6, #5
 8026a98:	0092      	lsls	r2, r2, #2
 8026a9a:	4620      	mov	r0, r4
 8026a9c:	f7fc fd80 	bl	80235a0 <_calloc_r>
 8026aa0:	b160      	cbz	r0, 8026abc <_Balloc+0x64>
 8026aa2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8026aa6:	e00e      	b.n	8026ac6 <_Balloc+0x6e>
 8026aa8:	2221      	movs	r2, #33	; 0x21
 8026aaa:	2104      	movs	r1, #4
 8026aac:	4620      	mov	r0, r4
 8026aae:	f7fc fd77 	bl	80235a0 <_calloc_r>
 8026ab2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8026ab4:	60f0      	str	r0, [r6, #12]
 8026ab6:	68db      	ldr	r3, [r3, #12]
 8026ab8:	2b00      	cmp	r3, #0
 8026aba:	d1e4      	bne.n	8026a86 <_Balloc+0x2e>
 8026abc:	2000      	movs	r0, #0
 8026abe:	bd70      	pop	{r4, r5, r6, pc}
 8026ac0:	6802      	ldr	r2, [r0, #0]
 8026ac2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8026ac6:	2300      	movs	r3, #0
 8026ac8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8026acc:	e7f7      	b.n	8026abe <_Balloc+0x66>
 8026ace:	bf00      	nop
 8026ad0:	0802a156 	.word	0x0802a156
 8026ad4:	0802a2b8 	.word	0x0802a2b8

08026ad8 <_Bfree>:
 8026ad8:	b570      	push	{r4, r5, r6, lr}
 8026ada:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8026adc:	4605      	mov	r5, r0
 8026ade:	460c      	mov	r4, r1
 8026ae0:	b976      	cbnz	r6, 8026b00 <_Bfree+0x28>
 8026ae2:	2010      	movs	r0, #16
 8026ae4:	f7fc fd1c 	bl	8023520 <malloc>
 8026ae8:	4602      	mov	r2, r0
 8026aea:	6268      	str	r0, [r5, #36]	; 0x24
 8026aec:	b920      	cbnz	r0, 8026af8 <_Bfree+0x20>
 8026aee:	4b09      	ldr	r3, [pc, #36]	; (8026b14 <_Bfree+0x3c>)
 8026af0:	4809      	ldr	r0, [pc, #36]	; (8026b18 <_Bfree+0x40>)
 8026af2:	218a      	movs	r1, #138	; 0x8a
 8026af4:	f7fc fcaa 	bl	802344c <__assert_func>
 8026af8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8026afc:	6006      	str	r6, [r0, #0]
 8026afe:	60c6      	str	r6, [r0, #12]
 8026b00:	b13c      	cbz	r4, 8026b12 <_Bfree+0x3a>
 8026b02:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8026b04:	6862      	ldr	r2, [r4, #4]
 8026b06:	68db      	ldr	r3, [r3, #12]
 8026b08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8026b0c:	6021      	str	r1, [r4, #0]
 8026b0e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8026b12:	bd70      	pop	{r4, r5, r6, pc}
 8026b14:	0802a156 	.word	0x0802a156
 8026b18:	0802a2b8 	.word	0x0802a2b8

08026b1c <__multadd>:
 8026b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026b20:	690d      	ldr	r5, [r1, #16]
 8026b22:	4607      	mov	r7, r0
 8026b24:	460c      	mov	r4, r1
 8026b26:	461e      	mov	r6, r3
 8026b28:	f101 0c14 	add.w	ip, r1, #20
 8026b2c:	2000      	movs	r0, #0
 8026b2e:	f8dc 3000 	ldr.w	r3, [ip]
 8026b32:	b299      	uxth	r1, r3
 8026b34:	fb02 6101 	mla	r1, r2, r1, r6
 8026b38:	0c1e      	lsrs	r6, r3, #16
 8026b3a:	0c0b      	lsrs	r3, r1, #16
 8026b3c:	fb02 3306 	mla	r3, r2, r6, r3
 8026b40:	b289      	uxth	r1, r1
 8026b42:	3001      	adds	r0, #1
 8026b44:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8026b48:	4285      	cmp	r5, r0
 8026b4a:	f84c 1b04 	str.w	r1, [ip], #4
 8026b4e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8026b52:	dcec      	bgt.n	8026b2e <__multadd+0x12>
 8026b54:	b30e      	cbz	r6, 8026b9a <__multadd+0x7e>
 8026b56:	68a3      	ldr	r3, [r4, #8]
 8026b58:	42ab      	cmp	r3, r5
 8026b5a:	dc19      	bgt.n	8026b90 <__multadd+0x74>
 8026b5c:	6861      	ldr	r1, [r4, #4]
 8026b5e:	4638      	mov	r0, r7
 8026b60:	3101      	adds	r1, #1
 8026b62:	f7ff ff79 	bl	8026a58 <_Balloc>
 8026b66:	4680      	mov	r8, r0
 8026b68:	b928      	cbnz	r0, 8026b76 <__multadd+0x5a>
 8026b6a:	4602      	mov	r2, r0
 8026b6c:	4b0c      	ldr	r3, [pc, #48]	; (8026ba0 <__multadd+0x84>)
 8026b6e:	480d      	ldr	r0, [pc, #52]	; (8026ba4 <__multadd+0x88>)
 8026b70:	21b5      	movs	r1, #181	; 0xb5
 8026b72:	f7fc fc6b 	bl	802344c <__assert_func>
 8026b76:	6922      	ldr	r2, [r4, #16]
 8026b78:	3202      	adds	r2, #2
 8026b7a:	f104 010c 	add.w	r1, r4, #12
 8026b7e:	0092      	lsls	r2, r2, #2
 8026b80:	300c      	adds	r0, #12
 8026b82:	f7fc fcdd 	bl	8023540 <memcpy>
 8026b86:	4621      	mov	r1, r4
 8026b88:	4638      	mov	r0, r7
 8026b8a:	f7ff ffa5 	bl	8026ad8 <_Bfree>
 8026b8e:	4644      	mov	r4, r8
 8026b90:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8026b94:	3501      	adds	r5, #1
 8026b96:	615e      	str	r6, [r3, #20]
 8026b98:	6125      	str	r5, [r4, #16]
 8026b9a:	4620      	mov	r0, r4
 8026b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026ba0:	0802a1c8 	.word	0x0802a1c8
 8026ba4:	0802a2b8 	.word	0x0802a2b8

08026ba8 <__s2b>:
 8026ba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026bac:	460c      	mov	r4, r1
 8026bae:	4615      	mov	r5, r2
 8026bb0:	461f      	mov	r7, r3
 8026bb2:	2209      	movs	r2, #9
 8026bb4:	3308      	adds	r3, #8
 8026bb6:	4606      	mov	r6, r0
 8026bb8:	fb93 f3f2 	sdiv	r3, r3, r2
 8026bbc:	2100      	movs	r1, #0
 8026bbe:	2201      	movs	r2, #1
 8026bc0:	429a      	cmp	r2, r3
 8026bc2:	db09      	blt.n	8026bd8 <__s2b+0x30>
 8026bc4:	4630      	mov	r0, r6
 8026bc6:	f7ff ff47 	bl	8026a58 <_Balloc>
 8026bca:	b940      	cbnz	r0, 8026bde <__s2b+0x36>
 8026bcc:	4602      	mov	r2, r0
 8026bce:	4b19      	ldr	r3, [pc, #100]	; (8026c34 <__s2b+0x8c>)
 8026bd0:	4819      	ldr	r0, [pc, #100]	; (8026c38 <__s2b+0x90>)
 8026bd2:	21ce      	movs	r1, #206	; 0xce
 8026bd4:	f7fc fc3a 	bl	802344c <__assert_func>
 8026bd8:	0052      	lsls	r2, r2, #1
 8026bda:	3101      	adds	r1, #1
 8026bdc:	e7f0      	b.n	8026bc0 <__s2b+0x18>
 8026bde:	9b08      	ldr	r3, [sp, #32]
 8026be0:	6143      	str	r3, [r0, #20]
 8026be2:	2d09      	cmp	r5, #9
 8026be4:	f04f 0301 	mov.w	r3, #1
 8026be8:	6103      	str	r3, [r0, #16]
 8026bea:	dd16      	ble.n	8026c1a <__s2b+0x72>
 8026bec:	f104 0909 	add.w	r9, r4, #9
 8026bf0:	46c8      	mov	r8, r9
 8026bf2:	442c      	add	r4, r5
 8026bf4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8026bf8:	4601      	mov	r1, r0
 8026bfa:	3b30      	subs	r3, #48	; 0x30
 8026bfc:	220a      	movs	r2, #10
 8026bfe:	4630      	mov	r0, r6
 8026c00:	f7ff ff8c 	bl	8026b1c <__multadd>
 8026c04:	45a0      	cmp	r8, r4
 8026c06:	d1f5      	bne.n	8026bf4 <__s2b+0x4c>
 8026c08:	f1a5 0408 	sub.w	r4, r5, #8
 8026c0c:	444c      	add	r4, r9
 8026c0e:	1b2d      	subs	r5, r5, r4
 8026c10:	1963      	adds	r3, r4, r5
 8026c12:	42bb      	cmp	r3, r7
 8026c14:	db04      	blt.n	8026c20 <__s2b+0x78>
 8026c16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026c1a:	340a      	adds	r4, #10
 8026c1c:	2509      	movs	r5, #9
 8026c1e:	e7f6      	b.n	8026c0e <__s2b+0x66>
 8026c20:	f814 3b01 	ldrb.w	r3, [r4], #1
 8026c24:	4601      	mov	r1, r0
 8026c26:	3b30      	subs	r3, #48	; 0x30
 8026c28:	220a      	movs	r2, #10
 8026c2a:	4630      	mov	r0, r6
 8026c2c:	f7ff ff76 	bl	8026b1c <__multadd>
 8026c30:	e7ee      	b.n	8026c10 <__s2b+0x68>
 8026c32:	bf00      	nop
 8026c34:	0802a1c8 	.word	0x0802a1c8
 8026c38:	0802a2b8 	.word	0x0802a2b8

08026c3c <__hi0bits>:
 8026c3c:	0c03      	lsrs	r3, r0, #16
 8026c3e:	041b      	lsls	r3, r3, #16
 8026c40:	b9d3      	cbnz	r3, 8026c78 <__hi0bits+0x3c>
 8026c42:	0400      	lsls	r0, r0, #16
 8026c44:	2310      	movs	r3, #16
 8026c46:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8026c4a:	bf04      	itt	eq
 8026c4c:	0200      	lsleq	r0, r0, #8
 8026c4e:	3308      	addeq	r3, #8
 8026c50:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8026c54:	bf04      	itt	eq
 8026c56:	0100      	lsleq	r0, r0, #4
 8026c58:	3304      	addeq	r3, #4
 8026c5a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8026c5e:	bf04      	itt	eq
 8026c60:	0080      	lsleq	r0, r0, #2
 8026c62:	3302      	addeq	r3, #2
 8026c64:	2800      	cmp	r0, #0
 8026c66:	db05      	blt.n	8026c74 <__hi0bits+0x38>
 8026c68:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8026c6c:	f103 0301 	add.w	r3, r3, #1
 8026c70:	bf08      	it	eq
 8026c72:	2320      	moveq	r3, #32
 8026c74:	4618      	mov	r0, r3
 8026c76:	4770      	bx	lr
 8026c78:	2300      	movs	r3, #0
 8026c7a:	e7e4      	b.n	8026c46 <__hi0bits+0xa>

08026c7c <__lo0bits>:
 8026c7c:	6803      	ldr	r3, [r0, #0]
 8026c7e:	f013 0207 	ands.w	r2, r3, #7
 8026c82:	4601      	mov	r1, r0
 8026c84:	d00b      	beq.n	8026c9e <__lo0bits+0x22>
 8026c86:	07da      	lsls	r2, r3, #31
 8026c88:	d423      	bmi.n	8026cd2 <__lo0bits+0x56>
 8026c8a:	0798      	lsls	r0, r3, #30
 8026c8c:	bf49      	itett	mi
 8026c8e:	085b      	lsrmi	r3, r3, #1
 8026c90:	089b      	lsrpl	r3, r3, #2
 8026c92:	2001      	movmi	r0, #1
 8026c94:	600b      	strmi	r3, [r1, #0]
 8026c96:	bf5c      	itt	pl
 8026c98:	600b      	strpl	r3, [r1, #0]
 8026c9a:	2002      	movpl	r0, #2
 8026c9c:	4770      	bx	lr
 8026c9e:	b298      	uxth	r0, r3
 8026ca0:	b9a8      	cbnz	r0, 8026cce <__lo0bits+0x52>
 8026ca2:	0c1b      	lsrs	r3, r3, #16
 8026ca4:	2010      	movs	r0, #16
 8026ca6:	b2da      	uxtb	r2, r3
 8026ca8:	b90a      	cbnz	r2, 8026cae <__lo0bits+0x32>
 8026caa:	3008      	adds	r0, #8
 8026cac:	0a1b      	lsrs	r3, r3, #8
 8026cae:	071a      	lsls	r2, r3, #28
 8026cb0:	bf04      	itt	eq
 8026cb2:	091b      	lsreq	r3, r3, #4
 8026cb4:	3004      	addeq	r0, #4
 8026cb6:	079a      	lsls	r2, r3, #30
 8026cb8:	bf04      	itt	eq
 8026cba:	089b      	lsreq	r3, r3, #2
 8026cbc:	3002      	addeq	r0, #2
 8026cbe:	07da      	lsls	r2, r3, #31
 8026cc0:	d403      	bmi.n	8026cca <__lo0bits+0x4e>
 8026cc2:	085b      	lsrs	r3, r3, #1
 8026cc4:	f100 0001 	add.w	r0, r0, #1
 8026cc8:	d005      	beq.n	8026cd6 <__lo0bits+0x5a>
 8026cca:	600b      	str	r3, [r1, #0]
 8026ccc:	4770      	bx	lr
 8026cce:	4610      	mov	r0, r2
 8026cd0:	e7e9      	b.n	8026ca6 <__lo0bits+0x2a>
 8026cd2:	2000      	movs	r0, #0
 8026cd4:	4770      	bx	lr
 8026cd6:	2020      	movs	r0, #32
 8026cd8:	4770      	bx	lr
	...

08026cdc <__i2b>:
 8026cdc:	b510      	push	{r4, lr}
 8026cde:	460c      	mov	r4, r1
 8026ce0:	2101      	movs	r1, #1
 8026ce2:	f7ff feb9 	bl	8026a58 <_Balloc>
 8026ce6:	4602      	mov	r2, r0
 8026ce8:	b928      	cbnz	r0, 8026cf6 <__i2b+0x1a>
 8026cea:	4b05      	ldr	r3, [pc, #20]	; (8026d00 <__i2b+0x24>)
 8026cec:	4805      	ldr	r0, [pc, #20]	; (8026d04 <__i2b+0x28>)
 8026cee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8026cf2:	f7fc fbab 	bl	802344c <__assert_func>
 8026cf6:	2301      	movs	r3, #1
 8026cf8:	6144      	str	r4, [r0, #20]
 8026cfa:	6103      	str	r3, [r0, #16]
 8026cfc:	bd10      	pop	{r4, pc}
 8026cfe:	bf00      	nop
 8026d00:	0802a1c8 	.word	0x0802a1c8
 8026d04:	0802a2b8 	.word	0x0802a2b8

08026d08 <__multiply>:
 8026d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026d0c:	4691      	mov	r9, r2
 8026d0e:	690a      	ldr	r2, [r1, #16]
 8026d10:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8026d14:	429a      	cmp	r2, r3
 8026d16:	bfb8      	it	lt
 8026d18:	460b      	movlt	r3, r1
 8026d1a:	460c      	mov	r4, r1
 8026d1c:	bfbc      	itt	lt
 8026d1e:	464c      	movlt	r4, r9
 8026d20:	4699      	movlt	r9, r3
 8026d22:	6927      	ldr	r7, [r4, #16]
 8026d24:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8026d28:	68a3      	ldr	r3, [r4, #8]
 8026d2a:	6861      	ldr	r1, [r4, #4]
 8026d2c:	eb07 060a 	add.w	r6, r7, sl
 8026d30:	42b3      	cmp	r3, r6
 8026d32:	b085      	sub	sp, #20
 8026d34:	bfb8      	it	lt
 8026d36:	3101      	addlt	r1, #1
 8026d38:	f7ff fe8e 	bl	8026a58 <_Balloc>
 8026d3c:	b930      	cbnz	r0, 8026d4c <__multiply+0x44>
 8026d3e:	4602      	mov	r2, r0
 8026d40:	4b44      	ldr	r3, [pc, #272]	; (8026e54 <__multiply+0x14c>)
 8026d42:	4845      	ldr	r0, [pc, #276]	; (8026e58 <__multiply+0x150>)
 8026d44:	f240 115d 	movw	r1, #349	; 0x15d
 8026d48:	f7fc fb80 	bl	802344c <__assert_func>
 8026d4c:	f100 0514 	add.w	r5, r0, #20
 8026d50:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8026d54:	462b      	mov	r3, r5
 8026d56:	2200      	movs	r2, #0
 8026d58:	4543      	cmp	r3, r8
 8026d5a:	d321      	bcc.n	8026da0 <__multiply+0x98>
 8026d5c:	f104 0314 	add.w	r3, r4, #20
 8026d60:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8026d64:	f109 0314 	add.w	r3, r9, #20
 8026d68:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8026d6c:	9202      	str	r2, [sp, #8]
 8026d6e:	1b3a      	subs	r2, r7, r4
 8026d70:	3a15      	subs	r2, #21
 8026d72:	f022 0203 	bic.w	r2, r2, #3
 8026d76:	3204      	adds	r2, #4
 8026d78:	f104 0115 	add.w	r1, r4, #21
 8026d7c:	428f      	cmp	r7, r1
 8026d7e:	bf38      	it	cc
 8026d80:	2204      	movcc	r2, #4
 8026d82:	9201      	str	r2, [sp, #4]
 8026d84:	9a02      	ldr	r2, [sp, #8]
 8026d86:	9303      	str	r3, [sp, #12]
 8026d88:	429a      	cmp	r2, r3
 8026d8a:	d80c      	bhi.n	8026da6 <__multiply+0x9e>
 8026d8c:	2e00      	cmp	r6, #0
 8026d8e:	dd03      	ble.n	8026d98 <__multiply+0x90>
 8026d90:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8026d94:	2b00      	cmp	r3, #0
 8026d96:	d05a      	beq.n	8026e4e <__multiply+0x146>
 8026d98:	6106      	str	r6, [r0, #16]
 8026d9a:	b005      	add	sp, #20
 8026d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026da0:	f843 2b04 	str.w	r2, [r3], #4
 8026da4:	e7d8      	b.n	8026d58 <__multiply+0x50>
 8026da6:	f8b3 a000 	ldrh.w	sl, [r3]
 8026daa:	f1ba 0f00 	cmp.w	sl, #0
 8026dae:	d024      	beq.n	8026dfa <__multiply+0xf2>
 8026db0:	f104 0e14 	add.w	lr, r4, #20
 8026db4:	46a9      	mov	r9, r5
 8026db6:	f04f 0c00 	mov.w	ip, #0
 8026dba:	f85e 2b04 	ldr.w	r2, [lr], #4
 8026dbe:	f8d9 1000 	ldr.w	r1, [r9]
 8026dc2:	fa1f fb82 	uxth.w	fp, r2
 8026dc6:	b289      	uxth	r1, r1
 8026dc8:	fb0a 110b 	mla	r1, sl, fp, r1
 8026dcc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8026dd0:	f8d9 2000 	ldr.w	r2, [r9]
 8026dd4:	4461      	add	r1, ip
 8026dd6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8026dda:	fb0a c20b 	mla	r2, sl, fp, ip
 8026dde:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8026de2:	b289      	uxth	r1, r1
 8026de4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8026de8:	4577      	cmp	r7, lr
 8026dea:	f849 1b04 	str.w	r1, [r9], #4
 8026dee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8026df2:	d8e2      	bhi.n	8026dba <__multiply+0xb2>
 8026df4:	9a01      	ldr	r2, [sp, #4]
 8026df6:	f845 c002 	str.w	ip, [r5, r2]
 8026dfa:	9a03      	ldr	r2, [sp, #12]
 8026dfc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8026e00:	3304      	adds	r3, #4
 8026e02:	f1b9 0f00 	cmp.w	r9, #0
 8026e06:	d020      	beq.n	8026e4a <__multiply+0x142>
 8026e08:	6829      	ldr	r1, [r5, #0]
 8026e0a:	f104 0c14 	add.w	ip, r4, #20
 8026e0e:	46ae      	mov	lr, r5
 8026e10:	f04f 0a00 	mov.w	sl, #0
 8026e14:	f8bc b000 	ldrh.w	fp, [ip]
 8026e18:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8026e1c:	fb09 220b 	mla	r2, r9, fp, r2
 8026e20:	4492      	add	sl, r2
 8026e22:	b289      	uxth	r1, r1
 8026e24:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8026e28:	f84e 1b04 	str.w	r1, [lr], #4
 8026e2c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8026e30:	f8be 1000 	ldrh.w	r1, [lr]
 8026e34:	0c12      	lsrs	r2, r2, #16
 8026e36:	fb09 1102 	mla	r1, r9, r2, r1
 8026e3a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8026e3e:	4567      	cmp	r7, ip
 8026e40:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8026e44:	d8e6      	bhi.n	8026e14 <__multiply+0x10c>
 8026e46:	9a01      	ldr	r2, [sp, #4]
 8026e48:	50a9      	str	r1, [r5, r2]
 8026e4a:	3504      	adds	r5, #4
 8026e4c:	e79a      	b.n	8026d84 <__multiply+0x7c>
 8026e4e:	3e01      	subs	r6, #1
 8026e50:	e79c      	b.n	8026d8c <__multiply+0x84>
 8026e52:	bf00      	nop
 8026e54:	0802a1c8 	.word	0x0802a1c8
 8026e58:	0802a2b8 	.word	0x0802a2b8

08026e5c <__pow5mult>:
 8026e5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026e60:	4615      	mov	r5, r2
 8026e62:	f012 0203 	ands.w	r2, r2, #3
 8026e66:	4606      	mov	r6, r0
 8026e68:	460f      	mov	r7, r1
 8026e6a:	d007      	beq.n	8026e7c <__pow5mult+0x20>
 8026e6c:	4c25      	ldr	r4, [pc, #148]	; (8026f04 <__pow5mult+0xa8>)
 8026e6e:	3a01      	subs	r2, #1
 8026e70:	2300      	movs	r3, #0
 8026e72:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8026e76:	f7ff fe51 	bl	8026b1c <__multadd>
 8026e7a:	4607      	mov	r7, r0
 8026e7c:	10ad      	asrs	r5, r5, #2
 8026e7e:	d03d      	beq.n	8026efc <__pow5mult+0xa0>
 8026e80:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8026e82:	b97c      	cbnz	r4, 8026ea4 <__pow5mult+0x48>
 8026e84:	2010      	movs	r0, #16
 8026e86:	f7fc fb4b 	bl	8023520 <malloc>
 8026e8a:	4602      	mov	r2, r0
 8026e8c:	6270      	str	r0, [r6, #36]	; 0x24
 8026e8e:	b928      	cbnz	r0, 8026e9c <__pow5mult+0x40>
 8026e90:	4b1d      	ldr	r3, [pc, #116]	; (8026f08 <__pow5mult+0xac>)
 8026e92:	481e      	ldr	r0, [pc, #120]	; (8026f0c <__pow5mult+0xb0>)
 8026e94:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8026e98:	f7fc fad8 	bl	802344c <__assert_func>
 8026e9c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8026ea0:	6004      	str	r4, [r0, #0]
 8026ea2:	60c4      	str	r4, [r0, #12]
 8026ea4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8026ea8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8026eac:	b94c      	cbnz	r4, 8026ec2 <__pow5mult+0x66>
 8026eae:	f240 2171 	movw	r1, #625	; 0x271
 8026eb2:	4630      	mov	r0, r6
 8026eb4:	f7ff ff12 	bl	8026cdc <__i2b>
 8026eb8:	2300      	movs	r3, #0
 8026eba:	f8c8 0008 	str.w	r0, [r8, #8]
 8026ebe:	4604      	mov	r4, r0
 8026ec0:	6003      	str	r3, [r0, #0]
 8026ec2:	f04f 0900 	mov.w	r9, #0
 8026ec6:	07eb      	lsls	r3, r5, #31
 8026ec8:	d50a      	bpl.n	8026ee0 <__pow5mult+0x84>
 8026eca:	4639      	mov	r1, r7
 8026ecc:	4622      	mov	r2, r4
 8026ece:	4630      	mov	r0, r6
 8026ed0:	f7ff ff1a 	bl	8026d08 <__multiply>
 8026ed4:	4639      	mov	r1, r7
 8026ed6:	4680      	mov	r8, r0
 8026ed8:	4630      	mov	r0, r6
 8026eda:	f7ff fdfd 	bl	8026ad8 <_Bfree>
 8026ede:	4647      	mov	r7, r8
 8026ee0:	106d      	asrs	r5, r5, #1
 8026ee2:	d00b      	beq.n	8026efc <__pow5mult+0xa0>
 8026ee4:	6820      	ldr	r0, [r4, #0]
 8026ee6:	b938      	cbnz	r0, 8026ef8 <__pow5mult+0x9c>
 8026ee8:	4622      	mov	r2, r4
 8026eea:	4621      	mov	r1, r4
 8026eec:	4630      	mov	r0, r6
 8026eee:	f7ff ff0b 	bl	8026d08 <__multiply>
 8026ef2:	6020      	str	r0, [r4, #0]
 8026ef4:	f8c0 9000 	str.w	r9, [r0]
 8026ef8:	4604      	mov	r4, r0
 8026efa:	e7e4      	b.n	8026ec6 <__pow5mult+0x6a>
 8026efc:	4638      	mov	r0, r7
 8026efe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026f02:	bf00      	nop
 8026f04:	0802a408 	.word	0x0802a408
 8026f08:	0802a156 	.word	0x0802a156
 8026f0c:	0802a2b8 	.word	0x0802a2b8

08026f10 <__lshift>:
 8026f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026f14:	460c      	mov	r4, r1
 8026f16:	6849      	ldr	r1, [r1, #4]
 8026f18:	6923      	ldr	r3, [r4, #16]
 8026f1a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8026f1e:	68a3      	ldr	r3, [r4, #8]
 8026f20:	4607      	mov	r7, r0
 8026f22:	4691      	mov	r9, r2
 8026f24:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8026f28:	f108 0601 	add.w	r6, r8, #1
 8026f2c:	42b3      	cmp	r3, r6
 8026f2e:	db0b      	blt.n	8026f48 <__lshift+0x38>
 8026f30:	4638      	mov	r0, r7
 8026f32:	f7ff fd91 	bl	8026a58 <_Balloc>
 8026f36:	4605      	mov	r5, r0
 8026f38:	b948      	cbnz	r0, 8026f4e <__lshift+0x3e>
 8026f3a:	4602      	mov	r2, r0
 8026f3c:	4b2a      	ldr	r3, [pc, #168]	; (8026fe8 <__lshift+0xd8>)
 8026f3e:	482b      	ldr	r0, [pc, #172]	; (8026fec <__lshift+0xdc>)
 8026f40:	f240 11d9 	movw	r1, #473	; 0x1d9
 8026f44:	f7fc fa82 	bl	802344c <__assert_func>
 8026f48:	3101      	adds	r1, #1
 8026f4a:	005b      	lsls	r3, r3, #1
 8026f4c:	e7ee      	b.n	8026f2c <__lshift+0x1c>
 8026f4e:	2300      	movs	r3, #0
 8026f50:	f100 0114 	add.w	r1, r0, #20
 8026f54:	f100 0210 	add.w	r2, r0, #16
 8026f58:	4618      	mov	r0, r3
 8026f5a:	4553      	cmp	r3, sl
 8026f5c:	db37      	blt.n	8026fce <__lshift+0xbe>
 8026f5e:	6920      	ldr	r0, [r4, #16]
 8026f60:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8026f64:	f104 0314 	add.w	r3, r4, #20
 8026f68:	f019 091f 	ands.w	r9, r9, #31
 8026f6c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8026f70:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8026f74:	d02f      	beq.n	8026fd6 <__lshift+0xc6>
 8026f76:	f1c9 0e20 	rsb	lr, r9, #32
 8026f7a:	468a      	mov	sl, r1
 8026f7c:	f04f 0c00 	mov.w	ip, #0
 8026f80:	681a      	ldr	r2, [r3, #0]
 8026f82:	fa02 f209 	lsl.w	r2, r2, r9
 8026f86:	ea42 020c 	orr.w	r2, r2, ip
 8026f8a:	f84a 2b04 	str.w	r2, [sl], #4
 8026f8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8026f92:	4298      	cmp	r0, r3
 8026f94:	fa22 fc0e 	lsr.w	ip, r2, lr
 8026f98:	d8f2      	bhi.n	8026f80 <__lshift+0x70>
 8026f9a:	1b03      	subs	r3, r0, r4
 8026f9c:	3b15      	subs	r3, #21
 8026f9e:	f023 0303 	bic.w	r3, r3, #3
 8026fa2:	3304      	adds	r3, #4
 8026fa4:	f104 0215 	add.w	r2, r4, #21
 8026fa8:	4290      	cmp	r0, r2
 8026faa:	bf38      	it	cc
 8026fac:	2304      	movcc	r3, #4
 8026fae:	f841 c003 	str.w	ip, [r1, r3]
 8026fb2:	f1bc 0f00 	cmp.w	ip, #0
 8026fb6:	d001      	beq.n	8026fbc <__lshift+0xac>
 8026fb8:	f108 0602 	add.w	r6, r8, #2
 8026fbc:	3e01      	subs	r6, #1
 8026fbe:	4638      	mov	r0, r7
 8026fc0:	612e      	str	r6, [r5, #16]
 8026fc2:	4621      	mov	r1, r4
 8026fc4:	f7ff fd88 	bl	8026ad8 <_Bfree>
 8026fc8:	4628      	mov	r0, r5
 8026fca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026fce:	f842 0f04 	str.w	r0, [r2, #4]!
 8026fd2:	3301      	adds	r3, #1
 8026fd4:	e7c1      	b.n	8026f5a <__lshift+0x4a>
 8026fd6:	3904      	subs	r1, #4
 8026fd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8026fdc:	f841 2f04 	str.w	r2, [r1, #4]!
 8026fe0:	4298      	cmp	r0, r3
 8026fe2:	d8f9      	bhi.n	8026fd8 <__lshift+0xc8>
 8026fe4:	e7ea      	b.n	8026fbc <__lshift+0xac>
 8026fe6:	bf00      	nop
 8026fe8:	0802a1c8 	.word	0x0802a1c8
 8026fec:	0802a2b8 	.word	0x0802a2b8

08026ff0 <__mcmp>:
 8026ff0:	b530      	push	{r4, r5, lr}
 8026ff2:	6902      	ldr	r2, [r0, #16]
 8026ff4:	690c      	ldr	r4, [r1, #16]
 8026ff6:	1b12      	subs	r2, r2, r4
 8026ff8:	d10e      	bne.n	8027018 <__mcmp+0x28>
 8026ffa:	f100 0314 	add.w	r3, r0, #20
 8026ffe:	3114      	adds	r1, #20
 8027000:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8027004:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8027008:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 802700c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8027010:	42a5      	cmp	r5, r4
 8027012:	d003      	beq.n	802701c <__mcmp+0x2c>
 8027014:	d305      	bcc.n	8027022 <__mcmp+0x32>
 8027016:	2201      	movs	r2, #1
 8027018:	4610      	mov	r0, r2
 802701a:	bd30      	pop	{r4, r5, pc}
 802701c:	4283      	cmp	r3, r0
 802701e:	d3f3      	bcc.n	8027008 <__mcmp+0x18>
 8027020:	e7fa      	b.n	8027018 <__mcmp+0x28>
 8027022:	f04f 32ff 	mov.w	r2, #4294967295
 8027026:	e7f7      	b.n	8027018 <__mcmp+0x28>

08027028 <__mdiff>:
 8027028:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802702c:	460c      	mov	r4, r1
 802702e:	4606      	mov	r6, r0
 8027030:	4611      	mov	r1, r2
 8027032:	4620      	mov	r0, r4
 8027034:	4690      	mov	r8, r2
 8027036:	f7ff ffdb 	bl	8026ff0 <__mcmp>
 802703a:	1e05      	subs	r5, r0, #0
 802703c:	d110      	bne.n	8027060 <__mdiff+0x38>
 802703e:	4629      	mov	r1, r5
 8027040:	4630      	mov	r0, r6
 8027042:	f7ff fd09 	bl	8026a58 <_Balloc>
 8027046:	b930      	cbnz	r0, 8027056 <__mdiff+0x2e>
 8027048:	4b3a      	ldr	r3, [pc, #232]	; (8027134 <__mdiff+0x10c>)
 802704a:	4602      	mov	r2, r0
 802704c:	f240 2132 	movw	r1, #562	; 0x232
 8027050:	4839      	ldr	r0, [pc, #228]	; (8027138 <__mdiff+0x110>)
 8027052:	f7fc f9fb 	bl	802344c <__assert_func>
 8027056:	2301      	movs	r3, #1
 8027058:	e9c0 3504 	strd	r3, r5, [r0, #16]
 802705c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027060:	bfa4      	itt	ge
 8027062:	4643      	movge	r3, r8
 8027064:	46a0      	movge	r8, r4
 8027066:	4630      	mov	r0, r6
 8027068:	f8d8 1004 	ldr.w	r1, [r8, #4]
 802706c:	bfa6      	itte	ge
 802706e:	461c      	movge	r4, r3
 8027070:	2500      	movge	r5, #0
 8027072:	2501      	movlt	r5, #1
 8027074:	f7ff fcf0 	bl	8026a58 <_Balloc>
 8027078:	b920      	cbnz	r0, 8027084 <__mdiff+0x5c>
 802707a:	4b2e      	ldr	r3, [pc, #184]	; (8027134 <__mdiff+0x10c>)
 802707c:	4602      	mov	r2, r0
 802707e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8027082:	e7e5      	b.n	8027050 <__mdiff+0x28>
 8027084:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8027088:	6926      	ldr	r6, [r4, #16]
 802708a:	60c5      	str	r5, [r0, #12]
 802708c:	f104 0914 	add.w	r9, r4, #20
 8027090:	f108 0514 	add.w	r5, r8, #20
 8027094:	f100 0e14 	add.w	lr, r0, #20
 8027098:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 802709c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80270a0:	f108 0210 	add.w	r2, r8, #16
 80270a4:	46f2      	mov	sl, lr
 80270a6:	2100      	movs	r1, #0
 80270a8:	f859 3b04 	ldr.w	r3, [r9], #4
 80270ac:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80270b0:	fa1f f883 	uxth.w	r8, r3
 80270b4:	fa11 f18b 	uxtah	r1, r1, fp
 80270b8:	0c1b      	lsrs	r3, r3, #16
 80270ba:	eba1 0808 	sub.w	r8, r1, r8
 80270be:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80270c2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80270c6:	fa1f f888 	uxth.w	r8, r8
 80270ca:	1419      	asrs	r1, r3, #16
 80270cc:	454e      	cmp	r6, r9
 80270ce:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80270d2:	f84a 3b04 	str.w	r3, [sl], #4
 80270d6:	d8e7      	bhi.n	80270a8 <__mdiff+0x80>
 80270d8:	1b33      	subs	r3, r6, r4
 80270da:	3b15      	subs	r3, #21
 80270dc:	f023 0303 	bic.w	r3, r3, #3
 80270e0:	3304      	adds	r3, #4
 80270e2:	3415      	adds	r4, #21
 80270e4:	42a6      	cmp	r6, r4
 80270e6:	bf38      	it	cc
 80270e8:	2304      	movcc	r3, #4
 80270ea:	441d      	add	r5, r3
 80270ec:	4473      	add	r3, lr
 80270ee:	469e      	mov	lr, r3
 80270f0:	462e      	mov	r6, r5
 80270f2:	4566      	cmp	r6, ip
 80270f4:	d30e      	bcc.n	8027114 <__mdiff+0xec>
 80270f6:	f10c 0203 	add.w	r2, ip, #3
 80270fa:	1b52      	subs	r2, r2, r5
 80270fc:	f022 0203 	bic.w	r2, r2, #3
 8027100:	3d03      	subs	r5, #3
 8027102:	45ac      	cmp	ip, r5
 8027104:	bf38      	it	cc
 8027106:	2200      	movcc	r2, #0
 8027108:	441a      	add	r2, r3
 802710a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 802710e:	b17b      	cbz	r3, 8027130 <__mdiff+0x108>
 8027110:	6107      	str	r7, [r0, #16]
 8027112:	e7a3      	b.n	802705c <__mdiff+0x34>
 8027114:	f856 8b04 	ldr.w	r8, [r6], #4
 8027118:	fa11 f288 	uxtah	r2, r1, r8
 802711c:	1414      	asrs	r4, r2, #16
 802711e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8027122:	b292      	uxth	r2, r2
 8027124:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8027128:	f84e 2b04 	str.w	r2, [lr], #4
 802712c:	1421      	asrs	r1, r4, #16
 802712e:	e7e0      	b.n	80270f2 <__mdiff+0xca>
 8027130:	3f01      	subs	r7, #1
 8027132:	e7ea      	b.n	802710a <__mdiff+0xe2>
 8027134:	0802a1c8 	.word	0x0802a1c8
 8027138:	0802a2b8 	.word	0x0802a2b8

0802713c <__ulp>:
 802713c:	b082      	sub	sp, #8
 802713e:	ed8d 0b00 	vstr	d0, [sp]
 8027142:	9b01      	ldr	r3, [sp, #4]
 8027144:	4912      	ldr	r1, [pc, #72]	; (8027190 <__ulp+0x54>)
 8027146:	4019      	ands	r1, r3
 8027148:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 802714c:	2900      	cmp	r1, #0
 802714e:	dd05      	ble.n	802715c <__ulp+0x20>
 8027150:	2200      	movs	r2, #0
 8027152:	460b      	mov	r3, r1
 8027154:	ec43 2b10 	vmov	d0, r2, r3
 8027158:	b002      	add	sp, #8
 802715a:	4770      	bx	lr
 802715c:	4249      	negs	r1, r1
 802715e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8027162:	ea4f 5021 	mov.w	r0, r1, asr #20
 8027166:	f04f 0200 	mov.w	r2, #0
 802716a:	f04f 0300 	mov.w	r3, #0
 802716e:	da04      	bge.n	802717a <__ulp+0x3e>
 8027170:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8027174:	fa41 f300 	asr.w	r3, r1, r0
 8027178:	e7ec      	b.n	8027154 <__ulp+0x18>
 802717a:	f1a0 0114 	sub.w	r1, r0, #20
 802717e:	291e      	cmp	r1, #30
 8027180:	bfda      	itte	le
 8027182:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8027186:	fa20 f101 	lsrle.w	r1, r0, r1
 802718a:	2101      	movgt	r1, #1
 802718c:	460a      	mov	r2, r1
 802718e:	e7e1      	b.n	8027154 <__ulp+0x18>
 8027190:	7ff00000 	.word	0x7ff00000

08027194 <__b2d>:
 8027194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027196:	6905      	ldr	r5, [r0, #16]
 8027198:	f100 0714 	add.w	r7, r0, #20
 802719c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80271a0:	1f2e      	subs	r6, r5, #4
 80271a2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80271a6:	4620      	mov	r0, r4
 80271a8:	f7ff fd48 	bl	8026c3c <__hi0bits>
 80271ac:	f1c0 0320 	rsb	r3, r0, #32
 80271b0:	280a      	cmp	r0, #10
 80271b2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8027230 <__b2d+0x9c>
 80271b6:	600b      	str	r3, [r1, #0]
 80271b8:	dc14      	bgt.n	80271e4 <__b2d+0x50>
 80271ba:	f1c0 0e0b 	rsb	lr, r0, #11
 80271be:	fa24 f10e 	lsr.w	r1, r4, lr
 80271c2:	42b7      	cmp	r7, r6
 80271c4:	ea41 030c 	orr.w	r3, r1, ip
 80271c8:	bf34      	ite	cc
 80271ca:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80271ce:	2100      	movcs	r1, #0
 80271d0:	3015      	adds	r0, #21
 80271d2:	fa04 f000 	lsl.w	r0, r4, r0
 80271d6:	fa21 f10e 	lsr.w	r1, r1, lr
 80271da:	ea40 0201 	orr.w	r2, r0, r1
 80271de:	ec43 2b10 	vmov	d0, r2, r3
 80271e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80271e4:	42b7      	cmp	r7, r6
 80271e6:	bf3a      	itte	cc
 80271e8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80271ec:	f1a5 0608 	subcc.w	r6, r5, #8
 80271f0:	2100      	movcs	r1, #0
 80271f2:	380b      	subs	r0, #11
 80271f4:	d017      	beq.n	8027226 <__b2d+0x92>
 80271f6:	f1c0 0c20 	rsb	ip, r0, #32
 80271fa:	fa04 f500 	lsl.w	r5, r4, r0
 80271fe:	42be      	cmp	r6, r7
 8027200:	fa21 f40c 	lsr.w	r4, r1, ip
 8027204:	ea45 0504 	orr.w	r5, r5, r4
 8027208:	bf8c      	ite	hi
 802720a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 802720e:	2400      	movls	r4, #0
 8027210:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8027214:	fa01 f000 	lsl.w	r0, r1, r0
 8027218:	fa24 f40c 	lsr.w	r4, r4, ip
 802721c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8027220:	ea40 0204 	orr.w	r2, r0, r4
 8027224:	e7db      	b.n	80271de <__b2d+0x4a>
 8027226:	ea44 030c 	orr.w	r3, r4, ip
 802722a:	460a      	mov	r2, r1
 802722c:	e7d7      	b.n	80271de <__b2d+0x4a>
 802722e:	bf00      	nop
 8027230:	3ff00000 	.word	0x3ff00000

08027234 <__d2b>:
 8027234:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8027238:	4689      	mov	r9, r1
 802723a:	2101      	movs	r1, #1
 802723c:	ec57 6b10 	vmov	r6, r7, d0
 8027240:	4690      	mov	r8, r2
 8027242:	f7ff fc09 	bl	8026a58 <_Balloc>
 8027246:	4604      	mov	r4, r0
 8027248:	b930      	cbnz	r0, 8027258 <__d2b+0x24>
 802724a:	4602      	mov	r2, r0
 802724c:	4b25      	ldr	r3, [pc, #148]	; (80272e4 <__d2b+0xb0>)
 802724e:	4826      	ldr	r0, [pc, #152]	; (80272e8 <__d2b+0xb4>)
 8027250:	f240 310a 	movw	r1, #778	; 0x30a
 8027254:	f7fc f8fa 	bl	802344c <__assert_func>
 8027258:	f3c7 550a 	ubfx	r5, r7, #20, #11
 802725c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8027260:	bb35      	cbnz	r5, 80272b0 <__d2b+0x7c>
 8027262:	2e00      	cmp	r6, #0
 8027264:	9301      	str	r3, [sp, #4]
 8027266:	d028      	beq.n	80272ba <__d2b+0x86>
 8027268:	4668      	mov	r0, sp
 802726a:	9600      	str	r6, [sp, #0]
 802726c:	f7ff fd06 	bl	8026c7c <__lo0bits>
 8027270:	9900      	ldr	r1, [sp, #0]
 8027272:	b300      	cbz	r0, 80272b6 <__d2b+0x82>
 8027274:	9a01      	ldr	r2, [sp, #4]
 8027276:	f1c0 0320 	rsb	r3, r0, #32
 802727a:	fa02 f303 	lsl.w	r3, r2, r3
 802727e:	430b      	orrs	r3, r1
 8027280:	40c2      	lsrs	r2, r0
 8027282:	6163      	str	r3, [r4, #20]
 8027284:	9201      	str	r2, [sp, #4]
 8027286:	9b01      	ldr	r3, [sp, #4]
 8027288:	61a3      	str	r3, [r4, #24]
 802728a:	2b00      	cmp	r3, #0
 802728c:	bf14      	ite	ne
 802728e:	2202      	movne	r2, #2
 8027290:	2201      	moveq	r2, #1
 8027292:	6122      	str	r2, [r4, #16]
 8027294:	b1d5      	cbz	r5, 80272cc <__d2b+0x98>
 8027296:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 802729a:	4405      	add	r5, r0
 802729c:	f8c9 5000 	str.w	r5, [r9]
 80272a0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80272a4:	f8c8 0000 	str.w	r0, [r8]
 80272a8:	4620      	mov	r0, r4
 80272aa:	b003      	add	sp, #12
 80272ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80272b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80272b4:	e7d5      	b.n	8027262 <__d2b+0x2e>
 80272b6:	6161      	str	r1, [r4, #20]
 80272b8:	e7e5      	b.n	8027286 <__d2b+0x52>
 80272ba:	a801      	add	r0, sp, #4
 80272bc:	f7ff fcde 	bl	8026c7c <__lo0bits>
 80272c0:	9b01      	ldr	r3, [sp, #4]
 80272c2:	6163      	str	r3, [r4, #20]
 80272c4:	2201      	movs	r2, #1
 80272c6:	6122      	str	r2, [r4, #16]
 80272c8:	3020      	adds	r0, #32
 80272ca:	e7e3      	b.n	8027294 <__d2b+0x60>
 80272cc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80272d0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80272d4:	f8c9 0000 	str.w	r0, [r9]
 80272d8:	6918      	ldr	r0, [r3, #16]
 80272da:	f7ff fcaf 	bl	8026c3c <__hi0bits>
 80272de:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80272e2:	e7df      	b.n	80272a4 <__d2b+0x70>
 80272e4:	0802a1c8 	.word	0x0802a1c8
 80272e8:	0802a2b8 	.word	0x0802a2b8

080272ec <__ratio>:
 80272ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80272f0:	4688      	mov	r8, r1
 80272f2:	4669      	mov	r1, sp
 80272f4:	4681      	mov	r9, r0
 80272f6:	f7ff ff4d 	bl	8027194 <__b2d>
 80272fa:	a901      	add	r1, sp, #4
 80272fc:	4640      	mov	r0, r8
 80272fe:	ec55 4b10 	vmov	r4, r5, d0
 8027302:	f7ff ff47 	bl	8027194 <__b2d>
 8027306:	f8d9 3010 	ldr.w	r3, [r9, #16]
 802730a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 802730e:	eba3 0c02 	sub.w	ip, r3, r2
 8027312:	e9dd 3200 	ldrd	r3, r2, [sp]
 8027316:	1a9b      	subs	r3, r3, r2
 8027318:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 802731c:	ec51 0b10 	vmov	r0, r1, d0
 8027320:	2b00      	cmp	r3, #0
 8027322:	bfd6      	itet	le
 8027324:	460a      	movle	r2, r1
 8027326:	462a      	movgt	r2, r5
 8027328:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 802732c:	468b      	mov	fp, r1
 802732e:	462f      	mov	r7, r5
 8027330:	bfd4      	ite	le
 8027332:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8027336:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 802733a:	4620      	mov	r0, r4
 802733c:	ee10 2a10 	vmov	r2, s0
 8027340:	465b      	mov	r3, fp
 8027342:	4639      	mov	r1, r7
 8027344:	f7d9 fa8c 	bl	8000860 <__aeabi_ddiv>
 8027348:	ec41 0b10 	vmov	d0, r0, r1
 802734c:	b003      	add	sp, #12
 802734e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08027352 <__copybits>:
 8027352:	3901      	subs	r1, #1
 8027354:	b570      	push	{r4, r5, r6, lr}
 8027356:	1149      	asrs	r1, r1, #5
 8027358:	6914      	ldr	r4, [r2, #16]
 802735a:	3101      	adds	r1, #1
 802735c:	f102 0314 	add.w	r3, r2, #20
 8027360:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8027364:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8027368:	1f05      	subs	r5, r0, #4
 802736a:	42a3      	cmp	r3, r4
 802736c:	d30c      	bcc.n	8027388 <__copybits+0x36>
 802736e:	1aa3      	subs	r3, r4, r2
 8027370:	3b11      	subs	r3, #17
 8027372:	f023 0303 	bic.w	r3, r3, #3
 8027376:	3211      	adds	r2, #17
 8027378:	42a2      	cmp	r2, r4
 802737a:	bf88      	it	hi
 802737c:	2300      	movhi	r3, #0
 802737e:	4418      	add	r0, r3
 8027380:	2300      	movs	r3, #0
 8027382:	4288      	cmp	r0, r1
 8027384:	d305      	bcc.n	8027392 <__copybits+0x40>
 8027386:	bd70      	pop	{r4, r5, r6, pc}
 8027388:	f853 6b04 	ldr.w	r6, [r3], #4
 802738c:	f845 6f04 	str.w	r6, [r5, #4]!
 8027390:	e7eb      	b.n	802736a <__copybits+0x18>
 8027392:	f840 3b04 	str.w	r3, [r0], #4
 8027396:	e7f4      	b.n	8027382 <__copybits+0x30>

08027398 <__any_on>:
 8027398:	f100 0214 	add.w	r2, r0, #20
 802739c:	6900      	ldr	r0, [r0, #16]
 802739e:	114b      	asrs	r3, r1, #5
 80273a0:	4298      	cmp	r0, r3
 80273a2:	b510      	push	{r4, lr}
 80273a4:	db11      	blt.n	80273ca <__any_on+0x32>
 80273a6:	dd0a      	ble.n	80273be <__any_on+0x26>
 80273a8:	f011 011f 	ands.w	r1, r1, #31
 80273ac:	d007      	beq.n	80273be <__any_on+0x26>
 80273ae:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80273b2:	fa24 f001 	lsr.w	r0, r4, r1
 80273b6:	fa00 f101 	lsl.w	r1, r0, r1
 80273ba:	428c      	cmp	r4, r1
 80273bc:	d10b      	bne.n	80273d6 <__any_on+0x3e>
 80273be:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80273c2:	4293      	cmp	r3, r2
 80273c4:	d803      	bhi.n	80273ce <__any_on+0x36>
 80273c6:	2000      	movs	r0, #0
 80273c8:	bd10      	pop	{r4, pc}
 80273ca:	4603      	mov	r3, r0
 80273cc:	e7f7      	b.n	80273be <__any_on+0x26>
 80273ce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80273d2:	2900      	cmp	r1, #0
 80273d4:	d0f5      	beq.n	80273c2 <__any_on+0x2a>
 80273d6:	2001      	movs	r0, #1
 80273d8:	e7f6      	b.n	80273c8 <__any_on+0x30>

080273da <_realloc_r>:
 80273da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80273de:	4680      	mov	r8, r0
 80273e0:	4614      	mov	r4, r2
 80273e2:	460e      	mov	r6, r1
 80273e4:	b921      	cbnz	r1, 80273f0 <_realloc_r+0x16>
 80273e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80273ea:	4611      	mov	r1, r2
 80273ec:	f7fc b95a 	b.w	80236a4 <_malloc_r>
 80273f0:	b92a      	cbnz	r2, 80273fe <_realloc_r+0x24>
 80273f2:	f7fc f8eb 	bl	80235cc <_free_r>
 80273f6:	4625      	mov	r5, r4
 80273f8:	4628      	mov	r0, r5
 80273fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80273fe:	f000 fa1d 	bl	802783c <_malloc_usable_size_r>
 8027402:	4284      	cmp	r4, r0
 8027404:	4607      	mov	r7, r0
 8027406:	d802      	bhi.n	802740e <_realloc_r+0x34>
 8027408:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 802740c:	d812      	bhi.n	8027434 <_realloc_r+0x5a>
 802740e:	4621      	mov	r1, r4
 8027410:	4640      	mov	r0, r8
 8027412:	f7fc f947 	bl	80236a4 <_malloc_r>
 8027416:	4605      	mov	r5, r0
 8027418:	2800      	cmp	r0, #0
 802741a:	d0ed      	beq.n	80273f8 <_realloc_r+0x1e>
 802741c:	42bc      	cmp	r4, r7
 802741e:	4622      	mov	r2, r4
 8027420:	4631      	mov	r1, r6
 8027422:	bf28      	it	cs
 8027424:	463a      	movcs	r2, r7
 8027426:	f7fc f88b 	bl	8023540 <memcpy>
 802742a:	4631      	mov	r1, r6
 802742c:	4640      	mov	r0, r8
 802742e:	f7fc f8cd 	bl	80235cc <_free_r>
 8027432:	e7e1      	b.n	80273f8 <_realloc_r+0x1e>
 8027434:	4635      	mov	r5, r6
 8027436:	e7df      	b.n	80273f8 <_realloc_r+0x1e>

08027438 <__ssputs_r>:
 8027438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802743c:	688e      	ldr	r6, [r1, #8]
 802743e:	429e      	cmp	r6, r3
 8027440:	4682      	mov	sl, r0
 8027442:	460c      	mov	r4, r1
 8027444:	4690      	mov	r8, r2
 8027446:	461f      	mov	r7, r3
 8027448:	d838      	bhi.n	80274bc <__ssputs_r+0x84>
 802744a:	898a      	ldrh	r2, [r1, #12]
 802744c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8027450:	d032      	beq.n	80274b8 <__ssputs_r+0x80>
 8027452:	6825      	ldr	r5, [r4, #0]
 8027454:	6909      	ldr	r1, [r1, #16]
 8027456:	eba5 0901 	sub.w	r9, r5, r1
 802745a:	6965      	ldr	r5, [r4, #20]
 802745c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8027460:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8027464:	3301      	adds	r3, #1
 8027466:	444b      	add	r3, r9
 8027468:	106d      	asrs	r5, r5, #1
 802746a:	429d      	cmp	r5, r3
 802746c:	bf38      	it	cc
 802746e:	461d      	movcc	r5, r3
 8027470:	0553      	lsls	r3, r2, #21
 8027472:	d531      	bpl.n	80274d8 <__ssputs_r+0xa0>
 8027474:	4629      	mov	r1, r5
 8027476:	f7fc f915 	bl	80236a4 <_malloc_r>
 802747a:	4606      	mov	r6, r0
 802747c:	b950      	cbnz	r0, 8027494 <__ssputs_r+0x5c>
 802747e:	230c      	movs	r3, #12
 8027480:	f8ca 3000 	str.w	r3, [sl]
 8027484:	89a3      	ldrh	r3, [r4, #12]
 8027486:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802748a:	81a3      	strh	r3, [r4, #12]
 802748c:	f04f 30ff 	mov.w	r0, #4294967295
 8027490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027494:	6921      	ldr	r1, [r4, #16]
 8027496:	464a      	mov	r2, r9
 8027498:	f7fc f852 	bl	8023540 <memcpy>
 802749c:	89a3      	ldrh	r3, [r4, #12]
 802749e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80274a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80274a6:	81a3      	strh	r3, [r4, #12]
 80274a8:	6126      	str	r6, [r4, #16]
 80274aa:	6165      	str	r5, [r4, #20]
 80274ac:	444e      	add	r6, r9
 80274ae:	eba5 0509 	sub.w	r5, r5, r9
 80274b2:	6026      	str	r6, [r4, #0]
 80274b4:	60a5      	str	r5, [r4, #8]
 80274b6:	463e      	mov	r6, r7
 80274b8:	42be      	cmp	r6, r7
 80274ba:	d900      	bls.n	80274be <__ssputs_r+0x86>
 80274bc:	463e      	mov	r6, r7
 80274be:	6820      	ldr	r0, [r4, #0]
 80274c0:	4632      	mov	r2, r6
 80274c2:	4641      	mov	r1, r8
 80274c4:	f7fc f84a 	bl	802355c <memmove>
 80274c8:	68a3      	ldr	r3, [r4, #8]
 80274ca:	1b9b      	subs	r3, r3, r6
 80274cc:	60a3      	str	r3, [r4, #8]
 80274ce:	6823      	ldr	r3, [r4, #0]
 80274d0:	4433      	add	r3, r6
 80274d2:	6023      	str	r3, [r4, #0]
 80274d4:	2000      	movs	r0, #0
 80274d6:	e7db      	b.n	8027490 <__ssputs_r+0x58>
 80274d8:	462a      	mov	r2, r5
 80274da:	f7ff ff7e 	bl	80273da <_realloc_r>
 80274de:	4606      	mov	r6, r0
 80274e0:	2800      	cmp	r0, #0
 80274e2:	d1e1      	bne.n	80274a8 <__ssputs_r+0x70>
 80274e4:	6921      	ldr	r1, [r4, #16]
 80274e6:	4650      	mov	r0, sl
 80274e8:	f7fc f870 	bl	80235cc <_free_r>
 80274ec:	e7c7      	b.n	802747e <__ssputs_r+0x46>
	...

080274f0 <_svfiprintf_r>:
 80274f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80274f4:	4698      	mov	r8, r3
 80274f6:	898b      	ldrh	r3, [r1, #12]
 80274f8:	061b      	lsls	r3, r3, #24
 80274fa:	b09d      	sub	sp, #116	; 0x74
 80274fc:	4607      	mov	r7, r0
 80274fe:	460d      	mov	r5, r1
 8027500:	4614      	mov	r4, r2
 8027502:	d50e      	bpl.n	8027522 <_svfiprintf_r+0x32>
 8027504:	690b      	ldr	r3, [r1, #16]
 8027506:	b963      	cbnz	r3, 8027522 <_svfiprintf_r+0x32>
 8027508:	2140      	movs	r1, #64	; 0x40
 802750a:	f7fc f8cb 	bl	80236a4 <_malloc_r>
 802750e:	6028      	str	r0, [r5, #0]
 8027510:	6128      	str	r0, [r5, #16]
 8027512:	b920      	cbnz	r0, 802751e <_svfiprintf_r+0x2e>
 8027514:	230c      	movs	r3, #12
 8027516:	603b      	str	r3, [r7, #0]
 8027518:	f04f 30ff 	mov.w	r0, #4294967295
 802751c:	e0d1      	b.n	80276c2 <_svfiprintf_r+0x1d2>
 802751e:	2340      	movs	r3, #64	; 0x40
 8027520:	616b      	str	r3, [r5, #20]
 8027522:	2300      	movs	r3, #0
 8027524:	9309      	str	r3, [sp, #36]	; 0x24
 8027526:	2320      	movs	r3, #32
 8027528:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802752c:	f8cd 800c 	str.w	r8, [sp, #12]
 8027530:	2330      	movs	r3, #48	; 0x30
 8027532:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80276dc <_svfiprintf_r+0x1ec>
 8027536:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802753a:	f04f 0901 	mov.w	r9, #1
 802753e:	4623      	mov	r3, r4
 8027540:	469a      	mov	sl, r3
 8027542:	f813 2b01 	ldrb.w	r2, [r3], #1
 8027546:	b10a      	cbz	r2, 802754c <_svfiprintf_r+0x5c>
 8027548:	2a25      	cmp	r2, #37	; 0x25
 802754a:	d1f9      	bne.n	8027540 <_svfiprintf_r+0x50>
 802754c:	ebba 0b04 	subs.w	fp, sl, r4
 8027550:	d00b      	beq.n	802756a <_svfiprintf_r+0x7a>
 8027552:	465b      	mov	r3, fp
 8027554:	4622      	mov	r2, r4
 8027556:	4629      	mov	r1, r5
 8027558:	4638      	mov	r0, r7
 802755a:	f7ff ff6d 	bl	8027438 <__ssputs_r>
 802755e:	3001      	adds	r0, #1
 8027560:	f000 80aa 	beq.w	80276b8 <_svfiprintf_r+0x1c8>
 8027564:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8027566:	445a      	add	r2, fp
 8027568:	9209      	str	r2, [sp, #36]	; 0x24
 802756a:	f89a 3000 	ldrb.w	r3, [sl]
 802756e:	2b00      	cmp	r3, #0
 8027570:	f000 80a2 	beq.w	80276b8 <_svfiprintf_r+0x1c8>
 8027574:	2300      	movs	r3, #0
 8027576:	f04f 32ff 	mov.w	r2, #4294967295
 802757a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802757e:	f10a 0a01 	add.w	sl, sl, #1
 8027582:	9304      	str	r3, [sp, #16]
 8027584:	9307      	str	r3, [sp, #28]
 8027586:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802758a:	931a      	str	r3, [sp, #104]	; 0x68
 802758c:	4654      	mov	r4, sl
 802758e:	2205      	movs	r2, #5
 8027590:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027594:	4851      	ldr	r0, [pc, #324]	; (80276dc <_svfiprintf_r+0x1ec>)
 8027596:	f7d8 fe1b 	bl	80001d0 <memchr>
 802759a:	9a04      	ldr	r2, [sp, #16]
 802759c:	b9d8      	cbnz	r0, 80275d6 <_svfiprintf_r+0xe6>
 802759e:	06d0      	lsls	r0, r2, #27
 80275a0:	bf44      	itt	mi
 80275a2:	2320      	movmi	r3, #32
 80275a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80275a8:	0711      	lsls	r1, r2, #28
 80275aa:	bf44      	itt	mi
 80275ac:	232b      	movmi	r3, #43	; 0x2b
 80275ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80275b2:	f89a 3000 	ldrb.w	r3, [sl]
 80275b6:	2b2a      	cmp	r3, #42	; 0x2a
 80275b8:	d015      	beq.n	80275e6 <_svfiprintf_r+0xf6>
 80275ba:	9a07      	ldr	r2, [sp, #28]
 80275bc:	4654      	mov	r4, sl
 80275be:	2000      	movs	r0, #0
 80275c0:	f04f 0c0a 	mov.w	ip, #10
 80275c4:	4621      	mov	r1, r4
 80275c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80275ca:	3b30      	subs	r3, #48	; 0x30
 80275cc:	2b09      	cmp	r3, #9
 80275ce:	d94e      	bls.n	802766e <_svfiprintf_r+0x17e>
 80275d0:	b1b0      	cbz	r0, 8027600 <_svfiprintf_r+0x110>
 80275d2:	9207      	str	r2, [sp, #28]
 80275d4:	e014      	b.n	8027600 <_svfiprintf_r+0x110>
 80275d6:	eba0 0308 	sub.w	r3, r0, r8
 80275da:	fa09 f303 	lsl.w	r3, r9, r3
 80275de:	4313      	orrs	r3, r2
 80275e0:	9304      	str	r3, [sp, #16]
 80275e2:	46a2      	mov	sl, r4
 80275e4:	e7d2      	b.n	802758c <_svfiprintf_r+0x9c>
 80275e6:	9b03      	ldr	r3, [sp, #12]
 80275e8:	1d19      	adds	r1, r3, #4
 80275ea:	681b      	ldr	r3, [r3, #0]
 80275ec:	9103      	str	r1, [sp, #12]
 80275ee:	2b00      	cmp	r3, #0
 80275f0:	bfbb      	ittet	lt
 80275f2:	425b      	neglt	r3, r3
 80275f4:	f042 0202 	orrlt.w	r2, r2, #2
 80275f8:	9307      	strge	r3, [sp, #28]
 80275fa:	9307      	strlt	r3, [sp, #28]
 80275fc:	bfb8      	it	lt
 80275fe:	9204      	strlt	r2, [sp, #16]
 8027600:	7823      	ldrb	r3, [r4, #0]
 8027602:	2b2e      	cmp	r3, #46	; 0x2e
 8027604:	d10c      	bne.n	8027620 <_svfiprintf_r+0x130>
 8027606:	7863      	ldrb	r3, [r4, #1]
 8027608:	2b2a      	cmp	r3, #42	; 0x2a
 802760a:	d135      	bne.n	8027678 <_svfiprintf_r+0x188>
 802760c:	9b03      	ldr	r3, [sp, #12]
 802760e:	1d1a      	adds	r2, r3, #4
 8027610:	681b      	ldr	r3, [r3, #0]
 8027612:	9203      	str	r2, [sp, #12]
 8027614:	2b00      	cmp	r3, #0
 8027616:	bfb8      	it	lt
 8027618:	f04f 33ff 	movlt.w	r3, #4294967295
 802761c:	3402      	adds	r4, #2
 802761e:	9305      	str	r3, [sp, #20]
 8027620:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80276ec <_svfiprintf_r+0x1fc>
 8027624:	7821      	ldrb	r1, [r4, #0]
 8027626:	2203      	movs	r2, #3
 8027628:	4650      	mov	r0, sl
 802762a:	f7d8 fdd1 	bl	80001d0 <memchr>
 802762e:	b140      	cbz	r0, 8027642 <_svfiprintf_r+0x152>
 8027630:	2340      	movs	r3, #64	; 0x40
 8027632:	eba0 000a 	sub.w	r0, r0, sl
 8027636:	fa03 f000 	lsl.w	r0, r3, r0
 802763a:	9b04      	ldr	r3, [sp, #16]
 802763c:	4303      	orrs	r3, r0
 802763e:	3401      	adds	r4, #1
 8027640:	9304      	str	r3, [sp, #16]
 8027642:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027646:	4826      	ldr	r0, [pc, #152]	; (80276e0 <_svfiprintf_r+0x1f0>)
 8027648:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802764c:	2206      	movs	r2, #6
 802764e:	f7d8 fdbf 	bl	80001d0 <memchr>
 8027652:	2800      	cmp	r0, #0
 8027654:	d038      	beq.n	80276c8 <_svfiprintf_r+0x1d8>
 8027656:	4b23      	ldr	r3, [pc, #140]	; (80276e4 <_svfiprintf_r+0x1f4>)
 8027658:	bb1b      	cbnz	r3, 80276a2 <_svfiprintf_r+0x1b2>
 802765a:	9b03      	ldr	r3, [sp, #12]
 802765c:	3307      	adds	r3, #7
 802765e:	f023 0307 	bic.w	r3, r3, #7
 8027662:	3308      	adds	r3, #8
 8027664:	9303      	str	r3, [sp, #12]
 8027666:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027668:	4433      	add	r3, r6
 802766a:	9309      	str	r3, [sp, #36]	; 0x24
 802766c:	e767      	b.n	802753e <_svfiprintf_r+0x4e>
 802766e:	fb0c 3202 	mla	r2, ip, r2, r3
 8027672:	460c      	mov	r4, r1
 8027674:	2001      	movs	r0, #1
 8027676:	e7a5      	b.n	80275c4 <_svfiprintf_r+0xd4>
 8027678:	2300      	movs	r3, #0
 802767a:	3401      	adds	r4, #1
 802767c:	9305      	str	r3, [sp, #20]
 802767e:	4619      	mov	r1, r3
 8027680:	f04f 0c0a 	mov.w	ip, #10
 8027684:	4620      	mov	r0, r4
 8027686:	f810 2b01 	ldrb.w	r2, [r0], #1
 802768a:	3a30      	subs	r2, #48	; 0x30
 802768c:	2a09      	cmp	r2, #9
 802768e:	d903      	bls.n	8027698 <_svfiprintf_r+0x1a8>
 8027690:	2b00      	cmp	r3, #0
 8027692:	d0c5      	beq.n	8027620 <_svfiprintf_r+0x130>
 8027694:	9105      	str	r1, [sp, #20]
 8027696:	e7c3      	b.n	8027620 <_svfiprintf_r+0x130>
 8027698:	fb0c 2101 	mla	r1, ip, r1, r2
 802769c:	4604      	mov	r4, r0
 802769e:	2301      	movs	r3, #1
 80276a0:	e7f0      	b.n	8027684 <_svfiprintf_r+0x194>
 80276a2:	ab03      	add	r3, sp, #12
 80276a4:	9300      	str	r3, [sp, #0]
 80276a6:	462a      	mov	r2, r5
 80276a8:	4b0f      	ldr	r3, [pc, #60]	; (80276e8 <_svfiprintf_r+0x1f8>)
 80276aa:	a904      	add	r1, sp, #16
 80276ac:	4638      	mov	r0, r7
 80276ae:	f7fc fa67 	bl	8023b80 <_printf_float>
 80276b2:	1c42      	adds	r2, r0, #1
 80276b4:	4606      	mov	r6, r0
 80276b6:	d1d6      	bne.n	8027666 <_svfiprintf_r+0x176>
 80276b8:	89ab      	ldrh	r3, [r5, #12]
 80276ba:	065b      	lsls	r3, r3, #25
 80276bc:	f53f af2c 	bmi.w	8027518 <_svfiprintf_r+0x28>
 80276c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80276c2:	b01d      	add	sp, #116	; 0x74
 80276c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80276c8:	ab03      	add	r3, sp, #12
 80276ca:	9300      	str	r3, [sp, #0]
 80276cc:	462a      	mov	r2, r5
 80276ce:	4b06      	ldr	r3, [pc, #24]	; (80276e8 <_svfiprintf_r+0x1f8>)
 80276d0:	a904      	add	r1, sp, #16
 80276d2:	4638      	mov	r0, r7
 80276d4:	f7fc fcf8 	bl	80240c8 <_printf_i>
 80276d8:	e7eb      	b.n	80276b2 <_svfiprintf_r+0x1c2>
 80276da:	bf00      	nop
 80276dc:	08029fb0 	.word	0x08029fb0
 80276e0:	08029fba 	.word	0x08029fba
 80276e4:	08023b81 	.word	0x08023b81
 80276e8:	08027439 	.word	0x08027439
 80276ec:	08029fb6 	.word	0x08029fb6

080276f0 <__sread>:
 80276f0:	b510      	push	{r4, lr}
 80276f2:	460c      	mov	r4, r1
 80276f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80276f8:	f000 f8a8 	bl	802784c <_read_r>
 80276fc:	2800      	cmp	r0, #0
 80276fe:	bfab      	itete	ge
 8027700:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8027702:	89a3      	ldrhlt	r3, [r4, #12]
 8027704:	181b      	addge	r3, r3, r0
 8027706:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802770a:	bfac      	ite	ge
 802770c:	6563      	strge	r3, [r4, #84]	; 0x54
 802770e:	81a3      	strhlt	r3, [r4, #12]
 8027710:	bd10      	pop	{r4, pc}

08027712 <__swrite>:
 8027712:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027716:	461f      	mov	r7, r3
 8027718:	898b      	ldrh	r3, [r1, #12]
 802771a:	05db      	lsls	r3, r3, #23
 802771c:	4605      	mov	r5, r0
 802771e:	460c      	mov	r4, r1
 8027720:	4616      	mov	r6, r2
 8027722:	d505      	bpl.n	8027730 <__swrite+0x1e>
 8027724:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027728:	2302      	movs	r3, #2
 802772a:	2200      	movs	r2, #0
 802772c:	f000 f874 	bl	8027818 <_lseek_r>
 8027730:	89a3      	ldrh	r3, [r4, #12]
 8027732:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8027736:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802773a:	81a3      	strh	r3, [r4, #12]
 802773c:	4632      	mov	r2, r6
 802773e:	463b      	mov	r3, r7
 8027740:	4628      	mov	r0, r5
 8027742:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8027746:	f000 b823 	b.w	8027790 <_write_r>

0802774a <__sseek>:
 802774a:	b510      	push	{r4, lr}
 802774c:	460c      	mov	r4, r1
 802774e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027752:	f000 f861 	bl	8027818 <_lseek_r>
 8027756:	1c43      	adds	r3, r0, #1
 8027758:	89a3      	ldrh	r3, [r4, #12]
 802775a:	bf15      	itete	ne
 802775c:	6560      	strne	r0, [r4, #84]	; 0x54
 802775e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8027762:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8027766:	81a3      	strheq	r3, [r4, #12]
 8027768:	bf18      	it	ne
 802776a:	81a3      	strhne	r3, [r4, #12]
 802776c:	bd10      	pop	{r4, pc}

0802776e <__sclose>:
 802776e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027772:	f000 b81f 	b.w	80277b4 <_close_r>

08027776 <__ascii_wctomb>:
 8027776:	b149      	cbz	r1, 802778c <__ascii_wctomb+0x16>
 8027778:	2aff      	cmp	r2, #255	; 0xff
 802777a:	bf85      	ittet	hi
 802777c:	238a      	movhi	r3, #138	; 0x8a
 802777e:	6003      	strhi	r3, [r0, #0]
 8027780:	700a      	strbls	r2, [r1, #0]
 8027782:	f04f 30ff 	movhi.w	r0, #4294967295
 8027786:	bf98      	it	ls
 8027788:	2001      	movls	r0, #1
 802778a:	4770      	bx	lr
 802778c:	4608      	mov	r0, r1
 802778e:	4770      	bx	lr

08027790 <_write_r>:
 8027790:	b538      	push	{r3, r4, r5, lr}
 8027792:	4d07      	ldr	r5, [pc, #28]	; (80277b0 <_write_r+0x20>)
 8027794:	4604      	mov	r4, r0
 8027796:	4608      	mov	r0, r1
 8027798:	4611      	mov	r1, r2
 802779a:	2200      	movs	r2, #0
 802779c:	602a      	str	r2, [r5, #0]
 802779e:	461a      	mov	r2, r3
 80277a0:	f7e1 fce9 	bl	8009176 <_write>
 80277a4:	1c43      	adds	r3, r0, #1
 80277a6:	d102      	bne.n	80277ae <_write_r+0x1e>
 80277a8:	682b      	ldr	r3, [r5, #0]
 80277aa:	b103      	cbz	r3, 80277ae <_write_r+0x1e>
 80277ac:	6023      	str	r3, [r4, #0]
 80277ae:	bd38      	pop	{r3, r4, r5, pc}
 80277b0:	20003ff8 	.word	0x20003ff8

080277b4 <_close_r>:
 80277b4:	b538      	push	{r3, r4, r5, lr}
 80277b6:	4d06      	ldr	r5, [pc, #24]	; (80277d0 <_close_r+0x1c>)
 80277b8:	2300      	movs	r3, #0
 80277ba:	4604      	mov	r4, r0
 80277bc:	4608      	mov	r0, r1
 80277be:	602b      	str	r3, [r5, #0]
 80277c0:	f7e1 fcf5 	bl	80091ae <_close>
 80277c4:	1c43      	adds	r3, r0, #1
 80277c6:	d102      	bne.n	80277ce <_close_r+0x1a>
 80277c8:	682b      	ldr	r3, [r5, #0]
 80277ca:	b103      	cbz	r3, 80277ce <_close_r+0x1a>
 80277cc:	6023      	str	r3, [r4, #0]
 80277ce:	bd38      	pop	{r3, r4, r5, pc}
 80277d0:	20003ff8 	.word	0x20003ff8

080277d4 <_fstat_r>:
 80277d4:	b538      	push	{r3, r4, r5, lr}
 80277d6:	4d07      	ldr	r5, [pc, #28]	; (80277f4 <_fstat_r+0x20>)
 80277d8:	2300      	movs	r3, #0
 80277da:	4604      	mov	r4, r0
 80277dc:	4608      	mov	r0, r1
 80277de:	4611      	mov	r1, r2
 80277e0:	602b      	str	r3, [r5, #0]
 80277e2:	f7e1 fcf0 	bl	80091c6 <_fstat>
 80277e6:	1c43      	adds	r3, r0, #1
 80277e8:	d102      	bne.n	80277f0 <_fstat_r+0x1c>
 80277ea:	682b      	ldr	r3, [r5, #0]
 80277ec:	b103      	cbz	r3, 80277f0 <_fstat_r+0x1c>
 80277ee:	6023      	str	r3, [r4, #0]
 80277f0:	bd38      	pop	{r3, r4, r5, pc}
 80277f2:	bf00      	nop
 80277f4:	20003ff8 	.word	0x20003ff8

080277f8 <_isatty_r>:
 80277f8:	b538      	push	{r3, r4, r5, lr}
 80277fa:	4d06      	ldr	r5, [pc, #24]	; (8027814 <_isatty_r+0x1c>)
 80277fc:	2300      	movs	r3, #0
 80277fe:	4604      	mov	r4, r0
 8027800:	4608      	mov	r0, r1
 8027802:	602b      	str	r3, [r5, #0]
 8027804:	f7e1 fcef 	bl	80091e6 <_isatty>
 8027808:	1c43      	adds	r3, r0, #1
 802780a:	d102      	bne.n	8027812 <_isatty_r+0x1a>
 802780c:	682b      	ldr	r3, [r5, #0]
 802780e:	b103      	cbz	r3, 8027812 <_isatty_r+0x1a>
 8027810:	6023      	str	r3, [r4, #0]
 8027812:	bd38      	pop	{r3, r4, r5, pc}
 8027814:	20003ff8 	.word	0x20003ff8

08027818 <_lseek_r>:
 8027818:	b538      	push	{r3, r4, r5, lr}
 802781a:	4d07      	ldr	r5, [pc, #28]	; (8027838 <_lseek_r+0x20>)
 802781c:	4604      	mov	r4, r0
 802781e:	4608      	mov	r0, r1
 8027820:	4611      	mov	r1, r2
 8027822:	2200      	movs	r2, #0
 8027824:	602a      	str	r2, [r5, #0]
 8027826:	461a      	mov	r2, r3
 8027828:	f7e1 fce8 	bl	80091fc <_lseek>
 802782c:	1c43      	adds	r3, r0, #1
 802782e:	d102      	bne.n	8027836 <_lseek_r+0x1e>
 8027830:	682b      	ldr	r3, [r5, #0]
 8027832:	b103      	cbz	r3, 8027836 <_lseek_r+0x1e>
 8027834:	6023      	str	r3, [r4, #0]
 8027836:	bd38      	pop	{r3, r4, r5, pc}
 8027838:	20003ff8 	.word	0x20003ff8

0802783c <_malloc_usable_size_r>:
 802783c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8027840:	1f18      	subs	r0, r3, #4
 8027842:	2b00      	cmp	r3, #0
 8027844:	bfbc      	itt	lt
 8027846:	580b      	ldrlt	r3, [r1, r0]
 8027848:	18c0      	addlt	r0, r0, r3
 802784a:	4770      	bx	lr

0802784c <_read_r>:
 802784c:	b538      	push	{r3, r4, r5, lr}
 802784e:	4d07      	ldr	r5, [pc, #28]	; (802786c <_read_r+0x20>)
 8027850:	4604      	mov	r4, r0
 8027852:	4608      	mov	r0, r1
 8027854:	4611      	mov	r1, r2
 8027856:	2200      	movs	r2, #0
 8027858:	602a      	str	r2, [r5, #0]
 802785a:	461a      	mov	r2, r3
 802785c:	f7e1 fc6e 	bl	800913c <_read>
 8027860:	1c43      	adds	r3, r0, #1
 8027862:	d102      	bne.n	802786a <_read_r+0x1e>
 8027864:	682b      	ldr	r3, [r5, #0]
 8027866:	b103      	cbz	r3, 802786a <_read_r+0x1e>
 8027868:	6023      	str	r3, [r4, #0]
 802786a:	bd38      	pop	{r3, r4, r5, pc}
 802786c:	20003ff8 	.word	0x20003ff8

08027870 <_init>:
 8027870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027872:	bf00      	nop
 8027874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8027876:	bc08      	pop	{r3}
 8027878:	469e      	mov	lr, r3
 802787a:	4770      	bx	lr

0802787c <_fini>:
 802787c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802787e:	bf00      	nop
 8027880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8027882:	bc08      	pop	{r3}
 8027884:	469e      	mov	lr, r3
 8027886:	4770      	bx	lr
